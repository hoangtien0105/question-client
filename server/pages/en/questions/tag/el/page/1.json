{"pageProps":{"data":{"count":1,"rows":[{"id":490,"title":"Identifying and solving javax.el.PropertyNotFoundException: Target Unreachable","slug":"identifying-and-solving-javax.el.propertynotfoundexception:-target-unreachable-1657388164753","postType":"QUESTION","createdAt":"2022-07-09T17:36:04.000Z","updatedAt":"2022-07-09T17:36:04.000Z","tags":[{"id":2460,"name":"el","slug":"el","createdAt":"2022-07-09T17:36:04.000Z","updatedAt":"2022-07-09T17:36:04.000Z","Questions_Tags":{"questionId":490,"tagId":2460}}]}]},"slug":"el","page":"1","answers":{"490":["\n&lt;h2 id=&quot;target-unreachable-identifier-bean-resolved-to-null-3zox&quot;&gt;1. Target Unreachable, identifier &apos;bean&apos; resolved to null&lt;/h2&gt;\n&lt;p&gt;This boils down to that the managed bean instance itself could not be found by exactly that identifier (managed bean name) in EL like so &lt;code&gt;#{bean}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Identifying the cause can be broken down into three steps:&lt;/p&gt;\n&lt;p&gt;a. Who&apos;s managing the bean?&lt;br&gt;\nb. What&apos;s the (default) managed bean name?&lt;br&gt;\nc. Where&apos;s the backing bean class?&lt;/p&gt;\n&lt;h3 id=&quot;a.whos-managing-the-bean-r4jf&quot;&gt;1a. Who&apos;s managing the bean?&lt;/h3&gt;\n&lt;p&gt;First step would be checking which bean management framework is responsible for managing the bean instance. Is it &lt;strong&gt;CDI&lt;/strong&gt; via &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/inject/Named.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@Named&lt;/code&gt;&lt;/a&gt;? Or is it &lt;strong&gt;JSF&lt;/strong&gt; via &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/bean/ManagedBean.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ManagedBean&lt;/code&gt;&lt;/a&gt;? Or is it &lt;strong&gt;Spring&lt;/strong&gt; via &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;? Can you make sure that you&apos;re not mixing multiple bean management framework specific annotations on the very same backing bean class? E.g. &lt;code&gt;@Named @ManagedBean&lt;/code&gt;, &lt;code&gt;@Named @Component&lt;/code&gt;, or &lt;code&gt;@ManagedBean @Component&lt;/code&gt;. This is wrong. The bean must be managed by at most one bean management framework and that framework must be properly configured. If you already have no idea which to choose, head to &lt;a href=&quot;https://stackoverflow.com/questions/4347374/backing-beans-managedbean-or-cdi-beans-named/4347707#4347707&quot;&gt;Backing beans (@ManagedBean) or CDI Beans (@Named)?&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/18387993/spring-jsf-integration-how-to-inject-a-spring-component-service-in-jsf-managed/18388289#18388289&quot;&gt;Spring JSF integration: how to inject a Spring component/service in JSF managed bean?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In case it&apos;s &lt;strong&gt;CDI&lt;/strong&gt; who&apos;s managing the bean via &lt;code&gt;@Named&lt;/code&gt;, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;CDI 1.0 (Java EE 6) requires an &lt;code&gt;/WEB-INF/beans.xml&lt;/code&gt; file in order to enable CDI in WAR. It can be &lt;em&gt;empty&lt;/em&gt; or it can have just the following content:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt; \n         &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee\n                             http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javaee/7/tutorial/cdi-adv001.htm&quot; rel=&quot;noreferrer&quot;&gt;CDI 1.1 (Java EE 7)&lt;/a&gt; without any &lt;code&gt;beans.xml&lt;/code&gt;, or an empty &lt;code&gt;beans.xml&lt;/code&gt; file, or with the above CDI 1.0 compatible &lt;code&gt;beans.xml&lt;/code&gt; will behave the same as CDI 1.0. When there&apos;s a CDI 1.1 compatible &lt;code&gt;beans.xml&lt;/code&gt; with an explicit &lt;code&gt;version=&quot;1.1&quot;&lt;/code&gt;, then it will by default only register &lt;code&gt;@Named&lt;/code&gt; beans &lt;em&gt;with&lt;/em&gt; an explicit CDI scope annotation such as &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@RequestScoped&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/view/ViewScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ViewScoped&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/SessionScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@SessionScoped&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/ApplicationScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ApplicationScoped&lt;/code&gt;&lt;/a&gt;, etc. In case you intend to register all beans as CDI managed beans, even those without an explicit CDI scope, use the below CDI 1.1 compatible &lt;code&gt;/WEB-INF/beans.xml&lt;/code&gt; with &lt;code&gt;bean-discovery-mode=&quot;all&quot;&lt;/code&gt; set (the default is &lt;code&gt;bean-discovery-mode=&quot;annotated&quot;&lt;/code&gt;).&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee \n                             http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean-discovery-mode&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using CDI 1.1+ with &lt;code&gt;bean-discovery-mode=&quot;annotated&quot;&lt;/code&gt; (default), make sure that you didn&apos;t accidentally import a JSF scope such as &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/faces/bean/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.faces.bean.RequestScoped&lt;/code&gt;&lt;/a&gt; instead of a CDI scope &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.enterprise.context.RequestScoped&lt;/code&gt;&lt;/a&gt;. Watch out with IDE autocomplete.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using Mojarra 2.3.0-2.3.2 and CDI 1.1+ with &lt;code&gt;bean-discovery-mode=&quot;annotated&quot;&lt;/code&gt; (default), then you need to upgrade Mojarra to 2.3.3 or newer due to a &lt;a href=&quot;https://github.com/javaserverfaces/mojarra/issues/4264&quot; rel=&quot;noreferrer&quot;&gt;bug&lt;/a&gt;. In case you can&apos;t upgrade, then you need either to set &lt;code&gt;bean-discovery-mode=&quot;all&quot;&lt;/code&gt; in &lt;code&gt;beans.xml&lt;/code&gt;, or to put the JSF 2.3 specific &lt;code&gt;@FacesConfig&lt;/code&gt; annotation on an arbitrary class in the WAR (generally some sort of an application scoped startup class).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using JSF 2.3 on a Servlet 4.0 container with a &lt;code&gt;web.xml&lt;/code&gt; declared conform Servlet 4.0, then you need to explicitly put the JSF 2.3 specific &lt;code&gt;@FacesConfig&lt;/code&gt; annotation on an arbitrary class in the WAR (generally some sort of an application scoped startup class). This is not necessary in Servlet 3.x.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using CDI 3.0, the first version with package renamed from &lt;code&gt;javax.*&lt;/code&gt; to &lt;code&gt;jakarta.*&lt;/code&gt;, then you need to ensure that all deployment descriptor files &lt;code&gt;beans.xml&lt;/code&gt;, &lt;code&gt;web.xml&lt;/code&gt;, &lt;code&gt;faces-config.xml&lt;/code&gt; are conform &lt;a href=&quot;https://jakarta.ee/xml/ns/jakartaee/&quot; rel=&quot;noreferrer&quot;&gt;the new &lt;code&gt;jakartaee&lt;/code&gt; schemas&lt;/a&gt; and thus not conform the old &lt;code&gt;javaee&lt;/code&gt; schemes.&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jakarta.ee/xml/ns/jakartaee&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jakarta.ee/xml/ns/jakartaee \n                             https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean-discovery-mode&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Non-JEE containers like Tomcat and Jetty doesn&apos;t ship with CDI bundled. You need to install it manually. It&apos;s a bit more work than just adding the library JAR(s). For Tomcat, make sure that you follow the instructions in this answer: &lt;a href=&quot;https://stackoverflow.com/questions/18995951/how-to-install-and-use-cdi-on-tomcat/19003725#19003725&quot;&gt;How to install and use CDI on Tomcat?&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your runtime classpath is clean and free of duplicates in CDI API related JARs. Make sure that you&apos;re not mixing multiple CDI implementations (Weld, OpenWebBeans, etc). Make sure that you don&apos;t provide another CDI or even Java EE API JAR file along webapp when the target container already bundles CDI API out the box.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re packaging CDI managed beans for JSF views in a JAR, then make sure that the JAR has at least a valid &lt;code&gt;/META-INF/beans.xml&lt;/code&gt; (which can be kept empty).&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In case it&apos;s &lt;strong&gt;JSF&lt;/strong&gt; who&apos;s managing the bean via the since 2.3 deprecated &lt;code&gt;@ManagedBean&lt;/code&gt;, and you can&apos;t migrate to CDI, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;faces-config.xml&lt;/code&gt; root declaration is compatible with JSF 2.0. So the XSD file and the &lt;code&gt;version&lt;/code&gt; must &lt;strong&gt;at least&lt;/strong&gt; specify JSF 2.0 or higher and thus not 1.x.&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;faces-config&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For JSF 2.1, just replace &lt;code&gt;2_0&lt;/code&gt; and &lt;code&gt;2.0&lt;/code&gt; by &lt;code&gt;2_1&lt;/code&gt; and &lt;code&gt;2.1&lt;/code&gt; respectively.&lt;/p&gt;\n&lt;p&gt;If you&apos;re on JSF 2.2 or higher, then make sure you&apos;re using &lt;code&gt;xmlns.jcp.org&lt;/code&gt; namespaces instead of &lt;code&gt;java.sun.com&lt;/code&gt; over all place.&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;faces-config&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For JSF 2.3, just replace &lt;code&gt;2_2&lt;/code&gt; and &lt;code&gt;2.2&lt;/code&gt; by &lt;code&gt;2_3&lt;/code&gt; and &lt;code&gt;2.3&lt;/code&gt; respectively.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You didn&apos;t accidentally import &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.annotation.ManagedBean&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/bean/ManagedBean.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.faces.bean.ManagedBean&lt;/code&gt;&lt;/a&gt;. Watch out with IDE autocomplete, Eclipse is known to autosuggest the wrong one as first item in the list.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You didn&apos;t override the &lt;code&gt;@ManagedBean&lt;/code&gt; by a JSF 1.x style &lt;code&gt;&amp;lt;managed-bean&amp;gt;&lt;/code&gt; entry in &lt;code&gt;faces-config.xml&lt;/code&gt; on the very same backing bean class along with a different managed bean name. This one will have precedence over &lt;code&gt;@ManagedBean&lt;/code&gt;. Registering a managed bean in &lt;code&gt;faces-config.xml&lt;/code&gt; is not necessary since JSF 2.0, just remove it.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your runtime classpath is clean and free of duplicates in JSF API related JARs. Make sure that you&apos;re not mixing multiple JSF implementations (Mojarra and MyFaces). Make sure that you don&apos;t provide another JSF or even Java EE API JAR file along webapp when the target container already bundles JSF API out the box. See also &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;&quot;Installing JSF&quot; section of our JSF wiki page&lt;/a&gt; for JSF installation instructions. In case you intend to upgrade container-bundled JSF from the WAR on instead of in container itself, make sure that you&apos;ve instructed the target container to use WAR-bundled JSF API/impl.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re packaging JSF managed beans in a JAR, then make sure that the JAR has at least a JSF 2.0 compatible &lt;code&gt;/META-INF/faces-config.xml&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/7663818/how-to-reference-jsf-managed-beans-which-are-provided-in-a-jar-file/7663898#7663898&quot;&gt;How to reference JSF managed beans which are provided in a JAR file?&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re &lt;em&gt;actually&lt;/em&gt; using the jurassic JSF 1.x, and you can&apos;t upgrade, then you need to register the bean via &lt;code&gt;&amp;lt;managed-bean&amp;gt;&lt;/code&gt; in &lt;code&gt;faces-config.xml&lt;/code&gt; instead of &lt;code&gt;@ManagedBean&lt;/code&gt;. Don&apos;t forget to fix your project build path as such that you don&apos;t have JSF 2.x libraries anymore (so that the &lt;code&gt;@ManagedBean&lt;/code&gt; annotation wouldn&apos;t confusingly successfully compile).&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In case it&apos;s &lt;strong&gt;Spring&lt;/strong&gt; who&apos;s managing the bean via &lt;code&gt;@Component&lt;/code&gt;, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Spring is being installed and integrated as per &lt;a href=&quot;http://docs.spring.io/autorepo/docs/spring/current/spring-framework-reference/html/web-integration.html&quot; rel=&quot;noreferrer&quot;&gt;its documentation&lt;/a&gt;. Importantingly, you need to at least have this in &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And this in &lt;code&gt;faces-config.xml&lt;/code&gt;:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-resolver&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.jsf.el.SpringBeanFacesELResolver&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-resolver&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;(above is all I know with regard to Spring  I don&apos;t do Spring  feel free to edit/comment with other probable Spring related causes; e.g. some XML configuration related trouble)&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In case it&apos;s a &lt;strong&gt;repeater component&lt;/strong&gt; who&apos;s managing the (nested) bean via its &lt;code&gt;var&lt;/code&gt; attribute (e.g. &lt;code&gt;&amp;lt;h:dataTable var=&quot;item&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ui:repeat var=&quot;item&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p:tabView var=&quot;item&quot;&amp;gt;&lt;/code&gt;, etc) and you actually got a &quot;Target Unreachable, identifier &apos;item&apos; resolved to null&quot;, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;#{item}&lt;/code&gt; is not referenced in &lt;code&gt;binding&lt;/code&gt; attribtue of any child component. This is incorrect as &lt;code&gt;binding&lt;/code&gt; attribute runs during view build time, not during view render time. Moreover, there&apos;s physically only one component in the component tree which is simply reused during every iteration round. In other words, you should actually be using &lt;code&gt;binding=&quot;#{bean.component}&quot;&lt;/code&gt; instead of &lt;code&gt;binding=&quot;#{item.component}&quot;&lt;/code&gt;. But much better is to get rid of component bining to bean altogether and investigate/ask the proper approach for the problem you thought to solve this way. See also &lt;a href=&quot;https://stackoverflow.com/questions/14911158/how-does-the-binding-attribute-work-in-jsf-when-and-how-should-it-be-used&quot;&gt;How does the &apos;binding&apos; attribute work in JSF? When and how should it be used?&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3 id=&quot;b.whats-the-default-managed-bean-name-95af&quot;&gt;1b. What&apos;s the (default) managed bean name?&lt;/h3&gt;\n&lt;p&gt;Second step would be checking the registered managed bean name. JSF and Spring use conventions conform &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javaee/spec-136004.html&quot; rel=&quot;noreferrer&quot;&gt;JavaBeans specification&lt;/a&gt; while CDI has exceptions depending on CDI impl/version.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;FooBean&lt;/code&gt; backing bean class like below,&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@Named&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooBean&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will in all bean management frameworks have a default managed bean name of &lt;code&gt;#{fooBean}&lt;/code&gt;, as per JavaBeans specification.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;FOOBean&lt;/code&gt; backing bean class like below,&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@Named&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FOOBean&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;whose unqualified classname starts with at least two capitals will in JSF and Spring have a default managed bean name of exactly the unqualified class name &lt;code&gt;#{FOOBean}&lt;/code&gt;, also conform JavaBeans specificiation. In CDI, this is also the case in Weld versions released before June 2015, but not in Weld versions released after June 2015 (2.2.14/2.3.0.B1/3.0.0.A9) nor in OpenWebBeans due to &lt;a href=&quot;https://issues.jboss.org/browse/CDI-525&quot; rel=&quot;noreferrer&quot;&gt;an oversight in CDI spec&lt;/a&gt;. In those Weld versions and in all OWB versions it is only with the first character lowercased &lt;code&gt;#{fOOBean}&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you have explicitly specified a managed bean name &lt;code&gt;foo&lt;/code&gt; like below,&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@Named(&quot;foo&quot;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooBean&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or equivalently with &lt;code&gt;@ManagedBean(name=&quot;foo&quot;)&lt;/code&gt; or &lt;code&gt;@Component(&quot;foo&quot;)&lt;/code&gt;, then it will only be available by &lt;code&gt;#{foo}&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; by &lt;code&gt;#{fooBean}&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3 id=&quot;c.wheres-the-backing-bean-class-9nn3&quot;&gt;1c. Where&apos;s the backing bean class?&lt;/h3&gt;\n&lt;p&gt;Third step would be doublechecking if the backing bean class is at the right place in the built and deployed WAR file. Make sure that you&apos;ve properly performed a full clean, rebuild, redeploy and restart of the project and server in case you was actually busy writing code and impatiently pressing F5 in the browser. If still in vain, let the build system produce a WAR file, which you then extract and inspect with a ZIP tool. The compiled &lt;code&gt;.class&lt;/code&gt; file of the backing bean class must reside in its package structure in &lt;code&gt;/WEB-INF/classes&lt;/code&gt;. Or, when it&apos;s packaged as part of a JAR module, the JAR containing the compiled &lt;code&gt;.class&lt;/code&gt; file must reside in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; and thus not e.g. EAR&apos;s &lt;code&gt;/lib&lt;/code&gt; or elsewhere.&lt;/p&gt;\n&lt;p&gt;If you&apos;re using Eclipse, make sure that the backing bean class is in &lt;code&gt;src&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; &lt;code&gt;WebContent&lt;/code&gt;, and make sure that &lt;em&gt;Project &amp;gt; Build Automatically&lt;/em&gt; is enabled. If you&apos;re using Maven, make sure that the backing bean class is in &lt;code&gt;src/main/java&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; in &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/webapp&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If you&apos;re packaging the web application as part of an EAR with EJB+WAR(s), then you need to make sure that the backing bean classes are in WAR module and thus not in EAR module nor EJB module. The business tier (EJB) must be free of any web tier (WAR) related artifacts, so that the business tier is reusable across multiple different web tiers (JSF, JAX-RS, JSP/Servlet, etc).&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-entity-returned-null-4eqc&quot;&gt;2. Target Unreachable, &apos;entity&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This boils down to that the &lt;em&gt;nested&lt;/em&gt; property &lt;code&gt;entity&lt;/code&gt; as in &lt;code&gt;#{bean.entity.property}&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt;. This usually only exposes when JSF needs to &lt;strong&gt;set&lt;/strong&gt; the value for &lt;code&gt;property&lt;/code&gt; via an input component like below, while the &lt;code&gt;#{bean.entity}&lt;/code&gt; actually returned &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h:inputText&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#{bean.entity.property}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You need to make sure that you have prepared the model entity beforehand in a &lt;code&gt;@PostConstruct&lt;/code&gt;, or &lt;code&gt;&amp;lt;f:viewAction&amp;gt;&lt;/code&gt; method, or perhaps an &lt;code&gt;add()&lt;/code&gt; action method in case you&apos;re working with CRUD lists and/or dialogs on same view.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Named&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@ViewScoped&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bean&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Entity entity; &lt;span class=&quot;hljs-comment&quot;&gt;// +getter (setter is not necessary).&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Inject&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; EntityService entityService;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@PostConstruct&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// In case you&apos;re updating an existing entity.&lt;/span&gt;\n        entity = entityService.getById(entityId);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Or in case you want to create a new entity.&lt;/span&gt;\n        entity = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Entity&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As to the importance of &lt;code&gt;@PostConstruct&lt;/code&gt;; doing this in a regular constructor would fail in case you&apos;re using a bean management framework which uses &lt;a href=&quot;https://stackoverflow.com/questions/29651008/field-getobj-returns-all-nulls-on-injected-cdi-managed-beans-while-manually-i/29672591#29672591&quot;&gt;proxies&lt;/a&gt;, such as CDI. Always use &lt;code&gt;@PostConstruct&lt;/code&gt; to hook on managed bean instance initialization (and use &lt;code&gt;@PreDestroy&lt;/code&gt; to hook on managed bean instance destruction). Additionally, in a constructor you wouldn&apos;t have access to any injected dependencies yet, see also &lt;a href=&quot;https://stackoverflow.com/questions/16399974/nullpointerexception-while-trying-to-access-inject-bean-in-constructor&quot;&gt;NullPointerException while trying to access @Inject bean in constructor&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;In case the &lt;code&gt;entityId&lt;/code&gt; is supplied via &lt;code&gt;&amp;lt;f:viewParam&amp;gt;&lt;/code&gt;, you&apos;d need to use &lt;code&gt;&amp;lt;f:viewAction&amp;gt;&lt;/code&gt; instead of &lt;code&gt;@PostConstruct&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/9844526/when-to-use-fviewaction-prerenderview-versus-postconstruct&quot;&gt;When to use f:viewAction / preRenderView versus PostConstruct?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;You also need to make sure that you preserve the non-&lt;code&gt;null&lt;/code&gt; model during postbacks in case you&apos;re creating it only in an &lt;code&gt;add()&lt;/code&gt; action method. Easiest would be to put the bean in the view scope. See also &lt;a href=&quot;https://stackoverflow.com/questions/7031885/how-to-choose-the-right-bean-scope&quot;&gt;How to choose the right bean scope?&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-null-returned-null-v1bu&quot;&gt;3. Target Unreachable, &apos;null&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This has actually the same cause as #2, only the (older) EL implementation being used is somewhat buggy in preserving the property name to display in the exception message, which ultimately incorrectly exposed as &apos;null&apos;. This only makes debugging and fixing a bit harder when you&apos;ve quite some nested properties like so &lt;code&gt;#{bean.entity.subentity.subsubentity.property}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The solution is still the same: make sure that the nested entity in question is not &lt;code&gt;null&lt;/code&gt;, in all levels.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-0-returned-null-2986&quot;&gt;4. Target Unreachable, &apos;&apos;0&apos;&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This has also the same cause as #2, only the (older) EL implementation being used is buggy in formulating the exception message. This exposes only when you use the brace notation &lt;code&gt;[]&lt;/code&gt; in EL as in &lt;code&gt;#{bean.collection[index]}&lt;/code&gt; where the &lt;code&gt;#{bean.collection}&lt;/code&gt; itself is non-null, but the item at the specified index doesn&apos;t exist. Such a message must then be interpreted as:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Target Unreachable, &apos;collection[0]&apos; returned null&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The solution is also the same as #2: make sure that the collection item is available.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-bracketsuffix-returned-null-pm08&quot;&gt;5. Target Unreachable, &apos;BracketSuffix&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This has actually the same cause as #4, only the (older) EL implementation being used is somewhat buggy in preserving the iteration index to display in the exception message, which ultimately incorrectly exposed as &apos;BracketSuffix&apos; which is really the character &lt;code&gt;]&lt;/code&gt;. This only makes debugging and fixing a bit harder when you&apos;ve multiple items in the collection.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3 id=&quot;other-possible-causes-of-javax.el.propertynotfoundexception-5b2n&quot;&gt;Other possible causes of &lt;code&gt;javax.el.PropertyNotFoundException&lt;/code&gt;:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34196075/javax-el-elexception-error-reading-foo-on-type-com-example-bean/&quot;&gt;javax.el.ELException: Error reading &apos;foo&apos; on type com.example.Bean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7950628/javax-el-elexception-could-not-find-property-actionmethod-in-class-com-example&quot;&gt;javax.el.ELException: Could not find property actionMethod in class com.example.Bean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8577545/javax-el-propertynotfoundexception-property-foo-not-found-on-type-com-example/&quot;&gt;javax.el.PropertyNotFoundException: Property &apos;foo&apos; not found on type com.example.Bean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13952630/javax-el-propertynotfoundexception-property-foo-not-readable-on-type-java-lan&quot;&gt;javax.el.PropertyNotFoundException: Property &apos;foo&apos; not readable on type java.lang.Boolean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31515230/javax-el-propertynotfoundexception-property-not-found-on-type-org-hibernate-col/&quot;&gt;javax.el.PropertyNotFoundException: Property not found on type org.hibernate.collection.internal.PersistentSet&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14692560/outcommented-facelets-code-still-invokes-el-expressions-like-bean-action-an/&quot;&gt;Outcommented Facelets code still invokes EL expressions like #{bean.action()} and causes javax.el.PropertyNotFoundException on #{bean.action}&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;For those who are still stuck...&lt;/p&gt;\n\n&lt;p&gt;Using NetBeans 8.1 and GlassFish 4.1 with CDI, for some reason I had this issue only locally, not on the remote server. What did the trick:&lt;/p&gt;\n\n&lt;p&gt;-&amp;gt; using javaee-web-api 7.0 instead of the default pom version provided by NetBeans, which is javaee-web-api 6.0, so:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;javaee-web-api&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;7.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;-&amp;gt; upload this javaee-web-api-7.0.jar as a lib to on the server (lib folder in the domain1 folder) and restart the server.&lt;/p&gt;\n    ","\n&lt;p&gt;I decided to share my finding on this error after resolving it myself.&lt;/p&gt;\n\n&lt;p&gt;First of all, BalusC solutions should be taken seriously but then there is another likely issue in Netbeans to be aware of especially when building an &lt;strong&gt;Enterprise Application Project(EAR)&lt;/strong&gt; using Maven.&lt;/p&gt;\n\n&lt;p&gt;Netbeans generates, a &lt;strong&gt;parent POM file&lt;/strong&gt;, an &lt;strong&gt;EAR project&lt;/strong&gt;, an &lt;strong&gt;EJB project&lt;/strong&gt; and a &lt;strong&gt;WAR project&lt;/strong&gt;. \nEverything else in my project was fine, and I almost assumed the problem is a bug in probably GlassFish 4.0(I had to install and plug it into Netbeans) because GlassFish 4.1 has a Weld CDI bug which makes the embedded GlassFish 4.1 in Netbeans 8.0.2 unusable except through a patch.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To resolve the &lt;strong&gt;&quot;Target Unreachable, identifier &apos;bean&apos; resolved to null&quot;&lt;/strong&gt;\nerror-&lt;/p&gt;\n\n&lt;p&gt;I Right-click the parent POM project, and select &lt;strong&gt;Properties&lt;/strong&gt;. A Project Properties Dialog appears, click &quot;Sources&quot;, you will be surprised to see the &quot;&lt;strong&gt;Source/Binary Format&lt;/strong&gt;&quot; set to 1.5 and &quot;&lt;strong&gt;Encoding&lt;/strong&gt;&quot; set to Windows 1250.\nChange the &quot;&lt;strong&gt;Source/Binary Format&lt;/strong&gt;&quot; to 1.6 0r 1.7, whichever you prefer to make your project CDI compliant, and &quot;&lt;strong&gt;Encoding&lt;/strong&gt;&quot; to UTF-8. &lt;/p&gt;\n\n&lt;p&gt;Do the same for all the other subprojects(EAR, EJB, WAR) if they are not already compartible.\nRun your project, and you won&apos;t get that error again. &lt;/p&gt;\n\n&lt;p&gt;I hope this helps someone out there having similar error. &lt;/p&gt;\n    ","\n&lt;p&gt;I decided to share my solution, because although many answers provided here were helpful, I still had this problem. In my case, I am using JSF 2.3, jdk10, jee8, cdi 2.0 for my new project and I did run my app on wildfly 12, starting server with parameter standalone.sh -Dee8.preview.mode=true as recommended on wildfly website. The problem with &quot;bean resolved to null disappeared after downloading wildfly 13. Uploading exactly the same war to wildfly 13 made it all work.&lt;/p&gt;\n    ","\n&lt;p&gt;I got stuck on this error because in the class that has the &lt;code&gt;@SpringBootApplication&lt;/code&gt; I forgot to specify the controller&apos;s package name.&lt;/p&gt;\n\n&lt;p&gt;I wanted to be more specific this time pointing out which components Spring had to scan, instead of configuring the base package.&lt;/p&gt;\n\n&lt;p&gt;It was like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ComponentScan(basePackages = {&quot;br.com.company.project.repository&quot;, &quot;br.com.company.project.service&quot;})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;But the correct form is one of these:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ComponentScan(basePackages = {&quot;br.com.company.project.repository&quot;, &quot;br.com.company.project.service&quot;, &quot;br.com.company.project.controller&quot;})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ComponentScan(basePackages = {&quot;br.com.company.project&quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I decided to share my solution, because although the correct answer is very comprehensive, it doesn&apos;t cover this (idiotic) mistake :)&lt;/p&gt;\n    ","\n&lt;p&gt;It can also be a bug in Mojarra 2.3 &lt;a href=&quot;https://github.com/eclipse-ee4j/mojarra/issues/4734&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/eclipse-ee4j/mojarra/issues/4734&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In my case, I commited a spell mistake in @Named(&quot;beanName&quot;), it was suppose to be &quot;beanName&quot;, but I wrote &quot;beanNam&quot;, for example.&lt;/p&gt;\n    ","\n&lt;p&gt;I am using wildfly 10 for javaee container . I had experienced &quot;Target Unreachable, &apos;entity&apos; returned null&quot; issue. Thanks for suggestions by BalusC but the my issue out of the solutions explained. \nAccidentally using &quot;import com.sun.istack.logging.Logger;&quot; instead of &quot;import org.jboss.logging.Logger;&quot; caused CDI implemented JSF EL.\nHope it helps to improve solution . &lt;/p&gt;\n    ","\n&lt;p&gt;I had the same problem. The solution turned out to be much simpler. It appears that a datatable wants the method in the form of a getter, ie getSomeMethod(), not just someMethod(). In my case in the  datatable I was calling findResults. I changed the method in my backing bean to getFindResults() and it worked. &lt;/p&gt;\n\n&lt;p&gt;A commandButton worked find without the get which served to make it only more confusing.&lt;/p&gt;\n    ","\n&lt;p&gt;As for #2, in my case it magically came to life after replacing &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;tag with &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h:body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After having done several (simpler, to be honest) JSF projects, I couldn&apos;t remember of doing anything different setting it up now, and I got this kind of error for the first time. I was making a very basic login page (username, password, user Bean...) and set up everything like usual. The only difference I spotted is tags aforementioned. Maybe someone finds this useful.&lt;/p&gt;\n    ","\n&lt;p&gt;The issue in my case was I included a constructor taking parameters but not an empty constructor with the Inject annotation, like so. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;@Inject &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;VisitorBean&lt;/span&gt;()&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I just tested it without any constructor and this appears to work also.&lt;/p&gt;\n    ","\n&lt;p&gt;For 1. topic (&lt;strong&gt;Target Unreachable, identifier &apos;bean&apos; resolved to null&lt;/strong&gt;);&lt;/p&gt;\n\n&lt;p&gt;I checked valuable answers the @BalusC and the other sharers but I exceed the this problem like this on my scenario.\nAfter the creating a new xhtml with different name and creating bean class with different name then I wrote (not copy-paste) the codes step by step to the new bean class and new xhtml file.&lt;/p&gt;\n    ","\n&lt;p&gt;When I remove AnnotationConfigWebApplicationContext context param from web.xml file This is work &lt;/p&gt;\n\n&lt;p&gt;If you have got like param which as shown below you must remove it from web.xml file&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;contextClass&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First at all, I work with: Eclipse, Weblogic, CDI, JSF, PrimeFaces. If you too, maybe my solution could help you.&lt;/p&gt;\n&lt;p&gt;In my case, the reason of the error was a little setting on &quot;Eclipse&quot;.&lt;/p&gt;\n&lt;p&gt;Check this:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Right click over your Weblogic server on &quot;Servers&quot; tab&lt;/li&gt;\n&lt;li&gt;Select &quot;Properties&quot;&lt;/li&gt;\n&lt;li&gt;In the new little window of Properties, expand &quot;Weblogic&quot; menu&lt;/li&gt;\n&lt;li&gt;Inside &quot;Weblogic&quot; menu, clic over &quot;Publishing&quot; option&lt;/li&gt;\n&lt;li&gt;Now, on the right side, be sure that option &quot;Publish as an exploded archive&quot; is checked.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In my case, I had checked &quot;Publish as a virtual application&quot;, so, changing that I solved &quot;Target Unreachable&quot; error.&lt;/p&gt;\n    ","\n&lt;p&gt;Working with JSF in the old style You have to define the managed bean in the \n&lt;strong&gt;beans-config.xml&lt;/strong&gt; file (located in the WEB-INF folder) and make a reference to it in the &lt;strong&gt;web.xml&lt;/strong&gt; file, this way:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;beans-config.xml&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;the name by wich your backing bean will be referenced&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;your backing bean fully qualified class name&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-class&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-scope&lt;/span&gt;&amp;gt;&lt;/span&gt;session&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-scope&lt;/span&gt;&amp;gt;&lt;/span&gt;    \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(I&apos;ve tried using other scopes, but ...)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;web.xml&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.faces.CONFIG_FILES&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;/WEB-INF/beans-config.xml&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another clue:\nI was using JSF, and added mvn dependencies:\n        \n            com.sun.faces\n            jsf-api\n            2.2.11\n        &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sun.faces&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jsf-impl&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.2.11&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, I tried to change to Primefaces, and add primefaces dependency:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.primefaces&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;primefaces&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I changed my xhtml from h: to p:, adding xmlns:p=&quot;http://primefaces.org/ui to the template.\nOnly with JSF the proyect was running ok, and the managedbean was reached ok. When I add Primefaces I was getting the unreachable object (javax.el.propertynotfoundexception). The problem was that JSF was generating the ManagedBean, not Primefaces, and I was asking primefaces for the object. I had to delete jsf-impl from my .pom, clean and install the proyect.\nAll went ok from this point.\nHope that helps.&lt;/p&gt;\n    ","\n&lt;p&gt;EL interprets ${bean.propretyName} as described - the propertyName becomes getPropertyName() on the assumption you are using explicit or implicit methods of generating getter/setters&lt;/p&gt;\n\n&lt;p&gt;You can override this behavior by explicitly identifying the name as a function: ${bean.methodName()} This calls the function method Name() directly without modification.  &lt;/p&gt;\n\n&lt;p&gt;It isn&apos;t always true that your  accessors are named &quot;get...&quot;. &lt;/p&gt;\n    ","\n&lt;p&gt;In my case &quot;el-ri-1.0.jar&quot; was missing.&lt;/p&gt;\n    "]},"randomTags":[{"name":"interface","slug":"interface"},{"name":"exception","slug":"exception"},{"name":"pygame2","slug":"pygame2"},{"name":"angular","slug":"angular"},{"name":"istream","slug":"istream"},{"name":"outer-join","slug":"outer-join"},{"name":"object","slug":"object"},{"name":"reference","slug":"reference"},{"name":"cmd","slug":"cmd"},{"name":"postgresql","slug":"postgresql"},{"name":"event-bubbling","slug":"event-bubbling"},{"name":"python-2.x","slug":"python-2.x"},{"name":"jsf","slug":"jsf"},{"name":"implementation-defined-behavior","slug":"implementation-defined-behavior"},{"name":"event-propagation","slug":"event-propagation"},{"name":"text-files","slug":"text-files"},{"name":"ssl","slug":"ssl"},{"name":"environment-variables","slug":"environment-variables"},{"name":"sql-server-2005","slug":"sql-server-2005"},{"name":"strict-aliasing","slug":"strict-aliasing"}]},"__N_SSG":true}