{"pageProps":{"data":{"count":1,"rows":[{"id":400,"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496","postType":"QUESTION","createdAt":"2022-07-09T17:31:02.000Z","updatedAt":"2022-07-09T17:31:02.000Z","tags":[{"id":2152,"name":"static-files","slug":"static-files","createdAt":"2022-07-09T17:31:02.000Z","updatedAt":"2022-07-09T17:31:02.000Z","Questions_Tags":{"questionId":400,"tagId":2152}}]}]},"slug":"static-files","page":"1","answers":{"400":["\n&lt;p&gt;In production, configure the HTTP server (Nginx, Apache, etc.) in front of your application to serve requests to &lt;code&gt;/static&lt;/code&gt; from the static folder. A dedicated web server is very good at serving static files efficiently, although you probably won&apos;t notice a difference compared to Flask at low volumes.&lt;/p&gt;\n&lt;p&gt;Flask automatically creates a &lt;code&gt;/static/&amp;lt;path:filename&amp;gt;&lt;/code&gt; route that will serve any &lt;code&gt;filename&lt;/code&gt; under the &lt;code&gt;static&lt;/code&gt; folder next to the Python module that defines your Flask app. Use &lt;code&gt;url_for&lt;/code&gt; to link to static files: &lt;code&gt;url_for(&apos;static&apos;, filename=&apos;js/analytics.js&apos;)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;You can also use &lt;a href=&quot;http://flask.palletsprojects.com/api/#flask.send_from_directory&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;send_from_directory&lt;/code&gt;&lt;/a&gt; to serve files from a directory in your own route. This takes a base directory and a path, and ensures that the path is contained in the directory, which makes it safe to accept user-provided paths. This can be useful in cases where you want to check something before serving the file, such as if the logged in user has permission.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; send_from_directory\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/reports/&amp;lt;path:path&amp;gt;&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;send_report&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(&lt;span class=&quot;hljs-string&quot;&gt;&apos;reports&apos;&lt;/span&gt;, path)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; use &lt;code&gt;send_file&lt;/code&gt; or &lt;code&gt;send_static_file&lt;/code&gt; with a user-supplied path. &lt;code&gt;send_from_directory&lt;/code&gt; was designed to safely handle user-supplied paths under a known directory, and will raise an error if the path attempts to escape the directory.&lt;/p&gt;\n&lt;p&gt;If you are generating a file in memory without writing it to the filesystem, you can pass a &lt;code&gt;BytesIO&lt;/code&gt; object to &lt;a href=&quot;http://flask.palletsprojects.com/api/#flask.send_file&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;send_file&lt;/code&gt;&lt;/a&gt; to serve it like a file. You&apos;ll need to pass other arguments to &lt;code&gt;send_file&lt;/code&gt; in this case since it can&apos;t infer things like the file name or content type.&lt;/p&gt;\n    ","\n&lt;p&gt;If you just want to move the location of your static files, then the simplest method is to declare the paths in the constructor. In the example below, I have moved my templates and static files into a sub-folder called &lt;code&gt;web&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;app = Flask(__name__,\n            static_url_path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, \n            static_folder=&lt;span class=&quot;hljs-string&quot;&gt;&apos;web/static&apos;&lt;/span&gt;,\n            template_folder=&lt;span class=&quot;hljs-string&quot;&gt;&apos;web/templates&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;static_url_path=&apos;&apos;&lt;/code&gt; removes any preceding path from the URL (i.e.\nthe default &lt;code&gt;/static&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;static_folder=&apos;web/static&apos;&lt;/code&gt; to serve any files found in the folder\n&lt;code&gt;web/static&lt;/code&gt; as static files.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;template_folder=&apos;web/templates&apos;&lt;/code&gt; similarly, this changes the\ntemplates folder.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Using this method, the following URL will return a CSS file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;link rel=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/css/bootstrap.min.css&quot;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And finally, here&apos;s a snap of the folder structure, where &lt;code&gt;flask_server.py&lt;/code&gt; is the Flask instance:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GSiGp.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GSiGp.png&quot; alt=&quot;Nested Static Flask Folders&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can also, and this is my favorite, set a folder as static path so that the files inside are reachable for everyone.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;app = Flask(__name__, static_url_path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;/static&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With that set you can use the standard HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;link rel=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/static/style.css&quot;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m sure you&apos;ll find what you need there: &lt;a href=&quot;http://flask.pocoo.org/docs/quickstart/#static-files&quot;&gt;http://flask.pocoo.org/docs/quickstart/#static-files&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Basically you just need a &quot;static&quot; folder at the root of your package, and then you can use &lt;code&gt;url_for(&apos;static&apos;, filename=&apos;foo.bar&apos;)&lt;/code&gt; or directly link to your files with &lt;a href=&quot;http://example.com/static/foo.bar&quot;&gt;http://example.com/static/foo.bar&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: As suggested in the comments you could directly use the &lt;code&gt;&apos;/static/foo.bar&apos;&lt;/code&gt; URL path &lt;strong&gt;BUT&lt;/strong&gt; &lt;code&gt;url_for()&lt;/code&gt; overhead (performance wise) is quite low, and using it means that you&apos;ll be able to easily customise the behaviour afterwards (change the folder, change the URL path, move your static files to S3, etc).&lt;/p&gt;\n    ","\n&lt;p&gt;You can use this function :&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;send_static_file(filename)&lt;/code&gt;&lt;br&gt;\n  Function used internally to send static\n  files from the static folder to the browser.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;app = Flask(__name__)\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&amp;lt;path:path&amp;gt;&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;static_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; app.send_static_file(path)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;What I use (and it&apos;s been working great) is a &quot;templates&quot; directory and a &quot;static&quot; directory. I place all my .html files/Flask templates inside the templates directory, and static contains CSS/JS. render_template works fine for generic html files to my knowledge, regardless of the extent at which you used Flask&apos;s templating syntax. Below is a sample call in my views.py file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/projects&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;projects&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; render_template(&lt;span class=&quot;hljs-string&quot;&gt;&quot;projects.html&quot;&lt;/span&gt;, title = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Projects&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just make sure you use url_for() when you do want to reference some static file in the separate static directory. You&apos;ll probably end up doing this anyways in your CSS/JS file links in html. For instance...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;script src=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{ url_for(&apos;static&apos;, filename=&apos;styles/dist/js/bootstrap.js&apos;) }}&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s a link to the &quot;canonical&quot; informal Flask tutorial - lots of great tips in here to help you hit the ground running. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&quot;&gt;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A simplest working example based on the other answers is the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, request\napp = Flask(__name__, static_url_path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/index/&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;root&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; app.send_static_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;index.html&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n  app.run(debug=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With the HTML called &lt;em&gt;index.html&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n    &amp;lt;div&amp;gt;\n         &amp;lt;p&amp;gt;\n            This &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a test.\n         &amp;lt;/p&amp;gt;\n    &amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; And &lt;em&gt;index.html&lt;/em&gt; is in a folder called &lt;strong&gt;static&lt;/strong&gt;, meaning &lt;code&gt;&amp;lt;projectpath&amp;gt;&lt;/code&gt; has the &lt;code&gt;.py&lt;/code&gt; file, and &lt;code&gt;&amp;lt;projectpath&amp;gt;\\static&lt;/code&gt; has the &lt;code&gt;html&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;p&gt;If you want the server to be visible on the network, use &lt;code&gt;app.run(debug=True, host=&apos;0.0.0.0&apos;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; For showing all files in the folder if requested, use this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&amp;lt;path:path&amp;gt;&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;static_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; app.send_static_file(path)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is essentially &lt;code&gt;BlackMamba&lt;/code&gt;&apos;s answer, so give them an upvote.&lt;/p&gt;\n    ","\n&lt;p&gt;For angular+boilerplate flow which creates next folders tree:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;backend/\n|\n|------ui/\n|      |------------------build/          &amp;lt;--&lt;span class=&quot;hljs-string&quot;&gt;&apos;static&apos;&lt;/span&gt; folder, constructed by Grunt\n|      |--&amp;lt;proj           |----vendors/   &amp;lt;-- angular.js &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; others here\n|      |--     folders&amp;gt;   |----src/       &amp;lt;-- your js\n|                         |----index.html &amp;lt;-- your SPA entrypoint \n|------&amp;lt;proj\n|------     folders&amp;gt;\n|\n|------view.py  &amp;lt;-- Flask app here\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I use following solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;...\nroot = os.path.join(os.path.dirname(os.path.abspath(__file__)), &lt;span class=&quot;hljs-string&quot;&gt;&quot;ui&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;build&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&amp;lt;path:path&amp;gt;&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;static_proxy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(root, path)\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;redirect_to_index&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(root, &lt;span class=&quot;hljs-string&quot;&gt;&apos;index.html&apos;&lt;/span&gt;)\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It helps to redefine &apos;static&apos; folder to custom.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;app = Flask(__name__, static_folder=&lt;span class=&quot;hljs-string&quot;&gt;&quot;your path to static&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have templates in your root directory, placing the app=Flask(&lt;strong&gt;name&lt;/strong&gt;) will work if the file that contains this also is in the same location, if this file is in another location, you will have to specify the template location to enable Flask to point to the location &lt;/p&gt;\n    ","\n&lt;p&gt;By default folder named &quot;static&quot; contains all static files\nHere&apos;s code sample:\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{ url_for(&apos;static&apos;, filename=&apos;vendor/bootstrap/css/bootstrap.min.css&apos;) }}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;So I got things working (based on @user1671599 answer) and wanted to share it with you guys.&lt;/p&gt;\n\n&lt;p&gt;(I hope I&apos;m doing it right since it&apos;s my first app in Python)&lt;/p&gt;\n\n&lt;p&gt;I did this -&lt;/p&gt;\n\n&lt;p&gt;Project structure:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/IFCX8.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;server.py:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; server.AppStarter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; AppStarter\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\nstatic_folder_root = os.path.join(os.path.dirname(os.path.abspath(__file__)), &lt;span class=&quot;hljs-string&quot;&gt;&quot;client&quot;&lt;/span&gt;)\n\napp = AppStarter()\napp.register_routes_to_resources(static_folder_root)\napp.run(__name__)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;AppStarter.py:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, send_from_directory\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask_restful &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Api, Resource\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; server.ApiResources.TodoList &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; TodoList\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; server.ApiResources.Todo &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Todo\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AppStarter&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Resource&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self._static_files_root_folder_path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Default is current folder&lt;/span&gt;\n        self._app = Flask(__name__)  &lt;span class=&quot;hljs-comment&quot;&gt;# , static_folder=&apos;client&apos;, static_url_path=&apos;&apos;)&lt;/span&gt;\n        self._api = Api(self._app)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_register_static_server&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, static_files_root_folder_path&lt;/span&gt;):\n        self._static_files_root_folder_path = static_files_root_folder_path\n        self._app.add_url_rule(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&amp;lt;path:file_relative_path_to_root&amp;gt;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;serve_page&apos;&lt;/span&gt;, self._serve_page, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;])\n        self._app.add_url_rule(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;index&apos;&lt;/span&gt;, self._goto_index, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;register_routes_to_resources&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, static_files_root_folder_path&lt;/span&gt;):\n\n        self._register_static_server(static_files_root_folder_path)\n        self._api.add_resource(TodoList, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/todos&apos;&lt;/span&gt;)\n        self._api.add_resource(Todo, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/todos/&amp;lt;todo_id&amp;gt;&apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_goto_index&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self._serve_page(&lt;span class=&quot;hljs-string&quot;&gt;&quot;index.html&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_serve_page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, file_relative_path_to_root&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(self._static_files_root_folder_path, file_relative_path_to_root)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, module_name&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; module_name == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n            self._app.run(debug=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;One of the simple way to do.&lt;/em&gt; &lt;strong&gt;Cheers!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;demo.py&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, render_template\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;index&lt;/span&gt;():\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; render_template(&lt;span class=&quot;hljs-string&quot;&gt;&quot;index.html&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n   app.run(debug = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Now create folder name called &lt;strong&gt;templates&lt;/strong&gt;.\nAdd your &lt;strong&gt;index.html&lt;/strong&gt; file inside of &lt;strong&gt;templates&lt;/strong&gt; folder&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Python Web Application&amp;lt;/title&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n    &amp;lt;div&amp;gt;\n         &amp;lt;p&amp;gt;\n            Welcomes You!!\n         &amp;lt;/p&amp;gt;\n    &amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Project Structure&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;-demo.py\n-templates/index.html\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Use &lt;code&gt;redirect&lt;/code&gt; and &lt;code&gt;url_for&lt;/code&gt;&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; redirect, url_for\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;metrics&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; redirect(url_for(&lt;span class=&quot;hljs-string&quot;&gt;&apos;static&apos;&lt;/span&gt;, filename=&lt;span class=&quot;hljs-string&quot;&gt;&apos;jenkins_analytics.html&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This servers all files (css &amp;amp; js...) referenced in your html.&lt;/p&gt;\n    ","\n&lt;p&gt;Thought of sharing.... this example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/loading/&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello_world&lt;/span&gt;():\n    data = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sample.html&apos;&lt;/span&gt;).read()    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    app.run(host=&lt;span class=&quot;hljs-string&quot;&gt;&apos;0.0.0.0&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works better and simple.&lt;/p&gt;\n    ","\n&lt;p&gt;The issue I had was related to &lt;code&gt;index.html&lt;/code&gt; files not being served for directories when using &lt;code&gt;static_url_path&lt;/code&gt; and &lt;code&gt;static_folder&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Here&apos;s my solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, send_from_directory\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask.helpers &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; safe_join\n\napp = Flask(__name__)\nstatic = safe_join(os.path.dirname(__file__), &lt;span class=&quot;hljs-string&quot;&gt;&apos;static&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_home&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(static, &lt;span class=&quot;hljs-string&quot;&gt;&apos;index.html&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&amp;lt;path:path&amp;gt;&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_static&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(safe_join(static, path)):\n    path = os.path.join(path, &lt;span class=&quot;hljs-string&quot;&gt;&apos;index.html&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(static, path)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;All the answers are good but what worked well for me is just using the simple function &lt;code&gt;send_file&lt;/code&gt; from Flask. This works well when you just need to send an html file as response when &lt;strong&gt;&lt;em&gt;host:port/ApiName&lt;/em&gt;&lt;/strong&gt; will show the output of the file in browser &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/ApiName&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ApiFunc&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;some-other-directory-than-root/your-file.extension&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n        logging.info(e.args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])```\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The simplest way is create a static folder inside the main project folder. Static folder containing .css files.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;main folder&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;/Main Folder\n/Main Folder/templates/foo.html\n/Main Folder/static/foo.css\n/Main Folder/application.py(flask script)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/5oqtb.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;Image of main folder containing static and templates folders and flask script&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;flask&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, render_template\n\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;login&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; render_template(&lt;span class=&quot;hljs-string&quot;&gt;&quot;login.html&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;html (layout)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n    &amp;lt;head&amp;gt;\n        &amp;lt;title&amp;gt;Project(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&amp;lt;/title&amp;gt;\n        &amp;lt;link rel=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/static/styles.css&quot;&lt;/span&gt;&amp;gt;\n     &amp;lt;/head&amp;gt;\n    &amp;lt;body&amp;gt;\n        &amp;lt;header&amp;gt;\n            &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;\n                &amp;lt;nav&amp;gt;\n                    &amp;lt;a &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;Kamook&amp;lt;/a&amp;gt;\n                    &amp;lt;a &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;Sign Up&amp;lt;/a&amp;gt;\n                    &amp;lt;a &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;Log In&amp;lt;/a&amp;gt;\n                &amp;lt;/nav&amp;gt;\n            &amp;lt;/div&amp;gt;\n        &amp;lt;/header&amp;gt;  \n        {% block body %}\n        {% endblock %}\n    &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;html&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{% extends &lt;span class=&quot;hljs-string&quot;&gt;&quot;layout.html&quot;&lt;/span&gt; %}\n\n{% block body %}\n    &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col&quot;&lt;/span&gt;&amp;gt;\n        &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt; placeholder=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Username&quot;&lt;/span&gt; required&amp;gt;\n        &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt; placeholder=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Password&quot;&lt;/span&gt; required&amp;gt;\n        &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Login&quot;&lt;/span&gt;&amp;gt;\n    &amp;lt;/div&amp;gt;\n{% endblock %}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The URL for a static file can be created using the static endpoint as following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;url_for(&lt;span class=&quot;hljs-string&quot;&gt;&apos;static&apos;&lt;/span&gt;, filename = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name_of_file&apos;&lt;/span&gt;)\n&amp;lt;link rel=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{url_for(&apos;static&apos;, filename=&apos;borders.css&apos;)}}&quot;&lt;/span&gt; /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;By default, flask use a &quot;templates&quot; folder to contain all your template files(any plain-text file, but usually &lt;code&gt;.html&lt;/code&gt; or some kind of template language such as jinja2 ) &amp;amp; a &quot;static&quot; folder to contain all your static files(i.e. &lt;code&gt;.js&lt;/code&gt; &lt;code&gt;.css&lt;/code&gt; and your images). &lt;br&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;In your &lt;code&gt;routes&lt;/code&gt;, u can use &lt;code&gt;render_template()&lt;/code&gt; to render a template file (as I say above, by default it is placed in the &lt;code&gt;templates&lt;/code&gt; folder) as the response for your request. And in the template file (it&apos;s usually a .html-like file), u may use some &lt;code&gt;.js&lt;/code&gt; and/or `.css&apos; files, so I guess your question is how u link these static files to the current template file. &lt;br&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you are just trying to open a file, you could use  &lt;code&gt;app.open_resource()&lt;/code&gt;. So reading a file would look something like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; app.open_resource(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/static/path/yourfile&apos;&lt;/span&gt;):\n      &lt;span class=&quot;hljs-comment&quot;&gt;#code to read the file and do something&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In the static directory, create templates directory inside that directory add all the html file create separate directory for css and javascript as flask will treat or recognize all the html files which are inside the template directory.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;static -\n       |_ templates\n       |_ css\n       |_javascript\n       |_images\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is what worked for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, render_template, send_from_directory\napp = Flask(__name__)\n\n\nroot = os.path.join(os.path.dirname(os.path.abspath(__file__)), &lt;span class=&quot;hljs-string&quot;&gt;&quot;whereyourfilesare&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;):\n    path = request.path\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (path == &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(root, &lt;span class=&quot;hljs-string&quot;&gt;&apos;index.html&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(root, path[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In my case, i needed all the files from a static folder to be accessible by the user, as well as i needed to use templates for some of my html files, so that common html code could be placed in the template and code gets reused. Here is how i achieved both of them together:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, request, render_template\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask.json &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; JSONEncoder\n\napp = Flask(__name__, template_folder=&lt;span class=&quot;hljs-string&quot;&gt;&apos;static&apos;&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&amp;lt;path:path&amp;gt;&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;serve_static_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# In my case, only html files are having the template code inside them, like include.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; path.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.html&apos;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; render_template(path)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Serve all other files from the static folder directly.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; app.send_static_file(path)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And all of my files are kept under static folder, which is parallel to main flask file.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/XEskw.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/XEskw.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For example, to return an Adsense file I have used:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/ads.txt&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;send_adstxt&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; send_from_directory(app.static_folder, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ads.txt&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"same-origin-policy","slug":"same-origin-policy"},{"name":"pygame2","slug":"pygame2"},{"name":"application-state","slug":"application-state"},{"name":"error-checking","slug":"error-checking"},{"name":"pecs","slug":"pecs"},{"name":"android-intent","slug":"android-intent"},{"name":"google-cloud-firestore","slug":"google-cloud-firestore"},{"name":"variable-assignment","slug":"variable-assignment"},{"name":"ssl","slug":"ssl"},{"name":"split","slug":"split"},{"name":"php","slug":"php"},{"name":"default-parameters","slug":"default-parameters"},{"name":"jsp","slug":"jsp"},{"name":"utc","slug":"utc"},{"name":"binary","slug":"binary"},{"name":"event-loop","slug":"event-loop"},{"name":"prototype","slug":"prototype"},{"name":"onclick","slug":"onclick"},{"name":"kill","slug":"kill"},{"name":"undefined-reference","slug":"undefined-reference"}]},"__N_SSG":true}