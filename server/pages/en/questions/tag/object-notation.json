{"pageProps":{"data":{"count":1,"rows":[{"id":288,"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710","postType":"QUESTION","createdAt":"2022-07-09T17:25:15.000Z","updatedAt":"2022-07-09T17:25:15.000Z","tags":[{"id":1755,"name":"object-notation","slug":"object-notation","createdAt":"2022-07-09T17:25:15.000Z","updatedAt":"2022-07-09T17:25:15.000Z","Questions_Tags":{"questionId":288,"tagId":1755}}]}]},"slug":"object-notation","page":1,"answers":{"288":["\n&lt;p&gt;Lets clarify first what &lt;a href=&quot;http://www.json.org/&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;JSON&lt;/em&gt;&lt;/a&gt; actually is. JSON is a &lt;em&gt;textual&lt;/em&gt;, language-independent data-exchange format, much like XML, CSV or YAML.&lt;/p&gt;\n\n&lt;p&gt;Data can be stored in many ways, but if it should be stored in a text file and be readable by a computer, it needs to follow some structure. JSON is one of the many formats that define such a structure.&lt;/p&gt;\n\n&lt;p&gt;Such formats are typically language-independent, meaning they can be processed by Java, Python, JavaScript, PHP, you name it.&lt;/p&gt;\n\n&lt;p&gt;In contrast, &lt;em&gt;JavaScript&lt;/em&gt; is a programming language. Of course JavaScript also provides a way to define/describe data, but the syntax is very specific to JavaScript.&lt;/p&gt;\n\n&lt;p&gt;As a counter example, Python has the concept of &lt;em&gt;tuples&lt;/em&gt;, their syntax is &lt;code&gt;(x, y)&lt;/code&gt;. JavaScript doesn&apos;t have something like this.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Lets look at the syntactical differences between JSON and JavaScript object literals.&lt;/p&gt;\n\n&lt;p&gt;JSON has the following syntactical constraints:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Object &lt;em&gt;keys&lt;/em&gt; must be &lt;strong&gt;strings&lt;/strong&gt; (i.e. a character sequence enclosed in double quotes &lt;code&gt;&quot;&lt;/code&gt;). &lt;/li&gt;\n&lt;li&gt;The values can be either:\n\n&lt;ul&gt;\n&lt;li&gt;a string&lt;/li&gt;\n&lt;li&gt;a number&lt;/li&gt;\n&lt;li&gt;an (JSON) object&lt;/li&gt;\n&lt;li&gt;an array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Duplicate keys (&lt;code&gt;{&quot;foo&quot;:&quot;bar&quot;,&quot;foo&quot;:&quot;baz&quot;}&lt;/code&gt;) produce undefined, implementation-specific results; the JSON specification specifically does not define their semantics&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In JavaScript, object literals can have&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;String literals, number literals or identifier names as keys (since ES6, keys can now also be computed, which introduces yet another syntax).&lt;/li&gt;\n&lt;li&gt;The values can be any valid JavaScript expression, including function definitions and &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Duplicate keys produce defined, specified results (in loose mode, the latter definition replaces the former; in strict mode, it&apos;s an error).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Knowing that, just by looking at the &lt;em&gt;syntax&lt;/em&gt;, your example is not JSON because of two reasons:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Your keys are not strings (literals). They are &lt;em&gt;identifier names&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;You cannot assign a function as a value to a &quot;JSON object&quot; (because JSON doesn&apos;t define any syntax for functions).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;But most importantly, to repeat my explanation from the beginning: You are in a JavaScript context. You define a JavaScript object. If any, a &quot;JSON object&quot; can only be contained in a string:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;}; &lt;span class=&quot;hljs-comment&quot;&gt;// creates a JavaScript object (this is *not* JSON)&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;foo&quot;: 452}&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// creates a string containing JSON&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is, if you&apos;re writing JavaScript source code, and not dealing with a &lt;em&gt;string&lt;/em&gt;, you&apos;re not dealing with JSON. Maybe you received the data as JSON (e.g., via ajax or reading from a file), but once you or a library you&apos;re using has parsed it, it&apos;s not JSON anymore.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Only because object literals and JSON look &lt;em&gt;similar&lt;/em&gt;, it does not mean that you can name them interchangeably.&lt;/strong&gt; See also &lt;a href=&quot;http://benalman.com/news/2010/03/theres-no-such-thing-as-a-json/&quot; rel=&quot;noreferrer&quot;&gt;There&apos;s no such thing as a &quot;JSON Object&quot;&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://json.org&quot; rel=&quot;noreferrer&quot;&gt;JSON&lt;/a&gt; has a much more limited syntax including:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Key values must be quoted&lt;/li&gt;\n&lt;li&gt;Strings must be quoted with &lt;code&gt;&quot;&lt;/code&gt; and not &lt;code&gt;&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;You have a more limited range of values (e.g. no functions allowed)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;There is really no such thing as a &quot;JSON Object&quot;.&lt;/p&gt;\n\n&lt;p&gt;The JSON spec is a syntax for encoding data as a string.  What people call a &quot;JSON Object&quot; ( in javascript ) is really just an ordinary javascript object that has (probably) been de-serialized from a valid JSON string, and can be easily re-serialized as a valid JSON string.  This generally means that it contains only data ( and not functions ).  It also means that there are no dates, because JSON does not have a date type ( probably the most painful thing about JSON ;)&lt;/p&gt;\n\n&lt;p&gt;Furthermore, (side-rant...) when people talk about a &quot;JSON Object&quot;, they almost always mean data that has the &quot;curly-braces&quot; at the top-level.  This corresponds nicely to a javascript object.  However, the JSON spec does not require that there be a single &quot;curly-braces&quot; object at the top-level of a JSON string.  It is perfectly valid JSON to have a list at the top-level, or even to have just a single value.  So, while every &quot;JSON Object&quot; corresponds to valid JSON, not all valid JSON strings correspond to what we would call a &quot;JSON Object&quot;! ( because the string could represent a list or an atomic value )&lt;/p&gt;\n    ","\n&lt;p&gt;According to &lt;a href=&quot;http://www.json.org/js.html&quot; rel=&quot;noreferrer&quot;&gt;JSON in JavaScript&lt;/a&gt;,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;JSON is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Subset&quot; rel=&quot;noreferrer&quot;&gt;subset&lt;/a&gt; of the object\n  literal notation of JavaScript.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In other words, valid JSON is also valid JavaScript object literal notation but not necessarily the other way around.&lt;/p&gt;\n\n&lt;p&gt;In addition to reading the &lt;a href=&quot;http://www.json.org/&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt;, as @Filix King suggested, I also suggest playing around with the &lt;a href=&quot;http://www.jsonlint.com/&quot; rel=&quot;noreferrer&quot;&gt;JSONLint online JSON validator&lt;/a&gt;. That&apos;s how I learned that the keys of JSON objects must be strings.&lt;/p&gt;\n    ","\n&lt;p&gt; &lt;strong&gt;&lt;a href=&quot;http://www.json.org/fatfree.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSON&lt;/a&gt;: The Fat-Free Alternative to XML&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;JSON has been widely adopted by people who found that it made it a lot easier to produce distributed applications and services. The official Internet media type for JSON is &lt;code&gt;application/json&lt;/code&gt; &lt;strong&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/rfc4627/?include_text=1&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;RFC 4627&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. JSON filenames use the extension &lt;code&gt;.json&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt; JavaScript Object Notation (&lt;a href=&quot;http://www.json.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;) is a lightweight, text-based, language-independent data interchange format. JSON has been used to exchange data between applications written in any Programming language.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The JSON object is a single object that contains two functions, parse and stringify, that are used to parse and construct JSON texts.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;JSON.stringify produces a String that conforms to the following JSON grammar.&lt;/li&gt;\n&lt;li&gt;JSON.parse accepts a String that conforms to the JSON grammar.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The parseJSON method will be included in the &lt;a href=&quot;https://www.ecma-international.org/activities/Languages/Language%20overview.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Fourth Edition of ECMAScript&lt;/code&gt;&lt;/a&gt;. In the meantime, a JavaScript implementation is available at json.org.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objLiteral = {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;}; &lt;span class=&quot;hljs-comment&quot;&gt;// JavaScript Object&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Object Literal : &apos;&lt;/span&gt;, objLiteral ); &lt;span class=&quot;hljs-comment&quot;&gt;// Object {foo: 42}foo: 42__proto__: Object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is a JSON String, like what you&apos;d get back from an AJAX request.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;foo&quot;: 452}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;JOSN String : &apos;&lt;/span&gt;, jsonString ); &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;foo&quot;: 452}&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is how you deserialize that JSON String into an Object.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serverResposnceObject = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;( jsonString );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Converting Ajax response to JavaScript Object : &apos;&lt;/span&gt;, serverResposnceObject); &lt;span class=&quot;hljs-comment&quot;&gt;// Object {foo: 42}foo: 42 __proto__: Object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// And this is how you serialize an Object into a JSON String.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serverRequestJSON = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( objLiteral );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Reqesting server with JSON Data : &apos;&lt;/span&gt;, serverRequestJSON); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;{&quot;foo&quot;: 452}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;JSON is subset of JavaScript. &lt;a href=&quot;http://javascript.crockford.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Javascript&lt;/a&gt; was derived from the ECMAScript Programming Language Standard.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt; ECMAScript&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;ECMAScript has grown to be one of the world&apos;s most widely used general purpose programming languages. It is best known as the language embedded in web browsers but has also been widely adopted for server and embedded applications.&lt;/em&gt; &lt;strong&gt;&lt;em&gt;ECMAScript is based on several originating technologies, the most well-known being &lt;code&gt;JavaScript&lt;/code&gt; (Netscape Communications)) and &lt;code&gt;JScript&lt;/code&gt; (Microsoft Corporation).)&lt;/em&gt;&lt;/strong&gt;. &lt;em&gt;Though before 1994, ECMA was known as &quot;European Computer Manufacturers Association&quot;, after 1994, when the organization became global, the &quot;trademark&quot; &quot;Ecma&quot; was kept for historical reasons.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;ECMAScript is the language, whereas JavaScript, JScript, and even ActionScript are called &lt;strong&gt;&lt;code&gt;&quot;Dialects&quot;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Dialects have been derived from the same language. They are are quite similar to each other as they have been derived from the same language but they have undergone some changes.\nA dialect is a variation in the language itself. It is derived from a single language.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;SQL Language - Hibernate MySQL Dialect, Oracle Dialect,.. which have some changes or added functionality.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Information about the browser and computer of your users.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;navigator.&lt;span class=&quot;hljs-property&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Netscape&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;ECMAScript is the scripting language that forms the basis of JavaScript. &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;language resources&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;kbd&gt;&lt;strong&gt;&lt;code&gt;          ECMA-262        &lt;/code&gt;&lt;/strong&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;strong&gt;&lt;code&gt; Links &lt;/code&gt;&lt;/strong&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;Initial Edition, June 1997&lt;/code&gt;\n&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDF&lt;/a&gt;. &lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;2nd Edition, August   1998&lt;/code&gt;\n&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%202nd%20edition,%20August%201998.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDF&lt;/a&gt;. &lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;3rd Edition, December 1999&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDF&lt;/a&gt;. &lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;5th Edition, December 2009&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDF&lt;/a&gt;. &lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;5.1 Edition, June     2011&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-15.12.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML&lt;/a&gt;.&lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;6th Edition, June     2015&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-json-object&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML&lt;/a&gt;.&lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;7ʰ Edition, June     2016&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-json-object&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML&lt;/a&gt;.&lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;8th edition, June     2017&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;http://www.ecma-international.org/ecma-262/8.0/index.html#sec-json-object&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML&lt;/a&gt;.&lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;\n&lt;kbd&gt;&lt;code&gt;9th Edition,          2018&lt;/code&gt;&lt;/kbd&gt;&lt;kbd&gt;&lt;code&gt;  &lt;a href=&quot;https://tc39.github.io/ecma262/&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML&lt;/a&gt;.&lt;/code&gt;&lt;/kbd&gt;&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;NOTE «&lt;/strong&gt; &lt;a href=&quot;https://www.ecma-international.org/activities/Languages/Language%20overview.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;4th edition&lt;/a&gt; of ECMAScript not &lt;a href=&quot;https://stackoverflow.com/a/2329662/5081877&quot;&gt;published as the work was incomplete&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;JSON defines a small set of formatting rules for the portable representation of structured data.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt; Key values must be quoted, only Strings are allowed for keys. If you use other than String it will convert to String. But not recommended to use keys other than String&apos;s. Check an example like this - &lt;code&gt;{ &apos;key&apos;:&apos;val&apos; }&lt;/code&gt; over &lt;a href=&quot;https://jsonformatter.curiousconcept.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;RFC 4627 - jsonformatter&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; storage = {\n   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n };\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( storage[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] ); &lt;span class=&quot;hljs-comment&quot;&gt;// Hello&lt;/span&gt;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( storage ) ); &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;0&quot;:null,&quot;1&quot;:&quot;Hello&quot;,&quot;2&quot;:&quot;world!&quot;}&lt;/span&gt;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objLiteral = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;key1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;val1&apos;&lt;/span&gt;};\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], arr2 = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;Yash&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sam&apos;&lt;/span&gt; ];\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;k&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;v&apos;&lt;/span&gt; }, obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;k2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;v2&apos;&lt;/span&gt; };\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fun = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;keyFun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {} ;\n\n objLiteral[ arr ] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;ArrayVal&apos;&lt;/span&gt;;     objLiteral[ arr2 ] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;OverridenArrayVal&apos;&lt;/span&gt;;\n objLiteral[ obj ] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;ObjectVal&apos;&lt;/span&gt;;    objLiteral[ obj2 ] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;OverridenObjectVal&apos;&lt;/span&gt;;\n objLiteral[ fun ] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;FunctionVal&apos;&lt;/span&gt;;\n\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( objLiteral );\n &lt;span class=&quot;hljs-comment&quot;&gt;// Object {key1: &quot;val1&quot;, 10,20: &quot;ArrayVal&quot;, Yash,Sam: &quot;OverridenArrayVal&quot;, [object Object]: &quot;OverridenObjectVal&quot;, function keyFun() {}: &quot;FunctionVal&quot;}&lt;/span&gt;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( objLiteral ) );\n &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;key1&quot;:&quot;val1&quot;,&quot;10,20&quot;:&quot;ArrayVal&quot;,&quot;Yash,Sam&quot;:&quot;OverridenArrayVal&quot;,&quot;[object Object]&quot;:&quot;OverridenObjectVal&quot;,&quot;function keyFun() {}&quot;:&quot;FunctionVal&quot;}&lt;/span&gt;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( objLiteral ) ) );\n &lt;span class=&quot;hljs-comment&quot;&gt;// Object {key1: &quot;val1&quot;, 10,20: &quot;ArrayVal&quot;, Yash,Sam: &quot;OverridenArrayVal&quot;, [object Object]: &quot;OverridenObjectVal&quot;, function keyFun() {}: &quot;FunctionVal&quot;}&lt;/span&gt;\n\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Accessing Array  Val : &apos;&lt;/span&gt;, objLiteral[ [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;] ] );\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Accessing Object Val : &apos;&lt;/span&gt;, objLiteral[ &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Object]&apos;&lt;/span&gt; ] );\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Accessing Function Val : &apos;&lt;/span&gt;, objLiteral[ &lt;span class=&quot;hljs-string&quot;&gt;&apos;function keyFun() {}&apos;&lt;/span&gt; ] );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt; JSON Strings must be quoted with &quot; and not &apos;. A string is very much like a C or Java string. &lt;strong&gt;Strings should be wrapped in double quotes.&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;Literals are fixed values, not variables, that you literally provide in your script.&lt;/li&gt;\n&lt;li&gt;A string is a sequence of zero or more characters wrapped in quotes with backslash escapement, the same notation used in most programming languages.&lt;/li&gt;\n&lt;li&gt;  - Special Symbols are allowed in String but not recomended to use.&lt;/li&gt;\n&lt;li&gt;&quot;  - Special characters can be escaped. But not recomended to escape (&apos;) Single Quotes.\nIn Strict mode it will throw and Error - &lt;code&gt;SyntaxError: Unexpected token &apos; in JSON&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Check with this code &lt;code&gt;{ &quot;Hai\\&quot; \\n Team &quot;:5, &quot;Bye \\&apos;&quot;: 7 }&lt;/code&gt; over online JSON Edtions. &lt;code&gt;Modes &lt;/code&gt;&lt;a href=&quot;http://www.jsoneditoronline.org/?id=14c0acaf4e147250022deaa3834e7bd9&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;notStrict&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, &lt;/code&gt;&lt;a href=&quot;http://json.parser.online.fr/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Strinct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;{&apos;foo&apos;: 452}&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// {&apos;foo&apos;: 452}&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonStr = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;foo&quot;: 452}&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;foo&quot;: 452}&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;( jsonString ); &lt;span class=&quot;hljs-comment&quot;&gt;// Unexpected token &apos; in JSON at position 1()&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;( jsonStr ); &lt;span class=&quot;hljs-comment&quot;&gt;// Object {foo: 452}&lt;/span&gt;\n\n    objLiteral[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Object {foo: 42, key: &quot;val&quot;}&lt;/span&gt;\n    objLiteral.&lt;span class=&quot;hljs-property&quot;&gt;key2&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// objLiteral.key\\n3 - SyntaxError: Invalid or unexpected token&lt;/span&gt;\n    objLiteral[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key\\n3&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Object {&quot;foo&quot;: &quot;42&quot;, key: &quot;val&quot;, key2: &quot;val&quot;, &quot;key3&quot;: &quot;val&quot;}&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( objLiteral ); &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;foo&quot;:&quot;42&quot;,&quot;key&quot;:&quot;val&quot;,&quot;key2&quot;:&quot;val&quot;,&quot;key\\n3&quot;:&quot;val&quot;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Object &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors&quot; rel=&quot;nofollow noreferrer&quot;&gt;Property accessors&lt;/a&gt;  provide access to an object&apos;s properties by using the dot notation or the bracket notation.&lt;/p&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;p&gt; You have a more limited range of values (e.g. no functions allowed). A value can be a string in double quotes, number, boolean, null, object, or array. These structures can be nested.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objLiteral = {};\n objLiteral.&lt;span class=&quot;hljs-property&quot;&gt;funKey&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Object Key with function as value - Its outcome message.&apos;&lt;/span&gt;);\n };\n\n objLiteral[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Key&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Val&apos;&lt;/span&gt;;\n\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Object Literal Fun : &apos;&lt;/span&gt;, objLiteral );\n &lt;span class=&quot;hljs-comment&quot;&gt;// Object Literal Fun :  Object {Key: &quot;Val&quot;}Key: &quot;Val&quot;funKey: sayHello()__proto__: Object&lt;/span&gt;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( objLiteral ) ); &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;Key&quot;:&quot;Val&quot;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rq9Th.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rq9Th.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt; &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; is the most popular implementation of the ECMAScript Standard.\nThe core features of Javascript are based on the ECMAScript standard,  but Javascript also has other additional features that are not in the ECMA specifications/standard. &lt;strong&gt;Every browser has a JavaScript interpreter.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;JavaScript is a dynamically typed language. That means you don&apos;t have to specify the data type of a variable when you declare it, and data types are converted automatically as needed during script execution.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Literals&lt;/code&gt;&lt;/a&gt; :&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;37&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 30&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;37&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;377&quot;&lt;/span&gt;\n+&lt;span class=&quot;hljs-string&quot;&gt;&apos;37&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 44&lt;/span&gt;\n+&lt;span class=&quot;hljs-string&quot;&gt;&apos;37&apos;&lt;/span&gt;       &lt;span class=&quot;hljs-comment&quot;&gt;// 37&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;37&apos;&lt;/span&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;37&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;37&apos;&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// 37&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;3.7&apos;&lt;/span&gt;);    &lt;span class=&quot;hljs-comment&quot;&gt;// 3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3.7&lt;/span&gt;);    &lt;span class=&quot;hljs-comment&quot;&gt;// 3.7&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// An alternative method of retrieving a number from a string is with the + (unary plus) operator:&lt;/span&gt;\n+&lt;span class=&quot;hljs-string&quot;&gt;&apos;3.7&apos;&lt;/span&gt;              &lt;span class=&quot;hljs-comment&quot;&gt;// 3.7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Object literals&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7159#page-6&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;&lt;code&gt;RFC 7159&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;An object structure is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members).  A name is a\nstring.  A single colon comes after each name, separating the name from the value.  A single comma separates a value from a following\nname.  The names within an object SHOULD be unique.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;ECMAScript supports prototype-based inheritance. Every constructor has an associated prototype, and every object created by that constructor has an implicit reference to the prototype (called the objects\nprototype) associated with its constructor. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tc39/ecma262/master/img/figure-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;In a class-based object-oriented language, in general, state is carried by instances, methods are carried by classes, and inheritance is only of structure and behavior. In ECMAScript, the state and methods are carried by objects, and structure, behavior, and state are all inherited.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;A prototype is an object used to implement structure, state, and behavior inheritance in ECMAScript. When a constructor creates an object, that object implicitly references the constructors associated prototype for the purpose of resolving property references. The constructors associated prototype can\nbe referenced by the program expression constructor.prototype, and properties added to an objects prototype are shared, through inheritance, by all objects sharing the prototype.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As far as I understand the main difference is the &lt;strong&gt;&lt;em&gt;flexibility&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;JSON is a kind of wrapper on &quot;JavaScript Object Notation&quot; which forces users to obey more strict rules for defining the objects. And it does this by limiting the possible object declaration ways provided by JavaScript Object Notation feature.&lt;/p&gt;\n\n&lt;p&gt;As a result we have a simpler and more standardized objects which suits better on data-exchange between platforms.&lt;/p&gt;\n\n&lt;p&gt;So basically, the newObject in my example above is an object defined by using JavaScript Objeect Notation; but it is not a &apos;valid&apos; JSON object because it does not follow the rules that JSON standards require.&lt;/p&gt;\n\n&lt;p&gt;This link is also quite helpful:\n&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb299886.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://msdn.microsoft.com/en-us/library/bb299886.aspx&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For the ones who still think that RFC are more important than blogs and opinion based misconceptions, let&apos;s try to answer clarifying some points.\nI&apos;m not going to repeat all the correct differences already mentioned in previous answers, here I&apos;m just trying adding value summarizing some crucial part rfc7159&lt;/p&gt;\n&lt;p&gt;Extracts from &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7159&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.rfc-editor.org/rfc/rfc7159&lt;/a&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;JavaScript &lt;strong&gt;Object&lt;/strong&gt; Notation (JSON) is a text format for the\nserialization of structured data.  It is derived from the &lt;strong&gt;object&lt;/strong&gt;\nliterals of JavaScript, as defined in the ECMAScript Programming\nLanguage Standard, Third Edition [ECMA-262].&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;JSON can represent four primitive types (strings, numbers, booleans,\nand null) and two structured types (&lt;strong&gt;objects&lt;/strong&gt; and arrays).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; is an unordered collection of zero or more name/value\npairs, where a name is a string and a value is a string, number,\nboolean, null, &lt;strong&gt;object&lt;/strong&gt;, or array.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;begin-object&lt;/strong&gt;    = ws %x7B ws  ; { left curly bracket&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;end-object&lt;/strong&gt;      = ws %x7D ws  ; } right curly bracket&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A JSON value MUST be an &lt;strong&gt;object&lt;/strong&gt;, array, number, or string, or one of\nthe following three literal names: false null true&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; structure is represented as a pair of curly brackets&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The names within an &lt;strong&gt;object&lt;/strong&gt; SHOULD be unique.\n&lt;strong&gt;object&lt;/strong&gt; = &lt;strong&gt;begin-object&lt;/strong&gt; [ member *( value-separator member ) ]\n&lt;strong&gt;end-object&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; whose names are all unique is interoperable in the sense\nthat all software implementations receiving that &lt;strong&gt;object&lt;/strong&gt; will agree on\nthe name-value mappings.  When the names within an &lt;strong&gt;object&lt;/strong&gt; are not\nunique, the behavior of software that receives such an &lt;strong&gt;object&lt;/strong&gt; is\nunpredictable.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Examples (from page 12 of RFC)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;This is a JSON object:&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;      {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Image&quot;&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Width&quot;&lt;/span&gt;:  &lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Height&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Title&quot;&lt;/span&gt;:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;View from 15th Floor&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Thumbnail&quot;&lt;/span&gt;: {\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;Url&quot;&lt;/span&gt;:    &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.example.com/image/481989943&quot;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;Height&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;Width&quot;&lt;/span&gt;:  &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n            },\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Animated&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;IDs&quot;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;116&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;943&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;38793&lt;/span&gt;]\n          }\n      }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Its Image member is an &lt;strong&gt;object&lt;/strong&gt; whose Thumbnail member is an &lt;strong&gt;object&lt;/strong&gt; and\nwhose IDs member is an array of numbers.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There is really no such thing as a &quot;JSON Object&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Really?&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;First you should know what JSON is:&lt;/p&gt;\n\n&lt;p&gt;It is language agnostic data-interchange format.\nThe syntax of JSON was inspired by the JavaScript Object Literal notation, but there are differences between them.&lt;/p&gt;\n\n&lt;p&gt;For example, in JSON all keys must be quoted, while in object literals this is not necessary:&lt;/p&gt;\n\n&lt;p&gt;// JSON:\n{ &quot;foo&quot;: &quot;bar&quot; }&lt;/p&gt;\n\n&lt;p&gt;// Object literal:\nvar o = { foo: &quot;bar&quot; };\nThe quotes are mandatory on JSON because in JavaScript (more exactly in ECMAScript 3rd. Edition), the usage of reserved words as property names is disallowed, for example:&lt;/p&gt;\n\n&lt;p&gt;var o = { if: &quot;foo&quot; }; // SyntaxError in ES3\nWhile, using a string literal as a property name (quoting the property name) gives no problems:&lt;/p&gt;\n\n&lt;p&gt;var o = { &quot;if&quot;: &quot;foo&quot; }; \nSo for &quot;compatibility&quot; (and easy eval&apos;ing maybe?) the quotes are mandatory.&lt;/p&gt;\n\n&lt;p&gt;The data types in JSON are also restricted to the following values:&lt;/p&gt;\n\n&lt;p&gt;string\nnumber\nobject\narray\nA literal as:\ntrue\nfalse\nnull\nThe grammar of Strings changes. They have to be delimited by double quotes, while in JavaScript, you can use single or double quotes interchangeably.&lt;/p&gt;\n\n&lt;p&gt;// Invalid JSON:\n{ &quot;foo&quot;: &apos;bar&apos; }\nThe accepted JSON grammar of Numbers also changes, in JavaScript you can use Hexadecimal Literals, for example 0xFF, or (the infamous) Octal Literals e.g. 010. In JSON you can use only Decimal Literals.&lt;/p&gt;\n\n&lt;p&gt;// Invalid JSON:\n{ &quot;foo&quot;: 0xFF }&lt;/p&gt;\n    ","\n&lt;p&gt;Here is one surprising difference: you can not use &lt;code&gt;undefined&lt;/code&gt; in json and all object fields with undefined values will disappear after &lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; object =  { &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; } ;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; badJSON= &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;a&quot;: undefined }&apos;&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;valid JS object :&apos;&lt;/span&gt;, object );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;JSON from object:&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object) );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;invalid json    :&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(badJSON) );&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h1&gt;&lt;/h1&gt;\n    ","\n&lt;h2&gt;Javascript Object Literal vs JSON:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Object literal syntax is a very convenient way to create javascript objects&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;JSON&lt;/code&gt; language, which stands for &apos;Javascript object notation&apos;, has its syntax derived from javascript object literal syntax. It is used as a programming language independent textual data transfer format.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;JS object notation, used in JS to create objects in the code conveniently:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; JS_Object = {\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// the key here is the number 1, the value is the number 2&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// the key is the string a, the value is the string b&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hi&apos;&lt;/span&gt;) }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// the key is func, the value is the function&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Example of JSON:&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;widget&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sample Konfabulator Widget&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;main_window&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; \n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Images/Sun.png&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sun1&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;hOffset&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;vOffset&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;alignment&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;center&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Click Here&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;text1&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;hOffset&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;vOffset&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;alignment&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;onMouseUp&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sun1.opacity = (sun1.opacity / 100) * 90;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Main differences:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;All object keys in JSON must be strings. In Javascript object keys can be strings or numbers&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All strings in JSON must be quoted in &quot;double quotes&quot;. Whereas in Javascript both single quotes and double quotes are allowed. Even with no quotes in the Javascript object notation the object keys are implicitly casted to strings.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In JSON a function cannot be defined as a value of an object (since this is Javascript specific). In Javascript this is completely legal.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Javascript build in &lt;code&gt;JSON&lt;/code&gt; object:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; objects can be easily converted to Javascript and vice versa using the built in &lt;code&gt;JSON&lt;/code&gt; object which Javascript offers in its runtime. For example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;property1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;property2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n}; &lt;span class=&quot;hljs-comment&quot;&gt;// creating object with JS object literal syntax&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;_object = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// stringify JS object to a JSON string&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;_object); &lt;span class=&quot;hljs-comment&quot;&gt;// note that the (string) keys are in double quotes&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; JS_object = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;_object);  &lt;span class=&quot;hljs-comment&quot;&gt;// parse JSON string to JS object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(JS_object.&lt;span class=&quot;hljs-property&quot;&gt;property1&lt;/span&gt;, JS_object.&lt;span class=&quot;hljs-property&quot;&gt;property2&lt;/span&gt;); \n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing keys of the newly created object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"mobile","slug":"mobile"},{"name":"smart-pointers","slug":"smart-pointers"},{"name":"csv","slug":"csv"},{"name":"null-layout-manager","slug":"null-layout-manager"},{"name":"integer-overflow","slug":"integer-overflow"},{"name":"viewmodel","slug":"viewmodel"},{"name":"srand","slug":"srand"},{"name":"arrayindexoutofboundsexception","slug":"arrayindexoutofboundsexception"},{"name":"sql-server-2005","slug":"sql-server-2005"},{"name":"object-slicing","slug":"object-slicing"},{"name":"extern","slug":"extern"},{"name":"cmd","slug":"cmd"},{"name":"hierarchical-data","slug":"hierarchical-data"},{"name":"redirect","slug":"redirect"},{"name":"directory","slug":"directory"},{"name":"c-strings","slug":"c-strings"},{"name":"php-password-hash","slug":"php-password-hash"},{"name":"templates","slug":"templates"},{"name":"nullpointerexception","slug":"nullpointerexception"},{"name":"idioms","slug":"idioms"}]},"__N_SSG":true}