{"pageProps":{"data":{"count":1,"rows":[{"id":263,"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605","postType":"QUESTION","createdAt":"2022-07-09T17:24:13.000Z","updatedAt":"2022-07-09T17:24:13.000Z","tags":[{"id":1672,"name":"extern","slug":"extern","createdAt":"2022-07-09T17:24:13.000Z","updatedAt":"2022-07-09T17:24:13.000Z","Questions_Tags":{"questionId":263,"tagId":1672}}]}]},"slug":"extern","page":1,"answers":{"263":["\n&lt;p&gt;Using &lt;code&gt;extern&lt;/code&gt; is only of relevance when the program you&apos;re building\nconsists of multiple source files linked together, where some of the\nvariables defined, for example, in source file &lt;code&gt;file1.c&lt;/code&gt; need to be\nreferenced in other source files, such as &lt;code&gt;file2.c&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It is important to &lt;a href=&quot;https://stackoverflow.com/questions/1410563&quot;&gt;understand the difference between &lt;em&gt;defining&lt;/em&gt; a\nvariable and &lt;em&gt;declaring&lt;/em&gt; a\nvariable&lt;/a&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A variable is &lt;strong&gt;declared&lt;/strong&gt; when the compiler is informed that a\nvariable exists (and this is its type); it does not allocate the\nstorage for the variable at that point.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A variable is &lt;strong&gt;defined&lt;/strong&gt; when the compiler allocates the storage for\nthe variable.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You may declare a variable multiple times (though once is sufficient);\nyou may only define it once within a given scope.\nA variable definition is also a declaration, but not all variable\ndeclarations are definitions.&lt;/p&gt;\n&lt;h2&gt;Best way to declare and define global variables&lt;/h2&gt;\n&lt;p&gt;The clean, reliable way to declare and define global variables is to use\na header file to contain an &lt;code&gt;extern&lt;/code&gt; &lt;em&gt;declaration&lt;/em&gt; of the variable.&lt;/p&gt;\n&lt;p&gt;The header is included by the one source file that defines the variable\nand by all the source files that reference the variable.\nFor each program, one source file (and only one source file) defines the\nvariable.\nSimilarly, one header file (and only one header file) should declare the\nvariable.\nThe header file is crucial; it enables cross-checking between\nindependent TUs (translation units  think source files) and ensures\nconsistency.&lt;/p&gt;\n&lt;p&gt;Although there are other ways of doing it, this method is simple and\nreliable.\nIt is demonstrated by &lt;code&gt;file3.h&lt;/code&gt;, &lt;code&gt;file1.c&lt;/code&gt; and &lt;code&gt;file2.c&lt;/code&gt;:&lt;/p&gt;\n&lt;h3&gt;file3.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Declaration of the variable */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file1.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Declaration made available here */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog1.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Function declarations */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Variable defined here */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable = &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;/* Definition checked against declaration */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog1.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s the best way to declare and define global variables.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog1&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The complete programs shown use functions, so function declarations have\ncrept in.\nBoth C99 and C11 require functions to be declared or defined before they\nare used (whereas C90 did not, for good reasons).\nI use the keyword &lt;code&gt;extern&lt;/code&gt; in front of function declarations in headers\nfor consistency &amp;nbsp;to match the &lt;code&gt;extern&lt;/code&gt; in front of variable\ndeclarations in headers.\nMany people prefer not to use &lt;code&gt;extern&lt;/code&gt; in front of function\ndeclarations; the compiler doesn&apos;t care  and ultimately, neither do I\nas long as you&apos;re consistent, at least within a source file.&lt;/p&gt;\n&lt;h3&gt;prog1.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog1.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog1.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_it();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_it();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog1&lt;/code&gt; uses &lt;code&gt;prog1.c&lt;/code&gt;, &lt;code&gt;file1.c&lt;/code&gt;, &lt;code&gt;file2.c&lt;/code&gt;, &lt;code&gt;file3.h&lt;/code&gt; and &lt;code&gt;prog1.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The file &lt;code&gt;prog1.mk&lt;/code&gt; is a makefile for &lt;code&gt;prog1&lt;/code&gt; only.\nIt will work with most versions of &lt;code&gt;make&lt;/code&gt; produced since about the turn\nof the millennium.\nIt is not tied specifically to GNU Make.&lt;/p&gt;\n&lt;h3&gt;prog1.mk&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;# Minimal makefile &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prog1\n\nPROGRAM = prog1\nFILES.c = prog1.c file1.c file2.c\nFILES.h = prog1.h file3.h\nFILES.o = ${FILES.c:.c=.o}\n\nCC      = gcc\nSFLAGS  = -&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;=c11\nGFLAGS  = -g\nOFLAGS  = -O3\nWFLAG1  = -Wall\nWFLAG2  = -Wextra\nWFLAG3  = -Werror\nWFLAG4  = -Wstrict-prototypes\nWFLAG5  = -Wmissing-prototypes\nWFLAGS  = ${WFLAG1} ${WFLAG2} ${WFLAG3} ${WFLAG4} ${WFLAG5}\nUFLAGS  = # Set on command line only\n\nCFLAGS  = ${SFLAGS} ${GFLAGS} ${OFLAGS} ${WFLAGS} ${UFLAGS}\nLDFLAGS =\nLDLIBS  =\n\nall:    ${PROGRAM}\n\n${PROGRAM}: ${FILES.o}\n    ${CC} -o $@ ${CFLAGS} ${FILES.o} ${LDFLAGS} ${LDLIBS}\n\nprog1.o: ${FILES.h}\nfile1.o: ${FILES.h}\nfile2.o: ${FILES.h}\n\n# If it exists, prog1.dSYM is a directory on macOS\nDEBRIS = a.out core *~ *.dSYM\nRM_FR  = rm -fr\n\nclean:\n    ${RM_FR} ${FILES.o} ${PROGRAM} ${DEBRIS}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Guidelines&lt;/h2&gt;\n&lt;p&gt;Rules to be broken by experts only, and only with good reason:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A header file only contains &lt;code&gt;extern&lt;/code&gt; declarations of variables  never\n&lt;code&gt;static&lt;/code&gt; or unqualified variable definitions.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For any given variable, only one header file declares it (SPOT \nSingle Point of Truth).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A source file never contains &lt;code&gt;extern&lt;/code&gt; declarations of variables \nsource files always include the (sole) header that declares them.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For any given variable, exactly one source file defines the variable,\npreferably initializing it too.  (Although there is no need to\ninitialize explicitly to zero, it does no harm and can do some good,\nbecause there can be only one initialized definition of a particular\nglobal variable in a program).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The source file that defines the variable also includes the header to\nensure that the definition and the declaration are consistent.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A function should never need to declare a variable using &lt;code&gt;extern&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Avoid global variables whenever possible  use functions instead.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sup&gt;&lt;em&gt;The source code and text of this answer are available in my\n&lt;a href=&quot;https://github.com/jleffler/soq&quot; rel=&quot;noreferrer&quot;&gt;SOQ&lt;/a&gt; (Stack Overflow Questions)\nrepository on GitHub in the\n&lt;a href=&quot;https://github.com/jleffler/soq/tree/master/src/so-0143-3204&quot; rel=&quot;noreferrer&quot;&gt;src/so-0143-3204&lt;/a&gt;\nsub-directory.&lt;/em&gt;\n&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;&lt;em&gt;If you&apos;re not an experienced C programmer, you could (and perhaps\nshould) stop reading here.&lt;/em&gt;\n&lt;/sup&gt;&lt;/p&gt;\n&lt;h2&gt;Not so good way to define global variables&lt;/h2&gt;\n&lt;p&gt;With some (indeed, many) C compilers, you can get away with what&apos;s\ncalled a &apos;common&apos; definition of a variable too.\n&apos;Common&apos;, here, refers to a technique used in Fortran for sharing\nvariables between source files, using a (possibly named) COMMON block.\nWhat happens here is that each of a number of files provides a tentative\ndefinition of the variable.\nAs long as no more than one file provides an initialized definition,\nthen the various files end up sharing a common single definition of the\nvariable:&lt;/p&gt;\n&lt;h3&gt;file10.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in portable code */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { l++; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file11.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in portable code */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { l--; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file12.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in portable code */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;l = %ld\\n&quot;&lt;/span&gt;, l); }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This technique does not conform to the letter of the C standard and the\n&apos;one definition rule&apos;  it is officially undefined behaviour:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#J.2&quot; rel=&quot;noreferrer&quot;&gt;J.2 Undefined behavior&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An identifier with external linkage is used, but in the program there\ndoes not exist exactly one external definition for the identifier, or\nthe identifier is not used and there exist multiple external\ndefinitions for the identifier (6.9).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#6.9p5&quot; rel=&quot;noreferrer&quot;&gt;§6.9 External definitions ¶5&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An &lt;em&gt;external definition&lt;/em&gt; is an external declaration that is also a\ndefinition of a function (other than an inline definition) or an\nobject.\nIf an identifier declared with external linkage is used in an\nexpression (other than as part of the operand of a &lt;code&gt;sizeof&lt;/code&gt; or\n&lt;code&gt;_Alignof&lt;/code&gt; operator whose result is an integer constant), somewhere in\nthe entire program there shall be exactly one external definition for\nthe identifier; otherwise, there shall be no more than\none.&lt;sup&gt;161)&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;sup&gt;161)&lt;/sup&gt; Thus, if an identifier declared with external linkage\nis not used in an expression, there need be no external definition for\nit.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;However, the C standard also lists it in informative Annex J as one of\nthe &lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#J.5&quot; rel=&quot;noreferrer&quot;&gt;Common extensions&lt;/a&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#J.5.11&quot; rel=&quot;noreferrer&quot;&gt;J.5.11 Multiple external definitions&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There may be more than one external definition for the identifier of\nan object, with or without the explicit use of the keyword extern; if\nthe definitions disagree, or more than one is initialized, the\nbehavior is undefined (6.9.2).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Because this technique is not always supported, it is best to avoid\nusing it, &lt;em&gt;especially if your code needs to be portable&lt;/em&gt;.\nUsing this technique, you can also end up with unintentional type\npunning.&lt;/p&gt;\n&lt;p&gt;If one of the files above declared &lt;code&gt;l&lt;/code&gt; as a &lt;code&gt;double&lt;/code&gt; instead of as a\n&lt;code&gt;long&lt;/code&gt;, C&apos;s type-unsafe linkers probably would not spot the mismatch.\nIf you&apos;re on a machine with 64-bit &lt;code&gt;long&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt;, you&apos;d not even\nget a warning; on a machine with 32-bit &lt;code&gt;long&lt;/code&gt; and 64-bit &lt;code&gt;double&lt;/code&gt;,\nyou&apos;d probably get a warning about the different sizes  the linker\nwould use the largest size, exactly as a Fortran program would take the\nlargest size of any common blocks.&lt;/p&gt;\n&lt;p&gt;Note that GCC 10.1.0, which was released on 2020-05-07, changes the\ndefault compilation options to use\n&lt;a href=&quot;https://gcc.gnu.org/gcc-10/porting_to.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;-fno-common&lt;/code&gt;&lt;/a&gt;, which means\nthat by default, the code above no longer links unless you override the\ndefault with &lt;code&gt;-fcommon&lt;/code&gt; (or use attributes, etc  see the link).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog2&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog2.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog2.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    inc();\n    put();\n    dec();\n    put();\n    dec();\n    put();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog2&lt;/code&gt; uses &lt;code&gt;prog2.c&lt;/code&gt;, &lt;code&gt;file10.c&lt;/code&gt;, &lt;code&gt;file11.c&lt;/code&gt;, &lt;code&gt;file12.c&lt;/code&gt;, &lt;code&gt;prog2.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h3&gt;Warning&lt;/h3&gt;\n&lt;p&gt;As noted in comments here, and as stated in my answer to a similar\n&lt;a href=&quot;https://stackoverflow.com/questions/1490693&quot;&gt;question&lt;/a&gt;, using multiple\ndefinitions for a global variable leads to undefined behaviour (J.2;\n§6.9), which is the standard&apos;s way of saying &quot;anything could happen&quot;.\nOne of the things that can happen is that the program behaves as you\nexpect; and J.5.11 says, approximately, &quot;you might be lucky more often\nthan you deserve&quot;.\nBut a program that relies on multiple definitions of an extern variable\n with or without the explicit &apos;extern&apos; keyword  is not a strictly\nconforming program and not guaranteed to work everywhere.\nEquivalently: it contains a bug which may or may not show itself.&lt;/p&gt;\n&lt;h2&gt;Violating the guidelines&lt;/h2&gt;\n&lt;p&gt;There are, of course, many ways in which these guidelines can be broken.\nOccasionally, there may be a good reason to break the guidelines, but\nsuch occasions are extremely unusual.&lt;/p&gt;\n&lt;h3&gt;faulty_header.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; some_var;    &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in a header!!! */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note 1: if the header defines the variable without the &lt;code&gt;extern&lt;/code&gt; keyword,\nthen each file that includes the header creates a tentative definition\nof the variable.\nAs noted previously, this will often work, but the C standard does not\nguarantee that it will work.&lt;/p&gt;\n&lt;h3&gt;broken_header.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; some_var = &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;/* Only one source file in a program can use this */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note 2: if the header defines and initializes the variable, then only\none source file in a given program can use the header.\nSince headers are primarily for sharing information, it is a bit silly\nto create one that can only be used once.&lt;/p&gt;\n&lt;h3&gt;seldom_correct.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; hidden_global = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Each source file gets its own copy  */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note 3: if the header defines a static variable (with or without\ninitialization), then each source file ends up with its own private\nversion of the &apos;global&apos; variable.&lt;/p&gt;\n&lt;p&gt;If the variable is actually a complex array, for example, this can lead\nto extreme duplication of code.  It can, very occasionally, be a\nsensible way to achieve some effect, but that is very unusual.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Summary&lt;/h2&gt;\n&lt;p&gt;Use the header technique I showed first.\nIt works reliably and everywhere.\nNote, in particular, that the header declaring the &lt;code&gt;global_variable&lt;/code&gt; is\nincluded in every file that uses it  including the one that defines it.\nThis ensures that everything is self-consistent.&lt;/p&gt;\n&lt;p&gt;Similar concerns arise with declaring and defining functions \nanalogous rules apply.\nBut the question was about variables specifically, so I&apos;ve kept the\nanswer to variables only.&lt;/p&gt;\n&lt;h3&gt;End of Original Answer&lt;/h3&gt;\n&lt;p&gt;&lt;sup&gt;&lt;em&gt;If you&apos;re not an experienced C programmer, you probably should stop reading here.&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Late Major Addition&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Avoiding Code Duplication&lt;/h1&gt;\n&lt;p&gt;One concern that is sometimes (and legitimately) raised about the\n&apos;declarations in headers, definitions in source&apos; mechanism described\nhere is that there are two files to be kept synchronized  the header\nand the source.  This is usually followed up with an observation that a\nmacro can be used so that the header serves double duty  normally\ndeclaring the variables, but when a specific macro is set before the\nheader is included, it defines the variables instead.&lt;/p&gt;\n&lt;p&gt;Another concern can be that the variables need to be defined in each of\na number of &apos;main programs&apos;.  This is normally a spurious concern; you\ncan simply introduce a C source file to define the variables and link\nthe object file produced with each of the programs.&lt;/p&gt;\n&lt;p&gt;A typical scheme works like this, using the original global variable\nillustrated in &lt;code&gt;file3.h&lt;/code&gt;:&lt;/p&gt;\n&lt;h3&gt;file3a.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file1a.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3a.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variable defined - but not initialized */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog3.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2a.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3a.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog3&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog3.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog3.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3a.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_it();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_it();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog3&lt;/code&gt; uses &lt;code&gt;prog3.c&lt;/code&gt;, &lt;code&gt;file1a.c&lt;/code&gt;, &lt;code&gt;file2a.c&lt;/code&gt;, &lt;code&gt;file3a.h&lt;/code&gt;, &lt;code&gt;prog3.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Variable initialization&lt;/h2&gt;\n&lt;p&gt;The problem with this scheme as shown is that it does not provide for\ninitialization of the global variable.  With C99 or C11 and variable argument\nlists for macros, you could define a macro to support initialization too.\n(With C89 and no support for variable argument lists in macros, there is no\neasy way to handle arbitrarily long initializers.)&lt;/p&gt;\n&lt;h3&gt;file3b.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN                  &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZER(...)        = __VA_ARGS__&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN                  extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZER(...)        &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZER&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;)&lt;/span&gt;;\nEXTERN &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b; } oddball_struct &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZER&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; })&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;Reverse contents of &lt;code&gt;#if&lt;/code&gt; and &lt;code&gt;#else&lt;/code&gt; blocks, fixing bug identified by\n&lt;a href=&quot;https://stackoverflow.com/users/369317/denis-kniazhev&quot;&gt;Denis Kniazhev&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;h3&gt;file1b.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3b.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog4.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2b.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3b.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog4.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n    oddball_struct.a += global_variable;\n    oddball_struct.b -= global_variable / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Clearly, the code for the oddball structure is not what you&apos;d normally\nwrite, but it illustrates the point.  The first argument to the second\ninvocation of &lt;code&gt;INITIALIZER&lt;/code&gt; is &lt;code&gt;{ 41&lt;/code&gt; and the remaining argument\n(singular in this example) is &lt;code&gt;43 }&lt;/code&gt;.  Without C99 or similar support\nfor variable argument lists for macros, initializers that need to\ncontain commas are very problematic.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;Correct header &lt;code&gt;file3b.h&lt;/code&gt; included (instead of &lt;code&gt;fileba.h&lt;/code&gt;) per\n&lt;a href=&quot;https://stackoverflow.com/users/369317/denis-kniazhev&quot;&gt;Denis Kniazhev&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog4&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog4.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog4.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3b.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog4.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_them();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_them();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oddball:   %d\\n&quot;&lt;/span&gt;, oddball_value());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog4&lt;/code&gt; uses &lt;code&gt;prog4.c&lt;/code&gt;, &lt;code&gt;file1b.c&lt;/code&gt;, &lt;code&gt;file2b.c&lt;/code&gt;, &lt;code&gt;prog4.h&lt;/code&gt;, &lt;code&gt;file3b.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Header Guards&lt;/h2&gt;\n&lt;p&gt;Any header should be protected against reinclusion, so that type\ndefinitions (enum, struct or union types, or typedefs generally) do not\ncause problems.  The standard technique is to wrap the body of the\nheader in a header guard such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE3B_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE3B_H_INCLUDED&lt;/span&gt;\n\n...contents of header...\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE3B_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The header might be included twice indirectly.  For example, if\n&lt;code&gt;file4b.h&lt;/code&gt; includes &lt;code&gt;file3b.h&lt;/code&gt; for a type definition that isn&apos;t shown,\nand &lt;code&gt;file1b.c&lt;/code&gt; needs to use both header &lt;code&gt;file4b.h&lt;/code&gt; and &lt;code&gt;file3b.h&lt;/code&gt;, then\nyou have some more tricky issues to resolve.  Clearly, you might revise\nthe header list to include just &lt;code&gt;file4b.h&lt;/code&gt;.  However, you might not be\naware of the internal dependencies  and the code should, ideally,\ncontinue to work.&lt;/p&gt;\n&lt;p&gt;Further, it starts to get tricky because you might include &lt;code&gt;file4b.h&lt;/code&gt;\nbefore including &lt;code&gt;file3b.h&lt;/code&gt; to generate the definitions, but the normal\nheader guards on &lt;code&gt;file3b.h&lt;/code&gt; would prevent the header being reincluded.&lt;/p&gt;\n&lt;p&gt;So, you need to include the body of &lt;code&gt;file3b.h&lt;/code&gt; at most once for\ndeclarations, and at most once for definitions, but you might need both\nin a single translation unit (TU  a combination of a source file and\nthe headers it uses).&lt;/p&gt;\n&lt;h2&gt;Multiple inclusion with variable definitions&lt;/h2&gt;\n&lt;p&gt;However, it can be done subject to a not too unreasonable constraint.\nLet&apos;s introduce a new set of file names:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;external.h&lt;/code&gt; for the EXTERN macro definitions, etc.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file1c.h&lt;/code&gt; to define types (notably, &lt;code&gt;struct oddball&lt;/code&gt;, the type of &lt;code&gt;oddball_struct&lt;/code&gt;).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file2c.h&lt;/code&gt; to define or declare the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file3c.c&lt;/code&gt; which defines the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file4c.c&lt;/code&gt; which simply uses the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file5c.c&lt;/code&gt; which shows that you can declare and then define the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file6c.c&lt;/code&gt; which shows that you can define and then (attempt to) declare the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In these examples, &lt;code&gt;file5c.c&lt;/code&gt; and &lt;code&gt;file6c.c&lt;/code&gt; directly include the header\n&lt;code&gt;file2c.h&lt;/code&gt; several times, but that is the simplest way to show that the\nmechanism works.  It means that if the header was indirectly included\ntwice, it would also be safe.&lt;/p&gt;\n&lt;p&gt;The restrictions for this to work are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The header defining or declaring the global variables may not itself\ndefine any types.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Immediately before you include a header that should define variables,\nyou define the macro DEFINE_VARIABLES.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The header defining or declaring the variables has stylized contents.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;external.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n** This header must not contain header guards (like &amp;lt;assert.h&amp;gt; must not).\n** Each time it is invoked, it redefines the macros EXTERN, INITIALIZE\n** based on whether macro DEFINE_VARIABLES is currently defined.\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; EXTERN&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; INITIALIZE&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN              &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZE(...)     = __VA_ARGS__&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN              extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZE(...)     &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file1c.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE1C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE1C_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;oddball&lt;/span&gt;\n{&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE1C_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2c.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard prologue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(DEFINE_VARIABLES) &amp;amp;&amp;amp; !defined(FILE2C_H_DEFINITIONS)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; FILE2C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE2C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2C_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;external.h&quot;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Support macros EXTERN, INITIALIZE */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file1c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Type definition for struct oddball */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(DEFINE_VARIABLES) || !defined(FILE2C_H_DEFINITIONS)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Global variable declarations / definitions */&lt;/span&gt;\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;)&lt;/span&gt;;\nEXTERN &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; oddball oddball_struct &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; })&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* !DEFINE_VARIABLES || !FILE2C_H_DEFINITIONS */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard epilogue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2C_H_DEFINITIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE2C_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file3c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file4c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n    oddball_struct.a += global_variable;\n    oddball_struct.b -= global_variable / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file5c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file6c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next source file completes the source (provides a main program) for &lt;code&gt;prog5&lt;/code&gt;, &lt;code&gt;prog6&lt;/code&gt; and &lt;code&gt;prog7&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog5.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_them();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_them();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oddball:   %d\\n&quot;&lt;/span&gt;, oddball_value());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog5&lt;/code&gt; uses &lt;code&gt;prog5.c&lt;/code&gt;, &lt;code&gt;file3c.c&lt;/code&gt;, &lt;code&gt;file4c.c&lt;/code&gt;, &lt;code&gt;file1c.h&lt;/code&gt;, &lt;code&gt;file2c.h&lt;/code&gt;, &lt;code&gt;external.h&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog6&lt;/code&gt; uses &lt;code&gt;prog5.c&lt;/code&gt;, &lt;code&gt;file5c.c&lt;/code&gt;, &lt;code&gt;file4c.c&lt;/code&gt;, &lt;code&gt;file1c.h&lt;/code&gt;, &lt;code&gt;file2c.h&lt;/code&gt;, &lt;code&gt;external.h&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog7&lt;/code&gt; uses &lt;code&gt;prog5.c&lt;/code&gt;, &lt;code&gt;file6c.c&lt;/code&gt;, &lt;code&gt;file4c.c&lt;/code&gt;, &lt;code&gt;file1c.h&lt;/code&gt;, &lt;code&gt;file2c.h&lt;/code&gt;, &lt;code&gt;external.h&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;This scheme avoids most problems.  You only run into a problem if a\nheader that defines variables (such as &lt;code&gt;file2c.h&lt;/code&gt;) is included by\nanother header (say &lt;code&gt;file7c.h&lt;/code&gt;) that defines variables.  There isn&apos;t an\neasy way around that other than &quot;don&apos;t do it&quot;.&lt;/p&gt;\n&lt;p&gt;You can partially work around the problem by revising &lt;code&gt;file2c.h&lt;/code&gt; into\n&lt;code&gt;file2d.h&lt;/code&gt;:&lt;/p&gt;\n&lt;h3&gt;file2d.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard prologue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(DEFINE_VARIABLES) &amp;amp;&amp;amp; !defined(FILE2D_H_DEFINITIONS)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; FILE2D_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE2D_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2D_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;external.h&quot;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Support macros EXTERN, INITIALIZE */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file1c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Type definition for struct oddball */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(DEFINE_VARIABLES) || !defined(FILE2D_H_DEFINITIONS)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Global variable declarations / definitions */&lt;/span&gt;\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;)&lt;/span&gt;;\nEXTERN &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; oddball oddball_struct &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; })&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* !DEFINE_VARIABLES || !FILE2D_H_DEFINITIONS */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard epilogue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2D_H_DEFINITIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE2D_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The issue becomes &apos;should the header include &lt;code&gt;#undef DEFINE_VARIABLES&lt;/code&gt;?&apos;\nIf you omit that from the header and wrap any defining invocation with\n&lt;code&gt;#define&lt;/code&gt; and &lt;code&gt;#undef&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in the source code (so the headers never alter the value of\n&lt;code&gt;DEFINE_VARIABLES&lt;/code&gt;), then you should be clean.  It is just a nuisance to\nhave to remember to write the the extra line.  An alternative might be:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;externdef.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n** This header must not contain header guards (like &amp;lt;assert.h&amp;gt; must not).\n** Each time it is included, the macro HEADER_DEFINING_VARIABLES should\n** be defined with the name (in quotes - or possibly angle brackets) of\n** the header to be included that defines variables when the macro\n** DEFINE_VARIABLES is defined.  See also: external.h (which uses\n** DEFINE_VARIABLES and defines macros EXTERN and INITIALIZE\n** appropriately).\n**\n** #define HEADER_DEFINING_VARIABLES &quot;file2c.h&quot;\n** #include &quot;externdef.h&quot;\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(HEADER_DEFINING_VARIABLES)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; HEADER_DEFINING_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; HEADER_DEFINING_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* HEADER_DEFINING_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is getting a tad convoluted, but seems to be secure (using the\n&lt;code&gt;file2d.h&lt;/code&gt;, with no &lt;code&gt;#undef DEFINE_VARIABLES&lt;/code&gt; in the &lt;code&gt;file2d.h&lt;/code&gt;).&lt;/p&gt;\n&lt;h3&gt;file7c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables - again */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables - again */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file8c.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard prologue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(DEFINE_VARIABLES) &amp;amp;&amp;amp; !defined(FILE8C_H_DEFINITIONS)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; FILE8C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE8C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE8C_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;external.h&quot;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Support macros EXTERN, INITIALIZE */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* struct oddball */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(DEFINE_VARIABLES) || !defined(FILE8C_H_DEFINITIONS)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Global variable declarations / definitions */&lt;/span&gt;\nEXTERN &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; oddball another &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; })&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* !DEFINE_VARIABLES || !FILE8C_H_DEFINITIONS */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard epilogue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE8C_H_DEFINITIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE8C_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file8c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file8c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog8&lt;/code&gt; and &lt;code&gt;prog9&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog8.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_them();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_them();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oddball:   %d\\n&quot;&lt;/span&gt;, oddball_value());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file9c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n    oddball_struct.a += global_variable;\n    oddball_struct.b -= global_variable / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog8&lt;/code&gt; uses &lt;code&gt;prog8.c&lt;/code&gt;, &lt;code&gt;file7c.c&lt;/code&gt;, &lt;code&gt;file9c.c&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog9&lt;/code&gt; uses &lt;code&gt;prog8.c&lt;/code&gt;, &lt;code&gt;file8c.c&lt;/code&gt;, &lt;code&gt;file9c.c&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;However, the problems are relatively unlikely to occur in practice,\nespecially if you take the standard advice to&lt;/p&gt;\n&lt;h1&gt;Avoid global variables&lt;/h1&gt;\n&lt;hr&gt;\n&lt;p&gt;Does this exposition miss anything?&lt;/p&gt;\n&lt;sup&gt;\n_Confession_: The &apos;avoiding duplicated code&apos; scheme outlined here was\ndeveloped because the issue affects some code I work on (but don&apos;t own),\nand is a niggling concern with the scheme outlined in the first part of\nthe answer.  However, the original scheme leaves you with just two\nplaces to modify to keep variable definitions and declarations\nsynchronized, which is a big step forward over having exernal variable\ndeclarations scattered throughout the code base (which really matters\nwhen there are thousands of files in total).  However, the code in the\nfiles with the names `fileNc.[ch]` (plus `external.h` and `externdef.h`)\nshows that it can be made to work.  Clearly, it would not be hard to\ncreate a header generator script to give you the standardized template\nfor a variable defining and declaring header file.\n&lt;/sup&gt;\n&lt;p&gt;&lt;em&gt;NB&lt;/em&gt; These are toy programs with just barely enough code to make them\nmarginally interesting.  There is repetition within the examples that\ncould be removed, but isn&apos;t to simplify the pedagogical explanation.\n(For example: the difference between &lt;code&gt;prog5.c&lt;/code&gt; and &lt;code&gt;prog8.c&lt;/code&gt; is the name\nof one of the headers that are included.  It would be possible to\nreorganize the code so that the &lt;code&gt;main()&lt;/code&gt; function was not repeated, but\nit would conceal more than it revealed.)&lt;/p&gt;\n    ","\n&lt;p&gt;An &lt;code&gt;extern&lt;/code&gt; variable is a declaration (thanks to sbi for the correction) of a variable which is defined in another translation unit. That means the storage for the variable is allocated in another file.&lt;/p&gt;\n\n&lt;p&gt;Say you have two &lt;code&gt;.c&lt;/code&gt;-files &lt;code&gt;test1.c&lt;/code&gt; and &lt;code&gt;test2.c&lt;/code&gt;. If you define a global variable &lt;code&gt;int test1_var;&lt;/code&gt; in &lt;code&gt;test1.c&lt;/code&gt; and you&apos;d like to access this variable in &lt;code&gt;test2.c&lt;/code&gt; you have to use &lt;code&gt;extern int test1_var;&lt;/code&gt; in &lt;code&gt;test2.c&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Complete sample:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ cat test1.c \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; test1_var = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n$ cat test2.c\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; test1_var;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test1_var = %d\\n&quot;&lt;/span&gt;, test1_var);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n$ gcc test1.c test2.c -o test\n$ ./test\ntest1_var = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Extern is the keyword you use to declare that the variable itself resides in another translation unit.&lt;/p&gt;\n\n&lt;p&gt;So you can decide to use a variable in a translation unit and then access it from another one, then in the second one you declare it as extern and the symbol will be resolved by the linker.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t declare it as extern you&apos;ll get 2 variables named the same but not related at all, and an error of multiple definitions of the variable.&lt;/p&gt;\n    ","\n&lt;p&gt;I like to think of an extern variable as a promise that you make to the compiler.&lt;/p&gt;\n\n&lt;p&gt;When encountering an extern, the compiler can only find out its type, not where it &quot;lives&quot;, so it can&apos;t resolve the reference.&lt;/p&gt;\n\n&lt;p&gt;You are telling it, &quot;Trust me.  At link time this reference will be resolvable.&quot;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;                 declare | define   | initialize |\n                ----------------------------------\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;    yes          no           no\n-------------\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;;    yes          yes          yes\n-------------\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;           yes          yes          no\n-------------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Declaration won&apos;t allocate memory (the variable must be defined for memory allocation) but the definition will. \nThis is just another simple view on the extern keyword since the other answers are really great.&lt;/p&gt;\n    ","\n&lt;p&gt;extern tells the compiler to trust you that the memory for this variable is declared elsewhere, so it doesnt try to allocate/check memory.  &lt;/p&gt;\n\n&lt;p&gt;Therefore, you can compile a file that has reference to an extern, but you can not link if that memory is not declared somewhere.&lt;/p&gt;\n\n&lt;p&gt;Useful for global variables and libraries, but dangerous because the linker does not type check.&lt;/p&gt;\n    ","\n&lt;p&gt;Adding an &lt;code&gt;extern&lt;/code&gt; turns a variable &lt;em&gt;definition&lt;/em&gt; into a variable &lt;em&gt;declaration&lt;/em&gt;. See &lt;a href=&quot;https://stackoverflow.com/questions/1410563/&quot;&gt;this thread&lt;/a&gt; as to what&apos;s the difference between a declaration and a definition. &lt;/p&gt;\n    ","\n&lt;p&gt;The correct interpretation of extern is that you tell something to the compiler. You tell the compiler that, despite not being present right now, the variable declared will somehow be found by the linker (typically in another object (file)). The linker will then be the lucky guy to find everything and put it together, whether you had some extern declarations or not.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;extern keyword is used with the variable for its identification as a global variable.&lt;/strong&gt;&lt;/em&gt;  &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It also represents that you can use the variable declared using extern\n  keyword in any file though it is declared/defined in other file.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In C a variable inside a file say example.c is given local scope. The compiler expects that the variable would have its definition inside the same file example.c and when it does not find the same , it would throw an error.A function on the other hand has by default global scope . Thus you do not have to explicitly mention to the compiler &quot;look dude...you might find the definition of this function here&quot;. For a function including the file which contains its declaration is enough.(The file which you actually call a header file). \n   For example consider the following 2 files :&lt;br&gt;\n example.c &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\nmain(){\n       &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The value of a is &amp;lt;%d&amp;gt;\\n&quot;&lt;/span&gt;,a);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;example1.c&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now when you compile the two files together, using the following commands :&lt;/p&gt;\n\n&lt;p&gt;step 1)cc -o ex example.c example1.c\nstep 2)./ex &lt;/p&gt;\n\n&lt;p&gt;You get the following output : The value of a is &amp;lt;5&amp;gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;GCC ELF Linux implementation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Other answers have covered the language usage side of view, so now let&apos;s have a look at how it is implemented in this implementation. &lt;/p&gt;\n\n&lt;p&gt;main.c&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; not_extern_int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; extern_int;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, not_extern_int);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, extern_int);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compile and decompile:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;gcc -c main.c\nreadelf -s main.o\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output contains:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Num:    Value          Size Type    Bind   Vis      Ndx Name\n &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; OBJECT  GLOBAL DEFAULT    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; not_extern_int\n&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; NOTYPE  GLOBAL DEFAULT  UND extern_int\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://www.sco.com/developers/gabi/2003-12-17/contents.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;System V ABI Update ELF spec&lt;/a&gt; &quot;Symbol Table&quot; chapter explains:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;SHN_UNDEF This section table index means the symbol is undefined. When the link editor combines this object file with another that defines the indicated symbol, this file&apos;s references to the symbol will be linked to the actual definition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;which is basically the behavior the C standard gives to &lt;code&gt;extern&lt;/code&gt; variables.&lt;/p&gt;\n\n&lt;p&gt;From now on, it is the job of the linker to make the final program, but the &lt;code&gt;extern&lt;/code&gt; information has already been extracted from the source code into the object file.&lt;/p&gt;\n\n&lt;p&gt;Tested on GCC 4.8.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;C++17 inline variables&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In C++17, you might want to use inline variables instead of extern ones, as they are simple to use (can be defined just once on header) and more powerful (support constexpr). See: &lt;a href=&quot;https://stackoverflow.com/questions/177437/what-does-const-static-mean-in-c-and-c/53883715#53883715&quot;&gt;What does &apos;const static&apos; mean in C and C++?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt;\nallows one module of your program to access a global variable or function declared in another module of your program.\nYou usually have extern variables declared in header files.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t want a program to access your variables or functions, you use &lt;code&gt;static&lt;/code&gt; which tells the compiler that this variable or function cannot be used outside of this module.&lt;/p&gt;\n    ","\n&lt;p&gt;First off, the &lt;code&gt;extern&lt;/code&gt; keyword is not used for defining a variable; rather it is used for declaring a variable. I can say &lt;code&gt;extern&lt;/code&gt; is a storage class, not a data type.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; is used to let other C files or external components know this variable is already defined somewhere. Example: if  you are building a library, no need to define global variable mandatorily somewhere in library itself. The library will be compiled directly, but while linking the file, it checks for the definition.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; simply means a variable is defined elsewhere (e.g., in another file).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; is used so one &lt;code&gt;first.c&lt;/code&gt; file can have full access to a global parameter in another &lt;code&gt;second.c&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;extern&lt;/code&gt; can be declared in the &lt;code&gt;first.c&lt;/code&gt; file or in any of the header files &lt;code&gt;first.c&lt;/code&gt; includes.&lt;/p&gt;\n    ","\n&lt;p&gt;With xc8 you have to be careful about declaring a variable\nas the same type in each file as you could , erroneously,\ndeclare something an &lt;code&gt;int&lt;/code&gt; in one file and a &lt;code&gt;char&lt;/code&gt; say in another.\nThis could lead to corruption of variables.&lt;/p&gt;\n\n&lt;p&gt;This problem was elegantly solved in a microchip forum some 15 years ago\n    /* See &quot;http:www.htsoft.com&quot;                                          &lt;em&gt;/\n    /&lt;/em&gt;  &quot;forum/all/showflat.php/Cat/0/Number/18766/an/0/page/0#18766&quot; &lt;/p&gt;\n\n&lt;p&gt;But this link seems to no longer work...&lt;/p&gt;\n\n&lt;p&gt;So I;ll quickly try to explain it;\nmake a file called global.h.&lt;/p&gt;\n\n&lt;p&gt;In it declare the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; MAIN_C&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;/* #warning COMPILING MAIN.C */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\nGLOBAL &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; testing_mode; &lt;span class=&quot;hljs-comment&quot;&gt;// example var used in several C files&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in the file main.c&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MAIN_C 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;global.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; MAIN_C&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means in main.c the variable will be declared as an &lt;code&gt;unsigned char&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now in other files simply including global.h will\nhave it declared as an extern &lt;em&gt;for that file&lt;/em&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; testing_mode;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But it will be correctly declared as an &lt;code&gt;unsigned char&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The old forum post probably explained this a bit more clearly.\nBut this is a real potential &lt;code&gt;gotcha&lt;/code&gt; when using a compiler\nthat allows you to declare a variable in one file and then declare it extern as a different type in another. The problems associated with\nthat are if you say declared testing_mode as an int in another file\nit would think it was a 16 bit var and overwrite some other part of ram, potentially corrupting another variable. Difficult to debug!&lt;/p&gt;\n    ","\n&lt;p&gt;A very short solution I use to allow a header file to contain the extern reference or actual implementation of an object. The file that actually contains the object just does &lt;code&gt;#define GLOBAL_FOO_IMPLEMENTATION&lt;/code&gt;. Then when I add a new object to this file it shows up in that file also without me having to copy and paste the definition.&lt;/p&gt;\n\n&lt;p&gt;I use this pattern across multiple files. So in order to keep things as self contained as possible, I just reuse the single GLOBAL macro in each header. My header looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//file foo_globals.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; once  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;//contains definition of foo&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; GLOBAL  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; GLOBAL  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; GLOBAL_FOO_IMPLEMENTATION  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL extern  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;  &lt;/span&gt;\n\nGLOBAL Foo foo1;  \nGLOBAL Foo foo2;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//file main.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL_FOO_IMPLEMENTATION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo_globals.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//file uses_extern_foo.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo_globals.h\n&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In short &lt;code&gt;extern&lt;/code&gt; means that variable is defined in other module and its address will be known at link time. The compiler does not reserve memory in current module and knows the variable type. To understand &lt;code&gt;extern&lt;/code&gt; is good to have at least little experience with assembler.&lt;/p&gt;\n    "]},"randomTags":[{"name":"super","slug":"super"},{"name":"access-modifiers","slug":"access-modifiers"},{"name":"dom-traversal","slug":"dom-traversal"},{"name":"row-height","slug":"row-height"},{"name":"long-integer","slug":"long-integer"},{"name":"frame","slug":"frame"},{"name":"lambda","slug":"lambda"},{"name":"ofstream","slug":"ofstream"},{"name":"server-side","slug":"server-side"},{"name":"database-design","slug":"database-design"},{"name":"prototype","slug":"prototype"},{"name":"mariadb","slug":"mariadb"},{"name":".net","slug":".net"},{"name":"uuid","slug":"uuid"},{"name":"form-submit","slug":"form-submit"},{"name":"iec10967","slug":"iec10967"},{"name":"group-by","slug":"group-by"},{"name":"bluebird","slug":"bluebird"},{"name":"pygame-surface","slug":"pygame-surface"},{"name":"android-edittext","slug":"android-edittext"}]},"__N_SSG":true}