{"pageProps":{"data":{"count":1,"rows":[{"id":469,"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268","postType":"QUESTION","createdAt":"2022-07-09T17:34:49.000Z","updatedAt":"2022-07-09T17:34:49.000Z","tags":[{"id":2386,"name":"uniqueidentifier","slug":"uniqueidentifier","createdAt":"2022-07-09T17:34:49.000Z","updatedAt":"2022-07-09T17:34:49.000Z","Questions_Tags":{"questionId":469,"tagId":2386}}]}]},"slug":"uniqueidentifier","page":1,"answers":{"469":["\n&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Settings.Secure#ANDROID_ID&lt;/code&gt;&lt;/a&gt; returns the Android ID as an &lt;em&gt;&lt;a href=&quot;https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID&quot; rel=&quot;noreferrer&quot;&gt;unique for each user&lt;/a&gt;&lt;/em&gt; 64-bit hex string.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.provider.Settings.Secure;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;android_id&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Secure.getString(getContext().getContentResolver(),\n                                                        Secure.ANDROID_ID);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also read &lt;strong&gt;Best practices for unique identifiers&lt;/strong&gt;: &lt;a href=&quot;https://developer.android.com/training/articles/user-data-ids&quot; rel=&quot;noreferrer&quot;&gt;https://developer.android.com/training/articles/user-data-ids&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: As of recent versions of Android, many of the issues with &lt;code&gt;ANDROID_ID&lt;/code&gt; have been resolved, and I believe this approach is no longer necessary. Please take a look at &lt;a href=&quot;https://stackoverflow.com/a/2785493/231078&quot;&gt;Anthony&apos;s answer&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Full disclosure: my app used the below approach originally but no longer uses this approach, and we now use the approach outlined in the &lt;a href=&quot;http://android-developers.blogspot.com/2011/03/identifying-app-installations.html&quot; rel=&quot;noreferrer&quot;&gt;Android Developer Blog&lt;/a&gt; entry that &lt;a href=&quot;https://stackoverflow.com/a/5626208/231078&quot;&gt;emmby&apos;s answer&lt;/a&gt; links to (namely, generating and saving a &lt;a href=&quot;http://developer.android.com/reference/java/util/UUID.html#randomUUID()&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;UUID#randomUUID()&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;There are many answers to this question, most of which will only work &quot;some&quot; of the time, and unfortunately, that&apos;s not good enough.&lt;/p&gt;\n&lt;p&gt;Based on my tests of devices (all phones, at least one of which is not activated):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;All devices tested returned a value for &lt;code&gt;TelephonyManager.getDeviceId()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;All GSM devices (all tested with a SIM) returned a value for &lt;code&gt;TelephonyManager.getSimSerialNumber()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;All CDMA devices returned null for &lt;code&gt;getSimSerialNumber()&lt;/code&gt; (as expected)&lt;/li&gt;\n&lt;li&gt;All devices with a Google account added returned a value for &lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;All CDMA devices returned the same value (or derivation of the same value) for both &lt;code&gt;ANDROID_ID&lt;/code&gt; and &lt;code&gt;TelephonyManager.getDeviceId()&lt;/code&gt; -- &lt;em&gt;as long as&lt;/em&gt; a Google account has been added during setup.&lt;/li&gt;\n&lt;li&gt;I did not yet have a chance to test GSM devices with no SIM, a GSM device with no Google account added, or any of the devices in airplane mode.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So if you want something unique to the device itself, &lt;code&gt;TM.getDeviceId()&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; be sufficient.  Obviously, some users are more paranoid than others, so it might be useful to hash 1 or more of these identifiers, so that the string is still virtually unique to the device, but does not explicitly identify the user&apos;s actual device.  For example, using &lt;code&gt;String.hashCode()&lt;/code&gt;, combined with a UUID:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TelephonyManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String tmDevice, tmSerial, androidId;\ntmDevice = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + tm.getDeviceId();\ntmSerial = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + tm.getSimSerialNumber();\nandroidId = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);\n\n&lt;span class=&quot;hljs-type&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceUuid&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UUID&lt;/span&gt;(androidId.hashCode(), ((&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)tmDevice.hashCode() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) | tmSerial.hashCode());\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; deviceUuid.toString();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;might result in something like: &lt;code&gt;00000000-54b3-e7c7-0000-000046bffd97&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;It works well enough for me.&lt;/p&gt;\n&lt;p&gt;As Richard mentions below, don&apos;t forget that you need permission to read the &lt;code&gt;TelephonyManager&lt;/code&gt; properties, so add this to your manifest:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.READ_PHONE_STATE&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;import libraries&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.Context;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.telephony.TelephonyManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.view.View;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;#Last Updated: 6/2/15&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;After reading every Stack Overflow post about creating a unique ID, the Google developer blog, and Android documentation, I feel as if the &apos;Pseudo ID&apos; is the best possible option.&lt;/p&gt;\n&lt;h1&gt;Main Issue: Hardware vs Software&lt;/h1&gt;\n&lt;h3&gt;Hardware&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;Users can change their hardware, Android tablet, or phone, so unique IDs based on hardware are not good ideas for &lt;strong&gt;TRACKING USERS&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;For &lt;strong&gt;TRACKING HARDWARE&lt;/strong&gt;, this is a great idea&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Software&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;Users can wipe/change their ROM if they are rooted&lt;/li&gt;\n&lt;li&gt;You can track users across platforms (iOS, Android, Windows, and Web)&lt;/li&gt;\n&lt;li&gt;The best want to &lt;strong&gt;TRACK AN INDIVIDUAL USER&lt;/strong&gt; with their &lt;strong&gt;consent&lt;/strong&gt; is to simply have them login (make this seamless using OAuth)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;#Overall breakdown with Android&lt;/p&gt;\n&lt;p&gt;###- Guarantee uniqueness (include rooted devices) for API &amp;gt;= 9/10 (99.5% of Android devices)\n###- No extra permissions&lt;/p&gt;\n&lt;p&gt;Psuedo code:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; API &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;: (&lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt;% of devices)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; unique ID containing serial id (rooted devices may be different)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; the unique ID of build information (may overlap &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; - API &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Thanks to @stansult for posting &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/9186943/950427&quot;&gt;all of our options&lt;/a&gt;&lt;/em&gt; (in this Stack Overflow question).&lt;/p&gt;\n&lt;p&gt;##List of options - reasons why/ why not to use them:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Email - Software&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;User could change email - HIGHLY unlikely&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;API 5+ &lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.GET_ACCOUNTS&quot; /&amp;gt;&lt;/code&gt; or&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;API 14+ &lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.READ_PROFILE&quot; /&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&amp;gt;&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/questions/2112965/how-to-get-the-android-devices-primary-e-mail-address&quot;&gt;How to get the Android device&apos;s primary e-mail address&lt;/a&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Phone Number - Software&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Users could change phone numbers - HIGHLY unlikely&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;IMEI - Hardware&lt;/strong&gt; (only phones, needs &lt;strong&gt;&lt;code&gt;android.permission.READ_PHONE_STATE&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Most users hate the fact that it says &quot;Phone Calls&quot; in the permission. Some users give bad ratings because they believe you are simply stealing their personal information when all you really want to do is track device installs. It is obvious that you are collecting data.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Android ID - Hardware&lt;/strong&gt; (can be null, can change upon factory reset, can be altered on a rooted device)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Since it can be &apos;null&apos;, we can check for &apos;null&apos; and change its value, but this means it will no longer be unique.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you have a user with a factory reset device, the value may have changed or altered on the rooted device so there may be duplicates entries if you are tracking user installs.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;WLAN MAC Address - Hardware&lt;/strong&gt; (needs &lt;strong&gt;&lt;code&gt;android.permission.ACCESS_WIFI_STATE&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;This could be the second-best option, but you are still collecting and storing a unique identifier that comes directly from a user. This is obvious that you are collecting data.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE &quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bluetooth MAC Address - Hardware&lt;/strong&gt; (devices with Bluetooth, needs &lt;strong&gt;&lt;code&gt;android.permission.BLUETOOTH&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Most applications on the market do not use Bluetooth, and so if your application doesn&apos;t use Bluetooth and you are including this, the user could become suspicious.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.BLUETOOTH &quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pseudo-Unique ID - Software&lt;/strong&gt; (for all Android devices)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Very possible, may contain collisions - See my method posted below!&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;This allows you to have an &apos;almost unique&apos; ID from the user without taking anything that is private. You can create your own anonymous ID from device information.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;I know there isn&apos;t any &apos;perfect&apos; way of getting a unique ID without using permissions; however, sometimes we only really need to track the device installation. When it comes to creating a unique ID, we can create a &apos;pseudo unique id&apos; based solely on information that the Android API gives us without using extra permissions. This way, we can show the user respect and try to offer a good user experience as well.&lt;/p&gt;\n&lt;p&gt;With a pseudo-unique id, you really only run into the fact that there may be duplicates based on the fact that there are similar devices. You can tweak the combined method to make it more unique; however, some developers need to track device installs and this will do the trick or performance based on similar devices.&lt;/p&gt;\n&lt;p&gt;##API &amp;gt;= 9:&lt;/p&gt;\n&lt;p&gt;If their Android device is API 9 or over, this is guaranteed to be unique because of the &apos;Build.SERIAL&apos; field.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt;, you are technically only missing out on around 0.5% of users &lt;a href=&quot;http://developer.android.com/about/dashboards/index.html&quot; rel=&quot;noreferrer&quot;&gt;who have API &amp;lt; 9&lt;/a&gt;. So you can focus on the rest: This is 99.5% of the users!&lt;/p&gt;\n&lt;p&gt;##API &amp;lt; 9:&lt;/p&gt;\n&lt;p&gt;If the user&apos;s Android device is lower than API 9; hopefully, they have not done a factory reset and their &apos;Secure.ANDROID_ID&apos; will be preserved or not &apos;null&apos;. (see &lt;a href=&quot;http://developer.android.com/about/dashboards/index.html&quot; rel=&quot;noreferrer&quot;&gt;http://developer.android.com/about/dashboards/index.html&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;##If all else fails:&lt;/p&gt;\n&lt;p&gt;If all else fails, if the user does have lower than API 9 (lower than Gingerbread), has reset their device, or &apos;Secure.ANDROID_ID&apos; returns &apos;null&apos;, then simply the ID returned will be solely based on their Android device information. This is where the collisions can happen.&lt;/p&gt;\n&lt;p&gt;Changes:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Removed &apos;Android.SECURE_ID&apos; because factory resets could cause the value to change&lt;/li&gt;\n&lt;li&gt;Edited the code to change on API&lt;/li&gt;\n&lt;li&gt;Changed the Pseudo&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Please take a look at the method below:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Return pseudo unique ID\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ID&lt;/span&gt;\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUniquePsuedoID&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If all else fails, if the user does have lower than API 9 (lower&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// than Gingerbread), has reset their device or &apos;Secure.ANDROID_ID&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;null&apos;, then simply the ID returned will be solely based&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// off their Android device information. This is where the collisions&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// can happen.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Thanks http://www.pocketmagic.net/?p=1662!&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Try not to use DISPLAY, HOST or ID - these items could change.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If there are collisions, there will be overlapping data&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; m_szDevIDShort = &lt;span class=&quot;hljs-string&quot;&gt;&quot;35&quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;BOARD&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;BRAND&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;CPU_ABI&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;DEVICE&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MANUFACTURER&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MODEL&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + (&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;PRODUCT&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Thanks to @Roman SL!&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// https://stackoverflow.com/a/4789483/950427&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Only devices with API &amp;gt;= 9 have android.os.Build.SERIAL&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// http://developer.android.com/reference/android/os/Build.html#SERIAL&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If a user upgrades software or roots their device, there will be a duplicate entry&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; serial = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        serial = android.&lt;span class=&quot;hljs-property&quot;&gt;os&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getField&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SERIAL&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Go ahead and return the serial for api =&amp;gt; 9&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UUID&lt;/span&gt;(m_szDevIDShort.&lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;(), serial.&lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt; exception) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// String needs to be initialized&lt;/span&gt;\n        serial = &lt;span class=&quot;hljs-string&quot;&gt;&quot;serial&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// some value&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Thanks @Joe!&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// https://stackoverflow.com/a/2853253/950427&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Finally, combine the values we have found by using the UUID class to create a unique identifier&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UUID&lt;/span&gt;(m_szDevIDShort.&lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;(), serial.&lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;#New (for apps with ads AND Google Play Services):&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;From the Google Play Developer&apos;s console:&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Beginning August 1st, 2014, the Google Play Developer Program Policy\nrequires all-new app uploads and updates to use the advertising ID in\nlieu of any other persistent identifiers for any advertising purposes.\nLearn more&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;Permission:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Code:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.google.android.gms.ads.identifier.AdvertisingIdClient;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.google.android.gms.ads.identifier.AdvertisingIdClient.Info;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.google.android.gms.common.GooglePlayServicesAvailabilityException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.google.android.gms.common.GooglePlayServicesNotAvailableException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;\n...\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Do not call this function from the main thread. Otherwise, &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// an IllegalStateException will be thrown.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getIdThread&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-type&quot;&gt;Info&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;adInfo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    adInfo = AdvertisingIdClient.getAdvertisingIdInfo(mContext);\n\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException exception) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Unrecoverable error connecting to Google Play services (e.g.,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the old version of the service doesn&apos;t support getting AdvertisingId).&lt;/span&gt;\n \n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (GooglePlayServicesAvailabilityException exception) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Encountered a recoverable error connecting to Google Play services. &lt;/span&gt;\n\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (GooglePlayServicesNotAvailableException exception) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Google Play services is not available entirely.&lt;/span&gt;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; adInfo.getId();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;isLAT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; adInfo.isLimitAdTrackingEnabled();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Source/Docs:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://developer.android.com/google/play-services/id.html&quot; rel=&quot;noreferrer&quot;&gt;http://developer.android.com/google/play-services/id.html&lt;/a&gt;\n&lt;a href=&quot;http://developer.android.com/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.html&quot; rel=&quot;noreferrer&quot;&gt;http://developer.android.com/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;##Important:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It is intended that the advertising ID completely replace existing\nusage of other identifiers for ads purposes (such as the use of ANDROID_ID\nin Settings.Secure) when Google Play Services is available. Cases\nwhere Google Play Services is unavailable are indicated by a\nGooglePlayServicesNotAvailableException being thrown by\ngetAdvertisingIdInfo().&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;##Warning, users can reset:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://en.kioskea.net/faq/34732-android-reset-your-advertising-id&quot; rel=&quot;noreferrer&quot;&gt;http://en.kioskea.net/faq/34732-android-reset-your-advertising-id&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I have tried to reference every link that I took information from. If you are missing and need to be included, please comment!&lt;/p&gt;\n&lt;h2&gt;Google Player Services InstanceID&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://developers.google.com/instance-id/&quot; rel=&quot;noreferrer&quot;&gt;https://developers.google.com/instance-id/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As Dave Webb mentions, the &lt;a href=&quot;https://android-developers.blogspot.com/2011/03/identifying-app-installations.html&quot; rel=&quot;noreferrer&quot;&gt;Android Developer Blog has an article&lt;/a&gt; that covers this.  Their preferred solution is to track app installs rather than devices, and that will work well for most use cases.  The blog post will show you the necessary code to make that work, and I recommend you check it out.&lt;/p&gt;\n\n&lt;p&gt;However, the blog post goes on to discuss solutions if you need a device identifier rather than an app installation identifier.  I spoke with someone at Google to get some additional clarification on a few items in the event that you need to do so.  Here&apos;s what I discovered about device identifiers that&apos;s NOT mentioned in the aforementioned blog post:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;ANDROID_ID is the preferred device identifier.  ANDROID_ID is perfectly reliable on versions of Android &amp;lt;=2.1 or &amp;gt;=2.3.  Only 2.2 has the problems mentioned in the post.&lt;/li&gt;\n&lt;li&gt;Several devices by several manufacturers are affected by the ANDROID_ID bug in 2.2.&lt;/li&gt;\n&lt;li&gt;As far as I&apos;ve been able to determine, all affected devices have &lt;a href=&quot;https://issuetracker.google.com/issues/36920653&quot; rel=&quot;noreferrer&quot;&gt;the same ANDROID_ID&lt;/a&gt;, which is &lt;a href=&quot;https://www.google.com/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=9774d56d682e549c&quot; rel=&quot;noreferrer&quot;&gt;9774d56d682e549c&lt;/a&gt;.  Which is also the same device id reported by the emulator, btw.&lt;/li&gt;\n&lt;li&gt;Google believes that OEMs have patched the issue for many or most of their devices, but I was able to verify that as of the beginning of April 2011, at least, it&apos;s still quite easy to find devices that have the broken ANDROID_ID.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Based on Google&apos;s recommendations, I implemented a class that will generate a unique UUID for each device, using ANDROID_ID as the seed where appropriate, falling back on TelephonyManager.getDeviceId() as necessary, and if that fails, resorting to a randomly generated unique UUID that is persisted across app restarts (but not app re-installations).&lt;/p&gt;\n\n&lt;p&gt;Note that for devices that have to fallback on the device ID, the unique ID &lt;strong&gt;WILL&lt;/strong&gt; persist across factory resets.  This is something to be aware of.  If you need to ensure that a factory reset will reset your unique ID, you may want to consider falling back directly to the random UUID instead of the device ID.&lt;/p&gt;\n\n&lt;p&gt;Again, this code is for a device ID, not an app installation ID.  For most situations, an app installation ID is probably what you&apos;re looking for.  But if you do need a device ID, then the following code will probably work for you.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.Context;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.SharedPreferences;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.provider.Settings.Secure;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.telephony.TelephonyManager;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.UUID;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceUuidFactory&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;PREFS_FILE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;device_id.xml&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;PREFS_DEVICE_ID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;device_id&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; UUID uuid;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DeviceUuidFactory&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uuid == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (DeviceUuidFactory.class) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uuid == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;prefs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; context\n                            .getSharedPreferences(PREFS_FILE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; prefs.getString(PREFS_DEVICE_ID, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Use the ids previously computed and stored in the&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// prefs file&lt;/span&gt;\n                        uuid = UUID.fromString(id);\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;androidId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Secure.getString(\n                            context.getContentResolver(), Secure.ANDROID_ID);\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Use the Android ID unless it&apos;s broken, in which case&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// fallback on deviceId,&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// unless it&apos;s not available, then fallback on a random&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// number which we store to a prefs file&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-string&quot;&gt;&quot;9774d56d682e549c&quot;&lt;/span&gt;.equals(androidId)) {\n                                uuid = UUID.nameUUIDFromBytes(androidId\n                                        .getBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;));\n                            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n                                    (TelephonyManager) context\n                                    .getSystemService(Context.TELEPHONY_SERVICE))\n                                    .getDeviceId();\n                                uuid = deviceId != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ? UUID\n                                    .nameUUIDFromBytes(deviceId\n                                            .getBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;)) : UUID\n                                    .randomUUID();\n                            }\n                        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(e);\n                        }\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Write the value out to the prefs file&lt;/span&gt;\n                        prefs.edit()\n                                .putString(PREFS_DEVICE_ID, uuid.toString())\n                                .commit();\n                    }\n                }\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Returns a unique UUID for the current android device. As with all UUIDs,\n     * this unique ID is &quot;very highly likely&quot; to be unique across all Android\n     * devices. Much more so than ANDROID_ID is.\n     * \n     * The UUID is generated by using ANDROID_ID as the base key if appropriate,\n     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to\n     * be incorrect, and finally falling back on a random UUID that&apos;s persisted\n     * to SharedPreferences if getDeviceID() does not return a usable value.\n     * \n     * In some rare circumstances, this ID may change. In particular, if the\n     * device is factory reset a new device ID may be generated. In addition, if\n     * a user upgrades their phone from certain buggy implementations of Android\n     * 2.2 to a newer, non-buggy version of Android, the device ID may change.\n     * Or, if a user uninstalls your app on a device that has neither a proper\n     * Android ID nor a Device ID, this ID may change on reinstallation.\n     * \n     * Note that if the code falls back on using TelephonyManager.getDeviceId(),\n     * the resulting ID will NOT change after a factory reset. Something to be\n     * aware of.\n     * \n     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID\n     * directly.\n     * \n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; http://code.google.com/p/android/issues/detail?id=10603\n     * \n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; a UUID that may be used to uniquely identify your device for most\n     *         purposes.\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UUID &lt;span class=&quot;hljs-title function_&quot;&gt;getDeviceUuid&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uuid;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is the code that Reto Meier used in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_I/O&quot;&gt;Google I/O&lt;/a&gt; presentation this year to get a unique id for the user:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;uniqueID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;PREF_UNIQUE_ID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;PREF_UNIQUE_ID&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueID == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sharedPrefs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; context.getSharedPreferences(\n                PREF_UNIQUE_ID, Context.MODE_PRIVATE);\n        uniqueID = sharedPrefs.getString(PREF_UNIQUE_ID, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueID == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            uniqueID = UUID.randomUUID().toString();\n            &lt;span class=&quot;hljs-type&quot;&gt;Editor&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sharedPrefs.edit();\n            editor.putString(PREF_UNIQUE_ID, uniqueID);\n            editor.commit();\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uniqueID;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you couple this with a backup strategy to send preferences to the cloud (also described in Reto&apos;s &lt;a href=&quot;http://www.google.com/events/io/2011/sessions/android-protips-advanced-topics-for-expert-android-app-developers.html&quot;&gt;talk&lt;/a&gt;, you should have an id that ties to a user and sticks around after the device has been wiped, or even replaced. I plan to use this in analytics going forward (in other words, I have not done that bit yet :).&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a simple question, with no simple answer.&lt;/p&gt;\n&lt;p&gt;Moreover, all of the existing answers here are either out of date or unreliable.&lt;/p&gt;\n&lt;p&gt;So &lt;strong&gt;if you&apos;re searching for a solution after 2020&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Here are a few things to keep in mind:&lt;/p&gt;\n&lt;p&gt;All the hardware-based identifiers (IMEI, MAC, Serial Number, etc.) are unreliable for non-google devices (except Pixels and Nexuses), which are statistically &lt;a href=&quot;https://www.appbrain.com/stats/top-manufacturers&quot; rel=&quot;noreferrer&quot;&gt;most of the android active devices worldwide&lt;/a&gt;. Therefore official &lt;a href=&quot;https://developer.android.com/training/articles/user-data-ids&quot; rel=&quot;noreferrer&quot;&gt;Android identifiers best practices&lt;/a&gt; clearly states:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Avoid using hardware identifiers&lt;/strong&gt;, such as IMEI, MAC address, etc...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Which makes most of the answers here invalid. Also due to different android security updates, some of them require newer and stricter runtime permissions, which can be simply denied by the user.&lt;/p&gt;\n&lt;p&gt;For example &lt;code&gt;CVE-2018-9489&lt;/code&gt; affects all the WIFI based techniques mentioned above.&lt;/p&gt;\n&lt;p&gt;That makes those identifiers not only unreliable but also inaccessible in many cases.&lt;/p&gt;\n&lt;p&gt;So in simpler words: &lt;strong&gt;don&apos;t use those techniques&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Many other answers here are suggesting to use the &lt;code&gt;AdvertisingIdClient&lt;/code&gt;, which is also incompatible, as it&apos;s by design only for ads profiling. It&apos;s also stated in the &lt;a href=&quot;https://developer.android.com/training/articles/user-data-ids&quot; rel=&quot;noreferrer&quot;&gt;official reference&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Only use an Advertising ID for user profiling or ads use cases&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;It&apos;s not only unreliable for device identification, but you also must follow the &lt;a href=&quot;https://play.google.com/about/monetization-ads/ads/#!?zippy_activeEl=ad-id#ad-id&quot; rel=&quot;noreferrer&quot;&gt;user privacy regarding ad tracking&lt;/a&gt; policy, which states clearly that users can reset or block it at any moment.&lt;/p&gt;\n&lt;p&gt;So &lt;strong&gt;don&apos;t use it either&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Since you cannot have the desired static globally unique and reliable device identifier. Android&apos;s official reference suggests:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Use a Firebase installation ID (FID) or a privately stored GUID&lt;/strong&gt; whenever possible for all other use cases, except for payment fraud prevention and telephony.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;It&apos;s unique for the application installation on the device, so when the user uninstalls the app - it&apos;s wiped out, so it&apos;s not 100% reliable, but it&apos;s the next best thing.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; As of today the &lt;code&gt;FirebaseInstanceId&lt;/code&gt; is deprecated, you should use &lt;code&gt;FirebaseInstallations&lt;/code&gt; instead.&lt;/p&gt;\n&lt;p&gt;To use &lt;code&gt;FirebaseInstallations&lt;/code&gt; add the &lt;a href=&quot;https://firebase.google.com/support/release-notes/android#latest_sdk_versions&quot; rel=&quot;noreferrer&quot;&gt;latest firebase-messaging dependency&lt;/a&gt; into your gradle&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.google.firebase:firebase-messaging:23.0.0&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And use the code below to get the firebase ID:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;FirebaseInstallations.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getId&lt;/span&gt;().&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;addOnCompleteListener&lt;/span&gt;(task &lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; {\n     &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;if&lt;/span&gt; (task.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;isSuccessful&lt;/span&gt;()) {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; firebaseIdentifier = task.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getResult&lt;/span&gt;();\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do what you need with firebaseIdentifier&lt;/span&gt;\n     }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need to store the device identification on your remote server, then don&apos;t store it as is (plain text), but a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot; rel=&quot;noreferrer&quot;&gt;hash with salt&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Today it&apos;s not only a best practice, you actually must do it by law according to &lt;a href=&quot;https://gdpr.eu/eu-gdpr-personal-data/&quot; rel=&quot;noreferrer&quot;&gt;GDPR - identifiers&lt;/a&gt; and similar regulations.&lt;/p&gt;\n    ","\n&lt;p&gt;Also you might consider the Wi-Fi adapter&apos;s MAC address. Retrieved like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;WifiManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;wm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (WifiManager)Ctxt.getSystemService(Context.WIFI_SERVICE);\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wm.getConnectionInfo().getMacAddress();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Requires permission &lt;code&gt;android.permission.ACCESS_WIFI_STATE&lt;/code&gt; in the manifest.&lt;/p&gt;\n\n&lt;p&gt;Reported to be available even when Wi-Fi is not connected. If Joe from the answer above gives this one a try on his many devices, that&apos;d be nice.&lt;/p&gt;\n\n&lt;p&gt;On some devices, it&apos;s not available when Wi-Fi is turned off.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; From Android 6.x, it returns consistent fake mac address: &lt;code&gt;02:00:00:00:00:00&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Theres rather useful info &lt;strong&gt;&lt;a href=&quot;http://www.pocketmagic.net/?p=1662&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;It covers five different ID types:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;IMEI&lt;/strong&gt; (only for Android devices with Phone use; needs &lt;code&gt;android.permission.READ_PHONE_STATE&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Pseudo-Unique ID&lt;/strong&gt; (for all Android devices)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Android ID&lt;/strong&gt; (can be null, can change upon factory reset, can be altered on rooted phone)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;WLAN MAC Address&lt;/strong&gt; string (needs &lt;code&gt;android.permission.ACCESS_WIFI_STATE&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;BT MAC Address&lt;/strong&gt; string (devices with Bluetooth, needs &lt;code&gt;android.permission.BLUETOOTH&lt;/code&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The official Android Developers Blog now has a full article just about this very subject, &lt;em&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2011/03/identifying-app-installations.html&quot;&gt;Identifying App Installations&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;At &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_I/O&quot;&gt;Google I/O&lt;/a&gt; Reto Meier released a robust answer to how to approach this which should meet most developers needs to track users across installations. Anthony Nolan shows the direction in his answer, but I thought I&apos;d write out the full approach so that others can easily see how to do it (it took me a while to figure out the details).&lt;/p&gt;\n\n&lt;p&gt;This approach will give you an anonymous, secure user ID which will be persistent for the user across different devices (based on the primary Google account) and across installs. The basic approach is to generate a random user ID and to store this in the apps&apos; shared preferences. You then use Google&apos;s backup agent to store the shared preferences linked to the Google account in the cloud.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s go through the full approach. First, we need to create a backup for our SharedPreferences using the Android Backup Service. Start by registering your app via &lt;code&gt;http://developer.android.com/google/backup/signup.html&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Google will give you a backup service key which you need to add to the manifest. You also need to tell the application to use the BackupAgent as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyApplication&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;android:backupAgent&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBackupAgent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    ...\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta-data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.google.android.backup.api_key&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;android:value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;your_backup_service_key&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you need to create the backup agent and tell it to use the helper agent for sharedpreferences:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyBackupAgent&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BackupAgentHelper&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The name of the SharedPreferences file&lt;/span&gt;\n    static &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;PREFS&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;user_preferences&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A key to uniquely identify the set of backup data&lt;/span&gt;\n    static &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;PREFS_BACKUP_KEY&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;prefs&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Allocate a helper and add it to the backup agent&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    public void onCreate() {\n        &lt;span class=&quot;hljs-type&quot;&gt;SharedPreferencesBackupHelper&lt;/span&gt; helper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SharedPreferencesBackupHelper&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;,          &lt;span class=&quot;hljs-type&quot;&gt;PREFS&lt;/span&gt;);\n        addHelper(&lt;span class=&quot;hljs-type&quot;&gt;PREFS_BACKUP_KEY&lt;/span&gt;, helper);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To complete the backup you need to create an instance of BackupManager in your main Activity:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;BackupManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;backupManager&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BackupManager&lt;/span&gt;(context);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally create a user ID, if it doesn&apos;t already exist, and store it in the SharedPreferences:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getUserID&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;uniqueID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;PREF_UNIQUE_ID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;PREF_UNIQUE_ID&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueID == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sharedPrefs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; context.getSharedPreferences(\n                MyBackupAgent.PREFS, Context.MODE_PRIVATE);\n        uniqueID = sharedPrefs.getString(PREF_UNIQUE_ID, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueID == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            uniqueID = UUID.randomUUID().toString();\n            &lt;span class=&quot;hljs-type&quot;&gt;Editor&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sharedPrefs.edit();\n            editor.putString(PREF_UNIQUE_ID, uniqueID);\n            editor.commit();\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//backup the changes&lt;/span&gt;\n            &lt;span class=&quot;hljs-type&quot;&gt;BackupManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mBackupManager&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BackupManager&lt;/span&gt;(context);\n            mBackupManager.dataChanged();\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uniqueID;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This User_ID will now be persistent across installations, even if the user moves device.&lt;/p&gt;\n\n&lt;p&gt;For more information on this approach see &lt;a href=&quot;http://www.google.com/events/io/2011/sessions/android-protips-advanced-topics-for-expert-android-app-developers.html&quot;&gt;Reto&apos;s talk&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;And for full details of how to implement the backup agent see &lt;em&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/data/backup.html&quot;&gt;Data Backup&lt;/a&gt;&lt;/em&gt;. I particularly recommend the section at the bottom on testing as the backup does not happen instantaneously and so to test you have to force the backup.&lt;/p&gt;\n    ","\n&lt;p&gt;I think this is sure fire way of building a skeleton for a unique ID...  check it out.&lt;/p&gt;\n\n&lt;p&gt;Pseudo-Unique ID, that works on all Android devices\nSome devices don&apos;t have a phone (eg. Tablets) or for some reason, you don&apos;t want to include the READ_PHONE_STATE permission. You can still read details like ROM Version, Manufacturer name, CPU type, and other hardware details, that will be well suited if you want to use the ID for a serial key check, or other general purposes. The ID computed in this way won&apos;t be unique: it is possible to find two devices with the same ID (based on the same hardware and ROM image) but the changes in real-world applications are negligible. For this purpose you can use the Build class:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;String m_szDevIDShort = &lt;span class=&quot;hljs-string&quot;&gt;&quot;35&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;we make this look like a valid IMEI\n            Build.BOARD.length()%10+ Build.BRAND.length()%10 +\n            Build.CPU_ABI.length()%10 + Build.DEVICE.length()%10 +\n            Build.DISPLAY.length()%10 + Build.HOST.length()%10 +\n            Build.ID.length()%10 + Build.MANUFACTURER.length()%10 +\n            Build.MODEL.length()%10 + Build.PRODUCT.length()%10 +\n            Build.TAGS.length()%10 + Build.TYPE.length()%10 +\n            Build.USER.length()%10 ; &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; digits\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Most of the Build members are strings, what we&apos;re doing here is to take their length and transform it via modulo in a digit. We have 13 such digits and we are adding two more in front (35) to have the same size ID as the IMEI (15 digits). There are other possibilities here are well, just have a look at these strings.\nReturns something like &lt;code&gt;355715565309247&lt;/code&gt;. No special permission is required, making this approach very convenient.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;(Extra info: The technique given above was copied from an article on &lt;a href=&quot;http://www.pocketmagic.net/?p=1662&quot; rel=&quot;noreferrer&quot;&gt;Pocket Magic&lt;/a&gt;.)&lt;/p&gt;\n    ","\n&lt;p&gt;The following code returns the device serial number using a hidden Android API. But, this code don&apos;t works on Samsung Galaxy Tab because &quot;ro.serialno&quot; isn&apos;t set on this device.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; serial = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    Class&amp;lt;?&amp;gt; c = Class.forName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.os.SystemProperties&quot;&lt;/span&gt;);\n    Method &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; = c.getMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\n    serial = (&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;.invoke(c, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ro.serialno&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ignored) {\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using the code below, you can get the unique device ID of an Android OS device as a string.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;deviceId&lt;/span&gt; = Secure.getString(getApplicationContext().getContentResolver(), Secure.ANDROID_ID)&lt;span class=&quot;hljs-comment&quot;&gt;; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A &lt;a href=&quot;http://developer.android.com/reference/android/os/Build.html#SERIAL&quot; rel=&quot;noreferrer&quot;&gt;Serial&lt;/a&gt; field was added to the &lt;code&gt;Build&lt;/code&gt; class in API level 9 (Android 2.3 - Gingerbread). Documentation says it represents the hardware serial number. Thus it should be unique, if it exists on the device. &lt;/p&gt;\n\n&lt;p&gt;I don&apos;t know whether it is actually supported (=not null) by all devices with API level &amp;gt;= 9 though.&lt;/p&gt;\n    ","\n&lt;p&gt;One thing I&apos;ll add - I have one of those unique situations.&lt;/p&gt;\n\n&lt;p&gt;Using:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;deviceId&lt;/span&gt; = Secure.getString(this.getContext().getContentResolver(), Secure.ANDROID_ID)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Turns out that even though my Viewsonic G Tablet reports a DeviceID that is not Null, every single G Tablet reports the same number.&lt;/p&gt;\n\n&lt;p&gt;Makes it interesting playing &quot;Pocket Empires&quot; which gives you instant access to someone&apos;s account based on the &quot;unique&quot; DeviceID.&lt;/p&gt;\n\n&lt;p&gt;My device does not have a cell radio.&lt;/p&gt;\n    ","\n&lt;p&gt;For detailed instructions on how to get a unique identifier for each Android device your application is installed from, see the official Android Developers Blog posting &lt;em&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2011/03/identifying-app-installations.html&quot; rel=&quot;noreferrer&quot;&gt;Identifying App Installations&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;It seems the best way is for you to generate one yourself upon installation and subsequently read it when the application is re-launched.&lt;/p&gt;\n\n&lt;p&gt;I personally find this acceptable but not ideal. No one identifier provided by Android works in all instances as most are dependent on the phone&apos;s radio states (Wi-Fi on/off, cellular on/off, Bluetooth on/off). The others, like &lt;code&gt;Settings.Secure.ANDROID_ID&lt;/code&gt; must be implemented by the manufacturer and are not guaranteed to be unique.&lt;/p&gt;\n\n&lt;p&gt;The following is an example of writing data to an &lt;em&gt;installation&lt;/em&gt; file that would be stored along with any other data the application saves locally.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Installation&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;INSTALLATION&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSTALLATION&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sID == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;installation&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(context.getFilesDir(), INSTALLATION);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!installation.exists())\n                    writeInstallationFile(installation);\n                sID = readInstallationFile(installation);\n            } \n            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(e);\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sID;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;readInstallationFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File installation)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n        &lt;span class=&quot;hljs-type&quot;&gt;RandomAccessFile&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomAccessFile&lt;/span&gt;(installation, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;byte&lt;/span&gt;[(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) f.length()];\n        f.readFully(bytes);\n        f.close();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(bytes);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;writeInstallationFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File installation)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n        &lt;span class=&quot;hljs-type&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileOutputStream&lt;/span&gt;(installation);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UUID.randomUUID().toString();\n        out.write(id.getBytes());\n        out.close();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Add Below code in class file:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TelephonyManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (TelephonyManager) getBaseContext()\n            .getSystemService(SplashActivity.TELEPHONY_SERVICE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String tmDevice, tmSerial, androidId;\n    tmDevice = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + tm.getDeviceId();\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DeviceIMEI&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + tmDevice);\n    tmSerial = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + tm.getSimSerialNumber();\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GSM devices Serial Number[simcard] &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + tmSerial);\n    androidId = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + android.provider.Settings.Secure.getString(getContentResolver(),\n            android.provider.Settings.Secure.ANDROID_ID);\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;androidId CDMA devices&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + androidId);\n    &lt;span class=&quot;hljs-type&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceUuid&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UUID&lt;/span&gt;(androidId.hashCode(),\n            ((&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;) tmDevice.hashCode() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) | tmSerial.hashCode());\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; deviceUuid.toString();\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deviceIdUUID universally unique identifier&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + deviceId);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceModelName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.MODEL;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Model Name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + deviceModelName);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceUSER&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.USER;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name USER&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + deviceUSER);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;devicePRODUCT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.PRODUCT;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PRODUCT&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + devicePRODUCT);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceHARDWARE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.HARDWARE;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HARDWARE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + deviceHARDWARE);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;deviceBRAND&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.BRAND;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BRAND&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + deviceBRAND);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myVersion&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.VERSION.RELEASE;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;VERSION.RELEASE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + myVersion);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sdkVersion&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; android.os.Build.VERSION.SDK_INT;\n    Log.v(&lt;span class=&quot;hljs-string&quot;&gt;&quot;VERSION.SDK_INT&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + sdkVersion);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Add in AndroidManifest.xml:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.READ_PHONE_STATE&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are a lot of different approaches to work around those &lt;code&gt;ANDROID_ID&lt;/code&gt; issues (may be &lt;code&gt;null&lt;/code&gt; sometimes or devices of a specific model always return the same ID) with pros and cons:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Implementing a custom ID generation algorithm (based on device properties that are supposed to be static and won&apos;t change -&amp;gt; who knows)&lt;/li&gt;\n&lt;li&gt;Abusing other IDs like &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity&quot; rel=&quot;noreferrer&quot;&gt;IMEI&lt;/a&gt;, serial number, Wi-Fi/Bluetooth-MAC address (they won&apos;t exist on all devices or additional permissions become necessary)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I myself prefer using an existing OpenUDID implementation (see &lt;a href=&quot;https://github.com/ylechelle/OpenUDID&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/ylechelle/OpenUDID&lt;/a&gt;) for Android (see &lt;a href=&quot;https://github.com/vieux/OpenUDID&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/vieux/OpenUDID&lt;/a&gt;). It is easy to integrate and makes use of the &lt;code&gt;ANDROID_ID&lt;/code&gt; with fallbacks for those issues mentioned above.&lt;/p&gt;\n    ","\n&lt;p&gt;There are 30+ answers here and some are same and some are unique. This answer is based on few of those answers. One of them being @Lenn Dolling&apos;s answer.&lt;/p&gt;\n\n&lt;p&gt;It combines 3 IDs and creates a 32-digit hex string. It has worked very well for me.  &lt;/p&gt;\n\n&lt;p&gt;3 IDs are:&lt;br&gt;\n&lt;strong&gt;Pseudo-ID&lt;/strong&gt; - It is generated based on physical device specifications&lt;br&gt;\n&lt;strong&gt;ANDROID_ID&lt;/strong&gt; - &lt;code&gt;Settings.Secure.ANDROID_ID&lt;/code&gt;&lt;br&gt;\n&lt;strong&gt;Bluetooth Address&lt;/strong&gt; - Bluetooth adapter address&lt;/p&gt;\n\n&lt;p&gt;It will return something like this:  &lt;strong&gt;551F27C060712A72730B0A0F734064B1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Note: You can always add more IDs to the &lt;code&gt;longId&lt;/code&gt; string. For example, Serial #. wifi adapter address. IMEI. This way you are making it more unique per device.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;deprecation&quot;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressLint(&quot;HardwareIds&quot;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;generateDeviceIdentifier&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pseudoId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;35&quot;&lt;/span&gt; +\n                Build.BOARD.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.BRAND.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.CPU_ABI.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.DEVICE.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.DISPLAY.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.HOST.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.ID.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.MANUFACTURER.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.MODEL.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.PRODUCT.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.TAGS.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.TYPE.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; +\n                Build.USER.length() % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;androidId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;BluetoothAdapter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bluetoothAdapter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; BluetoothAdapter.getDefaultAdapter();\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;btId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bluetoothAdapter != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            btId = bluetoothAdapter.getAddress();\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;longId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; pseudoId + androidId + btId;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;MessageDigest&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;messageDigest&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MessageDigest.getInstance(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MD5&quot;&lt;/span&gt;);\n            messageDigest.update(longId.getBytes(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, longId.length());\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// get md5 bytes&lt;/span&gt;\n            &lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt; md5Bytes[] = messageDigest.digest();\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// creating a hex string&lt;/span&gt;\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt; md5Byte : md5Bytes) {\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt; &amp;amp; md5Byte);\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// if it is a single digit, make sure it have 0 in front (proper padding)&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;) {\n                    identifier += &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n                }\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// add number to string&lt;/span&gt;\n                identifier += Integer.toHexString(b);\n            }\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// hex string to uppercase&lt;/span&gt;\n            identifier = identifier.toUpperCase();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; identifier;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n            Log.e(&lt;span class=&quot;hljs-string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, e.toString());\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How about the &lt;a href=&quot;http://en.wikipedia.org/wiki/International_Mobile_Equipment_Identity&quot; rel=&quot;noreferrer&quot;&gt;IMEI&lt;/a&gt;. That is unique for Android or other mobile devices.&lt;/p&gt;\n    ","\n&lt;p&gt;My two cents - NB this is for a &lt;em&gt;device (err) unique ID&lt;/em&gt; - not the installation one as discussed in the &lt;a href=&quot;http://android-developers.blogspot.gr/2011/03/identifying-app-installations.html&quot; rel=&quot;noreferrer&quot;&gt;Android developers&apos;s blog&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Of note that the &lt;a href=&quot;https://stackoverflow.com/a/5626208/281545&quot;&gt;solution&lt;/a&gt; provided by @emmby falls back in a per application ID as the SharedPreferences are not synchronized across processes (see &lt;a href=&quot;https://stackoverflow.com/a/4695567/281545&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/12430507/281545&quot;&gt;here&lt;/a&gt;). So I avoided this altogether.&lt;/p&gt;\n\n&lt;p&gt;Instead, I encapsulated the various strategies for getting a (device) ID in an enum - changing the order of the enum constants affects the priority of the various ways of getting the ID. The first non-null ID is returned or an exception is thrown (as per good Java practices of not giving null a meaning). So for instance I have the TELEPHONY one first - but a good default choice would be the ANDROID_ID\n&lt;strong&gt;beta:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.Manifest.permission;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.bluetooth.BluetoothAdapter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.Context;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.pm.PackageManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.net.wifi.WifiManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.provider.Settings.Secure;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.telephony.TelephonyManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.util.Log;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// TODO : hash&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIdentifier&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DeviceIdentifier&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {}\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; http://code.google.com/p/android/issues/detail?id=10603 */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ANDROID_ID_BUG_MSG&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;The device suffers from &quot;&lt;/span&gt;\n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;the Android ID bug - its ID is the emulator ID : &quot;&lt;/span&gt;\n        + IDs.BUGGY_ANDROID_ID;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;volatile&lt;/span&gt; String uuid; &lt;span class=&quot;hljs-comment&quot;&gt;// volatile needed - see EJ item 71&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// need lazy initialization to get a context&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Returns a unique identifier for this device. The first (in the order the\n     * enums constants as defined in the IDs enum) non null identifier is\n     * returned or a DeviceIDException is thrown. A DeviceIDException is also\n     * thrown if ignoreBuggyAndroidID is false and the device has the Android ID\n     * bug\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; ctx\n     *            an Android constant (to retrieve system services)\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; ignoreBuggyAndroidID\n     *            if false, on a device with the android ID bug, the buggy\n     *            android ID is not returned instead a DeviceIDException is\n     *            thrown\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; a *device* ID - null is never returned, instead a\n     *         DeviceIDException is thrown\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@throws&lt;/span&gt; DeviceIDException\n     *             if none of the enum methods manages to return a device ID\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getDeviceIdentifier&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx,\n            &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; ignoreBuggyAndroidID)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; DeviceIDException {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; uuid;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (DeviceIdentifier.class) {\n                result = uuid;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (IDs id : IDs.values()) {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                            result = uuid = id.getId(ctx);\n                        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (DeviceIDNotUniqueException e) {\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!ignoreBuggyAndroidID)\n                                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIDException&lt;/span&gt;(e);\n                        }\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n                    }\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIDException&lt;/span&gt;();\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IDs&lt;/span&gt; {\n        TELEPHONY_ID {\n\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            String &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt; {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// TODO : add a SIM based mechanism ? tm.getSimSerialNumber();&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TelephonyManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (TelephonyManager) ctx\n                        .getSystemService(Context.TELEPHONY_SERVICE);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tm == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    w(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Telephony Manager not available&quot;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                }\n                assertPermission(ctx, permission.READ_PHONE_STATE);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tm.getDeviceId();\n            }\n        },\n        ANDROID_ID {\n\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            String &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; DeviceIDException {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// no permission needed !&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;andoidId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Secure.getString(\n                    ctx.getContentResolver(),\n                    android.provider.Settings.Secure.ANDROID_ID);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (BUGGY_ANDROID_ID.equals(andoidId)) {\n                    e(ANDROID_ID_BUG_MSG);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIDNotUniqueException&lt;/span&gt;();\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; andoidId;\n            }\n        },\n        WIFI_MAC {\n\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            String &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;WifiManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;wm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (WifiManager) ctx\n                        .getSystemService(Context.WIFI_SERVICE);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (wm == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    w(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wifi Manager not available&quot;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                }\n                assertPermission(ctx, permission.ACCESS_WIFI_STATE); &lt;span class=&quot;hljs-comment&quot;&gt;// I guess&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// getMacAddress() has no java doc !!!&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wm.getConnectionInfo().getMacAddress();\n            }\n        },\n        BLUETOOTH_MAC {\n\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            String &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;BluetoothAdapter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ba&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; BluetoothAdapter.getDefaultAdapter();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ba == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    w(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bluetooth Adapter not available&quot;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                }\n                assertPermission(ctx, permission.BLUETOOTH);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ba.getAddress();\n            }\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO PSEUDO_ID&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// http://www.pocketmagic.net/2011/02/android-unique-device-id/&lt;/span&gt;\n        ;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;BUGGY_ANDROID_ID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;9774d56d682e549c&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; IDs.class.getSimpleName();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; DeviceIDException;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String msg)&lt;/span&gt; {\n            Log.w(TAG, msg);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String msg)&lt;/span&gt; {\n            Log.e(TAG, msg);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;assertPermission&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx, String perm)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;checkPermission&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ctx.getPackageManager().checkPermission(\n            perm, ctx.getPackageName());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (checkPermission != PackageManager.PERMISSION_GRANTED) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SecurityException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Permission &quot;&lt;/span&gt; + perm + &lt;span class=&quot;hljs-string&quot;&gt;&quot; is required&quot;&lt;/span&gt;);\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// =========================================================================&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Exceptions&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// =========================================================================&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIDException&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;8083699995384519417L&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;NO_ANDROID_ID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Could not retrieve a &quot;&lt;/span&gt;\n            + &lt;span class=&quot;hljs-string&quot;&gt;&quot;device ID&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DeviceIDException&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Throwable throwable)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(NO_ANDROID_ID, throwable);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DeviceIDException&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String detailMessage)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(detailMessage);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DeviceIDException&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(NO_ANDROID_ID);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIDNotUniqueException&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;\n            &lt;span class=&quot;hljs-title class_&quot;&gt;DeviceIDException&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;8940090896069484955L&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DeviceIDNotUniqueException&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(ANDROID_ID_BUG_MSG);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;The unique device ID of an Android OS device as String, using &lt;code&gt;TelephonyManager&lt;/code&gt; and &lt;code&gt;ANDROID_ID&lt;/code&gt;, is obtained by:&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String deviceId;\n&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TelephonyManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mTelephony&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mTelephony.getDeviceId() != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    deviceId = mTelephony.getDeviceId();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    deviceId = Secure.getString(\n                   getApplicationContext().getContentResolver(),\n                   Secure.ANDROID_ID);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But I strongly recommend a method suggested by Google, see &lt;em&gt;&lt;a href=&quot;http://android-developers.blogspot.mx/2011/03/identifying-app-installations.html&quot; rel=&quot;noreferrer&quot;&gt;Identifying App Installations&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is how I am generating the unique id:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDeviceId&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Context ctx&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-title class_&quot;&gt;TelephonyManager&lt;/span&gt; tm = (&lt;span class=&quot;hljs-title class_&quot;&gt;TelephonyManager&lt;/span&gt;) ctx.&lt;span class=&quot;hljs-title function_&quot;&gt;getSystemService&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Context&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;TELEPHONY_SERVICE&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; tmDevice = tm.&lt;span class=&quot;hljs-title function_&quot;&gt;getDeviceId&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; androidId = &lt;span class=&quot;hljs-title class_&quot;&gt;Secure&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;(ctx.&lt;span class=&quot;hljs-title function_&quot;&gt;getContentResolver&lt;/span&gt;(), &lt;span class=&quot;hljs-title class_&quot;&gt;Secure&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ANDROID_ID&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; serial = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;VERSION&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;SDK_INT&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;VERSION_CODES&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;FROYO&lt;/span&gt;) serial = &lt;span class=&quot;hljs-title class_&quot;&gt;Build&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;SERIAL&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(tmDevice != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;01&quot;&lt;/span&gt; + tmDevice;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(androidId != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;02&quot;&lt;/span&gt; + androidId;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(serial != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;03&quot;&lt;/span&gt; + serial;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// other alternatives (i.e. Wi-Fi MAC, Bluetooth MAC, etc.)&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way is to use &lt;code&gt;/sys/class/android_usb/android0/iSerial&lt;/code&gt; in an app without any permissions whatsoever.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;user&lt;span class=&quot;hljs-variable&quot;&gt;@creep&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;adb shell ls -l /sys/&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;/android_usb/android0/iSerial\n-rw-r--r-- root     root         &lt;span class=&quot;hljs-number&quot;&gt;4096&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;08 iSerial\nuser&lt;span class=&quot;hljs-variable&quot;&gt;@creep&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;adb shell cat /sys/&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;/android_usb/android0/iSerial\n0A3CXXXXXXXXXX5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To do this in Java one would just use a FileInputStream to open the iSerial file and read out the characters. Just be sure you wrap it in an exception handler, because not all devices have this file. &lt;/p&gt;\n\n&lt;p&gt;At least the following devices are known to have this file world-readable:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Galaxy Nexus&lt;/li&gt;\n&lt;li&gt;Nexus S&lt;/li&gt;\n&lt;li&gt;Motorola Xoom 3G&lt;/li&gt;\n&lt;li&gt;Toshiba AT300&lt;/li&gt;\n&lt;li&gt;HTC One V&lt;/li&gt;\n&lt;li&gt;Mini MK802&lt;/li&gt;\n&lt;li&gt;Samsung Galaxy S II&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can also see my blog post &lt;em&gt;&lt;a href=&quot;http://insitusec.blogspot.com/2013/01/leaking-android-hardware-serial-number.html&quot; rel=&quot;noreferrer&quot;&gt;Leaking Android hardware serial number to unprivileged apps&lt;/a&gt;&lt;/em&gt; where I discuss what other files are available for information.&lt;/p&gt;\n    ","\n&lt;p&gt;For hardware recognition of a specific Android device you could check the MAC Addresses.&lt;/p&gt;\n\n&lt;p&gt;you can do it that way:&lt;/p&gt;\n\n&lt;p&gt;in AndroidManifest.xml&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;now in your code:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;List&amp;lt;NetworkInterface&amp;gt; interfacesList = Collections.list(NetworkInterface.getNetworkInterfaces());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (NetworkInterface &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;interfacesList) {&lt;/span&gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// This will give you the interface MAC ADDRESS&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;.getHardwareAddress();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In every Android device their is at least a &quot;wlan0&quot; Interface witch is the WI-FI chip.\nThis code works even when WI-FI is not turned on.&lt;/p&gt;\n\n&lt;p&gt;P.S.\nTheir are a bunch of other Interfaces you will get from the list containing MACS But this can change between phones.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the following code to get the &lt;code&gt;IMEI&lt;/code&gt; or use Secure.&lt;code&gt;ANDROID_ID&lt;/code&gt; as an alternative, when the device doesn&apos;t have phone capabilities:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vhdl&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; identifier = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;\nTelephonyManager tm = (TelephonyManager)&lt;span class=&quot;hljs-keyword&quot;&gt;context&lt;/span&gt;.getSystemService(&lt;span class=&quot;hljs-keyword&quot;&gt;Context&lt;/span&gt;.TELEPHONY_SERVICE));\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tm != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)\n      identifier = tm.getDeviceId();\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (identifier == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || identifier .length() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n      identifier = Secure.getString(activity.getContentResolver(),Secure.ANDROID_ID);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;TelephonyManger.getDeviceId()&lt;/strong&gt; Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TelephonyManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mTelephony&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);            \n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myAndroidDeviceId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mTelephony.getDeviceId(); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But i recommend to use:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Settings.Secure.ANDROID_ID&lt;/strong&gt; that returns the Android ID as an unique 64-bit hex string.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;   myAndroidDeviceId = Secure.getString(getApplicationContext().getContentResolver(), Secure.ANDROID_ID); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sometimes &lt;strong&gt;TelephonyManger.getDeviceId()&lt;/strong&gt; will return null, so to assure an unique id you will use this method:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueID&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){    \n    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; myAndroidDeviceId = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;TelephonyManager&lt;/span&gt; mTelephony = (&lt;span class=&quot;hljs-title class_&quot;&gt;TelephonyManager&lt;/span&gt;) &lt;span class=&quot;hljs-title function_&quot;&gt;getSystemService&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Context&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;TELEPHONY_SERVICE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mTelephony.&lt;span class=&quot;hljs-title function_&quot;&gt;getDeviceId&lt;/span&gt;() != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n        myAndroidDeviceId = mTelephony.&lt;span class=&quot;hljs-title function_&quot;&gt;getDeviceId&lt;/span&gt;(); \n    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n         myAndroidDeviceId = &lt;span class=&quot;hljs-title class_&quot;&gt;Secure&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getApplicationContext&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;getContentResolver&lt;/span&gt;(), &lt;span class=&quot;hljs-title class_&quot;&gt;Secure&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ANDROID_ID&lt;/span&gt;); \n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myAndroidDeviceId;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Google Instance ID&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Released at I/O 2015; on Android requires play services 7.5.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developers.google.com/instance-id/&quot; rel=&quot;noreferrer&quot;&gt;https://developers.google.com/instance-id/&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://developers.google.com/instance-id/guides/android-implementation&quot; rel=&quot;noreferrer&quot;&gt;https://developers.google.com/instance-id/guides/android-implementation&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;InstanceID&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;iid&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; InstanceID.getInstance( context );   &lt;span class=&quot;hljs-comment&quot;&gt;// Google docs are wrong - this requires context&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iid.getId();  &lt;span class=&quot;hljs-comment&quot;&gt;// blocking call&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It seems that Google intends for this ID to be used to identify installations across Android, Chrome, and iOS.&lt;/p&gt;\n\n&lt;p&gt;It identifies an installation rather then a device, but then again, ANDROID_ID (which is the accepted answer) now no longer identifies devices either.  With the ARC runtime a new ANDROID_ID is generated for every installation (&lt;a href=&quot;https://stackoverflow.com/questions/29656101/how-does-android-id-on-arc-chrome-differ-from-android&quot;&gt;details here&lt;/a&gt;), just like this new instance ID.  Also, I think that identifying installations (not devices) is what most of us are actually looking for.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The advantages of instance ID&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It appears to me that Google intends for it to be used for this purpose (identifying your installations), it is cross-platform, and can be used for a number of other purposes (see the links above).&lt;/p&gt;\n\n&lt;p&gt;If you use GCM, then you will eventually need to use this instance ID because you need it in order to get the GCM token (which replaces the old GCM registration ID).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The disadvantages/issues&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In the current implementation (GPS 7.5) the instance ID is retrieved from a server when your app requests it.  This means that the call above is a blocking call - in my unscientific testing it takes 1-3 seconds if the device is online, and 0.5 - 1.0 seconds if off-line (presumably this is how long it waits before giving up and generating a random ID).  This was tested in North America on Nexus 5 with Android 5.1.1 and GPS 7.5.&lt;/p&gt;\n\n&lt;p&gt;If you use the ID for the purposes they intend - eg. app authentication, app identification, GCM - I think this 1-3 seconds could be a nuisance (depending on your app, of course).&lt;/p&gt;\n    ","\n&lt;p&gt;Google now has an &lt;a href=&quot;http://developer.android.com/google/play-services/id.html#get_started&quot; rel=&quot;noreferrer&quot;&gt;Advertising ID&lt;/a&gt;.&lt;br&gt;\nThis can also be used, but note that :&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The advertising ID is a user-specific, unique, resettable ID &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;enables users to reset their identifier or opt out of interest-based ads within Google Play apps.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So though this id may change, it seems that soon &lt;a href=&quot;http://www.androidpolice.com/2013/11/01/google-play-services-4-0-requires-developers-to-use-the-new-advertising-id-to-identify-your-device-enforcement-starts-aug-2014/&quot; rel=&quot;noreferrer&quot;&gt;we may not have a choice&lt;/a&gt;, depends on the purpose of this id.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://developer.android.com/google/play-services/id.html&quot; rel=&quot;noreferrer&quot;&gt;More info @ develper.android&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://developer.android.com/google/play-services/id.html#get_started&quot; rel=&quot;noreferrer&quot;&gt;Copy-paste code here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;HTH&lt;/p&gt;\n    ","\n&lt;p&gt;To understand the available Unique Ids in Android devices. Use this official guide. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Best practices for unique identifiers:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;IMEI, Mac Addresses, Instance Id, GUIDs, SSAID, Advertising Id, Safety Net API to verify devices. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/articles/user-data-ids&quot; rel=&quot;noreferrer&quot;&gt;https://developer.android.com/training/articles/user-data-ids&lt;/a&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"language-lawyer","slug":"language-lawyer"},{"name":"copy-elision","slug":"copy-elision"},{"name":"javafx","slug":"javafx"},{"name":"xmlhttprequest","slug":"xmlhttprequest"},{"name":"database-design","slug":"database-design"},{"name":"w3c","slug":"w3c"},{"name":"local-storage","slug":"local-storage"},{"name":"array-difference","slug":"array-difference"},{"name":"idioms","slug":"idioms"},{"name":"side-effects","slug":"side-effects"},{"name":"mutable","slug":"mutable"},{"name":"uitableview","slug":"uitableview"},{"name":"openssl","slug":"openssl"},{"name":"count","slug":"count"},{"name":"python-2.x","slug":"python-2.x"},{"name":"http-status-code-301","slug":"http-status-code-301"},{"name":"quoting","slug":"quoting"},{"name":"preg-match","slug":"preg-match"},{"name":"string-aggregation","slug":"string-aggregation"},{"name":"mysql","slug":"mysql"}]},"__N_SSG":true}