{"pageProps":{"data":{"count":1,"rows":[{"id":319,"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983","postType":"QUESTION","createdAt":"2022-07-09T17:27:02.000Z","updatedAt":"2022-07-09T17:27:02.000Z","tags":[{"id":1865,"name":"browser","slug":"browser","createdAt":"2022-07-09T17:27:03.000Z","updatedAt":"2022-07-09T17:27:03.000Z","Questions_Tags":{"questionId":319,"tagId":1865}}]}]},"slug":"browser","page":1,"answers":{"319":["\n&lt;p&gt;JavaScript has two number types: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/BigInt&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;The most frequently-used number type, &lt;code&gt;Number&lt;/code&gt;, is a 64-bit floating point &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot; rel=&quot;noreferrer&quot;&gt;IEEE 754&lt;/a&gt; number. &lt;/p&gt;\n\n&lt;p&gt;The largest exact integral value of this type is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt;, which is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;2&lt;sup&gt;53&lt;/sup&gt;-1, or &lt;/li&gt;\n&lt;li&gt;+/- 9,007,199,254,740,991, or&lt;/li&gt;\n&lt;li&gt;nine quadrillion seven trillion one hundred ninety-nine billion two hundred fifty-four million seven hundred forty thousand nine hundred ninety-one &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To put this in perspective: one quadrillion bytes is a petabyte (or one thousand terabytes).&lt;/p&gt;\n\n&lt;p&gt;&quot;Safe&quot; in this context refers to the ability to represent integers exactly and to correctly compare them.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-ecmascript-language-types-number-type&quot; rel=&quot;noreferrer&quot;&gt;From the spec:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Note that all the positive and negative integers whose magnitude is no\n  greater than 2&lt;sup&gt;53&lt;/sup&gt; are representable in the &lt;code&gt;Number&lt;/code&gt; type (indeed, the\n  integer 0 has two representations, +0 and -0).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;To safely use integers larger than this, you need to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;, which has no upper bound. &lt;/p&gt;\n\n&lt;p&gt;Note that the bitwise operators and shift operators operate on 32-bit integers, so in that case, the max safe integer is 2&lt;sup&gt;31&lt;/sup&gt;-1, or 2,147,483,647.  &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; log = &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = -x\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x == x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true !&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(y == y - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// also true !&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Arithmetic operators work, but bitwise/shifts only operate on int32:&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)      &lt;span class=&quot;hljs-comment&quot;&gt;// 4503599627370496&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)     &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x | &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)      &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Technical note on the subject of the number 9,007,199,254,740,992: There is an exact IEEE-754 representation of this value, and you can assign and read this value from a variable, so for &lt;em&gt;very carefully&lt;/em&gt; chosen applications in the domain of integers less than or equal to this value, you could treat this as a maximum value.&lt;/p&gt;\n\n&lt;p&gt;In the general case, you must treat this IEEE-754 value as inexact, because it is ambiguous whether it is encoding the logical value 9,007,199,254,740,992 or  9,007,199,254,740,993. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&amp;gt;= ES6:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MIN_SAFE_INTEGER&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_SAFE_INTEGER&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&amp;lt;= ES5&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE&quot; rel=&quot;noreferrer&quot;&gt;the reference&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_VALUE&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MIN_VALUE&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MIN_VALUE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MIN_VALUE&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MAX_VALUE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_VALUE&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MIN_SAFE_INTEGER&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MIN_SAFE_INTEGER&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//ES6&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MAX_SAFE_INTEGER&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_SAFE_INTEGER&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//ES6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It is 2&lt;sup&gt;53&lt;/sup&gt; == 9 007 199 254 740 992. This is because &lt;code&gt;Number&lt;/code&gt;s are stored as floating-point in a 52-bit mantissa.&lt;/p&gt;\n\n&lt;p&gt;The min value is -2&lt;sup&gt;53&lt;/sup&gt;.&lt;/p&gt;\n\n&lt;p&gt;This makes some fun things happening&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;) == &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&amp;gt;&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And can also be dangerous :)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;MAX_INT&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 9 007 199 254 740 992&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-variable constant_&quot;&gt;MAX_INT&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;MAX_INT&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; ++i) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// infinite loop&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;sub&gt;Further reading: &lt;a href=&quot;http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html&quot; rel=&quot;noreferrer&quot;&gt;http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In JavaScript, there is a number called &lt;code&gt;Infinity&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Infinity&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n=&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Also worth noting&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Infinity&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;Infinity&lt;/span&gt;\n=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;) === &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;Infinity&lt;/span&gt;\n=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This may be sufficient for some questions regarding this topic.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/307200/508537&quot;&gt;Jimmy&apos;s answer&lt;/a&gt; correctly represents the continuous JavaScript integer spectrum as &lt;strong&gt;-9007199254740992&lt;/strong&gt; to &lt;strong&gt;9007199254740992&lt;/strong&gt; inclusive (sorry 9007199254740993, you might think you are 9007199254740993, but you are wrong!\n &lt;em&gt;Demonstration below or in &lt;a href=&quot;http://jsfiddle.net/briguy37/LRY3u/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;). &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;9007199254740993&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;However, there is no answer that finds/proves this programatically (other than the one CoolAJ86 alluded to in &lt;a href=&quot;https://stackoverflow.com/a/7179733/508537&quot;&gt;his answer&lt;/a&gt; that would finish in 28.56 years ;), so here&apos;s a slightly more efficient way to do that (to be precise, it&apos;s more efficient by about 28.559999999968312 years :), along with a &lt;a href=&quot;http://jsfiddle.net/briguy37/P4twR/&quot; rel=&quot;nofollow noreferrer&quot;&gt;test fiddle&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Checks if adding/subtracting one to/from a number yields the correct result.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; number The number to test\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; true if you can add/subtract 1, false otherwise.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; canAddSubtractOneFromNumber = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numMinusOne = number - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numPlusOne = number + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((number - numMinusOne) === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; ((number - numPlusOne) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Find the highest number&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; highestNumber = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//Start with an integer 1 or higher&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Get a number higher than the valid integer range&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;canAddSubtractOneFromNumber&lt;/span&gt;(highestNumber)) {\n    highestNumber *= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Find the lowest number you can&apos;t add/subtract 1 from&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numToSubtract = highestNumber / &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (numToSubtract &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;canAddSubtractOneFromNumber&lt;/span&gt;(highestNumber - numToSubtract)) {\n        highestNumber = highestNumber - numToSubtract;\n    }\n    \n    numToSubtract /= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}        \n\n&lt;span class=&quot;hljs-comment&quot;&gt;//And there was much rejoicing.  Yay.    &lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;HighestNumber = &apos;&lt;/span&gt; + highestNumber);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Many earlier answers have shown &lt;code&gt;9007199254740992 === 9007199254740992 + 1&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt; to verify that &lt;em&gt;&lt;strong&gt;9,007,199,254,740,991&lt;/strong&gt;&lt;/em&gt; is the maximum and safe integer.&lt;/p&gt;\n&lt;p&gt;But what if we keep doing accumulation:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 9007199254740993&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740994&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 9007199254740994&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740996&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 9007199254740995&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9007199254740996&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 9007199254740996&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can see that among numbers greater than &lt;em&gt;&lt;strong&gt;9,007,199,254,740,992&lt;/strong&gt;&lt;/em&gt;, only even numbers are &lt;strong&gt;representable&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;It&apos;s an entry to explain how the &lt;strong&gt;double-precision 64-bit binary format&lt;/strong&gt; works. Let&apos;s see how &lt;em&gt;&lt;strong&gt;9,007,199,254,740,992&lt;/strong&gt;&lt;/em&gt; be held (represented) by using this binary format.&lt;/p&gt;\n&lt;p&gt;Using a brief version to demonstrate it from &lt;em&gt;&lt;strong&gt;4,503,599,627,370,496&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;            =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;.  \n     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|    |exponent part|        |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On the left side of the arrow, we have &lt;strong&gt;bit value 1&lt;/strong&gt;, and an adjacent &lt;strong&gt;radix point&lt;/strong&gt;. By consuming the exponent part on the left, the radix point is moved 52 steps to the right. The radix point ends up at the end, and we get 4503599627370496 in pure binary.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s keep incrementing the fraction part with 1 until all the bits are set to 1, which equals &lt;em&gt;&lt;strong&gt;9,007,199,254,740,991&lt;/strong&gt;&lt;/em&gt; in decimal.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;.  \n                       (+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt;.  \n                       (+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0010&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0010&lt;/span&gt;.  \n                       (+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n                        . \n                        .\n                        .\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;1111.&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because the 64-bit double-precision format strictly allots 52 bits for the fraction part, no more bits are available if we add another 1, so what we can do is setting all bits back to 0, and manipulate the exponent part:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt; bit is implicit and persistent.\n          \n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;      =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;1111.&lt;/span&gt; \n     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|                     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|\n\n                          (+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;. * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  \n     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|                     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|\n                                      &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;By consuming the &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;, radix\n                                       point has no way to go, but\n                                       there is still one &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; left &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                                       exponent part&lt;/span&gt;)\n  =&amp;gt;&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; \n         |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --| \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we get the  &lt;em&gt;&lt;strong&gt;9,007,199,254,740,992&lt;/strong&gt;&lt;/em&gt;, and for the numbers greater than it, the format can only handle increments of 2 because every increment of 1 on the fraction part ends up being multiplied by the left 2 in the exponent part. That&apos;s why &lt;strong&gt;double-precision 64-bit binary format&lt;/strong&gt; cannot hold odd numbers when the number is greater than &lt;em&gt;&lt;strong&gt;9,007,199,254,740,992&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;                            (consume &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; to move radix point to the end)\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt;.  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|                 |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Following this pattern, when the number gets greater than 9,007,199,254,740,992 * 2 = 18,014,398,509,481,984 only 4 times the fraction can be held:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 18014398509481985&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 18014398509481986&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 18014398509481987&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481984&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18014398509481988&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 18014398509481988&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How about numbers between [ &lt;em&gt;&lt;strong&gt;2 251 799 813 685 248&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;4 503 599 627 370 496&lt;/strong&gt;&lt;/em&gt; )?&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; . &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt;  *  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; ---- &lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;\n     |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits --|                |-- &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; bits  --|\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The value 0.1 in binary is exactly 2^-1 (=1/2) (=0.5)\nSo when the number is less than &lt;em&gt;&lt;strong&gt;4,503,599,627,370,496&lt;/strong&gt;&lt;/em&gt; (2^52), there is one bit available to represent the &lt;strong&gt;1/2 times of the integer&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4503599627370495.5&lt;/span&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4503599627370495.5&lt;/span&gt;  \n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4503599627370495.75&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4503599627370495.5&lt;/span&gt;  \n            \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Less than &lt;em&gt;&lt;strong&gt;2,251,799,813,685,248&lt;/strong&gt;&lt;/em&gt; (2^51)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.75&lt;/span&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.8&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 2251799813685246.75 &lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.25&lt;/span&gt;   &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.2&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// expected: 2251799813685246.25 &lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.5&lt;/span&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.5&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n   Please note that if you try this yourself and, say, log \n   these numbers to the console, they will get rounded. JavaScript\n   rounds if the number of digits exceed 17. The value \n   is internally held correctly:\n*/&lt;/span&gt;\n            \n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.25&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) \n&lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;111111111111111111111111111111111111111111111111110.01&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.75&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) \n&lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;111111111111111111111111111111111111111111111111110.11&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2251799813685246.78&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)   \n&lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;111111111111111111111111111111111111111111111111110.11&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And what is the available range of &lt;strong&gt;exponent part&lt;/strong&gt;? 11 bits allotted for it by the format.&lt;/p&gt;\n&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-precision_floating-point_format&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia&lt;/a&gt; (for more details, go there)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:IEEE_754_Double_Floating_Point_Format.svg#/media/File:IEEE_754_Double_Floating_Point_Format.svg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/IEEE_754_Double_Floating_Point_Format.svg/1200px-IEEE_754_Double_Floating_Point_Format.svg.png&quot; alt=&quot;IEEE 754 Double Floating Point Format.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;So to make the exponent part be 2^52, we exactly need to set e = 1075.&lt;/p&gt;\n    ","\n&lt;h1&gt;To be safe&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;MAX_INT&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;4294967295&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Reasoning&lt;/h1&gt;\n\n&lt;p&gt;I thought I&apos;d be clever and find the value at which &lt;code&gt;x + 1 === x&lt;/code&gt; with a more pragmatic approach.&lt;/p&gt;\n\n&lt;p&gt;My machine can only count 10 million per second or so... so I&apos;ll post back with the definitive answer in 28.56 years.&lt;/p&gt;\n\n&lt;p&gt;If you can&apos;t wait that long, I&apos;m willing to bet that&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Most of your loops don&apos;t run for 28.56 years&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;9007199254740992 === Math.pow(2, 53) + 1&lt;/code&gt; is proof enough&lt;/li&gt;\n&lt;li&gt;You should stick to &lt;code&gt;4294967295&lt;/code&gt; which is &lt;code&gt;Math.pow(2,32) - 1&lt;/code&gt; as to avoid expected issues with bit-shifting&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Finding &lt;code&gt;x + 1 === x&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    , start = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;()\n    ;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; != x) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(x % &lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;)) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x);\n    }\n\n    x += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n  }\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;() - start);\n}());\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The short answer is it depends.&lt;/p&gt;\n\n&lt;p&gt;If youre using bitwise operators anywhere (or if youre referring to the length of an Array), the ranges are:&lt;/p&gt;\n\n&lt;p&gt;Unsigned: &lt;code&gt;0(-1&amp;gt;&amp;gt;&amp;gt;0)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Signed: &lt;code&gt;(-(-1&amp;gt;&amp;gt;&amp;gt;1)-1)(-1&amp;gt;&amp;gt;&amp;gt;1)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;(It so happens that the bitwise operators and the maximum length of an array are restricted to 32-bit integers.)&lt;/p&gt;\n\n&lt;p&gt;If youre not using bitwise operators or working with array lengths:&lt;/p&gt;\n\n&lt;p&gt;Signed: &lt;code&gt;(-Math.pow(2,53))(+Math.pow(2,53))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;These limitations are imposed by the internal representation of the Number type, which generally corresponds to IEEE 754 double-precision floating-point representation. (Note that unlike typical signed integers, the magnitude of the negative limit is the same as the magnitude of the positive limit, due to characteristics of the internal representation, which actually includes a &lt;em&gt;negative&lt;/em&gt; 0!)&lt;/p&gt;\n    ","\n&lt;p&gt;ECMAScript 6:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_SAFE_INTEGER&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MIN_SAFE_INTEGER&lt;/span&gt; = -&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_SAFE_INTEGER&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Other may have already given the generic answer, but I thought it would be a good idea to give a fast way of determining it :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; !== x; x *= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which gives me 9007199254740992 within less than a millisecond in Chrome 30.&lt;/p&gt;\n\n&lt;p&gt;It will test powers of 2 to find which one, when &apos;added&apos; 1, equals himself.&lt;/p&gt;\n    ","\n&lt;p&gt;Anything you want to use for bitwise operations must be between 0x80000000 (-2147483648 or -2^31) and 0x7fffffff (2147483647 or 2^31 - 1).&lt;/p&gt;\n\n&lt;p&gt;The console will tell you that 0x80000000 equals +2147483648, but 0x80000000 &amp;amp; 0x80000000 equals -2147483648.&lt;/p&gt;\n    ","\n&lt;p&gt;JavaScript has received a new data type in ECMAScript 2020: &lt;code&gt;BigInt&lt;/code&gt;. It introduced numerical literals having an &quot;n&quot; suffix and allows for arbitrary precision:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;123456789012345678901012345678901n&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Precision will still be lost, of course, when such big integer is (maybe unintentionally) coerced to a number data type.&lt;/p&gt;\n&lt;p&gt;And, obviously, there will always be precision limitations due to finite memory, and a cost in terms of time in order to allocate the necessary memory and to perform arithmetic on such large numbers.&lt;/p&gt;\n&lt;p&gt;For instance, the generation of a number with a hundred thousand decimal digits, will take a noticeable delay before completion:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;BigInt&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;padEnd&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;)) + &lt;span class=&quot;hljs-number&quot;&gt;1n&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...but it works.&lt;/p&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;maxInt = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Firefox 3.6 it&apos;s 2^31 - 1.&lt;/p&gt;\n    ","\n&lt;p&gt;I did a simple test with a formula, X-(X+1)=-1, and the largest value of X I can get to work on Safari, Opera and Firefox (tested on OS&amp;nbsp;X) is 9e15. Here is the code I used for testing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;javascript&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;9e15&lt;/span&gt;-(&lt;span class=&quot;hljs-number&quot;&gt;9e15&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I write it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; max_int = &lt;span class=&quot;hljs-number&quot;&gt;0x20000000000000&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; min_int = -&lt;span class=&quot;hljs-number&quot;&gt;0x20000000000000&lt;/span&gt;;\n(max_int + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) === &lt;span class=&quot;hljs-number&quot;&gt;0x20000000000000&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n(max_int - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0x20000000000000&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Same for int32&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; max_int32 =  &lt;span class=&quot;hljs-number&quot;&gt;0x80000000&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; min_int32 = -&lt;span class=&quot;hljs-number&quot;&gt;0x80000000&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Let&apos;s get to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER&quot; rel=&quot;nofollow noreferrer&quot;&gt;sources&lt;/a&gt;&lt;/h1&gt;\n&lt;h2&gt;Description&lt;/h2&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; constant has a value of &lt;code&gt;9007199254740991&lt;/code&gt; (9,007,199,254,740,991 or ~9 quadrillion). The reasoning behind that number is that JavaScript uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-precision_floating-point_format&quot; rel=&quot;nofollow noreferrer&quot;&gt;double-precision floating-point format numbers&lt;/a&gt; as specified in &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot; rel=&quot;nofollow noreferrer&quot;&gt;IEEE 754&lt;/a&gt; and can only safely represent numbers between &lt;code&gt;-(2^53 - 1)&lt;/code&gt; and &lt;code&gt;2^53 - 1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Safe in this context refers to the ability to represent integers exactly and to correctly compare them. For example, &lt;code&gt;Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2&lt;/code&gt; will evaluate to true, which is mathematically incorrect. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot; rel=&quot;nofollow noreferrer&quot;&gt;Number.isSafeInteger()&lt;/a&gt; for more information.&lt;/p&gt;\n&lt;p&gt;Because &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; is a static property of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&quot; rel=&quot;nofollow noreferrer&quot;&gt;Number&lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&quot; rel=&quot;nofollow noreferrer&quot;&gt;Number&lt;/a&gt; object you created.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;Browser compatibility&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/jmCpa.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/jmCpa.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In JavaScript the representation of numbers is &lt;code&gt;2^53 - 1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Bitwise operation&lt;/code&gt; are calculated on &lt;code&gt;32 bits ( 4 bytes )&lt;/code&gt;, meaning if you exceed 32bits shifts you will start loosing bits.&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In the Google Chrome built-in javascript, you can go to approximately 2^1024 before the number is called infinity.&lt;/p&gt;\n    ","\n&lt;p&gt;Scato wrotes:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;anything you want to use for bitwise operations must be between\n  0x80000000 (-2147483648 or -2^31) and 0x7fffffff (2147483647 or 2^31 -\n  1).&lt;/p&gt;\n  \n  &lt;p&gt;the console will tell you that 0x80000000 equals +2147483648, but\n  0x80000000 &amp;amp; 0x80000000 equals -2147483648&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Hex-Decimals are unsigned positive values, so 0x80000000 = 2147483648 - thats mathematically correct. If you want to make it a signed value you have to right shift: 0x80000000 &amp;gt;&amp;gt; 0 = -2147483648. You can write 1 &amp;lt;&amp;lt; 31 instead, too.&lt;/p&gt;\n    ","\n&lt;p&gt;Firefox 3 doesn&apos;t seem to have a problem with huge numbers. &lt;/p&gt;\n\n&lt;p&gt;1e+200 * 1e+100 will calculate fine to 1e+300.&lt;/p&gt;\n\n&lt;p&gt;Safari seem to have no problem with it as well. (For the record, this is on a Mac if anyone else decides to test this.)&lt;/p&gt;\n\n&lt;p&gt;Unless I lost my brain at this time of day, this is way bigger than a 64-bit integer.&lt;/p&gt;\n    ","\n&lt;p&gt;Node.js and Google Chrome seem to both be using 1024 bit floating point values so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MAX_VALUE&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1.7976931348623157e+308&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"operator-overloading","slug":"operator-overloading"},{"name":"model-view-controller","slug":"model-view-controller"},{"name":"comparator","slug":"comparator"},{"name":"keyword","slug":"keyword"},{"name":"serialization","slug":"serialization"},{"name":"interop","slug":"interop"},{"name":"istream","slug":"istream"},{"name":"asp.net-mvc-5","slug":"asp.net-mvc-5"},{"name":"url-parameters","slug":"url-parameters"},{"name":"prop","slug":"prop"},{"name":"branch-prediction","slug":"branch-prediction"},{"name":"commandlink","slug":"commandlink"},{"name":"selenium","slug":"selenium"},{"name":"long-integer","slug":"long-integer"},{"name":"twitter-bootstrap","slug":"twitter-bootstrap"},{"name":"datetimeoffset","slug":"datetimeoffset"},{"name":"methods","slug":"methods"},{"name":"match","slug":"match"},{"name":"eclipse","slug":"eclipse"},{"name":"chrome-web-driver","slug":"chrome-web-driver"}]},"__N_SSG":true}