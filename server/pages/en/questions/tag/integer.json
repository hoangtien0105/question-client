{"pageProps":{"data":{"count":1,"rows":[{"id":192,"title":"How do I generate random integers within a specific range in Java?","slug":"how-do-i-generate-random-integers-within-a-specific-range-in-java-1657385458888","postType":"QUESTION","createdAt":"2022-07-09T16:50:58.000Z","updatedAt":"2022-07-09T16:50:58.000Z","tags":[{"id":1406,"name":"integer","slug":"integer","createdAt":"2022-07-09T16:50:58.000Z","updatedAt":"2022-07-09T16:50:58.000Z","Questions_Tags":{"questionId":192,"tagId":1406}}]}]},"slug":"integer","page":1,"answers":{"192":["\n&lt;p&gt;In &lt;strong&gt;Java 1.7 or later&lt;/strong&gt;, the standard way to do this is as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.ThreadLocalRandom;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// nextInt is normally exclusive of the top value,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// so add 1 to make it inclusive&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ThreadLocalRandom.current().nextInt(min, max + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot; rel=&quot;noreferrer&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  This approach has the advantage of not needing to explicitly initialize a &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot; rel=&quot;noreferrer&quot;&gt;java.util.Random&lt;/a&gt; instance, which can be a source of confusion and error if used inappropriately.&lt;/p&gt;\n\n&lt;p&gt;However, conversely there is no way to explicitly set the seed so it can be difficult to reproduce results in situations where that is useful such as testing or saving game states or similar.  In those situations, the pre-Java 1.7 technique shown below can be used.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Before Java 1.7&lt;/strong&gt;, the standard way to do this is as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Random;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Returns a pseudo-random number between min and max, inclusive.\n * The difference between min and max can be at most\n * &amp;lt;code&amp;gt;Integer.MAX_VALUE - 1&amp;lt;/code&amp;gt;.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; min Minimum value\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; max Maximum value.  Must be greater than min.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; Integer between min and max, inclusive.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; java.util.Random#nextInt(int)\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;randInt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; This will (intentionally) not run as written so that folks&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// copy-pasting have to think about how to initialize their&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Random instance.  Initialization of the Random instance is outside&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the main scope of the question, but some decent options are to have&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// a field that is initialized once and then re-used as needed or to&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// use ThreadLocalRandom (if using at least Java 1.7).&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// In particular, do NOT do &apos;Random rand = new Random()&apos; here or you&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// will get not very good / not very random results.&lt;/span&gt;\n    Random rand;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// nextInt is normally exclusive of the top value,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// so add 1 to make it inclusive&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rand.nextInt((max - min) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + min;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; randomNum;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot; rel=&quot;noreferrer&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  In practice, the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot; rel=&quot;noreferrer&quot;&gt;java.util.Random&lt;/a&gt; class is often preferable to &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot; rel=&quot;noreferrer&quot;&gt;java.lang.Math.random()&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.&lt;/p&gt;\n    ","\n&lt;p&gt;Note that this approach is more biased and less efficient than a &lt;code&gt;nextInt&lt;/code&gt; approach, &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;One standard pattern for accomplishing this is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Min + (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(Math.random() * ((Max - Min) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; Math library function Math.random() generates a double value in the range &lt;code&gt;[0,1)&lt;/code&gt;. Notice this range does not include the 1.&lt;/p&gt;\n\n&lt;p&gt;In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Math.random() * ( Max - Min )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This returns a value in the range &lt;code&gt;[0,Max-Min)&lt;/code&gt;, where &apos;Max-Min&apos; is not included.&lt;/p&gt;\n\n&lt;p&gt;For example, if you want &lt;code&gt;[5,10)&lt;/code&gt;, you need to cover five integer values so you use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Math.random() * &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would return a value in the range &lt;code&gt;[0,5)&lt;/code&gt;, where 5 is not included.&lt;/p&gt;\n\n&lt;p&gt;Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Min + (Math.random() * (Max - Min))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You now will get a value in the range &lt;code&gt;[Min,Max)&lt;/code&gt;. Following our example, that means &lt;code&gt;[5,10)&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + (Math.random() * (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, this still doesn&apos;t include &lt;code&gt;Max&lt;/code&gt; and you are getting a double value. In order to get the &lt;code&gt;Max&lt;/code&gt; value included, you need to add 1 to your range parameter &lt;code&gt;(Max - Min)&lt;/code&gt; and then truncate the decimal part by casting to an int. This is accomplished via:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Min + (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(Math.random() * ((Max - Min) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And there you have it. A random integer value in the range &lt;code&gt;[Min,Max]&lt;/code&gt;, or per the example &lt;code&gt;[5,10]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(Math.random() * ((&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ran&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ran.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The integer &lt;code&gt;x&lt;/code&gt; is now the random number that has a possible outcome of &lt;code&gt;5-10&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;minValue + rn.nextInt(maxValue - minValue + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;/questions/tagged/java-8&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java-8&apos;&quot; rel=&quot;tag&quot;&gt;java-8&lt;/a&gt; they introduced the method &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; class. &lt;/p&gt;\n\n&lt;p&gt;For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] fiveRandomNumbers = r.ints(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;).toArray();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; r.ints(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;).findFirst().getAsInt();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first parameter indicates just the size of the &lt;code&gt;IntStream&lt;/code&gt; generated (which is the overloaded method of the one that produces an unlimited &lt;code&gt;IntStream&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IntRandomNumberGenerator&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; PrimitiveIterator.OfInt randomIterator;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Initialize a new random number generator that generates\n     * random numbers in the range [min, max]\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; min - the min value (inclusive)\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; max - the max value (inclusive)\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;IntRandomNumberGenerator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        randomIterator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;().ints(min, max + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).iterator();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Returns a random number in the range (min, max)\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; a random number in the range (min, max)\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; randomIterator.nextInt();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also do it for &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; values. I hope it helps! :)&lt;/p&gt;\n    ","\n&lt;p&gt;You can edit your second code example to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; maximum - minimum + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  rn.nextInt(range) + minimum;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just a small modification of your first solution would suffice.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\nrandomNum = minimum + rand.nextInt((maximum - minimum) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;See more here for implementation of &lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;ThreadLocalRandom&lt;/code&gt; equivalent of class &lt;code&gt;java.util.Random&lt;/code&gt; for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ThreadLocalRandom.current().nextInt(x,y);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; - intervals e.g. (1,10)&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;Math.Random&lt;/code&gt; class in &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; is 0-based. So, if you write something like this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rand.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;x&lt;/code&gt; will be between &lt;code&gt;0-9&lt;/code&gt; inclusive.&lt;/p&gt;\n\n&lt;p&gt;So, given the following array of &lt;code&gt;25&lt;/code&gt; items, the code to generate a random number between &lt;code&gt;0&lt;/code&gt; (the base of the array) and &lt;code&gt;array.length&lt;/code&gt; would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] i = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\nindex = rand.nextInt( i.length );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since &lt;code&gt;i.length&lt;/code&gt; will return &lt;code&gt;25&lt;/code&gt;, the &lt;code&gt;nextInt( i.length )&lt;/code&gt; will return a number between the range of &lt;code&gt;0-24&lt;/code&gt;. The other option is going with &lt;code&gt;Math.Random&lt;/code&gt; which works in the same way.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;index = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) Math.floor(Math.random() * i.length);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For a better understanding, check out forum post &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot; rel=&quot;noreferrer&quot;&gt;Random Intervals (archive.org)&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It can be done by simply doing the statement:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Randomizer.generate(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Minimum of zero and maximum of ten&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Below is its source code.&lt;/p&gt;\n&lt;h3&gt;File &lt;em&gt;Randomizer.java&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Randomizer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min + (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(Math.random() * ((max - min) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is just clean and simple.&lt;/p&gt;\n    ","\n&lt;p&gt;Forgive me for being fastidious, but the solution suggested by the majority, i.e., &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt;, seems perilous due to the fact that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;rng.nextInt(n)&lt;/code&gt; cannot reach &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(max - min)&lt;/code&gt; may cause overflow when &lt;code&gt;min&lt;/code&gt; is negative.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A foolproof solution would return correct results for any &lt;code&gt;min &amp;lt;= max&lt;/code&gt; within [&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;]. Consider the following naive implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextIntInRange&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max, Random rng)&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (min &amp;gt; max) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cannot draw random int from invalid range [&quot;&lt;/span&gt; + min + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; + max + &lt;span class=&quot;hljs-string&quot;&gt;&quot;].&quot;&lt;/span&gt;);\n   }\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; max - min;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (diff &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; diff != Integer.MAX_VALUE) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (min + rng.nextInt(diff + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n   }\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n      i = rng.nextInt();\n   } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; min || i &amp;gt; max);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although inefficient, note that the probability of success in the &lt;code&gt;while&lt;/code&gt; loop will always be 50% or higher.&lt;/p&gt;\n    ","\n&lt;p&gt;I wonder if any of the random number generating methods provided by an &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot; rel=&quot;noreferrer&quot;&gt;Apache Commons Math&lt;/a&gt; library would fit the bill. &lt;/p&gt;\n\n&lt;p&gt;For example: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/**\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; min - The minimum.\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; max - The maximum.\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; A random double between these numbers (inclusive the minimum and maximum).\n   */&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getRandom&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; max)&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (Math.random() * (max + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - min)) + min;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can cast it to an Integer if you want.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; rand.nextInt((max+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) - min) + min;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Let us take an example.&lt;/p&gt;\n\n&lt;p&gt;Suppose I wish to generate a number between &lt;strong&gt;5-10&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; max - min;\n&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rn.nextInt(diff + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\ni += min;\nSystem.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The Random Number is &quot;&lt;/span&gt; + i);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Let us understand this&lt;/em&gt;...&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;Initialize max with highest value and min with the lowest value. &lt;/p&gt;\n    \n    &lt;p&gt;Now, we need to determine how many possible values can be obtained. For this example, it would be:&lt;/p&gt;\n    \n    &lt;blockquote&gt;\n      &lt;p&gt;&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;&lt;/p&gt;\n    &lt;/blockquote&gt;\n    \n    &lt;p&gt;So, count of this would be max - min + 1. &lt;/p&gt;\n    \n    &lt;blockquote&gt;\n      &lt;p&gt;i.e. 10 - 5 + 1 = 6&lt;/p&gt;\n    &lt;/blockquote&gt;\n    \n    &lt;p&gt;The random number will generate a number between &lt;strong&gt;0-5&lt;/strong&gt;. &lt;/p&gt;\n    \n    &lt;blockquote&gt;\n      &lt;p&gt;i.e. 0, 1, 2, 3, 4, 5&lt;/p&gt;\n    &lt;/blockquote&gt;\n    \n    &lt;p&gt;Adding the &lt;em&gt;min&lt;/em&gt; value to the random number would produce:&lt;/p&gt;\n    \n    &lt;blockquote&gt;\n      &lt;p&gt;5, 6, 7, 8, 9, 10      &lt;/p&gt;\n    &lt;/blockquote&gt;\n    \n    &lt;p&gt;Hence we obtain the desired range. &lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;As of Java 7, you should no longer use &lt;code&gt;Random&lt;/code&gt;. For most uses, the\n  random number generator of choice is now\n  &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt;&lt;code&gt;ThreadLocalRandom&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;For fork join pools and parallel\n  streams, use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SplittableRandom&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Joshua Bloch. Effective Java. Third Edition.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h2&gt;Starting from Java 8&lt;/h2&gt;\n\n&lt;p&gt;For fork join pools and parallel streams, use &lt;code&gt;SplittableRandom&lt;/code&gt; that is usually faster, has a better statistical independence and uniformity properties in comparison with &lt;code&gt;Random&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;To generate a random &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SplittableRandom&lt;/span&gt;().nextInt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1_001&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To generate a random &lt;code&gt;int[100]&lt;/code&gt; array of values in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SplittableRandom&lt;/span&gt;().ints(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1_001&lt;/span&gt;).parallel().toArray();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To return a Stream of random values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;IntStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SplittableRandom&lt;/span&gt;().ints(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1_001&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generate a random number for the difference of min and max by using the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot; rel=&quot;noreferrer&quot;&gt;nextint(n)&lt;/a&gt; method and then add min number to the result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rn.nextInt(max - min + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + min;\nSystem.out.println(result);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot; rel=&quot;noreferrer&quot;&gt;Random&lt;/a&gt; class: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ran&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Assumes max and min are non-negative.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomInt&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; min + ran.nextInt(max - min + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To generate a random number &quot;in between two numbers&quot;, use the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lowerBound&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;upperBound&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; r.nextInt(upperBound-lowerBound) + lowerBound;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This gives you a random number in between 1 (inclusive) and 11 (exclusive), so initialize the upperBound value by adding 1. For example, if you want to generate random number between 1 to 10 then initialize the upperBound number with 11 instead of 10.&lt;/p&gt;\n    ","\n&lt;p&gt;These methods might be convenient to use:&lt;/p&gt;\n&lt;p&gt;This method will return a random number &lt;em&gt;&lt;strong&gt;between&lt;/strong&gt;&lt;/em&gt; the provided minimum and maximum value:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getRandomNumberBetween&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.nextInt(max - min) + min;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (randomNumber == min) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Since the random number is between the min and max values, simply add 1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; randomNumber;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and this method will return a random number &lt;em&gt;&lt;strong&gt;from&lt;/strong&gt;&lt;/em&gt; the provided minimum and maximum value (so the generated number could also be the minimum or maximum number):&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getRandomNumberFrom&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.nextInt((max + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) - min) + min;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; randomNumber;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;face = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + randomNumbers.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; minimum + Double.valueOf(Math.random()*(maximum-minimum )).intValue();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or take a look to RandomUtils from &lt;a href=&quot;http://commons.apache.org/lang&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Commons&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a helpful class to generate random &lt;code&gt;ints&lt;/code&gt; in a range with any combination of inclusive/exclusive bounds:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Random;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomRange&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextIncInc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nextInt(max - min + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + min;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextExcInc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nextInt(max - min) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + min;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextExcExc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nextInt(max - min - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + min;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextIncExc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nextInt(max - min) + min;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can achieve that concisely in Java 8:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;totalNumber&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;IntStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; random.ints(totalNumber, min, max);\nstream.forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another option is just using &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot; rel=&quot;noreferrer&quot;&gt;Apache Commons&lt;/a&gt;: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.math.random.RandomData;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.math.random.RandomDataImpl;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;RandomData&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomData&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomDataImpl&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; randomData.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;RANDOM&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;(System.nanoTime());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; pMin, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; pMax)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pMin + RANDOM.nextFloat() * (pMax - pMin);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I found this example &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot; rel=&quot;nofollow noreferrer&quot;&gt;Generate random numbers&lt;/a&gt; : &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;This example generates random integers in a specific range. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Random;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Generate random integers in a certain range. */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomRange&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String... aArgs)&lt;/span&gt;{\n    log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generating random integers in the range 1..10.&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; idx &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++idx){\n      showRandomInteger(START, END, random);\n    }\n\n    log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Done.&quot;&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showRandomInteger&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; aStart, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; aEnd, Random aRandom)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( aStart &amp;gt; aEnd ) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Start cannot exceed End.&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//get the range, casting to long to avoid overflow problems&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)aEnd - (&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)aStart + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// compute a fraction of the range, 0 &amp;lt;= frac &amp;lt; range&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fraction&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)(range * aRandom.nextDouble());\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(fraction + aStart);    \n    log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generated : &quot;&lt;/span&gt; + randomNumber);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String aMessage)&lt;/span&gt;{\n    System.out.println(aMessage);\n  }\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An example run of this class :&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Generating random integers in the range &lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;.\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGenerated : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nDone.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a simple sample that shows how to generate random number from closed &lt;code&gt;[min, max]&lt;/code&gt; range, while &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;You can reuse it as field in hole class, also having all &lt;code&gt;Random.class&lt;/code&gt; methods in one place&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Results example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;RandomUtils&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomUtils&lt;/span&gt;();\nrandom.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 0&lt;/span&gt;\nrandom.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 10&lt;/span&gt;\nrandom.nextInt(-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns numbers from -10 to 10 (-10, -9....9, 10)&lt;/span&gt;\nrandom.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// throws assert&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sources:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; junit.framework.Assert;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Random;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomUtils&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; min generated value. Can&apos;t be &amp;gt; then max\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; max generated value\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; values in closed range [min, max].\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n        Assert.assertFalse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;min can&apos;t be &amp;gt; then max; values:[&quot;&lt;/span&gt; + min + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; + max + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;, min &amp;gt; max);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (min == max) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; max;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nextInt(max - min + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + min;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s better to use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot; rel=&quot;noreferrer&quot;&gt;SecureRandom&lt;/a&gt; rather than just Random.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateRandomInteger&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;SecureRandom&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SecureRandom&lt;/span&gt;();\n    rand.setSeed(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().getTime());\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;randomNum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rand.nextInt((max - min) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + min;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; randomNum;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;rand.nextInt((max+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) - min) + min;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is working fine. &lt;/p&gt;\n    "]},"randomTags":[{"name":"std","slug":"std"},{"name":"html-select","slug":"html-select"},{"name":"excel","slug":"excel"},{"name":"performance","slug":"performance"},{"name":"language-agnostic","slug":"language-agnostic"},{"name":"python-module","slug":"python-module"},{"name":"buffer-overflow","slug":"buffer-overflow"},{"name":"addeventlistener","slug":"addeventlistener"},{"name":"prototypal-inheritance","slug":"prototypal-inheritance"},{"name":"sql-function","slug":"sql-function"},{"name":"include","slug":"include"},{"name":"cuda","slug":"cuda"},{"name":"relative-import","slug":"relative-import"},{"name":"precision","slug":"precision"},{"name":"r-faq","slug":"r-faq"},{"name":"observable","slug":"observable"},{"name":"templates","slug":"templates"},{"name":"microbenchmark","slug":"microbenchmark"},{"name":"grouping","slug":"grouping"},{"name":"awt","slug":"awt"}]},"__N_SSG":true}