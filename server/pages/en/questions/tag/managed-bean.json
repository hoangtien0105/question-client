{"pageProps":{"data":{"count":1,"rows":[{"id":312,"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513","postType":"QUESTION","createdAt":"2022-07-09T17:26:36.000Z","updatedAt":"2022-07-09T17:26:36.000Z","tags":[{"id":1845,"name":"managed-bean","slug":"managed-bean","createdAt":"2022-07-09T17:26:36.000Z","updatedAt":"2022-07-09T17:26:36.000Z","Questions_Tags":{"questionId":312,"tagId":1845}}]}]},"slug":"managed-bean","page":1,"answers":{"312":["\n&lt;h2&gt;Introduction&lt;/h2&gt;\n&lt;p&gt;It represents the scope (the lifetime) of the bean. This is easier to understand if you are familiar with &quot;under the covers&quot; working of a basic servlet web application: &lt;a href=&quot;https://stackoverflow.com/questions/3106452/how-do-servlets-work-instantiation-session-variables-and-multithreading&quot;&gt;How do servlets work? Instantiation, sessions, shared variables and multithreading&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;@Request/View/Flow/Session/ApplicationScoped&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;A &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/enterprise/context/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@RequestScoped&lt;/code&gt;&lt;/a&gt; bean lives as long as a single HTTP request-response cycle (note that an Ajax request counts as a single HTTP request too). A &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/faces/view/ViewScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ViewScoped&lt;/code&gt;&lt;/a&gt; bean lives as long as you&apos;re interacting with the same JSF view by postbacks which call action methods returning &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;void&lt;/code&gt; without any navigation/redirect. A &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/flow/FlowScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@FlowScoped&lt;/code&gt;&lt;/a&gt; bean lives as long as you&apos;re navigating through the specified collection of views registered in the flow configuration file. A &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/enterprise/context/SessionScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@SessionScoped&lt;/code&gt;&lt;/a&gt; bean lives as long as the established HTTP session. An &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/enterprise/context/ApplicationScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ApplicationScoped&lt;/code&gt;&lt;/a&gt; bean lives as long as the web application runs. Note that the CDI &lt;code&gt;@Model&lt;/code&gt; is basically a &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/enterprise/inject/Model.html&quot; rel=&quot;noreferrer&quot;&gt;stereotype&lt;/a&gt; for &lt;code&gt;@Named @RequestScoped&lt;/code&gt;, so same rules apply.&lt;/p&gt;\n&lt;p&gt;Which scope to choose depends solely on the data (the state) the bean holds and represents. Use &lt;code&gt;@RequestScoped&lt;/code&gt; for simple and non-ajax forms/presentations. Use &lt;code&gt;@ViewScoped&lt;/code&gt; for rich ajax-enabled dynamic views (ajaxbased validation, rendering, dialogs, etc). Use &lt;code&gt;@FlowScoped&lt;/code&gt; for the &quot;wizard&quot; (&quot;questionnaire&quot;) pattern of collecting input data spread over multiple pages. Use &lt;code&gt;@SessionScoped&lt;/code&gt; for client specific data, such as the logged-in user and user preferences (language, etc). Use &lt;code&gt;@ApplicationScoped&lt;/code&gt; for application wide data/constants, such as dropdown lists which are the same for everyone, or managed beans without any instance variables and having only methods.&lt;/p&gt;\n&lt;p&gt;Abusing an &lt;code&gt;@ApplicationScoped&lt;/code&gt; bean for session/view/request scoped data would make it to be shared among all users, so anyone else can see each other&apos;s data which is just plain wrong. Abusing a &lt;code&gt;@SessionScoped&lt;/code&gt; bean for view/request scoped data would make it to be shared among all tabs/windows in a single browser session, so the enduser may experience inconsitenties when interacting with every view after switching between tabs which is bad for user experience. Abusing a &lt;code&gt;@RequestScoped&lt;/code&gt; bean for view scoped data would make view scoped data to be reinitialized to default on every single (ajax) postback, causing possibly non-working forms (&lt;a href=&quot;https://stackoverflow.com/a/2120183/157882&quot;&gt;see also points 4 and 5 here&lt;/a&gt;). Abusing a &lt;code&gt;@ViewScoped&lt;/code&gt; bean for request, session or application scoped data, and abusing a &lt;code&gt;@SessionScoped&lt;/code&gt; bean for application scoped data doesn&apos;t affect the client, but it unnecessarily occupies server memory and is plain inefficient.&lt;/p&gt;\n&lt;p&gt;Note that the scope should rather not be chosen based on performance implications, unless you &lt;em&gt;really&lt;/em&gt; have a low memory footprint and want to go completely stateless; you&apos;d need to use exclusively &lt;code&gt;@RequestScoped&lt;/code&gt; beans and fiddle with request parameters to maintain the client&apos;s state. Also note that when you have a single JSF page with differently scoped data, then it&apos;s perfectly valid to put them in separate backing beans in a scope matching the data&apos;s scope. The beans can just access each other via &lt;code&gt;@ManagedProperty&lt;/code&gt; in case of JSF managed beans or &lt;code&gt;@Inject&lt;/code&gt; in case of CDI managed beans.&lt;/p&gt;\n&lt;h3&gt;See also:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6025998/difference-between-view-and-request-scope-in-managed-beans/&quot;&gt;Difference between View and Request scope in managed beans&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28240734/advantages-of-using-jsf-faces-flow-instead-of-the-normal-navigation-system/&quot;&gt;Advantages of using JSF Faces Flow instead of the normal navigation system&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://balusc.blogspot.com/2011/09/communication-in-jsf-20.html#ManagedBeanScopes&quot; rel=&quot;noreferrer&quot;&gt;Communication in JSF2 - Managed bean scopes&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;@CustomScoped/NoneScoped/Dependent&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;It&apos;s not mentioned in your question, but (legacy) JSF also supports &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/faces/bean/CustomScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@CustomScoped&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/faces/bean/NoneScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@NoneScoped&lt;/code&gt;&lt;/a&gt;, which are rarely used in real world. The &lt;code&gt;@CustomScoped&lt;/code&gt; must refer a custom &lt;code&gt;Map&amp;lt;K, Bean&amp;gt;&lt;/code&gt; implementation in some broader scope which has overridden &lt;code&gt;Map#put()&lt;/code&gt; and/or &lt;code&gt;Map#get()&lt;/code&gt; in order to have more fine grained control over bean creation and/or destroy.&lt;/p&gt;\n&lt;p&gt;The JSF &lt;code&gt;@NoneScoped&lt;/code&gt; and CDI &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/Dependent.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@Dependent&lt;/code&gt;&lt;/a&gt; basically lives as long as a single EL-evaluation on the bean. Imagine a login form with two input fields referring a bean property and a command button referring a bean action, thus with in total three EL expressions, then effectively three instances will be created. One with the username set, one with the password set and one on which the action is invoked. You normally want to use this scope only on beans which should live as long as the bean where it&apos;s being injected. So if a &lt;code&gt;@NoneScoped&lt;/code&gt; or &lt;code&gt;@Dependent&lt;/code&gt; is injected in a &lt;code&gt;@SessionScoped&lt;/code&gt;, then it will live as long as the &lt;code&gt;@SessionScoped&lt;/code&gt; bean.&lt;/p&gt;\n&lt;h3&gt;See also:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30748724/expire-specific-managed-bean-instance-after-time-interval/&quot;&gt;Expire specific managed bean instance after time interval&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3086896/what-is-none-scope-bean-and-when-to-use-it/&quot;&gt;what is none scope bean and when to use it?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19322364/what-is-the-default-managed-bean-scope-in-a-jsf-2-application-in-netbeans/&quot;&gt;What is the default Managed Bean Scope in a JSF 2 application?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Flash scope&lt;/h2&gt;\n&lt;p&gt;As last, JSF also supports the flash scope. It is backed by a short living cookie which is associated with a data entry in the session scope. Before the redirect, a cookie will be set on the HTTP response with a value which is uniquely associated with the data entry in the session scope. After the redirect, the presence of the flash scope cookie will be checked and the data entry associated with the cookie will be removed from the session scope and be put in the request scope of the redirected request. Finally the cookie will be removed from the HTTP response. This way the redirected request has access to request scoped data which was been prepared in the initial request.&lt;/p&gt;\n&lt;p&gt;This is actually not available as a managed bean scope, i.e. there&apos;s no such thing as &lt;code&gt;@FlashScoped&lt;/code&gt;. The flash scope is only available as a map via &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/context/ExternalContext.html#getFlash--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ExternalContext#getFlash()&lt;/code&gt;&lt;/a&gt; in managed beans and &lt;code&gt;#{flash}&lt;/code&gt; in EL.&lt;/p&gt;\n&lt;h3&gt;See also:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13685633/how-to-show-faces-message-in-the-redirected-page/&quot;&gt;How to show faces message in the redirected page&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25694423/pass-an-object-between-viewscoped-beans-without-using-get-params&quot;&gt;Pass an object between @ViewScoped beans without using GET params&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7812985/cdi-missing-viewscoped-and-flashscoped/&quot;&gt;CDI missing @ViewScoped and @FlashScoped&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Since JSF 2.3 all the bean scopes defined in package &lt;code&gt;javax.faces.bean&lt;/code&gt; package have been deprecated to align the scopes with CDI. Moreover they&apos;re only applicable if your bean is using &lt;code&gt;@ManagedBean&lt;/code&gt; annotation. If you are using JSF versions below 2.3 refer to the legacy answer at the end.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;From JSF 2.3 here are scopes that can be used on JSF Backing Beans:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. &lt;code&gt;@javax.enterprise.context.ApplicationScoped&lt;/code&gt;&lt;/strong&gt;: The application scope persists for the entire duration of the web application. That scope is shared among all requests and all sessions. This is useful when you have data for whole application.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. &lt;code&gt;@javax.enterprise.context.SessionScoped&lt;/code&gt;&lt;/strong&gt;: The session scope persists from the time that a session is established until session termination. The session context is shared between all requests that occur in the same HTTP session. This is useful when you wont to save data for a specific client for a particular session.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;3. &lt;code&gt;@javax.enterprise.context.ConversationScoped&lt;/code&gt;&lt;/strong&gt;: The conversation scope persists as log as the bean lives. The scope provides 2 methods: &lt;code&gt;Conversation.begin()&lt;/code&gt; and &lt;code&gt;Conversation.end()&lt;/code&gt;. These methods should called explicitly, either to start or end the life of a bean.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;4. &lt;code&gt;@javax.enterprise.context.RequestScoped&lt;/code&gt;&lt;/strong&gt;: The request scope is short-lived. It starts when an HTTP request is submitted and ends after the response is sent back to the client. If you place a managed bean into request scope, a new instance is created with each request. It is worth considering request scope if you are concerned about the cost of session scope storage.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;5. &lt;code&gt;@javax.faces.flow.FlowScoped&lt;/code&gt;&lt;/strong&gt;: The Flow scope persists as long as the Flow lives. A flow may be defined as a contained set of pages (or views) that define a unit of work. Flow scoped been is active as long as user navigates with in the Flow. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;6. &lt;code&gt;@javax.faces.view.ViewScoped&lt;/code&gt;&lt;/strong&gt;: A bean in view scope persists while the same JSF page is redisplayed. As soon as the user navigates to a different page, the bean goes out of scope.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The following legacy answer applies JSF version before 2.3&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;As of JSF 2.x there are 4 Bean Scopes:    &lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;@SessionScoped &lt;/li&gt;\n  &lt;li&gt;@RequestScoped&lt;/li&gt;\n  &lt;li&gt;@ApplicationScoped&lt;/li&gt;\n  &lt;li&gt;@ViewScoped   &lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Session Scope:&lt;/strong&gt;    The session scope persists from the time that a session is established until session termination. A session terminates\n  if the web application invokes the invalidate method on the\n  HttpSession object, or if it times out.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;RequestScope:&lt;/strong&gt;   The request scope is short-lived. It starts when an HTTP request is submitted and ends after the response is sent back\n  to the client. If you place a managed bean into request scope, a new\n  instance is created with each request. It is worth considering request\n  scope if you are concerned about the cost of session scope storage.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;ApplicationScope:&lt;/strong&gt;    The application scope persists for the entire duration of the web application. That scope is shared among all\n  requests and all sessions. You place managed beans into the\n  application scope if a single bean should be shared among all\n  instances of a web application. The bean is constructed when it is\n  first requested by any user of the application, and it stays alive\n  until the web application is removed from the application server.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;ViewScope:&lt;/strong&gt;      View scope was added in JSF 2.0. A bean in view scope persists while the same JSF page is redisplayed. (The JSF\n  specification uses the term view for a JSF page.) As soon as the user\n  navigates to a different page, the bean goes out of scope.&lt;/p&gt;\n  \n  &lt;p&gt;Choose the scope you based on your requirement.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;http://horstmann.com/corejsf/&quot; rel=&quot;noreferrer&quot;&gt;Core Java Server Faces 3rd Edition&lt;/a&gt; by David Geary &amp;amp; Cay Horstmann [Page no. 51 - 54]\n&lt;img src=&quot;https://i.stack.imgur.com/ZXZCU.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"interop","slug":"interop"},{"name":"dictionary","slug":"dictionary"},{"name":"python-2.7","slug":"python-2.7"},{"name":"aggregate-functions","slug":"aggregate-functions"},{"name":"full-outer-join","slug":"full-outer-join"},{"name":"syntactic-sugar","slug":"syntactic-sugar"},{"name":"git-rm","slug":"git-rm"},{"name":"mobile","slug":"mobile"},{"name":"interface","slug":"interface"},{"name":"null-layout-manager","slug":"null-layout-manager"},{"name":"math","slug":"math"},{"name":"ios","slug":"ios"},{"name":"module","slug":"module"},{"name":"gets","slug":"gets"},{"name":"com-interop","slug":"com-interop"},{"name":"getter","slug":"getter"},{"name":"decorator","slug":"decorator"},{"name":"httprequest","slug":"httprequest"},{"name":"fetch-api","slug":"fetch-api"},{"name":"chunks","slug":"chunks"}]},"__N_SSG":true}