{"pageProps":{"data":{"count":1,"rows":[{"id":572,"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475","postType":"QUESTION","createdAt":"2022-07-09T17:40:56.000Z","updatedAt":"2022-07-09T17:40:56.000Z","tags":[{"id":2754,"name":"authentication","slug":"authentication","createdAt":"2022-07-09T17:40:56.000Z","updatedAt":"2022-07-09T17:40:56.000Z","Questions_Tags":{"questionId":572,"tagId":2754}}]}]},"slug":"authentication","page":1,"answers":{"572":["\n&lt;h2&gt;PART I: How To Log In&lt;/h2&gt;\n&lt;p&gt;We&apos;ll assume you already know how to build a login+password HTML form which POSTs the values to a script on the server side for authentication. The sections below will deal with patterns for sound practical auth, and how to avoid the most common security pitfalls.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;To HTTPS or not to HTTPS?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Unless the connection is already secure (that is, tunneled through HTTPS using SSL/TLS), your login form values will be sent in cleartext, which allows anyone eavesdropping on the line between browser and web server will be able to read logins as they pass through. This type of wiretapping is done routinely by governments, but in general, we won&apos;t address &apos;owned&apos; wires other than to say this: Just use HTTPS.&lt;/p&gt;\n&lt;p&gt;In essence, the only &lt;strong&gt;practical&lt;/strong&gt; way to protect against wiretapping/packet sniffing during login is by using HTTPS or another certificate-based encryption scheme (for example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot; rel=&quot;noreferrer&quot;&gt;TLS&lt;/a&gt;) or a proven &amp;amp; tested challenge-response scheme (for example, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot; rel=&quot;noreferrer&quot;&gt;Diffie-Hellman&lt;/a&gt;-based SRP). &lt;em&gt;Any other method can be easily circumvented&lt;/em&gt; by an eavesdropping attacker.&lt;/p&gt;\n&lt;p&gt;Of course, if you are willing to get a little bit impractical, you could also employ some form of two-factor authentication scheme (e.g. the Google Authenticator app, a physical &apos;cold war style&apos; codebook, or an RSA key generator dongle). If applied correctly, this could work even with an unsecured connection, but it&apos;s hard to imagine that a dev would be willing to implement two-factor auth but not SSL.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;(Do not) Roll-your-own JavaScript encryption/hashing&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Given the perceived (though now &lt;a href=&quot;https://letsencrypt.org/&quot; rel=&quot;noreferrer&quot;&gt;avoidable&lt;/a&gt;) cost and technical difficulty of setting up an SSL certificate on your website, some developers are tempted to roll their own in-browser hashing or encryption schemes in order to avoid passing cleartext logins over an unsecured wire.&lt;/p&gt;\n&lt;p&gt;While this is a noble thought, it is essentially useless (and can be a &lt;a href=&quot;https://stackoverflow.com/questions/1380168/does-it-make-security-sense-to-hash-password-on-client-end&quot;&gt;security flaw&lt;/a&gt;) unless it is combined with one of the above - that is, either securing the line with strong encryption or using a tried-and-tested challenge-response mechanism (if you don&apos;t know what that is, just know that it is one of the most difficult to prove, most difficult to design, and most difficult to implement concepts in digital security).&lt;/p&gt;\n&lt;p&gt;While it is true that hashing the password &lt;em&gt;can be&lt;/em&gt; effective against &lt;strong&gt;password disclosure&lt;/strong&gt;, it is vulnerable to replay attacks, Man-In-The-Middle attacks / hijackings (if an attacker can inject a few bytes into your unsecured HTML page before it reaches your browser, they can simply comment out the hashing in the JavaScript), or brute-force attacks (since you are handing the attacker both username, salt and hashed password).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;CAPTCHAS against humanity&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CAPTCHA&quot; rel=&quot;noreferrer&quot;&gt;CAPTCHA&lt;/a&gt; is meant to thwart one specific category of attack: automated dictionary/brute force trial-and-error with no human operator. There is no doubt that this is a real threat, however, there are ways of dealing with it seamlessly that don&apos;t require a CAPTCHA, specifically properly designed server-side login throttling schemes - we&apos;ll discuss those later.&lt;/p&gt;\n&lt;p&gt;Know that CAPTCHA implementations are not created alike; they often aren&apos;t human-solvable, most of them are actually ineffective against bots, all of them are ineffective against cheap third-world labor (according to &lt;a href=&quot;https://en.wikipedia.org/wiki/OWASP&quot; rel=&quot;noreferrer&quot;&gt;OWASP&lt;/a&gt;, the current sweatshop rate is $12 per 500 tests), and some implementations may be technically illegal in some countries (see &lt;a href=&quot;https://www.owasp.org/index.php/Authentication_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;OWASP Authentication Cheat Sheet&lt;/a&gt;). If you must use a CAPTCHA, use Google&apos;s &lt;a href=&quot;https://en.wikipedia.org/wiki/ReCAPTCHA&quot; rel=&quot;noreferrer&quot;&gt;reCAPTCHA&lt;/a&gt;, since it is OCR-hard by definition (since it uses already OCR-misclassified book scans) and tries very hard to be user-friendly.&lt;/p&gt;\n&lt;p&gt;Personally, I tend to find CAPTCHAS annoying, and use them only as a last resort when a user has failed to log in a number of times and throttling delays are maxed out. This will happen rarely enough to be acceptable, and it strengthens the system as a whole.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Storing Passwords / Verifying logins&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This may finally be common knowledge after all the highly-publicized hacks and user data leaks we&apos;ve seen in recent years, but it has to be said: Do not store passwords in cleartext in your database. User databases are routinely hacked, leaked or gleaned through SQL injection, and if you are storing raw, plaintext passwords, that is instant game over for your login security.&lt;/p&gt;\n&lt;p&gt;So if you can&apos;t store the password, how do you check that the login+password combination POSTed from the login form is correct? The answer is hashing using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Key_derivation_function&quot; rel=&quot;noreferrer&quot;&gt;key derivation function&lt;/a&gt;. Whenever a new user is created or a password is changed, you take the password and run it through a KDF, such as Argon2, bcrypt, scrypt or PBKDF2, turning the cleartext password (&quot;correcthorsebatterystaple&quot;) into a long, random-looking string, which is a lot safer to store in your database. To verify a login, you run the same hash function on the entered password, this time passing in the salt and compare the resulting hash string to the value stored in your database. Argon2, bcrypt and scrypt store the salt with the hash already. Check out this &lt;a href=&quot;https://security.stackexchange.com/a/31846/8340&quot;&gt;article&lt;/a&gt; on sec.stackexchange for more detailed information.&lt;/p&gt;\n&lt;p&gt;The reason a salt is used is that hashing in itself is not sufficient -- you&apos;ll want to add a so-called &apos;salt&apos; to protect the hash against &lt;a href=&quot;https://en.wikipedia.org/wiki/Rainbow_table&quot; rel=&quot;noreferrer&quot;&gt;rainbow tables&lt;/a&gt;. A salt effectively prevents two passwords that exactly match from being stored as the same hash value, preventing the whole database being scanned in one run if an attacker is executing a password guessing attack.&lt;/p&gt;\n&lt;p&gt;A cryptographic hash should not be used for password storage because user-selected passwords are not strong enough (i.e. do not usually contain enough entropy) and a password guessing attack could be completed in a relatively short time by an attacker with access to the hashes. This is why KDFs are used - these effectively &lt;a href=&quot;https://en.wikipedia.org/wiki/Key_stretching&quot; rel=&quot;noreferrer&quot;&gt;&quot;stretch the key&quot;&lt;/a&gt;, which means that every password guess an attacker makes causes multiple repetitions of the hash algorithm, for example 10,000 times, which causes the attacker to guess the password 10,000 times slower.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Session data - &quot;You are logged in as Spiderman69&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Once the server has verified the login and password against your user database and found a match, the system needs a way to remember that the browser has been authenticated. This fact should only ever be stored server side in the session data.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If you are unfamiliar with session data, here&apos;s how it works: A single randomly-generated string is stored in an expiring cookie and used to reference a collection of data - the session data - which is stored on the server. If you are using an MVC framework, this is undoubtedly handled already.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If at all possible, make sure the session cookie has the secure and HTTP Only flags set when sent to the browser. The HttpOnly flag provides some protection against the cookie being read through XSS attack. The secure flag ensures that the cookie is only sent back via HTTPS, and therefore protects against network sniffing attacks. The value of the cookie should not be predictable. Where a cookie referencing a non-existent session is presented, its value should be replaced immediately to prevent &lt;a href=&quot;https://owasp.org/www-community/attacks/Session_fixation&quot; rel=&quot;noreferrer&quot;&gt;session fixation&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Session state can also be maintained on the client side. This is achieved by using techniques like JWT (JSON Web Token).&lt;/p&gt;\n&lt;h2&gt;PART II: How To Remain Logged In - The Infamous &quot;Remember Me&quot; Checkbox&lt;/h2&gt;\n&lt;p&gt;Persistent Login Cookies (&quot;remember me&quot; functionality) are a danger zone; on the one hand, they are entirely as safe as conventional logins when users understand how to handle them; and on the other hand, they are an enormous security risk in the hands of careless users, who may use them on public computers and forget to log out, and who may not know what browser cookies are or how to delete them.&lt;/p&gt;\n&lt;p&gt;Personally, I like persistent logins for the websites I visit on a regular basis, but I know how to handle them safely. If you are positive that your users know the same, you can use persistent logins with a clean conscience. If not - well, then you may subscribe to the philosophy that users who are careless with their login credentials brought it upon themselves if they get hacked. It&apos;s not like we go to our user&apos;s houses and tear off all those facepalm-inducing Post-It notes with passwords they have lined up on the edge of their monitors, either.&lt;/p&gt;\n&lt;p&gt;Of course, some systems can&apos;t afford to have &lt;em&gt;any&lt;/em&gt; accounts hacked; for such systems, there is no way you can justify having persistent logins.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;If you DO decide to implement persistent login cookies, this is how you do it:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;First, take some time to read &lt;a href=&quot;https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence&quot; rel=&quot;noreferrer&quot;&gt;Paragon Initiative&apos;s article&lt;/a&gt; on the subject. You&apos;ll need to get a bunch of elements right, and the article does a great job of explaining each.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And just to reiterate one of the most common pitfalls, &lt;strong&gt;DO NOT STORE THE PERSISTENT LOGIN COOKIE (TOKEN) IN YOUR DATABASE, ONLY A HASH OF IT!&lt;/strong&gt; The login token is Password Equivalent, so if an attacker got their hands on your database, they could use the tokens to log in to any account, just as if they were cleartext login-password combinations. Therefore, use hashing (according to &lt;a href=&quot;https://security.stackexchange.com/a/63438/5002&quot;&gt;https://security.stackexchange.com/a/63438/5002&lt;/a&gt; a weak hash will do just fine for this purpose) when storing persistent login tokens.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;PART III: Using Secret Questions&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Don&apos;t implement &apos;secret questions&apos;&lt;/strong&gt;. The &apos;secret questions&apos; feature is a security anti-pattern. Read the paper from link number 4 from the MUST-READ list. You can ask Sarah Palin about that one, after her Yahoo! email account got hacked during a previous presidential campaign because the answer to her security question was... &quot;Wasilla High School&quot;!&lt;/p&gt;\n&lt;p&gt;Even with user-specified questions, it is highly likely that most users will choose either:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A &apos;standard&apos; secret question like mother&apos;s maiden name or favorite pet&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A simple piece of trivia that anyone could lift from their blog, LinkedIn profile, or similar&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Any question that is easier to answer than guessing their password. Which, for any decent password, is every question you can imagine&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;In conclusion, security questions are inherently insecure in virtually all their forms and variations, and should not be employed in an authentication scheme for any reason.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The true reason why security questions even exist in the wild is that they conveniently save the cost of a few support calls from users who can&apos;t access their email to get to a reactivation code. This at the expense of security and Sarah Palin&apos;s reputation. Worth it? Probably not.&lt;/p&gt;\n&lt;h2&gt;PART IV: Forgotten Password Functionality&lt;/h2&gt;\n&lt;p&gt;I already mentioned why you should &lt;strong&gt;never use security questions&lt;/strong&gt; for handling forgotten/lost user passwords; it also goes without saying that you should never e-mail users their actual passwords. There are at least two more all-too-common pitfalls to avoid in this field:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t &lt;em&gt;reset&lt;/em&gt; a forgotten password to an autogenerated strong password - such passwords are notoriously hard to remember, which means the user must either change it or write it down - say, on a bright yellow Post-It on the edge of their monitor. Instead of setting a new password, just let users pick a new one right away - which is what they want to do anyway. (An exception to this might be if the users are universally using a password manager to store/manage passwords that would normally be impossible to remember without writing it down).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Always hash the lost password code/token in the database. &lt;em&gt;&lt;strong&gt;AGAIN&lt;/strong&gt;&lt;/em&gt;, this code is another example of a Password Equivalent, so it MUST be hashed in case an attacker got their hands on your database. When a lost password code is requested, send the plaintext code to the user&apos;s email address, then hash it, save the hash in your database -- and &lt;em&gt;throw away the original&lt;/em&gt;. Just like a password or a persistent login token.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;A final note: always make sure your interface for entering the &apos;lost password code&apos; is at least as secure as your login form itself, or an attacker will simply use this to gain access instead. Making sure you generate very long &apos;lost password codes&apos; (for example, 16 case-sensitive alphanumeric characters) is a good start, but consider adding the same throttling scheme that you do for the login form itself.&lt;/p&gt;\n&lt;h2&gt;PART V: Checking Password Strength&lt;/h2&gt;\n&lt;p&gt;First, you&apos;ll want to read this small article for a reality check: &lt;a href=&quot;http://www.whatsmypass.com/?p=415&quot; rel=&quot;noreferrer&quot;&gt;The 500 most common passwords&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Okay, so maybe the list isn&apos;t the &lt;em&gt;canonical&lt;/em&gt; list of most common passwords on &lt;em&gt;any&lt;/em&gt; system &lt;em&gt;anywhere ever&lt;/em&gt;, but it&apos;s a good indication of how poorly people will choose their passwords when there is no enforced policy in place. Plus, the list looks frighteningly close to home when you compare it to publicly available analyses of recently stolen passwords.&lt;/p&gt;\n&lt;p&gt;So: With no minimum password strength requirements, 2% of users use one of the top 20 most common passwords. Meaning: if an attacker gets just 20 attempts, 1 in 50 accounts on your website will be crackable.&lt;/p&gt;\n&lt;p&gt;Thwarting this requires calculating the entropy of a password and then applying a threshold.  The National Institute of Standards and Technology (NIST) &lt;a href=&quot;https://en.wikipedia.org/wiki/Password_strength#NIST_Special_Publication_800-63&quot; rel=&quot;noreferrer&quot;&gt;Special Publication 800-63&lt;/a&gt; has a set of very good suggestions.  That, when combined with a dictionary and keyboard layout analysis (for example, &apos;qwertyuiop&apos; is a bad password), can &lt;a href=&quot;https://cubicspot.blogspot.com/2012/01/how-to-calculate-password-strength-part.html&quot; rel=&quot;noreferrer&quot;&gt;reject 99% of all poorly selected passwords&lt;/a&gt; at a level of 18 bits of entropy.  Simply calculating password strength and &lt;a href=&quot;https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/&quot; rel=&quot;noreferrer&quot;&gt;showing a visual strength meter&lt;/a&gt; to a user is good, but insufficient.  Unless it is enforced, a lot of users will most likely ignore it.&lt;/p&gt;\n&lt;p&gt;And for a refreshing take on user-friendliness of high-entropy passwords, Randall Munroe&apos;s &lt;a href=&quot;https://xkcd.com/936/&quot; rel=&quot;noreferrer&quot;&gt;Password Strength xkcd&lt;/a&gt; is highly recommended.&lt;/p&gt;\n&lt;p&gt;Utilize Troy Hunt&apos;s &lt;a href=&quot;https://haveibeenpwned.com/API/&quot; rel=&quot;noreferrer&quot;&gt;Have I Been Pwned API&lt;/a&gt; to check users passwords against passwords compromised in public data breaches.&lt;/p&gt;\n&lt;h2&gt;PART VI: Much More - Or: Preventing Rapid-Fire Login Attempts&lt;/h2&gt;\n&lt;p&gt;First, have a look at the numbers: &lt;a href=&quot;https://www.lockdown.co.uk/?pg=combi&amp;amp;s=articles&quot; rel=&quot;noreferrer&quot;&gt;Password Recovery Speeds - How long will your password stand up&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you don&apos;t have the time to look through the tables in that link, here&apos;s the list of them:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It takes &lt;em&gt;virtually no time&lt;/em&gt; to crack a weak password, even if you&apos;re cracking it with an abacus&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It takes &lt;em&gt;virtually no time&lt;/em&gt; to crack an alphanumeric 9-character password if it is &lt;strong&gt;case insensitive&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It takes &lt;em&gt;virtually no time&lt;/em&gt; to crack an intricate, symbols-and-letters-and-numbers, upper-and-lowercase password if it is &lt;strong&gt;less than 8 characters long&lt;/strong&gt; (a desktop PC can search the entire keyspace up to 7 characters in a matter of days or even hours)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;It would, however, take an inordinate amount of time to crack even a 6-character password, &lt;em&gt;if you were limited to one attempt per second!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So what can we learn from these numbers? Well, lots, but we can focus on the most important part: the fact that preventing large numbers of rapid-fire successive login attempts (ie. the &lt;em&gt;brute force&lt;/em&gt; attack) really isn&apos;t that difficult. But preventing it &lt;em&gt;right&lt;/em&gt; isn&apos;t as easy as it seems.&lt;/p&gt;\n&lt;p&gt;Generally speaking, you have three choices that are all effective against brute-force attacks &lt;em&gt;(and dictionary attacks, but since you are already employing a strong passwords policy, they shouldn&apos;t be an issue)&lt;/em&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Present a &lt;strong&gt;CAPTCHA&lt;/strong&gt; after N failed attempts (annoying as hell and often ineffective -- but I&apos;m repeating myself here)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Locking accounts&lt;/strong&gt; and requiring email verification after N failed attempts (this is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot; rel=&quot;noreferrer&quot;&gt;DoS&lt;/a&gt; attack waiting to happen)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And finally, &lt;strong&gt;login throttling&lt;/strong&gt;: that is, setting a time delay between attempts after N failed attempts (yes, DoS attacks are still possible, but at least they are far less likely and a lot more complicated to pull off).&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Best practice #1:&lt;/strong&gt; A short time delay that increases with the number of failed attempts, like:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;1 failed attempt = no delay&lt;/li&gt;\n&lt;li&gt;2 failed attempts = 2 sec delay&lt;/li&gt;\n&lt;li&gt;3 failed attempts = 4 sec delay&lt;/li&gt;\n&lt;li&gt;4 failed attempts = 8 sec delay&lt;/li&gt;\n&lt;li&gt;5 failed attempts = 16 sec delay&lt;/li&gt;\n&lt;li&gt;etc.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;DoS attacking this scheme would be very impractical, since the resulting lockout time is slightly larger than the sum of the previous lockout times.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To clarify: The delay is &lt;em&gt;not&lt;/em&gt; a delay before returning the response to the browser. It is more like a timeout or refractory period during which login attempts to a specific account or from a specific IP address will not be accepted or evaluated at all. That is, correct credentials will not return in a successful login, and incorrect credentials will not trigger a delay increase.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Best practice #2:&lt;/strong&gt; A medium length time delay that goes into effect after N failed attempts, like:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;1-4 failed attempts = no delay&lt;/li&gt;\n&lt;li&gt;5 failed attempts = 15-30 min delay&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;DoS attacking this scheme would be quite impractical, but certainly doable. Also, it might be relevant to note that such a long delay can be very annoying for a legitimate user. Forgetful users will dislike you.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Best practice #3:&lt;/strong&gt; Combining the two approaches - either a fixed, short time delay that goes into effect after N failed attempts, like:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;1-4 failed attempts = no delay&lt;/li&gt;\n&lt;li&gt;5+ failed attempts = 20 sec delay&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Or, an increasing delay with a fixed upper bound, like:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;1 failed attempt = 5 sec delay&lt;/li&gt;\n&lt;li&gt;2 failed attempts = 15 sec delay&lt;/li&gt;\n&lt;li&gt;3+ failed attempts = 45 sec delay&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This final scheme was taken from the OWASP best-practices suggestions (link 1 from the MUST-READ list) and should be considered best practice, even if it is admittedly on the restrictive side.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;As a rule of thumb, however, I would say: the stronger your password policy is, the less you have to bug users with delays. If you require strong (case-sensitive alphanumerics + required numbers and symbols) 9+ character passwords, you could give the users 2-4 non-delayed password attempts before activating the throttling.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;DoS attacking this final login throttling scheme would be &lt;em&gt;&lt;strong&gt;very&lt;/strong&gt;&lt;/em&gt; impractical. And as a final touch, always allow persistent (cookie) logins (and/or a CAPTCHA-verified login form) to pass through, so legitimate users won&apos;t even be delayed &lt;em&gt;while the attack is in progress&lt;/em&gt;. That way, the very impractical DoS attack becomes an &lt;em&gt;extremely&lt;/em&gt; impractical attack.&lt;/p&gt;\n&lt;p&gt;Additionally, it makes sense to do more aggressive throttling on admin accounts, since those are the most attractive entry points&lt;/p&gt;\n&lt;h2&gt;PART VII: Distributed Brute Force Attacks&lt;/h2&gt;\n&lt;p&gt;Just as an aside, more advanced attackers will try to circumvent login throttling by &apos;spreading their activities&apos;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Distributing the attempts on a botnet to prevent IP address flagging&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Rather than picking one user and trying the 50.000 most common passwords (which they can&apos;t, because of our throttling), they will pick THE most common password and try it against 50.000 users instead. That way, not only do they get around maximum-attempts measures like CAPTCHAs and login throttling, their chance of success increases as well, since the number 1 most common password is far more likely than number 49.995&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Spacing the login requests for each user account, say, 30 seconds apart, to sneak under the radar&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Here, the best practice would be &lt;strong&gt;logging the number of failed logins, system-wide&lt;/strong&gt;, and using a running average of your site&apos;s bad-login frequency as the basis for an upper limit that you then impose on all users.&lt;/p&gt;\n&lt;p&gt;Too abstract? Let me rephrase:&lt;/p&gt;\n&lt;p&gt;Say your site has had an average of 120 bad logins per day over the past 3 months. Using that (running average), your system might set the global limit to 3 times that -- ie. 360 failed attempts over a 24 hour period. Then, if the total number of failed attempts across all accounts exceeds that number within one day (or even better, monitor the rate of acceleration and trigger on a calculated threshold), it activates system-wide login throttling - meaning short delays for ALL users (still, with the exception of cookie logins and/or backup CAPTCHA logins).&lt;/p&gt;\n&lt;p&gt;I also posted a question with &lt;a href=&quot;https://stackoverflow.com/questions/479233/what-is-the-best-distributed-brute-force-countermeasure&quot;&gt;more details and a really good discussion of how to avoid tricky pitfals&lt;/a&gt; in fending off distributed brute force attacks&lt;/p&gt;\n&lt;h2&gt;PART VIII: Two-Factor Authentication and Authentication Providers&lt;/h2&gt;\n&lt;p&gt;Credentials can be compromised, whether by exploits, passwords being written down and lost, laptops with keys being stolen, or users entering logins into phishing sites.  Logins can be further protected with two-factor authentication, which uses out-of-band factors such as single-use codes received from a phone call, SMS message, app, or dongle. Several providers offer two-factor authentication services.&lt;/p&gt;\n&lt;p&gt;Authentication can be completely delegated to a single-sign-on service, where another provider handles collecting credentials. This pushes the problem to a trusted third party. Google and Twitter both provide standards-based SSO services, while Facebook provides a similar proprietary solution.&lt;/p&gt;\n&lt;h2&gt;MUST-READ LINKS About Web Authentication&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Authentication_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;OWASP Guide To Authentication&lt;/a&gt; / &lt;a href=&quot;https://www.owasp.org/index.php/Authentication_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;OWASP Authentication Cheat Sheet&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/papers/webauth:sec10.pdf&quot; rel=&quot;noreferrer&quot;&gt;Dos and Donts of Client Authentication on the Web (very readable MIT research paper)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie#Drawbacks_of_cookies&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia: HTTP cookie&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://cups.cs.cmu.edu/soups/2008/proceedings/p13Rabkin.pdf&quot; rel=&quot;noreferrer&quot;&gt;Personal knowledge questions for fallback authentication: Security questions in the era of Facebook (very readable Berkeley research paper)&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h1&gt;Definitive Article&lt;/h1&gt;\n\n&lt;h3&gt;Sending credentials&lt;/h3&gt;\n\n&lt;p&gt;The only practical way to send credentials 100% securely is by using &lt;a href=&quot;http://en.wikipedia.org/wiki/SSL&quot; rel=&quot;noreferrer&quot;&gt;SSL&lt;/a&gt;. Using JavaScript to hash the password is not safe. Common pitfalls for client-side password hashing:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If the connection between the client and server is unencrypted, everything you do is &lt;a href=&quot;https://stackoverflow.com/questions/14907581/ssl-and-man-in-the-middle-misunderstanding&quot;&gt;vulnerable to man-in-the-middle attacks&lt;/a&gt;. An attacker could replace the incoming javascript to break the hashing or send all credentials to their server, they could listen to client responses and impersonate the users perfectly, etc. etc. SSL with trusted Certificate Authorities is designed to prevent MitM attacks.&lt;/li&gt;\n&lt;li&gt;The hashed password received by the server is &lt;a href=&quot;https://security.stackexchange.com/questions/45254/owasp-recommendation-on-client-side-password-hashing&quot;&gt;less secure&lt;/a&gt; if you don&apos;t do additional, redundant work on the server.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There&apos;s another secure method called &lt;strong&gt;SRP&lt;/strong&gt;, but it&apos;s patented (although it is &lt;a href=&quot;http://srp.stanford.edu/license.txt&quot; rel=&quot;noreferrer&quot;&gt;freely licensed&lt;/a&gt;) and there are few good implementations available.&lt;/p&gt;\n\n&lt;h3&gt;Storing passwords&lt;/h3&gt;\n\n&lt;p&gt;Don&apos;t ever store passwords as plaintext in the database. Not even if you don&apos;t care about the security of your own site. Assume that some of your users will reuse the password of their online bank account. So, store the hashed password, and throw away the original. And make sure the password doesn&apos;t show up in access logs or application logs. OWASP &lt;a href=&quot;https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet#Impose_infeasible_verification_on_attacker&quot; rel=&quot;noreferrer&quot;&gt;recommends the use of Argon2&lt;/a&gt; as your first choice for new applications. If this is not available, PBKDF2 or scrypt should be used instead. And finally if none of the above are available, use bcrypt.&lt;/p&gt;\n\n&lt;p&gt;Hashes by themselves are also insecure. For instance, identical passwords mean identical hashes--this makes hash lookup tables an effective way of cracking lots of passwords at once. Instead, store the &lt;strong&gt;salted&lt;/strong&gt; hash. A salt is a string appended to the password prior to hashing - use a different (random) salt per user. The salt is a public value, so you can store them with the hash in the database. See &lt;a href=&quot;http://www.codeproject.com/Articles/704865/Salted-Password-Hashing-Doing-it-Right&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; for more on this.&lt;/p&gt;\n\n&lt;p&gt;This means that you can&apos;t send the user their forgotten passwords (because you only have the hash). Don&apos;t reset the user&apos;s password unless you have authenticated the user (users must prove that they are able to read emails sent to the stored (and validated) email address.)&lt;/p&gt;\n\n&lt;h3&gt;Security questions&lt;/h3&gt;\n\n&lt;p&gt;Security questions are insecure - avoid using them. Why? Anything a security question does, a password does better. Read &lt;strong&gt;&lt;em&gt;PART III: Using Secret Questions&lt;/em&gt;&lt;/strong&gt; in &lt;a href=&quot;http://srp.stanford.edu/license.txt&quot; rel=&quot;noreferrer&quot;&gt;@Jens Roland answer&lt;/a&gt; here in this wiki.&lt;/p&gt;\n\n&lt;h3&gt;Session cookies&lt;/h3&gt;\n\n&lt;p&gt;After the user logs in, the server sends the user a session cookie. The server can retrieve the username or id from the cookie, but nobody else can generate such a cookie (TODO explain mechanisms).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Session_hijacking&quot; rel=&quot;noreferrer&quot;&gt;Cookies can be hijacked&lt;/a&gt;: they are only as secure as the rest of the client&apos;s machine and other communications. They can be read from disk, sniffed in network traffic, lifted by a cross-site scripting attack, phished from a poisoned DNS so the client sends their cookies to the wrong servers. Don&apos;t send persistent cookies. Cookies should expire at the end of the client session (browser close or leaving your domain).&lt;/p&gt;\n\n&lt;p&gt;If you want to autologin your users, you can set a persistent cookie, but it should be distinct from a full-session cookie. You can set an additional flag that the user has auto-logged in, and needs to log in for real for sensitive operations. This is popular with shopping sites that want to provide you with a seamless, personalized shopping experience but still protect your financial details. For example, when you return to visit Amazon, they show you a page that looks like you&apos;re logged in, but when you go to place an order (or change your shipping address, credit card etc.), they ask you to confirm your password.&lt;/p&gt;\n\n&lt;p&gt;Financial websites such as banks and credit cards, on the other hand, only have sensitive data and should not allow auto-login or a low-security mode.&lt;/p&gt;\n\n&lt;h3&gt;List of external resources&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/papers/webauth:sec10.pdf&quot; rel=&quot;noreferrer&quot;&gt;Dos and Don&apos;ts of Client Authentication on the Web (PDF)&lt;/a&gt;&lt;br&gt;\n21 page academic article with many great tips.  &lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=205572&quot; rel=&quot;noreferrer&quot;&gt;Ask YC: Best Practices for User Authentication&lt;/a&gt;&lt;br&gt;\nForum discussion on the subject  &lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.codinghorror.com/blog/archives/000953.html&quot; rel=&quot;noreferrer&quot;&gt;You&apos;re Probably Storing Passwords Incorrectly&lt;/a&gt;&lt;br&gt;\nIntroductory article about storing passwords&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=55660&quot; rel=&quot;noreferrer&quot;&gt;Discussion: Coding Horror: You&apos;re Probably Storing Passwords Incorrectly&lt;/a&gt;&lt;br&gt;\nForum discussion about a Coding Horror article.&lt;/li&gt;\n&lt;li&gt;Never store passwords in a database!&lt;br&gt;\nAnother warning about storing passwords in the database.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Password_cracking&quot; rel=&quot;noreferrer&quot;&gt;Password cracking&lt;/a&gt;&lt;br&gt;\nWikipedia article on weaknesses of several password hashing schemes.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.securityfocus.com/blogs/262&quot; rel=&quot;noreferrer&quot;&gt;Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes&lt;/a&gt;&lt;br&gt;\nDiscussion about rainbow tables and how to defend against them, and against other threads. Includes extensive discussion.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;First, a strong caveat that this answer is not the best fit for this exact question. It should definitely not be the top answer!&lt;/p&gt;\n\n&lt;p&gt;I will go ahead and mention Mozillas proposed &lt;a href=&quot;https://browserid.org/&quot; rel=&quot;noreferrer&quot;&gt;BrowserID&lt;/a&gt; (or perhaps more precisely, the &lt;a href=&quot;https://wiki.mozilla.org/Identity/Verified_Email_Protocol/Latest&quot; rel=&quot;noreferrer&quot;&gt;Verified Email Protocol&lt;/a&gt;) in the spirit of finding an upgrade path to better approaches to authentication in the future.&lt;/p&gt;\n\n&lt;p&gt;Ill summarize it this way:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Mozilla is a nonprofit with &lt;a href=&quot;http://www.mozilla.org/about/manifesto.en.html&quot; rel=&quot;noreferrer&quot;&gt;values&lt;/a&gt; that align well with finding good solutions to this problem.&lt;/li&gt;\n&lt;li&gt;The reality today is that most websites use form-based authentication&lt;/li&gt;\n&lt;li&gt;Form-based authentication has a big drawback, which is an increased risk of &lt;a href=&quot;http://en.wikipedia.org/wiki/Phishing&quot; rel=&quot;noreferrer&quot;&gt;phishing&lt;/a&gt;. Users are asked to enter sensitive information into an area controlled by a remote entity, rather than an area controlled by their User Agent (browser).&lt;/li&gt;\n&lt;li&gt;Since browsers are implicitly trusted (the whole idea of a User Agent is to act on behalf of the User), they can help improve this situation.&lt;/li&gt;\n&lt;li&gt;The primary force holding back progress here is &lt;a href=&quot;http://www.w3.org/2011/identity-ws/papers/idbrowser2011_submission_10.pdf&quot; rel=&quot;noreferrer&quot;&gt;deployment deadlock&lt;/a&gt;. Solutions must be decomposed into steps which provide some incremental benefit on their own.&lt;/li&gt;\n&lt;li&gt;The simplest decentralized method for expressing an identity that is built into the internet infrastructure is the domain name.&lt;/li&gt;\n&lt;li&gt;As a second level of expressing identity, each domain manages its own set of accounts.&lt;/li&gt;\n&lt;li&gt;The form account&lt;code&gt;@&lt;/code&gt;domain is concise and supported by a wide range of protocols and URI schemes. Such an identifier is, of course, most universally recognized as an email address.&lt;/li&gt;\n&lt;li&gt;Email providers are already the de-facto primary identity providers online. Current password reset flows usually let you take control of an account if you can prove that you control that accounts associated email address.&lt;/li&gt;\n&lt;li&gt;The Verified Email Protocol was proposed to provide a secure method, based on public key cryptography, for streamlining the process of proving to domain B that you have an account on domain A.&lt;/li&gt;\n&lt;li&gt;For browsers that dont support the Verified Email Protocol (currently all of them), Mozilla provides a shim which implements the protocol in client-side JavaScript code.&lt;/li&gt;\n&lt;li&gt;For email services that dont support the Verified Email Protocol, the protocol allows third parties to act as a trusted intermediary, asserting that theyve verified a users ownership of an account. It is not desirable to have a large number of such third parties; this capability is intended only to allow an upgrade path, and it is much preferred that email services provide these assertions themselves.&lt;/li&gt;\n&lt;li&gt;Mozilla offers their own service to act like such a trusted third party. Service Providers (that is, Relying Parties) implementing the Verified Email Protocol may choose to trust Mozilla&apos;s assertions or not. Mozillas service verifies users account ownership using the conventional means of sending an email with a confirmation link.&lt;/li&gt;\n&lt;li&gt;Service Providers may, of course, offer this protocol as an option in addition to any other method(s) of authentication they might wish to offer.&lt;/li&gt;\n&lt;li&gt;A big user interface benefit being sought here is the identity selector. When a user visits a site and chooses to authenticate, their browser shows them a selection of email addresses (personal, work, political activism, etc.) they may use to identify themselves to the site.&lt;/li&gt;\n&lt;li&gt;Another big user interface benefit being sought as part of this effort is &lt;a href=&quot;https://wiki.mozilla.org/Identity/Verified_Email_Protocol/Latest-Session&quot; rel=&quot;noreferrer&quot;&gt;helping the browser know more about the users session&lt;/a&gt;  who theyre signed in as currently, primarily  so it may display that in the browser chrome.&lt;/li&gt;\n&lt;li&gt;Because of the distributed nature of this system, it avoids lock-in to major sites like Facebook, Twitter, Google, etc. Any individual can own their own domain and therefore act as their own identity provider.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This is not strictly form-based authentication for websites. But it is an effort to transition from the current norm of form-based authentication to something more secure: browser-supported authentication.&lt;/p&gt;\n    ","\n&lt;p&gt;I just thought I&apos;d share this solution that I found to be working just fine.&lt;/p&gt;\n&lt;p&gt;I call it the &lt;strong&gt;Dummy Field&lt;/strong&gt; (though I haven&apos;t invented this so don&apos;t credit me). Others know this as a honey pot.&lt;/p&gt;\n&lt;p&gt;In short: you just have to insert this into your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and check for it to be empty at when validating:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&quot;text&quot; name=&quot;email&quot; style=&quot;display:none&quot; /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The trick is to fool a bot into thinking it has to insert data into a required field, that&apos;s why I named the input &quot;email&quot;. If you already have a field called email that you&apos;re using you should try naming the dummy field something else like &quot;company&quot;, &quot;phone&quot; or &quot;emailaddress&quot;. Just pick something you know you don&apos;t need and what sounds like something people would normally find logical to fill in into a web form. Now hide the &lt;code&gt;input&lt;/code&gt; field using CSS or JavaScript/jQuery - whatever fits you best - just &lt;strong&gt;don&apos;t&lt;/strong&gt; set the input &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;hidden&lt;/code&gt; or else the bot won&apos;t fall for it.&lt;/p&gt;\n&lt;p&gt;When you are validating the form (either client or server side) check if your dummy field has been filled to determine if it was sent by a human or a bot.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In case of a human:&lt;/strong&gt;\nThe user will not see the dummy field (in my case named &quot;email&quot;) and will not attempt to fill it. So the value of the dummy field should still be empty when the form has been sent.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In case of a bot:&lt;/strong&gt; The bot will see a field whose type is &lt;code&gt;text&lt;/code&gt; and a name &lt;code&gt;email&lt;/code&gt; (or whatever it is you called it) and will logically attempt to fill it with appropriate data. It doesn&apos;t care if you styled the input form with some fancy CSS, web-developers do it all the time. Whatever the value in the dummy field is, we don&apos;t care as long as it&apos;s larger than &lt;code&gt;0&lt;/code&gt; characters.&lt;/p&gt;\n&lt;p&gt;I used this method on a guestbook in combination with &lt;a href=&quot;http://en.wikipedia.org/wiki/CAPTCHA&quot; rel=&quot;nofollow noreferrer&quot;&gt;CAPTCHA&lt;/a&gt;, and I haven&apos;t seen a single spam post since. I had used a CAPTCHA-only solution before, but eventually, it resulted in about five spam posts every hour. Adding the dummy field in the form has stopped (at least until now) all the spam from appearing.&lt;/p&gt;\n&lt;p&gt;I believe this can also be used just fine with a login/authentication form.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Of course this method is not 100% foolproof. Bots can be programmed to ignore input fields with the style &lt;code&gt;display:none&lt;/code&gt; applied to it. You also have to think about people who use some form of auto-completion (like most browsers have built-in!) to auto-fill all form fields for them. They might just as well pick up a dummy field.&lt;/p&gt;\n&lt;p&gt;You can also vary this up a little by leaving the dummy field visible but outside the boundaries of the screen, but this is totally up to you.&lt;/p&gt;\n&lt;p&gt;Be creative!&lt;/p&gt;\n    ","\n&lt;p&gt;I do not think the above answer is &quot;wrong&quot; but there are large areas of authentication that are not touched upon (or rather the emphasis is on &quot;how to implement cookie sessions&quot;, not on &quot;what options are available and what are the trade-offs&quot;.&lt;/p&gt;\n\n&lt;p&gt;My suggested edits/answers are&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The problem lies more in account setup than in password checking.&lt;/li&gt;\n&lt;li&gt;The use of two-factor authentication is much more secure than more clever means of password encryption&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Do NOT try to implement your own login form or database storage of passwords, unless \nthe data being stored is valueless at account creation and self-generated (that is, web 2.0 style like Facebook, &lt;a href=&quot;http://en.wikipedia.org/wiki/Flickr&quot; rel=&quot;noreferrer&quot;&gt;Flickr&lt;/a&gt;, etc.)&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Digest Authentication is a standards-based approach supported in all major browsers and servers, that will not send a password even over a secure channel.&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This avoids any need to have &quot;sessions&quot; or cookies as the browser itself will re-encrypt the communication each time. It is the most &quot;lightweight&quot; development approach.&lt;/p&gt;\n\n&lt;p&gt;However, I do not recommend this, except for public, low-value services. This is an issue with some of the other answers above - do not try an re-implement server-side authentication mechanisms - this problem has been solved and is supported by most major browsers. Do not use cookies. Do not store anything in your own hand-rolled database. Just ask, per request, if the request is authenticated. Everything else should be supported by configuration and third-party trusted software.&lt;/p&gt;\n\n&lt;p&gt;So ...&lt;/p&gt;\n\n&lt;p&gt;First, we are confusing the initial creation of an account (with a password) with the re-checking of the password subsequently. If I am Flickr and creating your site for the first time, the new user has access to zero value (blank web space). I truly do not care if the person creating the account is lying about their name. If I am creating an account of the hospital intranet/extranet, the value lies in all the medical records, and so I &lt;em&gt;do&lt;/em&gt; care about the identity (*) of the account creator.&lt;/p&gt;\n\n&lt;p&gt;This is the very very hard part. The &lt;em&gt;only&lt;/em&gt; decent solution is a web of trust. For example, you join the hospital as a doctor. You create a web page hosted somewhere with your photo, your passport number, and a public key, and hash them all with the private key. You then visit the hospital and the system administrator looks at your passport, sees if the photo matches you, and then hashes the web page/photo hash with the hospital private key. From now on we can securely exchange keys and tokens. As can anyone who trusts the hospital (there is the secret sauce BTW). The system administrator can also give you an &lt;a href=&quot;http://en.wikipedia.org/wiki/RSA_%28security_firm%29&quot; rel=&quot;noreferrer&quot;&gt;RSA&lt;/a&gt; dongle or other two-factor authentication.&lt;/p&gt;\n\n&lt;p&gt;But this is a &lt;em&gt;lot&lt;/em&gt; of a hassle, and not very web 2.0. However, it is the only secure way to create new accounts that have access to valuable information that is not self-created.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Kerberos and SPNEGO - single sign-on mechanisms with a trusted third party - basically the user verifies against a trusted third party. (NB this is not in any way the not to be trusted &lt;a href=&quot;http://en.wikipedia.org/wiki/OAuth&quot; rel=&quot;noreferrer&quot;&gt;OAuth&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol&quot; rel=&quot;noreferrer&quot;&gt;SRP&lt;/a&gt; - sort of clever password authentication without a trusted third party. But here we are getting into the realms of &quot;it&apos;s safer to use two-factor authentication, even if that&apos;s costlier&quot;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SSL&quot; rel=&quot;noreferrer&quot;&gt;SSL&lt;/a&gt; client side - give the clients a public key certificate (support in all major browsers - but raises questions over client machine security).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In the end, it&apos;s a tradeoff - what is the cost of a security breach vs the cost of implementing more secure approaches. One day, we may see a proper &lt;a href=&quot;http://en.wikipedia.org/wiki/Public-key_infrastructure&quot; rel=&quot;noreferrer&quot;&gt;PKI&lt;/a&gt; widely accepted and so no more own rolled authentication forms and databases. One day...&lt;/p&gt;\n    ","\n&lt;p&gt;When hashing, don&apos;t use fast hash algorithms such as MD5 (many hardware implementations exist).  Use something like SHA-512.  For passwords, slower hashes are better.&lt;/p&gt;\n\n&lt;p&gt;The faster you can create hashes, the faster any brute force checker can work. Slower hashes will therefore slow down brute forcing. A slow hash algorithm will make brute forcing impractical for longer passwords (8 digits +)&lt;/p&gt;\n    ","\n&lt;p&gt;My favourite rule in regards to authentication systems: use passphrases, not passwords. Easy to remember, hard to crack.\nMore info: &lt;a href=&quot;http://www.codinghorror.com/blog/2005/07/passwords-vs-pass-phrases.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Coding Horror: Passwords vs. Pass Phrases&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d like to add one suggestion I&apos;ve used, based on defense in depth. You don&apos;t need to have the same auth&amp;amp;auth system for admins as regular users. You can have a separate login form on a separate url executing separate code for requests that will grant high privileges. This one can make choices that would be a total pain to regular users. One such that I&apos;ve used is to actually scramble the login URL for admin access and email the admin the new URL. Stops any brute force attack right away as your new URL can be arbitrarily difficult (very long random string) but your admin user&apos;s only inconvenience is following a link in their email. The attacker no longer knows where to even POST to. &lt;/p&gt;\n    ","\n&lt;p&gt;I dont&apos;t know whether it was best to answer this as an answer or as a comment. I opted for the first option.&lt;/p&gt;\n\n&lt;p&gt;Regarding the poing &lt;strong&gt;PART IV: Forgotten Password Functionality&lt;/strong&gt; in the first answer, I would make a point about Timing Attacks. &lt;/p&gt;\n\n&lt;p&gt;In the &lt;strong&gt;Remember your password&lt;/strong&gt; forms, an attacker could potentially check a full list of emails and detect which are registered to the system (see link below). &lt;/p&gt;\n\n&lt;p&gt;Regarding the Forgotten Password Form, I would add that it is a good idea to equal times between successful and unsucessful queries with some delay function. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://crypto.stanford.edu/~dabo/papers/webtiming.pdf&quot;&gt;https://crypto.stanford.edu/~dabo/papers/webtiming.pdf&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would like to add one very important comment: -&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&quot;In a &lt;em&gt;corporate,&lt;/em&gt; &lt;strong&gt;intra-&lt;/strong&gt; net setting,&quot; most if not all of the foregoing might not apply!&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Many corporations deploy &quot;internal use only&quot; websites which are, effectively, &quot;corporate applications&quot; that happen to have been implemented through URLs. These URLs can &lt;em&gt;(supposedly ...)&lt;/em&gt; only be resolved within &quot;the company&apos;s internal network.&quot; &lt;em&gt;(Which network magically includes all VPN-connected &apos;road warriors.&apos;)&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;When a user is dutifully-connected to the aforesaid network, their identity &lt;em&gt;(&quot;authentication&quot;)&lt;/em&gt; is [already ...] &quot;conclusively known,&quot; as is their permission &lt;em&gt;(&quot;authorization&quot;)&lt;/em&gt; to do certain things ... such as ... &quot;to access this website.&quot;&lt;/p&gt;\n\n&lt;p&gt;This &quot;authentication + authorization&quot; service can be provided by several different technologies, such as LDAP &lt;em&gt;(Microsoft OpenDirectory)&lt;/em&gt;, or Kerberos.&lt;/p&gt;\n\n&lt;p&gt;From your point-of-view, you simply know this: that &lt;em&gt;anyone&lt;/em&gt; who legitimately winds-up at your website &lt;em&gt;must&lt;/em&gt; be accompanied by [an environment-variable magically containing ...] a &quot;token.&quot; (&lt;em&gt;i.e.&lt;/em&gt; The absence of such a token must be immediate grounds for &lt;code&gt;404 Not Found&lt;/code&gt;.)&lt;/p&gt;\n\n&lt;p&gt;The token&apos;s value makes no sense to you, &lt;em&gt;but,&lt;/em&gt; should the need arise, &quot;appropriate means exist&quot; by which your website can &quot;[authoritatively] ask someone who knows (LDAP... etc.)&quot; about any &lt;em&gt;and every(!)&lt;/em&gt; question that you may have. In other words, you do &lt;strong&gt;not&lt;/strong&gt; avail yourself of &lt;em&gt;any&lt;/em&gt; &quot;home-grown logic.&quot; Instead, you inquire of The Authority and implicitly trust its verdict.&lt;/p&gt;\n\n&lt;p&gt;Uh huh ... it&apos;s &lt;em&gt;quite&lt;/em&gt; a mental-switch from the &quot;wild-and-wooly Internet.&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;http://openid.net/connect/&quot; rel=&quot;noreferrer&quot;&gt;OpenID Connect&lt;/a&gt; or &lt;a href=&quot;https://kantarainitiative.org/confluence/display/uma/Home&quot; rel=&quot;noreferrer&quot;&gt;User-Managed Access&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;As nothing is more efficient than not doing it at all.&lt;/p&gt;\n    "]},"randomTags":[{"name":"jvm-hotspot","slug":"jvm-hotspot"},{"name":"keyword","slug":"keyword"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"static-files","slug":"static-files"},{"name":"scriptlet","slug":"scriptlet"},{"name":"sleep","slug":"sleep"},{"name":"datetime","slug":"datetime"},{"name":"multithreading","slug":"multithreading"},{"name":"arrow-functions","slug":"arrow-functions"},{"name":"cartesian-product","slug":"cartesian-product"},{"name":"branch-prediction","slug":"branch-prediction"},{"name":"random","slug":"random"},{"name":"turbo-c++","slug":"turbo-c++"},{"name":"hashcode","slug":"hashcode"},{"name":"thread-safety","slug":"thread-safety"},{"name":"recursion","slug":"recursion"},{"name":"selenium","slug":"selenium"},{"name":"assembly","slug":"assembly"},{"name":"microbenchmark","slug":"microbenchmark"},{"name":"hierarchical-data","slug":"hierarchical-data"}]},"__N_SSG":true}