{"pageProps":{"data":{"count":1,"rows":[{"id":42,"title":"Asking the user for input until they give a valid response","slug":"asking-the-user-for-input-until-they-give-a-valid-response-1657384376162","postType":"QUESTION","createdAt":"2022-07-09T16:32:56.000Z","updatedAt":"2022-07-09T16:32:56.000Z","tags":[{"id":153,"name":"input","slug":"input","createdAt":"2022-07-09T16:32:56.000Z","updatedAt":"2022-07-09T16:32:56.000Z","Questions_Tags":{"questionId":42,"tagId":153}}]}]},"slug":"input","page":1,"answers":{"42":["\n&lt;p&gt;The simplest way to accomplish this is to put the &lt;code&gt;input&lt;/code&gt; method in a while loop. Use &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; when you get bad input, and &lt;code&gt;break&lt;/code&gt; out of the loop when you&apos;re satisfied.&lt;/p&gt;\n\n&lt;h2&gt;When Your Input Might Raise an Exception&lt;/h2&gt;\n\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;&lt;/a&gt; to detect when the user enters data that can&apos;t be parsed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Note: Python 2.x users should use raw_input, the equivalent of 3.x&apos;s input&lt;/span&gt;\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, I didn&apos;t understand that.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;#better try again... Return to the start of the loop&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;#age was successfully parsed!&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;#we&apos;re ready to exit the loop.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Implementing Your Own Validation Rules&lt;/h2&gt;\n\n&lt;p&gt;If you want to reject values that Python can successfully parse, you can add your own validation logic.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    data = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a loud message (must be all caps): &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; data.isupper():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, your response was not loud enough.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;#we&apos;re happy with the value given.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;#we&apos;re ready to exit the loop.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    data = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pick an answer from A to D:&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; data.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not an appropriate choice.&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Combining Exception Handling and Custom Validation&lt;/h2&gt;\n\n&lt;p&gt;Both of the above techniques can be combined into one loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, I didn&apos;t understand that.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, your response must not be negative.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;#age was successfully parsed, and we&apos;re happy with its value.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;#we&apos;re ready to exit the loop.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Encapsulating it All in a Function&lt;/h2&gt;\n\n&lt;p&gt;If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don&apos;t have to retype it every time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_non_negative_int&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prompt&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            value = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(prompt))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, I didn&apos;t understand that.&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; value &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, your response must not be negative.&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value\n\nage = get_non_negative_int(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;)\nkids = get_non_negative_int(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter the number of children you have: &quot;&lt;/span&gt;)\nsalary = get_non_negative_int(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your yearly earnings, in dollars: &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Putting It All Together&lt;/h3&gt;\n\n&lt;p&gt;You can extend this idea to make a very generic input function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sanitised_input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prompt, type_=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, min_=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, max_=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, range_=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; min_ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; max_ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; max_ &amp;lt; min_:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValueError(&lt;span class=&quot;hljs-string&quot;&gt;&quot;min_ must be less than or equal to max_.&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        ui = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(prompt)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; type_ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n                ui = type_(ui)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Input type must be {0}.&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(type_.__name__))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; max_ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ui &amp;gt; max_:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Input must be less than or equal to {0}.&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(max_))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; min_ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ui &amp;lt; min_:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Input must be greater than or equal to {0}.&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(min_))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; range_ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ui &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range_:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(range_, &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;):\n                template = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Input must be between {0.start} and {0.stop}.&quot;&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(template.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(range_))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                template = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Input must be {0}.&quot;&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(range_) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(template.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(*range_))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                    expected = &lt;span class=&quot;hljs-string&quot;&gt;&quot; or &quot;&lt;/span&gt;.join((\n                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;.join(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range_[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]),\n                        &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(range_[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n                    ))\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(template.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(expected))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ui\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With usage such as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age = sanitised_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your age: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;)\nanswer = sanitised_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your answer: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.lower, range_=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Common Pitfalls, and Why you Should Avoid Them&lt;/h2&gt;\n\n&lt;h3&gt;The Redundant Use of Redundant &lt;code&gt;input&lt;/code&gt; Statements&lt;/h3&gt;\n\n&lt;p&gt;This method works but is generally considered poor style:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a loud message (must be all caps): &quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; data.isupper():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, your response was not loud enough.&quot;&lt;/span&gt;)\n    data = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a loud message (must be all caps): &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It might look attractive initially because it&apos;s shorter than the &lt;code&gt;while True&lt;/code&gt; method, but it violates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; rel=&quot;noreferrer&quot;&gt;Don&apos;t Repeat Yourself&lt;/a&gt; principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing &lt;code&gt;input&lt;/code&gt; to &lt;code&gt;raw_input&lt;/code&gt;, but accidentally change only the first &lt;code&gt;input&lt;/code&gt; above? It&apos;s a &lt;code&gt;SyntaxError&lt;/code&gt; just waiting to happen.&lt;/p&gt;\n\n&lt;h3&gt;Recursion Will Blow Your Stack&lt;/h3&gt;\n\n&lt;p&gt;If you&apos;ve just learned about recursion, you might be tempted to use it in &lt;code&gt;get_non_negative_int&lt;/code&gt; so you can dispose of the while loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_non_negative_int&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prompt&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        value = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(prompt))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, I didn&apos;t understand that.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_non_negative_int(prompt)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; value &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, your response must not be negative.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_non_negative_int(prompt)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a &lt;code&gt;RuntimeError: maximum recursion depth exceeded&lt;/code&gt;. You may think &quot;no fool would make 1000 mistakes in a row&quot;, but you&apos;re underestimating the ingenuity of fools!&lt;/p&gt;\n    ","\n&lt;p&gt;Why would you do a &lt;code&gt;while True&lt;/code&gt; and then break out of this loop while you can also just put your requirements in the while statement since all you want is to stop once you have the age?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; age &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    input_value = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# try and convert the string input to a number&lt;/span&gt;\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(input_value)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# tell the user off&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{input} is not a number, please enter a number only&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;=input_value))\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would result in the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Please enter your age: *potato*\npotato &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; a number, please enter a number only\nPlease enter your age: *&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*\nYou are &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; able to vote &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the United States.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this will work since age will never have a value that will not make sense and the code follows the logic of your &quot;business process&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;f=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; age: (age.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(age)&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Can vote&quot;&lt;/span&gt; ) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cannot vote&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; \\\nf(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;invalid input. Try again\\nPlease enter your age: &quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;P.S. This code is for python 3.x.&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;a href=&quot;https://docs.python.org/howto/functional.html&quot; rel=&quot;noreferrer&quot;&gt;Functional approach&lt;/a&gt; or &quot;&lt;em&gt;look mum no loops!&lt;/em&gt;&quot;:&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a number! Try again: &quot;&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isdigit, replies))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a number:  a\nNot a number! Try again:  b\nNot a number! Try again:  1\n1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or if you want to have a &quot;bad input&quot; message separated from an input prompt as in other answers:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;prompt_msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;\nbad_input_msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, I didn&apos;t understand that.&quot;&lt;/span&gt;\nprompts = chain([prompt_msg], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;.join([bad_input_msg, prompt_msg])))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isdigit, replies))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a number:  a\nSorry, I didn&apos;t understand that.\nEnter a number:  b\nSorry, I didn&apos;t understand that.\nEnter a number:  1\n1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;How does it work?&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;prompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a number! Try again: &quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\nThis combination of &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.chain&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;itertools.chain&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;itertools.repeat&lt;/code&gt;&lt;/a&gt; will create an iterator\nwhich will yield strings &lt;code&gt;&quot;Enter a number: &quot;&lt;/code&gt; once, and &lt;code&gt;&quot;Not a number! Try again: &quot;&lt;/code&gt; an infinite number of times:\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prompt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; prompts:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(prompt)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a number: \nNot a number! Try again: \nNot a number! Try again: \nNot a number! Try again: \n# ... and so on\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;replies = map(input, prompts)&lt;/code&gt; - here &lt;a href=&quot;https://docs.python.org/howto/functional.html#built-in-functions&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; will apply all the &lt;code&gt;prompts&lt;/code&gt; strings from the previous step to the &lt;a href=&quot;https://docs.python.org/library/functions.html#input&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; function. E.g.:\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; reply &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; replies:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(reply)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a number:  a\na\nNot a number! Try again:  1\n1\nNot a number! Try again:  it doesn&apos;t care now\nit doesn&apos;t care now\n# and so on...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;We use &lt;a href=&quot;https://docs.python.org/library/functions.html#filter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isdigit&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;str.isdigit&lt;/code&gt;&lt;/a&gt; to filter out those strings that contain only digits:\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;only_digits = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isdigit, replies)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; reply &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; only_digits:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(reply)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a number:  a\nNot a number! Try again:  1\n1\nNot a number! Try again:  2\n2\nNot a number! Try again:  b\nNot a number! Try again: # and so on...\n&lt;/code&gt;&lt;/pre&gt;\nAnd to get only the first digits-only string we use &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;Other validation rules:&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;String methods:&lt;/strong&gt; Of course you can use other string methods like &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isalpha&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;str.isalpha&lt;/code&gt;&lt;/a&gt; to get only alphabetic strings, or &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isupper&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;str.isupper&lt;/code&gt;&lt;/a&gt; to get only uppercase. See &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#string-methods&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; for the full list.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Membership testing:&lt;/strong&gt;&lt;br&gt;\nThere are several different ways to perform it. One of them is by using &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__contains__&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\nfruits = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;peach&apos;&lt;/span&gt;}\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a fruit: &quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I don&apos;t know this one! Try again: &quot;&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(fruits.__contains__, replies))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a fruit:  1\nI don&apos;t know this one! Try again:  foo\nI don&apos;t know this one! Try again:  apple\napple\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Numbers comparison:&lt;/strong&gt;&lt;br&gt;\nThere are useful comparison methods which we can use here. For example, for &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__lt__&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__lt__&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a positive number:&quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I need a positive number! Try again:&quot;&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nnumeric_strings = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isnumeric, replies)\nnumbers = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, numeric_strings)\nis_positive = (&lt;span class=&quot;hljs-number&quot;&gt;0.&lt;/span&gt;).__lt__\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(is_positive, numbers))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a positive number: a\nI need a positive number! Try again: -5\nI need a positive number! Try again: 0\nI need a positive number! Try again: 5\n5.0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, if you don&apos;t like using dunder methods (dunder = double-underscore), you can always define your own function, or use the ones from the &lt;a href=&quot;https://docs.python.org/library/operator.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Path existance:&lt;/strong&gt;&lt;br&gt;\nHere one can use &lt;code&gt;pathlib&lt;/code&gt; library and its &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.exists&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Path.exists&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\n\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a path: &quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This path doesn&apos;t exist! Try again: &quot;&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\npaths = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(Path, replies)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(Path.exists, paths))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a path:  a b c\nThis path doesn&apos;t exist! Try again:  1\nThis path doesn&apos;t exist! Try again:  existing_file.txt\nexisting_file.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;Limiting number of tries:&lt;/h2&gt;\n&lt;p&gt;If you don&apos;t want to torture a user by asking him something an infinite number of times, you can specify a limit in a call of &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;itertools.repeat&lt;/code&gt;&lt;/a&gt;. This can be combined with providing a default value to the &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number:&quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a number! Try again:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isdigit, replies), &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You&apos;ve failed miserably!&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; valid_response &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Well done!&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a number: a\nNot a number! Try again: b\nNot a number! Try again: c\nYou&apos;ve failed miserably!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Preprocessing input data:&lt;/h2&gt;\n&lt;p&gt;Sometimes we don&apos;t want to reject an input if the user accidentally supplied it &lt;em&gt;IN CAPS&lt;/em&gt; or with a space in the beginning or an end of the string. To take these simple mistakes into account we can preprocess the input data by applying &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.lower&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;str.lower&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.strip&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;str.strip&lt;/code&gt;&lt;/a&gt; methods. For example, for the case of membership testing the code will look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\nfruits = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;peach&apos;&lt;/span&gt;}\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a fruit: &quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I don&apos;t know this one! Try again: &quot;&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nlowercased_replies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.lower, replies)\nstripped_replies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.strip, lowercased_replies)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(fruits.__contains__, stripped_replies))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a fruit:  duck\nI don&apos;t know this one! Try again:     Orange\norange\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the case when you have many functions to use for preprocessing, it might be easier to use a function performing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;function composition&lt;/a&gt;. For example, using the one from &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.functional.compose&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; lz.functional &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; compose\n\nfruits = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;peach&apos;&lt;/span&gt;}\nprompts = chain([&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a fruit: &quot;&lt;/span&gt;], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I don&apos;t know this one! Try again: &quot;&lt;/span&gt;))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nprocess = compose(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.strip, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.lower)  &lt;span class=&quot;hljs-comment&quot;&gt;# you can add more functions here&lt;/span&gt;\nprocessed_replies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(process, replies)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(fruits.__contains__, processed_replies))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a fruit:  potato\nI don&apos;t know this one! Try again:   PEACH\npeach\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Combining validation rules:&lt;/h2&gt;\n&lt;p&gt;For a simple case, for example, when the program asks for age between 1 and 120, one can just add another &lt;code&gt;filter&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\nprompt_msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your age (1-120): &quot;&lt;/span&gt;\nbad_input_msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrong input.&quot;&lt;/span&gt;\nprompts = chain([prompt_msg], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;.join([bad_input_msg, prompt_msg])))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nnumeric_replies = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isdigit, replies)\nages = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, numeric_replies)\npositive_ages = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).__lt__, ages)\nnot_too_big_ages = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;).__ge__, positive_ages)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(not_too_big_ages)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But in the case when there are many rules, it&apos;s better to implement a function performing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot; rel=&quot;noreferrer&quot;&gt;logical conjunction&lt;/a&gt;. In the following example I will use a ready one from &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.logical.conjoin&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; partial\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; chain, repeat\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; lz.logical &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; conjoin\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;is_one_letter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(string) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\nrules = [&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isalpha, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isupper, is_one_letter, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;.__le__, &lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;.__ge__]\n\nprompt_msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a letter (C-P): &quot;&lt;/span&gt;\nbad_input_msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrong input.&quot;&lt;/span&gt;\nprompts = chain([prompt_msg], repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;.join([bad_input_msg, prompt_msg])))\nreplies = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, prompts)\nvalid_response = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(conjoin(*rules), replies))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(valid_response)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter a letter (C-P):  5\nWrong input.\nEnter a letter (C-P):  f\nWrong input.\nEnter a letter (C-P):  CDE\nWrong input.\nEnter a letter (C-P):  Q\nWrong input.\nEnter a letter (C-P):  N\nN\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unfortunately, if someone needs a custom message for each failed case, then, I&apos;m afraid, there is no &lt;em&gt;pretty&lt;/em&gt; functional way. Or, at least, I couldn&apos;t find one.&lt;/p&gt;\n    ","\n&lt;h1&gt;Using &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Click&lt;/em&gt;&lt;/a&gt;:&lt;/h1&gt;\n&lt;p&gt;&lt;em&gt;Click&lt;/em&gt; is a library for command-line interfaces and it provides functionality for asking a valid response from a user.&lt;/p&gt;\n&lt;p&gt;Simple example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; click\n\nnumber = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Please enter a number&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(number)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Please enter a number: \n a\nError: a is not a valid floating point value\nPlease enter a number: \n 10\n10.0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note how it converted the string value to a float automatically.&lt;/p&gt;\n&lt;h2&gt;Checking if a value is within a range:&lt;/h2&gt;\n&lt;p&gt;There are different &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/parameters/#parameter-types&quot; rel=&quot;noreferrer&quot;&gt;custom types&lt;/a&gt; provided. To get a number in a specific range we can use &lt;code&gt;IntRange&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;What&apos;s your age?&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=click.IntRange(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(age)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;What&apos;s your age?: \n a\nError: a is not a valid integer\nWhat&apos;s your age?: \n 0\nError: 0 is not in the valid range of 1 to 120.\nWhat&apos;s your age?: \n 5\n5\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can also specify just one of the limits, &lt;code&gt;min&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;What&apos;s your age?&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=click.IntRange(&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(age)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;What&apos;s your age?: \n 0\nError: 0 is smaller than the minimum valid value 14.\nWhat&apos;s your age?: \n 18\n18\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Membership testing:&lt;/h2&gt;\n&lt;p&gt;Using &lt;code&gt;click.Choice&lt;/code&gt; type. By default this check is case-sensitive.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;choices = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;peach&apos;&lt;/span&gt;}\nchoice = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Provide a fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=click.Choice(choices, case_sensitive=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(choice)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Provide a fruit (apple, peach, orange): \n banana\nError: invalid choice: banana. (choose from apple, peach, orange)\nProvide a fruit (apple, peach, orange): \n OrAnGe\norange\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Working with paths and files:&lt;/h2&gt;\n&lt;p&gt;Using a &lt;code&gt;click.Path&lt;/code&gt; type we can check for existing paths and also resolve them:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;path = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Provide path&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=click.Path(exists=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, resolve_path=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(path)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Provide path: \n nonexistent\nError: Path &quot;nonexistent&quot; does not exist.\nProvide path: \n existing_folder\n&apos;/path/to/existing_folder\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Reading and writing files can be done by &lt;code&gt;click.File&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;file = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;In which file to write data?&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=click.File(&lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; file.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;():\n    file.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello!&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# More info about `lazy=True` at:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# https://click.palletsprojects.com/en/7.x/arguments/#file-opening-safety&lt;/span&gt;\nfile = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Which file you wanna read?&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=click.File(lazy=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; file.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(file.read())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;In which file to write data?: \n         # &amp;lt;-- provided an empty string, which is an illegal name for a file\nIn which file to write data?: \n some_file.txt\nWhich file you wanna read?: \n nonexistent.txt\nError: Could not open file: nonexistent.txt: No such file or directory\nWhich file you wanna read?: \n some_file.txt\nHello!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Other examples:&lt;/h2&gt;\n&lt;h3&gt;Password confirmation:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;password = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter password&apos;&lt;/span&gt;, hide_input=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, confirmation_prompt=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(password)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Enter password: \n ······\nRepeat for confirmation: \n ·\nError: the two entered values do not match\nEnter password: \n ······\nRepeat for confirmation: \n ······\nqwerty\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Default values:&lt;/h3&gt;\n&lt;p&gt;In this case, simply pressing &lt;kbd&gt;Enter&lt;/kbd&gt; (or whatever key you use) without entering a value, will give you a default one:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;number = click.prompt(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Please enter a number&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, default=&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(number)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Please enter a number [42]: \n a\nError: a is not a valid integer\nPlease enter a number [42]: \n \n42\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So, I was messing around with something similar to this recently, and I came up with the following solution, which uses a way of getting input that rejects junk, before it&apos;s even checked in any logical way.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;read_single_keypress()&lt;/code&gt; courtesy &lt;a href=&quot;https://stackoverflow.com/a/6599441/4532996&quot;&gt;https://stackoverflow.com/a/6599441/4532996&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;read_single_keypress&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Waits for a single keypress on stdin.\n    -- from :: https://stackoverflow.com/a/6599441/4532996\n    &quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; termios, fcntl, sys, os\n    fd = sys.stdin.fileno()\n    &lt;span class=&quot;hljs-comment&quot;&gt;# save old state&lt;/span&gt;\n    flags_save = fcntl.fcntl(fd, fcntl.F_GETFL)\n    attrs_save = termios.tcgetattr(fd)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# make raw - the way to do this comes from the termios(3) man page.&lt;/span&gt;\n    attrs = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(attrs_save) &lt;span class=&quot;hljs-comment&quot;&gt;# copy the stored version to update&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# iflag&lt;/span&gt;\n    attrs[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;amp;= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK\n                  | termios.ISTRIP | termios.INLCR | termios. IGNCR\n                  | termios.ICRNL | termios.IXON )\n    &lt;span class=&quot;hljs-comment&quot;&gt;# oflag&lt;/span&gt;\n    attrs[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;amp;= ~termios.OPOST\n    &lt;span class=&quot;hljs-comment&quot;&gt;# cflag&lt;/span&gt;\n    attrs[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &amp;amp;= ~(termios.CSIZE | termios. PARENB)\n    attrs[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] |= termios.CS8\n    &lt;span class=&quot;hljs-comment&quot;&gt;# lflag&lt;/span&gt;\n    attrs[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;amp;= ~(termios.ECHONL | termios.ECHO | termios.ICANON\n                  | termios.ISIG | termios.IEXTEN)\n    termios.tcsetattr(fd, termios.TCSANOW, attrs)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# turn off non-blocking&lt;/span&gt;\n    fcntl.fcntl(fd, fcntl.F_SETFL, flags_save &amp;amp; ~os.O_NONBLOCK)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# read a single keystroke&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        ret = sys.stdin.read(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# returns a single character&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; KeyboardInterrupt:\n        ret = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# restore old state&lt;/span&gt;\n        termios.tcsetattr(fd, termios.TCSAFLUSH, attrs_save)\n        fcntl.fcntl(fd, fcntl.F_SETFL, flags_save)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;until_not_multi&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;chars&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;read stdin until !(chars)&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n    chars = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(chars)\n    y = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    sys.stdout.flush()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        i = read_single_keypress()\n        _ = sys.stdout.write(i)\n        sys.stdout.flush()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; chars:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n        y += i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; y\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_can_you_vote&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;a practical example:\n    test if a user can vote based purely on keypresses&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;can you vote? age : &quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n    x = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; + until_not_multi(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0123456789&quot;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; x:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nsorry, age can only consist of digits.&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;your age is&quot;&lt;/span&gt;, x, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nYou can vote!&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry! you can&apos;t vote&quot;&lt;/span&gt;)\n\n_can_you_vote()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can find the complete module &lt;a href=&quot;https://github.com/catb0t/input_constrain&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ ./input_constrain.py\ncan you vote? age : a\nsorry, age can only consist of digits.\n$ ./input_constrain.py \ncan you vote? age : &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;&amp;lt;RETURN&amp;gt;\nyour age &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;\nYou can vote!\n$ _\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the nature of this implementation is it closes stdin as soon as something that isn&apos;t a digit is read. I didn&apos;t hit enter after &lt;code&gt;a&lt;/code&gt;, but I needed to after the numbers.&lt;/p&gt;\n\n&lt;p&gt;You could merge this with the &lt;code&gt;thismany()&lt;/code&gt; function in the same module to only allow, say, three digits.&lt;/p&gt;\n    ","\n&lt;p&gt;I am a big fan of Unix philosophy &quot;Do one thing and do it well&quot;. Capturing user input and validating it are two separate steps:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;prompting the user for input with &lt;code&gt;get_input&lt;/code&gt; until the input is ok&lt;/li&gt;\n&lt;li&gt;validating using a &lt;code&gt;validator&lt;/code&gt; function that can be passed to &lt;code&gt;get_input&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;It can be kept as simple as (Python 3.8+, with  the walrus operator):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;\n    prompt=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a value: &quot;&lt;/span&gt;,\n    validator=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n    error_message=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input. Please try again.&quot;&lt;/span&gt;,\n&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; validator(value := &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(prompt)):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error_message)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;is_positive_int&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(value) &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    val = get_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Give a positive number: &quot;&lt;/span&gt;, is_positive_int)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;OK, thanks for &lt;span class=&quot;hljs-subst&quot;&gt;{val}&lt;/span&gt;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Sample run:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Give a positive number: -5\nInvalid input. Please try again.\nGive a positive number: asdf\nInvalid input. Please try again.\nGive a positive number:\nInvalid input. Please try again.\nGive a positive number: 42\nOK, thanks for 42\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;In Python &amp;lt; 3.8 you could use &lt;code&gt;get_input&lt;/code&gt; like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;\n    prompt=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a value: &quot;&lt;/span&gt;,\n    validator=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n    error_message=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input. Please try again.&quot;&lt;/span&gt;,\n&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        value = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(prompt)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; validator(value):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error_message)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You might also handle &lt;code&gt;KeyboardInterrupt&lt;/code&gt; and print a friendly exit message before terminating the application. A counter can be used to limit the allowed retries if desired.&lt;/p&gt;\n    ","\n&lt;p&gt;Use try-except to handle the error and repeat it again:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;please enter number&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Building upon Daniel Q&apos;s and Patrick Artner&apos;s excellent suggestions,\nhere is an even more generalized solution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Assuming Python3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValidationError&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;ValueError&lt;/span&gt;):  &lt;span class=&quot;hljs-comment&quot;&gt;# thanks Patrick Artner&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validate_input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prompt, cast=&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, cond=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;), onerror=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; onerror==&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;: onerror = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            data = cast(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(prompt))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; cond(data): &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValidationError\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(onerror.keys()) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:  &lt;span class=&quot;hljs-comment&quot;&gt;# thanks Daniel Q&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(onerror[&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(e)], file=sys.stderr)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I opted for explicit &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;raise&lt;/code&gt; statements instead of an &lt;code&gt;assert&lt;/code&gt;,\nbecause assertion checking may be turned off,\nwhereas validation should always be on to provide robustness.&lt;/p&gt;\n\n&lt;p&gt;This may be used to get different kinds of input,\nwith different validation conditions.\nFor example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# No validation, equivalent to simple input:&lt;/span&gt;\nanystr = validate_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter any string: &quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Get a string containing only letters:&lt;/span&gt;\nletters = validate_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter letters: &quot;&lt;/span&gt;,\n    cond=&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isalpha,\n    onerror={ValidationError: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Only letters, please!&quot;&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Get a float in [0, 100]:&lt;/span&gt;\npercentage = validate_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Percentage? &quot;&lt;/span&gt;,\n    cast=&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, cond=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;&amp;lt;=x&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;,\n    onerror={ValidationError: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Must be between 0 and 100!&quot;&lt;/span&gt;,\n             ValueError: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a number!&quot;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, to answer the original question:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age = validate_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;,\n        cast=&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, cond=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&amp;lt;=a&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;,\n        onerror={ValidationError: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a plausible age, please!&quot;&lt;/span&gt;,\n                 ValueError: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter an integer, please!&quot;&lt;/span&gt;})\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validate_age&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;age&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age:&quot;&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; validate_age(age): &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: Invalid age.&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this one:- &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;takeInput&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;required&lt;/span&gt;):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ooo or OOO to exit&apos;&lt;/span&gt;\n  ans = raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter: &apos;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; ans:\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered nothing...!&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; takeInput(required) \n\n      &lt;span class=&quot;hljs-comment&quot;&gt;##  FOR Exit  ## &lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; ans &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;ooo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;OOO&apos;&lt;/span&gt;]:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Closing instance.&quot;&lt;/span&gt;\n    exit()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ans.isdigit():\n      current = &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[~!@#$%^&amp;amp;*()_+{}&quot;:/\\&apos;]+$&apos;&lt;/span&gt;).intersection(ans):\n      current = &lt;span class=&quot;hljs-string&quot;&gt;&apos;other&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(ans,basestring):\n      current = &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n      current = &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; required == current :\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ans\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; takeInput(required)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;## pass the value in which type you want [str/int/special character(as other )]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;input: &quot;&lt;/span&gt;, takeInput(&lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Good question! You can try the following code for this. =)&lt;/p&gt;\n\n&lt;p&gt;This code uses &lt;a href=&quot;https://docs.python.org/3/library/ast.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ast.literal_eval()&lt;/a&gt; to &lt;strong&gt;find the data type of the input&lt;/strong&gt; (&lt;code&gt;age&lt;/code&gt;). Then it follows the following algorithm:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ol&gt;\n  &lt;li&gt;&lt;p&gt;Ask user to input her/his &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;1.1. If &lt;code&gt;age&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; data type:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;Check if &lt;code&gt;age&amp;gt;=18&lt;/code&gt;. If &lt;code&gt;age&amp;gt;=18&lt;/code&gt;, print appropriate output and exit.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;Check if &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt;. If &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt;, print appropriate output and exit.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;If &lt;code&gt;age&amp;lt;=0&lt;/code&gt;, ask the user to input a valid number for age again, (&lt;em&gt;i.e.&lt;/em&gt; go back to step 1.) &lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;1.2. If &lt;code&gt;age&lt;/code&gt; is not &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; data type, then ask user to input her/his age again (&lt;em&gt;i.e.&lt;/em&gt; go back to step 1.) &lt;/p&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is the code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ast &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; literal_eval\n\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; This function is used to identify the data type of input data.&apos;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;input_type&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;input_data&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(literal_eval(input_data))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; (ValueError, SyntaxError):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;\n\nflag = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(flag):\n    age = raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; input_type(age)==&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; input_type(age)==&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(age)&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;: \n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;) \n            flag = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(age)&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(age)&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;: \n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;) \n            flag = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a valid number as your age.&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, I didn&apos;t understand that.&quot;&lt;/span&gt;) \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &quot;while&quot; statement till user enter a true value and if the input value is not a number or it&apos;s a null value skip it and try to ask again and so on.\nIn example I tried to answer truly your question. If we suppose that our age is between 1 and 150 then input value accepted, else it&apos;s a wrong value.\nFor terminating program, the user can use 0 key and enter it as a value.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note: Read comments top of code.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# If your input value is only a number then use &quot;Value.isdigit() == False&quot;.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# If you need an input that is a text, you should remove &quot;Value.isdigit() == False&quot;.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Message&lt;/span&gt;):\n    Value = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; Value == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; Value.isdigit() == &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:        \n            Value = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(Message)).strip()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception:\n            Value = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Value\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Example:&lt;/span&gt;\nage = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# If we suppose that our age is between 1 and 150 then input value accepted,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# else it&apos;s a wrong value.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; age &amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; age &amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;:\n    age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(Input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# For terminating program, the user can use 0 key and enter it as an a value.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Terminating ...&quot;&lt;/span&gt;)\n        exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; age &amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can always apply simple if-else logic and add one more &lt;code&gt;if&lt;/code&gt; logic to your code along with a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n     age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;))\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;)  : \n         &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (age &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;) &amp;amp; (age &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n         &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n         &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrong characters, the input must be numeric&quot;&lt;/span&gt;)\n         &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will be an infinite loo and you would be asked to enter the age, indefinitely.&lt;/p&gt;\n    ","\n&lt;p&gt;While a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; block will work, a much faster and cleaner way to accomplish this task would be to use &lt;code&gt;str.isdigit()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    age = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age.isdigit():\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(age)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid number &apos;{age}&apos;. Try again.&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(age=age))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can write more general logic to allow user to enter only specific number of times, as the same use-case arises in many real-world applications.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValidInt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iMaxAttemps = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n  iCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# exit when maximum attempt limit has expired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; iCount != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; iCount &amp;gt; iMaxAttemps:\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;# return as default value&lt;/span&gt;\n\n    i = raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter no&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n       i = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n       &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter valid int value&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n       &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i\n\nage = getValidInt()\n&lt;span class=&quot;hljs-comment&quot;&gt;# do whatever you want to do.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can make the input statement a while True loop so it repeatedly asks for the users input and then break that loop if the user enters the response you would like. And you can use try and except blocks to handle invalid responses.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n\n    var = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input.&quot;&lt;/span&gt;)\n        var = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; var == &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States.&quot;&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The var variable is just so that if the user enters a string instead of a integer the program wont return &quot;You are not able to vote in the United States.&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;One more solution for using input validation using a customized &lt;code&gt;ValidationError&lt;/code&gt; and a (optional) range validation for integer inputs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValidationError&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;ValueError&lt;/span&gt;): \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Special validation error - its message is supposed to be printed&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;RangeValidator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;text,num,r&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Generic validator - raises &apos;text&apos; as ValidationError if &apos;num&apos; not in range &apos;r&apos;.&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; num &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; r:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; num\n    &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValidationError(text)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ValidCol&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt;): \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Specialized column validator providing text and range.&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; RangeValidator(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Columns must be in the range of 0 to 3 (inclusive)&quot;&lt;/span&gt;, \n                          c, &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ValidRow&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt;): \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Specialized row validator providing text and range.&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; RangeValidator(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rows must be in the range of 5 to 15(exclusive)&quot;&lt;/span&gt;,\n                          r, &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GetInt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;text, validator=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Aks user for integer input until a valid integer is given. If provided, \n    a &apos;validator&apos; function takes the integer and either raises a \n    ValidationError to be printed or returns the valid number. \n    Non integers display a simple error message.&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        n = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(text)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            n = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(n)\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; validator &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; validator(n)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ve:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# prints ValidationErrors directly - else generic message:&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(ve, ValidationError):\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ve)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input: &quot;&lt;/span&gt;, n)\n\n\ncolumn = GetInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pleased enter column: &quot;&lt;/span&gt;, ValidCol)\nrow = GetInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pleased enter row: &quot;&lt;/span&gt;, ValidRow)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( row, column)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Pleased enter column: &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;\nColumns must be &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; of &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; (inclusive)\nPleased enter column: -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nColumns must be &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; of &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; (inclusive)\nPleased enter column: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nPleased enter row: a\nInvalid &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;:  a\nPleased enter row: &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;\nRows must be &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; of &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;(exclusive)\nPleased enter row: &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  \n\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Persistent user input using &lt;strong&gt;recursive function&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;h3&gt;String&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;askName&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Write your name: &quot;&lt;/span&gt;).strip() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; askName()\n\nname = askName()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Integer&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;askAge&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your age: &quot;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; askAge()\n\nage = askAge()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and finally, the question requirement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;askAge&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your age: &quot;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; askAge()\n\nage = askAge()\n\nresponseAge = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the United States!&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the United States.&quot;&lt;/span&gt;,\n][&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(age &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(responseAge)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can try to convert it to a integer, but ask the user to repeat if it doesn&apos;t work.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    age = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Please enter your age: &apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        age_int = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(age)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age_int &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You can vote in the United States!&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You cannot vote in the United States.&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Please enter a meaningful answer.&apos;&lt;/span&gt;)\n        \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The while loop runs as long as the user has not inputted a meaningful answer, but breaks if it makes sense.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;isdigit()&lt;/code&gt; to check if a string represents a valid integer.&lt;/p&gt;\n&lt;p&gt;You could use a recursive function.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ask&lt;/span&gt;():\n    answer = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter amount to convert: &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; answer.isdigit():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ask()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(answer)\n\nGdp = ask()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or a while loop&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    answer = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter amount to convert: &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; answer.isdigit():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n\n    Gbp = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(answer)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Below code may help.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age=(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i,f: f(i,f))(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i,f: i &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; f(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;),f))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the united states&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(age)&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the united states&quot;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to have maximum tries, say 3, use below code&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;age=(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i,n,f: f(i,n,f))(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i,n,f: i &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; f(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your age: &quot;&lt;/span&gt;),n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,f)))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You are able to vote in the united states&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(age)&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;You are not able to vote in the united states&quot;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: This uses recursion.&lt;/p&gt;\n    "]},"randomTags":[{"name":"dangling-pointer","slug":"dangling-pointer"},{"name":"jsonp","slug":"jsonp"},{"name":"benchmarking","slug":"benchmarking"},{"name":"date-conversion","slug":"date-conversion"},{"name":"soft-keyboard","slug":"soft-keyboard"},{"name":"increment","slug":"increment"},{"name":"operator-overloading","slug":"operator-overloading"},{"name":"underscore.js","slug":"underscore.js"},{"name":"networkonmainthread","slug":"networkonmainthread"},{"name":"list","slug":"list"},{"name":"precision","slug":"precision"},{"name":"quotes","slug":"quotes"},{"name":"bitwise-operators","slug":"bitwise-operators"},{"name":"bounded-wildcard","slug":"bounded-wildcard"},{"name":"pageload","slug":"pageload"},{"name":"setter","slug":"setter"},{"name":"facelets","slug":"facelets"},{"name":"super","slug":"super"},{"name":"object-literal","slug":"object-literal"},{"name":"html-table","slug":"html-table"}]},"__N_SSG":true}