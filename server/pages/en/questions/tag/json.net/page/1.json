{"pageProps":{"data":{"count":1,"rows":[{"id":473,"title":"How can I deserialize JSON with C#?","slug":"how-can-i-deserialize-json-with-c-1657388102941","postType":"QUESTION","createdAt":"2022-07-09T17:35:02.000Z","updatedAt":"2022-07-09T17:35:02.000Z","tags":[{"id":2401,"name":"json.net","slug":"json.net","createdAt":"2022-07-09T17:35:02.000Z","updatedAt":"2022-07-09T17:35:02.000Z","Questions_Tags":{"questionId":473,"tagId":2401}}]}]},"slug":"json.net","page":"1","answers":{"473":["\n&lt;p&gt;I am assuming you are not using &lt;a href=&quot;http://www.newtonsoft.com/json&quot; rel=&quot;noreferrer&quot;&gt;Json.NET&lt;/a&gt; (Newtonsoft.Json NuGet package). If this the case, then you should try it.&lt;/p&gt;\n&lt;p&gt;It has the following features:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;LINQ to JSON&lt;/li&gt;\n&lt;li&gt;The JsonSerializer for quickly converting your .NET objects to JSON and back again&lt;/li&gt;\n&lt;li&gt;Json.NET can optionally produce well formatted, indented JSON for debugging or display&lt;/li&gt;\n&lt;li&gt;Attributes like &lt;code&gt;JsonIgnore&lt;/code&gt; and &lt;code&gt;JsonProperty&lt;/code&gt; can be added to a class to customize how a class is serialized&lt;/li&gt;\n&lt;li&gt;Ability to convert JSON to and from XML&lt;/li&gt;\n&lt;li&gt;Supports multiple platforms: .NET, Silverlight and the Compact Framework&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Look at the &lt;a href=&quot;http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConvert.htm&quot; rel=&quot;noreferrer&quot;&gt;example&lt;/a&gt; below. In this example, &lt;a href=&quot;http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConvert.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JsonConvert&lt;/code&gt;&lt;/a&gt; class is used to convert an object to and from JSON. It has two static methods for this purpose. They are &lt;a href=&quot;http://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_JsonConvert_SerializeObject.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SerializeObject(Object obj)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_JsonConvert_DeserializeObject__1.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DeserializeObject&amp;lt;T&amp;gt;(String json)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json;\n\nProduct product = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Product();\nproduct.Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;;\nproduct.Expiry = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DateTime(&lt;span class=&quot;hljs-number&quot;&gt;2008&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;);\nproduct.Price = &lt;span class=&quot;hljs-number&quot;&gt;3.99&lt;/span&gt;M;\nproduct.Sizes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Small&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Medium&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Large&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json = JsonConvert.SerializeObject(product);\n&lt;span class=&quot;hljs-comment&quot;&gt;//{&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &quot;Name&quot;: &quot;Apple&quot;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &quot;Expiry&quot;: &quot;2008-12-28T00:00:00&quot;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &quot;Price&quot;: 3.99,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &quot;Sizes&quot;: [&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    &quot;Small&quot;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    &quot;Medium&quot;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    &quot;Large&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  ]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//}&lt;/span&gt;\n\nProduct deserializedProduct = JsonConvert.DeserializeObject&amp;lt;Product&amp;gt;(json);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As was answered here - &lt;a href=&quot;https://stackoverflow.com/a/9326146&quot;&gt;Deserialize JSON into C# dynamic object?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s pretty simple using Json.NET:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; stuff = JsonConvert.DeserializeObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ &apos;Name&apos;: &apos;Jon Smith&apos;, &apos;Address&apos;: { &apos;City&apos;: &apos;New York&apos;, &apos;State&apos;: &apos;NY&apos; }, &apos;Age&apos;: 42 }&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = stuff.Name;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; address = stuff.Address.City;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or using Newtonsoft.Json.Linq :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; stuff = JObject.Parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ &apos;Name&apos;: &apos;Jon Smith&apos;, &apos;Address&apos;: { &apos;City&apos;: &apos;New York&apos;, &apos;State&apos;: &apos;NY&apos; }, &apos;Age&apos;: 42 }&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = stuff.Name;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; address = stuff.Address.City;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are some options &lt;strong&gt;without&lt;/strong&gt; using third party libraries:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// For that you will need to add reference to System.Runtime.Serialization&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonReader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(&lt;span class=&quot;hljs-string&quot;&gt;@&quot;{ &quot;&quot;Name&quot;&quot;: &quot;&quot;Jon Smith&quot;&quot;, &quot;&quot;Address&quot;&quot;: { &quot;&quot;City&quot;&quot;: &quot;&quot;New York&quot;&quot;, &quot;&quot;State&quot;&quot;: &quot;&quot;NY&quot;&quot; }, &quot;&quot;Age&quot;&quot;: 42 }&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; System.Xml.XmlDictionaryReaderQuotas());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// For that you will need to add reference to System.Xml and System.Xml.Linq&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; root = XElement.Load(jsonReader);\nConsole.WriteLine(root.XPathSelectElement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;//Name&quot;&lt;/span&gt;).Value);\nConsole.WriteLine(root.XPathSelectElement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;//Address/State&quot;&lt;/span&gt;).Value);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// For that you will need to add reference to System.Web.Helpers&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = System.Web.Helpers.Json.Decode(&lt;span class=&quot;hljs-string&quot;&gt;@&quot;{ &quot;&quot;Name&quot;&quot;: &quot;&quot;Jon Smith&quot;&quot;, &quot;&quot;Address&quot;&quot;: { &quot;&quot;City&quot;&quot;: &quot;&quot;New York&quot;&quot;, &quot;&quot;State&quot;&quot;: &quot;&quot;NY&quot;&quot; }, &quot;&quot;Age&quot;&quot;: 42 }&quot;&lt;/span&gt;);\nConsole.WriteLine(json.Name);\nConsole.WriteLine(json.Address.State);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the link for more information about &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.helpers.json%28v=vs.111%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Web.Helpers.Json&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Nowadays the easiest way to get the &lt;code&gt;Web.Helpers&lt;/code&gt; is to use the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.AspNet.WebHelpers/&quot; rel=&quot;noreferrer&quot;&gt;NuGet package&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you don&apos;t care about earlier windows versions you can use the classes of the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/apps/xaml/windows.data.json.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Windows.Data.Json&lt;/code&gt;&lt;/a&gt; namespace:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// minimum supported version: Win 8&lt;/span&gt;\nJsonObject root = Windows.Data.Json.JsonValue.Parse(jsonString).GetObject();\nConsole.WriteLine(root[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;].GetString());\nConsole.WriteLine(root[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Address&quot;&lt;/span&gt;].GetObject()[&lt;span class=&quot;hljs-string&quot;&gt;&quot;State&quot;&lt;/span&gt;].GetString());\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If .NET 4 is available to you, check out: &lt;a href=&quot;https://web.archive.org/web/20150211004910/http://visitmix.com/writings/the-rise-of-json&quot;&gt;http://visitmix.com/writings/the-rise-of-json (archive.org)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is a snippet from that site:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;WebClient webClient = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebClient();\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; result = JsonValue.Parse(webClient.DownloadString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://api.foursquare.com/v2/users/self?oauth_token=XXXXXXX&quot;&lt;/span&gt;));\nConsole.WriteLine(result.response.user.firstName);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That last Console.WriteLine is pretty sweet...&lt;/p&gt;\n    ","\n&lt;p&gt;Another native solution to this, which doesn&apos;t require any 3rd party libraries but a reference to &lt;strong&gt;System.Web.Extensions&lt;/strong&gt; is the JavaScriptSerializer. This is not a new but a very unknown built-in features there since 3.5.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Web.Script.Serialization;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;..&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;JavaScriptSerializer serializer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\nobjectString = serializer.Serialize(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyObject());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and back&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MyObject o = serializer.Deserialize&amp;lt;MyObject&amp;gt;(objectString)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;System.Text.Json&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Core&quot; rel=&quot;nofollow noreferrer&quot;&gt;.NET core&lt;/a&gt; 3.0 comes with &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.0&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;System.Text.Json&lt;/code&gt;&lt;/a&gt; built-in which means you can deserialize/serialize JSON &lt;strong&gt;without&lt;/strong&gt; using a third-party library.&lt;/p&gt;\n&lt;h2&gt;Serialize/Deserialize&lt;/h2&gt;\n&lt;p&gt;To serialize your class(es) to JSON string:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = JsonSerializer.Serialize(model);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To deserialize the JSON into a strongly typed class:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; model = JsonSerializer.Deserialize&amp;lt;Model&amp;gt;(json);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Parse (.NET 6)&lt;/h2&gt;\n&lt;p&gt;.NET 6 introduced the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.text.json.nodes?view=net-6.0&quot; rel=&quot;nofollow noreferrer&quot;&gt;System.Text.Json.Nodes&lt;/a&gt; namespace which enables DOM parsing, navigation and manipulation in a similar manner to Newtonsoft.Json using the new classes &lt;code&gt;JsonObject&lt;/code&gt;, &lt;code&gt;JsonArray&lt;/code&gt;, &lt;code&gt;JsonValue&lt;/code&gt;, and &lt;code&gt;JsonNode&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// JsonObject parse DOM&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonObject = JsonNode.Parse(jsonString).AsObject();\n&lt;span class=&quot;hljs-comment&quot;&gt;// read data from DOM&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = jsonObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;].ToString();\nDateTime date = (DateTime)jsonObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Date&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; people = jsonObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;People&quot;&lt;/span&gt;].Deserialize&amp;lt;List&amp;lt;Person&amp;gt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Similar methods apply to &lt;code&gt;JsonArray&lt;/code&gt;.  This &lt;a href=&quot;https://stackoverflow.com/a/71018559/9665021&quot;&gt;answer&lt;/a&gt; provides more details on JsonObject.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;One thing to note is that &lt;code&gt;System.Text.Json&lt;/code&gt; &lt;strong&gt;does not&lt;/strong&gt; automatically handle &lt;code&gt;camelCase&lt;/code&gt; JSON properties &lt;strong&gt;when using your own code&lt;/strong&gt; (however, it does when using MVC/WebAPI requests and the model binder).&lt;/p&gt;\n&lt;p&gt;To resolve this you need to pass &lt;code&gt;JsonSerializerOptions&lt;/code&gt; as a parameter.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;JsonSerializerOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonSerializerOptions\n{        \n    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,  &lt;span class=&quot;hljs-comment&quot;&gt;// set camelCase       &lt;/span&gt;\n    WriteIndented = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;                                &lt;span class=&quot;hljs-comment&quot;&gt;// write pretty json&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// pass options to serializer&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = JsonSerializer.Serialize(order, options);\n&lt;span class=&quot;hljs-comment&quot;&gt;// pass options to deserializer&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; order = JsonSerializer.Deserialize&amp;lt;Order&amp;gt;(json, options);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;System.Text.Json&lt;/strong&gt; is also available for .Net Framework and .Net Standard as a Nu-get package &lt;a href=&quot;https://www.nuget.org/packages/System.Text.Json.&quot; rel=&quot;nofollow noreferrer&quot;&gt;System.Text.Json&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You could also have a look at the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.serialization.json.datacontractjsonserializer.aspx&quot; rel=&quot;noreferrer&quot;&gt;DataContractJsonSerializer&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;System.Json works now...&lt;/p&gt;\n\n&lt;p&gt;Install nuget &lt;a href=&quot;https://www.nuget.org/packages/System.Json&quot; rel=&quot;noreferrer&quot;&gt;https://www.nuget.org/packages/System.Json&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;PM&amp;gt; Install-Package System.Json -Version &lt;span class=&quot;hljs-number&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// PM&amp;gt;Install-Package System.Json -Version 4.5.0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Json;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NetCoreTestConsoleApp&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Program&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Note that JSON keys are case sensitive, a is not same as A.&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// JSON Sample&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; jsonString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;{\\&quot;a\\&quot;: 1,\\&quot;b\\&quot;: \\&quot;string value\\&quot;,\\&quot;c\\&quot;:[{\\&quot;Value\\&quot;: 1}, {\\&quot;Value\\&quot;: 2,\\&quot;SubObject\\&quot;:[{\\&quot;SubValue\\&quot;:3}]}]}&quot;&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// You can use the following line in a beautifier/JSON formatted for better view&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;a&quot;: 1,&quot;b&quot;: &quot;string value&quot;,&quot;c&quot;:[{&quot;Value&quot;: 1}, {&quot;Value&quot;: 2,&quot;SubObject&quot;:[{&quot;SubValue&quot;:3}]}]}&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;/* Formatted jsonString for viewing purposes:\n            {\n               &quot;a&quot;:1,\n               &quot;b&quot;:&quot;string value&quot;,\n               &quot;c&quot;:[\n                  {\n                     &quot;Value&quot;:1\n                  },\n                  {\n                     &quot;Value&quot;:2,\n                     &quot;SubObject&quot;:[\n                        {\n                           &quot;SubValue&quot;:3\n                        }\n                     ]\n                  }\n               ]\n            }\n            */&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Verify your JSON if you get any errors here&lt;/span&gt;\n            JsonValue json = JsonValue.Parse(jsonString);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// int test&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (json.ContainsKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;))\n            {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; a = json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// type already set to int&lt;/span&gt;\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;json[\\&quot;a\\&quot;]&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt; + a);\n            }\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// string test&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (json.ContainsKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;))\n            {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; b = json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// type already set to string&lt;/span&gt;\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;json[\\&quot;b\\&quot;]&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt; + b);\n            }\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// object array test&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (json.ContainsKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;) &amp;amp;&amp;amp; json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;].JsonType == JsonType.Array)\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// foreach loop test&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (JsonValue j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;])\n                {\n                    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;j[\\&quot;Value\\&quot;]&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt; + j[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value&quot;&lt;/span&gt;].ToString());\n                }\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// multi level key test&lt;/span&gt;\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;json[\\&quot;c\\&quot;][0][\\&quot;Value\\&quot;]&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt; + json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value&quot;&lt;/span&gt;].ToString());\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;json[\\&quot;c\\&quot;][0][\\&quot;Value\\&quot;]&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt; + json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value&quot;&lt;/span&gt;].ToString());\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;json[\\&quot;c\\&quot;][1][\\&quot;SubObject\\&quot;][0][\\&quot;SubValue\\&quot;]&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt; + json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;SubObject&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;SubValue&quot;&lt;/span&gt;].ToString());\n            }\n\n            Console.WriteLine();\n            Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Press any key to exit.&quot;&lt;/span&gt;);\n            Console.ReadKey();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;HttpWebRequest request = (HttpWebRequest)WebRequest.Create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;URL&quot;&lt;/span&gt;);\nJArray array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JArray();\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; twitpicResponse = (HttpWebResponse)request.GetResponse())\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StreamReader(twitpicResponse.GetResponseStream()))\n{\n    JavaScriptSerializer js = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objText = reader.ReadToEnd();\n\n    JObject joResponse = JObject.Parse(objText);\n    JObject result = (JObject)joResponse[&lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;];\n    array = (JArray)result[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Detail&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; statu = array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;dlrStat&quot;&lt;/span&gt;].ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use this tool to generate a class based in your json:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://json2csharp.com/&quot; rel=&quot;noreferrer&quot;&gt;http://json2csharp.com/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And then use the class to deserialize your json. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Account&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Email { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; Active { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DateTime CreatedDate { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IList&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; Roles { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;{\n  &apos;Email&apos;: &apos;james@example.com&apos;,\n  &apos;Active&apos;: true,\n  &apos;CreatedDate&apos;: &apos;2013-01-20T00:00:00Z&apos;,\n  &apos;Roles&apos;: [\n    &apos;User&apos;,\n    &apos;Admin&apos;\n  ]\n}&quot;&lt;/span&gt;;\n\nAccount account = JsonConvert.DeserializeObject&amp;lt;Account&amp;gt;(json);\n\nConsole.WriteLine(account.Email);\n&lt;span class=&quot;hljs-comment&quot;&gt;// james@example.com&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;References:\n&lt;a href=&quot;https://forums.asp.net/t/1992996.aspx?Nested+Json+Deserialization+to+C+object+and+using+that+object&quot; rel=&quot;noreferrer&quot;&gt;https://forums.asp.net/t/1992996.aspx?Nested+Json+Deserialization+to+C+object+and+using+that+object&lt;/a&gt;\n&lt;a href=&quot;https://www.newtonsoft.com/json/help/html/DeserializeObject.htm&quot; rel=&quot;noreferrer&quot;&gt;https://www.newtonsoft.com/json/help/html/DeserializeObject.htm&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If JSON is dynamic as below&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;{\n &lt;span class=&quot;hljs-string&quot;&gt;&quot;Items&quot;&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12.3&lt;/span&gt;\n    },\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Grape&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3.21&lt;/span&gt;\n    }\n   ],\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;Date&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;21/11/2010&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, Once you install &lt;code&gt;NewtonSoft.Json&lt;/code&gt; from NuGet  and include it in your project, you can serialize it as&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; jsonString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;{\\&quot;Items\\&quot;: [{\\&quot;Name\\&quot;: \\&quot;Apple\\&quot;,\\&quot;Price\\&quot;: 12.3},{\\&quot;Name\\&quot;: \\&quot;Grape\\&quot;,\\&quot;Price\\&quot;: 3.21}],\\&quot;Date\\&quot;: \\&quot;21/11/2010\\&quot;}&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; DynamicData = JsonConvert.DeserializeObject(jsonString);\n\n        Console.WriteLine(   DynamicData.Date); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;21/11/2010&quot;&lt;/span&gt;\n        Console.WriteLine(DynamicData.Items.Count); &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n        Console.WriteLine(DynamicData.Items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].Name); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Apple&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Source: &lt;a href=&quot;https://qawithexperts.com/article/c-sharp/how-to-read-json-data-in-c-example-using-console-app-aspnet/174&quot; rel=&quot;noreferrer&quot;&gt;How to read JSON data in C# (Example using Console app &amp;amp; ASP.NET MVC)?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The following from the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh770289.aspx&quot; rel=&quot;nofollow&quot;&gt;msdn&lt;/a&gt; site should I think help provide some native functionality for what you are looking for. Please note it is specified for Windows 8. One such example from the site is listed below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;JsonValue jsonValue = JsonValue.Parse(&quot;{\\&quot;Width\\&quot;: 800, \\&quot;Height\\&quot;: 600, \\&quot;Title\\&quot;: \\&quot;View from 15th Floor\\&quot;, \\&quot;IDs\\&quot;: [116, 943, 234, 38793]}&quot;);\ndouble width = jsonValue.GetObject().GetNamedNumber(&quot;Width&quot;);\ndouble height = jsonValue.GetObject().GetNamedNumber(&quot;Height&quot;);\nstring title = jsonValue.GetObject().GetNamedString(&quot;Title&quot;);\nJsonArray ids = jsonValue.GetObject().GetNamedArray(&quot;IDs&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It utilizes the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/apps/xaml/windows.data.json.aspx&quot; rel=&quot;nofollow&quot;&gt;Windows.Data.JSON&lt;/a&gt; namespace.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use following extentions&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JsonExtensions&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;ToObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; jsonText&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(jsonText);\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToJson&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T obj&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.SerializeObject(obj);\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I ended up with a simple class that creates types on the fly, instantiate them and hydrate them, mirroring the structure of the input JSON.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ScToc.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ScToc.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;You can find it here:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/starnutoditopo/JsonToObject&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/starnutoditopo/JsonToObject&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think the best answer that I&apos;ve seen has been @MD_Sayem_Ahmed.&lt;/p&gt;\n\n&lt;p&gt;Your question is &quot;How can I parse Json with C#&quot;, but it seems like you are wanting to decode Json.  If you are wanting to decode it, Ahmed&apos;s answer is good.&lt;/p&gt;\n\n&lt;p&gt;If you are trying to accomplish this in ASP.NET Web Api, the easiest way is to create a data transfer object that holds the data you want to assign:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyDto&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Name{&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Value{&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You have simply add the application/json header to your request (if you are using Fiddler, for example).\nYou would then use this in ASP.NET Web API as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//controller method -- assuming you want to post and return data&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MyDto &lt;span class=&quot;hljs-title&quot;&gt;Post&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[FromBody] MyDto myDto&lt;/span&gt;)&lt;/span&gt;{\n   MyDto someDto = myDto;\n   &lt;span class=&quot;hljs-comment&quot;&gt;/*ASP.NET automatically converts the data for you into this object \n    if you post a json object as follows:\n{\n    &quot;Name&quot;: &quot;SomeName&quot;,\n      &quot;Value&quot;: &quot;SomeValue&quot;\n}\n*/&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;//do some stuff&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This helped me a lot when I was working in my Web Api and made my life super easy.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;         &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;{\n            &apos;Name&apos;: &apos;Wide Web&apos;,\n            &apos;Url&apos;: &apos;www.wideweb.com.br&apos;}&quot;&lt;/span&gt;;\n\n        JavaScriptSerializer jsonSerializer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; j = jsonSerializer.Deserialize&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(json);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = j[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;].ToString();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; url = j[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Url&quot;&lt;/span&gt;].ToString();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = controller.ActioName(objParams);\nIDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; data = (IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; System.Web.Routing.RouteValueDictionary(result.Data);\nAssert.AreEqual(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Table already exists.&quot;&lt;/span&gt;, data[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Message&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ms = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream(Encoding.Unicode.GetBytes(user)))\n {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Deserialization from JSON  &lt;/span&gt;\n    DataContractJsonSerializer deserializer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DataContractJsonSerializer(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(UserListing))\n    DataContractJsonSerializer(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(UserListing));\n    UserListing response = (UserListing)deserializer.ReadObject(ms);\n\n }\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserListing&lt;/span&gt;\n {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;UserList&amp;gt; users { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }      \n }\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserList&lt;/span&gt;\n {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; FirstName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }       \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; LastName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; } \n }\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"copy-elision","slug":"copy-elision"},{"name":"password-hash","slug":"password-hash"},{"name":"deserialization","slug":"deserialization"},{"name":"filtering","slug":"filtering"},{"name":"swing","slug":"swing"},{"name":"typescript","slug":"typescript"},{"name":"responsive-design","slug":"responsive-design"},{"name":"struct","slug":"struct"},{"name":"listener","slug":"listener"},{"name":"python-decorators","slug":"python-decorators"},{"name":"plugins","slug":"plugins"},{"name":"hashcode","slug":"hashcode"},{"name":"q","slug":"q"},{"name":"android-asynctask","slug":"android-asynctask"},{"name":"using-directives","slug":"using-directives"},{"name":"operator-overloading","slug":"operator-overloading"},{"name":"iterator","slug":"iterator"},{"name":"asp.net-mvc-5","slug":"asp.net-mvc-5"},{"name":"android-intent","slug":"android-intent"},{"name":"tidyr","slug":"tidyr"}]},"__N_SSG":true}