{"pageProps":{"data":{"count":1,"rows":[{"id":7,"title":"Is floating point math broken?","slug":"is-floating-point-math-broken-1657384238910","postType":"QUESTION","createdAt":"2022-07-09T16:30:38.000Z","updatedAt":"2022-07-09T16:30:38.000Z","tags":[{"id":24,"name":"floating-point","slug":"floating-point","createdAt":"2022-07-09T16:30:39.000Z","updatedAt":"2022-07-09T16:30:39.000Z","Questions_Tags":{"questionId":7,"tagId":24}}]}]},"slug":"floating-point","page":1,"answers":{"7":["\n&lt;p&gt;Binary &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-precision_floating-point_format&quot; rel=&quot;noreferrer&quot;&gt;floating point&lt;/a&gt; math is like this. In most programming languages, it is based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754#Basic_and_interchange_formats&quot; rel=&quot;noreferrer&quot;&gt;IEEE 754 standard&lt;/a&gt;. The crux of the problem is that numbers are represented in this format as a whole number times a power of two; rational numbers (such as &lt;code&gt;0.1&lt;/code&gt;, which is &lt;code&gt;1/10&lt;/code&gt;) whose denominator is not a power of two cannot be exactly represented.&lt;/p&gt;\n&lt;p&gt;For &lt;code&gt;0.1&lt;/code&gt; in the standard &lt;code&gt;binary64&lt;/code&gt; format, the representation can be written exactly as&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;0.1000000000000000055511151231257827021181583404541015625&lt;/code&gt; in decimal, or&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;0x1.999999999999ap-4&lt;/code&gt; in &lt;a href=&quot;http://www.exploringbinary.com/hexadecimal-floating-point-constants/&quot; rel=&quot;noreferrer&quot;&gt;C99 hexfloat notation&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In contrast, the rational number &lt;code&gt;0.1&lt;/code&gt;, which is &lt;code&gt;1/10&lt;/code&gt;, can be written exactly as&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;0.1&lt;/code&gt; in decimal, or&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;0x1.99999999999999...p-4&lt;/code&gt; in an analogue of C99 hexfloat notation, where the &lt;code&gt;...&lt;/code&gt; represents an unending sequence of 9&apos;s.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The constants &lt;code&gt;0.2&lt;/code&gt; and &lt;code&gt;0.3&lt;/code&gt; in your program will also be approximations to their true values.  It happens that the closest &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;0.2&lt;/code&gt; is larger than the rational number &lt;code&gt;0.2&lt;/code&gt; but that the closest &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;0.3&lt;/code&gt; is smaller than the rational number &lt;code&gt;0.3&lt;/code&gt;.  The sum of &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;0.2&lt;/code&gt; winds up being larger than the rational number &lt;code&gt;0.3&lt;/code&gt; and hence disagreeing with the constant in your code.&lt;/p&gt;\n&lt;p&gt;A fairly comprehensive treatment of floating-point arithmetic issues is &lt;a href=&quot;http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/em&gt;&lt;/a&gt;. For an easier-to-digest explanation, see &lt;a href=&quot;http://floating-point-gui.de&quot; rel=&quot;noreferrer&quot;&gt;floating-point-gui.de&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Side Note: All positional (base-N) number systems share this problem with precision&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Plain old decimal (base 10) numbers have the same issues, which is why numbers like 1/3 end up as 0.333333333...&lt;/p&gt;\n&lt;p&gt;You&apos;ve just stumbled on a number (3/10) that happens to be easy to represent with the decimal system, but doesn&apos;t fit the binary system. It goes both ways (to some small degree) as well: 1/16 is an ugly number in decimal (0.0625), but in binary it looks as neat as a 10,000th does in decimal (0.0001)** - if we were in the habit of using a base-2 number system in our daily lives, you&apos;d even look at that number and instinctively understand you could arrive there by halving something, halving it again, and again and again.&lt;/p&gt;\n&lt;p&gt;** Of course, that&apos;s not exactly how floating-point numbers are stored in memory (they use a form of scientific notation). However, it does illustrate the point that binary floating-point precision errors tend to crop up because the &quot;real world&quot; numbers we are usually interested in working with are so often powers of ten - but only because we use a decimal number system day-to-day. This is also why we&apos;ll say things like 71% instead of &quot;5 out of every 7&quot; (71% is an approximation, since 5/7 can&apos;t be represented exactly with any decimal number).&lt;/p&gt;\n&lt;p&gt;So no: binary floating point numbers are not broken, they just happen to be as imperfect as every other base-N number system :)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Side Side Note: Working with Floats in Programming&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In practice, this problem of precision means you need to use rounding functions to round your floating point numbers off to however many decimal places you&apos;re interested in before you display them.&lt;/p&gt;\n&lt;p&gt;You also need to replace equality tests with comparisons that allow some amount of tolerance, which means:&lt;/p&gt;\n&lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; do &lt;code&gt;if (x == y) { ... }&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Instead do &lt;code&gt;if (abs(x - y) &amp;lt; myToleranceValue) { ... }&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;where &lt;code&gt;abs&lt;/code&gt; is the absolute value. &lt;code&gt;myToleranceValue&lt;/code&gt; needs to be chosen for your particular application - and it will have a lot to do with how much &quot;wiggle room&quot; you are prepared to allow, and what the largest number you are going to be comparing may be (due to loss of precision issues). Beware of &quot;epsilon&quot; style constants in your language of choice. These are &lt;em&gt;not&lt;/em&gt; to be used as tolerance values.&lt;/p&gt;\n    ","\n&lt;h1&gt;&lt;strong&gt;A Hardware Designer&apos;s Perspective&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;I believe I should add a hardware designers perspective to this since I design and build floating point hardware. Knowing the origin of the error may help in understanding what is happening in the software, and ultimately, I hope this helps explain the reasons for why floating point errors happen and seem to accumulate over time.&lt;/p&gt;\n\n&lt;h2&gt;1. Overview&lt;/h2&gt;\n\n&lt;p&gt;From an engineering perspective, most floating point operations will have some element of error since the hardware that does the floating point computations is only required to have an error of less than one half of one unit in the last place. Therefore, much hardware will stop at a precision that&apos;s only necessary to yield an error of less than one half of one unit in the last place for a &lt;em&gt;single operation&lt;/em&gt; which is especially problematic in floating point division. What constitutes a single operation depends upon how many operands the unit takes. For most, it is two, but some units take 3 or more operands. Because of this, there is no guarantee that repeated operations will result in a desirable error since the errors add up over time.&lt;/p&gt;\n\n&lt;h2&gt;2. Standards&lt;/h2&gt;\n\n&lt;p&gt;Most processors follow the &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_754-2008&quot; rel=&quot;noreferrer&quot;&gt;IEEE-754&lt;/a&gt; standard but some use denormalized, or different standards\n. For example, there is a denormalized mode in IEEE-754 which allows representation of very small floating point numbers at the expense of precision. The following, however, will cover the normalized mode of IEEE-754 which is the typical mode of operation.&lt;/p&gt;\n\n&lt;p&gt;In the IEEE-754 standard, hardware designers are allowed any value of error/epsilon as long as it&apos;s less than one half of one unit in the last place, and the result only has to be less than one half of one unit in the last place for one operation. This explains why when there are repeated operations, the errors add up. For IEEE-754 double precision, this is the 54th bit, since 53 bits are used to represent the numeric part (normalized), also called the mantissa, of the floating point number (e.g. the 5.3 in 5.3e5). The next sections go into more detail on the causes of hardware error on various floating point operations.&lt;/p&gt;\n\n&lt;h2&gt;3. Cause of Rounding Error in Division&lt;/h2&gt;\n\n&lt;p&gt;The main cause of the error in floating point division is the division algorithms used to calculate the quotient. Most computer systems calculate division using multiplication by an inverse, mainly in &lt;code&gt;Z=X/Y&lt;/code&gt;, &lt;code&gt;Z = X * (1/Y)&lt;/code&gt;.  A division is computed iteratively i.e. each cycle computes some bits of the quotient until the desired precision is reached, which for IEEE-754 is anything with an error of less than one unit in the last place. The table of reciprocals of Y (1/Y) is known as the quotient selection table (QST) in the slow division, and the size in bits of the quotient selection table is usually the width of the radix, or a number of bits of the quotient computed in each iteration,  plus a few guard bits. For the IEEE-754 standard, double precision (64-bit), it would be the size of the radix of the divider, plus a few guard bits k, where &lt;code&gt;k&amp;gt;=2&lt;/code&gt;. So for example, a typical Quotient Selection Table for a divider that computes 2 bits of the quotient at a time (radix 4) would be &lt;code&gt;2+2= 4&lt;/code&gt; bits (plus a few optional bits). &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;3.1 Division Rounding Error: Approximation of Reciprocal&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;What reciprocals are in the quotient selection table depend on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Division_%28digital%29&quot; rel=&quot;noreferrer&quot;&gt;division method&lt;/a&gt;: slow division such as SRT division, or fast division such as Goldschmidt division; each entry is modified according to the division algorithm in an attempt to yield the lowest possible error. In any case, though, all reciprocals are &lt;em&gt;approximations&lt;/em&gt; of the actual reciprocal and introduce some element of error. Both slow division and fast division methods calculate the quotient iteratively, i.e. some number of bits of the quotient are calculated each step, then the result is subtracted from the dividend, and the divider repeats the steps until the error is less than one half of one unit in the last place. Slow division methods calculate a fixed number of digits of the quotient in each step and are usually less expensive to build, and fast division methods calculate a variable number of digits per step and are usually more expensive to build. The most important part of the division methods is that most of them rely upon repeated multiplication by an &lt;em&gt;approximation&lt;/em&gt; of a reciprocal, so they are prone to error.&lt;/p&gt;\n\n&lt;h2&gt;4. Rounding Errors in Other Operations: Truncation&lt;/h2&gt;\n\n&lt;p&gt;Another cause of the rounding errors in all operations are the different modes of truncation of the final answer that IEEE-754 allows. There&apos;s truncate, round-towards-zero, &lt;a href=&quot;http://en.wikipedia.org/wiki/Floating_point#Rounding_modes&quot; rel=&quot;noreferrer&quot;&gt;round-to-nearest (default),&lt;/a&gt; round-down, and round-up. All methods introduce an element of error of less than one unit in the last place for a single operation. Over time and repeated operations, truncation also adds cumulatively to the resultant error. This truncation error is especially problematic in exponentiation, which involves some form of repeated multiplication.&lt;/p&gt;\n\n&lt;h2&gt;5. Repeated Operations&lt;/h2&gt;\n\n&lt;p&gt;Since the hardware that does the floating point calculations only needs to yield a result with an error of less than one half of one unit in the last place for a single operation, the error will grow over repeated operations if not watched. This is the reason that in computations that require a bounded error, mathematicians use methods such as using the round-to-nearest &lt;a href=&quot;http://en.wikipedia.org/wiki/Floating_point#Rounding_modes&quot; rel=&quot;noreferrer&quot;&gt;even digit in the last place&lt;/a&gt; of IEEE-754, because, over time, the errors are more likely to cancel each other out, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Interval_arithmetic&quot; rel=&quot;noreferrer&quot;&gt;Interval Arithmetic&lt;/a&gt; combined with variations of the &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_754-2008#Rounding_rules&quot; rel=&quot;noreferrer&quot;&gt;IEEE 754 rounding modes&lt;/a&gt; to predict rounding errors, and correct them. Because of its low relative error compared to other rounding modes, round to nearest even digit (in the last place), is the default rounding mode of IEEE-754.&lt;/p&gt;\n\n&lt;p&gt;Note that the default rounding mode, round-to-nearest &lt;a href=&quot;http://en.wikipedia.org/wiki/Floating_point#Rounding_modes&quot; rel=&quot;noreferrer&quot;&gt;even digit in the last place&lt;/a&gt;, guarantees an error of less than one half of one unit in the last place for one operation. Using the truncation, round-up, and round down alone may result in an error that is greater than one half of one unit in the last place, but less than one unit in the last place, so these modes are not recommended unless they are used in Interval Arithmetic. &lt;/p&gt;\n\n&lt;h2&gt;6. Summary&lt;/h2&gt;\n\n&lt;p&gt;In short, the fundamental reason for the errors in floating point operations is a combination of the truncation in hardware, and the truncation of a reciprocal in the case of division. Since the IEEE-754 standard only requires an error of less than one half of one unit in the last place for a single operation, the floating point errors over repeated operations will add up unless corrected.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s broken in the exact same way the decimal (base-10) notation you learned in grade school and use every day is broken, just for base-2.&lt;/p&gt;\n&lt;p&gt;To understand, think about representing 1/3 as a decimal value. It&apos;s impossible to do exactly! The world will end before you finish writing the 3&apos;s after the decimal point, and so instead we write to some number of places and consider it sufficiently accurate.&lt;/p&gt;\n&lt;p&gt;In the same way, 1/10 (decimal 0.1) cannot be represented exactly in base 2 (binary) as a &quot;decimal&quot; value; a repeating pattern after the decimal point goes on forever. The value is not exact, and therefore you can&apos;t do exact math with it using normal floating point methods. Just like with base 10, there are other values that exhibit this problem as well.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Most answers here address this question in very dry, technical terms. I&apos;d like to address this in terms that normal human beings can understand.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Imagine that you are trying to slice up pizzas. You have a robotic pizza cutter that can cut pizza slices &lt;em&gt;exactly&lt;/em&gt; in half. It can halve a whole pizza, or it can halve an existing slice, but in any case, the halving is always exact.&lt;/p&gt;\n\n&lt;p&gt;That pizza cutter has very fine movements, and if you start with a whole pizza, then halve that, and continue halving the smallest slice each time, you can do the halving &lt;em&gt;53 times&lt;/em&gt; before the slice is too small for even its high-precision abilities. At that point, you can no longer halve that very thin slice, but must either include or exclude it as is.&lt;/p&gt;\n\n&lt;p&gt;Now, how would you piece all the slices in such a way that would add up to one-tenth (0.1) or one-fifth (0.2) of a pizza? Really think about it, and try working it out. You can even try to use a real pizza, if you have a mythical precision pizza cutter at hand. :-)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Most experienced programmers, of course, know the real answer, which is that there is no way to piece together an &lt;em&gt;exact&lt;/em&gt; tenth or fifth of the pizza using those slices, no matter how finely you slice them. You can do a pretty good approximation, and if you add up the approximation of 0.1 with the approximation of 0.2, you get a pretty good approximation of 0.3, but it&apos;s still just that, an approximation.&lt;/p&gt;\n\n&lt;p&gt;For double-precision numbers (which is the precision that allows you to halve your pizza 53 times), the numbers immediately less and greater than 0.1 are 0.09999999999999999167332731531132594682276248931884765625 and 0.1000000000000000055511151231257827021181583404541015625. The latter is quite a bit closer to 0.1 than the former, so a numeric parser will, given an input of 0.1, favour the latter.&lt;/p&gt;\n\n&lt;p&gt;(The difference between those two numbers is the &quot;smallest slice&quot; that we must decide to either include, which introduces an upward bias, or exclude, which introduces a downward bias. The technical term for that smallest slice is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_in_the_last_place&quot;&gt;ulp&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;In the case of 0.2, the numbers are all the same, just scaled up by a factor of 2. Again, we favour the value that&apos;s slightly higher than 0.2.&lt;/p&gt;\n\n&lt;p&gt;Notice that in both cases, the approximations for 0.1 and 0.2 have a slight upward bias. If we add enough of these biases in, they will push the number further and further away from what we want, and in fact, in the case of 0.1 + 0.2, the bias is high enough that the resulting number is no longer the closest number to 0.3.&lt;/p&gt;\n\n&lt;p&gt;In particular, 0.1 + 0.2 is really 0.1000000000000000055511151231257827021181583404541015625 + 0.200000000000000011102230246251565404236316680908203125 = 0.3000000000000000444089209850062616169452667236328125, whereas the number closest to 0.3 is actually 0.299999999999999988897769753748434595763683319091796875.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;P.S. Some programming languages also provide pizza cutters that can &lt;a href=&quot;https://en.wikipedia.org/wiki/Decimal_floating_point&quot;&gt;split slices into exact tenths&lt;/a&gt;. Although such pizza cutters are uncommon, if you do have access to one, you should use it when it&apos;s important to be able to get exactly one-tenth or one-fifth of a slice.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://qr.ae/mDcAq&quot;&gt;&lt;em&gt;(Originally posted on Quora.)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Floating point rounding errors. 0.1 cannot be represented as accurately in base-2 as in base-10 due to the missing prime factor of 5. Just as 1/3 takes an infinite number of digits to represent in decimal, but is &quot;0.1&quot; in base-3, 0.1 takes an infinite number of digits in base-2 where it does not in base-10. And computers don&apos;t have an infinite amount of memory.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;My answer is quite long, so I&apos;ve split it into three sections. Since the question is about floating point mathematics, I&apos;ve put the emphasis on what the machine actually does. I&apos;ve also made it specific to double (64 bit) precision, but the argument applies equally to any floating point arithmetic.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Preamble&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;An &lt;a href=&quot;http://en.wikipedia.org/wiki/Double-precision_floating-point_format&quot; rel=&quot;noreferrer&quot;&gt;IEEE 754 double-precision binary floating-point format (binary64)&lt;/a&gt; number represents a number of the form&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;value = (-1)^s * (1.m&lt;sub&gt;51&lt;/sub&gt;m&lt;sub&gt;50&lt;/sub&gt;...m&lt;sub&gt;2&lt;/sub&gt;m&lt;sub&gt;1&lt;/sub&gt;m&lt;sub&gt;0&lt;/sub&gt;)&lt;sub&gt;2&lt;/sub&gt; * 2&lt;sup&gt;e-1023&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;in 64 bits:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The first bit is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Sign_bit&quot; rel=&quot;noreferrer&quot;&gt;sign bit&lt;/a&gt;: &lt;code&gt;1&lt;/code&gt; if the number is negative, &lt;code&gt;0&lt;/code&gt; otherwise&lt;sup&gt;1&lt;/sup&gt;.&lt;/li&gt;\n&lt;li&gt;The next 11 bits are the &lt;a href=&quot;http://en.wikipedia.org/wiki/Exponentiation&quot; rel=&quot;noreferrer&quot;&gt;exponent&lt;/a&gt;, which is &lt;a href=&quot;http://en.wikipedia.org/wiki/Offset_binary&quot; rel=&quot;noreferrer&quot;&gt;offset&lt;/a&gt; by 1023. In other words, after reading the exponent bits from a double-precision number, 1023 must be subtracted to obtain the power of two.&lt;/li&gt;\n&lt;li&gt;The remaining 52 bits are the &lt;a href=&quot;http://en.wikipedia.org/wiki/Significand&quot; rel=&quot;noreferrer&quot;&gt;significand&lt;/a&gt; (or mantissa). In the mantissa, an &apos;implied&apos; &lt;code&gt;1.&lt;/code&gt; is always&lt;sup&gt;2&lt;/sup&gt; omitted since the most significant bit of any binary value is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; - IEEE 754 allows for the concept of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Signed_zero&quot; rel=&quot;noreferrer&quot;&gt;signed zero&lt;/a&gt; - &lt;code&gt;+0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt; are treated differently: &lt;code&gt;1 / (+0)&lt;/code&gt; is positive infinity; &lt;code&gt;1 / (-0)&lt;/code&gt; is negative infinity. For zero values, the mantissa and exponent bits are all zero. Note: zero values (+0 and -0) are explicitly not classed as denormal&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; - This is not the case for &lt;a href=&quot;http://en.wikipedia.org/wiki/Denormal_number&quot; rel=&quot;noreferrer&quot;&gt;denormal numbers&lt;/a&gt;, which have an offset exponent of zero (and an implied &lt;code&gt;0.&lt;/code&gt;). The range of denormal double precision numbers is d&lt;sub&gt;min&lt;/sub&gt;  |x|  d&lt;sub&gt;max&lt;/sub&gt;, where d&lt;sub&gt;min&lt;/sub&gt; (the smallest representable nonzero number) is 2&lt;sup&gt;-1023 - 51&lt;/sup&gt; ( 4.94 * 10&lt;sup&gt;-324&lt;/sup&gt;) and d&lt;sub&gt;max&lt;/sub&gt; (the largest denormal number, for which the mantissa consists entirely of &lt;code&gt;1&lt;/code&gt;s) is 2&lt;sup&gt;-1023 + 1&lt;/sup&gt; - 2&lt;sup&gt;-1023 - 51&lt;/sup&gt; ( 2.225 * 10&lt;sup&gt;-308&lt;/sup&gt;).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Turning a double precision number to binary&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Many online converters exist to convert a double precision floating point number to binary (e.g. at &lt;a href=&quot;http://www.binaryconvert.com/convert_double.html&quot; rel=&quot;noreferrer&quot;&gt;binaryconvert.com&lt;/a&gt;), but here is some sample C# code to obtain the IEEE 754 representation for a double precision number (I separate the three parts with colons (&lt;code&gt;:&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static string BinaryRepresentation(double value)\n{\n    long valueInLongType = BitConverter.DoubleToInt64Bits(value);\n    string bits = Convert.ToString(valueInLongType, 2);\n    string leadingZeros = new string(&apos;0&apos;, 64 - bits.Length);\n    string binaryRepresentation = leadingZeros + bits;\n\n    string sign = binaryRepresentation[0].ToString();\n    string exponent = binaryRepresentation.Substring(1, 11);\n    string mantissa = binaryRepresentation.Substring(12);\n\n    return string.Format(&quot;{0}:{1}:{2}&quot;, sign, exponent, mantissa);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Getting to the point: the original question&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;(Skip to the bottom for the TL;DR version)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/62118/cato-johnston&quot;&gt;Cato Johnston&lt;/a&gt; (the question asker) asked why 0.1 + 0.2 != 0.3.&lt;/p&gt;\n\n&lt;p&gt;Written in binary (with colons separating the three parts), the IEEE 754 representations of the values are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 =&amp;gt; 0:01111111011:1001100110011001100110011001100110011001100110011010\n0.2 =&amp;gt; 0:01111111100:1001100110011001100110011001100110011001100110011010\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the mantissa is composed of recurring digits of &lt;code&gt;0011&lt;/code&gt;. This is &lt;strong&gt;key&lt;/strong&gt; to why there is any error to the calculations - 0.1, 0.2 and 0.3 cannot be represented in binary &lt;strong&gt;precisely&lt;/strong&gt; in a &lt;em&gt;finite&lt;/em&gt; number of binary bits any more than 1/9, 1/3 or 1/7 can be represented precisely in &lt;em&gt;decimal digits&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also note that we can decrease the power in the exponent by 52 and shift the point in the binary representation to the right by 52 places (much like 10&lt;sup&gt;-3&lt;/sup&gt; * 1.23 == 10&lt;sup&gt;-5&lt;/sup&gt; * 123). This then enables us to represent the binary representation as the exact value that it represents in the form a * 2&lt;sup&gt;p&lt;/sup&gt;. where &apos;a&apos; is an integer.&lt;/p&gt;\n\n&lt;p&gt;Converting the exponents to decimal, removing the offset, and re-adding the implied &lt;code&gt;1&lt;/code&gt; (in square brackets), 0.1 and 0.2 are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 =&amp;gt; 2^-4 * [1].1001100110011001100110011001100110011001100110011010\n0.2 =&amp;gt; 2^-3 * [1].1001100110011001100110011001100110011001100110011010\nor\n0.1 =&amp;gt; 2^-56 * 7205759403792794 = 0.1000000000000000055511151231257827021181583404541015625\n0.2 =&amp;gt; 2^-55 * 7205759403792794 = 0.200000000000000011102230246251565404236316680908203125\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To add two numbers, the exponent needs to be the same, i.e.:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 =&amp;gt; 2^-3 *  0.1100110011001100110011001100110011001100110011001101(0)\n0.2 =&amp;gt; 2^-3 *  1.1001100110011001100110011001100110011001100110011010\nsum =  2^-3 * 10.0110011001100110011001100110011001100110011001100111\nor\n0.1 =&amp;gt; 2^-55 * 3602879701896397  = 0.1000000000000000055511151231257827021181583404541015625\n0.2 =&amp;gt; 2^-55 * 7205759403792794  = 0.200000000000000011102230246251565404236316680908203125\nsum =  2^-55 * 10808639105689191 = 0.3000000000000000166533453693773481063544750213623046875\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the sum is not of the form 2&lt;sup&gt;n&lt;/sup&gt; * 1.{bbb} we increase the exponent by one and shift the decimal (&lt;em&gt;binary&lt;/em&gt;) point to get:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum = 2^-2  * 1.0011001100110011001100110011001100110011001100110011(1)\n    = 2^-54 * 5404319552844595.5 = 0.3000000000000000166533453693773481063544750213623046875\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are now 53 bits in the mantissa (the 53rd is in square brackets in the line above). The default &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754-1985#Rounding_floating-point_numbers&quot; rel=&quot;noreferrer&quot;&gt;rounding mode&lt;/a&gt; for IEEE 754 is &apos;&lt;em&gt;Round to Nearest&lt;/em&gt;&apos; - i.e. if a number &lt;em&gt;x&lt;/em&gt; falls between two values &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, the value where the least significant bit is zero is chosen.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a = 2^-54 * 5404319552844595 = 0.299999999999999988897769753748434595763683319091796875\n  = 2^-2  * 1.0011001100110011001100110011001100110011001100110011\n\nx = 2^-2  * 1.0011001100110011001100110011001100110011001100110011(1)\n\nb = 2^-2  * 1.0011001100110011001100110011001100110011001100110100\n  = 2^-54 * 5404319552844596 = 0.3000000000000000444089209850062616169452667236328125\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; differ only in the last bit; &lt;code&gt;...0011&lt;/code&gt; + &lt;code&gt;1&lt;/code&gt; = &lt;code&gt;...0100&lt;/code&gt;. In this case, the value with the least significant bit of zero is &lt;em&gt;b&lt;/em&gt;, so the sum is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum = 2^-2  * 1.0011001100110011001100110011001100110011001100110100\n    = 2^-54 * 5404319552844596 = 0.3000000000000000444089209850062616169452667236328125\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;whereas the binary representation of 0.3 is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.3 =&amp;gt; 2^-2  * 1.0011001100110011001100110011001100110011001100110011\n    =  2^-54 * 5404319552844595 = 0.299999999999999988897769753748434595763683319091796875\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which only differs from the binary representation of the sum of 0.1 and 0.2 by 2&lt;sup&gt;-54&lt;/sup&gt;.&lt;/p&gt;\n\n&lt;p&gt;The binary representation of 0.1 and 0.2 are the &lt;em&gt;most accurate&lt;/em&gt; representations of the numbers allowable by IEEE 754. The addition of these representation, due to the default rounding mode, results in a value which differs only in the least-significant-bit.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Writing &lt;code&gt;0.1 + 0.2&lt;/code&gt; in a IEEE 754 binary representation (with colons separating the three parts) and comparing it to &lt;code&gt;0.3&lt;/code&gt;, this is (I&apos;ve put the distinct bits in square brackets):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 + 0.2 =&amp;gt; 0:01111111101:0011001100110011001100110011001100110011001100110[100]\n0.3       =&amp;gt; 0:01111111101:0011001100110011001100110011001100110011001100110[011]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Converted back to decimal, these values are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 + 0.2 =&amp;gt; 0.300000000000000044408920985006...\n0.3       =&amp;gt; 0.299999999999999988897769753748...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The difference is exactly 2&lt;sup&gt;-54&lt;/sup&gt;, which is ~5.5511151231258 × 10&lt;sup&gt;-17&lt;/sup&gt; - insignificant (for many applications) when compared to the original values.&lt;/p&gt;\n\n&lt;p&gt;Comparing the last few bits of a floating point number is inherently dangerous, as anyone who reads the famous &quot;&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot; rel=&quot;noreferrer&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&quot; (which covers all the major parts of this answer) will know.&lt;/p&gt;\n\n&lt;p&gt;Most calculators use additional &lt;a href=&quot;https://en.wikipedia.org/wiki/Guard_digit&quot; rel=&quot;noreferrer&quot;&gt;guard digits&lt;/a&gt; to get around this problem, which is how &lt;code&gt;0.1 + 0.2&lt;/code&gt; would give &lt;code&gt;0.3&lt;/code&gt;: the final few bits are rounded.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to the other correct answers, you may want to consider scaling your values to avoid problems with floating-point arithmetic. &lt;/p&gt;\n\n&lt;p&gt;For example: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var result = 1.0 + 2.0;     // result === 3.0 returns true\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... instead of:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var result = 0.1 + 0.2;     // result === 0.3 returns false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The expression &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; in JavaScript, but fortunately integer arithmetic in floating-point is exact, so decimal representation errors can be avoided by scaling.&lt;/p&gt;\n\n&lt;p&gt;As a practical example, to avoid floating-point problems where accuracy is paramount, it is recommended&lt;sup&gt;1&lt;/sup&gt; to handle money as an integer representing the number of cents: &lt;code&gt;2550&lt;/code&gt; cents instead of &lt;code&gt;25.50&lt;/code&gt; dollars. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Douglas Crockford: &lt;a href=&quot;http://books.google.com/books?id=PXa2bby0oQ0C&amp;amp;pg=PA105&amp;amp;dq=douglas+crockford+javascript+good+parts+dollar+values+can+be+converted&amp;amp;rview=1&amp;amp;cd=1#v=onepage&amp;amp;q=&amp;amp;f=false&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;JavaScript: The Good Parts&lt;/strong&gt;: Appendix A - Awful Parts (page 105)&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Floating point numbers stored in the computer consist of two parts, an integer and an exponent that the base is taken to and multiplied by the integer part.&lt;/p&gt;\n\n&lt;p&gt;If the computer were working in base 10, &lt;code&gt;0.1&lt;/code&gt; would be &lt;code&gt;1 x 10¹&lt;/code&gt;, &lt;code&gt;0.2&lt;/code&gt; would be &lt;code&gt;2 x 10¹&lt;/code&gt;, and &lt;code&gt;0.3&lt;/code&gt; would be &lt;code&gt;3 x 10¹&lt;/code&gt;. Integer math is easy and exact, so adding &lt;code&gt;0.1 + 0.2&lt;/code&gt; will obviously result in &lt;code&gt;0.3&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Computers don&apos;t usually work in base 10, they work in base 2. You can still get exact results for some values, for example &lt;code&gt;0.5&lt;/code&gt; is &lt;code&gt;1 x 2¹&lt;/code&gt; and &lt;code&gt;0.25&lt;/code&gt; is &lt;code&gt;1 x 2²&lt;/code&gt;, and adding them results in &lt;code&gt;3 x 2²&lt;/code&gt;, or &lt;code&gt;0.75&lt;/code&gt;. Exactly.&lt;/p&gt;\n\n&lt;p&gt;The problem comes with numbers that can be represented exactly in base 10, but not in base 2. Those numbers need to be rounded to their closest equivalent. Assuming the very common IEEE 64-bit floating point format, the closest number to &lt;code&gt;0.1&lt;/code&gt; is &lt;code&gt;3602879701896397 x 2&lt;/code&gt;, and the closest number to &lt;code&gt;0.2&lt;/code&gt; is &lt;code&gt;7205759403792794 x 2&lt;/code&gt;; adding them together results in &lt;code&gt;10808639105689191 x 2&lt;/code&gt;, or an exact decimal value of &lt;code&gt;0.3000000000000000444089209850062616169452667236328125&lt;/code&gt;. Floating point numbers are generally rounded for display.&lt;/p&gt;\n    ","\n&lt;p&gt;Floating point rounding error.  From &lt;a href=&quot;https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot; rel=&quot;noreferrer&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Squeezing infinitely many real numbers into a finite number of bits requires an approximate representation. Although there are infinitely many integers, in most programs the result of integer computations can be stored in 32 bits. In contrast, given any fixed number of bits, most calculations with real numbers will produce quantities that cannot be exactly represented using that many bits. Therefore the result of a floating-point calculation must often be rounded in order to fit back into its finite representation. This rounding error is the characteristic feature of floating-point computation.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1089018/why-cant-decimal-numbers-be-represented-exactly-in-binary&quot;&gt;In short&lt;/a&gt; it&apos;s because:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Floating point numbers cannot represent all decimals precisely in binary&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So just like 10/3 which &lt;a href=&quot;https://www.exploringbinary.com/why-0-point-1-does-not-exist-in-floating-point/&quot; rel=&quot;noreferrer&quot;&gt;does not exist&lt;/a&gt; in base 10 precisely (it will be 3.33... recurring), in the same way 1/10 doesn&apos;t exist in binary.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;So what? How to deal with it?&lt;/strong&gt; Is there any workaround?&lt;/p&gt;\n&lt;p&gt;In order to offer The &lt;strong&gt;best solution&lt;/strong&gt; I can say I discovered following method:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;parseFloat((0.1 + 0.2).toFixed(10)) =&amp;gt; Will return 0.3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let me explain why it&apos;s the best solution.\nAs others mentioned in above answers it&apos;s a good idea to use ready to use Javascript toFixed() function to solve the problem. But most likely you&apos;ll encounter with some problems.&lt;/p&gt;\n&lt;p&gt;Imagine you are going to add up two float numbers like &lt;code&gt;0.2&lt;/code&gt; and &lt;code&gt;0.7&lt;/code&gt; here it is: &lt;code&gt;0.2 + 0.7 = 0.8999999999999999&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Your expected result was &lt;code&gt;0.9&lt;/code&gt; it means you need a result with 1 digit precision in this case.\nSo you should have used &lt;code&gt;(0.2 + 0.7).tofixed(1)&lt;/code&gt;\nbut you can&apos;t just give a certain parameter to toFixed() since it depends on the given number, for instance&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.22 + 0.7 = 0.9199999999999999\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this example you need 2 digits precision so it should be &lt;code&gt;toFixed(2)&lt;/code&gt;, so what should be the paramter to fit every given float number?&lt;/p&gt;\n&lt;p&gt;You might say let it be 10 in every situation then:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;(0.2 + 0.7).toFixed(10) =&amp;gt; Result will be &quot;0.9000000000&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Damn! What are you going to do with those unwanted zeros after 9?\nIt&apos;s the time to convert it to float to make it as you desire:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;parseFloat((0.2 + 0.7).toFixed(10)) =&amp;gt; Result will be 0.9\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now that you found the solution, it&apos;s better to offer it as a function like this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;function floatify(number){\n           return parseFloat((number).toFixed(10));\n        }\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s try it yourself:\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;floatify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;){\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;((number).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n    }\n \n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addUp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; number1 = +$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#number1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; number2 = +$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#number2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; unexpectedResult = number1 + number2;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expectedResult = &lt;span class=&quot;hljs-title function_&quot;&gt;floatify&lt;/span&gt;(number1 + number2);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#unexpectedResult&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(unexpectedResult);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#expectedResult&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(expectedResult);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;addUp&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;input&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#expectedResult&lt;/span&gt;{\n&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: green;\n}\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#unexpectedResult&lt;/span&gt;{\n&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;number1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.2&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;addUp()&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onkeyup&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;addUp()&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; +\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;number2&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.7&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;addUp()&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onkeyup&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;addUp()&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; =\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Expected Result: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;expectedResult&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Unexpected Result: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;unexpectedResult&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You can use it this way:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;var x = 0.2 + 0.7;\nfloatify(x);  =&amp;gt; Result: 0.9\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As &lt;a href=&quot;https://www.w3schools.com/js/js_numbers.asp&quot; rel=&quot;noreferrer&quot;&gt;W3SCHOOLS&lt;/a&gt; suggests there is another solution too, you can multiply and divide to solve the problem above:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;var x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keep in mind that &lt;code&gt;(0.2 + 0.1) * 10 / 10&lt;/code&gt; won&apos;t work at all although it seems the same!\nI prefer the first solution since I can apply it as a function which converts the input float to accurate output float.&lt;/p&gt;\n    ","\n&lt;p&gt;My workaround:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function add(a, b, precision) {\n    var x = Math.pow(10, precision || 2);\n    return (Math.round(a * x) + Math.round(b * x)) / x;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;precision&lt;/em&gt; refers to the number of digits you want to preserve after the decimal point during addition.&lt;/p&gt;\n    ","\n&lt;h3&gt;No, not broken, but most decimal fractions must be approximated&lt;/h3&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Floating point arithmetic &lt;em&gt;is&lt;/em&gt; exact, unfortunately, it doesn&apos;t match up well with our usual base-10 number representation, so it turns out we are often giving it input that is slightly off from what we wrote.&lt;/p&gt;\n\n&lt;p&gt;Even simple numbers like 0.01, 0.02, 0.03, 0.04 ... 0.24 are not representable exactly as binary fractions. If you count up 0.01, .02, .03 ..., not until you get to 0.25 will you get the first fraction representable in base&lt;sub&gt;2&lt;/sub&gt;.  If you tried that using FP, your 0.01 would have been slightly off, so the only way to add 25 of them up to a nice exact 0.25 would have required a long chain of causality involving guard bits and rounding. It&apos;s hard to predict so we throw up our hands and say &lt;em&gt;&quot;FP is inexact&quot;,&lt;/em&gt; but that&apos;s not really true. &lt;/p&gt;\n\n&lt;p&gt;We constantly give the FP hardware something that seems simple in base 10 but is a repeating fraction in base 2.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;How did this happen?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When we write in decimal, every fraction (specifically, every &lt;em&gt;terminating decimal)&lt;/em&gt; is a rational number of the form &lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\n&lt;em&gt;a / (2&lt;sup&gt;n&lt;/sup&gt; x 5&lt;sup&gt;m&lt;/sup&gt;)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;In binary, we only get the &lt;em&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; term, that is:&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;a / 2&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;So in decimal, we can&apos;t represent &lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;3&lt;/sub&gt;. Because base 10 includes 2 as a prime factor, every number we can write as a binary fraction &lt;em&gt;also&lt;/em&gt; can be written as a base 10 fraction. However, hardly anything we write as a base&lt;sub&gt;10&lt;/sub&gt; fraction is representable in binary. In the range from 0.01, 0.02, 0.03 ... 0.99, only &lt;em&gt;three&lt;/em&gt; numbers can be represented in our FP format: 0.25, 0.50, and 0.75, because they are 1/4, 1/2, and 3/4, all numbers with a prime factor using only the 2&lt;sup&gt;n&lt;/sup&gt; term.&lt;/p&gt;\n\n&lt;p&gt;In base&lt;sub&gt;10&lt;/sub&gt; we can&apos;t represent &lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;3&lt;/sub&gt;. But in binary, we can&apos;t do &lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;10&lt;/sub&gt; &lt;em&gt;or&lt;/em&gt; &lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;3&lt;/sub&gt;.&lt;/p&gt;\n\n&lt;p&gt;So while every binary fraction can be written in decimal, the reverse is not true. And in fact most decimal fractions repeat in binary.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;Dealing with it&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Developers are usually instructed to do &lt;em&gt;&amp;lt; epsilon&lt;/em&gt; comparisons, better advice might be to round to integral values (in the C library: round() and roundf(), i.e., stay in the FP format) and then compare. Rounding to a specific decimal fraction length solves most problems with output.&lt;/p&gt;\n\n&lt;p&gt;Also, on real number-crunching problems (the problems that FP was invented for on early, frightfully expensive computers) the physical constants of the universe and all other measurements are only known to a relatively small number of significant figures, so the entire problem space was &quot;inexact&quot; anyway. FP &quot;accuracy&quot; isn&apos;t a problem in this kind of application.&lt;/p&gt;\n\n&lt;p&gt;The whole issue really arises when people try to use FP for bean counting. It does work for that, but only if you stick to integral values, which kind of defeats the point of using it. &lt;em&gt;This is why we have all those decimal fraction software libraries.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;I love the Pizza answer by &lt;a href=&quot;https://stackoverflow.com/users/13/chris-jester-young&quot;&gt;Chris&lt;/a&gt;, because it describes the actual problem, not just the usual handwaving about &quot;inaccuracy&quot;. If FP were simply &quot;inaccurate&quot;, we could &lt;em&gt;fix&lt;/em&gt; that and would have done it decades ago. The reason we haven&apos;t is because the FP format is compact and fast and it&apos;s the best way to crunch a lot of numbers. Also, it&apos;s a legacy from the space age and arms race and early attempts to solve big problems with very slow computers using small memory systems. (Sometimes, individual &lt;em&gt;magnetic cores&lt;/em&gt; for 1-bit storage, but that&apos;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnetic-core_memory&quot; rel=&quot;noreferrer&quot;&gt;another story.&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Conclusion&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If you are just counting beans at a bank, software solutions that use decimal string representations in the first place work perfectly well. But you can&apos;t do quantum chromodynamics or aerodynamics that way.&lt;/p&gt;\n    ","\n&lt;p&gt;A lot of good answers have been posted, but I&apos;d like to append one more.&lt;/p&gt;\n\n&lt;p&gt;Not all numbers can be represented via &lt;strong&gt;floats&lt;/strong&gt;/&lt;strong&gt;doubles&lt;/strong&gt;\nFor example, the number &quot;0.2&quot; will be represented as &quot;0.200000003&quot; in single precision in IEEE754 float point standard.&lt;/p&gt;\n\n&lt;p&gt;Model for store real numbers under the hood represent float numbers as&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/BRvSp.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BRvSp.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Even though you can type &lt;code&gt;0.2&lt;/code&gt; easily, &lt;code&gt;FLT_RADIX&lt;/code&gt; and &lt;code&gt;DBL_RADIX&lt;/code&gt; is 2; not 10 for a computer with FPU which uses &quot;IEEE Standard for Binary Floating-Point Arithmetic (ISO/IEEE Std 754-1985)&quot;.&lt;/p&gt;\n\n&lt;p&gt;So it is a bit hard to represent such numbers exactly. Even if you specify this variable explicitly without any intermediate calculation.&lt;/p&gt;\n    ","\n&lt;p&gt;Some statistics related to this famous double precision question.&lt;/p&gt;\n\n&lt;p&gt;When adding all values (&lt;em&gt;a + b&lt;/em&gt;) using a step of 0.1 (from 0.1 to 100) we have &lt;strong&gt;~15% chance of precision error&lt;/strong&gt;. Note that the error could result in slightly bigger or smaller values.\nHere are some examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 + 0.2 = 0.30000000000000004 (BIGGER)\n0.1 + 0.7 = 0.7999999999999999 (SMALLER)\n...\n1.7 + 1.9 = 3.5999999999999996 (SMALLER)\n1.7 + 2.2 = 3.9000000000000004 (BIGGER)\n...\n3.2 + 3.6 = 6.800000000000001 (BIGGER)\n3.2 + 4.4 = 7.6000000000000005 (BIGGER)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When subtracting all values (&lt;em&gt;a - b&lt;/em&gt; where &lt;em&gt;a &amp;gt; b&lt;/em&gt;) using a step of 0.1 (from 100 to 0.1) we have &lt;strong&gt;~34% chance of precision error&lt;/strong&gt;.\nHere are some examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.6 - 0.2 = 0.39999999999999997 (SMALLER)\n0.5 - 0.4 = 0.09999999999999998 (SMALLER)\n...\n2.1 - 0.2 = 1.9000000000000001 (BIGGER)\n2.0 - 1.9 = 0.10000000000000009 (BIGGER)\n...\n100 - 99.9 = 0.09999999999999432 (SMALLER)\n100 - 99.8 = 0.20000000000000284 (BIGGER)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;*15% and 34% are indeed huge, so always use BigDecimal when precision is of big importance. With 2 decimal digits (step 0.01) the situation worsens a bit more (18% and 36%).&lt;/p&gt;\n    ","\n&lt;p&gt;Given that nobody has mentioned this...&lt;/p&gt;\n\n&lt;p&gt;Some high level languages such as Python and Java come with tools to overcome binary floating point limitations. For example:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Python&apos;s &lt;a href=&quot;https://docs.python.org/dev/library/decimal.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;decimal&lt;/code&gt; module&lt;/a&gt; and Java&apos;s &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt; class&lt;/a&gt;, that represent numbers internally with decimal notation (as opposed to binary notation). Both have limited precision, so they are still error prone, however they solve most common problems with binary floating point arithmetic.&lt;/p&gt;\n\n&lt;p&gt;Decimals are very nice when dealing with money: ten cents plus twenty cents are always exactly thirty cents:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 0.1 + 0.2 == 0.3\nFalse\n&amp;gt;&amp;gt;&amp;gt; Decimal(&apos;0.1&apos;) + Decimal(&apos;0.2&apos;) == Decimal(&apos;0.3&apos;)\nTrue\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Python&apos;s &lt;code&gt;decimal&lt;/code&gt; module is based on &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_854-1987&quot; rel=&quot;noreferrer&quot;&gt;IEEE standard 854-1987&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Python&apos;s &lt;a href=&quot;https://docs.python.org/dev/library/fractions.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fractions&lt;/code&gt; module&lt;/a&gt; and Apache Common&apos;s &lt;a href=&quot;https://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/fraction/BigFraction.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;BigFraction&lt;/code&gt; class&lt;/a&gt;. Both represent rational numbers as &lt;code&gt;(numerator, denominator)&lt;/code&gt; pairs and they may give more accurate results than decimal floating point arithmetic.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Neither of these solutions is perfect (especially if we look at performances, or if we require a very high precision), but still they solve a great number of problems with binary floating point arithmetic.&lt;/p&gt;\n    ","\n&lt;p&gt;Did you try the duct tape solution?&lt;/p&gt;\n\n&lt;p&gt;Try to determine when errors occur and fix them with short if statements, it&apos;s not pretty but for some problems it is the only solution and this is one of them.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; if( (n * 0.1) &amp;lt; 100.0 ) { return n * 0.1 - 0.000000000000001 ;}\n                    else { return n * 0.1 + 0.000000000000001 ;}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I had the same problem in a scientific simulation project in c#, and I can tell you that if you ignore the butterfly effect it&apos;s gonna turn to a big fat dragon and bite you in the a**&lt;/p&gt;\n    ","\n&lt;p&gt;Those weird numbers appear because computers use binary(base 2) number system for calculation purposes, while we use decimal(base 10).&lt;/p&gt;\n\n&lt;p&gt;There are a majority of fractional numbers that cannot be represented precisely either in binary or in decimal or both. Result - A rounded up (but precise) number results.&lt;/p&gt;\n    ","\n&lt;p&gt;Many of this question&apos;s numerous duplicates ask about the effects of floating point rounding on specific numbers. In practice, it is easier to get a feeling for how it works by looking at exact results of calculations of interest rather than by just reading about it. Some languages provide ways of doing that - such as converting a &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;BigDecimal&lt;/code&gt; in Java.&lt;/p&gt;\n\n&lt;p&gt;Since this is a language-agnostic question, it needs language-agnostic tools, such as a &lt;a href=&quot;http://www.exploringbinary.com/floating-point-converter/&quot; rel=&quot;noreferrer&quot;&gt;Decimal to Floating-Point Converter&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Applying it to the numbers in the question, treated as doubles: &lt;/p&gt;\n\n&lt;p&gt;0.1 converts to 0.1000000000000000055511151231257827021181583404541015625, &lt;/p&gt;\n\n&lt;p&gt;0.2 converts to 0.200000000000000011102230246251565404236316680908203125, &lt;/p&gt;\n\n&lt;p&gt;0.3 converts to 0.299999999999999988897769753748434595763683319091796875, and &lt;/p&gt;\n\n&lt;p&gt;0.30000000000000004 converts to 0.3000000000000000444089209850062616169452667236328125.&lt;/p&gt;\n\n&lt;p&gt;Adding the first two numbers manually or in a decimal calculator such as &lt;a href=&quot;https://www.mathsisfun.com/calculator-precision.html&quot; rel=&quot;noreferrer&quot;&gt;Full Precision Calculator&lt;/a&gt;, shows the exact sum of the actual inputs is 0.3000000000000000166533453693773481063544750213623046875. &lt;/p&gt;\n\n&lt;p&gt;If it were rounded down to the equivalent of 0.3 the rounding error would be 0.0000000000000000277555756156289135105907917022705078125. Rounding up to the equivalent of 0.30000000000000004 also gives rounding error 0.0000000000000000277555756156289135105907917022705078125. The round-to-even tie breaker applies.&lt;/p&gt;\n\n&lt;p&gt;Returning to the floating point converter, the raw hexadecimal for 0.30000000000000004 is 3fd3333333333334, which ends in an even digit and therefore is the correct result.&lt;/p&gt;\n    ","\n&lt;p&gt;Can I just add; people always assume this to be a computer problem, but if you count with your hands (base 10), you can&apos;t get &lt;code&gt;(1/3+1/3=2/3)=true&lt;/code&gt; unless you have infinity to add 0.333... to 0.333... so just as with the &lt;code&gt;(1/10+2/10)!==3/10&lt;/code&gt; problem in base 2, you truncate it to 0.333 + 0.333 = 0.666 and probably round it to 0.667 which would be also be technically inaccurate.&lt;/p&gt;\n\n&lt;p&gt;Count in ternary, and thirds are not a problem though - maybe some race with 15 fingers on each hand would ask why your decimal math was broken...&lt;/p&gt;\n    ","\n&lt;p&gt;The kind of floating-point math that can be implemented in a digital computer necessarily uses an approximation of the real numbers and operations on them. (The &lt;em&gt;standard&lt;/em&gt; version runs to over fifty pages of documentation and has a committee to deal with its errata and further refinement.)&lt;/p&gt;\n\n&lt;p&gt;This approximation is a mixture of approximations of different kinds, each of which can either be ignored or carefully accounted for due to its specific manner of deviation from exactitude. It also involves a number of explicit exceptional cases at both the hardware and software levels that most people walk right past while pretending not to notice.&lt;/p&gt;\n\n&lt;p&gt;If you need infinite precision (using the number π, for example, instead of one of its many shorter stand-ins), you should write or use a symbolic math program instead.&lt;/p&gt;\n\n&lt;p&gt;But if you&apos;re okay with the idea that sometimes floating-point math is fuzzy in value and logic and errors can accumulate quickly, and you can write your requirements and tests to allow for that, then your code can frequently get by with what&apos;s in your FPU.&lt;/p&gt;\n    ","\n&lt;p&gt;Just for fun, I played with the representation of floats, following the definitions from the Standard C99 and I wrote the code below.&lt;/p&gt;\n\n&lt;p&gt;The code prints the binary representation of floats in 3 separated groups&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SIGN EXPONENT FRACTION\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and after that it prints a sum, that, when summed with enough precision, it will show the value that really exists in hardware.&lt;/p&gt;\n\n&lt;p&gt;So when you write &lt;code&gt;float x = 999...&lt;/code&gt;, the compiler will transform that number in a bit representation printed by the function &lt;code&gt;xx&lt;/code&gt; such that the sum printed by the function &lt;code&gt;yy&lt;/code&gt; be equal to the given number.&lt;/p&gt;\n\n&lt;p&gt;In reality, this sum is only an approximation.  For the number 999,999,999  the compiler will insert in bit representation of the float the number 1,000,000,000&lt;/p&gt;\n\n&lt;p&gt;After the code I attach a console session, in which I compute the sum of terms for both constants (minus PI and 999999999) that really exists in hardware, inserted there by the compiler.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;limits.h&amp;gt;\n\nvoid\nxx(float *x)\n{\n    unsigned char i = sizeof(*x)*CHAR_BIT-1;\n    do {\n        switch (i) {\n        case 31:\n             printf(&quot;sign:&quot;);\n             break;\n        case 30:\n             printf(&quot;exponent:&quot;);\n             break;\n        case 23:\n             printf(&quot;fraction:&quot;);\n             break;\n\n        }\n        char b=(*(unsigned long long*)x&amp;amp;((unsigned long long)1&amp;lt;&amp;lt;i))!=0;\n        printf(&quot;%d &quot;, b);\n    } while (i--);\n    printf(&quot;\\n&quot;);\n}\n\nvoid\nyy(float a)\n{\n    int sign=!(*(unsigned long long*)&amp;amp;a&amp;amp;((unsigned long long)1&amp;lt;&amp;lt;31));\n    int fraction = ((1&amp;lt;&amp;lt;23)-1)&amp;amp;(*(int*)&amp;amp;a);\n    int exponent = (255&amp;amp;((*(int*)&amp;amp;a)&amp;gt;&amp;gt;23))-127;\n\n    printf(sign?&quot;positive&quot; &quot; ( 1+&quot;:&quot;negative&quot; &quot; ( 1+&quot;);\n    unsigned int i = 1&amp;lt;&amp;lt;22;\n    unsigned int j = 1;\n    do {\n        char b=(fraction&amp;amp;i)!=0;\n        b&amp;amp;&amp;amp;(printf(&quot;1/(%d) %c&quot;, 1&amp;lt;&amp;lt;j, (fraction&amp;amp;(i-1))?&apos;+&apos;:&apos;)&apos; ), 0);\n    } while (j++, i&amp;gt;&amp;gt;=1);\n\n    printf(&quot;*2^%d&quot;, exponent);\n    printf(&quot;\\n&quot;);\n}\n\nvoid\nmain()\n{\n    float x=-3.14;\n    float y=999999999;\n    printf(&quot;%lu\\n&quot;, sizeof(x));\n    xx(&amp;amp;x);\n    xx(&amp;amp;y);\n    yy(x);\n    yy(y);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Here is a console session in which I compute the real value of the float that exists in hardware.  I used &lt;code&gt;bc&lt;/code&gt; to print the sum of terms outputted by the main program.  One can insert that sum in python &lt;code&gt;repl&lt;/code&gt; or something similar also.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-- .../terra1/stub\n@ qemacs f.c\n-- .../terra1/stub\n@ gcc f.c\n-- .../terra1/stub\n@ ./a.out\nsign:1 exponent:1 0 0 0 0 0 0 fraction:0 1 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 1 1\nsign:0 exponent:1 0 0 1 1 1 0 fraction:0 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 0 0\nnegative ( 1+1/(2) +1/(16) +1/(256) +1/(512) +1/(1024) +1/(2048) +1/(8192) +1/(32768) +1/(65536) +1/(131072) +1/(4194304) +1/(8388608) )*2^1\npositive ( 1+1/(2) +1/(4) +1/(16) +1/(32) +1/(64) +1/(512) +1/(1024) +1/(4096) +1/(16384) +1/(32768) +1/(262144) +1/(1048576) )*2^29\n-- .../terra1/stub\n@ bc\nscale=15\n( 1+1/(2) +1/(4) +1/(16) +1/(32) +1/(64) +1/(512) +1/(1024) +1/(4096) +1/(16384) +1/(32768) +1/(262144) +1/(1048576) )*2^29\n999999999.999999446351872\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s it.  The value of 999999999 is in fact&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;999999999.999999446351872\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also check with &lt;code&gt;bc&lt;/code&gt; that -3.14 is also perturbed.  Do not forget to set a &lt;code&gt;scale&lt;/code&gt; factor in &lt;code&gt;bc&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The displayed sum is what inside the hardware.  The value you obtain by computing it depends on the scale you set.  I did set the &lt;code&gt;scale&lt;/code&gt; factor to 15.  Mathematically, with infinite precision, it seems it is 1,000,000,000.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0485/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Since Python 3.5&lt;/a&gt; you can use &lt;a href=&quot;https://docs.python.org/3/library/math.html#math.isclose&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;math.isclose()&lt;/code&gt;&lt;/a&gt; function for testing approximate equality:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import math\n&amp;gt;&amp;gt;&amp;gt; math.isclose(0.1 + 0.2, 0.3)\nTrue\n&amp;gt;&amp;gt;&amp;gt; 0.1 + 0.2 == 0.3\nFalse\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The trap with floating point numbers is that they look like decimal but they work in binary.&lt;/p&gt;\n&lt;p&gt;The only prime factor of 2 is 2, while 10 has prime factors of 2 and 5. The result of this is that every number that can be written exactly as a binary fraction can also be written exactly as a decimal fraction but only a subset of numbers that can be written as decimal fractions can be written as binary fractions.&lt;/p&gt;\n&lt;p&gt;A floating point number is essentially a binary fraction with a limited number of significant digits. If you go past those significant digits then the results will be rounded.&lt;/p&gt;\n&lt;p&gt;When you type a literal in your code or call the function to parse a floating point number to a string, it expects a decimal number and it stores a binary approximation of that decimal number in the variable.&lt;/p&gt;\n&lt;p&gt;When you print a floating point number or call the function to convert one to a string it prints a decimal approximation of the floating point number. It &lt;em&gt;is&lt;/em&gt; possible to convert a binary number to decimal exactly, but no language I&apos;m aware of does that by default when converting to a string*. Some languages use a fixed number of significant digits, others use the shortest string that will &quot;round trip&quot; back to the same floating point value.&lt;/p&gt;\n&lt;p&gt;* Python &lt;em&gt;does&lt;/em&gt; convert exactly when converting a floating point number to a &quot;decimal.Decimal&quot;. This is the easiest way I know of to obtain the exact decimal equivalent of a floating point number.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way to look at this: Used are 64 bits to represent numbers. As consequence there is no way more than 2**64 = 18,446,744,073,709,551,616 different numbers can be precisely represented. &lt;/p&gt;\n\n&lt;p&gt;However, Math says there are already infinitely many decimals between 0 and 1. IEE 754 defines an encoding to use these 64 bits efficiently for a much larger number space plus NaN and +/- Infinity, so there are gaps between accurately represented numbers filled with numbers only approximated. &lt;/p&gt;\n\n&lt;p&gt;Unfortunately 0.3 sits in a gap.&lt;/p&gt;\n    ","\n&lt;p&gt;Floating point numbers are represented, at the hardware level, as fractions of binary numbers (base 2). For example, the decimal fraction:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.125\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;has the value 1/10 + 2/100 + 5/1000 and, in the same way, the binary fraction:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.001\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;has the value 0/2 + 0/4 + 1/8. These two fractions have the same value, the only difference is that the first is a decimal fraction, the second is a binary fraction.&lt;/p&gt;\n&lt;p&gt;Unfortunately, most decimal fractions cannot have exact representation in binary fractions. Therefore, in general, the floating point numbers you give are only approximated to binary fractions to be stored in the machine.&lt;/p&gt;\n&lt;p&gt;The problem is easier to approach in base 10. Take for example, the fraction 1/3. You can approximate it to a decimal fraction:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or better,&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.33\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or better,&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.333\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;etc. No matter how many decimal places you write, the result is never exactly 1/3, but it is an estimate that always comes closer.&lt;/p&gt;\n&lt;p&gt;Likewise, no matter how many base 2 decimal places you use, the decimal value 0.1 cannot be represented exactly as a binary fraction. In base 2, 1/10 is the following periodic number:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.0001100110011001100110011001100110011001100110011 ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Stop at any finite amount of bits, and you&apos;ll get an approximation.&lt;/p&gt;\n&lt;p&gt;For Python, on a typical machine, 53 bits are used for the precision of a float, so the value stored when you enter the decimal 0.1 is the binary fraction.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.00011001100110011001100110011001100110011001100110011010\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is close, but not exactly equal, to 1/10.&lt;/p&gt;\n&lt;p&gt;It&apos;s easy to forget that the stored value is an approximation of the original decimal fraction, due to the way floats are displayed in the interpreter. Python only displays a decimal approximation of the value stored in binary. If Python were to output the true decimal value of the binary approximation stored for 0.1, it would output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.1000000000000000055511151231257827021181583404541015625&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a lot more decimal places than most people would expect, so Python displays a rounded value to improve readability:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is important to understand that in reality this is an illusion: the stored value is not exactly 1/10, it is simply on the display that the stored value is rounded. This becomes evident as soon as you perform arithmetic operations with these values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.30000000000000004&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This behavior is inherent to the very nature of the machine&apos;s floating-point representation: it is not a bug in Python, nor is it a bug in your code. You can observe the same type of behavior in all other languages that use hardware support for calculating floating point numbers (although some languages do not make the difference visible by default, or not in all display modes).&lt;/p&gt;\n&lt;p&gt;Another surprise is inherent in this one. For example, if you try to round the value 2.675 to two decimal places, you will get&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2.675&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;2.67&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The documentation for the round() primitive indicates that it rounds to the nearest value away from zero. Since the decimal fraction is exactly halfway between 2.67 and 2.68, you should expect to get (a binary approximation of) 2.68. This is not the case, however, because when the decimal fraction 2.675 is converted to a float, it is stored by an approximation whose exact value is :&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;2.67499999999999982236431605997495353221893310546875\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since the approximation is slightly closer to 2.67 than 2.68, the rounding is down.&lt;/p&gt;\n&lt;p&gt;If you are in a situation where rounding decimal numbers halfway down matters, you should use the decimal module. By the way, the decimal module also provides a convenient way to &quot;see&quot; the exact value stored for any float.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; decimal &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Decimal\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Decimal (&lt;span class=&quot;hljs-number&quot;&gt;2.675&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Decimal (&lt;span class=&quot;hljs-string&quot;&gt;&apos;2.67499999999999982236431605997495353221893310546875&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Another consequence of the fact that 0.1 is not exactly stored in 1/10 is that the sum of ten values of 0.1 does not give 1.0 either:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt; + = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;\n...&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.9999999999999999&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The arithmetic of binary floating point numbers holds many such surprises. The problem with &quot;0.1&quot; is explained in detail below, in the section &quot;Representation errors&quot;. See The Perils of Floating Point for a more complete list of such surprises.&lt;/p&gt;\n&lt;p&gt;It is true that there is no simple answer, however do not be overly suspicious of floating virtula numbers! Errors, in Python, in floating-point number operations are due to the underlying hardware, and on most machines are no more than 1 in 2 ** 53 per operation. This is more than necessary for most tasks, but you should keep in mind that these are not decimal operations, and every operation on floating point numbers may suffer from a new error.&lt;/p&gt;\n&lt;p&gt;Although pathological cases exist, for most common use cases you will get the expected result at the end by simply rounding up to the number of decimal places you want on the display. For fine control over how floats are displayed, see String Formatting Syntax for the formatting specifications of the str.format () method.&lt;/p&gt;\n&lt;p&gt;This part of the answer explains in detail the example of &quot;0.1&quot; and shows how you can perform an exact analysis of this type of case on your own. We assume that you are familiar with the binary representation of floating point numbers.The term Representation error means that most decimal fractions cannot be represented exactly in binary. This is the main reason why Python (or Perl, C, C ++, Java, Fortran, and many others) usually doesn&apos;t display the exact result in decimal:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 0.1 + 0.2\n0.30000000000000004\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Why ? 1/10 and 2/10 are not representable exactly in binary fractions. However, all machines today (July 2010) follow the IEEE-754 standard for the arithmetic of floating point numbers. and most platforms use an &quot;IEEE-754 double precision&quot; to represent Python floats. Double precision IEEE-754 uses 53 bits of precision, so on reading the computer tries to convert 0.1 to the nearest fraction of the form J / 2 ** N with J an integer of exactly 53 bits. Rewrite :&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;1/10 ~ = J / (2 ** N)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in :&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;J ~ = 2 ** N / 10\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;remembering that J is exactly 53 bits (so&amp;gt; = 2 ** 52 but &amp;lt;2 ** 53), the best possible value for N is 56:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4503599627370496&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9007199254740992&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7205759403792793&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So 56 is the only possible value for N which leaves exactly 53 bits for J. The best possible value for J is therefore this quotient, rounded:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;q, r = &lt;span class=&quot;hljs-built_in&quot;&gt;divmod&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since the carry is greater than half of 10, the best approximation is obtained by rounding up:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; q + 1\n7205759403792794\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Therefore the best possible approximation for 1/10 in &quot;IEEE-754 double precision&quot; is this above 2 ** 56, that is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;7205759403792794/72057594037927936\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that since the rounding was done upward, the result is actually slightly greater than 1/10; if we hadn&apos;t rounded up, the quotient would have been slightly less than 1/10. But in no case is it exactly 1/10!&lt;/p&gt;\n&lt;p&gt;So the computer never &quot;sees&quot; 1/10: what it sees is the exact fraction given above, the best approximation using the double precision floating point numbers from the &quot;&quot; IEEE-754 &quot;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;. 1 * 2 ** 56\n7205759403792794.0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we multiply this fraction by 10 ** 30, we can observe the values of its 30 decimal places of strong weight.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 7205759403792794 * 10 ** 30 // 2 ** 56\n100000000000000005551115123125L\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;meaning that the exact value stored in the computer is approximately equal to the decimal value 0.100000000000000005551115123125. In versions prior to Python 2.7 and Python 3.1, Python rounded these values to 17 significant decimal places, displaying 0.10000000000000001. In current versions of Python, the displayed value is the value whose fraction is as short as possible while giving exactly the same representation when converted back to binary, simply displaying 0.1.&lt;/p&gt;\n    ","\n&lt;p&gt;Imagine working in base ten with, say, 8 digits of accuracy.  You check whether &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1/3 + 2 / 3 == 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and learn that this returns &lt;code&gt;false&lt;/code&gt;.  Why?  Well, as real numbers we have&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;1/3 = 0.333....&lt;/em&gt; and &lt;em&gt;2/3 = 0.666....&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Truncating at eight decimal places, we get&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.33333333 + 0.66666666 = 0.99999999\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is, of course, different from &lt;code&gt;1.00000000&lt;/code&gt; by exactly &lt;code&gt;0.00000001&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The situation for binary numbers with a fixed number of bits is exactly analogous. As real numbers, we have&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;1/10 = 0.0001100110011001100... (base 2)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;1/5 = 0.0011001100110011001... (base 2)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;If we truncated these to, say, seven bits, then we&apos;d get&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.0001100 + 0.0011001 = 0.0100101\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;while on the other hand,&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;3/10 = 0.01001100110011... (base 2)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;which, truncated to seven bits, is &lt;code&gt;0.0100110&lt;/code&gt;, and these differ by exactly &lt;code&gt;0.0000001&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The exact situation is slightly more subtle because these numbers are typically stored in scientific notation.  So, for instance, instead of storing 1/10 as &lt;code&gt;0.0001100&lt;/code&gt; we may store it as something like &lt;code&gt;1.10011 * 2^-4&lt;/code&gt;, depending on how many bits we&apos;ve allocated for the exponent and the mantissa.  This affects how many digits of precision you get for your calculations.&lt;/p&gt;\n\n&lt;p&gt;The upshot is that because of these rounding errors you essentially never want to use == on floating-point numbers.  Instead, you can check if the absolute value of their difference is smaller than some fixed small number.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s actually pretty simple. When you have a base 10 system (like ours), it can only express fractions that use a prime factor of the base. The prime factors of 10 are 2 and 5. So 1/2, 1/4, 1/5, 1/8, and 1/10 can all be expressed cleanly because the denominators all use prime factors of 10. In contrast, 1/3, 1/6, and 1/7 are all repeating decimals because their denominators use a prime factor of 3 or 7. In binary (or base 2), the only prime factor is 2. So you can only express fractions cleanly which only contain 2 as a prime factor. In binary, 1/2, 1/4, 1/8 would all be expressed cleanly as decimals. While, 1/5 or 1/10 would be repeating decimals. So 0.1 and 0.2 (1/10 and 1/5) while clean decimals in a base 10 system, are repeating decimals in the base 2 system the computer is operating in. When you do math on these repeating decimals, you end up with leftovers which carry over when you convert the computer&apos;s base 2 (binary) number into a more human readable base 10 number.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;From &lt;a href=&quot;https://0.30000000000000004.com/&quot; rel=&quot;noreferrer&quot;&gt;https://0.30000000000000004.com/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Decimal numbers such as &lt;code&gt;0.1&lt;/code&gt;, &lt;code&gt;0.2&lt;/code&gt;, and &lt;code&gt;0.3&lt;/code&gt; are not represented exactly in binary encoded floating point types. The sum of the approximations for &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;0.2&lt;/code&gt; differs from the approximation used for &lt;code&gt;0.3&lt;/code&gt;, hence the falsehood of &lt;code&gt;0.1 + 0.2 == 0.3&lt;/code&gt; as can be seen more clearly here:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.1 + 0.2 == 0.3 is %s\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.1 is %.23f\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.2 is %.23f\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.1 + 0.2 is %.23f\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.3 is %.23f\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.3 - (0.1 + 0.2) is %g\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt; - (&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.1 + 0.2 == 0.3 is false\n0.1 is 0.10000000000000000555112\n0.2 is 0.20000000000000001110223\n0.1 + 0.2 is 0.30000000000000004440892\n0.3 is 0.29999999999999998889777\n0.3 - (0.1 + 0.2) is -5.55112e-17\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For these computations to be evaluated more reliably, you would need to use a decimal-based representation for floating point values. The C Standard does not specify such types by default but as an extension described in a &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1312.pdf&quot; rel=&quot;noreferrer&quot;&gt;technical Report&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;_Decimal32&lt;/code&gt;, &lt;code&gt;_Decimal64&lt;/code&gt; and &lt;code&gt;_Decimal128&lt;/code&gt; types might be available on your system (for example, &lt;a href=&quot;http://en.wikipedia.org/wiki/GNU_Compiler_Collection&quot; rel=&quot;noreferrer&quot;&gt;GCC&lt;/a&gt; supports them on &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-4.2.4/gcc/Decimal-Float.html&quot; rel=&quot;noreferrer&quot;&gt;selected targets&lt;/a&gt;, but &lt;a href=&quot;http://en.wikipedia.org/wiki/Clang&quot; rel=&quot;noreferrer&quot;&gt;Clang&lt;/a&gt; does not support them on &lt;a href=&quot;http://en.wikipedia.org/wiki/OS_X&quot; rel=&quot;noreferrer&quot;&gt;OS&amp;nbsp;X&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Since this thread branched off a bit into a general discussion over current floating point implementations I&apos;d add that there are projects on fixing their issues.&lt;/p&gt;\n\n&lt;p&gt;Take a look at &lt;a href=&quot;https://posithub.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://posithub.org/&lt;/a&gt; for example, which showcases a number type called posit (and its predecessor unum) that promises to offer better accuracy with fewer bits. If my understanding is correct, it also fixes the kind of problems in the question. Quite interesting project, the person behind it is a mathematician it &lt;a href=&quot;http://www.johngustafson.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dr. John Gustafson&lt;/a&gt;. The whole thing is open source, with many actual implementations in C/C++, Python, Julia and C# (&lt;a href=&quot;https://hastlayer.com/arithmetics&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://hastlayer.com/arithmetics&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Normal arithmetic is base-10, so decimals represent tenths, hundredths, etc.  When you try to represent a floating-point number in binary base-2 arithmetic, you are dealing with halves, fourths, eighths, etc.&lt;/p&gt;\n&lt;p&gt;In the hardware, floating points are stored as integer mantissas and exponents.  Mantissa represents the significant digits.  Exponent is like scientific notation but it uses a base of 2 instead of 10.  For example 64.0 would be represented with a mantissa of 1 and exponent of 6.  0.125 would be represented with a mantissa of 1 and an exponent of -3.&lt;/p&gt;\n&lt;p&gt;Floating point decimals have to add up negative powers of 2&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;0.1b = 0.5d\n0.01b = 0.25d\n0.001b = 0.125d\n0.0001b = 0.0625d\n0.00001b = 0.03125d\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and so on.&lt;/p&gt;\n&lt;p&gt;It is common to use a error delta instead of using equality operators when dealing with floating point arithmetic.  Instead of&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;if(a==b) ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you would use&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;delta = 0.0001; // or some arbitrarily small amount\nif(a - b &amp;gt; -delta &amp;amp;&amp;amp; a - b &amp;lt; delta) ...\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"c++-standard-library","slug":"c++-standard-library"},{"name":"object","slug":"object"},{"name":"android-input-method","slug":"android-input-method"},{"name":"benchmarking","slug":"benchmarking"},{"name":"jvm-hotspot","slug":"jvm-hotspot"},{"name":"restriction","slug":"restriction"},{"name":"selenium4","slug":"selenium4"},{"name":"chained-assignment","slug":"chained-assignment"},{"name":"mongodb","slug":"mongodb"},{"name":"threetenbp","slug":"threetenbp"},{"name":"boolean","slug":"boolean"},{"name":"microbenchmark","slug":"microbenchmark"},{"name":"com-interop","slug":"com-interop"},{"name":"return-type","slug":"return-type"},{"name":"sharedpreferences","slug":"sharedpreferences"},{"name":"clearfix","slug":"clearfix"},{"name":"application-state","slug":"application-state"},{"name":"combinatorics","slug":"combinatorics"},{"name":"printf","slug":"printf"},{"name":"attr","slug":"attr"}]},"__N_SSG":true}