{"pageProps":{"data":{"count":1,"rows":[{"id":186,"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467","postType":"QUESTION","createdAt":"2022-07-09T16:41:35.000Z","updatedAt":"2022-07-09T16:41:35.000Z","tags":[{"id":683,"name":"replace","slug":"replace","createdAt":"2022-07-09T16:41:35.000Z","updatedAt":"2022-07-09T16:41:35.000Z","Questions_Tags":{"questionId":186,"tagId":683}}]}]},"slug":"replace","page":1,"answers":{"186":["\n&lt;p&gt;&lt;strong&gt;As of August 2020:&lt;/strong&gt; &lt;a href=&quot;https://www.caniuse.com/mdn-javascript_builtins_string_replaceall&quot; rel=&quot;noreferrer&quot;&gt;Modern browsers have support&lt;/a&gt; for the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;String.replaceAll()&lt;/code&gt; method&lt;/a&gt; defined by the ECMAScript 2021 language specification.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;For older/legacy browsers:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegExp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.*+?^${}()|[\\]\\\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// $&amp;amp; means the whole matched string&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, find, replace&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(escapeRegExp(find), &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replace);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is how this answer evolved:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In response to comment &quot;what&apos;s if &apos;abc&apos; is passed as a variable?&quot;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; find = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(find, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;);\n\nstr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In response to &lt;a href=&quot;https://stackoverflow.com/users/49153/click-upvote&quot;&gt;Click Upvote&lt;/a&gt;&apos;s comment, you could simplify it even more:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, find, replace&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(find, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replace);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Regular expressions contain special (meta) characters, and as such it is dangerous to blindly pass an argument in the &lt;code&gt;find&lt;/code&gt; function above without pre-processing it to escape those characters.  This is covered in the &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot; rel=&quot;noreferrer&quot;&gt;Mozilla Developer Network&lt;/a&gt;&apos;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping&quot; rel=&quot;noreferrer&quot;&gt;JavaScript Guide on Regular Expressions&lt;/a&gt;, where they present the following utility function (which has changed at least twice since this answer was originally written, so make sure to check the MDN site for potential updates):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegExp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.*+?^${}()|[\\]\\\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// $&amp;amp; means the whole matched string&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So in order to make the &lt;code&gt;replaceAll()&lt;/code&gt; function above safer, it could be modified to the following if you also include &lt;code&gt;escapeRegExp&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, find, replace&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(escapeRegExp(find), &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replace);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For the sake of completeness, I got to thinking about which method I should use to do this. There are basically two ways to do this as suggested by the other answers on this page.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In general, extending the built-in prototypes in JavaScript is generally not recommended. I am providing as extensions on the String prototype simply for purposes of illustration, showing different implementations of a hypothetical standard method on the &lt;code&gt;String&lt;/code&gt; built-in prototype.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Regular Expression Based Implementation&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;search, replacement&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; target = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(search, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replacement);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Split and Join (Functional) Implementation&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;search, replacement&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; target = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(search).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(replacement);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Not knowing too much about how regular expressions work behind the scenes in terms of efficiency, I tended to lean toward the split and join implementation in the past without thinking about performance. When I did wonder which was more efficient, and by what margin, I used it as an excuse to find out.&lt;/p&gt;\n\n&lt;p&gt;On my Chrome Windows&amp;nbsp;8 machine, &lt;strong&gt;the regular expression based implementation is the fastest&lt;/strong&gt;, with the &lt;strong&gt;split and join implementation being 53% slower&lt;/strong&gt;. Meaning the regular expressions are twice as fast for the lorem ipsum input I used.&lt;/p&gt;\n\n&lt;p&gt;Check out this &lt;a href=&quot;http://jsben.ch/#/LFfWA&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;benchmark&lt;/strong&gt;&lt;/a&gt; running these two implementations against each other.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;As noted in the comment below by @ThomasLeduc and others, there could be an issue with the regular expression-based implementation if &lt;code&gt;search&lt;/code&gt; contains certain characters which are reserved as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters&quot; rel=&quot;noreferrer&quot;&gt;special characters in regular expressions&lt;/a&gt;. The implementation assumes that the caller will escape the string beforehand or will only pass strings that are without the characters in the table in &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters&quot; rel=&quot;noreferrer&quot;&gt;Regular Expressions&lt;/a&gt;&lt;/em&gt; (MDN).&lt;/p&gt;\n\n&lt;p&gt;MDN also provides an implementation to escape our strings. It would be nice if this was also standardized as &lt;code&gt;RegExp.escape(str)&lt;/code&gt;, but alas, it does not exist:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegExp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.*+?^${}()|[\\]\\\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$&amp;amp;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// $&amp;amp; means the whole matched string&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We could call &lt;code&gt;escapeRegExp&lt;/code&gt; within our &lt;code&gt;String.prototype.replaceAll&lt;/code&gt; implementation, however, I&apos;m not sure how much this will affect the performance (potentially even for strings for which the escape is not needed, like all alphanumeric strings).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; In the latest versions of most popular browsers, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt;\nas shown here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 abc 2 abc 3&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// `result` is &quot;1 xyz 2 xyz 3&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But check &lt;a href=&quot;https://caniuse.com/?search=replaceAll&quot; rel=&quot;noreferrer&quot;&gt;Can I use&lt;/a&gt; or another compatibility table first to make sure the browsers you&apos;re targeting have added support for it first.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;For Node and compatibility with older/non-current browsers:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note: Don&apos;t use the following solution in performance critical code.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;As an alternative to regular expressions for a simple literal string, you could use&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test...&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The general pattern is&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(search).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(replacement)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This used to be faster in some cases than using &lt;code&gt;replaceAll&lt;/code&gt; and a regular expression, but that doesn&apos;t seem to be the case anymore in modern browsers.&lt;/p&gt;\n&lt;p&gt;Benchmark: &lt;a href=&quot;https://jsben.ch/TZYzj&quot; rel=&quot;noreferrer&quot;&gt;https://jsben.ch/TZYzj&lt;/a&gt;&lt;/p&gt;\n&lt;h3&gt;Conclusion:&lt;/h3&gt;\n&lt;p&gt;If you have a performance critical use case (e.g processing hundreds of strings), use the Regexp method. But for most typical use cases, this is well worth not having to worry about special characters.&lt;/p&gt;\n    ","\n&lt;p&gt;Using a regular expression with the &lt;code&gt;g&lt;/code&gt; flag set will replace all:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;someString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;the cat looks like a cat&apos;&lt;/span&gt;;\nanotherString = someString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/cat/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// anotherString now contains &quot;the dog looks like a dog&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.tizag.com/javascriptT/javascript-string-replace.php&quot; rel=&quot;noreferrer&quot;&gt;See here also&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a string prototype function based on the accepted answer:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;find, replace&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(find, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replace);\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If your &lt;code&gt;find&lt;/code&gt; will contain special characters then you need to escape them:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;find, replace&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(find.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[-\\/\\\\^$*+?.()|[\\]{}]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replace);\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Fiddle: &lt;a href=&quot;http://jsfiddle.net/cdbzL/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/cdbzL/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;It&apos;s somewhat late for an update, but since I just stumbled on this question, and noticed that my previous answer is not one I&apos;m happy with. Since the question involved replacing a single word, it&apos;s incredible nobody thought of using word boundaries (&lt;code&gt;\\b&lt;/code&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;a cat is not a caterpillar&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bcat\\b/gi&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;a dog is not a caterpillar&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a simple regex that avoids replacing parts of words in most cases. However, a dash &lt;code&gt;-&lt;/code&gt; is still considered a word boundary. So conditionals can be used in this case to avoid replacing strings like &lt;code&gt;cool-cat&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;a cat is not a cool-cat&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bcat\\b/gi&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//wrong&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;a dog is not a cool-dog&quot; -- nips&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;a cat is not a cool-cat&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(?:\\b([^-]))cat(?:\\b([^-]))/gi&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$1dog$2&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;a dog is not a cool-cat&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Basically, this question is the same as the question here:\n&lt;a href=&quot;https://stackoverflow.com/questions/9499075/javascript-replace-with/9499926&quot;&gt;Javascript replace &quot; &apos; &quot; with &quot; &apos;&apos; &quot;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;@Mike, check the answer I gave there... regexp isn&apos;t the only way to replace multiple occurrences of a subsrting, far from it. Think flexible, think split!&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;the cat looks like a cat&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, to prevent replacing word parts -which the approved answer will do, too! You can get around this issue using regular expressions that are, I admit, somewhat more complex and as an upshot of that, a tad slower, too:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; regText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;the cat looks like a cat&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(?:(^|[^a-z]))(([^a-z]*)(?=cat)cat)(?![a-z])/gi&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;$1dog&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is the same as the accepted answer, however, using the &lt;code&gt;/cat/g&lt;/code&gt; expression on this string:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; oops = &lt;span class=&quot;hljs-string&quot;&gt;&apos;the cat looks like a cat, not a caterpillar or coolcat&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/cat/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//returns &quot;the dog looks like a dog, not a dogerpillar or cooldog&quot; ?? &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Oops indeed, this probably isn&apos;t what you want. What is, then? IMHO, a regex that only replaces &apos;cat&apos; conditionally. (ie not part of a word), like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; caterpillar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;the cat looks like a cat, not a caterpillar or coolcat&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(?:(^|[^a-z]))(([^a-z]*)(?=cat)cat)(?![a-z])/gi&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;$1dog&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//return &quot;the dog looks like a dog, not a caterpillar or coolcat&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;My guess is, this meets your needs. It&apos;s not fullproof, of course, but it should be enough to get you started. I&apos;d recommend reading some more on these pages. This&apos;ll prove useful in perfecting this expression to meet your specific needs.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.javascriptkit.com/jsref/regexp.shtml&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.javascriptkit.com/jsref/regexp.shtml&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.regular-expressions.info&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.regular-expressions.info&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Final addition:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Given that this question still gets a lot of views, I thought I might add an example of &lt;code&gt;.replace&lt;/code&gt; used with a callback function. In this case, it dramatically simplifies the expression &lt;em&gt;and&lt;/em&gt; provides even more flexibility, like replacing with correct capitalisation or replacing both &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;cats&lt;/code&gt; in one go:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Two cats are not 1 Cat! They\\&apos;re just cool-cats, you caterpillar&apos;&lt;/span&gt;\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(^|.\\b)(cat)(s?\\b.|$)/gi&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;all,char1,cat,char2&lt;/span&gt;)\n    {\n       &lt;span class=&quot;hljs-comment&quot;&gt;//check 1st, capitalize if required&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replacement = (cat.&lt;span class=&quot;hljs-title function_&quot;&gt;charAt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;og&apos;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (char1 === &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &amp;amp;&amp;amp; char2 === &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;)\n       {&lt;span class=&quot;hljs-comment&quot;&gt;//replace plurals, too&lt;/span&gt;\n           cat = replacement + &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;;\n       }\n       &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n       {&lt;span class=&quot;hljs-comment&quot;&gt;//do not replace if dashes are matched&lt;/span&gt;\n           cat = char1 === &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; || char2 === &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; ? cat : replacement;\n       }\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; char1 + cat + char2;&lt;span class=&quot;hljs-comment&quot;&gt;//return replacement string&lt;/span&gt;\n    });\n&lt;span class=&quot;hljs-comment&quot;&gt;//returns:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//Two dogs are not 1 Dog! They&apos;re just cool-cats, you caterpillar&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;These are the most common and readable methods.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;replaced text&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method 2:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;replaced text&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method 3:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;replaced text&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method 4:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(str.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;)){\n   str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;replaced text&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Test replaced text test test replaced text test test test replaced text test test replaced text&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Match against a global regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;anotherString = someString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/cat/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For replacing a single time use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For replacing multiple times use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or try the &lt;code&gt;replaceAll&lt;/code&gt; method, as recommended in &lt;a href=&quot;https://stackoverflow.com/questions/1137436/useful-javascript-methods-that-extends-built-in-objects/1137579#1137579&quot;&gt;this answer&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\nstr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(search, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Clarification about &lt;code&gt;replaceAll&lt;/code&gt; availability&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;replaceAll&lt;/code&gt; method is added to &lt;code&gt;String&lt;/code&gt;&apos;s prototype. This means it will be available for all string objects/literals.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test this&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;this&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;that&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// output is &apos;test that&apos;.&lt;/span&gt;\noutput = output.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;that&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;this&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// output is &apos;test this&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;RegExp&lt;/code&gt; in &lt;strong&gt;JavaScript&lt;/strong&gt; could do the job for you, just simply do something like below code, don&apos;t forget the &lt;code&gt;/g&lt;/code&gt; after which standout for &lt;strong&gt;global&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str =&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;;\nstr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you think of reuse, create a function to do that for you, but it&apos;s not recommended as it&apos;s only one line function, but again if you heavily use this, you can write something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, replaced&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(string, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), replaced);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and simply use it in your code over and over like below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str =&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;;\nstr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But as I mention earlier, it won&apos;t make a huge difference in terms of lines to be written or performance, only caching the function may effect some faster performance on long strings and also a good practice of DRY code if you want to reuse.&lt;/p&gt;\n    ","\n&lt;p&gt;Say you want to replace all the &apos;abc&apos; with &apos;x&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; some_str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc def def lom abc abc def&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(some_str) &lt;span class=&quot;hljs-comment&quot;&gt;//x def def lom x x def&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I was trying to think about something more simple than modifying the string prototype.&lt;/p&gt;\n    ","\n&lt;p&gt;Use a regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Performance&lt;/h2&gt;\n&lt;p&gt;Today 27.12.2019 I perform tests on &lt;a href=&quot;https://en.wikipedia.org/wiki/MacOS_High_Sierra&quot; rel=&quot;noreferrer&quot;&gt;macOS v10.13.6&lt;/a&gt; (High Sierra) for the chosen solutions.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The &lt;code&gt;str.replace(/abc/g, &apos;&apos;);&lt;/code&gt; (&lt;strong&gt;C&lt;/strong&gt;) is a good cross-browser fast solution for all strings.&lt;/li&gt;\n&lt;li&gt;Solutions based on &lt;code&gt;split-join&lt;/code&gt; (&lt;strong&gt;A,B&lt;/strong&gt;) or &lt;code&gt;replace&lt;/code&gt; (&lt;strong&gt;C,D&lt;/strong&gt;) are fast&lt;/li&gt;\n&lt;li&gt;Solutions based on &lt;code&gt;while&lt;/code&gt; (&lt;strong&gt;E,F,G,H&lt;/strong&gt;) are slow - usually ~4 times slower for small strings and about ~3000 times (!) slower for long strings&lt;/li&gt;\n&lt;li&gt;The recurrence solutions (&lt;strong&gt;RA,RB&lt;/strong&gt;) are slow and do not work for long strings&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I also create my own solution. It looks like currently it is the shortest one which does the question job:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str.&lt;span class=&quot;hljs-property&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`abc`&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;``&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;;\nstr = str.&lt;span class=&quot;hljs-property&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`abc`&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;``&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Details&lt;/h2&gt;\n&lt;p&gt;The tests were performed on Chrome 79.0, Safari 13.0.4 and Firefox 71.0 (64 bit). The tests &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt; use recursion. Results&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/si5UK.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/si5UK.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Short string - 55 characters&lt;/h2&gt;\n&lt;p&gt;You can run tests on your machine &lt;a href=&quot;https://jsperf.com/remove-substring-small/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;. Results for Chrome:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Ctf18.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ctf18.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Long string: 275 000 characters&lt;/h2&gt;\n&lt;p&gt;The recursive solutions &lt;strong&gt;RA&lt;/strong&gt; and &lt;strong&gt;RB&lt;/strong&gt; gives&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;RangeError: Maximum call stack size exceeded&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;For 1M characters they even break Chrome&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/dNkYp.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/dNkYp.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I try to perform tests for 1M characters for other solutions, but &lt;strong&gt;E,F,G,H&lt;/strong&gt; takes so much time that browser ask me to break script so I shrink test string to 275K characters. You can run tests on your machine &lt;a href=&quot;https://jsperf.com/remove-substring-big/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;. Results for Chrome&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/0uEgk.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/0uEgk.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Code used in tests&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// .repeat(5000)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;version,result&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${version}&lt;/span&gt;: &lt;span class=&quot;hljs-subst&quot;&gt;${result}&lt;/span&gt;`&lt;/span&gt;);\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;B&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-property&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`abc`&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;``&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// my proposition&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;C&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;E&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) { str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) { str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;G&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(str.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;)) { str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// src: https://stackoverflow.com/a/56989553/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;H&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; find = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newToken = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!str)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((str == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (find == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newToken;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((\n        i = str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(\n            find, i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? i + newToken.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        )) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    )\n    {\n        str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i) +\n            newToken +\n            str.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(i + find.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// src: https://stackoverflow.com/a/22870785/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;RA&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, prevstring&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; omit = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; place = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (prevstring &amp;amp;&amp;amp; string === prevstring)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string;\n  prevstring = string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(omit, place);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;RA&lt;/span&gt;(prevstring, string)\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// src: https://stackoverflow.com/a/26107132/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;RB&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; find = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(find);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n    str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(find, replace);\n    i = i + replace.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; st2 = str.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st2.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(find) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n      str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,i) + &lt;span class=&quot;hljs-title function_&quot;&gt;RB&lt;/span&gt;(st2, find, replace);\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n\n\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;B&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;C&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;D &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;E&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;F &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;G &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;G&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;H &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;H&lt;/span&gt;(t));\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;RA&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;RA&lt;/span&gt;(t)); &lt;span class=&quot;hljs-comment&quot;&gt;// use reccurence&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;RB&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;RB&lt;/span&gt;(t)); &lt;span class=&quot;hljs-comment&quot;&gt;// use reccurence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;color:red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This snippet only presents codes used in tests. It not perform test itself!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Replacing single quotes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;JavaScriptEncode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;text&lt;/span&gt;){\n    text = text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/&apos;/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;amp;apos;&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;// More encode here if required&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; text;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;worked better for me than the above answers. so &lt;code&gt;new RegExp(&quot;abc&quot;, &apos;g&apos;)&lt;/code&gt; creates a RegExp what matches all occurence (&lt;code&gt;&apos;g&apos;&lt;/code&gt; flag) of the text (&lt;code&gt;&quot;abc&quot;&lt;/code&gt;). The second part is what gets replaced to, in your case empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;).\n&lt;code&gt;str&lt;/code&gt; is the string, and we have to override it, as &lt;code&gt;replace(...)&lt;/code&gt; just returns result, but not overrides. In some cases you might want to use that.&lt;/p&gt;\n    ","\n&lt;p&gt;This is the &lt;strong&gt;fastest&lt;/strong&gt; version that &lt;em&gt;doesn&apos;t use regular expressions&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsperf.com/replace-all-vs-split-join/10&quot; rel=&quot;noreferrer&quot;&gt;Revised jsperf&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;replaceAll = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, omit, place, prevstring&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (prevstring &amp;amp;&amp;amp; string === prevstring)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string;\n  prevstring = string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(omit, place);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(prevstring, omit, place, string)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is almost &lt;strong&gt;twice&lt;/strong&gt; as fast as the split and join method.&lt;/p&gt;\n\n&lt;p&gt;As pointed out in a comment here, this will not work if your &lt;code&gt;omit&lt;/code&gt; variable contains &lt;code&gt;place&lt;/code&gt;, as in: &lt;code&gt;replaceAll(&quot;string&quot;, &quot;s&quot;, &quot;ss&quot;)&lt;/code&gt;, because it will always be able to replace another occurrence of the word.&lt;/p&gt;\n\n&lt;p&gt;There is another jsperf with variants on my recursive replace that go even faster (&lt;a href=&quot;http://jsperf.com/replace-all-vs-split-join/12&quot; rel=&quot;noreferrer&quot;&gt;http://jsperf.com/replace-all-vs-split-join/12&lt;/a&gt;)!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Update July 27th 2017: It looks like RegExp now has the fastest performance in the recently released Chrome 59.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Loop it until number occurrences comes to 0, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;find, replace, str&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(find) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(find, replace);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If what you want to find is already in a string, and you don&apos;t have a regex escaper handy, you can use join/split:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceMulti&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;haystack, needle, replacement&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; haystack.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(needle).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(replacement);\n    }\n\n    someString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;the cat looks like a cat&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;replaceMulti&lt;/span&gt;(someString, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, find, replace&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(find);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n    str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(find, replace); \n    i = i + replace.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; st2 = str.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st2.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(find) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n      str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,i) + &lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(st2, find, replace);\n    }       \n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like this method (it looks a little cleaner):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;text = text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;ff ff f f a de def&quot;&lt;/span&gt;;\nstr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/f/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(str);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/ANHR9/&quot;&gt;http://jsfiddle.net/ANHR9/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (str.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n{\n    str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The simplest way to this without using any regex is split and join like the code here:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If the string contain similar pattern like &lt;code&gt;abccc&lt;/code&gt;, you can use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc(\\s|$)/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As of August 2020 there is a &lt;a href=&quot;https://tc39.es/proposal-string-replaceall/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stage 4 proposal&lt;/a&gt; to ECMAScript that adds the &lt;a href=&quot;https://github.com/tc39/proposal-string-replaceall&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt; method to &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It&apos;s now supported in &lt;strong&gt;Chrome 85+, Edge 85+, Firefox 77+, Safari 13.1+&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;The usage is the same as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(searchValue, replaceValue)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s an example usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Test abc test test abc test.&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &apos;Test foo test test foo test.&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;It&apos;s supported in &lt;a href=&quot;https://caniuse.com/#search=replaceAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;most modern browsers&lt;/a&gt;, but there exist polyfills:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/zloirock/core-js#stringreplaceall&quot; rel=&quot;nofollow noreferrer&quot;&gt;core-js&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/es-shims/String.prototype.replaceAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;es-shims&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;It is supported in the &lt;a href=&quot;https://v8.dev/&quot; rel=&quot;nofollow noreferrer&quot;&gt;V8&lt;/a&gt; engine behind an experimental flag &lt;code&gt;--harmony-string-replaceall&lt;/code&gt;.\nRead more on the &lt;a href=&quot;https://v8.dev/features/string-replaceall&quot; rel=&quot;nofollow noreferrer&quot;&gt;V8 website&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The previous answers are way too complicated. Just use the replace function like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/your_regex_pattern/g&lt;/span&gt;, replacement_string);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[abc]+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(res);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;String.prototype.replaceAll&lt;/code&gt;&lt;/strong&gt; - &lt;strong&gt;ECMAScript 2021&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The new &lt;code&gt;String.prototype.replaceAll()&lt;/code&gt; method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be either a string or a RegExp, and the replacement can be either a string or a function to be called for each match.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; message = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog barks meow meow&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; messageFormatted = message.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;meow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;woof&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(messageFormatted);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you are trying to ensure that the string you are looking for won&apos;t exist even after the replacement, you need to use a loop.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;test aabcbc&apos;&lt;/span&gt;;\nstr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When complete, you will still have &apos;test abc&apos;!&lt;/p&gt;\n\n&lt;p&gt;The simplest loop to solve this would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;test aabcbc&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (str != str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)){\n   str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But that runs the replacement twice for each cycle. Perhaps (at risk of being voted down) that can be combined for a slightly more efficient but less readable form:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;test aabcbc&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (str != (str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))){}\n&lt;span class=&quot;hljs-comment&quot;&gt;// alert(str); alerts &apos;test &apos;!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can be particularly useful when looking for duplicate strings.&lt;br&gt;\nFor example, if we have &apos;a,,,b&apos; and we wish to remove all duplicate commas.&lt;br&gt;\n[In that case, one could do .replace(/,+/g,&apos;,&apos;), but at some point the regex gets complex and slow enough to loop instead.]&lt;/p&gt;\n    ","\n&lt;p&gt;Although people have mentioned the use of regex but there&apos;s a better approach if you want to replace the text irrespective of the case of the text. Like uppercase or lowercase. Use below syntax&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Consider below example&lt;/span&gt;\noriginalString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/stringToBeReplaced/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Output will be all the occurrences removed irrespective of casing.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can refer the detailed example &lt;a href=&quot;http://www.cheezycode.com/2015/08/javascript-hacks-for-html-webpage.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    "]},"randomTags":[{"name":"platform-detection","slug":"platform-detection"},{"name":"frame","slug":"frame"},{"name":"strict-aliasing","slug":"strict-aliasing"},{"name":"malloc","slug":"malloc"},{"name":"include-path","slug":"include-path"},{"name":"aggregate-functions","slug":"aggregate-functions"},{"name":"httpurlconnection","slug":"httpurlconnection"},{"name":"sequence-points","slug":"sequence-points"},{"name":"concatenation","slug":"concatenation"},{"name":"pandas","slug":"pandas"},{"name":"node.js","slug":"node.js"},{"name":"query-string","slug":"query-string"},{"name":"awt","slug":"awt"},{"name":"variable-expansion","slug":"variable-expansion"},{"name":"where-in","slug":"where-in"},{"name":"hashcode","slug":"hashcode"},{"name":"sql-server-2005","slug":"sql-server-2005"},{"name":"underscore.js","slug":"underscore.js"},{"name":"spring-mvc","slug":"spring-mvc"},{"name":"clang","slug":"clang"}]},"__N_SSG":true}