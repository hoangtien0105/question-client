{"pageProps":{"data":{"count":1,"rows":[{"id":330,"title":"Cross-thread operation not valid: Control accessed from a thread other than the thread it was created on","slug":"cross-thread-operation-not-valid:-control-accessed-from-a-thread-other-than-the-thread-it-was-created-on-1657387659019","postType":"QUESTION","createdAt":"2022-07-09T17:27:39.000Z","updatedAt":"2022-07-09T17:27:39.000Z","tags":[{"id":1903,"name":"winforms","slug":"winforms","createdAt":"2022-07-09T17:27:39.000Z","updatedAt":"2022-07-09T17:27:39.000Z","Questions_Tags":{"questionId":330,"tagId":1903}}]}]},"slug":"winforms","page":1,"answers":{"330":["\n&lt;p&gt;As per &lt;a href=&quot;https://stackoverflow.com/questions/142003/cross-thread-operation-not-valid-control-accessed-from-a-thread-other-than-the#142108&quot;&gt;Prerak K&apos;s update comment&lt;/a&gt; (since deleted):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;I guess I have not presented the question properly.&lt;/p&gt;\n&lt;p&gt;Situation is this: I want to load data into a global variable based on the value of a control. I don&apos;t want to change the value of a control from the child thread. I&apos;m not going to do it ever from a child thread.&lt;/p&gt;\n&lt;p&gt;So only accessing the value so that corresponding data can be fetched from the database.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The solution you want then should look like:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;UserContrl1_LOadDataMethod()\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(textbox1.InvokeRequired)\n    {\n        textbox1.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MethodInvoker(&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt; { name = textbox1.text; }));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyName&quot;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// do whatever&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do your serious processing in the separate thread &lt;em&gt;before&lt;/em&gt; you attempt to switch back to the control&apos;s thread. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;UserContrl1_LOadDataMethod()\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(textbox1.text==&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyName&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;&amp;lt;======Now it wont give exception**&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Load data correspondin to &quot;MyName&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Populate a globale variable List&amp;lt;string&amp;gt; which will be&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//bound to grid at some later stage&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(InvokeRequired)\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// after we&apos;ve done all the processing, &lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MethodInvoker(&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt; {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// load the control with the appropriate data&lt;/span&gt;\n            }));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Threading Model in UI&lt;/h1&gt;\n\n&lt;p&gt;Please read the &lt;em&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/threading-model&quot; rel=&quot;noreferrer&quot;&gt;Threading Model&lt;/a&gt;&lt;/em&gt; in UI applications (&lt;a href=&quot;https://msdn.microsoft.com/library/ms741870(v=vs.100).aspx&quot; rel=&quot;noreferrer&quot;&gt;old VB link is here&lt;/a&gt;) in order to understand basic concepts. The link navigates to page that describes the WPF threading model. However, Windows Forms utilizes the same idea.&lt;/p&gt;\n\n&lt;h2&gt;The UI Thread&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;There is only one thread (UI thread), that is allowed to access &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Windows.Forms.Control.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control&lt;/a&gt; and its subclasses members.&lt;/li&gt;\n&lt;li&gt;Attempt to access member of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Windows.Forms.Control.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control&lt;/a&gt; from different thread than UI thread will cause cross-thread exception.&lt;/li&gt;\n&lt;li&gt;Since there is only one thread, all UI operations are queued as work items into that thread:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/6MtB3.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If there is no work for UI thread, then there are idle gaps that can be used by a not-UI related computing.&lt;/li&gt;\n&lt;li&gt;In order to use mentioned gaps use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Windows.Forms.Control.Invoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.Invoke&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.forms.control.begininvoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.BeginInvoke&lt;/a&gt; methods:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/WQPOJ.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;h2&gt;BeginInvoke and Invoke methods&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The computing overhead of method being invoked should be small as well as computing overhead of event handler methods because the UI thread is used there - the same that is responsible for handling user input. Regardless if this is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Windows.Forms.Control.Invoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.Invoke&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.forms.control.begininvoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.BeginInvoke&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;To perform computing expensive operation always use separate thread. Since .NET 2.0 &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx&quot; rel=&quot;noreferrer&quot;&gt;BackgroundWorker&lt;/a&gt; is dedicated to performing computing expensive operations in Windows Forms. However in new solutions you should use the async-await pattern as described &lt;a href=&quot;https://stackoverflow.com/a/18033198/2042090&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Windows.Forms.Control.Invoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.Invoke&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.forms.control.begininvoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.BeginInvoke&lt;/a&gt; methods only to update a user interface. If you use them for heavy computations, your application will block:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/UfBqr.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;h3&gt;Invoke&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Windows.Forms.Control.Invoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.Invoke&lt;/a&gt; causes separate thread to wait till invoked method is completed:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/XmFJu.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;h3&gt;BeginInvoke&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.forms.control.begininvoke.aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Windows.Forms.Control.BeginInvoke&lt;/a&gt; doesn&apos;t cause the separate thread to wait till invoked method is completed:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/8k5kn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;h2&gt;Code solution&lt;/h2&gt;\n\n&lt;p&gt;Read answers on question &lt;a href=&quot;https://stackoverflow.com/questions/661561/how-to-update-the-gui-from-another-thread-in-c&quot;&gt;How to update the GUI from another thread in C#?&lt;/a&gt;.\nFor C# 5.0 and .NET 4.5 the recommended solution is &lt;a href=&quot;https://stackoverflow.com/a/18033198/2042090&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You only want to use &lt;code&gt;Invoke&lt;/code&gt; or &lt;code&gt;BeginInvoke&lt;/code&gt; for the bare minimum piece of work required to change the UI. Your &quot;heavy&quot; method should execute on another thread (e.g. via &lt;code&gt;BackgroundWorker&lt;/code&gt;) but then using &lt;code&gt;Control.Invoke&lt;/code&gt;/&lt;code&gt;Control.BeginInvoke&lt;/code&gt; just to update the UI. That way your UI thread will be free to handle UI events etc.&lt;/p&gt;\n\n&lt;p&gt;See my &lt;a href=&quot;http://pobox.com/~skeet/csharp/threads&quot; rel=&quot;nofollow noreferrer&quot;&gt;threading article&lt;/a&gt; for a &lt;a href=&quot;http://pobox.com/~skeet/csharp/threads/winforms.shtml&quot; rel=&quot;nofollow noreferrer&quot;&gt;WinForms example&lt;/a&gt; - although the article was written before &lt;code&gt;BackgroundWorker&lt;/code&gt; arrived on the scene, and I&apos;m afraid I haven&apos;t updated it in that respect. &lt;code&gt;BackgroundWorker&lt;/code&gt; merely simplifies the callback a bit.&lt;/p&gt;\n    ","\n&lt;p&gt;I know its too late now. However even today if you are having trouble accessing cross thread controls? This is the shortest answer till date :P&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Action(() =&amp;gt;\n                {\n                    label1.Text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;WooHoo!!!&quot;&lt;/span&gt;;\n                }));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is how i access any form control from a thread.&lt;/p&gt;\n    ","\n&lt;p&gt;I have had this problem with the &lt;code&gt;FileSystemWatcher&lt;/code&gt; and found that the following code solved the problem:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;fsw.SynchronizingObject = this&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The control then uses the current form object to deal with the events, and will therefore be on the same thread.&lt;/p&gt;\n    ","\n&lt;p&gt;I find the check-and-invoke code which needs to be littered within all methods related to forms to be way too verbose and unneeded. Here&apos;s a simple extension method which lets you do away with it completely:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Extensions&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Invoke&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;TControlType&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; TControlType control, Action&amp;lt;TControlType&amp;gt; del&lt;/span&gt;) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; TControlType : Control&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (control.InvokeRequired)\n                control.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Action(() =&amp;gt; del(control)));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                del(control);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then you can simply do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;textbox1.Invoke(t =&amp;gt; t.Text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No more messing around - simple.&lt;/p&gt;\n    ","\n&lt;p&gt;Controls in .NET are not generally thread safe.  That means you shouldn&apos;t access a control from a thread other than the one where it lives.  To get around this, you need to &lt;em&gt;invoke&lt;/em&gt; the control, which is what your 2nd sample is attempting.  &lt;/p&gt;\n\n&lt;p&gt;However, in your case all you&apos;ve done is pass the long-running method back to the main thread.  Of course, that&apos;s not really what you want to do.  You need to rethink this a little so that all you&apos;re doing on the main thread is setting a quick property here and there.&lt;/p&gt;\n    ","\n&lt;p&gt;The cleanest (and proper) solution for UI cross-threading issues is to use SynchronizationContext, see &lt;a href=&quot;http://www.lostechies.com/blogs/gabrielschenker/archive/2009/01/23/synchronizing-calls-to-the-ui-in-a-multi-threaded-application.aspx&quot; rel=&quot;noreferrer&quot;&gt;Synchronizing calls to the UI in a multi-threaded application&lt;/a&gt; article, it explains it very nicely.&lt;/p&gt;\n    ","\n&lt;p&gt;Follow the simplest (in my opinion) way to modify objects from another thread:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Threading.Tasks;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Threading;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TESTE&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Form1&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;Form&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Form1&lt;/span&gt;()&lt;/span&gt;\n        {\n            InitializeComponent();\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;button1_Click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;\n        {\n            Action&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; DelegateTeste_ModifyText = THREAD_MOD;\n            Invoke(DelegateTeste_ModifyText, &lt;span class=&quot;hljs-string&quot;&gt;&quot;MODIFY BY THREAD&quot;&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;THREAD_MOD&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; teste&lt;/span&gt;)&lt;/span&gt;\n        {\n            textBox1.Text = teste;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A new look using Async/Await and callbacks.  You only need one line of code if you keep the extension method in your project.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; A new way to use Tasks for Asynchronous calls&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Example&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; No more delegates, background workers etc. just one line of code as shown below&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Note it is dependent on the XTask class shown next.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ExampleMethod&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Still on GUI/Original Thread here&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Do your updates before the next line of code&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; XTask.RunAsync(() =&amp;gt;\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Running an asynchronous task here&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Cannot update GUI Thread here, but can do lots of work&lt;/span&gt;\n        });\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Can update GUI/Original thread on this line&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; A class containing extension methods for the Task class &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Put this file in folder named Extensions&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Use prefix of X for the class it Extends&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;XTask&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; RunAsync is an extension method that encapsulates the Task.Run using a callback&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;Code&quot;&amp;gt;&lt;/span&gt;The caller is called back on the new Task (on a different thread)&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Task &lt;span class=&quot;hljs-title&quot;&gt;RunAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Action Code&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;\n        {\n            Code();\n        });\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can add other things to the Extension method such as wrapping it in a Try/Catch statement, allowing caller to tell it what type to return after completion, an exception callback to caller:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Adding Try Catch, Auto Exception Logging and CallBack&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Run Async&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;The type to return&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;Code&quot;&amp;gt;&lt;/span&gt;The callback to the code&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;Error&quot;&amp;gt;&lt;/span&gt;The handled and logged exception if one occurs&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;The type expected as a competed task&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;RunAsync&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;,T&amp;gt; Code, Action&amp;lt;Exception&amp;gt; Error&lt;/span&gt;)&lt;/span&gt;\n    {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; done =  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; Task&amp;lt;T&amp;gt;.Run(() =&amp;gt;\n        {\n            T result = &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n            {\n               result = Code(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Code Here&quot;&lt;/span&gt;);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n            {\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unhandled Exception: &quot;&lt;/span&gt; + ex.Message);\n                Console.WriteLine(ex.StackTrace);\n                Error(ex);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n\n        });\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; done;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HowToUse&lt;/span&gt;()&lt;/span&gt;\n    {\n       &lt;span class=&quot;hljs-comment&quot;&gt;//We now inject the type we want the async routine to return!&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result =  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; RunAsync&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;&amp;gt;((code) =&amp;gt; {\n           &lt;span class=&quot;hljs-comment&quot;&gt;//write code here, all exceptions are logged via the wrapped try catch.&lt;/span&gt;\n           &lt;span class=&quot;hljs-comment&quot;&gt;//return what is needed&lt;/span&gt;\n           &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; someBoolValue;\n       }, \n       error =&amp;gt; {\n\n          &lt;span class=&quot;hljs-comment&quot;&gt;//exceptions are already handled but are sent back here for further processing&lt;/span&gt;\n       });\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result)\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//we can now process the result because the code above awaited for the completion before&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//moving to this statement&lt;/span&gt;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is not the recommended way to solve this error but you can suppress it quickly, it will do the job . I prefer this for prototypes or demos . add &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;CheckForIllegalCrossThreadCalls = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in &lt;code&gt;Form1()&lt;/code&gt; constructor . &lt;/p&gt;\n    ","\n&lt;p&gt;You need to look at the Backgroundworker example:&lt;br&gt;\n&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx&quot; rel=&quot;noreferrer&quot;&gt;http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx&lt;/a&gt;\nEspecially how it interacts with the UI layer.  Based on your posting, this seems to answer your issues.&lt;/p&gt;\n    ","\n&lt;p&gt;I found a need for this while programming an iOS-Phone monotouch app controller in a visual studio winforms prototype project outside of xamarin stuidio. Preferring to program in VS over xamarin studio as much as possible, I wanted the controller to be completely decoupled from the phone framework. This way implementing this for other frameworks like Android and Windows Phone would be much easier for future uses.&lt;/p&gt;\n\n&lt;p&gt;I wanted a solution where the GUI could respond to events without the burden of dealing with the cross threading switching code behind every button click. Basically let the class controller handle that to keep the client code simple. You could possibly have many events on the GUI where as if you could handle it in one place in the class would be cleaner. I am not a multi theading expert, let me know if this is flawed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Form1&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;Form&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ExampleController.MyController controller;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Form1&lt;/span&gt;()&lt;/span&gt;\n    {          \n        InitializeComponent();\n        controller = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ExampleController.MyController((ISynchronizeInvoke) &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n        controller.Finished += controller_Finished;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;controller_Finished&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; returnValue&lt;/span&gt;)&lt;/span&gt;\n    {\n        label1.Text = returnValue; \n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;button1_Click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;\n    {\n        controller.SubmitTask(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Do It&quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The GUI form is unaware the controller is running asynchronous tasks.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FinishedTasksHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; returnValue&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyController&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ISynchronizeInvoke _syn; \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyController&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ISynchronizeInvoke syn&lt;/span&gt;)&lt;/span&gt; {  _syn = syn; } \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;event&lt;/span&gt; FinishedTasksHandler Finished; \n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SubmitTask&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; someValue&lt;/span&gt;)&lt;/span&gt;\n    {\n        System.Threading.ThreadPool.QueueUserWorkItem(state =&amp;gt; submitTask(someValue));\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;submitTask&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; someValue&lt;/span&gt;)&lt;/span&gt;\n    {\n        someValue = someValue + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + DateTime.Now.ToString();\n        System.Threading.Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//Finished(someValue); This causes cross threading error if called like this.&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Finished != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_syn.InvokeRequired)\n            {\n                _syn.Invoke(Finished, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { someValue });\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                Finished(someValue);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an alternative way if the object you are working with doesn&apos;t have &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;(InvokeRequired)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is useful if you are working with the main form in a class other than the main form with an object that is in the main form, but doesn&apos;t have InvokeRequired&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateMainFormObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;FormObjectType objectWithoutInvoke, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; text&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateFormObjectType&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;FormObjectType objectWithoutInvoke, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; text&lt;/span&gt;)&lt;/span&gt;\n{\n    MainForm.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; updateMainFormObject(UpdateObject), objectWithoutInvoke, text);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UpdateObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ToolStripStatusLabel objectWithoutInvoke, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; text&lt;/span&gt;)&lt;/span&gt;\n{\n    objectWithoutInvoke.Text = text;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It works the same as above, but it is a different approach if you don&apos;t have an object with invokerequired, but do have access to the MainForm&lt;/p&gt;\n    ","\n&lt;p&gt;Along the same lines as previous answers,\nbut a very short addition that Allows to use all Control properties without having cross thread invokation exception.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Helper Method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Helper method to determin if invoke required, if so will rerun method on correct thread.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; if not do nothing.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;c&quot;&amp;gt;&lt;/span&gt;Control that might require invoking&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;a&quot;&amp;gt;&lt;/span&gt;action to preform on control thread if so.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;true if invoke required&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ControlInvokeRequired&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Control c, Action a&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c.InvokeRequired) c.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MethodInvoker(&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt;\n    {\n        a();\n    }));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample Usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// usage on textbox&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UpdateTextBox1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;String text&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Check if invoke requied if so return - as i will be recalled in correct thread&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ControlInvokeRequired(textBox1, () =&amp;gt; UpdateTextBox1(text))) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    textBox1.Text = ellapsed;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Or any control&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UpdateControl&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Color c, String s&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Check if invoke requied if so return - as i will be recalled in correct thread&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ControlInvokeRequired(myControl, () =&amp;gt; UpdateControl(c, s))) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    myControl.Text = s;\n    myControl.BackColor = c;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MethodInvoker(&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;//your code here;&lt;/span&gt;\n            }));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For example to get the text from a Control of the UI thread:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; GetControlTextInvoker(&lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; ctl &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Control) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; GetControlText(&lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; ctl &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Control) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; ctl.InvokeRequired &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;CStr&lt;/span&gt;(ctl.Invoke(\n            &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; GetControlTextInvoker(&lt;span class=&quot;hljs-built_in&quot;&gt;AddressOf&lt;/span&gt; GetControlText), ctl))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt; = ctl.&lt;span class=&quot;hljs-keyword&quot;&gt;Text&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simple and re-usable way to work around this problem.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Extension Method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FormExts&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoadOnUI&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; Form frm, Action action&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (frm.InvokeRequired) frm.Invoke(action);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; action.Invoke();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample Usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;OnAnyEvent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sender, EventArgs args&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.LoadOnUI(() =&amp;gt;\n    {\n        label1.Text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n        button1.Text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/661561/how-to-update-the-gui-from-another-thread-in-c&quot;&gt;Same question : how-to-update-the-gui-from-another-thread-in-c&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Two Ways:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Return value in e.result and use it to set yout textbox value in backgroundWorker_RunWorkerCompleted event&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare some variable to hold these kind of values in a separate class (which will work as data holder) . Create static instance of this class adn you can access it over any thread.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;data_holder_for_controls&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//it will hold value for your label&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; status = &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Empty;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Demo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt;  data_holder_for_controls d1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; data_holder_for_controls();\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n    {\n        ThreadStart ts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadStart(perform_logic);\n        Thread t1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread(ts);\n        t1.Start();\n        t1.Join();\n        &lt;span class=&quot;hljs-comment&quot;&gt;//your_label.Text=d1.status; --- can access it from any thread &lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;perform_logic&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//put some code here in this function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++)\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//statements here&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//set result in status variable&lt;/span&gt;\n        d1.status = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Task done&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simply use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Invoke((MethodInvoker)&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt;\n            {\n                YourControl.Property= &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// runs thread safe&lt;/span&gt;\n            });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Action y; //declared inside class&lt;/p&gt;\n\n&lt;p&gt;label1.Invoke(y=()=&amp;gt;label1.Text=&quot;text&quot;);&lt;/p&gt;\n    ","\n&lt;p&gt;There are two options for cross thread operations.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Control.InvokeRequired Property \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and second one is to use &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;SynchronizationContext Post Method\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Control.InvokeRequired is only useful when working controls inherited from Control class while SynchronizationContext can be used anywhere. Some useful information is as following links&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.ilmlinks.com/Snippets/cross-thread-update-ui-in-dotnet&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cross Thread Update UI | .Net&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.ilmlinks.com/Snippets/cross-thread-update-ui-in-dotnet-synchronization-context&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cross Thread Update UI using SynchronizationContext | .Net&lt;/a&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"abi","slug":"abi"},{"name":"pivot","slug":"pivot"},{"name":"linker","slug":"linker"},{"name":"data.table","slug":"data.table"},{"name":"full-outer-join","slug":"full-outer-join"},{"name":"shared-ptr","slug":"shared-ptr"},{"name":"immutability","slug":"immutability"},{"name":"regex-greedy","slug":"regex-greedy"},{"name":"copy-constructor","slug":"copy-constructor"},{"name":"blob","slug":"blob"},{"name":"argument-unpacking","slug":"argument-unpacking"},{"name":"time-complexity","slug":"time-complexity"},{"name":"eclipse","slug":"eclipse"},{"name":"quoting","slug":"quoting"},{"name":"git-reset","slug":"git-reset"},{"name":"count","slug":"count"},{"name":"facelets","slug":"facelets"},{"name":"comma-operator","slug":"comma-operator"},{"name":"identity","slug":"identity"},{"name":"import","slug":"import"}]},"__N_SSG":true}