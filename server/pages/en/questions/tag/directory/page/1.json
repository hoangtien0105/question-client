{"pageProps":{"data":{"count":1,"rows":[{"id":535,"title":"How do I list all files of a directory?","slug":"how-do-i-list-all-files-of-a-directory-1657388340404","postType":"QUESTION","createdAt":"2022-07-09T17:39:00.000Z","updatedAt":"2022-07-09T17:39:00.000Z","tags":[{"id":2622,"name":"directory","slug":"directory","createdAt":"2022-07-09T17:39:00.000Z","updatedAt":"2022-07-09T17:39:00.000Z","Questions_Tags":{"questionId":535,"tagId":2622}}]}]},"slug":"directory","page":"1","answers":{"535":["\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.python.org/2/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot; title=&quot;os.listdir&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; returns everything inside a directory -- including both &lt;strong&gt;files&lt;/strong&gt; and &lt;strong&gt;directories&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/os.path.html#module-os.path&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&apos;s &lt;code&gt;isfile()&lt;/code&gt; can be used to only list files:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; listdir\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; isfile, join\nonlyfiles = [f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; listdir(mypath) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isfile(join(mypath, f))]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/2/library/os.html#os.walk&quot; rel=&quot;noreferrer&quot; title=&quot;os.walk&quot;&gt;&lt;code&gt;os.walk()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;yields two lists&lt;/strong&gt; for each directory it visits -- one for &lt;strong&gt;files&lt;/strong&gt; and one for &lt;strong&gt;dirs&lt;/strong&gt;. If you only want the top directory you can break the first time it yields:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; walk\n\nf = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (dirpath, dirnames, filenames) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; walk(mypath):\n    f.extend(filenames)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or, shorter:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; walk\n\nfilenames = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(walk(mypath), (&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, []))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# [] if no file&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I prefer using the &lt;a href=&quot;https://docs.python.org/library/glob.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; module, as it does pattern matching and expansion.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/adam/*&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It does pattern matching intuitively&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-comment&quot;&gt;# All files and directories ending with .txt and that don&apos;t begin with a dot:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/adam/*.txt&quot;&lt;/span&gt;)) \n&lt;span class=&quot;hljs-comment&quot;&gt;# All files and directories ending with .txt with depth of 2 folders, ignoring names beginning with a dot:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/adam/*/*.txt&quot;&lt;/span&gt;)) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will return a list with the queried files and directories:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/adam/file1.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/adam/file2.txt&apos;&lt;/span&gt;, .... ]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that &lt;code&gt;glob&lt;/code&gt; ignores files and directories that begin with a dot &lt;code&gt;.&lt;/code&gt;, as those are considered hidden files and directories, unless the pattern is something like &lt;code&gt;.*&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/glob.html#glob.escape&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;glob.escape&lt;/code&gt;&lt;/a&gt; to escape strings that are not meant to be patterns:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(glob.escape(directory_name) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/*.txt&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;list in the current directory&lt;/p&gt;\n&lt;p&gt;With &lt;code&gt;listdir&lt;/code&gt; in &lt;code&gt;os&lt;/code&gt; module you get the files and the folders in the current dir&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\narr = os.listdir()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Looking in a directory&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c:\\\\files&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with &lt;code&gt;glob&lt;/code&gt; you can specify a type of file to list like this&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n\ntxtfiles = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*.txt&quot;&lt;/span&gt;):\n    txtfiles.append(file)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*.txt&quot;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;get the full path of only files in the current directory&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; listdir\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; isfile, join\n\ncwd = os.getcwd()\nonlyfiles = [os.path.join(cwd, f) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(cwd) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; \nos.path.isfile(os.path.join(cwd, f))]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(onlyfiles) \n\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;G:\\\\getfilesname\\\\getfilesname.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;G:\\\\getfilesname\\\\example.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Getting the full path name with &lt;code&gt;os.path.abspath&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;You get the full path in return&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n files_path = [os.path.abspath(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir()]\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(files_path)\n \n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\documenti\\applications.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\documenti\\collections.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Walk: going through sub directories&lt;/p&gt;\n&lt;p&gt;os.walk returns the root, the directories list and the files list, that is why I unpacked them in r, d, f in the for loop; it, then, looks for other files and directories in the subfolders of the root and so on until there are no subfolders.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Getting the current work directory (cwd)&lt;/span&gt;\nthisdir = os.getcwd()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# r=root, d=directories, f = files&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r, d, f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(thisdir):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; file.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.docx&quot;&lt;/span&gt;):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(os.path.join(r, file))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To go up in the directory tree&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Method 1&lt;/span&gt;\nx = os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;..&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Method 2&lt;/span&gt;\nx= os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get files of a particular subdirectory with &lt;code&gt;os.listdir()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\nx = os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./content&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;os.walk(&apos;.&apos;) - current directory&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n arr = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(arr)\n \n &amp;gt;&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;5bs_Turismo1.pdf&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;5bs_Turismo1.pptx&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;esperienza.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;next(os.walk(&apos;.&apos;)) and os.path.join(&apos;dir&apos;, &apos;file&apos;)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n arr = []\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d,r,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;)):\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n         arr.append(os.path.join(r,file))\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr:\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(files)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;F:\\\\_python\\\\dict_class.py\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;F:\\\\_python\\\\programmi.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;next... walk&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; [os.path.join(r,file) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r,d,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n \n &amp;gt;&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\dict_class.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\programmi.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;os.walk&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [os.path.join(r,file) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r,d,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\dict.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\progr.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\readl.py&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;os.listdir() - get only txt files&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; arr_txt = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.txt&quot;&lt;/span&gt;)]\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;glob&lt;/code&gt; to get the full path of the files&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; path\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n\nx = [path(f).abspath() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\*.txt&quot;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;os.path.isfile&lt;/code&gt; to avoid directories in the list&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os.path\nlistOfFiles = [f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(f)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; from Python 3.4&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n\nflist = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pathlib.Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).iterdir():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.is_file():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n        flist.append(p)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With &lt;code&gt;list comprehension&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flist = [p &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pathlib.Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).iterdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use glob method in pathlib.Path()&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n\npy = pathlib.Path().glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*.py&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get all and only files with os.walk: checks only in the third element returned, i.e. the list of the files&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\nx = [i[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)]\ny=[]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; t:\n        y.append(f)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get only files with next in a directory: returns only the file in the root folder&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n x = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;F://python&apos;&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get only directories with next and walk in a directory, because in the [1] element there are the folders only&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;F://python&apos;&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# for the current dir use (&apos;.&apos;)&lt;/span&gt;\n \n &amp;gt;&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;python3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;others&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get all the &lt;code&gt;subdir&lt;/code&gt; names with &lt;code&gt;walk&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r,d,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dirs &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dirs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;os.scandir()&lt;/code&gt; from Python 3.5 and greater&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\nx = [f.name &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.scandir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.is_file()]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Another example with `scandir` (a little variation from docs.python.org)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This one is more efficient than `os.listdir`.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# In this case, it shows the files only in the current directory&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# where the script is executed.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; os.scandir() &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; i:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; i:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry.is_file():\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry.name)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\nos.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&quot;somedirectory&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will return a list of all files and directories in &quot;somedirectory&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;A one-line solution to get &lt;strong&gt;only list of files&lt;/strong&gt; (no subdirectories):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filenames = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(path))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or absolute pathnames:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;paths = [os.path.join(path, fn) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; fn &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(path))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Getting Full File Paths From a Directory and All Its Subdirectories&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_filepaths&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;directory&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    This function will generate the file names in a directory \n    tree by walking the tree either top-down or bottom-up. For each \n    directory in the tree rooted at directory top (including top itself), \n    it yields a 3-tuple (dirpath, dirnames, filenames).\n    &quot;&quot;&quot;&lt;/span&gt;\n    file_paths = []  &lt;span class=&quot;hljs-comment&quot;&gt;# List which will store all of the full filepaths.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Walk the tree.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; root, directories, files &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(directory):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; files:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Join the two strings in order to form the full filepath.&lt;/span&gt;\n            filepath = os.path.join(root, filename)\n            file_paths.append(filepath)  &lt;span class=&quot;hljs-comment&quot;&gt;# Add it to the list.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; file_paths  &lt;span class=&quot;hljs-comment&quot;&gt;# Self-explanatory.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Run the above function and store its results in a variable.   &lt;/span&gt;\nfull_file_paths = get_filepaths(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/Users/johnny/Desktop/TEST&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The path I provided in the above function contained 3 files two of them in the root directory, and another in a subfolder called &quot;SUBFOLDER.&quot;  You can now do things like:&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;print full_file_paths&lt;/code&gt; which will print the list:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[&apos;/Users/johnny/Desktop/TEST/file1.txt&apos;, &apos;/Users/johnny/Desktop/TEST/file2.txt&apos;, &apos;/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat&apos;]&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you&apos;d like, you can open and read the contents, or focus only on files with the extension &quot;.dat&quot; like in the code below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; full_file_paths:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.dat&quot;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Since version 3.4 there are builtin &lt;em&gt;iterators&lt;/em&gt; for this which are a lot more efficient than &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.python.org/3/library/pathlib.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;: &lt;em&gt;New in version 3.4.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[p &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pathlib.Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).iterdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;http://www.python.org/dev/peps/pep-0428/&quot; rel=&quot;noreferrer&quot;&gt;PEP 428&lt;/a&gt;, the aim of the &lt;a href=&quot;http://docs.python.org/3/library/pathlib.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt; library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.scandir()&lt;/code&gt;&lt;/a&gt;: &lt;em&gt;New in version 3.5.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[entry &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.scandir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.walk&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.walk()&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.scandir()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt; from version 3.5, and its speed got increased by 2-20 times according to &lt;a href=&quot;http://www.python.org/dev/peps/pep-0471/&quot; rel=&quot;noreferrer&quot;&gt;PEP 471&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Let me also recommend reading ShadowRanger&apos;s comment below.&lt;/p&gt;\n    ","\n&lt;h2&gt;Preliminary notes&lt;/h2&gt;\n\n\n\n&lt;ul&gt;\n&lt;li&gt;Although there&apos;s a clear differentiation between &lt;em&gt;file&lt;/em&gt; and &lt;em&gt;directory&lt;/em&gt; terms in the question text, some may argue that directories are actually special files&lt;/li&gt;\n&lt;li&gt;The statement: &quot;&lt;em&gt;all files of a directory&lt;/em&gt;&quot; can be interpreted in two ways:\n\n&lt;ol&gt;\n&lt;li&gt;All &lt;strong&gt;direct&lt;/strong&gt; (or level 1) descendants &lt;strong&gt;only&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;All descendants in the whole directory tree (including the ones in sub-directories)&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When the question was asked, I imagine that &lt;em&gt;Python &lt;strong&gt;2&lt;/strong&gt;&lt;/em&gt;, was the &lt;em&gt;LTS&lt;/em&gt; version, however the code samples will be run by &lt;em&gt;Python &lt;strong&gt;3&lt;/strong&gt;(&lt;strong&gt;.5&lt;/strong&gt;)&lt;/em&gt; (I&apos;ll keep them as &lt;em&gt;Python 2&lt;/em&gt; compliant as possible; also, any code belonging to &lt;em&gt;Python&lt;/em&gt; that I&apos;m going to post, is from &lt;strong&gt;v3.5.4&lt;/strong&gt; - unless otherwise specified). That has consequences related to another keyword in the question: &quot;&lt;em&gt;add them into a &lt;strong&gt;list&lt;/strong&gt;&lt;/em&gt;&quot;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In pre &lt;em&gt;Python 2.2&lt;/em&gt; versions, sequences (iterables) were mostly represented by lists (tuples, sets, ...)&lt;/li&gt;\n&lt;li&gt;In &lt;em&gt;Python 2.2&lt;/em&gt;, the concept of &lt;strong&gt;generator&lt;/strong&gt; (&lt;a href=&quot;https://wiki.python.org/moin/Generators&quot; rel=&quot;noreferrer&quot;&gt;[Python.Wiki]: Generators&lt;/a&gt;) - courtesy of &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: The yield statement&lt;/a&gt;) - was introduced. As time passed, generator counterparts started to appear for functions that returned/worked with lists&lt;/li&gt;\n&lt;li&gt;In &lt;em&gt;Python 3&lt;/em&gt;, generator is the default behavior&lt;/li&gt;\n&lt;li&gt;Not sure if returning a list is still mandatory (or a generator would do as well), but passing a generator to the &lt;em&gt;list&lt;/em&gt; constructor, will create a list out of it (and also consume it). The example below illustrates the differences on &lt;a href=&quot;https://docs.python.org/3/library/functions.html#map&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: &lt;strong&gt;map&lt;/strong&gt;(&lt;em&gt;function, iterable, ...&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;2.7.10 (default, Mar  8 2016, 15:02:46) [MSC v.1600 64 bit (AMD64)]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])  &lt;span class=&quot;hljs-comment&quot;&gt;# Just a dummy lambda function&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(m)\n([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(m)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(m)\n(&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x000001B4257342B0&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;map&apos;&lt;/span&gt;&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(m)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nTypeError: &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; of &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;map&apos;&lt;/span&gt; has no &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm0 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(m)  &lt;span class=&quot;hljs-comment&quot;&gt;# Build a list from the generator&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm0, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(lm0)\n([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm1 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(m)  &lt;span class=&quot;hljs-comment&quot;&gt;# Build a list from the same generator&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm1, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(lm1)  &lt;span class=&quot;hljs-comment&quot;&gt;# Empty list now - generator already consumed&lt;/span&gt;\n([], &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The examples will be based on a directory called &lt;em&gt;root_dir&lt;/em&gt; with the following structure (this example is for &lt;em&gt;Win&lt;/em&gt;, but I&apos;m using the same tree on &lt;em&gt;Lnx&lt;/em&gt; as well):&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;E:\\Work\\Dev\\StackOverflow\\q003207219&amp;gt;tree /f &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\nFolder PATH listing &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; volume Work\nVolume serial number &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; 00000029 &lt;span class=&quot;hljs-number&quot;&gt;3655&lt;/span&gt;:6FED\nE:\\WORK\\DEV\\STACKOVERFLOW\\Q003207219\\ROOT_DIR\n¦   file0\n¦   file1\n¦\n+---dir0\n¦   +---dir00\n¦   ¦   ¦   file000\n¦   ¦   ¦\n¦   ¦   +---dir000\n¦   ¦           file0000\n¦   ¦\n¦   +---dir01\n¦   ¦       file010\n¦   ¦       file011\n¦   ¦\n¦   +---dir02\n¦       +---dir020\n¦           +---dir0200\n+---dir1\n¦       file10\n¦       file11\n¦       file12\n¦\n+---dir2\n¦   ¦   file20\n¦   ¦\n¦   +---dir20\n¦           file200\n¦\n+---dir3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;Solutions&lt;/h2&gt;\n\n&lt;h3&gt;Programmatic approaches:&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: os.&lt;strong&gt;listdir&lt;/strong&gt;(&lt;em&gt;path=&apos;.&apos;&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order, and does not include the special entries &lt;code&gt;&apos;.&apos;&lt;/code&gt; and &lt;code&gt;&apos;..&apos;&lt;/code&gt; ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Path relative to current dir (os.getcwd())&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;os.listdir(root_dir)  &lt;span class=&quot;hljs-comment&quot;&gt;# List all the items in root_dir&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(root_dir) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(root_dir, item))]  &lt;span class=&quot;hljs-comment&quot;&gt;# Filter items and only keep files (strip out directories)&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A more elaborate example (&lt;em&gt;code_os_listdir.py&lt;/em&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pprint &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pformat\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_dir_content&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders, recursive&lt;/span&gt;):\n    entries = os.listdir(path)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entries:\n        entry_with_path = os.path.join(path, entry)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(entry_with_path):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; include_folders:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; entry_with_path\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; recursive:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; sub_entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _get_dir_content(entry_with_path, include_folders, recursive):\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; sub_entry\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; entry_with_path\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_dir_content&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    path_len = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(path) + &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(os.path.sep)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _get_dir_content(path, include_folders, recursive):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; prepend_folder_name &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; item[path_len:]\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_dir_content_old&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders, recursive&lt;/span&gt;):\n    entries = os.listdir(path)\n    ret = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entries:\n        entry_with_path = os.path.join(path, entry)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(entry_with_path):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; include_folders:\n                ret.append(entry_with_path)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; recursive:\n                ret.extend(_get_dir_content_old(entry_with_path, include_folders, recursive))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            ret.append(entry_with_path)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_dir_content_old&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    path_len = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(path) + &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(os.path.sep)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [item &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; prepend_folder_name &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; item[path_len:] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _get_dir_content_old(path, include_folders, recursive)]\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n    ret0 = get_dir_content(root_dir, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    lret0 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(ret0)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ret0, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(lret0), pformat(lret0))\n    ret1 = get_dir_content_old(root_dir, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(ret1), pformat(ret1))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;There are two implementations:\n\n&lt;ul&gt;\n&lt;li&gt;One that uses generators (of course here it seems useless, since I immediately convert the result to a list)&lt;/li&gt;\n&lt;li&gt;The classic one (function names ending in &lt;strong&gt;_old&lt;/strong&gt;)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Recursion is used (to get into subdirectories)&lt;/li&gt;\n&lt;li&gt;For each implementation there are two functions:\n\n&lt;ul&gt;\n&lt;li&gt;One that starts with an &lt;em&gt;underscore&lt;/em&gt; (&lt;strong&gt;_&lt;/strong&gt;): &quot;private&quot; (should not be called directly) - that does all the work&lt;/li&gt;\n&lt;li&gt;The public one (wrapper over previous): it just strips off the initial path (if required) from the returned entries. It&apos;s an ugly implementation, but it&apos;s the only idea that I could come with at this point&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;In terms of performance, generators are generally a little bit faster (considering both &lt;em&gt;creation&lt;/em&gt; and  &lt;em&gt;iteration&lt;/em&gt; times), but I didn&apos;t test them in recursive functions, and also I am iterating inside the function over inner generators - don&apos;t know how performance friendly is that&lt;/li&gt;\n&lt;li&gt;Play with the arguments to get different results&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(py35x64_test) E:\\Work\\Dev\\StackOverflow\\q003207219&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;e:\\Work\\Dev\\VEnvs\\py35x64_test\\Scripts\\python.exe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;code_os_listdir.py&quot;&lt;/span&gt;\n&amp;lt;generator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; get_dir_content at &lt;span class=&quot;hljs-number&quot;&gt;0x000001BDDBB3DF10&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00\\\\dir000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00\\\\dir000\\\\file0000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00\\\\file000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir01&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir01\\\\file010&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir01\\\\file011&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir02&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir02\\\\dir020&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir02\\\\dir020\\\\dir0200&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1\\\\file10&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1\\\\file11&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1\\\\file12&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2\\\\dir20&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2\\\\dir20\\\\file200&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2\\\\file20&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir3&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir00\\\\dir000\\\\file0000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir00\\\\file000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir01\\\\file010&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir01\\\\file011&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1\\\\file10&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1\\\\file11&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1\\\\file12&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2\\\\dir20\\\\file200&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2\\\\file20&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: os.&lt;strong&gt;scandir&lt;/strong&gt;(&lt;em&gt;path=&apos;.&apos;&lt;/em&gt;)&lt;/a&gt; (&lt;em&gt;Python &lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;+, backport: &lt;a href=&quot;https://pypi.org/project/scandir&quot; rel=&quot;noreferrer&quot;&gt;[PyPI]: scandir&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Return an iterator of &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry&lt;/a&gt; objects corresponding to the entries in the directory given by &lt;em&gt;path&lt;/em&gt;. The entries are yielded in arbitrary order, and the special entries &lt;code&gt;&apos;.&apos;&lt;/code&gt; and &lt;code&gt;&apos;..&apos;&lt;/code&gt; are not included.&lt;/p&gt;\n  \n  &lt;p&gt;Using &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;scandir()&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;listdir()&lt;/a&gt; can significantly increase the performance of code that also needs file type or file attribute information, because &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry&lt;/a&gt; objects expose this information if the operating system provides it when scanning a directory. All &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry&lt;/a&gt; methods may perform a system call, but &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry.is_dir&quot; rel=&quot;noreferrer&quot;&gt;is_dir()&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry.is_file&quot; rel=&quot;noreferrer&quot;&gt;is_file()&lt;/a&gt; usually only require a system call for symbolic links; &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry.stat&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry.stat()&lt;/a&gt; always requires a system call on Unix but only requires one for symbolic links on Windows.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = os.path.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# Explicitly prepending current directory&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scandir_iterator = os.scandir(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scandir_iterator\n&amp;lt;nt.ScandirIterator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x00000268CF4BC140&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.path &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; scandir_iterator]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.path &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; scandir_iterator]  &lt;span class=&quot;hljs-comment&quot;&gt;# Will yield an empty list as it was consumed by previous iteration (automatically performed by the list comprehension)&lt;/span&gt;\n[]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scandir_iterator = os.scandir(root_dir)  &lt;span class=&quot;hljs-comment&quot;&gt;# Reinitialize the generator&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; scandir_iterator :\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(item.path):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(item.name)\n...\nfile0\nfile1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It&apos;s similar to &lt;code&gt;os.listdir&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;But it&apos;s also more flexible (and offers more functionality), more &lt;em&gt;Python&lt;/em&gt;ic (and in some cases, faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.walk&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: os.&lt;strong&gt;walk&lt;/strong&gt;(&lt;em&gt;top, topdown=True, onerror=None, followlinks=False&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory &lt;em&gt;top&lt;/em&gt; (including &lt;em&gt;top&lt;/em&gt; itself), it yields a 3-tuple (&lt;code&gt;dirpath&lt;/code&gt;, &lt;code&gt;dirnames&lt;/code&gt;, &lt;code&gt;filenames&lt;/code&gt;).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = os.path.join(os.getcwd(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# Specify the full path&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;walk_generator = os.walk(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_entry = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(walk_generator)  &lt;span class=&quot;hljs-comment&quot;&gt;# First entry corresponds to the root dir (passed as an argument)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_entry\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;])\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# Display dirs and files (direct descendants) in a single list&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[os.path.join(root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], item) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]  &lt;span class=&quot;hljs-comment&quot;&gt;# Display all the entries in the previous list by their full path&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; walk_generator:  &lt;span class=&quot;hljs-comment&quot;&gt;# Display the rest of the elements (corresponding to every subdir)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry)\n...\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir00&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir02&apos;&lt;/span&gt;], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir00&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir000&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file000&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir00\\\\dir000&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file0000&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir01&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file010&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file011&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir02&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir020&apos;&lt;/span&gt;], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir02\\\\dir020&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0200&apos;&lt;/span&gt;], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir02\\\\dir020\\\\dir0200&apos;&lt;/span&gt;, [], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir1&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file12&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir2&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir20&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file20&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir2\\\\dir20&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file200&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir3&apos;&lt;/span&gt;, [], [])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Under the scenes, it uses &lt;code&gt;os.scandir&lt;/code&gt; (&lt;code&gt;os.listdir&lt;/code&gt; on older versions)&lt;/li&gt;\n&lt;li&gt;It does the heavy lifting by recurring in subfolders&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/glob.html#glob.glob&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: glob.&lt;strong&gt;glob&lt;/strong&gt;(&lt;em&gt;pathname, *, recursive=False&lt;/em&gt;)&lt;/a&gt; (&lt;a href=&quot;https://docs.python.org/3/library/glob.html#glob.glob&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: glob.&lt;strong&gt;iglob&lt;/strong&gt;(&lt;em&gt;pathname, *, recursive=False&lt;/em&gt;)&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Return a possibly-empty list of path names that match &lt;em&gt;pathname&lt;/em&gt;, which must be a string containing a path specification. &lt;em&gt;pathname&lt;/em&gt; can be either absolute (like &lt;code&gt;/usr/src/Python-1.5/Makefile&lt;/code&gt;) or relative (like &lt;code&gt;../../Tools/*/*.gif&lt;/code&gt;), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell).&lt;br&gt;...&lt;br&gt;&lt;strong&gt;&lt;em&gt;Changed in version 3.5&lt;/em&gt;&lt;/strong&gt;: Support for recursive globs using &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob, os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;wildcard_pattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = os.path.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;, wildcard_pattern)  &lt;span class=&quot;hljs-comment&quot;&gt;# Match every file/dir name&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\*&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;glob_list = glob.glob(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;glob_list\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt; + os.path.sep, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob_list]  &lt;span class=&quot;hljs-comment&quot;&gt;# Strip the dir name and the path separator from begining&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.iglob(root_dir + &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry)\n...\nroot_dir\\\nroot_dir\\dir0\nroot_dir\\dir0\\dir00\nroot_dir\\dir0\\dir00\\dir000\nroot_dir\\dir0\\dir00\\dir000\\file0000\nroot_dir\\dir0\\dir00\\file000\nroot_dir\\dir0\\dir01\nroot_dir\\dir0\\dir01\\file010\nroot_dir\\dir0\\dir01\\file011\nroot_dir\\dir0\\dir02\nroot_dir\\dir0\\dir02\\dir020\nroot_dir\\dir0\\dir02\\dir020\\dir0200\nroot_dir\\dir1\nroot_dir\\dir1\\file10\nroot_dir\\dir1\\file11\nroot_dir\\dir1\\file12\nroot_dir\\dir2\nroot_dir\\dir2\\dir20\nroot_dir\\dir2\\dir20\\file200\nroot_dir\\dir2\\file20\nroot_dir\\dir3\nroot_dir\\file0\nroot_dir\\file1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Uses &lt;code&gt;os.listdir&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;For large trees (especially if &lt;em&gt;recursive&lt;/em&gt; is on), &lt;em&gt;iglob&lt;/em&gt; is preferred&lt;/li&gt;\n&lt;li&gt;Allows advanced filtering based on name (due to the wildcard)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: class pathlib.&lt;strong&gt;Path&lt;/strong&gt;(&lt;em&gt;*pathsegments&lt;/em&gt;)&lt;/a&gt; (&lt;em&gt;Python &lt;strong&gt;3.4&lt;/strong&gt;&lt;/em&gt;+, backport: &lt;a href=&quot;https://pypi.org/project/pathlib2&quot; rel=&quot;noreferrer&quot;&gt;[PyPI]: pathlib2&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance = pathlib.Path(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance\nWindowsPath(&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance.name\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance.is_dir()\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.name &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; root_dir_instance.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)]  &lt;span class=&quot;hljs-comment&quot;&gt;# Wildcard searching for all direct descendants&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[os.path.join(item.parent.name, item.name) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; root_dir_instance.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; item.is_dir()]  &lt;span class=&quot;hljs-comment&quot;&gt;# Display paths (including parent) for files only&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This is &lt;em&gt;one&lt;/em&gt; way of achieving our goal&lt;/li&gt;\n&lt;li&gt;It&apos;s the &lt;em&gt;OOP&lt;/em&gt; style of handling paths&lt;/li&gt;\n&lt;li&gt;Offers lots of functionalities&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;6&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/dircache.html#dircache.listdir&quot; rel=&quot;noreferrer&quot;&gt;[Python 2]: dircache.listdir(path)&lt;/a&gt; (&lt;em&gt;Python &lt;strong&gt;2&lt;/strong&gt;&lt;/em&gt; only)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;But, according to &lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Lib/dircache.py&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: python/cpython - (2.7) cpython/Lib/dircache.py&lt;/a&gt;, it&apos;s just a (thin) wrapper over &lt;code&gt;os.listdir&lt;/code&gt; with caching&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;listdir&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;List directory contents, using cache.&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        cached_mtime, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = cache[path]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; cache[path]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; KeyError:\n        cached_mtime, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, []\n    mtime = os.stat(path).st_mtime\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; mtime != cached_mtime:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = os.listdir(path)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.sort()\n    cache[path] = mtime, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;7&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man3/opendir.3.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: OPENDIR(3)&lt;/a&gt; / &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: READDIR(3)&lt;/a&gt; / &lt;a href=&quot;http://man7.org/linux/man-pages/man3/closedir.3.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: CLOSEDIR(3)&lt;/a&gt; via &lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#module-ctypes&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: ctypes - A foreign function library for Python&lt;/a&gt; (&lt;em&gt;POSIX&lt;/em&gt; specific)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#module-ctypes&quot; rel=&quot;noreferrer&quot;&gt;ctypes&lt;/a&gt; is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;code_ctypes.py&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ctypes &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Structure, \\\n    c_ulonglong, c_longlong, c_ushort, c_ubyte, c_char, c_int, \\\n    CDLL, POINTER, \\\n    create_string_buffer, get_errno, set_errno, cast\n\n\nDT_DIR = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nDT_REG = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n\nchar256 = c_char * &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinuxDirent64&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Structure&lt;/span&gt;):\n    _fields_ = [\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_ino&quot;&lt;/span&gt;, c_ulonglong),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_off&quot;&lt;/span&gt;, c_longlong),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_reclen&quot;&lt;/span&gt;, c_ushort),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_type&quot;&lt;/span&gt;, c_ubyte),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_name&quot;&lt;/span&gt;, char256),\n    ]\n\nLinuxDirent64Ptr = POINTER(LinuxDirent64)\n\nlibc_dll = this_process = CDLL(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, use_errno=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# ALWAYS set argtypes and restype for functions, otherwise it&apos;s UB!!!&lt;/span&gt;\nopendir = libc_dll.opendir\nreaddir = libc_dll.readdir\nclosedir = libc_dll.closedir\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_dir_content&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    ret = [path, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;()]\n    dir_stream = opendir(create_string_buffer(path.encode()))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dir_stream == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;opendir returned NULL (errno: {:d})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(get_errno()))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n    set_errno(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    dirent_addr = readdir(dir_stream)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; dirent_addr:\n        dirent_ptr = cast(dirent_addr, LinuxDirent64Ptr)\n        dirent = dirent_ptr.contents\n        name = dirent.d_name.decode()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dirent.d_type &amp;amp; DT_DIR:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;..&quot;&lt;/span&gt;):\n                ret[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].append(name)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; dirent.d_type &amp;amp; DT_REG:\n            ret[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].append(name)\n        dirent_addr = readdir(dir_stream)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; get_errno():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;readdir returned NULL (errno: {:d})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(get_errno()))\n    closedir(dir_stream)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{:s} on {:s}\\n&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(sys.version, sys.platform))\n    root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n    entries = get_dir_content(root_dir)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entries)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It loads the three functions from &lt;em&gt;libc&lt;/em&gt; (loaded in the current process) and calls them (for more details check &lt;a href=&quot;https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-using-python/44661513#44661513&quot;&gt;[SO]: How do I check whether a file exists without exceptions? (@CristiFati&apos;s answer)&lt;/a&gt; - last notes from item &lt;strong&gt;&lt;em&gt;#4.&lt;/em&gt;&lt;/strong&gt;). That would place this approach very close to the &lt;em&gt;Python&lt;/em&gt; / &lt;em&gt;C&lt;/em&gt; edge&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;LinuxDirent64&lt;/em&gt; is the &lt;em&gt;ctypes&lt;/em&gt; representation of &lt;em&gt;struct dirent64&lt;/em&gt; from &lt;a href=&quot;http://man7.org/linux/man-pages/man0/dirent.h.0p.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: dirent.h(0P)&lt;/a&gt; (so are the &lt;em&gt;DT_&lt;/em&gt; constants) from my machine: &lt;em&gt;Ubtu 16 x64&lt;/em&gt; (&lt;em&gt;4.10.0-40-generic&lt;/em&gt; and &lt;em&gt;libc6-dev:amd64&lt;/em&gt;). On other flavors/versions, the struct definition might differ, and if so, the &lt;em&gt;ctypes&lt;/em&gt; alias should be updated, otherwise it will yield &lt;strong&gt;Undefined Behavior&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;It returns data in the &lt;code&gt;os.walk&lt;/code&gt;&apos;s format. I didn&apos;t bother to make it recursive, but starting from the existing code, that would be a fairly trivial task&lt;/li&gt;\n&lt;li&gt;Everything is doable on &lt;em&gt;Win&lt;/em&gt; as well, the data (libraries, functions, structs, constants, ...) differ&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[cfati@cfati-ubtu16x64-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:~/Work/Dev/StackOverflow/q003207219]&amp;gt; ./code_ctypes.py\n&lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt; (default, Nov &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)\n[GCC &lt;span class=&quot;hljs-number&quot;&gt;5.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20160609&lt;/span&gt;] on linux\n\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;8&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.activestate.com/activepython/3.1/pywin32/win32file__FindFilesW_meth.html&quot; rel=&quot;noreferrer&quot;&gt;[ActiveState.Docs]: win32file.FindFilesW&lt;/a&gt; (&lt;em&gt;Win&lt;/em&gt; specific)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Retrieves a list of matching filenames, using the Windows Unicode API. An interface to the API FindFirstFileW/FindNextFileW/Find close functions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, win32file, win32con\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;wildcard = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_wildcard = os.path.join(root_dir, wildcard)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;entry_list = win32file.FindFilesW(root_dir_wildcard)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(entry_list)  &lt;span class=&quot;hljs-comment&quot;&gt;# Don&apos;t display the whole content as it&apos;s too long&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entry_list]  &lt;span class=&quot;hljs-comment&quot;&gt;# Only display the entry names&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;..&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entry_list &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;amp; win32con.FILE_ATTRIBUTE_DIRECTORY &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;..&quot;&lt;/span&gt;)]  &lt;span class=&quot;hljs-comment&quot;&gt;# Filter entries and only display dir names (except self and parent)&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[os.path.join(root_dir, entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entry_list &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;amp; (win32con.FILE_ATTRIBUTE_NORMAL | win32con.FILE_ATTRIBUTE_ARCHIVE)]  &lt;span class=&quot;hljs-comment&quot;&gt;# Only display file &quot;full&quot; names&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;win32file.FindFilesW&lt;/code&gt; is part of &lt;a href=&quot;https://github.com/mhammond/pywin32&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: mhammond/pywin32 - Python for Windows (pywin32) Extensions&lt;/a&gt;, which is a &lt;em&gt;Python&lt;/em&gt; wrapper over &lt;em&gt;WINAPI&lt;/em&gt;s&lt;/li&gt;\n&lt;li&gt;The documentation link is from &lt;a href=&quot;https://www.activestate.com&quot; rel=&quot;noreferrer&quot;&gt;ActiveState&lt;/a&gt;, as I didn&apos;t find any &lt;em&gt;PyWin32&lt;/em&gt; official documentation&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;9&quot;&gt;\n&lt;li&gt;Install some (other) third-party package that does the trick\n\n&lt;ul&gt;\n&lt;li&gt;Most likely, will rely on one (or more) of the above (maybe with slight customizations)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Code is meant to be portable (except places that target a specific area - which are marked) or cross:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;platform (&lt;em&gt;Nix&lt;/em&gt;, &lt;em&gt;Win&lt;/em&gt;, )&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Python&lt;/em&gt; version (2, 3, )&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Multiple path styles (absolute, relatives) were used across the above variants, to illustrate the fact that the &quot;tools&quot; used are flexible in this direction&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;os.listdir&lt;/code&gt; and &lt;code&gt;os.scandir&lt;/code&gt; use &lt;em&gt;opendir&lt;/em&gt; / &lt;em&gt;readdir&lt;/em&gt; / &lt;em&gt;closedir&lt;/em&gt; (&lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/desktop/api/fileapi/nf-fileapi-findfirstfilew&quot; rel=&quot;noreferrer&quot;&gt;[MS.Docs]: FindFirstFileW function&lt;/a&gt; / &lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/desktop/api/fileapi/nf-fileapi-findnextfilew&quot; rel=&quot;noreferrer&quot;&gt;[MS.Docs]: FindNextFileW function&lt;/a&gt; / &lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/desktop/api/fileapi/nf-fileapi-findclose&quot; rel=&quot;noreferrer&quot;&gt;[MS.Docs]: FindClose function&lt;/a&gt;) (via &lt;a href=&quot;https://github.com/python/cpython/blob/master/Modules/posixmodule.c&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: python/cpython - (master) cpython/Modules/posixmodule.c&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;win32file.FindFilesW&lt;/code&gt; uses those (&lt;em&gt;Win&lt;/em&gt; specific) functions as well (via &lt;a href=&quot;https://github.com/mhammond/pywin32/blob/master/win32/src/win32file.i&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: mhammond/pywin32 - (master) pywin32/win32/src/win32file.i&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;_get_dir_content&lt;/em&gt; (from point &lt;strong&gt;&lt;em&gt;#1.&lt;/em&gt;&lt;/strong&gt;) can be implemented using any of these approaches (some will require more work and some less)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Some advanced filtering (instead of just file &lt;em&gt;vs.&lt;/em&gt; dir) could be done: e.g. the &lt;em&gt;include_folders&lt;/em&gt; argument could be replaced by another one (e.g. &lt;em&gt;filter_func&lt;/em&gt;) which would be a function that takes a path as an argument: &lt;code&gt;filter_func=lambda x: True&lt;/code&gt; (this doesn&apos;t strip out anything) and inside &lt;em&gt;_get_dir_content&lt;/em&gt; something like: &lt;code&gt;if not filter_func(entry_with_path): continue&lt;/code&gt; (if the function fails for one entry, it will be skipped), but the more complex the code becomes, the longer it will take to execute&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nota bene!&lt;/strong&gt; Since recursion is used, I must mention that I did some tests on my laptop (&lt;em&gt;Win 10 x64&lt;/em&gt;), totally unrelated to this problem, and when the recursion level was reaching values somewhere in the &lt;em&gt;(990 .. 1000)&lt;/em&gt; range (&lt;em&gt;recursionlimit&lt;/em&gt; - 1000 (default)), I got &lt;em&gt;StackOverflow&lt;/em&gt; :). If the directory tree exceeds that limit (I am not an &lt;em&gt;FS&lt;/em&gt; expert, so I don&apos;t know if that is even possible), that could be a problem. &lt;br&gt;\nI must also mention that I didn&apos;t try to increase &lt;em&gt;recursionlimit&lt;/em&gt; because I have no experience in the area (how much can I increase it before having to also increase the stack at &lt;em&gt;OS&lt;/em&gt; level), but in theory there will always be the possibility for failure, if the dir depth is larger than the highest possible &lt;em&gt;recursionlimit&lt;/em&gt; (on that machine)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The code samples are for demonstrative purposes only. That means that I didn&apos;t take into account error handling (I don&apos;t think there&apos;s any &lt;strong&gt;&lt;em&gt;try&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;except&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;finally&lt;/em&gt;&lt;/strong&gt; block), so the code is not robust (the reason is: to keep it as simple and short as possible). For &lt;em&gt;production&lt;/em&gt;, error handling should be added as well&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Other approaches:&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Use &lt;em&gt;Python&lt;/em&gt; only as a wrapper&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Everything is done using another technology&lt;/li&gt;\n&lt;li&gt;That technology is invoked from &lt;em&gt;Python&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The most famous flavor that I know is what I call the &lt;em&gt;system administrator&lt;/em&gt; approach:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use &lt;em&gt;Python&lt;/em&gt; (or any programming language for that matter) in order to execute &lt;em&gt;shell&lt;/em&gt; commands (and parse their outputs)&lt;/li&gt;\n&lt;li&gt;Some consider this a neat hack&lt;/li&gt;\n&lt;li&gt;I consider it more like a lame workaround (&lt;em&gt;gainarie&lt;/em&gt;), as the action per se is performed from &lt;em&gt;shell&lt;/em&gt; (&lt;em&gt;cmd&lt;/em&gt; in this case), and thus doesn&apos;t have anything to do with &lt;em&gt;Python&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Filtering (&lt;code&gt;grep&lt;/code&gt; / &lt;code&gt;findstr&lt;/code&gt;) or output formatting could be done on both sides, but I&apos;m not going to insist on it. Also, I deliberately used &lt;code&gt;os.system&lt;/code&gt; instead of &lt;code&gt;subprocess.Popen&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(py35x64_test) E:\\Work\\Dev\\StackOverflow\\q003207219&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;e:\\Work\\Dev\\VEnvs\\py35x64_test\\Scripts\\python.exe&quot;&lt;/span&gt; -c &lt;span class=&quot;hljs-string&quot;&gt;&quot;import os;os.system(\\&quot;dir /b root_dir\\&quot;)&quot;&lt;/span&gt;\ndir0\ndir1\ndir2\ndir3\nfile0\nfile1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In general this approach is to be avoided, since if some command output format slightly differs between &lt;em&gt;OS&lt;/em&gt; versions/flavors, the parsing code should be adapted as well; not to mention differences between locales).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I really liked &lt;a href=&quot;https://stackoverflow.com/a/3215392/901641&quot;&gt;adamk&apos;s answer&lt;/a&gt;, suggesting that you use &lt;code&gt;glob()&lt;/code&gt;, from the module of the same name. This allows you to have pattern matching with &lt;code&gt;*&lt;/code&gt;s.&lt;/p&gt;\n\n&lt;p&gt;But as other people pointed out in the comments, &lt;code&gt;glob()&lt;/code&gt; can get tripped up over inconsistent slash directions. To help with that, I suggest you use the &lt;code&gt;join()&lt;/code&gt; and &lt;code&gt;expanduser()&lt;/code&gt; functions in the &lt;code&gt;os.path&lt;/code&gt; module, and perhaps the &lt;code&gt;getcwd()&lt;/code&gt; function in the &lt;code&gt;os&lt;/code&gt; module, as well.&lt;/p&gt;\n\n&lt;p&gt;As examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under C:\\Users\\admin that contains a folder called wlp.&lt;/span&gt;\nglob(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C:\\Users\\admin\\*\\wlp&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above is terrible - the path has been hardcoded and will only ever work on Windows between the drive name and the &lt;code&gt;\\&lt;/code&gt;s being hardcoded into the path.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; join\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under Users, admin, that contains a folder called wlp.&lt;/span&gt;\nglob(join(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Users&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;admin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wlp&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above works better, but it relies on the folder name &lt;code&gt;Users&lt;/code&gt; which is often found on Windows and not so often found on other OSs. It also relies on the user having a specific name, &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; expanduser, join\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under the user directory that contains a folder called wlp.&lt;/span&gt;\nglob(join(expanduser(&lt;span class=&quot;hljs-string&quot;&gt;&apos;~&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wlp&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works perfectly across all platforms.&lt;/p&gt;\n\n&lt;p&gt;Another great example that works perfectly across platforms and does something a bit different:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os      &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; getcwd\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; join\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under the current directory that contains a folder called wlp.&lt;/span&gt;\nglob(join(getcwd(), &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wlp&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope these examples help you see the power of a few of the functions you can find in the standard Python library modules.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# returns a list of names (with extension, without full path) of all files &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# in folder path&lt;/span&gt;\n    files = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(path):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(path, name)):\n            files.append(name)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; files \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are looking for a Python implementation of &lt;strong&gt;find&lt;/strong&gt;, this is a recipe I use rather frequently:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; findtools.find_files &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (find_files, Match)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Recursively find all *.sh files in **/usr/bin**&lt;/span&gt;\nsh_files_pattern = Match(filetype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;*.sh&apos;&lt;/span&gt;)\nfound_files = find_files(path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;/usr/bin&apos;&lt;/span&gt;, match=sh_files_pattern)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; found_file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; found_files:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; found_file\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So I made a PyPI &lt;a href=&quot;https://pypi.python.org/pypi/findtools/&quot; rel=&quot;noreferrer&quot;&gt;package&lt;/a&gt; out of it and there is also a &lt;a href=&quot;https://github.com/ewiger/findtools&quot; rel=&quot;noreferrer&quot;&gt;GitHub repository&lt;/a&gt;. I hope that someone finds it potentially useful for this code.&lt;/p&gt;\n    ","\n&lt;p&gt;For greater results, you can use &lt;code&gt;listdir()&lt;/code&gt; method of the &lt;code&gt;os&lt;/code&gt; module along with a generator (a generator is a powerful iterator that keeps its state, remember?). The following code works fine with both versions: Python 2 and Python 3.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(path):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(path, file)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; file\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; files(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;):  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (file)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;listdir()&lt;/code&gt; method returns the list of entries for the given directory. The method &lt;code&gt;os.path.isfile()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if the given entry is a file. And the &lt;code&gt;yield&lt;/code&gt; operator quits the func but keeps its current state, and it returns only the name of the entry detected as a file. All the above allows us to loop over the generator function.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Returning a list of absolute filepaths, does not recurse into subdirectories&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L = [os.path.join(os.getcwd(),f) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(os.getcwd(),f))]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A wise teacher told me once that:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When there are several established ways to do something, none of them is good for all cases.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I will thus add a solution for a &lt;strong&gt;subset&lt;/strong&gt; of the problem: quite often, we only want to check whether a file matches a start string and an end string, without going into subdirectories. We would thus like a function that returns a list of filenames, like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filenames = dir_filter(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo/baz&apos;&lt;/span&gt;, radical=&lt;span class=&quot;hljs-string&quot;&gt;&apos;radical&apos;&lt;/span&gt;, extension=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.txt&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you care to first declare two functions, this can be done:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;file_filter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;filename, radical=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, extension=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Check if a filename matches a radical and extension&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; filename:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    filename = filename.strip()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(filename.startswith(radical) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; filename.endswith(extension))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dir_filter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;dirname=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, radical=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, extension=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Filter filenames in directory according to radical and extension&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; dirname:\n        dirname = &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [filename &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(dirname)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; file_filter(filename, radical, extension)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution could be easily generalized with regular expressions (and you might want to add a &lt;code&gt;pattern&lt;/code&gt; argument, if you do not want your patterns to always stick to the start or end of the filename).&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os.path\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target_dir&lt;/span&gt;):\n    item_list = os.listdir(target_dir)\n\n    file_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; item_list:\n        item_dir = os.path.join(target_dir,item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(item_dir):\n            file_list += get_files(item_dir)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            file_list.append(item_dir)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; file_list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here I use a recursive structure.&lt;/p&gt;\n    ","\n&lt;p&gt;Using generators&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;search_path&lt;/span&gt;):\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (dirpath, _, filenames) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(search_path):\n         &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; filenames:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; os.path.join(dirpath, filename)\nlist_files = get_files(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list_files:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(filename)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another very readable variant for Python 3.4+ is using pathlib.Path.glob:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\nfolder = &lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo&apos;&lt;/span&gt;\n[f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Path(folder).glob(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is simple to make more specific, e.g. only look for Python source files which are not symbolic links, also in all subdirectories:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Path(folder).glob(&lt;span class=&quot;hljs-string&quot;&gt;&apos;**/*.py&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; f.is_symlink()]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For Python 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install rglob\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then do&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; rglob\nfile_list = rglob.rglob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/base/dir/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; file_list\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s my general-purpose function for this.  It returns a list of file paths rather than filenames since I found that to be more useful.  It has a few optional arguments that make it versatile.  For instance, I often use it with arguments like &lt;code&gt;pattern=&apos;*.txt&apos;&lt;/code&gt; or &lt;code&gt;subfolders=True&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fnmatch\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_paths&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;folder=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, pattern=&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, case_sensitive=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, subfolders=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Return a list of the file paths matching the pattern in the specified \n    folder, optionally including files inside subfolders.\n    &quot;&quot;&quot;&lt;/span&gt;\n    match = fnmatch.fnmatchcase &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; case_sensitive &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; fnmatch.fnmatch\n    walked = os.walk(folder) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; subfolders &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(folder))]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [os.path.join(root, f)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; root, dirnames, filenames &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; walked\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; filenames &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; match(f, pattern)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I will provide a sample one liner where sourcepath and file type can be provided as input. The code returns a list of filenames with csv extension. Use &lt;em&gt;.&lt;/em&gt; in case all files needs to be returned. This will also recursively scans the subdirectories. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[y for x in os.walk(sourcePath) for y in glob(os.path.join(x[0], &apos;*.csv&apos;))]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Modify file extensions and source path as needed. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://docs.python.org/release/2.6.7/library/dircache.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;dircache&lt;/a&gt; is  &quot;Deprecated since version 2.6: The dircache module has been removed in Python 3.0.&quot;&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dircache\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = dircache.listdir(pathname)\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ncheck = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\ntemp = []\ncount = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; count != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i]) != check:\n     temp.append(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n     check = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i])\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    i = i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    count = count - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; temp\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"stack-trace","slug":"stack-trace"},{"name":"currency","slug":"currency"},{"name":"datediff","slug":"datediff"},{"name":"time-format","slug":"time-format"},{"name":"architecture","slug":"architecture"},{"name":"url-rewriting","slug":"url-rewriting"},{"name":"profiler","slug":"profiler"},{"name":"httpurlconnection","slug":"httpurlconnection"},{"name":"flatten","slug":"flatten"},{"name":"mongodb-query","slug":"mongodb-query"},{"name":"semantics","slug":"semantics"},{"name":"matrix","slug":"matrix"},{"name":"protected","slug":"protected"},{"name":"session","slug":"session"},{"name":"copy-and-swap","slug":"copy-and-swap"},{"name":"printf","slug":"printf"},{"name":"jsf","slug":"jsf"},{"name":"tabs","slug":"tabs"},{"name":"global-variables","slug":"global-variables"},{"name":"centering","slug":"centering"}]},"__N_SSG":true}