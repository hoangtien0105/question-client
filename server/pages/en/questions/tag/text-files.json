{"pageProps":{"data":{"count":1,"rows":[{"id":586,"title":"How to append text to an existing file in Java?","slug":"how-to-append-text-to-an-existing-file-in-java-1657388492377","postType":"QUESTION","createdAt":"2022-07-09T17:41:32.000Z","updatedAt":"2022-07-09T17:41:32.000Z","tags":[{"id":2797,"name":"text-files","slug":"text-files","createdAt":"2022-07-09T17:41:32.000Z","updatedAt":"2022-07-09T17:41:32.000Z","Questions_Tags":{"questionId":586,"tagId":2797}}]}]},"slug":"text-files","page":1,"answers":{"586":["\n&lt;p&gt;Are you doing this for logging purposes?  If so there are &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_logging_framework&quot; rel=&quot;noreferrer&quot;&gt;several libraries for this&lt;/a&gt;. Two of the most popular are &lt;a href=&quot;http://logging.apache.org/log4j/&quot; rel=&quot;noreferrer&quot;&gt;Log4j&lt;/a&gt; and &lt;a href=&quot;http://logback.qos.ch/&quot; rel=&quot;noreferrer&quot;&gt;Logback&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Java 7+&lt;/h2&gt;\n&lt;p&gt;For a one-time task, the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html&quot; rel=&quot;noreferrer&quot;&gt;Files class&lt;/a&gt; makes this easy:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    Files.write(Paths.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;.getBytes(), StandardOpenOption.APPEND);\n}&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Careful&lt;/strong&gt;: The above approach will throw a &lt;code&gt;NoSuchFileException&lt;/code&gt; if the file does not already exist. It also does not append a newline automatically (which you often want when appending to a text file). Another approach is to pass both &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;APPEND&lt;/code&gt; options, which will create the file first if it doesn&apos;t already exist:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String s)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n    Files.writeString(\n        Path.of(System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.io.tmpdir&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;filename.txt&quot;&lt;/span&gt;),\n        s + System.lineSeparator(),\n        CREATE, APPEND\n    );\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, if you will be writing to the same file many times, the above snippets must open and close the file on the disk many times, which is a slow operation. In this case, a &lt;code&gt;BufferedWriter&lt;/code&gt; is faster:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fw);\n    &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(bw))\n{\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//more code&lt;/span&gt;\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;more text&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//more code&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The second parameter to the &lt;code&gt;FileWriter&lt;/code&gt; constructor will tell it to append to the file, rather than writing a new file. (If the file does not exist, it will be created.)&lt;/li&gt;\n&lt;li&gt;Using a &lt;code&gt;BufferedWriter&lt;/code&gt; is recommended for an expensive writer (such as &lt;code&gt;FileWriter&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Using a &lt;code&gt;PrintWriter&lt;/code&gt; gives you access to &lt;code&gt;println&lt;/code&gt; syntax that you&apos;re probably used to from &lt;code&gt;System.out&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;But the &lt;code&gt;BufferedWriter&lt;/code&gt; and &lt;code&gt;PrintWriter&lt;/code&gt; wrappers are not strictly necessary.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Older Java&lt;/h2&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)));\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n    out.close();\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Exception Handling&lt;/h2&gt;\n&lt;p&gt;If you need robust exception handling for older Java, it gets very verbose:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    fw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    bw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fw);\n    out = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(bw);\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n    out.close();\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(out != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            out.close();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(bw != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            bw.close();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(fw != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            fw.close();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling left as an exercise for the reader&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;fileWriter&lt;/code&gt; with a flag set to &lt;code&gt;true&lt;/code&gt; , for appending.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n    String filename= &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyFile.txt&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(filename,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//the true will append the new data&lt;/span&gt;\n    fw.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;add a line\\n&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//appends the string to the file&lt;/span&gt;\n    fw.close();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(IOException ioe)\n{\n    System.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;IOException: &quot;&lt;/span&gt; + ioe.getMessage());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Shouldn&apos;t all of the answers here with try/catch blocks have the .close() pieces contained in a finally block?&lt;/p&gt;\n\n&lt;p&gt;Example for marked answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    out = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;writePath&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)));\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    System.err.println(e);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (out != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        out.close();\n    }\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, as of Java 7, you can use a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&quot; rel=&quot;noreferrer&quot;&gt;try-with-resources statement&lt;/a&gt;. No finally block is required for closing the declared resource(s) because it is handled automatically, and is also less verbose:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;writePath&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)))) {\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    System.err.println(e);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using Apache Commons 2.1:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;FileUtils.writeStringToFile(file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;String to append&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Slightly expanding on &lt;a href=&quot;https://stackoverflow.com/questions/1625234#1625263&quot;&gt;Kip&apos;s answer&lt;/a&gt;,\nhere is a simple Java 7+ method to append a &lt;strong&gt;new line&lt;/strong&gt; to a file, &lt;strong&gt;creating it if it doesn&apos;t already exist&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Paths.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/filename.txt&quot;&lt;/span&gt;);\n    Files.write(path, Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;New line to append&quot;&lt;/span&gt;), StandardCharsets.UTF_8,\n        Files.exists(path) ? StandardOpenOption.APPEND : StandardOpenOption.CREATE);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; IOException ioe) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Add your own exception handling...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Further notes:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The above uses the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#write(java.nio.file.Path,%20java.lang.Iterable,%20java.nio.charset.Charset,%20java.nio.file.OpenOption...)&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Files.write&lt;/code&gt;&lt;/a&gt; overload that writes &lt;em&gt;lines&lt;/em&gt; of text to a file (i.e. similar to a &lt;code&gt;println&lt;/code&gt; command). To just write text to the end (i.e. similar to a &lt;code&gt;print&lt;/code&gt; command), an alternative &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#write(java.nio.file.Path,%20byte%5B%5D,%20java.nio.file.OpenOption...)&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Files.write&lt;/code&gt;&lt;/a&gt; overload can be used, passing in a byte array (e.g. &lt;code&gt;&quot;mytext&quot;.getBytes(StandardCharsets.UTF_8)&lt;/code&gt;).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;CREATE&lt;/code&gt; option will only work if the specified directory already exists - if it doesn&apos;t, a &lt;code&gt;NoSuchFileException&lt;/code&gt; is thrown. If required, the following code could be added after setting &lt;code&gt;path&lt;/code&gt; to create the directory structure:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pathParent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; path.getParent();\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!Files.exists(pathParent)) {\n    Files.createDirectories(pathParent);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;Make sure the stream gets properly closed in all scenarios.&lt;/h2&gt;\n\n&lt;p&gt;It&apos;s a bit alarming how many of these answers leave the file handle open in case of an error. The answer &lt;a href=&quot;https://stackoverflow.com/a/15053443/2498188&quot;&gt;https://stackoverflow.com/a/15053443/2498188&lt;/a&gt; is on the money but only because &lt;code&gt;BufferedWriter()&lt;/code&gt; cannot throw. If it could then an exception would leave the &lt;code&gt;FileWriter&lt;/code&gt; object open. &lt;/p&gt;\n\n&lt;p&gt;A more general way of doing this that doesn&apos;t care if &lt;code&gt;BufferedWriter()&lt;/code&gt; can throw:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n     fw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outfilename&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n     bw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fw);\n     out = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(bw);\n     out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;( IOException e ){\n     &lt;span class=&quot;hljs-comment&quot;&gt;// File writing/opening failed at some stage.&lt;/span&gt;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( out != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ){\n           out.close(); &lt;span class=&quot;hljs-comment&quot;&gt;// Will close bw and fw too&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( bw != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ){\n           bw.close(); &lt;span class=&quot;hljs-comment&quot;&gt;// Will close fw too&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( fw != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ){\n           fw.close();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n           &lt;span class=&quot;hljs-comment&quot;&gt;// Oh boy did it fail hard! :3&lt;/span&gt;\n        }\n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;( IOException e ){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Closing the file writers failed for some obscure reason&lt;/span&gt;\n     }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Edit:&lt;/h2&gt;\n\n&lt;p&gt;As of Java 7, the recommended way is to use &quot;try with resources&quot; and let the JVM deal with it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;(    &lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outfilename&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n          &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fw);\n          &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(bw)){\n     out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text&quot;&lt;/span&gt;);\n  }  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;( IOException e ){\n      &lt;span class=&quot;hljs-comment&quot;&gt;// File writing/opening failed at some stage.&lt;/span&gt;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Java-7 it also can be done such kind:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.nio.file.Files;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.nio.file.Path;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.nio.file.Paths;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.nio.file.StandardOpenOption;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;//---------------------&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Paths.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someFile.txt&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!Files.exists(filePath)) {\n    Files.createFile(filePath);\n}\nFiles.write(filePath, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Text to be added&quot;&lt;/span&gt;.getBytes(), StandardOpenOption.APPEND);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;java 7+&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In my humble opinion since I am fan of plain java, I would suggest something that it is a combination of the aforementioned answers. Maybe I am late for the party. Here is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sampleText&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; +  System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;line.separator&quot;&lt;/span&gt;);\n Files.write(Paths.get(filePath), sampleText.getBytes(StandardCharsets.UTF_8), \n StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the file doesn&apos;t exist, it creates it and if already exists it appends the \n&lt;em&gt;sampleText&lt;/em&gt; to the existing file. Using this, saves you from adding unnecessary libs to your classpath.&lt;/p&gt;\n    ","\n&lt;p&gt;This can be done in one line of code. Hope this helps :)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Files.write(Paths.get(fileName), msg.getBytes(), StandardOpenOption.APPEND);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just add small detail:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outfilename&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2.nd parameter (true) is a feature (or, interface) called &lt;strong&gt;appendable&lt;/strong&gt; (&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Appendable.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/lang/Appendable.html&lt;/a&gt;). It is responsible for being able to add some content to the end of particular file/stream. This interface is implemented since Java 1.5. Each object (i.e. &lt;i&gt;BufferedWriter, CharArrayWriter, CharBuffer, FileWriter, FilterWriter, LogStream, OutputStreamWriter, PipedWriter, PrintStream, PrintWriter, StringBuffer, StringBuilder, StringWriter, Writer&lt;/i&gt;) with this interface can be used for adding content&lt;/p&gt;\n\n&lt;p&gt;In other words, you can add some content to your gzipped file, or some http process&lt;/p&gt;\n    ","\n&lt;p&gt;Using java.nio.&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html&quot; rel=&quot;noreferrer&quot;&gt;Files&lt;/a&gt; along with java.nio.file.&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardOpenOption.html&quot; rel=&quot;noreferrer&quot;&gt;StandardOpenOption&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    BufferedWriter bufWriter;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n        bufWriter =\n            Files.newBufferedWriter(\n                Paths.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;log.txt&quot;&lt;/span&gt;),\n                Charset.forName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF8&quot;&lt;/span&gt;),\n                StandardOpenOption.WRITE, \n                StandardOpenOption.APPEND,\n                StandardOpenOption.CREATE);\n        out = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(bufWriter, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(IOException e){\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Oh, no! Failed to create PrintWriter&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//After successful creation of PrintWriter&lt;/span&gt;\n    out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Text to be appended&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//After done writing, remember to close!&lt;/span&gt;\n    out.close();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This creates a &lt;code&gt;BufferedWriter&lt;/code&gt; using Files, which accepts &lt;code&gt;StandardOpenOption&lt;/code&gt; parameters, and an auto-flushing &lt;code&gt;PrintWriter&lt;/code&gt; from the resultant &lt;code&gt;BufferedWriter&lt;/code&gt;. &lt;code&gt;PrintWriter&lt;/code&gt;&apos;s &lt;code&gt;println()&lt;/code&gt; method, can then be called to write to the file.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;StandardOpenOption&lt;/code&gt; parameters used in this code: opens the file for writing, only appends to the file, and creates the file if it does not exist.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Paths.get(&quot;path here&quot;)&lt;/code&gt; can be replaced with &lt;code&gt;new File(&quot;path here&quot;).toPath()&lt;/code&gt;.\nAnd &lt;code&gt;Charset.forName(&quot;charset name&quot;)&lt;/code&gt; can be modified to accommodate the desired &lt;code&gt;Charset&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Sample, using Guava:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/test/test.csv&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;some string&quot;&lt;/span&gt; + i + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    Files.append(from, to, Charsets.UTF_8);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;File_Name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\nfos.write(data);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the true allows to append the data in the existing file. If we will write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;File_Name&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will overwrite the existing file. So go for first approach.&lt;/p&gt;\n    ","\n&lt;p&gt;Try with bufferFileWriter.append, it works with me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;FileWriter fileWriter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    fileWriter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(file,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bufferFileWriter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fileWriter);\n    bufferFileWriter.append(obj.toJSONString());\n    bufferFileWriter.newLine();\n    bufferFileWriter.close();\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException ex) {\n    Logger.getLogger(JsonTest.class.getName()).log(Level.SEVERE, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, ex);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedWriter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileWriter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.PrintWriter;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Writer&lt;/span&gt; {\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt;{\n        doWrite(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output.txt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content to be appended to file&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doWrite&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String filePath,String contentToBeAppended)&lt;/span&gt;{\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;(\n            &lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(filePath, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fw);\n            &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(bw)\n          )\n          {\n            out.println(contentToBeAppended);\n          }  \n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;( IOException e ){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// File writing/opening failed at some stage.&lt;/span&gt;\n        }\n\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    String str;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/Users/...the path..../iin.txt&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// you can input also..i created this way :P&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedReader&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;InputStreamReader&lt;/span&gt;(System.in));\n    &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(path, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; \n    {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the text : &quot;&lt;/span&gt;);\n            str = br.readLine();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(str.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt;))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                pw.println(str);\n        }\n    } \n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) \n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//oh noes!&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n    {\n        pw.close();         \n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this will do what you intend for..&lt;/p&gt;\n    ","\n&lt;p&gt;You can also try this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;JFileChooser c= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFileChooser&lt;/span&gt;();\nc.showOpenDialog(c);\n&lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;write_file&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c.getSelectedFile();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Writing into file&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//what u would like to append to the file&lt;/span&gt;\n\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; \n{\n    &lt;span class=&quot;hljs-type&quot;&gt;RandomAccessFile&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;raf&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomAccessFile&lt;/span&gt;(write_file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rw&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; raf.length();\n    &lt;span class=&quot;hljs-comment&quot;&gt;//System.out.println(length);&lt;/span&gt;\n    raf.setLength(length + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//+ (integer value) for spacing&lt;/span&gt;\n    raf.seek(raf.length());\n    raf.writeBytes(Content);\n    raf.close();\n} \n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//any exception handling method of ur choice&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Better to use try-with-resources then all that pre-java 7 finally business&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendStringToFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Path file, String s)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Files.newBufferedWriter(file, StandardCharsets.UTF_8, StandardOpenOption.APPEND)) {\n        out.append(s);\n        out.newLine();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we are using Java 7 and above and also know the content to be added (appended) to the file we can make use of &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#newBufferedWriter(java.nio.file.Path,%20java.nio.charset.Charset,%20java.nio.file.OpenOption...)&quot; rel=&quot;nofollow&quot;&gt;newBufferedWriter&lt;/a&gt; method in NIO package.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;FILE_PATH&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Paths.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/temp&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;temp.txt&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n Welcome to Java 8&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Writing to the file temp.txt&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Files.newBufferedWriter(FILE_PATH, StandardCharsets.UTF_8, StandardOpenOption.APPEND)) {\n        writer.write(text);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n        e.printStackTrace();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are few points to note:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It is always a good habit to specify charset encoding and for that we have constant in class &lt;code&gt;StandardCharsets&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The code uses &lt;code&gt;try-with-resource&lt;/code&gt; statement in which resources are automatically closed after the try.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Though OP has not asked but just in case we want to search for lines having some specific keyword e.g. &lt;code&gt;confidential&lt;/code&gt; we can make use of stream APIs in Java:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Reading from the file the first line which contains word &quot;confidential&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    Stream&amp;lt;String&amp;gt; lines = Files.lines(FILE_PATH);\n    Optional&amp;lt;String&amp;gt; containsJava = lines.filter(l-&amp;gt;l.contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;confidential&quot;&lt;/span&gt;)).findFirst();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(containsJava.isPresent()){\n        System.out.println(containsJava.get());\n    }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    e.printStackTrace();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileOutputStream&lt;/span&gt;(path, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n\n    stream.write(\n\n        string.getBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Choose your encoding.&lt;/span&gt;\n\n    );\n\n} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {\n    stream.close();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then catch an IOException somewhere upstream.&lt;/p&gt;\n    ","\n&lt;p&gt;Create a function anywhere in your project and simply call that function where ever you need it.&lt;/p&gt;\n\n&lt;p&gt;Guys you got to remember that you guys are calling active threads that you are not calling asynchronously and since it would likely be a good 5 to 10 pages to get it done right.\nWhy not spend more time on your project and forget about writing anything already written.\nProperly&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//Adding a static modifier would make this accessible anywhere in your app&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Logger &lt;span class=&quot;hljs-title function_&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; java.util.logging.Logger.getLogger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyLogFileName&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//call the method anywhere and append what you want to log &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Logger class will take care of putting timestamps for you&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//plus the are ansychronously done so more of the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//processing power will go into your application&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//from inside a function body in the same class ...{...&lt;/span&gt;\n\n    getLogger().log(Level.INFO,&lt;span class=&quot;hljs-string&quot;&gt;&quot;the text you want to append&quot;&lt;/span&gt;);\n\n    ...}...\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*********log file resides in server root log files********/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;three lines of code two really since the third actually appends text. :P&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Library&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedWriter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileWriter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Code&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;D:/sample.txt&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(path);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fileWriter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(file,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bufferFileWriter&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fileWriter);\n\n        fileWriter.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sample text in the file to append&quot;&lt;/span&gt;);\n\n        bufferFileWriter.close();\n\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;User Registration Completed&quot;&lt;/span&gt;);\n\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception ex)\n    {\n        System.out.println(ex);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I might suggest the &lt;a href=&quot;http://commons.apache.org/proper/commons-functor/examples.html&quot; rel=&quot;nofollow&quot;&gt;apache commons project&lt;/a&gt;. This project already provides a framework for doing what you need (i.e. flexible filtering of collections). &lt;/p&gt;\n    ","\n&lt;p&gt;The following method let&apos;s you append text to some file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendToFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String filePath, String text)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fileWriter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        fileWriter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(\n                filePath, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)));\n\n        fileWriter.println(text);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException ioException)\n    {\n        ioException.printStackTrace();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fileWriter != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        {\n            fileWriter.close();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively using &lt;a href=&quot;http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;FileUtils&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendToFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String filePath, String text)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(filePath);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!file.exists())\n    {\n        file.createNewFile();\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fileContents&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FileUtils.readFileToString(file);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(file.length() != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        fileContents = fileContents.concat(System.lineSeparator());\n    }\n\n    fileContents = fileContents.concat(text);\n\n    FileUtils.writeStringToFile(file, fileContents);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is not efficient but works fine. Line breaks are handled correctly and a new file is created if one didn&apos;t exist yet.&lt;/p&gt;\n    ","\n&lt;p&gt;This code will fulifil your need:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;   FileWriter fw=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\file.json&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n   fw.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ssssss&quot;&lt;/span&gt;);\n   fw.close();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In case you want to &lt;strong&gt;ADD SOME TEXT IN SPECIFIC LINES&lt;/strong&gt; you can first read the whole file, append the text wherever you want and then overwrite everything like in the code below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addDatatoFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String data1, String data2)&lt;/span&gt;{\n\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fullPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/user/dir/file.csv&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(fullPath);\n    List&amp;lt;String&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;String&amp;gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedReader&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileReader&lt;/span&gt;(dir))) {\n        String line;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((line = br.readLine()) != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(count == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n                &lt;span class=&quot;hljs-comment&quot;&gt;//add data at the end of second line                    &lt;/span&gt;\n                line += data1;\n            }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(count == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;){\n                &lt;span class=&quot;hljs-comment&quot;&gt;//add other data at the end of third line&lt;/span&gt;\n                line += data2;\n            }\n            l.add(line);\n            count++;\n        }\n        br.close();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {\n        e.printStackTrace();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n        e.printStackTrace();\n    }       \n    createFileFromList(l, dir);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createFileFromList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;String&amp;gt; list, File f)&lt;/span&gt;{\n\n    PrintWriter writer;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        writer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrintWriter&lt;/span&gt;(f, &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String d : list) {\n            writer.println(d.toString());\n        }\n        writer.close();             \n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException | UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;JFileChooser chooser= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFileChooser&lt;/span&gt;();\nchooser.showOpenDialog(chooser);\n&lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; chooser.getSelectedFile();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;What you want to append to file&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; \n{\n    &lt;span class=&quot;hljs-type&quot;&gt;RandomAccessFile&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RandomAccessFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rw&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; random.length();\n    random.setLength(length + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    random.seek(random.length());\n    random.writeBytes(Content);\n    random.close();\n} \n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception exception) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//exception handling&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**********************************************************************\n * it will write content to a specified  file\n * \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; keyString\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@throws&lt;/span&gt; IOException\n *********************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;writeToFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String keyString,String textFilePAth)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// For output to file&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(textFilePAth);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!a.exists()) {\n        a.createNewFile();\n    }\n    &lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(a.getAbsoluteFile(), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedWriter&lt;/span&gt;(fw);\n    bw.append(keyString);\n    bw.newLine();\n    bw.close();\n}&lt;span class=&quot;hljs-comment&quot;&gt;// end of writeToFile()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;For JDK version &amp;gt;= 7&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You can utilise this simple method which appends the given content to the specified file:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendToFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String filePath, String content)&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(filePath, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)) {\n    fw.write(content + System.lineSeparator());\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) { \n    &lt;span class=&quot;hljs-comment&quot;&gt;// TODO handle exception&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We are constructing a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/FileWriter.html#FileWriter-java.io.File-boolean-&quot; rel=&quot;nofollow noreferrer&quot;&gt;FileWriter&lt;/a&gt; object in append mode.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the follong code to append the content in the file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; String fileName=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/shriram/Desktop/Images/&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;;\n  FileWriter fw=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(fileName,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);    \n  fw.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;here will be you content to insert or append in file&quot;&lt;/span&gt;);    \n  fw.close(); \n  FileWriter fw1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileWriter&lt;/span&gt;(fileName,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);    \n fw1.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;another content will be here to be append in the same file&quot;&lt;/span&gt;);    \n fw1.close(); \n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"python-class","slug":"python-class"},{"name":"foreach","slug":"foreach"},{"name":"copy-elision","slug":"copy-elision"},{"name":"greatest-n-per-group","slug":"greatest-n-per-group"},{"name":"google-cloud-firestore","slug":"google-cloud-firestore"},{"name":"scroll","slug":"scroll"},{"name":"heap-memory","slug":"heap-memory"},{"name":"http-redirect","slug":"http-redirect"},{"name":"css","slug":"css"},{"name":"event-delegation","slug":"event-delegation"},{"name":"web-scraping","slug":"web-scraping"},{"name":"if-statement","slug":"if-statement"},{"name":"url-rewriting","slug":"url-rewriting"},{"name":"ajax","slug":"ajax"},{"name":"dimension","slug":"dimension"},{"name":"preflight","slug":"preflight"},{"name":"language-agnostic","slug":"language-agnostic"},{"name":"android-edittext","slug":"android-edittext"},{"name":"android-permissions","slug":"android-permissions"},{"name":"polymorphism","slug":"polymorphism"}]},"__N_SSG":true}