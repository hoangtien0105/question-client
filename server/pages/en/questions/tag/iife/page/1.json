{"pageProps":{"data":{"count":1,"rows":[{"id":208,"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348","postType":"QUESTION","createdAt":"2022-07-09T16:51:48.000Z","updatedAt":"2022-07-09T16:51:48.000Z","tags":[{"id":1464,"name":"iife","slug":"iife","createdAt":"2022-07-09T16:51:48.000Z","updatedAt":"2022-07-09T16:51:48.000Z","Questions_Tags":{"questionId":208,"tagId":1464}}]}]},"slug":"iife","page":"1","answers":{"208":["\n&lt;p&gt;Its an &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot; rel=&quot;noreferrer&quot;&gt;Immediately-Invoked Function Expression&lt;/a&gt;, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;IIFE&lt;/strong&gt;&lt;/a&gt; for short. It executes immediately after its created.&lt;/p&gt;\n\n&lt;p&gt;It has nothing to do with any event-handler for any events (such as &lt;code&gt;document.onload&lt;/code&gt;).&lt;br&gt;\nConsider the part within the first pair of parentheses: &lt;code&gt;(&lt;b&gt;function(){}&lt;/b&gt;)();&lt;/code&gt;....it is a regular function expression. Then look at the last pair &lt;code&gt;(function(){})&lt;b&gt;()&lt;/b&gt;;&lt;/code&gt;, this is normally added to an expression to call a function; in this case, our prior expression.&lt;/p&gt;\n\n&lt;p&gt;This pattern is often used when trying to avoid polluting the global namespace, because all the variables used inside the IIFE (like in any other &lt;em&gt;normal&lt;/em&gt; function) are not visible outside its scope.&lt;br&gt;\nThis is why, maybe, you confused this construction with an event-handler for &lt;code&gt;window.onload&lt;/code&gt;, because its often used as this:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// all your code here&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = foo;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n})();\n&lt;span class=&quot;hljs-comment&quot;&gt;// foo is unreachable here (its undefined)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Correction suggested by &lt;a href=&quot;https://stackoverflow.com/users/69083/guffa&quot;&gt;Guffa&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The function is executed right after it&apos;s created, not after it is parsed. The entire script block is parsed before any code in it is executed. Also, parsing code doesn&apos;t automatically mean that it&apos;s executed, if for example the IIFE is inside a function then it won&apos;t be executed until the function is called.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;\nSince this is a pretty popular topic, it&apos;s worth mentioning that IIFE&apos;s can also be written with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;ES6&apos;s arrow function&lt;/a&gt; (like &lt;a href=&quot;https://stackoverflow.com/users/368691/gajus&quot;&gt;Gajus&lt;/a&gt; has pointed out &lt;a href=&quot;https://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript/8228308#comment43521302_8228308&quot;&gt;in a comment&lt;/a&gt;) :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;foo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n &lt;span class=&quot;hljs-comment&quot;&gt;// do something with foo here foo&lt;/span&gt;\n})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo value&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s just an anonymous function that is executed right after it&apos;s created.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s just as if you assigned it to a variable, and used it right after, only without the variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n};\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In jQuery there is a similar construct that you might be thinking of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is the short form of binding the &lt;code&gt;ready&lt;/code&gt; event:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But the above two constructs are not &lt;strong&gt;IIFE&lt;/strong&gt;s.&lt;/p&gt;\n    ","\n&lt;p&gt;An immediately-invoked function expression (IIFE) immediately calls a function. This simply means that the function is executed immediately after the completion of the definition.&lt;/p&gt;\n\n&lt;p&gt;Three more common wordings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Crockford&apos;s preference - parens on the inside&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Welcome to the Internet. Please follow me.&apos;&lt;/span&gt;);\n}());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//The OPs example, parentheses on the outside&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Welcome to the Internet. Please follow me.&apos;&lt;/span&gt;);\n})();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Using the exclamation mark operator&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//https://stackoverflow.com/a/5654929/1175496&lt;/span&gt;\n!&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Welcome to the Internet. Please follow me.&apos;&lt;/span&gt;);\n}();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If there are no special requirements for its return value, then we can write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;!&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}();  &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;\n~&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}(); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; -1&lt;/span&gt;\n+&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}(); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; NaN&lt;/span&gt;\n-&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}();  &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; NaN&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, it can be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;~(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){})();\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}();\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;/* code */&lt;/span&gt; }();\n&lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;/* code */&lt;/span&gt; }();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can even write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;/* code */&lt;/span&gt; }\n&lt;span class=&quot;hljs-number&quot;&gt;31.&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;/* code */&lt;/span&gt; }() &lt;span class=&quot;hljs-comment&quot;&gt;//If no parameters, the last () is not required&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;That construct is called an &lt;strong&gt;Immediately Invoked Function Expression (IIFE)&lt;/strong&gt; which means it gets executed immediately. Think of it as a function getting called automatically when the interpreter reaches that function.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Most Common Use-case:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;One of its most common use cases is to limit the scope of a variable made via &lt;code&gt;var&lt;/code&gt;. Variables created via &lt;code&gt;var&lt;/code&gt; have a scope limited to a function so this construct (which is a function wrapper around certain code) will make sure that your variable scope doesn&apos;t leak out of that function. &lt;/p&gt;\n\n&lt;p&gt;In following example, &lt;code&gt;count&lt;/code&gt; will not be available outside the immediately invoked function i.e. the scope of &lt;code&gt;count&lt;/code&gt; will not leak out of the function. You should get a &lt;code&gt;ReferenceError&lt;/code&gt;, should you try to access it outside of the immediately invoked function anyway.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n})();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(count);  &lt;span class=&quot;hljs-comment&quot;&gt;// Reference Error: count is not defined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;ES6 Alternative (Recommended)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In ES6, we now can have variables created via &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;. Both of them are block-scoped (unlike &lt;code&gt;var&lt;/code&gt; which is function-scoped).&lt;/p&gt;\n\n&lt;p&gt;Therefore, instead of using that complex construct of IIFE for the use case I mentioned above, you can now write much simpler code to make sure that a variable&apos;s scope does not leak out of your desired block. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{ \n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(count);  &lt;span class=&quot;hljs-comment&quot;&gt;// ReferenceError: count is not defined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example, we used &lt;code&gt;let&lt;/code&gt; to define &lt;code&gt;count&lt;/code&gt; variable which makes &lt;code&gt;count&lt;/code&gt; limited to the block of code, we created with the curly brackets &lt;code&gt;{...}&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;I call it a Curly Jail. &lt;/p&gt;\n    ","\n&lt;p&gt;It declares an anonymous function, then calls it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;local_arg&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// anonymous function&lt;/span&gt;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local_arg);\n})(arg);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;That is saying execute immediately.&lt;/p&gt;\n&lt;p&gt;so if I do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// in the scope of this function&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;){\n         a += x;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n     };\n})();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//10&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//21&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Fiddle: &lt;a href=&quot;http://jsfiddle.net/maniator/LqvpQ/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/maniator/LqvpQ/&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Second Example:&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n})();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(val); &lt;span class=&quot;hljs-comment&quot;&gt;//18&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is called IIFE (Immediately Invoked Function Expression). One of the famous JavaScript design patterns, it is the heart and soul of the modern day Module pattern. As the name suggests it executes immediately after it is created. This pattern creates an isolated or private scope of execution.&lt;/p&gt;\n\n&lt;p&gt;JavaScript prior to ECMAScript 6 used lexical scoping, so IIFE was used for simulating block scoping. (With ECMAScript 6 block scoping is possible with the introduction of the &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords.)\n&lt;a href=&quot;https://gist.github.com/gurucharanmk/5071d37bb5af61a93562fbe024a975de&quot; rel=&quot;noreferrer&quot;&gt;Reference for issue with lexical scoping&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://gist.github.com/gurucharanmk/38d8557147d2f542d553b75dfeb40709&quot; rel=&quot;noreferrer&quot;&gt;Simulate block scoping with IIFE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The performance benefit of using IIFEs is the ability to pass commonly used global objects like &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, etc. as an argument by reducing the scope lookup. (Remember JavaScript looks for properties in local scope and way up the chain until global scope). So accessing global objects in local scope reduces the lookup time like below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;globalObj&lt;/span&gt;) {\n&lt;span class=&quot;hljs-comment&quot;&gt;//Access the globalObj&lt;/span&gt;\n})(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an Immediately Invoked Function Expression in Javascript:&lt;/p&gt;\n\n&lt;p&gt;To understand IIFE in JS, lets break it down:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Expression&lt;/strong&gt;: Something that returns a value &lt;br&gt;\nExample: Try out following in chrome console. These are expressions in JS.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; \noutput = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; \n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) \noutput = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Function Expression&lt;/strong&gt;: &lt;br&gt;\nExample:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Function Expression &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greet = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Namaste&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + name;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Santosh&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;How function expression works:&lt;/strong&gt; &lt;br&gt;\n- When JS engine runs for the first time (Execution Context - Create Phase), this function (on the right side of = above) does not get executed or stored in the memory. Variable &apos;greet&apos; is assigned &apos;undefined&apos; value by the JS engine. &lt;br&gt;\n- During execution (Execution Context - Execute phase), the funtion object is created on the fly (&lt;strong&gt;its not executed yet&lt;/strong&gt;), gets assigned to &apos;greet&apos; variable and it can be invoked using &apos;greet(&apos;somename&apos;)&apos;. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;3. Immediately Invoked Funtion Expression:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// IIFE&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greeting = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Namaste&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + name;\n}(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Santosh&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(greeting)  &lt;span class=&quot;hljs-comment&quot;&gt;// Namaste Santosh. &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How IIFE works&lt;/strong&gt;: &lt;br&gt;\n- Notice the &apos;()&apos; immediately after the function declaration. Every funtion object has a &apos;CODE&apos; property attached to it which is callable. And we can call it (or invoke it) using &apos;()&apos; braces. \n&lt;br&gt;\n- So here, during the execution (Execution Context - Execute Phase), &lt;strong&gt;the function object is created and its executed at the same time&lt;/strong&gt;\n- So now, the greeting variable, instead of having the funtion object, has its return value ( a string )&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Typical usecase of IIFE in JS:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;The following IIFE pattern is quite commonly used. &lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// IIFE &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Spelling of Function was not correct , result into error&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greeting = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Namaste&apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(greeting + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + name);\n})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Santosh&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;we are doing two things over here.\na) Wrapping our function expression inside braces (). This goes to tell the syntax parser the whatever placed inside the () is an expression (function expression in this case) and is a valid code. &lt;br&gt;\nb) We are invoking this funtion at the same time using the () at the end of it. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;So this function gets created and executed at the same time (IIFE).&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Important usecase for IIFE: &lt;br&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;IIFE keeps our code safe.&lt;/strong&gt;  &lt;br&gt;\n- IIFE, being a function, has its own execution context, meaning all the variables created inside it are local to this function and are not shared with the global execution context. &lt;/p&gt;\n\n&lt;p&gt;Suppose I&apos;ve another JS file (test1.js) used in my applicaiton along with iife.js (see below). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// test1.js&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greeting = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// iife.js&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Spelling of Function was not correct , result into error&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) { \n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greeting = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Namaste&apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(greeting + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + name);\n})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Santosh&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(greeting)   &lt;span class=&quot;hljs-comment&quot;&gt;// No collision happens here. It prints &apos;Hello&apos;.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So IIFE helps us to &lt;strong&gt;write safe code where we are not colliding with the global objects unintentionally.&lt;/strong&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;No, this construct just creates a scope for naming. If you break it in parts you can see that you have an external&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(...)();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is a function invocation. Inside the parenthesis you have:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is an anonymous function. Everything that is declared with &lt;strong&gt;var&lt;/strong&gt; inside the construct will be visible only inside the same construct and will not pollute the global namespace.&lt;/p&gt;\n    ","\n&lt;p&gt;That is a &lt;strong&gt;self-invoking anonymous function&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Check out the &lt;a href=&quot;http://www.w3schools.com/js/js_function_definition.asp&quot; rel=&quot;nofollow&quot;&gt;W3Schools explanation of a self-invoking function&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Function expressions can be made &quot;self-invoking&quot;.&lt;/p&gt;\n  \n  &lt;p&gt;A self-invoking expression is invoked (started) automatically, without\n  being called.&lt;/p&gt;\n  \n  &lt;p&gt;Function expressions will execute automatically if the expression is\n  followed by ().&lt;/p&gt;\n  \n  &lt;p&gt;You cannot self-invoke a function declaration.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;This is the self-invoking anonymous function. It is executed while it is defined. Which means this function is defined and invokes itself immediate after the definition.&lt;/p&gt;\n\n&lt;p&gt;And the explanation of the syntax is: The function within the first &lt;code&gt;()&lt;/code&gt; parenthesis is the function which has no name and by the next &lt;code&gt;();&lt;/code&gt; parenthesis you can understand that it is called at the time it is defined. And you can pass any argument in this second &lt;code&gt;()&lt;/code&gt; parenthesis which will be grabbed in the function which is in the first parenthesis. See this example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with this obj&lt;/span&gt;\n})(object);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the &apos;object&apos; you are passing will be accessible within the function by &apos;obj&apos;, as you are grabbing it in the function signature.&lt;/p&gt;\n    ","\n&lt;p&gt;Start here:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bee&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);  &lt;span class=&quot;hljs-comment&quot;&gt;// global&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Put it in a function and it is &lt;em&gt;no longer global&lt;/em&gt; -- your primary goal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bee&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);  &lt;span class=&quot;hljs-comment&quot;&gt;// ReferenceError: b is not defined -- *as desired*&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Call the function immediately -- oops:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bee&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);\n}();             &lt;span class=&quot;hljs-comment&quot;&gt;// SyntaxError: Expected () to start arrow function, but got &apos;;&apos; instead of &apos;=&amp;gt;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use the parentheses to avoid a syntax error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bee&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);\n})(); &lt;span class=&quot;hljs-comment&quot;&gt;// OK now&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can leave off the function name:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    &lt;span class=&quot;hljs-comment&quot;&gt;// no name required&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bee&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It doesn&apos;t need to be any more complicated than that. &lt;/p&gt;\n    ","\n&lt;p&gt;It is a function expression, it stands for Immediately Invoked Function Expression (IIFE). IIFE is simply a function that is executed right after it is created. So insted of the function having to wait until it is called to be executed, IIFE is executed immediately. Let&apos;s construct the IIFE by example. Suppose we have an add function which takes two integers as args and returns the sum\nlets make the add function into an IIFE,&lt;/p&gt;\n\n&lt;p&gt;Step 1: Define the function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt; (a, b){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a+b;\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Step2: Call the function by wrap the entire functtion declaration into parentheses&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt; (a, b){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a+b;\n})\n&lt;span class=&quot;hljs-comment&quot;&gt;//add(5,5);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Step 3:  To invock the function immediatly just remove the &apos;add&apos; text from the call.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt; (a, b){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a+b;\n})(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;The main reason&lt;/strong&gt; to use an IFFE is to preserve a private scope within your function. Inside your javascript code you want to make sure that, you are not overriding any global variable. Sometimes you may accidentaly define a variable that overrides a global variable. Let&apos;s try by example. suppose we have an html file called iffe.html and codes inside body tag are-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello JavaScript!&quot;&lt;/span&gt;;\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; \n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Well, above code will execute with out any question, now assume you decleard a variable named document accidentaly or intentional.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello JavaScript!&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi there&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;);\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; \n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you will endup in a &lt;strong&gt;SyntaxError&lt;/strong&gt;: redeclaration of non-configurable global property document.&lt;/p&gt;\n\n&lt;p&gt;But if your desire is to declear a variable name documet you can do it by using IFFE.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi there&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello JavaScript!&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;);\n        })();\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello JavaScript!&quot;&lt;/span&gt;;\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; \n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/7f2yu.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/7f2yu.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s try by an another example, suppose we have an calculator object like bellow-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; calculator = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;add&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a+b;\n            },\n            &lt;span class=&quot;hljs-attr&quot;&gt;mul&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*b;\n            }\n        }\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; \n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Well it&apos;s working like a charm, what if we accidently re-assigne the value of calculator object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; calculator = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;add&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a+b;\n            },\n            &lt;span class=&quot;hljs-attr&quot;&gt;mul&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*b;\n            }\n        }\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n        calculator = &lt;span class=&quot;hljs-string&quot;&gt;&quot;scientific calculator&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;mul&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; \n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yes you will endup with a TypeError: calculator.mul is not a function iffe.html&lt;/p&gt;\n\n&lt;p&gt;But with the help of IFFE we can create a private scope where we can create another variable name calculator and use it;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; calculator = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;add&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a+b;\n            },\n            &lt;span class=&quot;hljs-attr&quot;&gt;mul&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*b;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cal = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; calculator = {\n                &lt;span class=&quot;hljs-attr&quot;&gt;sub&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a-b;\n                },\n                &lt;span class=&quot;hljs-attr&quot;&gt;div&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a/b;\n                }\n            }\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;calculator&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;mul&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;sub&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calculator;\n        })();\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cal.&lt;span class=&quot;hljs-title function_&quot;&gt;div&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; \n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/qJz7J.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qJz7J.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Self-executing functions are typically used to encapsulate context and avoid name collusions. Any variable that you define inside the (function(){..})() are not global.&lt;/p&gt;\n\n&lt;p&gt;The code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; same_name = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myVar = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; same_name = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(same_name);\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(same_name);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;produces this output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using this syntax you avoid colliding with global variables declared elsewhere in your JavaScript code.&lt;/p&gt;\n    ","\n&lt;p&gt;It is called IIFE - Immediately Invoked Function Expression. Here is an example to show it&apos;s syntax and usage. It is used to scope the use of variables only till the function and not beyond.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Question&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;q,a,c&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;q&lt;/span&gt; = q;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = a;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = c;\n  }\n\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Question&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;displayQuestion&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;q&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i+&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;[i]);\n    }\n  }\n\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Question&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;checkAnswer&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ans&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ans===&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;correct&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;incorrect&quot;&lt;/span&gt;);\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; q1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Question&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Is Javascript the coolest?&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; q2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Question&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Is python better than Javascript?&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;both are same&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; q3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Question&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Is Javascript the worst?&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; questions = [q1, q2, q3];\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * questions.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; answer = &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;prompt&lt;/span&gt;(questions[n].&lt;span class=&quot;hljs-title function_&quot;&gt;displayQuestion&lt;/span&gt;()));\n  questions[n].&lt;span class=&quot;hljs-title function_&quot;&gt;checkAnswer&lt;/span&gt;(answer);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;TL;DR: Expressions can be enclosed in parenthesis, which &lt;em&gt;would&lt;/em&gt; conflict with function calling &lt;em&gt;if&lt;/em&gt; the expression and block forms of &lt;code&gt;function&lt;/code&gt; were combined.&lt;/h1&gt;\n&lt;p&gt;I like counter-examples because they paint a great picture of the logic, and noone else listed any. You might ask, &quot;Why can&apos;t the browser see &lt;code&gt;function(){}()&lt;/code&gt; and just assume its an expression?&quot; Let&apos;s juxtapose the issue with three examples.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here, fibonacci is a block function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ? x : &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(x-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(x-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x === &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The &quot;&lt;/span&gt; + x + &lt;span class=&quot;hljs-string&quot;&gt;&quot;th fibonacci is: &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n}\n\n(x = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value of x: &quot;&lt;/span&gt; + x);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fibonacci is a(n) &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fibonacci);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Observe how things change when we turn the function into an expression.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here, fibonacci is a function expression&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ? x : &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(x-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(x-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x === &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The &quot;&lt;/span&gt; + x + &lt;span class=&quot;hljs-string&quot;&gt;&quot;th fibonacci is: &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n})\n\n(x = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value of x: &quot;&lt;/span&gt; + x);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fibonacci is a(n) &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fibonacci);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The same thing happens when you use the not-operator instead of parenthesis because both operators turn the statement into an expression:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here, fibonacci is a function expression&lt;/span&gt;\n! &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ? x : &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(x-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(x-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x === &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The &quot;&lt;/span&gt; + x + &lt;span class=&quot;hljs-string&quot;&gt;&quot;th fibonacci is: &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n}\n\n(x = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value of x: &quot;&lt;/span&gt; + x);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fibonacci is a(n) &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fibonacci);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;By turning the function into an expression, it gets executed by the &lt;code&gt;(x = 9)&lt;/code&gt; two lines down from it. Thanks to separate behaviors for expression functions and block functions, both examples run fine without ambiguity (specs-wise).&lt;/p&gt;\n&lt;h3&gt;Name Scoping&lt;/h3&gt;\n&lt;p&gt;Another important observation is that named block functions are visible to the entire scope, whereas function expressions are only visible to themselves. In other words, &lt;code&gt;fibonacci&lt;/code&gt; is only visible to the last &lt;code&gt;console.log&lt;/code&gt; when it is a block in the first example. In all three examples, &lt;code&gt;fibonacci&lt;/code&gt; is visible to itself, allowing &lt;code&gt;fibonacci&lt;/code&gt; to call itself, which is recursion.&lt;/p&gt;\n&lt;h3&gt;Arrow Functions&lt;/h3&gt;\n&lt;p&gt;Another aspect to the logic is arrow functions. The specs would have had to include arbitrary rules and exceptions for arrow functions if the definitions of block and expression functions were merged together:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)}\n(x) =&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + x)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;If you are reading this, no errors occurred&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Although function blocks work fine, function expressions followed by an arrow function produce a syntax error:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;! &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)}\n(x) =&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + x)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;If you are reading this, no errors occurred&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Here, it is ambiguous whether the &lt;code&gt;(x)&lt;/code&gt; on line two is calling the function  on the preceding line or whether it is the function arguments for an arrow function.&lt;/p&gt;\n&lt;p&gt;Note that arrow functions have been indeed to the ECMAScript standard over the years and were not a factor in the initial design of the language; my point is that a differentiation between expression and block functions helps JavaScript syntax to be a little more logical and coherent.&lt;/p&gt;\n    ","\n&lt;p&gt;Self-executing anonymous function. It&apos;s executed as soon as it is created.&lt;/p&gt;\n\n&lt;p&gt;One short and dummy example where this is useful is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prepareList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; l = []; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;; i++){\n     l.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(i);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l;\n  })();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = list.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list[i] == el) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list[i];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  }; \n} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search = &lt;span class=&quot;hljs-title function_&quot;&gt;prepareList&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;search&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;search&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So instead of creating a list each time, you create it only once (less overhead).&lt;/p&gt;\n    ","\n&lt;p&gt;IIFE (Immediately invoked function expression) is a function which executes as soon as the script loads and goes away. &lt;/p&gt;\n\n&lt;p&gt;Consider the function below written in a file named iife.js&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Stackoverflow!&quot;&lt;/span&gt;);\n   })();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code above will execute as soon as you load iife.js and will print &apos;&lt;em&gt;Hello Stackoverflow!&lt;/em&gt;&apos; on the developer tools&apos; console. &lt;/p&gt;\n\n&lt;p&gt;For a Detailed explanation see &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Immediately-Invoked Function Expression (IIFE)&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;One more use case is memoization where a cache object is not global:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; calculate = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cache = {};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (cache[a]) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cache[a];\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Calculate heavy operation&lt;/span&gt;\n      cache[a] = &lt;span class=&quot;hljs-title function_&quot;&gt;heavyOperation&lt;/span&gt;(a);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cache[a];\n    }\n  }\n})();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is called an &lt;strong&gt;immediately invoked function expression&lt;/strong&gt; (IIFE).&lt;/p&gt;\n\n&lt;p&gt;It is called a function expression because the &lt;code&gt;( yourcode )&lt;/code&gt; operator in Javascript force it into an expression. The difference between a &lt;strong&gt;function expression&lt;/strong&gt; and a &lt;strong&gt;function declaration&lt;/strong&gt; is the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// declaration:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;declaredFunction&lt;/span&gt; () {}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expressions:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// storing function into variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; expressedFunction = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Using () operator, which transforms the function into an expression&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An expression is simply a bunch of code which can be evaluated to &lt;strong&gt;a single value&lt;/strong&gt;. In case of the expressions in the above example this value was a &lt;strong&gt;single function object&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;After we have an expression which evaluates to a function object we then can immediately &lt;strong&gt;invoke&lt;/strong&gt; the function object with the &lt;code&gt;()&lt;/code&gt; operator. For example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// all variables inside here are scoped to the function block&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);\n\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);  &lt;span class=&quot;hljs-comment&quot;&gt;// referenceError foo is scoped to the IIFE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Why is this useful?&lt;/h2&gt;\n\n&lt;p&gt;When we are dealing with a large code base and/or when we are importing various libraries the chance of naming conflicts increases. When we are writing certain parts of our code which is related (and thus is using the same variables) inside an IIFE all of the &lt;strong&gt;variables and function names are scoped to the function brackets of the IIFE&lt;/strong&gt;. This reduces chances of naming conflicts and lets you name them more careless (e.g. you don&apos;t have to prefix them).&lt;/p&gt;\n    ","\n&lt;p&gt;This function is called self-invoking function. A self-invoking (also called self-executing) function is a nameless (anonymous) function that is invoked(Called) immediately after its definition. &lt;a href=&quot;https://scriptverse.academy/tutorials/js-self-invoking-functions.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;What these functions do is that when the function is defined, The function is immediately called, which saves time and extra lines of code(as compared to calling it on a seperate line).&lt;/p&gt;\n\n&lt;p&gt;Here is an example: &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Already many good answers here but here are my 2 cents :p&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;You can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot; rel=&quot;nofollow noreferrer&quot;&gt;IIFE&lt;/a&gt; (Immediately Invoked Function Expression) for:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Avoiding pollution in the global namespace.&lt;/p&gt;\n&lt;p&gt;Variables defined in IIFE (or even any normal function) don&apos;t overwrite definitions in global scope.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Protecting code from being accessed by outer code.&lt;/p&gt;\n&lt;p&gt;Everything that you define within the IIFE can be only be accessed within the IIFE. It protects code from being modified by outer code. Only what you explicitly return as the result of function or set as value to outer variables is accessible by outer code.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Avoid naming functions that you don&apos;t need to use repeatedly.\nThough it&apos;s possible to use a named function in IIFE pattern you don&apos;t do it as there is no need to call it repeatedly, generally.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For &lt;a href=&quot;https://github.com/umdjs/umd&quot; rel=&quot;nofollow noreferrer&quot;&gt;Universal Module Definitions&lt;/a&gt; which is used in many JS libraries. Check this &lt;a href=&quot;https://stackoverflow.com/questions/34866510/building-a-javascript-library-why-use-an-iife-this-way&quot;&gt;question&lt;/a&gt; for details.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;p&gt;IIFE is generally used in following fashion :&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt;){\n   &lt;span class=&quot;hljs-comment&quot;&gt;//code here&lt;/span&gt;\n})(args);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can omit the parentheses &lt;code&gt;()&lt;/code&gt; around anonymous function and use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;void&lt;/code&gt;&lt;/a&gt; operator before anonymous function.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt;){\n   &lt;span class=&quot;hljs-comment&quot;&gt;//code here&lt;/span&gt;\n}(args);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;An immediately invoked function expression (IIFE) is a function that&apos;s executed as soon as it&apos;s created. It has no connection with any events or asynchronous execution. You can define an IIFE as shown below:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// all your code here&lt;/span&gt;\n     &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The first pair of parentheses function(){...} converts the code inside the parentheses into an expression.The second pair of parentheses calls the function resulting from the expression.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;An &lt;code&gt;IIFE&lt;/code&gt; can also be described as a self-invoking anonymous function. Its most common usage is to limit the scope of a variable made via var or to encapsulate context to avoid name collisions.&lt;/p&gt;\n    ","\n&lt;p&gt;The reason self-evoking anonymous functions are used is they should never be called by other code since they &quot;set up&quot; the code which IS meant to be called (along with giving scope to functions and variables).&lt;/p&gt;\n\n&lt;p&gt;In other words, they are like programs that &quot;make classes&apos;, at the beginning of program. After they are instantiated (automatically), the only functions that are available are the ones returned in by the anonymous function. However, all the other &apos;hidden&apos; functions are still there, along with any state (variables set during scope creation).&lt;/p&gt;\n\n&lt;p&gt;Very cool.&lt;/p&gt;\n    ","\n&lt;p&gt;In ES6 syntax (posting for myself, as I keep landing on this page looking for a quick example):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// simple&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; simpleNumber = (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n})()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// with param&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isPositiveNumber = (&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; number &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n})(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a more in depth explanation of why you would use this:&lt;/p&gt;\n\n&lt;p&gt;&quot;The primary reason to use an IIFE is to obtain data privacy. Because JavaScript&apos;s var scopes variables to their containing function, any variables declared within the IIFE cannot be accessed by the outside world.&quot;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://adripofjavascript.com/blog/drips/an-introduction-to-iffes-immediately-invoked-function-expressions.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://adripofjavascript.com/blog/drips/an-introduction-to-iffes-immediately-invoked-function-expressions.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think the 2 sets of brackets makes it a bit confusing but I saw another usage in googles example, they used something similar, I hope this will help you understand better:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt; || (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt; = {});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(app);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so if &lt;code&gt;windows.app&lt;/code&gt; is not defined, then &lt;code&gt;window.app = {}&lt;/code&gt; is immediately executed, so &lt;code&gt;window.app&lt;/code&gt; is assigned with &lt;code&gt;{}&lt;/code&gt; during the condition evaluation, so the result is both &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;window.app&lt;/code&gt; now become &lt;code&gt;{}&lt;/code&gt;, so console output is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Usually, we don&apos;t invoke a function immediately after we write it in the program. \nIn extremely simple terms, when you call a function right after its creation, it is called IIFE - a fancy name.&lt;/p&gt;\n    ","\n&lt;p&gt;Normally, JavaScript code has global scope in the application. When we declare global variable in it, there is a chance for using the same duplicate variable  in some other area of the development for some other purpose. Because of this duplication there may happen some error. So we can avoid this global variables by using immediately invoking function expression , this expression is self-executing expression.When we make our code inside this &lt;strong&gt;IIFE&lt;/strong&gt; expression global variable will be like local scope and local variable.&lt;/p&gt;\n\n&lt;p&gt;Two ways we can create &lt;strong&gt;IIFE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = angular.&lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myModule&quot;&lt;/span&gt;, []);\n}());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = angular.&lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myModule&quot;&lt;/span&gt;, []);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the code snippet above, &lt;em&gt;var app&lt;/em&gt; is a local variable now.&lt;/p&gt;\n    "]},"randomTags":[{"name":"deep-copy","slug":"deep-copy"},{"name":"protractor","slug":"protractor"},{"name":"main","slug":"main"},{"name":"merge","slug":"merge"},{"name":"dictionary","slug":"dictionary"},{"name":"deserialization","slug":"deserialization"},{"name":"propertynotfoundexception","slug":"propertynotfoundexception"},{"name":"generic-list","slug":"generic-list"},{"name":"pdo","slug":"pdo"},{"name":"semantics","slug":"semantics"},{"name":"importerror","slug":"importerror"},{"name":"combinatorics","slug":"combinatorics"},{"name":"sapply","slug":"sapply"},{"name":"identifier","slug":"identifier"},{"name":"object-literal","slug":"object-literal"},{"name":"excel","slug":"excel"},{"name":"object-notation","slug":"object-notation"},{"name":"model","slug":"model"},{"name":"formatting","slug":"formatting"},{"name":"c++","slug":"c++"}]},"__N_SSG":true}