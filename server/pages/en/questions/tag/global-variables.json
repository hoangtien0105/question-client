{"pageProps":{"data":{"count":1,"rows":[{"id":154,"title":"Using global variables in a function","slug":"using-global-variables-in-a-function-1657384796002","postType":"QUESTION","createdAt":"2022-07-09T16:39:56.000Z","updatedAt":"2022-07-09T16:39:56.000Z","tags":[{"id":559,"name":"global-variables","slug":"global-variables","createdAt":"2022-07-09T16:39:56.000Z","updatedAt":"2022-07-09T16:39:56.000Z","Questions_Tags":{"questionId":154,"tagId":559}}]}]},"slug":"global-variables","page":1,"answers":{"154":["\n&lt;p&gt;You can use a global variable within other functions by declaring it as &lt;code&gt;global&lt;/code&gt; within each function that assigns a value to it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;globvar = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_globvar_to_one&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; globvar    &lt;span class=&quot;hljs-comment&quot;&gt;# Needed to modify global copy of globvar&lt;/span&gt;\n    globvar = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_globvar&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(globvar)     &lt;span class=&quot;hljs-comment&quot;&gt;# No need for global declaration to read value of globvar&lt;/span&gt;\n\nset_globvar_to_one()\nprint_globvar()       &lt;span class=&quot;hljs-comment&quot;&gt;# Prints 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since it&apos;s unclear whether &lt;code&gt;globvar = 1&lt;/code&gt; is creating a local variable or changing a global variable, Python defaults to creating a local variable, and makes you explicitly choose the other behavior with the &lt;code&gt;global&lt;/code&gt; keyword.&lt;/p&gt;\n&lt;p&gt;See other answers if you want to share a global variable across modules.&lt;/p&gt;\n    ","\n&lt;p&gt;If I&apos;m understanding your situation correctly, what you&apos;re seeing is the result of how Python handles local (function) and global (module) namespaces.&lt;/p&gt;\n&lt;p&gt;Say you&apos;ve got a module like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# sample.py&lt;/span&gt;\n_my_global = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func1&lt;/span&gt;():\n    _my_global = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func2&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; _my_global\n\nfunc1()\nfunc2()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You might expecting this to print 42, but instead it prints 5.  As has already been mentioned, if you add a &apos;&lt;code&gt;global&lt;/code&gt;&apos; declaration to &lt;code&gt;func1()&lt;/code&gt;, then &lt;code&gt;func2()&lt;/code&gt; will print 42.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func1&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; _my_global \n    _my_global = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What&apos;s going on here is that Python assumes that any name that is &lt;em&gt;assigned to&lt;/em&gt;, anywhere within a function, is local to that function unless explicitly told otherwise.  If it is only &lt;em&gt;reading&lt;/em&gt; from a name, and the name doesn&apos;t exist locally, it will try to look up the name in any containing scopes (e.g. the module&apos;s global scope).&lt;/p&gt;\n&lt;p&gt;When you assign 42 to the name &lt;code&gt;_my_global&lt;/code&gt;, therefore, Python creates a local variable that shadows the global variable of the same name.  That local goes out of scope and is &lt;a href=&quot;http://www.digi.com/wiki/developer/index.php/Python_Garbage_Collection&quot; rel=&quot;nofollow noreferrer&quot;&gt;garbage-collected&lt;/a&gt; when &lt;code&gt;func1()&lt;/code&gt; returns; meanwhile, &lt;code&gt;func2()&lt;/code&gt; can never see anything other than the (unmodified) global name.  Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of &lt;code&gt;_my_global&lt;/code&gt; inside &lt;code&gt;func1()&lt;/code&gt; before you assign to it, you&apos;d get an &lt;code&gt;UnboundLocalError&lt;/code&gt;, because Python has already decided that it must be a local variable but it has not had any value associated with it yet.  But by using the &apos;&lt;code&gt;global&lt;/code&gt;&apos; statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally.&lt;/p&gt;\n&lt;p&gt;(I believe that this behavior originated largely through an optimization of local namespaces -- without this behavior,  Python&apos;s VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn&apos;t already exist at module/builtin level), which would significantly slow down a very common operation.)&lt;/p&gt;\n    ","\n&lt;p&gt;You may want to explore the notion of &lt;a href=&quot;http://docs.python.org/reference/datamodel.html&quot; rel=&quot;noreferrer&quot;&gt;namespaces&lt;/a&gt;. In Python, the &lt;a href=&quot;http://docs.python.org/tutorial/modules.html&quot; rel=&quot;noreferrer&quot;&gt;module&lt;/a&gt; is the natural place for &lt;em&gt;global&lt;/em&gt; data:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a users global variables. On the other hand, if you know what you are doing you can touch a modules global variables with the same notation used to refer to its functions, &lt;code&gt;modname.itemname&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;A specific use of global-in-a-module is described here - &lt;a href=&quot;https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules&quot; rel=&quot;noreferrer&quot;&gt;How do I share global variables across modules?&lt;/a&gt;, and for completeness the contents are shared here:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The canonical way to share information across modules within a single program is to create a special configuration module (often called &lt;strong&gt;config&lt;/strong&gt; or &lt;strong&gt;cfg&lt;/strong&gt;). Just import the configuration module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;File: config.py&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;# Default value of the &apos;x&apos; configuration setting&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;File: mod.py&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; config\nconfig.x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;File: main.py&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; config\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; mod\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; config.x\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dis\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; bar\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    baz = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; bar\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; baz\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; quux\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dis.disassemble(foo.func_code)\n  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; LOAD_CONST               &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n              &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; STORE_FAST               &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (baz)\n\n  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; LOAD_GLOBAL              &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (bar)\n              &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; PRINT_ITEM          \n             &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; PRINT_NEWLINE       \n\n  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; LOAD_FAST                &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (baz)\n             &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; PRINT_ITEM          \n             &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; PRINT_NEWLINE       \n\n  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; LOAD_GLOBAL              &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (quux)\n             &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; PRINT_ITEM          \n             &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; PRINT_NEWLINE       \n             &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; LOAD_CONST               &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n             &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; RETURN_VALUE        \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See how baz, which appears on the left side of an assignment in &lt;code&gt;foo()&lt;/code&gt;, is the only &lt;code&gt;LOAD_FAST&lt;/code&gt; variable.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to refer to a global variable in a function, you can use the &lt;strong&gt;global&lt;/strong&gt; keyword to declare which variables are global. You don&apos;t have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables.&lt;/p&gt;\n\n&lt;p&gt;However, if you assign to a new variable not declared as global in the function, it is implicitly declared as local, and it can overshadow any existing global variable with the same name.&lt;/p&gt;\n\n&lt;p&gt;Also, global variables are useful, contrary to some OOP zealots who claim otherwise - especially for smaller scripts, where OOP is overkill.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h1&gt;If I create a global variable in one function, how can I use that variable in another function?&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;We can create a global with the following function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create_global_variable&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable &lt;span class=&quot;hljs-comment&quot;&gt;# must declare it to be a global first&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# modifications are thus reflected on the module&apos;s global scope&lt;/span&gt;\n    global_variable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Writing a function does not actually run its code. So we call the &lt;code&gt;create_global_variable&lt;/code&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;create_global_variable()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Using globals without modification&lt;/h2&gt;\n\n&lt;p&gt;You can just use it, so long as you don&apos;t expect to change which object it points to: &lt;/p&gt;\n\n&lt;p&gt;For example, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_global_variable&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable + &lt;span class=&quot;hljs-string&quot;&gt;&apos;!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and now we can use the global variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;use_global_variable()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Modification of the global variable from inside a function&lt;/h2&gt;\n\n&lt;p&gt;To point the global variable at a different object, you are required to use the global keyword again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change_global_variable&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable\n    global_variable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Bar&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that after writing this function, the code actually changing it has still not run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;use_global_variable()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So after calling the function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;change_global_variable()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;we can see that the global variable has been changed. The &lt;code&gt;global_variable&lt;/code&gt; name now points to &lt;code&gt;&apos;Bar&apos;&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;use_global_variable()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Bar!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &quot;global&quot; in Python is not truly global - it&apos;s only global to the module level. So it is only available to functions written in the modules in which it is global. Functions remember the module in which they are written, so when they are exported into other modules, they still look in the module in which they were created to find global variables.&lt;/p&gt;\n\n&lt;h1&gt;Local variables with the same name&lt;/h1&gt;\n\n&lt;p&gt;If you create a local variable with the same name, it will overshadow a global variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_local_with_same_name_as_global&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;# bad name for a local variable, though.&lt;/span&gt;\n    global_variable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baz&apos;&lt;/span&gt; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable + &lt;span class=&quot;hljs-string&quot;&gt;&apos;!!!&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;use_local_with_same_name_as_global()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Baz!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But using that misnamed local variable does not change the global variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;use_global_variable()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Bar!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that you should avoid using the local variables with the same names as globals unless you know precisely what you are doing and have a very good reason to do so. I have not yet encountered such a reason.&lt;/p&gt;\n\n&lt;h2&gt;We get the same behavior in classes&lt;/h2&gt;\n\n&lt;p&gt;A follow on comment asks:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;what to do if I want to create a global variable inside a function inside a class and want to use that variable inside another function inside another class?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here I demonstrate we get the same behavior in methods as we do in regular functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable\n        global_variable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable + &lt;span class=&quot;hljs-string&quot;&gt;&apos;!!!&apos;&lt;/span&gt;\n\nFoo().foo()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Bar().bar()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo!!!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I would suggest instead of using global variables you use class attributes, to avoid cluttering the module namespace. Also note we don&apos;t use &lt;code&gt;self&lt;/code&gt; arguments here - these could be class methods (handy if mutating the class attribute from the usual &lt;code&gt;cls&lt;/code&gt; argument) or static methods (no &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;cls&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to already existing answers and to make this more confusing:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In Python, variables that are only referenced inside a function are\n  &lt;strong&gt;implicitly global&lt;/strong&gt;. If a variable is assigned a new value anywhere\n  within the functions body, its assumed to be a &lt;strong&gt;local&lt;/strong&gt;. If a variable\n  is ever assigned a new value inside the function, the variable is\n  implicitly local, and you need to explicitly declare it as global.&lt;/p&gt;\n  \n  &lt;p&gt;Though a bit surprising at first, a moments consideration explains\n  this. On one hand, requiring global for assigned variables provides a\n  bar against unintended side-effects. On the other hand, if global was\n  required for all global references, youd be using global all the\n  time. Youd have to declare as global every reference to a built-in\n  function or to a component of an imported module. This clutter would\n  defeat the usefulness of the global declaration for identifying\n  side-effects.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Source: &lt;em&gt;&lt;a href=&quot;https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python&quot;&gt;What are the rules for local and global variables in Python?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;With parallel execution, global variables can cause unexpected results if you don&apos;t understand what is happening. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; multiprocessing\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;worker&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;new_value&lt;/span&gt;):\n    old_value = get_value()\n    set_value(random.randint(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;))\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pid=[{pid}] &apos;&lt;/span&gt;\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;old_value=[{old_value:2}] &apos;&lt;/span&gt;\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;new_value=[{new_value:2}] &apos;&lt;/span&gt;\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;get_value=[{get_value:2}]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(\n          pid=&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(os.getpid()),\n          old_value=old_value,\n          new_value=new_value,\n          get_value=get_value()))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_value&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_value&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;new_value&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable\n    global_variable = new_value\n\nglobal_variable = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;before set_value(), get_value() = [%s]&apos;&lt;/span&gt; % get_value())\nset_value(new_value=-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;after  set_value(), get_value() = [%s]&apos;&lt;/span&gt; % get_value())\n\nprocessPool = multiprocessing.Pool(processes=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\nprocessPool.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(func=worker, iterable=&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;before set_value(), get_value() = [-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nafter  set_value(), get_value() = [-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53970&lt;/span&gt;] old_value=[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53971&lt;/span&gt;] old_value=[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53970&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53970&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53971&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53972&lt;/span&gt;] old_value=[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53973&lt;/span&gt;] old_value=[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53970&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53971&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53972&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;] new_value=[ &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53973&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;] new_value=[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53970&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;] new_value=[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53971&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;] new_value=[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;82&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53972&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;] new_value=[&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;] get_value=[ &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\npid=[&lt;span class=&quot;hljs-number&quot;&gt;53973&lt;/span&gt;] old_value=[&lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;] new_value=[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;] get_value=[&lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As it turns out the answer is always simple.&lt;/p&gt;\n\n&lt;p&gt;Here is a small sample module with a simple way to show it in a &lt;code&gt;main&lt;/code&gt; definition:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;five&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;enterAnumber,sumation&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; helper\n    helper  = enterAnumber + sumation\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isTheNumber&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; helper\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is how to show it in a &lt;code&gt;main&lt;/code&gt; definition:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; TestPy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    atest  = TestPy\n    atest.five(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(atest.isTheNumber())\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This simple code works just like that, and it will execute. I hope it helps.&lt;/p&gt;\n    ","\n&lt;p&gt;What you are saying is to use the method like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;globvar = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;():\n    var = globvar\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(var)\n\nf()  &lt;span class=&quot;hljs-comment&quot;&gt;# Prints 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But the better way is to use the global variable like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;globvar = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; globvar\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(globvar)\nf()   &lt;span class=&quot;hljs-comment&quot;&gt;#prints 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Both give the same output.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to reference the global variable in every function you want to use.&lt;/p&gt;\n\n&lt;p&gt;As follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printGlobalText&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; var &lt;span class=&quot;hljs-comment&quot;&gt;#wWe are telling to explicitly use the global version&lt;/span&gt;\n    var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;global from printGlobalText fun.&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;var from printGlobalText: &quot;&lt;/span&gt; + var\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printLocalText&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;#We are NOT telling to explicitly use the global version, so we are creating a local variable&lt;/span&gt;\n    var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;local version from printLocalText fun&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;var from printLocalText: &quot;&lt;/span&gt; + var\n\nprintGlobalText()\nprintLocalText()\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nOutput Result:\nvar from printGlobalText: global from printGlobalText fun.\nvar from printLocalText: local version from printLocalText\n[Finished in 0.1s]\n&quot;&quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x1&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; x\n    x += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x1: &apos;&lt;/span&gt;, x)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x2&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; x\n    x = x+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x2: &apos;&lt;/span&gt;, x)\n\nx = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x:  &apos;&lt;/span&gt;, x)\nx1()\nx2()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# x:   5&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# x1:  6&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# x2:  7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You&apos;re not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation.&lt;/p&gt;\n\n&lt;p&gt;If you didn&apos;t have to explicitly specify when an identifier was to refer to a predefined global, then you&apos;d presumably have to explicitly specify when an identifier is a new local variable instead (for example, with something like the &apos;var&apos; command seen in JavaScript). Since local variables are more common than global variables in any serious and non-trivial system, Python&apos;s system makes more sense in most cases.&lt;/p&gt;\n\n&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; have a language which attempted to guess, using a global variable if it existed or creating a local variable if it didn&apos;t. However, that would be very error-prone. For example, importing another module could inadvertently introduce a global variable by that name, changing the behaviour of your program.&lt;/p&gt;\n    ","\n&lt;p&gt;In case you have a local variable with the same name, you might want to use the &lt;a href=&quot;https://docs.python.org/3/library/functions.html#globals&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;globals()&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;your_global_var&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Following on and as an add on, use a file to contain all global variables all declared locally and then &lt;code&gt;import as&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;File &lt;em&gt;initval.py&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Stocksin = &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;\nPrices = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;File &lt;em&gt;getstocks.py&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; initval &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; iv\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getmystocks&lt;/span&gt;(): \n    iv.Stocksin = getstockcount()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getmycharts&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ic &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(iv.Stocksin):\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Writing to explicit elements of a global array does not apparently need the global declaration, though writing to it &quot;wholesale&quot; does have that requirement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\nhostValue = &lt;span class=&quot;hljs-number&quot;&gt;3.14159&lt;/span&gt;\nhostArray = np.array([&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt;])\nhostMatrix = np.array([[&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;],[ &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;]])\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func1&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; hostValue    &lt;span class=&quot;hljs-comment&quot;&gt;# mandatory, else local.&lt;/span&gt;\n    hostValue = &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func2&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; hostValue    &lt;span class=&quot;hljs-comment&quot;&gt;# mandatory, else UnboundLocalError.&lt;/span&gt;\n    hostValue += &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func3&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; hostArray    &lt;span class=&quot;hljs-comment&quot;&gt;# mandatory, else local.&lt;/span&gt;\n    hostArray = np.array([&lt;span class=&quot;hljs-number&quot;&gt;14.&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15.&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func4&lt;/span&gt;():            &lt;span class=&quot;hljs-comment&quot;&gt;# no need for globals&lt;/span&gt;\n    hostArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;123.4&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func5&lt;/span&gt;():            &lt;span class=&quot;hljs-comment&quot;&gt;# no need for globals&lt;/span&gt;\n    hostArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] += &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func6&lt;/span&gt;():            &lt;span class=&quot;hljs-comment&quot;&gt;# no need for globals&lt;/span&gt;\n    hostMatrix[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;12.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func7&lt;/span&gt;():            &lt;span class=&quot;hljs-comment&quot;&gt;# no need for globals&lt;/span&gt;\n    hostMatrix[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] += &lt;span class=&quot;hljs-number&quot;&gt;0.33&lt;/span&gt;\n\nfunc1()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func1(), hostValue = &quot;&lt;/span&gt;, hostValue\nfunc2()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func2(), hostValue = &quot;&lt;/span&gt;, hostValue\nfunc3()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func3(), hostArray = &quot;&lt;/span&gt;, hostArray\nfunc4()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func4(), hostArray = &quot;&lt;/span&gt;, hostArray\nfunc5()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func5(), hostArray = &quot;&lt;/span&gt;, hostArray\nfunc6()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func6(), hostMatrix = \\n&quot;&lt;/span&gt;, hostMatrix\nfunc7()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;After func7(), hostMatrix = \\n&quot;&lt;/span&gt;, hostMatrix\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m adding this as I haven&apos;t seen it in any of the other answers and it might be useful for someone struggling with something similar. The &lt;a href=&quot;https://docs.python.org/library/functions.html#globals&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; function returns a mutable global symbol dictionary where you can &quot;magically&quot; make data available for the rest of your code. \nFor example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pickle &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; load\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loaditem&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;r&quot;C:\\pickle\\file\\location&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\{}.dat&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(name), &lt;span class=&quot;hljs-string&quot;&gt;&quot;rb&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; openfile:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[name] = load(openfile)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pickle &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dump\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dumpfile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(name+&lt;span class=&quot;hljs-string&quot;&gt;&quot;.dat&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;wb&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; outfile:\n        dump(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[name], outfile)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will just let you dump/load variables out of and into the global namespace. Super convenient, no muss, no fuss. Pretty sure it&apos;s Python 3 only.&lt;/p&gt;\n    ","\n&lt;p&gt;Reference the class namespace where you want the change to show up.  &lt;/p&gt;\n\n&lt;p&gt;In this example, runner is using &lt;strong&gt;max&lt;/strong&gt; from the file config. I want my test to change the value of &lt;strong&gt;max&lt;/strong&gt; when runner is using it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;main/config.py&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;15000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;main/runner.py&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; main &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; config\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;check_threads&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt; &amp;lt; thread_count \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;tests/runner_test.py&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; main &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; runner                &lt;span class=&quot;hljs-comment&quot;&gt;# &amp;lt;----- 1. add file&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; main.runner &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; check_threads\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RunnerTest&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;unittest&lt;/span&gt;):\n   &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_threads&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n       runner.&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;                  &lt;span class=&quot;hljs-comment&quot;&gt;# &amp;lt;----- 2. set global &lt;/span&gt;\n       check_threads()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Globals are fine - Except with Multiprocessing&lt;/h2&gt;\n\n&lt;p&gt;Globals in connection with multiprocessing on different platforms/envrionments \nas Windows/Mac OS on the one side and Linux on the other are troublesome.&lt;/p&gt;\n\n&lt;p&gt;I will show you this with a simple example pointing out a problem which I run into some time ago. &lt;/p&gt;\n\n&lt;p&gt;If you want to understand, why things are different on Windows/MacOs and Linux you \nneed to know that, the default mechanism to start a new process on ...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Windows/MacOs is &apos;spawn&apos;&lt;/li&gt;\n&lt;li&gt;Linux is &apos;fork&apos;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;They are different in Memory allocation an initialisation ... (but I don&apos;t go into this\nhere). &lt;/p&gt;\n\n&lt;p&gt;Let&apos;s have a look at the problem/example ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; multiprocessing\n\ncounter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;task_id&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n    counter +=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&apos;task &lt;span class=&quot;hljs-subst&quot;&gt;{task_id}&lt;/span&gt;: counter = &lt;span class=&quot;hljs-subst&quot;&gt;{counter}&lt;/span&gt;&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n\n    pool = multiprocessing.Pool(processes=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n    task_ids = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\n    pool.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(do, task_ids)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Windows&lt;/h3&gt;\n\n&lt;p&gt;If you run this on Windows (And I suppose on MacOS too), you get the following output ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;task &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ntask &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ntask &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ntask &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Linux&lt;/h3&gt;\n\n&lt;p&gt;If you run this on Linux, you get the following instead. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;task &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ntask &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ntask &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ntask &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are 2 ways to declare a variable as global:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1. assign variable inside functions and use global line&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;declare_a_global_variable&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable_1\n    global_variable_1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Note to use the function to global variables&lt;/span&gt;\ndeclare_a_global_variable() \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;2. assign variable outside functions:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;global_variable_2 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we can use these declared global variables in the other functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;declare_a_global_variable&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable_1\n    global_variable_1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Note to use the function to global variables&lt;/span&gt;\ndeclare_a_global_variable() \nglobal_variable_2 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_variables&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(global_variable_1)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(global_variable_2)\nprint_variables() &lt;span class=&quot;hljs-comment&quot;&gt;# prints 1 &amp;amp; 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you want to change a global variable inside another function like &lt;code&gt;update_variables()&lt;/code&gt; you should use global line in that function before assigning the variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;global_variable_1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nglobal_variable_2 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;update_variables&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_variable_1\n    global_variable_1 = &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n    global_variable_2 = &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# will update just locally for this function&lt;/span&gt;\n\nupdate_variables()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(global_variable_1) &lt;span class=&quot;hljs-comment&quot;&gt;# prints 11&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(global_variable_2) &lt;span class=&quot;hljs-comment&quot;&gt;# prints 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There is a exception for note 1 for list and dictionary variables while not using global line inside a function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# declaring some global variables&lt;/span&gt;\nvariable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;peter&apos;&lt;/span&gt;\nlist_variable_1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\nlist_variable_2 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;update_global_variables&lt;/span&gt;():\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;without using global line&quot;&quot;&quot;&lt;/span&gt;\n    variable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;PETER&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# won&apos;t update in global scope&lt;/span&gt;\n    list_variable_1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# won&apos;t update in global scope&lt;/span&gt;\n    list_variable_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# updated in global scope surprisingly this way&lt;/span&gt;\n    list_variable_2[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# updated in global scope surprisingly this way&lt;/span&gt;\n\nupdate_global_variables()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;variable is: %s&apos;&lt;/span&gt;%variable) &lt;span class=&quot;hljs-comment&quot;&gt;# prints peter&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;list_variable_1 is: %s&apos;&lt;/span&gt;%list_variable_1) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [&apos;a&apos;, &apos;b&apos;]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;list_variable_2 is: %s&apos;&lt;/span&gt;%list_variable_2) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [&apos;C&apos;, &apos;D&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Though this has been answered, I am giving solution again as I prefer single line\nThis is if you wish to create global variable within function&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someFunc&lt;/span&gt;():\n    x=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;]=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;\nsomeFunc() &lt;span class=&quot;hljs-comment&quot;&gt;# invoking function so that variable Y is created globally &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(y) &lt;span class=&quot;hljs-comment&quot;&gt;# output 50&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x) &lt;span class=&quot;hljs-comment&quot;&gt;#NameError: name &apos;x&apos; is not defined as x was defined locally within function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;global_var = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# will be considered as a global variable&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func_1&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_var  &lt;span class=&quot;hljs-comment&quot;&gt;# access variable using variable keyword&lt;/span&gt;\n    global_var += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func_2&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; global_var\n    global_var *= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;func_2: &lt;span class=&quot;hljs-subst&quot;&gt;{global_var}&lt;/span&gt;&quot;&lt;/span&gt;)\n\n\nfunc_1()\nfunc_2()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global scope:&quot;&lt;/span&gt;, global_var) &lt;span class=&quot;hljs-comment&quot;&gt;# will print 22&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Explanation:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;global_var&lt;/code&gt; is a global variable and all functions and classes can access that variable.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;func_1()&lt;/code&gt; accessed that global variable using the keyword &lt;code&gt;global&lt;/code&gt; which points to the variable which is written in the global scope. If I didn&apos;t write the global keyword the variable &lt;code&gt;global_var&lt;/code&gt; inside &lt;code&gt;func_1&lt;/code&gt; is considered a local variable that is only usable inside the function. Then inside &lt;code&gt;func_1&lt;/code&gt;, I have incremented that global variable by 1.&lt;/p&gt;\n&lt;p&gt;The same happened in &lt;code&gt;func_2()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;After calling &lt;code&gt;func_1&lt;/code&gt; and &lt;code&gt;func_2&lt;/code&gt;, you&apos;ll see the &lt;code&gt;global_var&lt;/code&gt; is changed&lt;/p&gt;\n    ","\n&lt;p&gt;Like this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myVar = &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt;():\n  myVar += &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Key:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you declare a variable outside the strings, it become global.&lt;/p&gt;\n&lt;p&gt;If you declare a variable inside the strings, it become local.&lt;/p&gt;\n&lt;p&gt;If you want to declare a global variable inside the strings, use the keyword &lt;code&gt;global&lt;/code&gt; before the variable you want to declare:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myVar = &lt;span class=&quot;hljs-number&quot;&gt;124&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; myVar2\n  myVar2 = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\nmyFunc()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myVar2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and then you have 100 in the document.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Initialized = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;#Here This Initialized is global variable  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Initialize&lt;/span&gt;():\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Initialized!&quot;&lt;/span&gt;)\n     Initialized = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;#This is local variable and assigning 1 to local variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; Initialized == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here we are comparing global variable Initialized that 0, so while loop condition got true&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;     Initialize()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Function will get called.Loop will be infinite&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#if we do Initialized=1 then loop will terminate  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lets do something else now!&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"access-modifiers","slug":"access-modifiers"},{"name":"attr","slug":"attr"},{"name":"pcre","slug":"pcre"},{"name":"abstraction","slug":"abstraction"},{"name":"boolean-expression","slug":"boolean-expression"},{"name":"android-layout","slug":"android-layout"},{"name":"mobile","slug":"mobile"},{"name":"nullreferenceexception","slug":"nullreferenceexception"},{"name":"sqlite","slug":"sqlite"},{"name":"microbenchmark","slug":"microbenchmark"},{"name":"onclick","slug":"onclick"},{"name":"rust","slug":"rust"},{"name":"interface","slug":"interface"},{"name":"swing","slug":"swing"},{"name":"prototype","slug":"prototype"},{"name":"chromium","slug":"chromium"},{"name":"thread-safety","slug":"thread-safety"},{"name":"windows","slug":"windows"},{"name":"lifetime","slug":"lifetime"},{"name":"transpose","slug":"transpose"}]},"__N_SSG":true}