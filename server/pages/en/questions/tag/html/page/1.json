{"pageProps":{"data":{"count":1,"rows":[{"id":5,"title":"RegEx match open tags except XHTML self-contained tags","slug":"regex-match-open-tags-except-xhtml-self-contained-tags-1657384228245","postType":"QUESTION","createdAt":"2022-07-09T16:30:28.000Z","updatedAt":"2022-07-09T16:30:28.000Z","tags":[{"id":15,"name":"html","slug":"html","createdAt":"2022-07-09T16:30:28.000Z","updatedAt":"2022-07-09T16:30:28.000Z","Questions_Tags":{"questionId":5,"tagId":15}}]}]},"slug":"html","page":"1","answers":{"5":["\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Locked&lt;/b&gt;. There are &lt;a href=&quot;/help/locked-posts&quot;&gt;disputes about this answers content&lt;/a&gt; being resolved at this time. It is not currently accepting new interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;You can&apos;t parse [X]HTML with regex. Because HTML can&apos;t be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &amp;lt;center&amp;gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the nerves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow &lt;i&gt;it is too late it is too late we cannot be saved&lt;/i&gt; the transgression of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) &lt;i&gt;dear lord help us how can anyone survive this scourge&lt;/i&gt; using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes &lt;i&gt;using rege&lt;/i&gt;x as a tool to process HTML establishes a brea&lt;i&gt;ch between this world&lt;/i&gt; and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but &lt;i&gt;more corrupt) a mere glimp&lt;/i&gt;se of the world of reg&lt;b&gt;ex parsers for HTML will ins&lt;/b&gt;tantly transport a p&lt;i&gt;rogrammer&apos;s consciousness i&lt;/i&gt;nto a w&lt;i&gt;orl&lt;/i&gt;d of ceaseless screaming, he comes&lt;strike&gt;, the pestilent sl&lt;/strike&gt;ithy regex-infection wil&lt;b&gt;l devour your HT&lt;/b&gt;ML parser, application and existence for all time like Visual Basic only worse &lt;i&gt;he comes he com&lt;/i&gt;es &lt;i&gt;do not fi&lt;/i&gt;ght h&lt;b&gt;e com̡e̶s, ̕h̵i&lt;/b&gt;s un̨ho͞ly radiańcé de&lt;i&gt;stro҉ying all enli̍̈́̂̈́ghtenment, HTML tags &lt;b&gt;lea͠ki̧n͘g fr̶ǫm ̡yo͟ur eye͢s̸ ̛l̕ik͏e liq&lt;/b&gt;uid p&lt;/i&gt;ain, the song of re̸gular expre&lt;strike&gt;ssion parsing &lt;/strike&gt;will exti&lt;i&gt;nguish the voices of mor&lt;b&gt;tal man from the sp&lt;/b&gt;here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t&lt;/i&gt;he f&lt;code&gt;inal snuf&lt;/code&gt;fing o&lt;i&gt;f the lie&lt;b&gt;s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T A&lt;/b&gt;&lt;/i&gt;&lt;b&gt;LL IS L&lt;/b&gt;OST th&lt;i&gt;e pon̷y he come&lt;/i&gt;s he c̶̮om&lt;strike&gt;es he co&lt;/strike&gt;&lt;b&gt;&lt;strike&gt;me&lt;/strike&gt;s t&lt;i&gt;he&lt;/i&gt; ich&lt;/b&gt;or permeat&lt;i&gt;es al&lt;/i&gt;l MY FAC&lt;i&gt;E MY FACE h god n&lt;b&gt;o NO NOO̼&lt;/b&gt;&lt;/i&gt;&lt;b&gt;OO N&lt;/b&gt;Θ stop t&lt;i&gt;he an*̶͑̾̾̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨ&lt;/i&gt;e̠̅s&lt;code&gt; ͎a̧͈͖r̽̾̈́͒͑e&lt;/code&gt; n&lt;b&gt;ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ T&lt;/b&gt;O͇̹̺ͅƝ̴ȳ̳ TH̘&lt;b&gt;Ë͖́̉ ͠P̯͍̭O̚N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝&lt;/b&gt;S̨̥̫͎̭ͯ̿̔̀ͅ&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Have you tried using an XML parser instead?&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Moderator&apos;s Note&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This post is locked to prevent inappropriate edits to its content. The post looks exactly as it is supposed to look - there are no problems with its content. Please do not flag it for our attention.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;While &lt;em&gt;arbitrary&lt;/em&gt; HTML with only a regex is impossible, it&apos;s sometimes appropriate to use them for parsing a &lt;em&gt;limited, known&lt;/em&gt; set of HTML.  &lt;/p&gt;\n\n&lt;p&gt;If you have a small set of HTML pages that you want to scrape data from and then stuff into a database, regexes might work fine.  For example, I recently wanted to get the names, parties, and districts of Australian federal Representatives, which I got off of the Parliament&apos;s web site.  This was a limited, one-time job.  &lt;/p&gt;\n\n&lt;p&gt;Regexes worked just fine for me, and were very fast to set up.&lt;/p&gt;\n    ","\n&lt;p&gt;I think the flaw here is that HTML is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Context-free_grammar&quot; rel=&quot;noreferrer&quot;&gt;Chomsky Type 2 grammar (context free grammar)&lt;/a&gt; and a regular expression is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_grammar&quot; rel=&quot;noreferrer&quot;&gt;Chomsky Type 3 grammar (regular grammar)&lt;/a&gt;. Since a Type 2 grammar is fundamentally more complex than a Type 3 grammar (see the &lt;a href=&quot;http://en.wikipedia.org/wiki/Chomsky_hierarchy&quot; rel=&quot;noreferrer&quot;&gt;Chomsky hierarchy&lt;/a&gt;), it is &lt;em&gt;mathematically impossible&lt;/em&gt; to parse XML with a regular expression.&lt;/p&gt;\n&lt;p&gt;But many will try, and some will even claim success - but until others find the fault and totally mess you up.&lt;/p&gt;\n    ","\n&lt;p&gt;Don&apos;t listen to these guys. You totally &lt;strong&gt;can&lt;/strong&gt; parse context-free grammars with regex if you break the task into smaller pieces. You can generate the correct pattern with a script that does each of these in order: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Solve the Halting Problem.&lt;/li&gt;\n&lt;li&gt;Square a circle.&lt;/li&gt;\n&lt;li&gt;Work out the Traveling Salesman Problem in O(log n) or less. If it&apos;s any more than that, you&apos;ll run out of RAM and the engine will hang.&lt;/li&gt;\n&lt;li&gt;The pattern will be pretty big, so make sure you have an algorithm that losslessly compresses random data.&lt;/li&gt;\n&lt;li&gt;Almost there - just divide the whole thing by zero. Easy-peasy.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I haven&apos;t quite finished the last part myself, but I know I&apos;m getting close. It keeps throwing &lt;code&gt;CthulhuRlyehWgahnaglFhtagnException&lt;/code&gt;s for some reason, so I&apos;m going to port it to VB 6 and use &lt;code&gt;On Error Resume Next&lt;/code&gt;. I&apos;ll update with the code once I investigate this strange door that just opened in the wall. Hmm.&lt;/p&gt;\n\n&lt;p&gt;P.S. Pierre de Fermat also figured out how to do it, but the margin he was writing in wasn&apos;t big enough for the code.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: use a parser if you have the option. That said...&lt;/p&gt;\n\n&lt;p&gt;This is the regex I use (!) to match HTML tags:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;(?:&quot;[^&quot;]*&quot;[&apos;&quot;]*|&apos;[^&apos;]*&apos;[&apos;&quot;]*|[^&apos;&quot;&amp;gt;])+&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It may not be perfect, but I ran this code through a &lt;em&gt;lot&lt;/em&gt; of HTML. Note that it even catches strange things like &lt;code&gt;&amp;lt;a name=&quot;badgenerator&quot;&quot;&amp;gt;&lt;/code&gt;, which show up on the web.&lt;/p&gt;\n\n&lt;p&gt;I guess to make it not match self contained tags, you&apos;d either want to use &lt;a href=&quot;https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732395#1732395&quot;&gt;Kobi&lt;/a&gt;&apos;s negative look-behind:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;(?:&quot;[^&quot;]*&quot;[&apos;&quot;]*|&apos;[^&apos;]*&apos;[&apos;&quot;]*|[^&apos;&quot;&amp;gt;])+(?&amp;lt;!/\\s*)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or just combine if and if not.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To downvoters:&lt;/strong&gt; This is working code from an actual product. I doubt anyone reading this page will get the impression that it is socially acceptable to use regexes on HTML. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: I should note that this regex still breaks down in the presence of CDATA blocks, comments, and script and style elements. Good news is, you can get rid of those using a regex...  &lt;/p&gt;\n    ","\n&lt;p&gt;There are people that will tell you that the Earth is round (or perhaps that the Earth is an oblate spheroid if they want to use strange words). They are lying.&lt;/p&gt;\n&lt;p&gt;There are people that will tell you that Regular Expressions shouldn&apos;t be recursive. They are limiting you. They need to subjugate you, and they do it by keeping you in ignorance.&lt;/p&gt;\n&lt;p&gt;You can live in their reality or take the red pill.&lt;/p&gt;\n&lt;p&gt;Like Lord Marshal (is he a relative of the Marshal .NET class?), I have seen the &lt;strike&gt;Underverse&lt;/strike&gt; Stack Based Regex-Verse and returned with &lt;strike&gt;powers&lt;/strike&gt; knowledge you can&apos;t imagine. Yes, I think there were an Old One or two protecting them, but they were watching football on the TV, so it wasn&apos;t difficult.&lt;/p&gt;\n&lt;p&gt;I think the XML case is quite simple. The RegEx (in the .NET syntax), deflated and coded in base64 to make it easier to comprehend by your feeble mind, should be something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;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\n+r/vD34mUADO1P4/AQAA//8=\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The options to set is &lt;code&gt;RegexOptions.ExplicitCapture&lt;/code&gt;. The capture group you are looking for is &lt;code&gt;ELEMENTNAME&lt;/code&gt;. If the capture group &lt;code&gt;ERROR&lt;/code&gt; is not empty then there was a parsing error and the Regex stopped.&lt;/p&gt;\n&lt;p&gt;If you have problems reconverting it to a human-readable regex, this should help:&lt;/p&gt;\n&lt;pre class=&quot;lang-csharp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FromBase64&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; str&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] byteArray = Convert.FromBase64String(str);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; msIn = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream(byteArray))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; msOut = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream()) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ds = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeflateStream(msIn, CompressionMode.Decompress)) {\n            ds.CopyTo(msOut);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Encoding.UTF8.GetString(msOut.ToArray());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are unsure, no, I&apos;m NOT kidding (but perhaps I&apos;m lying). It WILL work. I&apos;ve built tons of unit tests to test it, and I have even used (part of) the &lt;a href=&quot;http://www.w3.org/XML/Test/&quot; rel=&quot;noreferrer&quot;&gt;conformance tests&lt;/a&gt;. It&apos;s a tokenizer, not a full-blown parser, so it will only split the XML into its component tokens. It won&apos;t parse/integrate DTDs.&lt;/p&gt;\n&lt;p&gt;Oh... if you want the source code of the regex, with some auxiliary methods:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://pastebin.com/hzYazFVb&quot; rel=&quot;noreferrer&quot;&gt;regex to tokenize an xml&lt;/a&gt; or &lt;a href=&quot;https://topaz.github.io/paste/#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&quot; rel=&quot;noreferrer&quot;&gt;the full plain regex&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In shell, you can parse &lt;a href=&quot;https://en.wikipedia.org/wiki/HTML&quot; rel=&quot;noreferrer&quot;&gt;HTML&lt;/a&gt; using &lt;a href=&quot;https://en.wikipedia.org/wiki/Sed&quot; rel=&quot;noreferrer&quot;&gt;sed&lt;/a&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://sed.sourceforge.net/grabbag/scripts/turing.sed&quot; rel=&quot;noreferrer&quot;&gt;Turing.sed&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Write HTML parser (homework)&lt;/li&gt;\n&lt;li&gt;???&lt;/li&gt;\n&lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Related (why you shouldn&apos;t use regex match):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/if-you-like-regular-expressions-so-much-why-dont-you-marry-them/&quot; rel=&quot;noreferrer&quot;&gt;If You Like Regular Expressions So Much, Why Don&apos;t You Marry Them?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&quot; rel=&quot;noreferrer&quot;&gt;Regular Expressions: Now You Have Two Problems&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://danlec.com/blog/hacking-stackoverflow-com-s-html-sanitizer&quot; rel=&quot;noreferrer&quot;&gt;Hacking stackoverflow.com&apos;s HTML sanitizer&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I agree that the right tool to parse XML and &lt;em&gt;especially HTML&lt;/em&gt; is a parser and not a regular expression engine. However, like others have pointed out, sometimes using a regex is quicker, easier, and gets the job done if you know the data format.&lt;/p&gt;\n\n&lt;p&gt;Microsoft actually has a section of &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/best-practices&quot; rel=&quot;noreferrer&quot;&gt;Best Practices for Regular Expressions in the .NET Framework&lt;/a&gt; and specifically talks about &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/best-practices#consider-the-input-source&quot; rel=&quot;noreferrer&quot;&gt;Consider[ing] the Input Source&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Regular Expressions do have limitations, but have you considered the following?&lt;/p&gt;\n\n&lt;p&gt;The .NET framework is unique when it comes to regular expressions in that it supports &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing_group_definition&quot; rel=&quot;noreferrer&quot;&gt;Balancing Group Definitions&lt;/a&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;See &lt;a href=&quot;https://weblogs.asp.net/whaggard/377025&quot; rel=&quot;noreferrer&quot;&gt;Matching Balanced Constructs with .NET Regular Expressions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;See &lt;a href=&quot;https://docs.microsoft.com/archive/blogs/bclteam/net-regular-expressions-regex-and-balanced-matching-ryan-byington&quot; rel=&quot;noreferrer&quot;&gt;.NET Regular Expressions: Regex and Balanced Matching&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;See Microsoft&apos;s docs on &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing_group_definition&quot; rel=&quot;noreferrer&quot;&gt;Balancing Group Definitions&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For this reason, I believe you CAN parse XML using regular expressions. Note however, that it &lt;strong&gt;must be valid XML&lt;/strong&gt; (&lt;em&gt;browsers are very forgiving of HTML and allow bad XML syntax inside HTML&lt;/em&gt;). This is possible since the &quot;Balancing Group Definition&quot; will allow the regular expression engine to act as a PDA.&lt;/p&gt;\n\n&lt;p&gt;Quote from article 1 cited above:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;.NET Regular Expression Engine&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;As described above properly balanced constructs cannot be described by\n  a regular expression. However, the .NET regular expression engine\n  provides a few constructs that allow balanced constructs to be\n  recognized. &lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;code&gt;(?&amp;lt;group&amp;gt;)&lt;/code&gt; - pushes the captured result on the capture stack with\n  the name group.&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;(?&amp;lt;-group&amp;gt;)&lt;/code&gt; - pops the top most capture with the name group off the\n  capture stack.&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;(?(group)yes|no)&lt;/code&gt; - matches the yes part if there exists a group\n  with the name group otherwise matches no part.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;These constructs allow for a .NET regular expression to emulate a\n  restricted PDA by essentially allowing simple versions of the stack\n  operations: push, pop and empty. The simple operations are pretty much\n  equivalent to increment, decrement and compare to zero respectively.\n  This allows for the .NET regular expression engine to recognize a\n  subset of the context-free languages, in particular the ones that only\n  require a simple counter. This in turn allows for the non-traditional\n  .NET regular expressions to recognize individual properly balanced\n  constructs.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Consider the following regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?=&amp;lt;ul\\s+id=&quot;matchMe&quot;\\s+type=&quot;square&quot;\\s*&amp;gt;)\n(?&amp;gt;\n   &amp;lt;!-- .*? --&amp;gt;                  |\n   &amp;lt;[^&amp;gt;]*/&amp;gt;                      |\n   (?&amp;lt;opentag&amp;gt;&amp;lt;(?!/)[^&amp;gt;]*[^/]&amp;gt;)  |\n   (?&amp;lt;-opentag&amp;gt;&amp;lt;/[^&amp;gt;]*[^/]&amp;gt;)     |\n   [^&amp;lt;&amp;gt;]*\n)*\n(?(opentag)(?!))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use the flags:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Singleline&lt;/li&gt;\n&lt;li&gt;IgnorePatternWhitespace (not necessary if you collapse regex and remove all whitespace)&lt;/li&gt;\n&lt;li&gt;IgnoreCase (not necessary)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Regular Expression Explained (inline)&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?=&amp;lt;ul\\s+id=&quot;matchMe&quot;\\s+type=&quot;square&quot;\\s*&amp;gt;) # match start with &amp;lt;ul id=&quot;matchMe&quot;...\n(?&amp;gt;                                        # atomic group / don&apos;t backtrack (faster)\n   &amp;lt;!-- .*? --&amp;gt;                 |          # match xml / html comment\n   &amp;lt;[^&amp;gt;]*/&amp;gt;                     |          # self closing tag\n   (?&amp;lt;opentag&amp;gt;&amp;lt;(?!/)[^&amp;gt;]*[^/]&amp;gt;) |          # push opening xml tag\n   (?&amp;lt;-opentag&amp;gt;&amp;lt;/[^&amp;gt;]*[^/]&amp;gt;)    |          # pop closing xml tag\n   [^&amp;lt;&amp;gt;]*                                  # something between tags\n)*                                         # match as many xml tags as possible\n(?(opentag)(?!))                           # ensure no &apos;opentag&apos; groups are on stack\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can try this at &lt;a href=&quot;http://derekslager.com/blog/posts/2007/09/a-better-dotnet-regular-expression-tester.ashx&quot; rel=&quot;noreferrer&quot;&gt;A Better .NET Regular Expression Tester&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I used the sample source of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;matchMe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;square&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;stuff...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;more stuff&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;still more&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Another &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;ul&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;, oh my!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This found the match:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;matchMe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;square&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;stuff...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;more stuff&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;still more&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Another &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;ul&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;, oh my!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;although it actually came out like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;matchMe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;square&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;stuff...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;more stuff&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;still more&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;                         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Another &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;ul&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;, oh my!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;                         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lastly, I really enjoyed Jeff Atwood&apos;s article:  &lt;a href=&quot;https://blog.codinghorror.com/parsing-html-the-cthulhu-way/&quot; rel=&quot;noreferrer&quot;&gt;Parsing Html The Cthulhu Way&lt;/a&gt;. Funny enough, it cites the answer to this question that currently has over 4k votes.&lt;/p&gt;\n    ","\n&lt;p&gt;I suggest using &lt;a href=&quot;http://querypath.org/&quot; rel=&quot;noreferrer&quot;&gt;QueryPath&lt;/a&gt; for parsing XML and HTML in PHP.  It&apos;s basically much the same syntax as jQuery, only it&apos;s on the server side.&lt;/p&gt;\n    ","\n&lt;p&gt;While the answers that you can&apos;t parse HTML with regexes are correct, they don&apos;t apply here. The OP just wants to parse one HTML tag with regexes, and that is something that can be done with a regular expression.&lt;/p&gt;\n\n&lt;p&gt;The suggested regex is wrong, though:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-z]+) *[^/]*?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you add something to the regex, by backtracking it can be forced to match silly things like &lt;code&gt;&amp;lt;a &amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;[^/]&lt;/code&gt; is too permissive. Also note that &lt;code&gt;&amp;lt;space&amp;gt;*[^/]*&lt;/code&gt; is redundant, because the &lt;code&gt;[^/]*&lt;/code&gt; can also match spaces.&lt;/p&gt;\n\n&lt;p&gt;My suggestion would be&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-z]+)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;(?&amp;lt;! ... )&lt;/code&gt; is (in Perl regexes) the negative look-behind. It reads &quot;a &amp;lt;, then a word, then anything that&apos;s not a &amp;gt;, the last of which may not be a /, followed by &amp;gt;&quot;.&lt;/p&gt;\n\n&lt;p&gt;Note that this allows things like &lt;code&gt;&amp;lt;a/ &amp;gt;&lt;/code&gt; (just like the original regex), so if you want something more restrictive, you need to build a regex to match attribute pairs separated by spaces.&lt;/p&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([^\\s]+)(\\s[^&amp;gt;]*?)?(?&amp;lt;!/)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is similar to yours, but the last &lt;code&gt;&amp;gt;&lt;/code&gt; must not be after a slash, and also accepts &lt;code&gt;h1&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Sun Tzu, an ancient Chinese strategist, general, and philosopher, said:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It is said that if you know your enemies and know yourself, you can win a hundred battles without a single loss.\n  If you only know yourself, but not your opponent, you may win or may lose.\n  If you know neither yourself nor your enemy, you will always endanger yourself.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In this case your enemy is HTML and you are either yourself or regex.  You might even be Perl with irregular regex. Know HTML.  Know yourself.&lt;/p&gt;\n\n&lt;p&gt;I have composed a haiku describing the nature of HTML.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;HTML has\ncomplexity exceeding\nregular language.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have also composed a haiku describing the nature of regex in Perl.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;The regex you seek\nis defined within the phrase\n&amp;lt;([a-zA-Z]+)(?:[^&amp;gt;]*[^/]*)?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php\n$selfClosing = explode(&apos;,&apos;, &apos;area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed&apos;);\n\n$html = &apos;\n&amp;lt;p&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;foo&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;hr/&amp;gt;\n&amp;lt;br/&amp;gt;\n&amp;lt;div&amp;gt;name&amp;lt;/div&amp;gt;&apos;;\n\n$dom = new DOMDocument();\n$dom-&amp;gt;loadHTML($html);\n$els = $dom-&amp;gt;getElementsByTagName(&apos;*&apos;);\nforeach ( $els as $el ) {\n    $nodeName = strtolower($el-&amp;gt;nodeName);\n    if ( !in_array( $nodeName, $selfClosing ) ) {\n        var_dump( $nodeName );\n    }\n}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;string(4) &quot;html&quot;\nstring(4) &quot;body&quot;\nstring(1) &quot;p&quot;\nstring(1) &quot;a&quot;\nstring(3) &quot;div&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically just define the element node names that are self closing, load the whole html string into a DOM library, grab all elements, loop through and filter out ones which aren&apos;t self closing and operate on them.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m sure you already know by now that you shouldn&apos;t use regex for this purpose.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know your exact need for this, but if you are also using .NET, couldn&apos;t you use &lt;a href=&quot;http://www.codeplex.com/htmlagilitypack&quot; rel=&quot;noreferrer&quot;&gt;Html Agility Pack&lt;/a&gt;?&lt;/p&gt;\n\n&lt;p&gt;Excerpt:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;It is a .NET code library that allows\n  you to parse &quot;out of the web&quot; HTML\n  files. The parser is very tolerant\n  with &quot;real world&quot; malformed HTML.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You want the first &lt;code&gt;&amp;gt;&lt;/code&gt; not preceded by a &lt;code&gt;/&lt;/code&gt;.  Look &lt;a href=&quot;http://www.regular-expressions.info/lookaround.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; for details on how to do that.  It&apos;s referred to as negative lookbehind.&lt;/p&gt;\n\n&lt;p&gt;However, a naïve implementation of that will end up matching &lt;code&gt;&amp;lt;bar/&amp;gt;&amp;lt;/foo&amp;gt;&lt;/code&gt; in this example document&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bar&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can you provide a little more information on the problem you&apos;re trying to solve?  Are you iterating through tags programatically?&lt;/p&gt;\n    ","\n&lt;p&gt;The W3C explains parsing in a pseudo regexp form:&lt;br&gt;\n&lt;a href=&quot;http://www.w3.org/TR/REC-xml-names/#ns-using&quot; rel=&quot;noreferrer&quot;&gt;W3C Link&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Follow the var links for &lt;code&gt;QName&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, and &lt;code&gt;Attribute&lt;/code&gt; to get a clearer picture.&lt;br&gt;\nBased on that you can create a pretty good regexp to handle things like stripping tags.&lt;/p&gt;\n    ","\n&lt;p&gt;If you need this for PHP:&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://www.php.net/manual/en/function.dom-import-simplexml.php&quot; rel=&quot;noreferrer&quot;&gt;PHP DOM&lt;/a&gt; &lt;a href=&quot;http://php.net/manual/en/class.domdocument.php&quot; rel=&quot;noreferrer&quot;&gt;functions&lt;/a&gt; won&apos;t work properly unless it is properly formatted XML. No matter how much better their use is for the rest of mankind.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://simplehtmldom.sourceforge.net/&quot; rel=&quot;noreferrer&quot;&gt;simplehtmldom&lt;/a&gt; is good, but I found it a bit buggy, and it is is quite memory heavy [Will crash on large pages.]&lt;/p&gt;\n\n&lt;p&gt;I have never used &lt;a href=&quot;http://querypath.org/&quot; rel=&quot;noreferrer&quot;&gt;querypath&lt;/a&gt;, so can&apos;t comment on its usefulness. &lt;/p&gt;\n\n&lt;p&gt;Another one to try is my &lt;a href=&quot;http://github.com/siteroller/domparser&quot; rel=&quot;noreferrer&quot;&gt;DOMParser&lt;/a&gt; which is very light on resources and I&apos;ve been using happily for a while. Simple to learn &amp;amp; powerful.&lt;/p&gt;\n\n&lt;p&gt;For Python and Java, similar links were posted.&lt;/p&gt;\n\n&lt;p&gt;For the downvoters - I only wrote my class when the XML parsers proved unable to withstand real use. Religious downvoting just prevents useful answers from being posted - keep things within perspective of the question, please.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s the solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php\n// here&apos;s the pattern:\n$pattern = &apos;/&amp;lt;(\\w+)(\\s+(\\w+)\\s*\\=\\s*(\\&apos;|&quot;)(.*?)\\\\4\\s*)*\\s*(\\/&amp;gt;|&amp;gt;)/&apos;;\n\n// a string to parse:\n$string = &apos;Hello, try clicking &amp;lt;a href=&quot;#paragraph&quot;&amp;gt;here&amp;lt;/a&amp;gt;\n    &amp;lt;br/&amp;gt;and check out.&amp;lt;hr /&amp;gt;\n    &amp;lt;h2&amp;gt;title&amp;lt;/h2&amp;gt;\n    &amp;lt;a name =&quot;paragraph&quot; rel= &quot;I\\&apos;m an anchor&quot;&amp;gt;&amp;lt;/a&amp;gt;\n    Fine, &amp;lt;span title=\\&apos;highlight the &quot;punch&quot;\\&apos;&amp;gt;thanks&amp;lt;span&amp;gt;.\n    &amp;lt;div class = &quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;\n    &amp;lt;br&amp;gt;&apos;;\n\n// let&apos;s get the occurrences:\npreg_match_all($pattern, $string, $matches, PREG_PATTERN_ORDER);\n\n// print the result:\nprint_r($matches[0]);\n?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To test it deeply, I entered in the string auto-closing tags like:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&amp;lt;hr /&amp;gt;&lt;/li&gt;\n&lt;li&gt;&amp;lt;br/&amp;gt;&lt;/li&gt;\n&lt;li&gt;&amp;lt;br&amp;gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I also entered tags with:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;one attribute&lt;/li&gt;\n&lt;li&gt;more than one attribute&lt;/li&gt;\n&lt;li&gt;attributes which value is bound either into &lt;strong&gt;single quotes&lt;/strong&gt; or into &lt;strong&gt;double quotes&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;attributes containing single quotes when the delimiter is a double quote and vice versa&lt;/li&gt;\n&lt;li&gt;&quot;unpretty&quot; attributes with a space before the &quot;=&quot; symbol, after it and both before and after it.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Should you find something which does not work in the proof of concept above, I am available in analyzing the code to improve my skills.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&amp;lt;EDIT&amp;gt;&lt;/strong&gt;\nI forgot that the question from the user was to avoid the parsing of self-closing tags.\nIn this case the pattern is simpler, turning into this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$pattern = &apos;/&amp;lt;(\\w+)(\\s+(\\w+)\\s*\\=\\s*(\\&apos;|&quot;)(.*?)\\\\4\\s*)*\\s*&amp;gt;/&apos;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The user @ridgerunner noticed that the pattern does not allow &lt;strong&gt;unquoted attributes&lt;/strong&gt; or &lt;strong&gt;attributes with no value&lt;/strong&gt;. In this case a fine tuning brings us the following pattern:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$pattern = &apos;/&amp;lt;(\\w+)(\\s+(\\w+)(\\s*\\=\\s*(\\&apos;|&quot;|)(.*?)\\\\5\\s*)?)*\\s*&amp;gt;/&apos;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&amp;lt;/EDIT&amp;gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h1&gt;Understanding the pattern&lt;/h1&gt;\n\n&lt;p&gt;If someone is interested in learning more about the pattern, I provide some line:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;the first sub-expression (\\w+) matches the tag name&lt;/li&gt;\n&lt;li&gt;the second sub-expression contains the pattern of an attribute. It is composed by:\n\n&lt;ol&gt;\n&lt;li&gt;one or more whitespaces \\s+&lt;/li&gt;\n&lt;li&gt;the name of the attribute (\\w+)&lt;/li&gt;\n&lt;li&gt;zero or more whitespaces \\s* (it is possible or not, leaving blanks here)&lt;/li&gt;\n&lt;li&gt;the &quot;=&quot; symbol&lt;/li&gt;\n&lt;li&gt;again, zero or more whitespaces&lt;/li&gt;\n&lt;li&gt;the delimiter of the attribute value, a single or double quote (&apos;|&quot;). In the pattern, the single quote is escaped because it coincides with the PHP string delimiter. This sub-expression is captured with the parentheses so it can be referenced again to parse the closure of the attribute, that&apos;s why it is very important.&lt;/li&gt;\n&lt;li&gt;the value of the attribute, matched by &lt;em&gt;almost&lt;/em&gt; anything: (.*?); in this specific syntax, using the &lt;strong&gt;greedy match&lt;/strong&gt; (the question mark after the asterisk) the RegExp engine enables a &quot;look-ahead&quot;-like operator, which matches anything but what follows this sub-expression&lt;/li&gt;\n&lt;li&gt;here comes the fun: the \\4 part is a &lt;strong&gt;backreference operator&lt;/strong&gt;, which refers to a sub-expression defined before in the pattern, in this case, I am referring to the fourth sub-expression, which is the first attribute delimiter found&lt;/li&gt;\n&lt;li&gt;zero or more whitespaces \\s*&lt;/li&gt;\n&lt;li&gt;the attribute sub-expression ends here, with the specification of zero or more possible occurrences, given by the asterisk.&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;Then, since a tag may end with a whitespace before the &quot;&amp;gt;&quot; symbol, zero or more whitespaces are matched with the \\s* subpattern.&lt;/li&gt;\n&lt;li&gt;The tag to match may end with a simple &quot;&amp;gt;&quot; symbol, or a possible XHTML closure, which makes use of the slash before it: (/&amp;gt;|&amp;gt;). The slash is, of course, escaped since it coincides with the regular expression delimiter.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Small tip: to better analyze this code it is necessary looking at the source code generated since I did not provide any HTML special characters escaping.&lt;/p&gt;\n    ","\n&lt;p&gt;Whenever I need to quickly extract something from an HTML document, I use Tidy to convert it to XML and then use XPath or XSLT to get what I need.\nIn your case, something like this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;//p/a[@href=&apos;foo&apos;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I used a open source tool called &lt;a href=&quot;http://htmlparser.sourceforge.net/&quot;&gt;HTMLParser&lt;/a&gt; before. It&apos;s designed to parse HTML in various ways and serves the purpose quite well. It can parse HTML as different treenode and you can easily use its API to get attributes out of the node. Check it out and see if this can help you.&lt;/p&gt;\n    ","\n&lt;p&gt;I like to parse HTML with regular expressions. I don&apos;t attempt to parse idiot HTML that is deliberately broken. This code is my main parser (Perl edition):&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$_ = join &quot;&quot;,&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;STDIN&lt;/span&gt;&amp;gt;&lt;/span&gt;; tr/\\n\\r \\t/ /s; s/&amp;lt;/\\n&amp;lt;/g; s/&amp;gt;/&amp;gt;\\n/g; s/\\n ?\\n/\\n/g;\ns/^ ?\\n//s; s/ $//s; print\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s called &lt;em&gt;htmlsplit&lt;/em&gt;, splits the HTML into lines, with one tag or chunk of text on each line. The lines can then be processed further with other text tools and scripts, such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot; rel=&quot;noreferrer&quot;&gt;grep&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Sed&quot; rel=&quot;noreferrer&quot;&gt;sed&lt;/a&gt;, Perl, etc. I&apos;m not even joking :) Enjoy.&lt;/p&gt;\n&lt;p&gt;It is simple enough to rejig my slurp-everything-first Perl script into a nice streaming thing, if you wish to process enormous web pages. But it&apos;s not really necessary.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://sam.nipl.net/code/nipl-tools/bin/htmlsplit&quot; rel=&quot;noreferrer&quot;&gt;HTML Split&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Some better regular expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;/(&amp;lt;.*?&amp;gt;|[^&amp;lt;]+)\\s*/g    # Get tags and text\n/(\\w+)=&quot;(.*?)&quot;/g       # Get attibutes\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;They are good for XML / XHTML.&lt;/p&gt;\n&lt;p&gt;With minor variations, it can cope with messy HTML... or convert the HTML -&amp;gt; XHTML first.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The best way to write regular expressions is in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Lex_%28software%29&quot; rel=&quot;noreferrer&quot;&gt;Lex&lt;/a&gt; / &lt;a href=&quot;http://en.wikipedia.org/wiki/Yacc&quot; rel=&quot;noreferrer&quot;&gt;Yacc&lt;/a&gt; style, not as opaque one-liners or commented multi-line monstrosities. I didn&apos;t do that here, yet; these ones barely need it.&lt;/p&gt;\n    ","\n&lt;p&gt;There are some nice regexes for replacing HTML with BBCode &lt;a href=&quot;http://www.garyshood.com/htmltobb/source.txt&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;. For all you nay-sayers, note that he&apos;s not trying to fully parse HTML, just to sanitize it. He can probably afford to kill off tags that his simple &quot;parser&quot; can&apos;t understand.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$store =~ s/http:/http:\\/\\//gi;\n$store =~ s/https:/https:\\/\\//gi;\n$baseurl = $store;\n\nif (!$query-&amp;gt;param(&quot;ascii&quot;)) {\n    $html =~ s/\\s\\s+/\\n/gi;\n    $html =~ s/&amp;lt;pre(.*?)&amp;gt;(.*?)&amp;lt;\\/pre&amp;gt;/\\[code]$2\\[\\/code]/sgmi;\n}\n\n$html =~ s/\\n//gi;\n$html =~ s/\\r\\r//gi;\n$html =~ s/$baseurl//gi;\n$html =~ s/&amp;lt;h[1-7](.*?)&amp;gt;(.*?)&amp;lt;\\/h[1-7]&amp;gt;/\\n\\[b]$2\\[\\/b]\\n/sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;/\\n\\n/gi;\n$html =~ s/&amp;lt;br(.*?)&amp;gt;/\\n/gi;\n$html =~ s/&amp;lt;textarea(.*?)&amp;gt;(.*?)&amp;lt;\\/textarea&amp;gt;/\\[code]$2\\[\\/code]/sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/b&amp;gt;/\\[b]$1\\[\\/b]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/i&amp;gt;/\\[i]$1\\[\\/i]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/u&amp;gt;/\\[u]$1\\[\\/u]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/em&amp;gt;/\\[i]$1\\[\\/i]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/strong&amp;gt;/\\[b]$1\\[\\/b]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cite&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/cite&amp;gt;/\\[i]$1\\[\\/i]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;(.*?)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/font&amp;gt;/\\[color=$1]$2\\[\\/color]/sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;(.*?)&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/font&amp;gt;/\\[color=$1]$2\\[\\/color]/sgmi;\n$html =~ s/&amp;lt;link(.*?)&amp;gt;//gi;\n$html =~ s/&amp;lt;li(.*?)&amp;gt;(.*?)&amp;lt;\\/li&amp;gt;/\\[\\*]$2/gi;\n$html =~ s/&amp;lt;ul(.*?)&amp;gt;/\\[list]/gi;\n$html =~ s/&amp;lt;\\/ul&amp;gt;/\\[\\/list]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;/\\n/gi;\n$html =~ s/&amp;lt;\\/div&amp;gt;/\\n/gi;\n$html =~ s/&amp;lt;td(.*?)&amp;gt;/ /gi;\n$html =~ s/&amp;lt;tr(.*?)&amp;gt;/\\n/gi;\n\n$html =~ s/&amp;lt;img(.*?)src=&quot;(.*?)&quot;(.*?)&amp;gt;/\\[img]$baseurl\\/$2\\[\\/img]/gi;\n$html =~ s/&amp;lt;a(.*?)href=&quot;(.*?)&quot;(.*?)&amp;gt;(.*?)&amp;lt;\\/a&amp;gt;/\\[url=$baseurl\\/$2]$4\\[\\/url]/gi;\n$html =~ s/\\[url=$baseurl\\/http:\\/\\/(.*?)](.*?)\\[\\/url]/\\[url=http:\\/\\/$1]$2\\[\\/url]/gi;\n$html =~ s/\\[img]$baseurl\\/http:\\/\\/(.*?)\\[\\/img]/\\[img]http:\\/\\/$1\\[\\/img]/gi;\n\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/head&amp;gt;//sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;object&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/object&amp;gt;//sgmi;\n$html =~ s/&amp;lt;script(.*?)&amp;gt;(.*?)&amp;lt;\\/script&amp;gt;//sgmi;\n$html =~ s/&amp;lt;style(.*?)&amp;gt;(.*?)&amp;lt;\\/style&amp;gt;//sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/title&amp;gt;//sgmi;\n$html =~ s/&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--(.*?)--&amp;gt;&lt;/span&gt;/\\n/sgmi;\n\n$html =~ s/\\/\\//\\//gi;\n$html =~ s/http:\\//http:\\/\\//gi;\n$html =~ s/https:\\//https:\\/\\//gi;\n\n$html =~ s/&amp;lt;(?:[^&amp;gt;&apos;&quot;]*|([&apos;&quot;]).*?\\1)*&amp;gt;//gsi;\n$html =~ s/\\r\\r//gi;\n$html =~ s/\\[img]\\//\\[img]/gi;\n$html =~ s/\\[url=\\//\\[url=/gi;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;About the question of the regular expression methods to parse (x)HTML, the answer to all of the ones who spoke about some limits is: you have not been trained enough to rule the force of this powerful weapon, since &lt;strong&gt;nobody&lt;/strong&gt; here spoke about &lt;strong&gt;recursion&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;A regular expression-agnostic colleague notified me this discussion, which is not certainly the first on the web about this old and hot topic.&lt;/p&gt;\n&lt;p&gt;After reading some posts, the first thing I did was looking for the &quot;?R&quot; string in this thread. The second was to search about &quot;recursion&quot;.&lt;/p&gt;\n&lt;p&gt;No, holy cow, no match found. Since nobody mentioned the main mechanism a parser is built onto, I was soon aware that nobody got the point.&lt;/p&gt;\n&lt;p&gt;If an (x)HTML parser needs recursion, a regular expression parser without recursion is not enough for the purpose. It&apos;s a simple construct.&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;black art of regular expressions is hard to master&lt;/strong&gt;, so maybe there are further possibilities we left out while trying and testing our personal solution to capture the whole web in one hand... Well, I am sure about it :)&lt;/p&gt;\n&lt;p&gt;Here&apos;s the magic pattern:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$pattern = &quot;/&amp;lt;([\\w]+)([^&amp;gt;]*?)(([\\s]*\\/&amp;gt;)|(&amp;gt;((([^&amp;lt;]*?|&amp;lt;\\!\\-\\-.*?\\-\\-&amp;gt;)|(?R))*)&amp;lt;\\/\\\\1[\\s]*&amp;gt;))/s&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Just try it. It&apos;s written as a PHP string, so the &quot;s&quot; modifier makes classes include newlines.&lt;/p&gt;\n&lt;p&gt;Here&apos;s a &lt;strong&gt;sample note on the PHP manual&lt;/strong&gt; I wrote in January: &lt;a href=&quot;http://php.net/manual/en/regexp.reference.recursive.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;(Take care. In that note I wrongly used the &quot;m&quot; modifier; it should be erased, notwithstanding it is discarded by the regular expression engine, since no &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; anchoring was used).&lt;/p&gt;\n&lt;p&gt;Now, we could speak about the limits of this method from a more informed point of view:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;according to the specific implementation of the regular expression engine, recursion may have a limit in the &lt;strong&gt;number of nested patterns parsed&lt;/strong&gt;, but it depends on the language used&lt;/li&gt;\n&lt;li&gt;although corrupted, (x)HTML does not drive into severe errors. It is not &lt;em&gt;sanitized&lt;/em&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Anyhow, it is only a regular expression pattern, but it discloses the possibility to develop of a lot of powerful implementations.&lt;/p&gt;\n&lt;p&gt;I wrote this pattern to power the &lt;em&gt;recursive descent parser&lt;/em&gt; of a template engine I built in my framework, and performances are really great, both in execution times or in memory usage (nothing to do with other template engines which use the same syntax).&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;\\s*(\\w+)[^/&amp;gt;]*&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The parts explained:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;: Starting character&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;\\s*&lt;/code&gt;: It may have whitespaces before the tag name (ugly, but possible).&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;(\\w+)&lt;/code&gt;: tags can contain letters and numbers (h1). Well, &lt;code&gt;\\w&lt;/code&gt; also matches &apos;_&apos;, but it does not hurt I guess. If curious, use ([a-zA-Z0-9]+) instead.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;[^/&amp;gt;]*&lt;/code&gt;: Anything except &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; until closing &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;: Closing &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;UNRELATED&lt;/h3&gt;\n&lt;p&gt;And to the fellows, who underestimate regular expressions, saying they are only as powerful as regular languages:&lt;/p&gt;\n&lt;p&gt;a&lt;sup&gt;n&lt;/sup&gt;ba&lt;sup&gt;n&lt;/sup&gt;ba&lt;sup&gt;n&lt;/sup&gt; which is not regular and not even context free, can be matched with &lt;code&gt;^(a+)b\\1b\\1$&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Backreferencing &lt;a href=&quot;http://en.wiktionary.org/wiki/FTW&quot; rel=&quot;noreferrer&quot;&gt;FTW&lt;/a&gt;!&lt;/p&gt;\n    ","\n&lt;p&gt;As many people have already pointed out, HTML is not a regular language which can make it very difficult to parse. My solution to this is to turn it into a regular language using a tidy program and then to use an XML parser to consume the results. There are a lot of good options for this. My program is written using Java with the &lt;a href=&quot;http://jtidy.sourceforge.net/&quot; rel=&quot;noreferrer&quot;&gt;jtidy&lt;/a&gt; library to turn the HTML into XML and then Jaxen to xpath into the result.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re simply trying to find those tags (without ambitions of parsing) try this regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;/&amp;lt;[^/]*?&amp;gt;/g\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wrote it in 30 seconds, and tested here:\n&lt;a href=&quot;http://gskinner.com/RegExr/&quot;&gt;http://gskinner.com/RegExr/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It matches the types of tags you mentioned, while ignoring the types you said you wanted to ignore.&lt;/p&gt;\n    ","\n&lt;p&gt;It seems to me you&apos;re trying to match tags without a &quot;/&quot; at the end. Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-zA-Z][a-zA-Z0-9]*)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s true that when programming it&apos;s usually best to use dedicated parsers and APIs instead of regular expressions when dealing with HTML, especially if accuracy is paramount (e.g., if your processing might have security implications). However, I dont ascribe to a dogmatic view that XML-style markup should never be processed with regular expressions. There are cases when regular expressions are a great tool for the job, such as when making one-time edits in a text editor, fixing broken XML files, or dealing with file formats that look like but arent quite XML. There are some issues to be aware of, but they&apos;re not insurmountable or even necessarily relevant.&lt;/p&gt;\n\n&lt;p&gt;A simple regex like &lt;code&gt;&amp;lt;([^&amp;gt;&quot;&apos;]|&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;)*&amp;gt;&lt;/code&gt; is usually good enough, in cases such as those I just mentioned. It&apos;s a naive solution, all things considered, but it does correctly allow unencoded &lt;code&gt;&amp;gt;&lt;/code&gt; symbols in attribute values. If you&apos;re looking for, e.g., a &lt;code&gt;table&lt;/code&gt; tag, you could adapt it as &lt;code&gt;&amp;lt;/?table\\b([^&amp;gt;&quot;&apos;]|&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;)*&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just to give a sense of what a more &quot;advanced&quot; HTML regex would look like, the following does a fairly respectable job of emulating real-world browser behavior and the HTML5 parsing algorithm:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;/?([A-Za-z][^\\s&amp;gt;/]*)(?:=\\s*(?:&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|[^\\s&amp;gt;]+)|[^&amp;gt;])*(?:&amp;gt;|$)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following matches a fairly strict definition of XML tags (although it doesn&apos;t account for the full set of Unicode characters allowed in XML names):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;(?:([_:A-Z][-.:\\w]*)(?:\\s+[_:A-Z][-.:\\w]*\\s*=\\s*(?:&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;))*\\s*/?|/([_:A-Z][-.:\\w]*)\\s*)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Granted, these don&apos;t account for surrounding context and a few edge cases, but even such things could be dealt with if you really wanted to (e.g., by searching between the matches of another regex).&lt;/p&gt;\n\n&lt;p&gt;At the end of the day, use the most appropriate tool for the job, even in the cases when that tool happens to be a regex.&lt;/p&gt;\n    ","\n&lt;p&gt;Although it&apos;s not suitable and effective to use regular expressions for that purpose sometimes regular expressions provide quick solutions for simple match problems and in my view it&apos;s not that horrbile to use regular expressions for trivial works. &lt;/p&gt;\n\n&lt;p&gt;There is a &lt;a href=&quot;http://blog.stevenlevithan.com/archives/match-innermost-html-element&quot; rel=&quot;noreferrer&quot;&gt;definitive blog post&lt;/a&gt; about matching innermost HTML elements written by Steven Levithan.&lt;/p&gt;\n    ","\n&lt;p&gt;If you only want the tag names, it should be possible to do this via a regular expression.&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-zA-Z]+)(?:[^&amp;gt;]*[^/] *)?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;should do what you need. But I think the solution of &quot;moritz&quot; is already fine. I didn&apos;t see it in the beginning.&lt;/p&gt;\n&lt;p&gt;For all downvoters: In some cases it just makes sense to use a regular expression, because it can be the easiest and quickest solution. I agree that in general you should not parse HTML with regular expressions.&lt;/p&gt;\n&lt;p&gt;But regular expressions can be a very powerful tool when you have a subset of HTML where you know the format and you just want to extract some values. I did that hundreds of times and almost always achieved what I wanted.&lt;/p&gt;\n    "]},"randomTags":[{"name":"outer-join","slug":"outer-join"},{"name":"dom-traversal","slug":"dom-traversal"},{"name":"assembly","slug":"assembly"},{"name":"html-table","slug":"html-table"},{"name":"asynchronous","slug":"asynchronous"},{"name":"polymorphism","slug":"polymorphism"},{"name":"idioms","slug":"idioms"},{"name":"redirect","slug":"redirect"},{"name":"rest","slug":"rest"},{"name":"prop","slug":"prop"},{"name":"promise","slug":"promise"},{"name":"html-parsing","slug":"html-parsing"},{"name":"lifetime","slug":"lifetime"},{"name":"cross-browser","slug":"cross-browser"},{"name":"opengl","slug":"opengl"},{"name":"quoting","slug":"quoting"},{"name":"date-conversion","slug":"date-conversion"},{"name":"concatenation","slug":"concatenation"},{"name":"bounded-wildcard","slug":"bounded-wildcard"},{"name":"assignment-operator","slug":"assignment-operator"}]},"__N_SSG":true}