{"pageProps":{"data":{"count":1,"rows":[{"id":600,"title":"How to generate all permutations of a list","slug":"how-to-generate-all-permutations-of-a-list-1657388537371","postType":"QUESTION","createdAt":"2022-07-09T17:42:17.000Z","updatedAt":"2022-07-09T17:42:17.000Z","tags":[{"id":2850,"name":"combinatorics","slug":"combinatorics","createdAt":"2022-07-09T17:42:17.000Z","updatedAt":"2022-07-09T17:42:17.000Z","Questions_Tags":{"questionId":600,"tagId":2850}}]}]},"slug":"combinatorics","page":1,"answers":{"600":["\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.permutations&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;itertools.permutations&lt;/code&gt;&lt;/a&gt; from the &lt;strong&gt;standard library&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Adapted from &lt;a href=&quot;http://code.activestate.com/recipes/252178/&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; is a demonstration of how &lt;code&gt;itertools.permutations&lt;/code&gt; might be implemented:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elements&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(elements) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; elements\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; perm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutations(elements[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(elements)):\n            &lt;span class=&quot;hljs-comment&quot;&gt;# nb elements[0:1] works in both string and list contexts&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; perm[:i] + elements[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + perm[i:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A couple of alternative approaches are listed in the documentation of &lt;code&gt;itertools.permutations&lt;/code&gt;. Here&apos;s one:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, r=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# permutations(&apos;ABCD&apos;, 2) --&amp;gt; AB AC AD BA BC BD CA CB CD DA DB DC&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# permutations(range(3)) --&amp;gt; 012 021 102 120 201 210&lt;/span&gt;\n    pool = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(iterable)\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(pool)\n    r = n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r &amp;gt; n:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    indices = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n)\n    cycles = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n, n-r, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(pool[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices[:r])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; n:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(r)):\n            cycles[i] -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; cycles[i] == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n                indices[i:] = indices[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] + indices[i:i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n                cycles[i] = n - i\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                j = cycles[i]\n                indices[i], indices[-j] = indices[-j], indices[i]\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(pool[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices[:r])\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And another, based on &lt;code&gt;itertools.product&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, r=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    pool = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(iterable)\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(pool)\n    r = n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; indices &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n), repeat=r):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(indices)) == r:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(pool[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For &lt;a href=&quot;http://docs.python.org/dev/whatsnew/2.6.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python 2.6&lt;/a&gt; onwards:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\nitertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This returns as a generator.  Use &lt;code&gt;list(permutations(xs))&lt;/code&gt; to return as a list.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;The following code with Python 2.6 and above ONLY&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;First, import &lt;code&gt;itertools&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Permutation (order matters):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Combination (order does NOT matter):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.combinations(&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Cartesian product (with several iterables):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Cartesian product (with one iterable and itself):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], repeat=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;head, tail=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(head) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(tail)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(head)):\n            permutations(head[:i] + head[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], tail + head[i])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;called as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;permutations(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k == &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a):\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(k, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)):\n         a[k], a[i] = a[i] ,a[k]\n         perm(a, k+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n         a[k], a[i] = a[i], a[k]\n\nperm([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As I&apos;m swapping the content of the list it&apos;s required a mutable sequence type as input. E.g. &lt;code&gt;perm(list(&quot;ball&quot;))&lt;/code&gt; will work and &lt;code&gt;perm(&quot;ball&quot;)&lt;/code&gt; won&apos;t because you can&apos;t change a string. &lt;/p&gt;\n\n&lt;p&gt;This Python implementation is inspired by the algorithm presented in the book &lt;em&gt;Computer Algorithms by Horowitz, Sahni and Rajasekeran&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This solution implements a generator, to avoid holding all the permutations on memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt; (orig_list):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(orig_list, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        orig_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(orig_list)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; orig_list\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(orig_list) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(orig_list):\n        new_list = orig_list[:]\n        pos = new_list.index(n)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt;(new_list[pos])\n        new_list.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; resto &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutations(new_list[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; new_list[:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + resto &amp;lt;&amp;gt; orig_list:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; new_list[:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + resto\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In a functional style&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addperm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:i] + [x] + l[i:]  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) ]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; perm(l[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; addperm(l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],y) ]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; perm([ i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following code is an in-place permutation of a given list, implemented as a generator. Since it only returns references to the list, the list should not be modified outside the generator.\nThe solution is non-recursive, so uses low memory. Work well also with multiple copies of elements in the input list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute_in_place&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    a.sort()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n    first = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    last = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        i = last - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            i = i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a[i] &amp;lt; a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:\n                j = last - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (a[i] &amp;lt; a[j]):\n                    j = j - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                a[i], a[j] = a[j], a[i] &lt;span class=&quot;hljs-comment&quot;&gt;# swap the values&lt;/span&gt;\n                r = a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:last]\n                r.reverse()\n                a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:last] = r\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i == first:\n                a.reverse()\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute_in_place(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute_in_place([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A quite obvious way in my opinion might be also:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; l:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[]]\n    res = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n            temp = l[:]\n            temp.remove(e)\n            res.extend([[e] + r &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutList(temp)])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Regular implementation (no yield - will do everything in memory):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPermutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [array]\n    permutations = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)): \n        &lt;span class=&quot;hljs-comment&quot;&gt;# get all perm&apos;s of subarray w/o current item&lt;/span&gt;\n        perms = getPermutations(array[:i] + array[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])  \n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; perms:\n            permutations.append([array[i], *p])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; permutations\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yield implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPermutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; array\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)):\n            perms = getPermutations(array[:i] + array[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; perms:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; [array[i], *p]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The basic idea is to go over all the elements in the array for the 1st position, and then in 2nd position go over all the rest of the elements without the chosen element for the 1st, etc. You can do this with &lt;strong&gt;recursion&lt;/strong&gt;, where the stop criteria is getting to an array of 1 element - in which case you return that array.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/eX3df.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/eX3df.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list2Perm = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;]\nlistPerm = [[a, b, c]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2Perm\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2Perm\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2Perm\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( a != b &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; b != c &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a != c )\n            ]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; listPerm\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[\n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I used an algorithm based on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Factorial_number_system&quot; rel=&quot;noreferrer&quot;&gt;factorial number system&lt;/a&gt;- For a list of length n, you can assemble each permutation item by item, selecting from the items left at each stage. You have n choices for the first item, n-1 for the second, and only one for the last, so you can use the digits of a number in the factorial number system as the indices. This way the numbers 0 through n!-1 correspond to all possible permutations in lexicographic order.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; factorial\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    permutations=[]\n    length=&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(factorial(length)):\n        available=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)\n        newPermutation=[]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; radix &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(length, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            placeValue=factorial(radix-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            index=x/placeValue\n            newPermutation.append(available.pop(index))\n            x-=index*placeValue\n        permutations.append(newPermutation)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; permutations\n\npermutations(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This method is non-recursive, but it is slightly slower on my computer and xrange raises an error when n! is too large to be converted to a C long integer (n=13 for me). It was enough when I needed it, but it&apos;s no itertools.permutations by a long shot.&lt;/p&gt;\n    ","\n&lt;p&gt;Note that this algorithm has an &lt;code&gt;n factorial&lt;/code&gt; time complexity, where &lt;code&gt;n&lt;/code&gt; is the length of the input list&lt;/p&gt;\n\n&lt;p&gt;Print the results on the run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; result\nresult = [] \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;li&lt;/span&gt;):\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; li == [] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; li == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(li) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n    result.append(li[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; result\n    result.pop()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(li)):\n    result.append(li[i])\n    permutation(li[:i] + li[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n    result.pop()    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;permutation([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One can indeed iterate over the first element of each permutation, as in tzwenn&apos;s answer. It is however more efficient to write this solution this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;all_perms&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elements&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(elements) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; elements  &lt;span class=&quot;hljs-comment&quot;&gt;# Only permutation possible = no permutation&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Iteration over the first element in the result permutation:&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index, first_elmt) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(elements):\n            other_elmts = elements[:index]+elements[index+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; permutation &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; all_perms(other_elmts): \n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; [first_elmt] + permutation\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution is about 30&amp;nbsp;% faster, apparently thanks to the recursion ending at &lt;code&gt;len(elements) &amp;lt;= 1&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.\nIt is also much more memory-efficient, as it uses a generator function (through &lt;code&gt;yield&lt;/code&gt;), like in Riccardo Reyes&apos;s solution.&lt;/p&gt;\n    ","\n&lt;p&gt;This is inspired by the Haskell implementation using list comprehension: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[x] + ys &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ys &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutation(delete(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, x))]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, item&lt;/span&gt;):\n    lc = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[:]\n    lc.remove(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lc\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For performance, a numpy solution inspired by &lt;a href=&quot;http://www.kcats.org/csci/464/doc/knuth/fascicles/fasc2b.pdf&quot; rel=&quot;noreferrer&quot;&gt;Knuth&lt;/a&gt;, (p22) :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; empty, uint8\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; factorial\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perms&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    f = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    p = empty((&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, factorial(n)), uint8)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n):\n        p[i, :f] = i\n        p[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, :f] = p[:i, :f]  &lt;span class=&quot;hljs-comment&quot;&gt;# constitution de blocs&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(i):\n            p[:i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, f*(j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):f*(j+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)] = p[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:j+i+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, :f]  &lt;span class=&quot;hljs-comment&quot;&gt;# copie de blocs&lt;/span&gt;\n        f = f*(i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p[:n, :]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Copying large blocs of memory saves time - \nit&apos;s  20x faster than &lt;code&gt;list(itertools.permutations(range(n))&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: %timeit -n10 &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(permutations(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;815&lt;/span&gt; ms per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: %timeit -n100 perms(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) \n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to use the builtin methods such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you can implement permute function yourself&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections.abc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable: Iterable[&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;]&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;]:\n    perms = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(iterable) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {*iterable}\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; index, char &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(iterable):\n        perms.update([char + perm &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; perm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute(iterable[:index] + iterable[index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; perms\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permute(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# {&apos;bca&apos;, &apos;abc&apos;, &apos;cab&apos;, &apos;acb&apos;, &apos;cba&apos;, &apos;bac&apos;}&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permute([&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;]))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# {&apos;123&apos;, &apos;312&apos;, &apos;132&apos;, &apos;321&apos;, &apos;213&apos;, &apos;231&apos;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Disclaimer: shameless plug by package author. :)&lt;/p&gt;\n&lt;p&gt;The &lt;a href=&quot;https://pypi.org/project/trotter/&quot; rel=&quot;nofollow noreferrer&quot;&gt;trotter&lt;/a&gt; package is different from most implementations in that it generates pseudo lists that don&apos;t actually contain permutations but rather describe mappings between permutations and respective positions in an ordering, making it possible to work with very large &apos;lists&apos; of permutations, as shown in &lt;a href=&quot;https://permutation-products.netlify.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this demo&lt;/a&gt; which performs pretty instantaneous operations and look-ups in a pseudo-list &apos;containing&apos; all the permutations of the letters in the alphabet, without using more memory or processing than a typical web page.&lt;/p&gt;\n&lt;p&gt;In any case, to generate a list of permutations, we can do the following.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; trotter\n\nmy_permutations = trotter.Permutations(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_permutations)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_permutations:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre&gt;A pseudo-list containing 6 3-permutations of [1, 2, 3].\n[1, 2, 3]\n[1, 3, 2]\n[3, 1, 2]\n[3, 2, 1]\n[2, 3, 1]\n[2, 1, 3]\n&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ANOTHER APPROACH (without libs)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;]\n\n    result = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;)):\n        first = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;[i]\n        rest = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;[:i] + &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n        rest_permutation = permutation(rest)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rest_permutation:\n            result.append(first + p)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Input can be a string or a list&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permutation(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abcd&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permutation([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    p = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        p.append(i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p[i], end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        i = n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        found = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; found &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; i&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p[i]&amp;lt;p[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:\n                found = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                i = i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        k = n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; p[i]&amp;gt;p[k]:\n            k = k - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        aux = p[i]\n        p[i] = p[k]\n        p[k] = aux\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,(n-i)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            aux = p[i+j]\n            p[i+j] = p[n-j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n            p[n-j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = aux\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; found:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\nperm(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an algorithm that works on a list without creating new intermediate lists similar to Ber&apos;s solution at &lt;a href=&quot;https://stackoverflow.com/a/108651/184528&quot;&gt;https://stackoverflow.com/a/108651/184528&lt;/a&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs, low=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(xs):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; xs\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute(xs, low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(xs)):        \n            xs[low], xs[i] = xs[i], xs[low]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute(xs, low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p        \n            xs[low], xs[i] = xs[i], xs[low]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; p\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can try the code out for yourself here: &lt;a href=&quot;http://repl.it/J9v&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://repl.it/J9v&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The beauty of recursion:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prefix,rest&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rest:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_rest=copy.copy(rest)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_prefix=copy.copy(prefix)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_prefix.append(e)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_rest.remove(e)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(new_rest) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; new_prefix + new_rest\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                     &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             perm(new_prefix,new_rest)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;perm([],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;])\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This algorithm is the most effective one, it avoids of array passing and manipulation in recursive calls, works in Python 2, 3:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    length = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(items)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ix=[]&lt;/span&gt;):\n        do_yield = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(ix) == length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ix: &lt;span class=&quot;hljs-comment&quot;&gt;#avoid duplicates&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; do_yield:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;([items[y] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ix + [i]])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; inner(ix + [i]):\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pzip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c, seq&lt;/span&gt;):\n    result = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(item)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            result.append(item[i:]+c+item[:i])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;line&lt;/span&gt;):\n    seq = [c &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; line]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq) &amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seq\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pzip(seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], perm(seq[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generate all possible permutations&lt;/p&gt;\n\n&lt;p&gt;I&apos;m using python3.4:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calcperm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, size&lt;/span&gt;):\n    result = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;([()])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dummy_idx &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(size):\n        temp = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dummy_lst &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dummy_outcome &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dummy_outcome &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dummy_lst:\n                    new_seq = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(dummy_lst)\n                    new_seq.append(dummy_outcome)\n                    temp.add(&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(new_seq))\n        result = temp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test Cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-comment&quot;&gt;#lst = [&quot;yellow&quot;, &quot;magenta&quot;, &quot;white&quot;, &quot;blue&quot;]&lt;/span&gt;\nseq = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nfinal = calcperm(lst, seq)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(final))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(final)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I see a &lt;em&gt;lot&lt;/em&gt; of iteration going on inside these recursive functions, not exactly &lt;em&gt;pure&lt;/em&gt; recursion...&lt;/p&gt;\n\n&lt;p&gt;so for those of you who cannot abide by even a single loop, here&apos;s a gross, totally unnecessary fully recursive solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;all_insert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, e, i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:i]+[e]+x[i:]] + all_insert(x,e,i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;for_each&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;X, e&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; all_insert(X[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], e) + for_each(X[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:],e) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; X &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; for_each( permute(x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) , x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n\n\nperms = permute([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To save you folks possible hours of searching and experimenting, here&apos;s the non-recursive permutaions solution in Python which also works with Numba (as of v. 0.41):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@numba.njit()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;A, k&lt;/span&gt;):\n    r = [[i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(k):\n        r = [[a] + b &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; A &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; b)==&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r\npermutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To give an impression about performance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%timeit permutations(np.arange(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;243&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;11.1&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\ntime: &lt;span class=&quot;hljs-number&quot;&gt;406&lt;/span&gt; ms\n\n%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations(np.arange(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;15.9&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;8.61&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\ntime: &lt;span class=&quot;hljs-number&quot;&gt;12.9&lt;/span&gt; s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So use this version only if you have to call it from njitted function, otherwise prefer itertools implementation.&lt;/p&gt;\n    ","\n&lt;p&gt;Another solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;flag, k =&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;):\n    N = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(flag)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, N):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; flag[i] != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        flag[i] = k \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k == N:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; flag\n        permutation(flag, k+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        flag[i] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\npermutation([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Anyway we could use &lt;a href=&quot;https://docs.sympy.org/latest/&quot; rel=&quot;nofollow noreferrer&quot;&gt;sympy&lt;/a&gt; library , also support for multiset permutations&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sympy\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sympy.utilities.iterables &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; multiset_permutations\nt = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\np = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(multiset_permutations(t))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Answer is highly inspired by &lt;a href=&quot;https://stackoverflow.com/questions/41210142/get-all-permutations-of-a-numpy-array/41210450&quot;&gt;Get all permutations of a numpy array&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is the asymptotically optimal way O(n*n!) of generating permutations after initial sorting.&lt;/p&gt;\n&lt;p&gt;There are n! permutations at most and hasNextPermutation(..) runs in O(n) time complexity&lt;/p&gt;\n&lt;p&gt;In 3 steps, &lt;br&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Find largest j such that a[j] can be increased&lt;/li&gt;\n&lt;li&gt;Increase a[j] by smallest feasible amount&lt;/li&gt;\n&lt;li&gt;Find lexicogrpahically least way to extend the new a[0..j]&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\nLexicographic permutation generation\n\nconsider example array state of [1,5,6,4,3,2] for sorted [1,2,3,4,5,6]\nafter 56432(treat as number) -&amp;gt;nothing larger than 6432(using 6,4,3,2) beginning with 5\nso 6 is next larger and 2345(least using numbers other than 6)\nso [1, 6,2,3,4,5]\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hasNextPermutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos; Base Condition &apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; ==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Set j = last-2 and find first j such that a[j] &amp;lt; a[j+1]\n    If no such j(j==-1) then we have visited all permutations\n    after this step a[j+1]&amp;gt;=..&amp;gt;=a[len-1] and a[j]&amp;lt;a[j+1]\n\n    a[j]=5 or j=1, 6&amp;gt;5&amp;gt;4&amp;gt;3&amp;gt;2\n    &apos;&apos;&apos;&lt;/span&gt;\n    j = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (j &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; array[j] &amp;gt;= array[j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        j= j-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(j==-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 2 for j {j}  {array}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    decrease l (from n-1 to j) repeatedly until a[j]&amp;lt;a[l]\n    Then swap a[j], a[l]\n    a[l] is the smallest element &amp;gt; a[j] that can follow a[l]...a[j-1] in permutation\n    before swap we have a[j+1]&amp;gt;=..&amp;gt;=a[l-1]&amp;gt;=a[l]&amp;gt;a[j]&amp;gt;=a[l+1]&amp;gt;=..&amp;gt;=a[len-1]\n    after swap -&amp;gt; a[j+1]&amp;gt;=..&amp;gt;=a[l-1]&amp;gt;=a[j]&amp;gt;a[l]&amp;gt;=a[l+1]&amp;gt;=..&amp;gt;=a[len-1]\n\n    a[l]=6 or l=2, j=1 just before swap [1, 5, 6, 4, 3, 2] \n    after swap [1, 6, 5, 4, 3, 2] a[l]=5, a[j]=6\n    &apos;&apos;&apos;&lt;/span&gt;\n    l = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(array[j] &amp;gt;= array[l]):\n        l = l-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 3 for l={l}, j={j} before swap {array}&quot;)&lt;/span&gt;\n    array[j], array[l] = array[l], array[j]\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 3 for l={l} j={j} after swap {array}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Reverse a[j+1...len-1](both inclusive)\n\n    after reversing [1, 6, 2, 3, 4, 5]\n    &apos;&apos;&apos;&lt;/span&gt;\n    array[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;] = &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(array[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;])\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 4 reversing {array}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\narray = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\narray.sort()\n&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)\ncount =&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(array)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\nThe algorithm visits every permutation in lexicographic order\ngenerating one by one\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(hasNextPermutation(array, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(array)\n    count = count +&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# The number of permutations will be n! if no duplicates are present, else less than that&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1,4,3,3,2] -&amp;gt; 5!/2!=60&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Number of permutations: &lt;span class=&quot;hljs-subst&quot;&gt;{count}&lt;/span&gt;&quot;&lt;/span&gt;)\n\n\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"git-revert","slug":"git-revert"},{"name":"managed-bean","slug":"managed-bean"},{"name":"awk","slug":"awk"},{"name":"floating-accuracy","slug":"floating-accuracy"},{"name":"python-3.x","slug":"python-3.x"},{"name":"syntactic-sugar","slug":"syntactic-sugar"},{"name":"string-matching","slug":"string-matching"},{"name":"recursion","slug":"recursion"},{"name":"malloc","slug":"malloc"},{"name":"terminal","slug":"terminal"},{"name":"turbo-c++","slug":"turbo-c++"},{"name":"exception","slug":"exception"},{"name":"side-effects","slug":"side-effects"},{"name":"commandbutton","slug":"commandbutton"},{"name":"closures","slug":"closures"},{"name":"shallow-copy","slug":"shallow-copy"},{"name":"incompatibility","slug":"incompatibility"},{"name":"pivot","slug":"pivot"},{"name":"android-networking","slug":"android-networking"},{"name":"cross-domain","slug":"cross-domain"}]},"__N_SSG":true}