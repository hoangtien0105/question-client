{"pageProps":{"data":{"answer":["\n&lt;blockquote&gt;\n  &lt;p&gt;Integer variables are stored as 16-bit (2-byte) numbers &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/integer-data-type&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Office VBA Reference&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Long (long integer) variables are stored as signed 32-bit (4-byte) numbers&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/long-data-type&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Office VBA Reference&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So, the benefit is in reduced memory space. An Integer takes up half the memory that a Long does. Now, we are talking about 2 bytes, so it&apos;s not going to make a real difference for individual integers, it&apos;s only a concern when you are dealing with TONS of integers (e.g large arrays) and memory usage is critical.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;BUT&lt;/em&gt;&lt;/strong&gt; on a &lt;strong&gt;&lt;em&gt;32&lt;/em&gt;&lt;/strong&gt; bit system, the halved memory usage comes at a performance cost. When the processor actually performs some computation with a 16 bit integer (e.g. incrementing a loop counter), the value silently gets converted to a temporary Long without the benefit of the larger range of numbers to work with. Overflows still happen, and the register that the processor uses to store the values for the calculation will take the same amount of memory (32 bits) either way. &lt;a href=&quot;http://bytes.com/topic/access/answers/211764-looping-variables-integer-vs-long&quot; rel=&quot;noreferrer&quot;&gt;Performance may even be &lt;strong&gt;&lt;em&gt;hurt&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; because the datatype has to be converted (at a very low level).&lt;/p&gt;\n\n&lt;p&gt;Not the reference I was looking for but....&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;My understanding is that the underlying VB engine converts integers to long even if its declared as an integer. Therefore a slight speed decrease can be noted. I have believed this for some time and perhaps thats also why the above statement was made, I didnt ask for reasoning. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.ozgrid.com/forum/showthread.php?t=79584&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;ozgrid forums&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the reference I was looking for.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Short answer, in 32-bit systems 2 byte integers are converted to 4 byte\n  Longs. There really is no other way so that respective bits correctly line\n  up for any form of processing. Consider the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;MsgBox Hex(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = Hex(&lt;span class=&quot;hljs-number&quot;&gt;65535&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;&apos; = True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Obviously -1 does not equal 65535 yet the computer is returning the correct\n  answer, namely\n  &quot;FFFF&quot; = &quot;FFFF&quot;&lt;/p&gt;\n  \n  &lt;p&gt;However had we coerced the -1 to a long first we would have got the right\n  answer (the 65535 being greater than 32k is automatically a long)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;MsgBox Hex(-&lt;span class=&quot;hljs-number&quot;&gt;1&amp;amp;&lt;/span&gt;) = Hex(&lt;span class=&quot;hljs-number&quot;&gt;65535&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;&apos; = False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&quot;FFFFFFFF&quot; = &quot;FFFF&quot;&lt;/p&gt;\n  \n  &lt;p&gt;Generally there is no point in VBA to declare &quot;As Integer&quot; in modern\n  systems, except perhaps for some legacy API&apos;s that expect to receive an\n  Integer.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.pcreview.co.uk/forums/vba-code-optimization-why-using-long-instead-integer-t3606971.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;pcreview forum&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And at long last I found the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/office/aa164506%28v=office.10%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;msdn documentation&lt;/a&gt; I was really truly looking for.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Traditionally, VBA programmers have used integers to hold small\n  numbers, because they required less memory. In recent versions,\n  however, VBA converts all integer values to type Long, even if they&apos;re\n  declared as type Integer. So there&apos;s no longer a performance advantage\n  to using Integer variables; in fact, Long variables may be slightly\n  faster because VBA does not have to convert them.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;sub&gt;To clarify based on the comments: Integers &lt;em&gt;still&lt;/em&gt; require less memory to store - a large array of integers will need significantly less RAM than an Long array with the same dimensions. But because the processor needs to work with 32 bit chunks of memory, VBA converts Integers to Longs &lt;em&gt;temporarily&lt;/em&gt; when it performs calculations&lt;/sub&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;So, in summary, there&apos;s almost no good reason to use an &lt;code&gt;Integer&lt;/code&gt; type these days. &lt;strong&gt;&lt;em&gt;Unless&lt;/em&gt;&lt;/strong&gt; you need to Interop with an old API call that expects a 16 bit int, or you are working with large arrays of small integers and memory is at a premium.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;One thing worth pointing out is that some old API functions may be expecting parameters that are 16-bit (2-byte) Integers and if you are on a 32 bit and trying to pass an Integer (that is already a 4-byte long) by reference it will not work due to difference in length of bytes.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thanks to Vba4All for pointing that out. &lt;/p&gt;\n    ","\n&lt;p&gt;Even though this post is four years old, I was curious about this and ran some tests. The most important thing to note is that a coder should &lt;strong&gt;&lt;em&gt;ALWAYS declare a variable as SOMETHING&lt;/em&gt;&lt;/strong&gt;. Undeclared variables clearly performed the worst (undeclared are technically &lt;code&gt;Variant&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Long&lt;/code&gt; did perform the fastest, so I have to think that Microsoft&apos;s recommendation to always use &lt;code&gt;Long&lt;/code&gt; instead of &lt;code&gt;Integer&lt;/code&gt; makes sense. I&apos;m guessing the same as true with &lt;code&gt;Byte&lt;/code&gt;, but most coders don&apos;t use this.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;RESULTS ON 64 BIT WINDOWS 10 LAPTOP&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ptDyT.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ptDyT.jpg&quot; alt=&quot;Variable Olympics&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Code Used:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; VariableOlymics()\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;Run this macro as many times as you&apos;d like, with an activesheet ready for data&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;in cells B2 to D6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; beginTIME &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, p &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n    trials = &lt;span class=&quot;hljs-number&quot;&gt;1000000000&lt;/span&gt;\n    p = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomBYTE\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomINTEGER\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomLONG\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomDOUBLE\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomUNDECLARED\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomBYTE()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomINTEGER()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomLONG()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomDOUBLE()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomUNDECLARED()\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Finished(i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, timeUSED &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).Offset(i, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            .Value = .Value + trials\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value = .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value + timeUSED\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).FormulaR1C1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;=ROUND(RC[-1]*3600*24,0)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As noted in other answers, the real difference between int and long is the size of its memory space and therefore the size of the number it can hold.&lt;/p&gt;\n\n&lt;p&gt;here is the full documentation on these datatypes\n&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/office/ms474284(v=office.14).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://msdn.microsoft.com/en-us/library/office/ms474284(v=office.14).aspx&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;an &lt;strong&gt;Integer&lt;/strong&gt; is 16 bits and can represent a value between -32,768 and 32,767&lt;/p&gt;\n\n&lt;p&gt;a &lt;strong&gt;Long&lt;/strong&gt; is 32 bits and can represent -2,147,483,648 to 2,147,483,647&lt;/p&gt;\n\n&lt;p&gt;and there is a &lt;strong&gt;LongLong&lt;/strong&gt; which is 64 bits and can handle like 9 pentilion &lt;/p&gt;\n\n&lt;p&gt;One of the most important things to remember on this is that datatypes differ by both language and operating system / platform. In your world of VBA a long is 32 bits, but in c# on a 64 bit processor a long is 64 bits. This can introduce significant confusion.&lt;/p&gt;\n\n&lt;p&gt;Although VBA does not have support for it, when you move to any other language in .net or java or other, I much prefer to use the system datatypes of &lt;strong&gt;int16&lt;/strong&gt;, &lt;strong&gt;int32&lt;/strong&gt; and &lt;strong&gt;int64&lt;/strong&gt; which allows me to b much more transparent about the values that can be held in these datatypes.&lt;/p&gt;\n    ","\n&lt;p&gt;VBA has a lot of historical baggage.  &lt;/p&gt;\n\n&lt;p&gt;An &lt;code&gt;Integer&lt;/code&gt; is 16 bits wide and was a good default numeric type back when 16 bit architecture/word sizes were prevalent.&lt;/p&gt;\n\n&lt;p&gt;A &lt;code&gt;Long&lt;/code&gt; is 32 bits wide and (IMO) should be used wherever possible.&lt;/p&gt;\n    ","\n&lt;p&gt;I have taken @PGSystemTester&apos;s method and updated it to remove some potential variability. By placing the loop in the routines, this removes the time taken to call the routine (which is a lot of time). I have also turned off screen updating to remove any delays this may cause.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Long&lt;/code&gt; still performed the best, and as these results are more closely limited to the impacts of the variable types alone, the magnitude of variation is worth noting.&lt;/p&gt;\n\n&lt;p&gt;My results (desktop, Windows 7, Excel 2010):&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/RNuDE.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RNuDE.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Code used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Explicit&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; VariableOlympics()\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;Run this macro as many times as you&apos;d like, with an activesheet ready for data&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;in cells B2 to D6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; beginTIME &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, p &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; chosenWorksheet &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; chosenWorksheet = ThisWorkbook.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;TimeTrialInfo&quot;&lt;/span&gt;)\n\n    Application.EnableEvents = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    Application.Calculation = xlCalculationManual\n    Application.ScreenUpdating = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n    trials = &lt;span class=&quot;hljs-number&quot;&gt;1000000000&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; 1,000,000,000 - not 10,000,000,000 as used by @PGSystemTester&lt;/span&gt;\n\n    p = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    beginTIME = Now\n    boomBYTE trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    beginTIME = Now\n    boomINTEGER trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    boomLONG trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    boomDOUBLE trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    boomUNDECLARED trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    Application.EnableEvents = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    Application.Calculation = xlCalculationAutomatic\n    Application.ScreenUpdating = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    chosenWorksheet.Calculate\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomBYTE(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomINTEGER(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomLONG(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomDOUBLE(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomUNDECLARED(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Finished(i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, timeUSED &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, initialCell &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; initialCell.Offset(i, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            .Value = trials\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value = timeUSED\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).FormulaR1C1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;=ROUND(RC[-1]*3600*24,2)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a &lt;strong&gt;space&lt;/strong&gt; vs &lt;strong&gt;necessity&lt;/strong&gt; problem. &lt;/p&gt;\n\n&lt;p&gt;In some situations it&apos;s a &lt;strong&gt;necessity&lt;/strong&gt; to use a long. If you&apos;re looping through rows in a large excel file, the variable that holds the row number should be a long.&lt;/p&gt;\n\n&lt;p&gt;However, sometimes you will know that an integer can handle your problem and using a long would be a waste of &lt;strong&gt;space&lt;/strong&gt; (memory). Individual variables really don&apos;t make much of a difference, but when you start dealing with arrays it can make a big difference. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In VBA7, Integers are 2 bytes and longs are 4 bytes&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you have an array of 1 million numbers between 1 and 10, using an Integer array would take up &lt;em&gt;about&lt;/em&gt; 2MB of RAM, compared to roughly 4MB of RAM for a long array.  &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;As others already mentioned, a &lt;strong&gt;Long&lt;/strong&gt; &lt;em&gt;may&lt;/em&gt; take twice as much space as an &lt;strong&gt;Integer&lt;/strong&gt;. As others also already mentioned, the high capacity of current computers means you will see &lt;strong&gt;no difference in performance whatsoever&lt;/strong&gt;, unless you are dealing with extra extra extra large amounts of data:&lt;/p&gt;\n\n&lt;h3&gt;Memory&lt;/h3&gt;\n\n&lt;p&gt;Considering &lt;strong&gt;1 million values&lt;/strong&gt;, the difference between using Integers versus Longs would be of 2 bytes for each value, so that is 2 * 1 000 000 / 1,024 / 1024 = &lt;strong&gt;less than 2 MB of difference in your RAM&lt;/strong&gt;, which is likely much less than 1% or even 0.1% of your RAM capacity.&lt;/p&gt;\n\n&lt;h3&gt;Processing&lt;/h3&gt;\n\n&lt;p&gt;Considering the benchmark done by PGSystemTester&apos;s, you can see a difference of 811 - 745 = 66 seconds between Longs and Integers, when processing 10 billion batches of 4 operations each. Reduce the number to &lt;strong&gt;1 million of operations&lt;/strong&gt; and we can expect 66 / 10 000 / 4 = &lt;strong&gt;less than 2ms of difference in execution time&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I personally use Integers and Longs to &lt;strong&gt;help readability of my code&lt;/strong&gt;, particularly in loops, where an Integer indicates the loop is expected to be small (less than 1000 iterations), whereas a Long tells me the loop is expected to be rather large (more than 1000).&lt;/p&gt;\n\n&lt;p&gt;Note this subjective threshold is way below the Integer upper limit, I use Longs just to make the distinction between my own definitions of small and large.&lt;/p&gt;\n    "],"id":450,"title":"Why Use Integer Instead of Long?","content":"\n                \n&lt;p&gt;I often see questions relating to &lt;code&gt;Overflow&lt;/code&gt; errors with &lt;a href=&quot;/questions/tagged/vba&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;vba&apos;&quot; rel=&quot;tag&quot;&gt;vba&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;My question is why use the &lt;code&gt;integer&lt;/code&gt; variable declaration instead of just defining all numerical variables (excluding &lt;code&gt;double&lt;/code&gt; etc.) as &lt;code&gt;long&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;Unless you&apos;re performing an operation like in a for loop where you can guarantee that the value won&apos;t exceed the 32,767 limit, is there an impact on performance or something else that would dictate not using &lt;code&gt;long&lt;/code&gt;?&lt;/p&gt;\n    ","slug":"why-use-integer-instead-of-long-1657388012352","postType":"QUESTION","createdAt":"2022-07-09T17:33:32.000Z","updatedAt":"2022-07-09T17:33:32.000Z","tags":[{"id":2321,"name":"long-integer","slug":"long-integer","createdAt":"2022-07-09T17:33:32.000Z","updatedAt":"2022-07-09T17:33:32.000Z","Questions_Tags":{"questionId":450,"tagId":2321}},{"id":2322,"name":"integer-overflow","slug":"integer-overflow","createdAt":"2022-07-09T17:33:32.000Z","updatedAt":"2022-07-09T17:33:32.000Z","Questions_Tags":{"questionId":450,"tagId":2322}}],"relatedQuestions":[{"title":"Why Use Integer Instead of Long?","slug":"why-use-integer-instead-of-long-1657388012352","tags":[{"name":"long-integer","Questions_Tags":{"questionId":450,"tagId":2321}},{"name":"integer-overflow","Questions_Tags":{"questionId":450,"tagId":2322}}]}]},"randomQuestions":[{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"How can I make an AJAX call without jQuery?","slug":"how-can-i-make-an-ajax-call-without-jquery-1657388448955"},{"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827"},{"title":"Alternatives to gprof [closed]","slug":"alternatives-to-gprof-closed-1657388336554"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"How to filter Pandas dataframe using 'in' and 'not in' like in SQL","slug":"how-to-filter-pandas-dataframe-using-'in'-and-'not-in'-like-in-sql-1657387371355"},{"title":"Find object by id in an array of JavaScript objects","slug":"find-object-by-id-in-an-array-of-javascript-objects-1657387572087"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"Why do I need to override the equals and hashCode methods in Java?","slug":"why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java-1657388359877"},{"title":"Firebase query if child of child contains a value","slug":"firebase-query-if-child-of-child-contains-a-value-1657387841291"},{"title":"Why does printf not flush after the call unless a newline is in the format string?","slug":"why-does-printf-not-flush-after-the-call-unless-a-newline-is-in-the-format-string-1657387853407"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"\"Least Astonishment\" and the Mutable Default Argument","slug":"\"least-astonishment\"-and-the-mutable-default-argument-1657384412508"},{"title":"Converting string into datetime","slug":"converting-string-into-datetime-1657387717295"},{"title":"Importing installed package from script raises \"AttributeError: module has no attribute\" or \"ImportError: cannot import name\"","slug":"importing-installed-package-from-script-raises-\"attributeerror:-module-has-no-attribute\"-or-\"importerror:-cannot-import-name\"-1657387790607"},{"title":"Why can't I store a value and a reference to that value in the same struct?","slug":"why-can't-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct-1657387506828"},{"title":"Grouping functions (tapply, by, aggregate) and the *apply family","slug":"grouping-functions-(tapply-by-aggregate)-and-the-*apply-family-1657387844286"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348"}]},"__N_SSG":true}