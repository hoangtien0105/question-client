{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;Can someone explain SQL injecton?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;SQL injection happens when you interpolate some content into a SQL query string, and the result modifies the syntax of your query in ways you didn&apos;t intend.&lt;/p&gt;\n\n&lt;p&gt;It doesn&apos;t have to be malicious, it can be an accident.  But accidental SQL injection is more likely to result in an error than in a vulnerability.&lt;/p&gt;\n\n&lt;p&gt;The harmful content doesn&apos;t have to come from a user, it could be content that your application gets from any source, or even generates itself in code.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How does it cause vulnerabilities?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;It can lead to vulnerabilities because attackers can send values to an application that they know will be interpolated into a SQL string.  By being very clever, they can manipulate the result of queries, reading data or even changing data that they shouldn&apos;t be allowed to do.&lt;/p&gt;\n\n&lt;p&gt;Example in PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$password &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;];\n$id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n$&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;UPDATE Accounts SET PASSWORD = &apos;$password&apos; WHERE account_id = $id&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now suppose the attacker sets the POST request parameters to &quot;&lt;code&gt;password=xyzzy&lt;/code&gt;&quot; and &quot;&lt;code&gt;id=account_id&lt;/code&gt;&quot; resulting in the following SQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;UPDATE&lt;/span&gt; Accounts &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; PASSWORD &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xyzzy&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; account_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; account_id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although I expected &lt;code&gt;$id&lt;/code&gt; to be an integer, the attacker chose a string that is the name of the column.  Of course now the condition is true on &lt;em&gt;every&lt;/em&gt; row, so the attacker has just set the password for &lt;em&gt;every&lt;/em&gt; account.  Now the attacker can log in to anyone&apos;s account -- including privileged users.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Where exactly is the point where SQL is injected?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It isn&apos;t SQL that&apos;s injected, it&apos;s content that&apos;s interpolated (&quot;injected&quot;) into a SQL string, resulting in a different kind of query than I intended.  I trusted the dynamic content without verifying it, and executed the resulting SQL query blindly.  That&apos;s where the trouble starts.&lt;/p&gt;\n\n&lt;p&gt;SQL injection is a fault in the application code, not typically in the database or in the database access library or framework.  &lt;/p&gt;\n\n&lt;p&gt;Most cases of SQL injection can be avoided by using query parameters. See &lt;a href=&quot;https://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php&quot;&gt;How can I prevent SQL injection in PHP?&lt;/a&gt; for examples.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL Injection occurs when the user of an application is able to affect the meaning of database query.  This often occurs when arbitary strings from user input are concatenated to create SQL which is fed to the database.  For example lets say we had the following code (in PHP, but the same holds true for any language), which might be used to handle a user login.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT  FROM users WHERE username=&apos;&quot;.$_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;].&quot;&apos; AND password=&apos;&quot;.$_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;].&quot;&apos;&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The harm is done when the user enters something like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;administrator&lt;span class=&quot;hljs-string&quot;&gt;&apos;; --\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... for the username.  Without proper encoding the query becomes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;administrator&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;-- AND password=&apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The issue here is that the &apos; in the username closes out the username field then the -- starts a SQL comment causing the database server to ignore the rest of the string.  The net result is the user can now log in as the administrator without having to know the password.  SQL Inection can also be used to execute UPDATE, DELETE or DROP queries and really damage the database.&lt;/p&gt;\n\n&lt;p&gt;SQL Injection can be prevented by using parameterised queries, or applying your language/toolkit&apos;s escaping functions (such as mysql_real_escape_string() in PHP).&lt;/p&gt;\n\n&lt;p&gt;Once you understand SQL Injection you&apos;ll get the joke behind &lt;a href=&quot;http://xkcd.com/327/&quot; rel=&quot;noreferrer&quot;&gt;this cartoon&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL injection is when things that&apos;re supposed to be data are treated as SQL code unwillingly.&lt;/p&gt;\n\n&lt;p&gt;For instance, if you were to do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql_query(&quot;SELECT * FROM posts WHERE postid=$postid&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Normally it&apos;d get you the post with a given id, but assume that &lt;code&gt;$postid&lt;/code&gt; is set to the string &lt;code&gt;10; DROP TABLE posts --&lt;/code&gt;; all of a sudden, the actual query you&apos;re sending is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql_query(&quot;SELECT * FROM posts WHERE postid=10; DROP TABLE posts --&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is quite a problem, as you&apos;d be losing your entire posts table due to a malicious user - oh dear.&lt;/p&gt;\n\n&lt;p&gt;The easiest way to prevent this is to use prepared statements, for instance through &lt;a href=&quot;http://dk2.php.net/manual/en/pdo.prepare.php&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; or &lt;a href=&quot;http://dk2.php.net/manual/en/mysqli.prepare.php&quot; rel=&quot;noreferrer&quot;&gt;MySQLi&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The equivalent example in PDO would then be &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$statement &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $db&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM posts WHERE postid = :postid&apos;&lt;/span&gt;);\n$statement&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;bindValue(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:postid&apos;&lt;/span&gt;, $postid);\n$statement&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Doing this ensures that the database system knows that $postid is to be treated as data and not code, and will thus be handled appropriately.&lt;/p&gt;\n    ","\n&lt;p&gt;This question has been answered many times on StackOverflow, but it&apos;s an important topic for everyone to know about, so I&apos;m not going to vote to close this question.&lt;/p&gt;\n\n&lt;p&gt;Here are links to some of my past answers on this topic:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/601300/what-is-sql-injection/601524#601524&quot;&gt;What is SQL Injection?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1862036/how-do-i-protect-this-function-from-sql-injection/1862178#1862178&quot;&gt;How do I protect this function from SQL injection?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/306668/are-parameters-really-enough-to-prevent-sql-injections/306818#306818&quot;&gt;Are Parameters really enough to prevent Sql injections?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1683843/is-sql-injection-a-risk-today/1684292#1684292&quot;&gt;Is SQL injection a risk today?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I also gave a presentation at the MySQL Conference this month, and my slides are online:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies&quot; rel=&quot;noreferrer&quot;&gt;SQL Injection Myths &amp;amp; Fallacies&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;SQL injection is where a malicious user will put SQL into input fields to try and run the SQL on your server.&lt;/p&gt;\n\n&lt;p&gt;The #1 advice that I adhere to is to use parameterized stored procedures rather than building raw SQL in code.&lt;/p&gt;\n\n&lt;p&gt;Stored Procedure parameters don&apos;t get executed, making them safe in most cases.&lt;/p&gt;\n    ","\n&lt;p&gt;I found this paper to be an extremely good read about SQL injection techniques (link is to PDF): &lt;a href=&quot;http://www.cgisecurity.com/lib/advanced_sql_injection.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;Advanced SQL Injection In SQL Server Applications&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Despite the title saying &quot;Advanced&quot;, it&apos;s quite readable even if you don&apos;t have much knowledge about SQL injection.&lt;/p&gt;\n    ","\n&lt;p&gt;To get some general background check out the &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_Injection&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia article on SQL Injection&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In short SQL injection attacks can leave you vulnerable to all manor of database data theft and destruction.  The exact details of what can be done to your system depend on the details of the system itself.&lt;/p&gt;\n\n&lt;p&gt;Any time you pass input from your users to your database you have a potential injection point.  Web applications are often lacking in the this regard, as new programmers often do not understand the risks of handling input from users, and web applications are attacked by very smart people you never thought would find your program.&lt;/p&gt;\n    ","\n&lt;p&gt;You will like &lt;a href=&quot;http://www.codeproject.com/KB/database/SqlInjectionAttacks.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;this&lt;/a&gt; article from code project ; )&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Encrypt sensitive data.&lt;/li&gt;\n  &lt;li&gt;Access the database using an account with the least privileges\n  necessary.&lt;/li&gt;\n  &lt;li&gt;Install the database using an account with the least privileges\n  necessary.&lt;/li&gt;\n  &lt;li&gt;Ensure that data is valid.&lt;/li&gt;\n  &lt;li&gt;Do a code review to check for the possibility of second-order\n  attacks.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Use parameterised queries.&lt;/strong&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Use stored procedures.&lt;/strong&gt;&lt;/li&gt;\n  &lt;li&gt;Re-validate data in stored procedures.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Ensure that error messages give nothing away about the internal\n  architecture of the application or the\n  database.&lt;/strong&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The point where SQL is injected is any point that your application accepts input from the user.&lt;/p&gt;\n\n&lt;p&gt;Whether this becomes a dangerous vulnerability for your web application depends on whether this input is later used as part of an SQL query without properly checking its type and escaping it if necessary.&lt;/p&gt;\n\n&lt;p&gt;Without proper escaping, some SQL code &apos;injected&apos; by the user could be executed by the SQL engine as SQL code, rather than a simple string or value.&lt;/p&gt;\n    "],"id":425,"title":"What is SQL injection? [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/332365/how-does-the-sql-injection-from-the-bobby-tables-xkcd-comic-work&quot; dir=&quot;ltr&quot;&gt;How does the SQL injection from the &quot;Bobby Tables&quot; XKCD comic work?&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (13 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2019-08-19 01:15:18Z&quot; class=&quot;relativetime&quot;&gt;2 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;Can someone explain SQL injection?  How does it cause vulnerabilities?  Where exactly is the point where SQL is injected?&lt;/p&gt;\n    ","slug":"what-is-sql-injection-duplicate-1657387944486","postType":"QUESTION","createdAt":"2022-07-09T17:32:24.000Z","updatedAt":"2022-07-09T17:32:24.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244"},{"title":"How can I read and parse CSV files in C++?","slug":"how-can-i-read-and-parse-csv-files-in-c++-1657387869219"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"How to access a local variable from a different function using pointers?","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760"},{"title":"Do I cast the result of malloc?","slug":"do-i-cast-the-result-of-malloc-1657384271583"},{"title":"What is the purpose of the var keyword and when should I use it (or omit it)?","slug":"what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-(or-omit-it)-1657387525538"},{"title":"How to sum a variable by group","slug":"how-to-sum-a-variable-by-group-1657384838148"},{"title":"What is a NullPointerException, and how do I fix it?","slug":"what-is-a-nullpointerexception-and-how-do-i-fix-it-1657384201768"},{"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"What and where are the stack and heap?","slug":"what-and-where-are-the-stack-and-heap-1657387415361"},{"title":"Where can I find documentation on formatting a date in JavaScript?","slug":"where-can-i-find-documentation-on-formatting-a-date-in-javascript-1657384878157"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"Is there a built in function for string natural sort?","slug":"is-there-a-built-in-function-for-string-natural-sort-1657388069553"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665"}]},"__N_SSG":true}