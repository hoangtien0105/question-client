{"pageProps":{"data":{"answer":["\n&lt;p&gt;Until the 5th edition spec came out, the &lt;a href=&quot;http://bclary.com/2004/11/07/#a-15.9.4.2&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Date.parse&lt;/code&gt;&lt;/a&gt; method was completely &lt;em&gt;implementation dependent&lt;/em&gt; (&lt;code&gt;new Date(string)&lt;/code&gt; is equivalent to &lt;a href=&quot;http://bclary.com/2004/11/07/#a-15.9.4.2&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Date.parse(string)&lt;/code&gt;&lt;/a&gt; except the latter returns a number rather than a &lt;code&gt;Date&lt;/code&gt;). In the 5th edition spec the requirement was added to support a &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15&quot; rel=&quot;noreferrer&quot;&gt;simplified &lt;em&gt;(and slightly incorrect)&lt;/em&gt; ISO-8601&lt;/a&gt; (also see &lt;a href=&quot;https://stackoverflow.com/questions/51715259/what-are-valid-date-time-strings-in-javascript/&quot;&gt;What are valid Date Time Strings in JavaScript?&lt;/a&gt;). But other than that, there was &lt;em&gt;no&lt;/em&gt; requirement for what &lt;code&gt;Date.parse&lt;/code&gt; / &lt;code&gt;new Date(string)&lt;/code&gt; should accept other than that they had to accept whatever &lt;code&gt;Date#toString&lt;/code&gt; output (without saying what that was).&lt;/p&gt;\n\n&lt;p&gt;As of ECMAScript 2017 (edition 8), implementations were required to parse their output for &lt;code&gt;Date#toString&lt;/code&gt; and &lt;code&gt;Date#toUTCString&lt;/code&gt;, but the format of those strings was not specified.&lt;/p&gt;\n\n&lt;p&gt;As of ECMAScript 2019 (edition 9) the format for &lt;a href=&quot;http://ecma-international.org/ecma-262/9.0/#sec-date.prototype.tostring&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Date#toString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://ecma-international.org/ecma-262/9.0/#sec-date.prototype.toutcstring&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Date#toUTCString&lt;/code&gt;&lt;/a&gt;, have been specified as (respectively):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;ddd MMM DD YYYY HH:mm:ss ZZ [(timezone name)]&lt;br&gt;e.g. Tue Jul 10 2018 18:39:58 GMT+0530 (IST)&lt;/li&gt;\n&lt;li&gt;ddd, DD MMM YYYY HH:mm:ss Z&lt;br&gt;e.g. Tue 10 Jul 2018 13:09:58 GMT&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;providing 2 more formats that &lt;code&gt;Date.parse&lt;/code&gt; should parse reliably in new implementations (noting that support is not ubiquitous and noncompliant implementations will remain in use for some time).&lt;/p&gt;\n\n&lt;p&gt;I would recommend that date strings are parsed manually and the &lt;a href=&quot;http://bclary.com/2004/11/07/#a-15.9.3.1&quot; rel=&quot;noreferrer&quot;&gt;Date constructor&lt;/a&gt; used with year, month and day arguments to avoid ambiguity:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// parse a date in yyyy-mm-dd format&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseDate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;input&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; parts = input.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(parts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], parts[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// Note: months are 0-based&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;During recent experience writing a JS interpreter I wrestled plenty with the inner workings of ECMA/JS dates. So, I figure I&apos;ll throw in my 2 cents here. Hopefully sharing this stuff will help others with any questions about the differences among browsers in how they handle dates.&lt;/p&gt;\n\n&lt;h1&gt;The Input Side&lt;/h1&gt;\n\n&lt;p&gt;All implementations store their date values internally as 64-bit numbers that represent the number of milliseconds (ms) since 1970-01-01 UTC (GMT is the same thing as UTC). This date is the ECMAScript epoch that is also used by other languages such as Java and POSIX systems such as UNIX. Dates occurring after the epoch are positive numbers and dates prior are negative.&lt;/p&gt;\n\n&lt;p&gt;The following code is interpreted as the same date in all current browsers, but with the local timezone offset:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1/1/1970&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1 January, 1970&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In my timezone (EST, which is -05:00), the result is 18000000 because that&apos;s how many ms are in 5 hours (it&apos;s only 4 hours during daylight savings months). The value will be different in different time zones. This behaviour is specified in ECMA-262 so all browsers do it the same way.&lt;/p&gt;\n\n&lt;p&gt;While there is some variance in the input string formats that the major browsers will parse as dates, they essentially interpret them the same as far as time zones and daylight saving is concerned even though parsing is largely implementation dependent.&lt;/p&gt;\n\n&lt;p&gt;However, the ISO 8601 format is different. It&apos;s one of only two formats outlined in ECMAScript 2015 (ed 6) specifically that must be parsed the same way by all implementations (the other is the format specified for &lt;a href=&quot;http://ecma-international.org/ecma-262/6.0/index.html#sec-date.prototype.tostring&quot; rel=&quot;noreferrer&quot;&gt;Date.prototype.toString&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;But, even for ISO 8601 format strings, some implementations get it wrong. Here is a comparison output of Chrome and Firefox when this answer was originally written for 1/1/1970 (the epoch) on my machine using ISO 8601 format strings that &lt;em&gt;should&lt;/em&gt; be parsed to exactly the same value in all implementations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1970-01-01T00:00:00Z&apos;&lt;/span&gt;);       &lt;span class=&quot;hljs-comment&quot;&gt;// Chrome: 0         FF: 0&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1970-01-01T00:00:00-0500&apos;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// Chrome: 18000000  FF: 18000000&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1970-01-01T00:00:00&apos;&lt;/span&gt;);        &lt;span class=&quot;hljs-comment&quot;&gt;// Chrome: 0         FF: 18000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In the first case, the &quot;Z&quot; specifier indicates that the input is in UTC time so is not offset from the epoch and the result is 0&lt;/li&gt;\n&lt;li&gt;In the second case, the &quot;-0500&quot; specifier indicates that the input is in GMT-05:00 and both browsers interpret the input as being in the -05:00 timezone. That means that the UTC value is offset from the epoch, which means adding 18000000ms to the date&apos;s internal time value.&lt;/li&gt;\n&lt;li&gt;The third case, where there is no specifier, &lt;em&gt;should&lt;/em&gt; be treated as local for the host system. FF correctly treats the input as local time while Chrome treats it as UTC, so producing different time values. For me this creates a 5 hour difference in the stored value, which is problematic. Other systems with different offsets will get different results.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This difference has been fixed as of 2020, but other quirks exist between browsers when parsing ISO 8601 format strings.&lt;/p&gt;\n\n&lt;p&gt;But it gets worse. A quirk of ECMA-262 is that the ISO 8601 dateonly format (YYYY-MM-DD) is required to be parsed as UTC, whereas ISO 8601 requires it to be parsed as local. Here is the output from FF with the long and short ISO date formats with no time zone specifier.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1970-01-01T00:00:00&apos;&lt;/span&gt;);       &lt;span class=&quot;hljs-comment&quot;&gt;// 18000000&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1970-01-01&apos;&lt;/span&gt;);                &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the first is parsed as local because it&apos;s ISO 8601 date and time with no timezone, and the second is parsed as UTC because it&apos;s ISO 8601 date only.&lt;/p&gt;\n\n&lt;p&gt;So, to answer the original question directly, &lt;code&gt;&quot;YYYY-MM-DD&quot;&lt;/code&gt; is required by ECMA-262 to be interpreted as UTC, while the other is interpreted as local. That&apos;s why:&lt;/p&gt;\n\n&lt;h3&gt;This doesn&apos;t produce equivalent results:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005&quot;&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;// UTC&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;This does:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005&quot;&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;());\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08T00:00:00&quot;&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The bottom line is this for parsing date strings. The ONLY ISO 8601 string that you can safely parse across browsers is the long form &lt;strong&gt;with an offset&lt;/strong&gt; (either ±HH:mm or &quot;Z&quot;). If you do that you can safely go back and forth between local and UTC time.&lt;/p&gt;\n\n&lt;h3&gt;This works across browsers (after IE9):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08T00:00:00Z&quot;&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Most current browsers do treat the other input formats equally, including the frequently used &apos;1/1/1970&apos; (M/D/YYYY) and &apos;1/1/1970 00:00:00 AM&apos; (M/D/YYYY hh:mm:ss ap) formats. All of the following formats (except the last) are treated as local time input in all browsers. The output of this code is the same in all browsers in my timezone. The last one is treated as -05:00 regardless of the host timezone because the offset is set in the timestamp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1/1/1970&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1/1/1970 12:00:00 AM&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thu Jan 01 1970&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thu Jan 01 1970 00:00:00&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thu Jan 01 1970 00:00:00 GMT-0500&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, since parsing of even the formats specified in ECMA-262 is not consistent, it is recommended to never rely on the builtin parser and to always manually parse strings, say using a library and provide the format to the parser.&lt;/p&gt;\n\n&lt;p&gt;E.g. in moment.js you might write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; m = &lt;span class=&quot;hljs-title function_&quot;&gt;moment&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1/1/1970&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;M/D/YYYY&apos;&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;The Output Side&lt;/h1&gt;\n\n&lt;p&gt;On the output side, all browsers translate time zones the same way but they handle the string formats differently. Here are the &lt;code&gt;toString&lt;/code&gt; functions and what they output. Notice the &lt;code&gt;toUTCString&lt;/code&gt; and &lt;code&gt;toISOString&lt;/code&gt; functions output 5:00 AM on my machine. Also, the timezone name may be an abbreviation and may be different in different implementations. &lt;/p&gt;\n\n&lt;p&gt;&lt;b&gt;Converts from UTC to Local time before printing&lt;/b&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; - toString\n - toDateString\n - toTimeString\n - toLocaleString\n - toLocaleDateString\n - toLocaleTimeString\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;b&gt;Prints the stored UTC time directly&lt;/b&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; - toUTCString\n - toISOString \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;pre&gt;&lt;b&gt;In Chrome&lt;/b&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;toString            &lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Eastern&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Standard&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Time&lt;/span&gt;)\ntoDateString        &lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt;\ntoTimeString        &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Eastern&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Standard&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Time&lt;/span&gt;)\ntoLocaleString      &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;AM&lt;/span&gt;\ntoLocaleDateString  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt;\ntoLocaleTimeString  &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;AM&lt;/span&gt;\n\ntoUTCString         &lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;\ntoISOString         &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;-01&lt;span class=&quot;hljs-attr&quot;&gt;T05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;.000Z\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;pre&gt;&lt;b&gt;In Firefox&lt;/b&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;toString            &lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Eastern&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Standard&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Time&lt;/span&gt;)\ntoDateString        &lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt;\ntoTimeString        &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;0500&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Eastern&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Standard&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Time&lt;/span&gt;)\ntoLocaleString      &lt;span class=&quot;hljs-title class_&quot;&gt;Thursday&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;January&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;AM&lt;/span&gt;\ntoLocaleDateString  &lt;span class=&quot;hljs-title class_&quot;&gt;Thursday&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;January&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt;\ntoLocaleTimeString  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;AM&lt;/span&gt;\n\ntoUTCString         &lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;\ntoISOString         &lt;span class=&quot;hljs-number&quot;&gt;1970&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;-01&lt;span class=&quot;hljs-attr&quot;&gt;T05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;.000Z\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I normally don&apos;t use the ISO format for string input. The only time that using that format is beneficial to me is when dates need to be sorted as strings. The ISO format is sortable as-is while the others are not. If you have to have cross-browser compatibility, either specify the timezone or use a compatible string format.&lt;/p&gt;\n\n&lt;p&gt;The code &lt;code&gt;new Date(&apos;12/4/2013&apos;).toString()&lt;/code&gt; goes through the following internal pseudo-transformation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&quot;12/4/2013&quot;&lt;/span&gt; -&amp;gt; toUCT -&amp;gt; [storage] -&amp;gt; toLocal -&amp;gt; print &lt;span class=&quot;hljs-string&quot;&gt;&quot;12/4/2013&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I hope this answer was helpful.&lt;/p&gt;\n    ","\n&lt;p&gt;There is some method to the madness. As a general rule, if a browser can interpret a date as an ISO-8601, it will. &quot;2005-07-08&quot; falls into this camp, and so it is parsed as UTC. &quot;Jul 8, 2005&quot; cannot, and so it is parsed in the local time.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html&quot;&gt;JavaScript and Dates, What a Mess!&lt;/a&gt; for more.&lt;/p&gt;\n    ","\n&lt;p&gt;Another solution is to build an associative array with date format and then reformat data.&lt;/p&gt;\n\n&lt;p&gt;This method is useful for date formatted in an unussual way.&lt;/p&gt;\n\n&lt;p&gt;An example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    mydate=&lt;span class=&quot;hljs-string&quot;&gt;&apos;01.02.12 10:20:43&apos;&lt;/span&gt;:\n    myformat=&lt;span class=&quot;hljs-string&quot;&gt;&apos;dd/mm/yy HH:MM:ss&apos;&lt;/span&gt;;\n\n\n    dtsplit=mydate.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\/ .:]/&lt;/span&gt;);\n    dfsplit=myformat.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\/ .:]/&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// creates assoc array for date&lt;/span&gt;\n    df = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(dc=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;dc&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;dc++) {\n            df[dfsplit[dc]]=dtsplit[dc];\n            }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// uses assc array for standard mysql format&lt;/span&gt;\n    dstring[r] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;yy&apos;&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mm&apos;&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dd&apos;&lt;/span&gt;];\n    dstring[r] += &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;HH&apos;&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;MM&apos;&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ss&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://momentjs.com/docs/#/parsing/string-format/&quot; rel=&quot;noreferrer&quot;&gt;moment.js&lt;/a&gt; to parse dates:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; caseOne = &lt;span class=&quot;hljs-title function_&quot;&gt;moment&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;MMM D, YYYY&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toDate&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; caseTwo = &lt;span class=&quot;hljs-title function_&quot;&gt;moment&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;YYYY-MM-DD&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toDate&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The 3rd argument determines strict parsing (available as of 2.3.0). Without it moment.js may also give incorrect results.&lt;/p&gt;\n    ","\n&lt;p&gt;According to &lt;a href=&quot;http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html&lt;/a&gt; the format &quot;yyyy/mm/dd&quot; solves the usual problems. \nHe says: &quot;Stick to &quot;YYYY/MM/DD&quot; for your date strings whenever possible. It&apos;s universally supported and unambiguous. With this format, all times are local.&quot;\nI&apos;ve set tests: &lt;a href=&quot;http://jsfiddle.net/jlanus/ND2Qg/432/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://jsfiddle.net/jlanus/ND2Qg/432/&lt;/a&gt;\nThis format: \n + avoids the day and month order ambiguity by using y m d ordering and a 4-digit year\n + avoids the UTC vs. local issue not complying with ISO format by using slashes\n + danvk, the &lt;a href=&quot;http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;dygraphs&lt;/a&gt; guy, says that this format is good in all browsers. &lt;/p&gt;\n    ","\n&lt;p&gt;While &lt;a href=&quot;https://stackoverflow.com/a/2587398&quot;&gt;CMS is correct&lt;/a&gt; that passing strings into the parse method is generally unsafe, the new &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMA-262 5th Edition&lt;/a&gt; (aka ES5) specification in section 15.9.4.2 suggests that &lt;code&gt;Date.parse()&lt;/code&gt; actually should handle ISO-formatted dates.  The old specification made no such claim.  Of course, old browsers and some current browsers still do not provide this ES5 functionality.&lt;/p&gt;\n\n&lt;p&gt;Your second example isn&apos;t wrong.  It is the specified date in UTC, as implied by &lt;code&gt;Date.prototype.toISOString()&lt;/code&gt;, but is represented in your local timezone.&lt;/p&gt;\n    ","\n&lt;p&gt;This &lt;a href=&quot;https://code.google.com/p/flexible-js-formatting/&quot; rel=&quot;nofollow&quot;&gt;light weight date parsing library&lt;/a&gt; should solve all similar problems. I like the library because it is quite easy to extend. It&apos;s also possible to i18n it (not very straight forward, but not that hard).&lt;/p&gt;\n\n&lt;p&gt;Parsing example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; caseOne = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parseDate&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;M d, Y&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; caseTwo = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parseDate&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Y-m-d&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And formatting back to string (you will notice both cases give exactly the same result):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( caseOne.&lt;span class=&quot;hljs-title function_&quot;&gt;dateFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;M d, Y&quot;&lt;/span&gt;) );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( caseTwo.&lt;span class=&quot;hljs-title function_&quot;&gt;dateFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;M d, Y&quot;&lt;/span&gt;) );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( caseOne.&lt;span class=&quot;hljs-title function_&quot;&gt;dateFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y-m-d&quot;&lt;/span&gt;) );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( caseTwo.&lt;span class=&quot;hljs-title function_&quot;&gt;dateFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y-m-d&quot;&lt;/span&gt;) );\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a short, flexible snippet to convert a datetime-string in a cross-browser-safe fashion as nicel detailed by @drankin2112.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; inputTimestamp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2014-04-29 13:00:15&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//example&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partsTimestamp = inputTimestamp.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[ \\/:-]/g&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(partsTimestamp.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) {\n    partsTimestamp = partsTimestamp.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;00&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;00&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;00&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; - partsTimestamp.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//if your string-format is something like &apos;7/02/2014&apos;...&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//use: var tstring = partsTimestamp.slice(0, 3).reverse().join(&apos;-&apos;);&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tstring = partsTimestamp.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\ntstring += &lt;span class=&quot;hljs-string&quot;&gt;&apos;T&apos;&lt;/span&gt; + partsTimestamp.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//configure as needed&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; timestamp = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(tstring);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your browser should provide the same timestamp result as &lt;code&gt;Date.parse&lt;/code&gt; with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(tstring)).&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Both are correct, but they are being interpreted as dates with two different timezones. So you compared apples and oranges:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// local dates&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toISOString&lt;/span&gt;()            &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T07:00:00.000Z&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08T00:00-07:00&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toISOString&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T07:00:00.000Z&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// UTC dates&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005 UTC&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toISOString&lt;/span&gt;()        &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00.000Z&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toISOString&lt;/span&gt;()             &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00.000Z&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I removed the &lt;code&gt;Date.parse()&lt;/code&gt; call since it&apos;s used automatically on a string argument. I also compared the dates using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;Date.prototype.toISOString()&quot;&gt;ISO8601 format&lt;/a&gt; so you could visually compare the dates between your local dates and the UTC dates. The times are 7 hours apart, which is the timezone difference and why your tests showed two different dates.&lt;/p&gt;\n\n&lt;p&gt;The other way of creating these same local/UTC dates would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)           &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T07:00:00.000Z&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;UTC&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00.000Z&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I still strongly recommend &lt;a href=&quot;http://momentjs.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Moment.js&lt;/a&gt; which is as &lt;a href=&quot;http://momentjs.com/docs/#/parsing/&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;Moment.js Docs&quot;&gt;simple yet powerful&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// parse string&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;moment&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;format&lt;/span&gt;()       &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00+02:00&quot;&lt;/span&gt;\nmoment.&lt;span class=&quot;hljs-title function_&quot;&gt;utc&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;format&lt;/span&gt;()   &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00Z&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// year, month, day, etc.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;moment&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;format&lt;/span&gt;()     &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00+02:00&quot;&lt;/span&gt;\nmoment.&lt;span class=&quot;hljs-title function_&quot;&gt;utc&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;format&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;2005-07-08T00:00:00Z&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/a/2587398/6695569&quot;&gt;accepted answer from CMS&lt;/a&gt; is correct, I have just added some features :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;trim and clean input spaces&lt;/li&gt;\n&lt;li&gt;parse slashes, dashes, colons and spaces&lt;/li&gt;\n&lt;li&gt;has default day and time&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// parse a date time that can contains spaces, dashes, slashes, colons&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseDate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;input&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// trimes and remove multiple spaces and split by expected characters&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = input.&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/ +(?= )/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\s-\\/:]/&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;// new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(parts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], parts[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] || &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Note: months are 0-based&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":110,"title":"Why does Date.parse give incorrect results?","content":"\n                \n&lt;h3&gt;Case One:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jul 8, 2005&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output:&lt;/h3&gt;\n\n&lt;p&gt;Fri Jul 08 2005 00:00:00 GMT-0700 (PST)&lt;/p&gt;\n\n&lt;h3&gt;Case Two:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2005-07-08&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output:&lt;/h3&gt;\n\n&lt;p&gt;Thu Jul 07 2005 17:00:00 GMT-0700 (PST)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Why is the second parse incorrect?&lt;/p&gt;\n    ","slug":"why-does-date.parse-give-incorrect-results-1657384642821","postType":"QUESTION","createdAt":"2022-07-09T16:37:22.000Z","updatedAt":"2022-07-09T16:37:22.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I split a delimited string so I can access individual items?","slug":"how-do-i-split-a-delimited-string-so-i-can-access-individual-items-1657388042385"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"Calling a function of a module by using its name (a string)","slug":"calling-a-function-of-a-module-by-using-its-name-(a-string)-1657388565656"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"Grouping functions (tapply, by, aggregate) and the *apply family","slug":"grouping-functions-(tapply-by-aggregate)-and-the-*apply-family-1657387844286"},{"title":"Scanner is skipping nextLine() after using next() or nextFoo()?","slug":"scanner-is-skipping-nextline()-after-using-next()-or-nextfoo()-1657384379697"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"Reference: What is variable scope, which variables are accessible from where and what are \"undefined variable\" errors?","slug":"reference:-what-is-variable-scope-which-variables-are-accessible-from-where-and-what-are-\"undefined-variable\"-errors-1657384644697"},{"title":"Detecting a mobile browser","slug":"detecting-a-mobile-browser-1657388460071"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"re.findall behaves weird","slug":"re.findall-behaves-weird-1657388408049"},{"title":"How do I generate random integers within a specific range in Java?","slug":"how-do-i-generate-random-integers-within-a-specific-range-in-java-1657385458888"},{"title":"What is a stack trace, and how can I use it to debug my application errors?","slug":"what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors-1657384750732"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"How can I do a FULL OUTER JOIN in MySQL?","slug":"how-can-i-do-a-full-outer-join-in-mysql-1657388175444"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"Copy array by value","slug":"copy-array-by-value-1657387649531"}]},"__N_SSG":true}