{"pageProps":{"data":{"answer":["\n&lt;h3&gt;&lt;em&gt;Intro&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;First off you have a string. JSON is not an array, an object, or a data structure. &lt;a href=&quot;http://json.org/&quot; rel=&quot;noreferrer&quot;&gt;JSON&lt;/a&gt; is a text-based serialization format - so a fancy string, but still just a string. Decode it in PHP by using &lt;a href=&quot;http://php.net/json_decode&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;json_decode()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Therein you might find:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;scalars: &lt;a href=&quot;http://php.net/string&quot; rel=&quot;noreferrer&quot;&gt;strings&lt;/a&gt;, &lt;a href=&quot;http://php.net/int&quot; rel=&quot;noreferrer&quot;&gt;ints&lt;/a&gt;, &lt;a href=&quot;http://php.net/float&quot; rel=&quot;noreferrer&quot;&gt;floats&lt;/a&gt;, and &lt;a href=&quot;http://php.net/bool&quot; rel=&quot;noreferrer&quot;&gt;bools&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/null&quot; rel=&quot;noreferrer&quot;&gt;nulls&lt;/a&gt; (a special type of its own)&lt;/li&gt;\n&lt;li&gt;compound types: &lt;a href=&quot;http://php.net/object&quot; rel=&quot;noreferrer&quot;&gt;objects&lt;/a&gt; and &lt;a href=&quot;http://php.net/array&quot; rel=&quot;noreferrer&quot;&gt;arrays&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These are the things that can be encoded in JSON. Or more accurately, these are PHP&apos;s versions of the things that can be encoded in JSON.&lt;/p&gt;\n\n&lt;p&gt;There&apos;s nothing special about them. They are not &quot;JSON objects&quot; or &quot;JSON arrays.&quot; You&apos;ve decoded the JSON - you now have &lt;a href=&quot;http://php.net/types&quot; rel=&quot;noreferrer&quot;&gt;basic everyday PHP types&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Objects will be instances of &lt;a href=&quot;http://php.net/manual/en/reserved.classes.php&quot; rel=&quot;noreferrer&quot;&gt;stdClass&lt;/a&gt;, a built-in class which is just a &lt;a href=&quot;https://stackoverflow.com/questions/931407/what-is-stdclass-in-php&quot;&gt;generic thing&lt;/a&gt; that&apos;s not important here.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Accessing object properties&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;You access the &lt;a href=&quot;http://php.net/manual/en/language.oop5.properties.php&quot; rel=&quot;noreferrer&quot;&gt;properties&lt;/a&gt; of one of these objects the same way you would for the public non-static properties of any other object, e.g. &lt;code&gt;$object-&amp;gt;property&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n{\n    &quot;type&quot;: &quot;donut&quot;,\n    &quot;name&quot;: &quot;Cake&quot;\n}&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt;-&amp;gt;type; &lt;span class=&quot;hljs-comment&quot;&gt;//donut&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Accessing array elements&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;You access the elements of one of these arrays the same way you would for any other array, e.g. &lt;a href=&quot;http://php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;$array[0]&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n[\n    &quot;Glazed&quot;,\n    &quot;Chocolate with Sprinkles&quot;,\n    &quot;Maple&quot;\n]&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$toppings&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$toppings&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//Chocolate with Sprinkles&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Iterate over it with &lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$toppings&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$topping&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$topping&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Glazed &lt;br&gt;\n  Chocolate with Sprinkles &lt;br&gt;\n  Maple&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Or mess about with any of the &lt;a href=&quot;http://php.net/manual/en/ref.array.php&quot; rel=&quot;noreferrer&quot;&gt;bazillion built-in array functions&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Accessing nested items&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;The properties of objects and the elements of arrays might be more objects and/or arrays - you can simply continue to access their properties and members as usual, e.g. &lt;code&gt;$object-&amp;gt;array[0]-&amp;gt;etc&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n{\n    &quot;type&quot;: &quot;donut&quot;,\n    &quot;name&quot;: &quot;Cake&quot;,\n    &quot;toppings&quot;: [\n        { &quot;id&quot;: &quot;5002&quot;, &quot;type&quot;: &quot;Glazed&quot; },\n        { &quot;id&quot;: &quot;5006&quot;, &quot;type&quot;: &quot;Chocolate with Sprinkles&quot; },\n        { &quot;id&quot;: &quot;5004&quot;, &quot;type&quot;: &quot;Maple&quot; }\n    ]\n}&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt;-&amp;gt;toppings[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]-&amp;gt;id; &lt;span class=&quot;hljs-comment&quot;&gt;//5004&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Passing &lt;code&gt;true&lt;/code&gt; as the second argument to &lt;a href=&quot;http://php.net/json_decode&quot; rel=&quot;noreferrer&quot;&gt;json_decode()&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;When you do this, instead of objects you&apos;ll get associative arrays - arrays with strings for keys. Again you access the elements thereof as usual, e.g. &lt;code&gt;$array[&apos;key&apos;]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n{\n    &quot;type&quot;: &quot;donut&quot;,\n    &quot;name&quot;: &quot;Cake&quot;,\n    &quot;toppings&quot;: [\n        { &quot;id&quot;: &quot;5002&quot;, &quot;type&quot;: &quot;Glazed&quot; },\n        { &quot;id&quot;: &quot;5006&quot;, &quot;type&quot;: &quot;Chocolate with Sprinkles&quot; },\n        { &quot;id&quot;: &quot;5004&quot;, &quot;type&quot;: &quot;Maple&quot; }\n    ]\n}&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;toppings&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//Maple&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Accessing associative array items&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;When decoding a JSON &lt;em&gt;object&lt;/em&gt; to an associative PHP array, you can iterate both keys and values using the &lt;a href=&quot;https://www.php.net/manual/control-structures.foreach.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;foreach (array_expression as $key =&amp;gt; $value)&lt;/code&gt;&lt;/a&gt; syntax, eg&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n{\n    &quot;foo&quot;: &quot;foo value&quot;,\n    &quot;bar&quot;: &quot;bar value&quot;,\n    &quot;baz&quot;: &quot;baz value&quot;\n}&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$assoc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$assoc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;The value of key &apos;&lt;span class=&quot;hljs-subst&quot;&gt;$key&lt;/span&gt;&apos; is &apos;&lt;span class=&quot;hljs-subst&quot;&gt;$value&lt;/span&gt;&apos;&quot;&lt;/span&gt;, PHP_EOL;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Prints&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The value of key &apos;foo&apos; is &apos;foo value&apos;&lt;br&gt;\n  The value of key &apos;bar&apos; is &apos;bar value&apos;&lt;br&gt;\n  The value of key &apos;baz&apos; is &apos;baz value&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Don&apos;t know how the data is structured&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;Read the documentation for whatever it is you&apos;re getting the JSON from.&lt;/p&gt;\n\n&lt;p&gt;Look at the JSON - where you see curly brackets &lt;code&gt;{}&lt;/code&gt; expect an object, where you see square brackets &lt;code&gt;[]&lt;/code&gt; expect an array.&lt;/p&gt;\n\n&lt;p&gt;Hit the decoded data with a &lt;a href=&quot;http://php.net/print_r&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;print_r()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n{\n    &quot;type&quot;: &quot;donut&quot;,\n    &quot;name&quot;: &quot;Cake&quot;,\n    &quot;toppings&quot;: [\n        { &quot;id&quot;: &quot;5002&quot;, &quot;type&quot;: &quot;Glazed&quot; },\n        { &quot;id&quot;: &quot;5006&quot;, &quot;type&quot;: &quot;Chocolate with Sprinkles&quot; },\n        { &quot;id&quot;: &quot;5004&quot;, &quot;type&quot;: &quot;Maple&quot; }\n    ]\n}&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and check the output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Object&lt;/span&gt;\n(\n    [type] =&amp;gt; donut\n    [name] =&amp;gt; Cake\n    [toppings] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n        (\n            [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Object&lt;/span&gt;\n                (\n                    [id] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5002&lt;/span&gt;\n                    [type] =&amp;gt; Glazed\n                )\n\n            [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Object&lt;/span&gt;\n                (\n                    [id] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5006&lt;/span&gt;\n                    [type] =&amp;gt; Chocolate with Sprinkles\n                )\n\n            [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Object&lt;/span&gt;\n                (\n                    [id] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5004&lt;/span&gt;\n                    [type] =&amp;gt; Maple\n                )\n\n        )\n\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;ll tell you where you have objects, where you have arrays, along with the names and values of their members.&lt;/p&gt;\n\n&lt;p&gt;If you can only get so far into it before you get lost - go that far and hit &lt;em&gt;that&lt;/em&gt; with &lt;code&gt;print_r()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt;-&amp;gt;toppings[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Object&lt;/span&gt;\n(\n    [id] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5002&lt;/span&gt;\n    [type] =&amp;gt; Glazed\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Take a look at it in &lt;a href=&quot;http://array.include-once.org/&quot; rel=&quot;noreferrer&quot;&gt;this handy interactive JSON explorer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Break the problem down into pieces that are easier to wrap your head around.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;&lt;code&gt;json_decode()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;This happens because either:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The JSON consists entirely of just that, &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The JSON is invalid - check the result of &lt;a href=&quot;http://php.net/manual/en/function.json-last-error-msg.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;json_last_error_msg&lt;/code&gt;&lt;/a&gt; or put it through something like &lt;a href=&quot;http://jsonlint.com/&quot; rel=&quot;noreferrer&quot;&gt;JSONLint&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;It contains elements nested more than 512 levels deep. This default max depth can be overridden by passing an integer as the third argument to &lt;a href=&quot;http://php.net/json_decode&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;json_decode()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If you need to change the max depth you&apos;re probably solving the wrong problem. Find out why you&apos;re getting such deeply nested data (e.g. the service you&apos;re querying that&apos;s generating the JSON has a bug) and get that to not happen.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Object property name contains a special character&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;Sometimes you&apos;ll have an object property name that contains something like a hyphen &lt;code&gt;-&lt;/code&gt; or at sign &lt;code&gt;@&lt;/code&gt; which can&apos;t be used in a literal identifier. Instead you can use a string literal within curly braces to address it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;@attributes&quot;:{&quot;answer&quot;:42}}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$thing&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$thing&lt;/span&gt;-&amp;gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;@attributes&apos;&lt;/span&gt;}-&amp;gt;answer; &lt;span class=&quot;hljs-comment&quot;&gt;//42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have an integer as property see: &lt;a href=&quot;https://stackoverflow.com/questions/10333016/how-to-access-object-properties-with-names-like-integers&quot;&gt;How to access object properties with names like integers?&lt;/a&gt; as reference.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Someone put JSON in your JSON&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;It&apos;s ridiculous but it happens - there&apos;s JSON encoded as a string within your JSON. Decode, access the string as usual, decode &lt;em&gt;that&lt;/em&gt;, and eventually get to what you need.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n{\n    &quot;type&quot;: &quot;donut&quot;,\n    &quot;name&quot;: &quot;Cake&quot;,\n    &quot;toppings&quot;: &quot;[{ \\&quot;type\\&quot;: \\&quot;Glazed\\&quot; }, { \\&quot;type\\&quot;: \\&quot;Maple\\&quot; }]&quot;\n}&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$toppings&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$yummy&lt;/span&gt;-&amp;gt;toppings);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$toppings&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]-&amp;gt;type; &lt;span class=&quot;hljs-comment&quot;&gt;//Glazed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;Data doesn&apos;t fit in memory&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;If your JSON is too large for &lt;code&gt;json_decode()&lt;/code&gt; to handle at once things start to get tricky. See:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/4049428/3942918&quot;&gt;Processing large JSON files in PHP&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/26393235/3942918&quot;&gt;How to properly iterate through a big json file&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;&lt;em&gt;How to sort it&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;See: &lt;a href=&quot;https://stackoverflow.com/q/17364127/3942918&quot;&gt;Reference: all basic ways to sort arrays and data in PHP&lt;/a&gt;.&lt;/p&gt;\n    "],"id":71,"title":"How to extract and access data from JSON with PHP?","content":"\n                \n&lt;blockquote&gt;\n  &lt;p&gt;This is intended to be a general reference question and answer covering many of the never-ending &lt;em&gt;&quot;How do I access data in my JSON?&quot;&lt;/em&gt; questions. It is here to handle the broad basics of decoding JSON in PHP and accessing the results.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I have the JSON:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;{\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;donut&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cake&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;toppings&quot;&lt;/span&gt;: [\n        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5002&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Glazed&quot;&lt;/span&gt; },\n        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5006&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Chocolate with Sprinkles&quot;&lt;/span&gt; },\n        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5004&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Maple&quot;&lt;/span&gt; }\n    ]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do I decode this in PHP and access the resulting data?&lt;/p&gt;\n    ","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259","postType":"QUESTION","createdAt":"2022-07-09T16:34:43.000Z","updatedAt":"2022-07-09T16:34:43.000Z","tags":[{"id":260,"name":"json","slug":"json","createdAt":"2022-07-09T16:34:43.000Z","updatedAt":"2022-07-09T16:34:43.000Z","Questions_Tags":{"questionId":71,"tagId":260}}],"relatedQuestions":[{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259","tags":[{"name":"json","Questions_Tags":{"questionId":71,"tagId":260}}]}]},"randomQuestions":[{"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963"},{"title":"Why is my Spring @Autowired field null?","slug":"why-is-my-spring-@autowired-field-null-1657384705291"},{"title":"Maintain the aspect ratio of a div with CSS","slug":"maintain-the-aspect-ratio-of-a-div-with-css-1657387513615"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"How to convert a factor to integer\\numeric without loss of information?","slug":"how-to-convert-a-factor-to-integernumeric-without-loss-of-information-1657387880273"},{"title":"Numbering rows within groups in a data frame","slug":"numbering-rows-within-groups-in-a-data-frame-1657388556436"},{"title":"How to center an element horizontally and vertically","slug":"how-to-center-an-element-horizontally-and-vertically-1657388132330"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"How do I make a list of data frames?","slug":"how-do-i-make-a-list-of-data-frames-1657385480437"},{"title":"How do I check if an array includes a value in JavaScript?","slug":"how-do-i-check-if-an-array-includes-a-value-in-javascript-1657387421185"},{"title":"HTTP GET with request body","slug":"http-get-with-request-body-1657387379038"},{"title":"Reference - What does this error mean in PHP?","slug":"reference-what-does-this-error-mean-in-php-1657384301782"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929"},{"title":"Why is processing a sorted array faster than processing an unsorted array?","slug":"why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array-1657385497444"},{"title":"Why do we always prefer using parameters in SQL statements?","slug":"why-do-we-always-prefer-using-parameters-in-sql-statements-1657388031476"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"The Use of Multiple JFrames: Good or Bad Practice? [closed]","slug":"the-use-of-multiple-jframes:-good-or-bad-practice-closed-1657384478184"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"}]},"__N_SSG":true}