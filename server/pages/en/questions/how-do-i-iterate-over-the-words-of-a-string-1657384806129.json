{"pageProps":{"data":{"answer":["\n&lt;p&gt;I use this to split string by a delimiter. The first puts the results in a pre-constructed vector, the second returns a new vector.&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-c++ s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\ntemplate &amp;lt;typename Out&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &amp;amp;s, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim, Out result)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;istringstream&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; item;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::getline(iss, item, delim)) {\n        *result++ = item;\n    }\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &amp;amp;s, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; elems;\n    split(s, delim, &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::back_inserter(elems));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; elems;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note that this solution does not skip empty tokens, so the following will find 4 items, one of which is empty:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c++ s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; x = split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one:two::three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For what it&apos;s worth, here&apos;s another way to extract tokens from an input string, relying only on standard library facilities. It&apos;s an example of the power and elegance behind the design of the STL.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n    string sentence = &lt;span class=&quot;hljs-string&quot;&gt;&quot;And I feel fine...&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(sentence)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(iss),\n         &lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(),\n         &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of copying the extracted tokens to an output stream, one could insert them into a container, using the same generic &lt;a href=&quot;https://en.cppreference.com/w/cpp/algorithm/copy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; algorithm.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;vector&amp;lt;string&amp;gt; tokens;\n&lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(iss),\n     &lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(),\n     &lt;span class=&quot;hljs-built_in&quot;&gt;back_inserter&lt;/span&gt;(tokens));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... or create the &lt;code&gt;vector&lt;/code&gt; directly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;vector&amp;lt;string&amp;gt; tokens{istream_iterator&amp;lt;string&amp;gt;{iss},\n                      istream_iterator&amp;lt;string&amp;gt;{}};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A possible solution using Boost might be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\nstd::vector&amp;lt;std::string&amp;gt; strs;\nboost::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(strs, &lt;span class=&quot;hljs-string&quot;&gt;&quot;string to split&quot;&lt;/span&gt;, boost::&lt;span class=&quot;hljs-built_in&quot;&gt;is_any_of&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t &quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach might be even faster than the &lt;code&gt;stringstream&lt;/code&gt; approach. And since this is a generic template function it can be used to split other types of strings (wchar, etc. or UTF-8) using all kinds of delimiters.&lt;/p&gt;\n\n&lt;p&gt;See the &lt;a href=&quot;http://www.boost.org/doc/libs/1_36_0/doc/html/string_algo/usage.html&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Split me by whitespaces&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    std::string buf;                 &lt;span class=&quot;hljs-comment&quot;&gt;// Have a buffer string&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(str)&lt;/span&gt;&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;// Insert the string into a stream&lt;/span&gt;\n\n    std::vector&amp;lt;std::string&amp;gt; tokens; &lt;span class=&quot;hljs-comment&quot;&gt;// Create vector to hold our words&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ss &amp;gt;&amp;gt; buf)\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(buf);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those with whom it does not sit well to sacrifice all efficiency for code size and see &quot;efficient&quot; as a type of elegance, the following should hit a sweet spot (and I think the template container class is an awesomely elegant addition.):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ContainerT&lt;/span&gt; &amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; str, ContainerT&amp;amp; tokens,\n              &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; delimiters = &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; trimEmpty = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n   std::string::size_type pos, lastPos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length = str.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;();\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; value_type = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ContainerT::value_type;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; size_type  = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ContainerT::size_type;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(lastPos &amp;lt; length + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n   {\n      pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, lastPos);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos == std::string::npos)\n      {\n         pos = length;\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos != lastPos || !trimEmpty)\n         tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;value_type&lt;/span&gt;(str.&lt;span class=&quot;hljs-built_in&quot;&gt;data&lt;/span&gt;()+lastPos,\n               (size_type)pos-lastPos ));\n\n      lastPos = pos + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I usually choose to use &lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt; types as my second parameter (&lt;code&gt;ContainerT&lt;/code&gt;)... but &lt;code&gt;list&amp;lt;&amp;gt;&lt;/code&gt; is way faster than &lt;code&gt;vector&amp;lt;&amp;gt;&lt;/code&gt; for when direct access is not needed, and you can even create your own string class and use something like &lt;code&gt;std::list&amp;lt;subString&amp;gt;&lt;/code&gt; where &lt;code&gt;subString&lt;/code&gt; does not do any copies for incredible speed increases.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s more than double as fast as the fastest tokenize on this page and almost 5 times faster than some others. Also with the perfect parameter types you can eliminate all string and list copies for additional speed increases.&lt;/p&gt;\n\n&lt;p&gt;Additionally it does not do the (extremely inefficient) return of result, but rather it passes the tokens as a reference, thus also allowing you to build up tokens using multiple calls if you so wished.&lt;/p&gt;\n\n&lt;p&gt;Lastly it allows you to specify whether to trim empty tokens from the results via a last optional parameter.&lt;/p&gt;\n\n&lt;p&gt;All it needs is &lt;code&gt;std::string&lt;/code&gt;... the rest are optional. It does not use streams or the boost library, but is flexible enough to be able to accept some of these foreign types naturally.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another solution. It&apos;s compact and reasonably efficient:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;text, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sep)&lt;/span&gt; &lt;/span&gt;{\n  std::vector&amp;lt;std::string&amp;gt; tokens;\n  std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, end = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((end = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(sep, start)) != std::string::npos) {\n    tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start, end - start));\n    start = end + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  }\n  tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start));\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tokens;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can easily be templatised to handle string separators, wide strings, etc.&lt;/p&gt;\n\n&lt;p&gt;Note that splitting &lt;code&gt;&quot;&quot;&lt;/code&gt; results in a single empty string and splitting &lt;code&gt;&quot;,&quot;&lt;/code&gt; (ie. sep) results in two empty strings.&lt;/p&gt;\n\n&lt;p&gt;It can also be easily expanded to skip empty tokens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;text, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sep)&lt;/span&gt; &lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt; tokens;\n    std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, end = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((end = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(sep, start)) != std::string::npos) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (end != start) {\n          tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start, end - start));\n        }\n        start = end + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (end != start) {\n       tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tokens;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If splitting a string at multiple delimiters while skipping empty tokens is desired, this version may be used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; text, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; delims)&lt;/span&gt;\n&lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt; tokens;\n    std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; start = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delims), end = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((end = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delims, start)) != std::string::npos)\n    {\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start, end - start));\n        start = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delims, end);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(start != std::string::npos)\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tokens;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is my favorite way to iterate through a string. You can do whatever you want per word.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;string line = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a line of text to iterate through&quot;&lt;/span&gt;;\nstring word;\n\n&lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line, istringstream::in)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( iss &amp;gt;&amp;gt; word )     \n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something on `word` here...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is similar to Stack&amp;nbsp;Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/53849/how-do-i-tokenize-a-string-in-c&quot;&gt;How do I tokenize a string in C++?&lt;/a&gt;&lt;/em&gt;. &lt;strong&gt;Requires Boost external library&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/tokenizer.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;\n&lt;/span&gt;{\n    string text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;token  test\\tstring&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;char_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    tokenizer&amp;lt;char_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tokens&lt;/span&gt;(text, sep);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; t : tokens)\n    {\n        cout &amp;lt;&amp;lt; t &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like the following because it puts the results into a vector, supports a string as a delim and gives control over keeping empty values. But, it doesn&apos;t look as good then.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; delim, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; keep_empty = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; result;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (delim.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;()) {\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(s);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n    string::const_iterator substart = s.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), subend;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n        subend = &lt;span class=&quot;hljs-built_in&quot;&gt;search&lt;/span&gt;(substart, s.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), delim.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), delim.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n        &lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(substart, subend)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keep_empty || !temp.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;()) {\n            result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (subend == s.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        substart = subend + delim.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; vector&amp;lt;string&amp;gt; words = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;So close no matter how far&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(words.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), words.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, Boost has a &lt;a href=&quot;http://www.boost.org/doc/libs/1_36_0/doc/html/string_algo/usage.html#id3483755&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; that works partially like that. And, if by &apos;white-space&apos;, you really do mean any type of white-space, using Boost&apos;s split with &lt;code&gt;is_any_of()&lt;/code&gt; works great.&lt;/p&gt;\n    ","\n&lt;p&gt;The STL does not have such a method available already.&lt;/p&gt;\n\n&lt;p&gt;However, you can either use C&apos;s &lt;a href=&quot;http://en.cppreference.com/w/c/string/byte/strtok&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strtok()&lt;/code&gt;&lt;/a&gt; function by using the &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/c_str&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::string::c_str()&lt;/code&gt;&lt;/a&gt; member, or you can write your own. Here is a code sample I found after a quick Google search (&lt;strong&gt;&quot;STL string split&quot;&lt;/strong&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; str,\n              vector&amp;lt;string&amp;gt;&amp;amp; tokens,\n              &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; delimiters = &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters at beginning.&lt;/span&gt;\n    string::size_type lastPos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiters, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find first &quot;non-delimiter&quot;.&lt;/span&gt;\n    string::size_type pos     = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, lastPos);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (string::npos != pos || string::npos != lastPos)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Found a token, add it to the vector.&lt;/span&gt;\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(str.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(lastPos, pos - lastPos));\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters.  Note the &quot;not_of&quot;&lt;/span&gt;\n        lastPos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiters, pos);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Find next &quot;non-delimiter&quot;&lt;/span&gt;\n        pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, lastPos);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Taken from: &lt;a href=&quot;http://oopweb.com/CPP/Documents/CPPHOWTO/Volume/C++Programming-HOWTO-7.html&quot; rel=&quot;noreferrer&quot;&gt;http://oopweb.com/CPP/Documents/CPPHOWTO/Volume/C++Programming-HOWTO-7.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you have questions about the code sample, leave a comment and I will explain.&lt;/p&gt;\n\n&lt;p&gt;And just because it does not implement a &lt;code&gt;typedef&lt;/code&gt; called iterator or overload the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator does not mean it is bad code. I use C functions quite frequently. For example, &lt;a href=&quot;http://en.cppreference.com/w/c/io/fprintf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/c/io/fscanf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;scanf&lt;/code&gt;&lt;/a&gt; both are faster than &lt;a href=&quot;http://en.cppreference.com/w/cpp/io/cin&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::cin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/io/cout&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::cout&lt;/code&gt;&lt;/a&gt; (significantly), the &lt;a href=&quot;http://en.cppreference.com/w/c/io/fopen&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fopen&lt;/code&gt;&lt;/a&gt; syntax is a lot more friendly for binary types, and they also tend to produce smaller EXEs.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t get sold on this &lt;strong&gt;&quot;Elegance over performance&quot;&lt;/strong&gt; deal.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a split function that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;is generic&lt;/li&gt;\n&lt;li&gt;uses standard C++ (no boost)&lt;/li&gt;\n&lt;li&gt;accepts multiple delimiters&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ignores empty tokens (can easily be changed)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\nvector&amp;lt;T&amp;gt; \n&lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T &amp;amp; str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T &amp;amp; delimiters)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt;T&amp;gt; v;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::size_type start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, start);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(pos != T::npos) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos != start) &lt;span class=&quot;hljs-comment&quot;&gt;// ignore empty tokens&lt;/span&gt;\n            v.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(str, start, pos - start);\n        start = pos + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, start);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(start &amp;lt; str.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;// ignore trailing delimiter&lt;/span&gt;\n        v.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(str, start, str.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;() - start); &lt;span class=&quot;hljs-comment&quot;&gt;// add what&apos;s left of the string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    vector&amp;lt;string&amp;gt; v = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;&amp;lt;string&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, there; World&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;;,&quot;&lt;/span&gt;);\n    vector&amp;lt;wstring&amp;gt; v = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;&amp;lt;wstring&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Hello, there; World&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;L&quot;;,&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have a 2 lines solution to this problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sep = &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;;\nstd::string s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 This is an example&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; p=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, q=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; p!=s.npos; p=q)\n  std::cout &amp;lt;&amp;lt; s.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(p+(p!=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (q=s.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(sep, p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))-p-(p!=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) &amp;lt;&amp;lt; std::endl;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then instead of printing you can put it in a vector.&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another flexible and fast way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Operator&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Operator&amp;amp; op, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* input, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delimiters)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* s = input;\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* e = s;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*e != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    e = s;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*e != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;strchr&lt;/span&gt;(delimiters, *e) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ++e;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e - s &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;op&lt;/span&gt;(s, e - s);\n    }\n    s = e + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use it with a vector of strings (Edit: Since someone pointed out not to inherit STL classes... hrmf ;) ) :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ContainerType&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Appender&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;Appender&lt;/span&gt;(ContainerType&amp;amp; container) : &lt;span class=&quot;hljs-built_in&quot;&gt;container_&lt;/span&gt;(container) {;}\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* s, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;{ \n    container_.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(s,length));\n  }\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n  ContainerType&amp;amp; container_;\n};\n\nstd::vector&amp;lt;std::string&amp;gt; strVector;\n&lt;span class=&quot;hljs-function&quot;&gt;Appender &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(strVector)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;tokenize&lt;/span&gt;(v, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A number of words to be tokenized&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s it! And that&apos;s just one way to use the tokenizer, like how to just \ncount words:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WordCounter&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;WordCounter&lt;/span&gt;() : &lt;span class=&quot;hljs-built_in&quot;&gt;noOfWords&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {}\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    ++noOfWords;\n  }\n  &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; noOfWords;\n};\n\nWordCounter wc;\n&lt;span class=&quot;hljs-built_in&quot;&gt;tokenize&lt;/span&gt;(wc, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A number of words to be counted&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t&quot;&lt;/span&gt;); \n&lt;span class=&quot;hljs-built_in&quot;&gt;ASSERT&lt;/span&gt;( wc.noOfWords == &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Limited by imagination ;)&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple solution that uses only the standard regex library&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;regex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::regex regex )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n    std::vector&amp;lt;string&amp;gt; result;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;sregex_token_iterator &lt;span class=&quot;hljs-title&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( str.begin(), str.end(), regex, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;\n    sregex_token_iterator reg_end;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; it != reg_end; ++it ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( !it-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() ) &lt;span class=&quot;hljs-comment&quot;&gt;//token could be empty:check&lt;/span&gt;\n            result.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;( it-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;() );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The regex argument allows checking for multiple arguments (spaces, commas, etc.)&lt;/p&gt;\n\n&lt;p&gt;I usually only check to split on spaces and commas, so I also have this default function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;TokenizeDefault&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string str )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;regex &lt;span class=&quot;hljs-title&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\\\s,]+&quot;&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Tokenize&lt;/span&gt;( str, re );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;&quot;[\\\\s,]+&quot;&lt;/code&gt; checks for spaces (&lt;code&gt;\\\\s&lt;/code&gt;) and commas (&lt;code&gt;,&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Note, if you want to split &lt;code&gt;wstring&lt;/code&gt; instead of &lt;code&gt;string&lt;/code&gt;,&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;change all &lt;code&gt;std::regex&lt;/code&gt; to &lt;code&gt;std::wregex&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;change all &lt;code&gt;sregex_token_iterator&lt;/code&gt; to &lt;code&gt;wsregex_token_iterator&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note, you might also want to take the string argument by reference, depending on your compiler.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;std::stringstream&lt;/code&gt; as you have works perfectly fine, and do exactly what you wanted. If you&apos;re just looking for different way of doing things though, you can use &lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/find&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::find()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/find_first_of&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::find_first_of()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/substr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::string::substr()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the road&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    std::string::size_type prev_pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( (pos = s.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, pos)) != std::string::npos )\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( s.substr(prev_pos, pos-prev_pos) )&lt;/span&gt;&lt;/span&gt;;\n\n        std::cout &amp;lt;&amp;lt; substring &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n\n        prev_pos = ++pos;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( s.substr(prev_pos, pos-prev_pos) )&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Last word&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; substring &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you like to use boost, but want to use a whole string as delimiter (instead of single characters as in most of the previously proposed solutions), you can use the &lt;code&gt;boost_split_iterator&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Example code including convenient template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; _OutputIterator&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; str, \n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; delim, \n    _OutputIterator result)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost::algorithm;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; split_iterator&amp;lt;std::string::const_iterator&amp;gt; It;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(It iter=&lt;span class=&quot;hljs-built_in&quot;&gt;make_split_iterator&lt;/span&gt;(str, &lt;span class=&quot;hljs-built_in&quot;&gt;first_finder&lt;/span&gt;(delim, &lt;span class=&quot;hljs-built_in&quot;&gt;is_equal&lt;/span&gt;()));\n            iter!=&lt;span class=&quot;hljs-built_in&quot;&gt;It&lt;/span&gt;();\n            ++iter)\n    {\n        *(result++) = boost::&lt;span class=&quot;hljs-built_in&quot;&gt;copy_range&lt;/span&gt;&amp;lt;std::string&amp;gt;(*iter);\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n    vector&amp;lt;string&amp;gt; splitted;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HelloFOOworldFOO!&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;back_inserter&lt;/span&gt;(splitted));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// or directly to console, for example&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HelloFOOworldFOO!&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Heres a regex solution that only uses the standard regex library.  (I&apos;m a little rusty, so there may be a few syntax errors, but this is at least the general idea)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;regex.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string s)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;regex &lt;span class=&quot;hljs-title&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\w+&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//regex matches whole words, (greedy, so no fragment words)&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;regex_iterator&amp;lt;string::iterator&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;rit&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;( s.begin(), s.end(), r )&lt;/span&gt;&lt;/span&gt;;\n    regex_iterator&amp;lt;string::iterator&amp;gt; rend; &lt;span class=&quot;hljs-comment&quot;&gt;//iterators to iterate thru words&lt;/span&gt;\n    vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;result&lt;/span&gt;&amp;lt;regex_iterator&amp;gt;(rit, rend);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;  &lt;span class=&quot;hljs-comment&quot;&gt;//iterates through the matches to fill the vector&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a function named &lt;a href=&quot;http://www.cplusplus.com/reference/clibrary/cstring/strtok/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strtok&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* str,&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* saveptr;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* token = &lt;span class=&quot;hljs-built_in&quot;&gt;strtok_r&lt;/span&gt;(str,delim,&amp;amp;saveptr);\n\n    vector&amp;lt;string&amp;gt; result;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(token != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    {\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(token);\n        token = &lt;span class=&quot;hljs-built_in&quot;&gt;strtok_r&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,delim,&amp;amp;saveptr);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.cplusplus.com/reference/sstream/stringstream/&quot; rel=&quot;noreferrer&quot;&gt;stringstream&lt;/a&gt; can be convenient if you need to parse the string by non-space symbols:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;string s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name:JAck; Spouse:Susan; ...&quot;&lt;/span&gt;;\nstring dummy, name, spouse;\n\n&lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, dummy, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, name, &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, dummy, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, spouse, &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;std::string_view&lt;/code&gt; and Eric Niebler&apos;s &lt;code&gt;range-v3&lt;/code&gt; library:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://wandbox.org/permlink/kW5lwRCL1pxjp2pW&quot; rel=&quot;noreferrer&quot;&gt;https://wandbox.org/permlink/kW5lwRCL1pxjp2pW&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;range/v3/view.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;range/v3/algorithm.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    std::string s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the range v3 library&quot;&lt;/span&gt;;\n    ranges::for_each(s  \n        |   ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n        |   ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;transform&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;sub) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;string_view&lt;/span&gt;(&amp;amp;*sub.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), ranges::&lt;span class=&quot;hljs-built_in&quot;&gt;distance&lt;/span&gt;(sub));\n            }),\n        [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; s) {std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Substring: &quot;&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;}\n    );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using a range &lt;code&gt;for&lt;/code&gt; loop instead of &lt;code&gt;ranges::for_each&lt;/code&gt; algorithm:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;range/v3/view.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::string str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the range v3 library&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; s : str | ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n                      | ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;transform&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; sub) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;string_view&lt;/span&gt;(&amp;amp;*sub.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), ranges::&lt;span class=&quot;hljs-built_in&quot;&gt;distance&lt;/span&gt;(sub)); }\n                      ))\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Substring: &quot;&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;C++20 finally blesses us with a &lt;code&gt;split&lt;/code&gt; function. Or rather, a range adapter. &lt;a href=&quot;https://godbolt.org/z/6mZ8hG&quot; rel=&quot;noreferrer&quot;&gt;Godbolt link&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; ranges = std::ranges;\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; views = std::views;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; str = std::string_view;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; view =\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Multiple words&quot;&lt;/span&gt;\n    | views::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n    | views::&lt;span class=&quot;hljs-built_in&quot;&gt;transform&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;r) -&amp;gt; str {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n            &amp;amp;*r.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(),\n            &lt;span class=&quot;hljs-built_in&quot;&gt;static_cast&lt;/span&gt;&amp;lt;str::size_type&amp;gt;(ranges::&lt;span class=&quot;hljs-built_in&quot;&gt;distance&lt;/span&gt;(r))\n        };\n    });\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (str &amp;amp;&amp;amp;sv : view) {\n        std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So far I used the one in &lt;a href=&quot;http://en.wikipedia.org/wiki/Boost_C++_Libraries&quot; rel=&quot;noreferrer&quot;&gt;Boost&lt;/a&gt;, but I needed something that doesn&apos;t depends on it, so I came to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::vector&amp;lt;std::string&amp;gt;&amp;amp; lst, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; input, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; separators, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; remove_empty = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    std::ostringstream word;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; input.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++n)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (std::string::npos == separators.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(input[n]))\n            word &amp;lt;&amp;lt; input[n];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() || !remove_empty)\n                lst.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;());\n            word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() || !remove_empty)\n        lst.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A good point is that in &lt;code&gt;separators&lt;/code&gt; you can pass more than one character.&lt;/p&gt;\n    ","\n&lt;p&gt;Short and elegant&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string data, string token)&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; output;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; pos = string::npos; &lt;span class=&quot;hljs-comment&quot;&gt;// size_t to avoid improbable overflow&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    {\n        pos = data.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(token);\n        output.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(data.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, pos));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string::npos != pos)\n            data = data.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(pos + token.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;());\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (string::npos != pos);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can use any string as delimiter, also can be used with binary data (std::string supports binary data, including nulls)&lt;/p&gt;\n\n&lt;p&gt;using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; a = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this!!is!!!example!string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!!&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;\nis\n!example!string\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve rolled my own using strtok and used boost to split a string.  The best method I have found is the &lt;a href=&quot;http://www.partow.net/programming/strtk/&quot;&gt;C++ String Toolkit Library&lt;/a&gt;.  It is incredibly flexible and fast.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;strtk.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *whitespace  = &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t\\r\\n\\f&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *whitespace_and_punctuation  = &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t\\r\\n\\f;,=&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    {   &lt;span class=&quot;hljs-comment&quot;&gt;// normal parsing of a string into a vector of strings&lt;/span&gt;\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the road&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        std::vector&amp;lt;std::string&amp;gt; result;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( strtk::&lt;span class=&quot;hljs-built_in&quot;&gt;parse&lt;/span&gt;( s, whitespace, result ) )\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; result.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i )\n                std::cout &amp;lt;&amp;lt; result[i] &amp;lt;&amp;lt; std::endl;\n        }\n    }\n\n    {  &lt;span class=&quot;hljs-comment&quot;&gt;// parsing a string into a vector of floats with other separators&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// besides spaces&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0, 3.14; 4.0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt; values;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( strtk::&lt;span class=&quot;hljs-built_in&quot;&gt;parse&lt;/span&gt;( s, whitespace_and_punctuation, values ) )\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; values.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i )\n                std::cout &amp;lt;&amp;lt; values[i] &amp;lt;&amp;lt; std::endl;\n        }\n    }\n\n    {  &lt;span class=&quot;hljs-comment&quot;&gt;// parsing a string into specific variables&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;angle = 45; radius = 9.9&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        std::string w1, w2;\n        &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; v1, v2;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( strtk::&lt;span class=&quot;hljs-built_in&quot;&gt;parse&lt;/span&gt;( s, whitespace_and_punctuation, w1, v1, w2, v2) )\n        {\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;word &quot;&lt;/span&gt; &amp;lt;&amp;lt; w1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, value &quot;&lt;/span&gt; &amp;lt;&amp;lt; v1 &amp;lt;&amp;lt; std::endl;\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;word &quot;&lt;/span&gt; &amp;lt;&amp;lt; w2 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, value &quot;&lt;/span&gt; &amp;lt;&amp;lt; v2 &amp;lt;&amp;lt; std::endl;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The toolkit has much more flexibility than this simple example shows but its utility in parsing a string into useful elements is incredible.&lt;/p&gt;\n    ","\n&lt;p&gt;I made this because I needed an easy way to split strings and c-based strings... Hopefully someone else can find it useful as well. Also it doesn&apos;t rely on tokens and you can use fields as delimiters, which is another key I needed.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m sure there&apos;s improvements that can be made to even further improve its elegance and please do by all means&lt;/p&gt;\n\n&lt;p&gt;StringSplitter.hpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringSplit&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;match_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string_contains&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calc_string_size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copy_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* String;\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; do_string;\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; keep_empty;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; Container;\n    vector&amp;lt;string&amp;gt; ContainerS;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;StringSplit&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * in)\n    {\n        String = in;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;StringSplit&lt;/span&gt;(string in)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n        String = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[len + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;memset&lt;/span&gt;(String, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy_string&lt;/span&gt;(String, (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n        do_string = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;StringSplit&lt;/span&gt;()\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Container.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Container[i] != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] Container[i];\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (do_string)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n        }\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;StringSplitter.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;StringSplit.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; until = &lt;span class=&quot;hljs-built_in&quot;&gt;untilnextdelim&lt;/span&gt;(src, delim);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (until &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;memset&lt;/span&gt;(temp, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy_fragment&lt;/span&gt;(temp, src, delim);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keep_empty || *temp != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!do_string)\n            {\n                Container.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                string x = temp;\n                ContainerS.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(x);\n            }\n\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] temp;\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; until = &lt;span class=&quot;hljs-built_in&quot;&gt;untilnextdelim&lt;/span&gt;(src, delim);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (until &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;memset&lt;/span&gt;(temp, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy_fragment&lt;/span&gt;(temp, src, delim);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keep_empty || *temp != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!do_string)\n            {\n                Container.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                string x = temp;\n                ContainerS.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(x);\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] temp;\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::calc_string_size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _in)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*_in++)\n    {\n        i++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::string_contains&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* haystack, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* needle)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(needle);\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; lenh = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(haystack);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (lenh--)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(haystack + lenh, needle, len))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::match_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* cmp, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (len--)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*(_src + len) != *(cmp + len))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _in, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(_in);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*_in == delim)\n    {\n        _in += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*(_in + c) != delim &amp;amp;&amp;amp; c &amp;lt; len)\n    {\n        c++;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _in, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(delim);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + s;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;string_contains&lt;/span&gt;(_in, delim))\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(_in);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(_in, delim, s))\n    {\n        _in += s;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(_in);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(_in + c, delim, s))\n    {\n        c++;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* dest, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*src == delim)\n    {\n        src++;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*(src + c) != delim &amp;amp;&amp;amp; *(src + c))\n    {\n        *(dest + c) = *(src + c);\n        c++;\n    }\n    *(dest + c) = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::copy_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* dest, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* src)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*(src + i))\n    {\n        *(dest + i) = *(src + i);\n        i++;\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* dest, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(delim);\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; lens = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(src);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(src, delim, len))\n    {\n        src += len;\n        lens -= len;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(src + c, delim, len) &amp;amp;&amp;amp; (c &amp;lt; lens))\n    {\n        *(dest + c) = *(src + c);\n        c++;\n    }\n    *(dest + c) = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String != Delimiter &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String == Delimiter)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Container;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    do_string = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String != Delimiter &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String == Delimiter)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ContainerS;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; LenDelim = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(Delimiter);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim) &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String,Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Container;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    do_string = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; LenDelim = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(Delimiter);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim) &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ContainerS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    StringSplit ss = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This:CUT:is:CUT:an:CUT:example:CUT:cstring&quot;&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_cstr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:CUT:&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will output:&lt;/p&gt;\n\n&lt;p&gt;This&lt;br&gt;\nis&lt;br&gt;\nan&lt;br&gt;\nexample&lt;br&gt;\ncstring&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    StringSplit ss = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This:is:an:example:cstring&quot;&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_cstr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    string mystring = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This[SPLIT]is[SPLIT]an[SPLIT]example[SPLIT]string&quot;&lt;/span&gt;;\n    StringSplit ss = mystring;\n    vector&amp;lt;string&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[SPLIT]&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    string mystring = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This|is|an|example|string&quot;&lt;/span&gt;;\n    StringSplit ss = mystring;\n    vector&amp;lt;string&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;|&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To keep empty entries (by default empties will be excluded):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;StringSplit ss = mystring;\nss.keep_empty = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\nvector&amp;lt;string&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:DELIM:&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The goal was to make it similar to C#&apos;s Split() method where splitting a string is as easy as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;String[] Split = \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hey:cut:what&apos;s:cut:your:cut:name?&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;Split&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;:cut:&quot;&lt;/span&gt;}, StringSplitOptions.None);\n\nforeach(String X in Split)\n{\n    Console.&lt;span class=&quot;hljs-built_in&quot;&gt;Write&lt;/span&gt;(X);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I hope someone else can find this as useful as I do.&lt;/p&gt;\n    ","\n&lt;p&gt;This answer takes the string and puts it into a vector of strings. It uses the boost library.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\nstd::vector&amp;lt;std::string&amp;gt; strs;\nboost::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(strs, &lt;span class=&quot;hljs-string&quot;&gt;&quot;string to split&quot;&lt;/span&gt;, boost::&lt;span class=&quot;hljs-built_in&quot;&gt;is_any_of&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t &quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;What about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; v;\n    string tmp;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(string::const_iterator i; i = str.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(); i &amp;lt;= str.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(); ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(*i != delim &amp;amp;&amp;amp; i != str.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;()) {\n            tmp += *i; \n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            v.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(tmp);\n            tmp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;; \n        }   \n    }   \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another way of doing it..&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string text,vector&amp;lt;string&amp;gt;&amp;amp; words)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; ch;\n  string word;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(ch=text[i++])\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;isspace&lt;/span&gt;(ch))\n    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n      {\n        words.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word);\n      }\n      word = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n      word += ch;\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n  {\n    words.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like to use the boost/regex methods for this task since they provide maximum flexibility for specifying the splitting criteria.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/regex.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:::line::to:split&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; boost::regex &lt;span class=&quot;hljs-title&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:+&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// one or more colons&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// -1 means find inverse matches aka split&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;boost::sregex_token_iterator &lt;span class=&quot;hljs-title&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line.begin(),line.end(),re,&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    boost::sregex_token_iterator end;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; tokens != end; ++tokens)\n        std::cout &amp;lt;&amp;lt; *tokens &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Recently I had to split a camel-cased word into subwords.  There are no delimiters, just upper characters. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;locale&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// std::isupper&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; String&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::list&amp;lt;String&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_camel_case_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; String &amp;amp;s)&lt;/span&gt;\n&lt;/span&gt;{\n    std::list&amp;lt;String&amp;gt; R;\n    String w;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String::const_iterator i = s.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(); i &amp;lt; s.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(); ++i) {  {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;isupper&lt;/span&gt;(*i)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (w.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;()) {\n                R.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(w);\n                w.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n            }\n        }\n        w += *i;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (w.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;())\n        R.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(w);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; R;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, this splits &quot;AQueryTrades&quot; into &quot;A&quot;, &quot;Query&quot; and &quot;Trades&quot;.  The function works with narrow and wide strings. Because it respects the current locale it splits &quot;RaumfahrtÜberwachungsVerordnung&quot; into &quot;Raumfahrt&quot;, &quot;Überwachungs&quot; and &quot;Verordnung&quot;.&lt;/p&gt;\n\n&lt;p&gt;Note &lt;code&gt;std::upper&lt;/code&gt; should be really passed as function template argument. Then the more generalized from of this function can split at delimiters like &lt;code&gt;&quot;,&quot;&lt;/code&gt;, &lt;code&gt;&quot;;&quot;&lt;/code&gt; or &lt;code&gt;&quot; &quot;&lt;/code&gt; too.&lt;/p&gt;\n    "],"id":156,"title":"How do I iterate over the words of a string?","content":"\n                \n&lt;p&gt;How do I iterate over the words of a string composed of words separated by whitespace?&lt;/p&gt;\n&lt;p&gt;Note that I&apos;m not interested in C string functions or that kind of character manipulation/access. I prefer elegance over efficiency. My current solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    string s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the road&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n        string subs;\n        iss &amp;gt;&amp;gt; subs;\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Substring: &quot;&lt;/span&gt; &amp;lt;&amp;lt; subs &amp;lt;&amp;lt; endl;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iss);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129","postType":"QUESTION","createdAt":"2022-07-09T16:40:06.000Z","updatedAt":"2022-07-09T16:40:06.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"Post an HTML Table to ADO.NET DataTable","slug":"post-an-html-table-to-ado.net-datatable-1657387462723"},{"title":"How to get the difference between two arrays in JavaScript?","slug":"how-to-get-the-difference-between-two-arrays-in-javascript-1657388463384"},{"title":"Correctly allocating multi-dimensional arrays","slug":"correctly-allocating-multi-dimensional-arrays-1657387733756"},{"title":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","slug":"how-does-the-windows-command-interpreter-(cmd.exe)-parse-scripts-1657387731560"},{"title":"Why does Date.parse give incorrect results?","slug":"why-does-date.parse-give-incorrect-results-1657384642821"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"},{"title":"How do we control web page caching, across all browsers?","slug":"how-do-we-control-web-page-caching-across-all-browsers-1657387529059"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"re.findall behaves weird","slug":"re.findall-behaves-weird-1657388408049"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"Is there a \"previous sibling\" selector?","slug":"is-there-a-\"previous-sibling\"-selector-1657384771067"},{"title":"How can I transition height: 0; to height: auto; using CSS?","slug":"how-can-i-transition-height:-0-to-height:-auto-using-css-1657388022100"},{"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486"}]},"__N_SSG":true}