{"pageProps":{"data":{"answer":["\n&lt;p&gt;Every time you do &lt;code&gt;new Random()&lt;/code&gt; it is initialized using the clock. This means that in a tight loop you get the same value lots of times. You should keep a single &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.random?view=netframework-4.8&quot; rel=&quot;noreferrer&quot;&gt;Random&lt;/a&gt; instance and keep using &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.8#System_Random_Next&quot; rel=&quot;noreferrer&quot;&gt;Next&lt;/a&gt; on the &lt;strong&gt;same&lt;/strong&gt; instance.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Function to get a random number &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(); \n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; syncLock = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;(); \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RandomNumber&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; max&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;lock&lt;/span&gt;(syncLock) { &lt;span class=&quot;hljs-comment&quot;&gt;// synchronize&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; random.Next(min, max);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Edit (see comments): why do we need a &lt;code&gt;lock&lt;/code&gt; here?&lt;/p&gt;\n\n&lt;p&gt;Basically, &lt;code&gt;Next&lt;/code&gt; is going to change the internal state of the &lt;code&gt;Random&lt;/code&gt; instance. If we do that at the same time from multiple threads, you &lt;em&gt;could&lt;/em&gt; argue &quot;we&apos;ve just made the outcome even more random&quot;, but what we are &lt;em&gt;actually&lt;/em&gt; doing is potentially breaking the internal implementation, and we could also start getting the same numbers from different threads, which &lt;em&gt;might&lt;/em&gt; be a problem - and might not. The guarantee of what happens internally is the bigger issue, though; since &lt;code&gt;Random&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; make any guarantees of thread-safety. Thus there are two valid approaches:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Synchronize so that we don&apos;t access it at the same time from different threads&lt;/li&gt;\n&lt;li&gt;Use different &lt;code&gt;Random&lt;/code&gt; instances per thread&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Either can be fine; but mutexing a &lt;strong&gt;single&lt;/strong&gt; instance from multiple callers at the same time is just asking for trouble.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;lock&lt;/code&gt; achieves the first (and simpler) of these approaches; however, another approach might be: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt; appRandom\n     = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt;(() =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this is then per-thread, so you don&apos;t need to synchronize. &lt;/p&gt;\n    ","\n&lt;p&gt;For ease of re-use throughout your application a static class may help.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StaticRandom&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; seed;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt; threadLocal = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt;\n        (() =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(Interlocked.Increment(&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt; seed)));\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StaticRandom&lt;/span&gt;()&lt;/span&gt;\n    {\n        seed = Environment.TickCount;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random Instance { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; threadLocal.Value; } }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use then use static random instance with code such as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;StaticRandom.Instance.Next(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Mark&apos;s solution can be quite expensive since it needs to synchronize everytime.&lt;/p&gt;\n\n&lt;p&gt;We can get around the need for synchronization by using the thread-specific storage pattern:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RandomNumber&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;IRandomNumber&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; Random Global = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    [&lt;span class=&quot;hljs-meta&quot;&gt;ThreadStatic&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random _local;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; max&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; localBuffer = _local;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (localBuffer == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) \n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; seed;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;lock&lt;/span&gt;(Global) seed = Global.Next();\n            localBuffer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(seed);\n            _local = localBuffer;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; localBuffer.Next(max);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Measure the two implementations and you should see a significant difference.&lt;/p&gt;\n    ","\n&lt;p&gt;My answer from &lt;a href=&quot;https://stackoverflow.com/a/15729385/661933&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;Just reiterating &lt;strong&gt;the right solution&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mySpace&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Util&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; rnd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetRandom&lt;/span&gt;()&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rnd.Next();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you can call:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = Util.GetRandom();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;all throughout. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;If you strictly need a true stateless static method&lt;/strong&gt; to generate random numbers, you can rely on a &lt;code&gt;Guid&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Util&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetRandom&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Guid.NewGuid().GetHashCode();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;It&apos;s going to be a wee bit slower, but can be much more random&lt;/em&gt; than &lt;code&gt;Random.Next&lt;/code&gt;, at least from my experience.&lt;/p&gt;\n\n&lt;p&gt;But &lt;strong&gt;not&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(Guid.NewGuid().GetHashCode()).Next();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The unnecessary object creation is going to make it slower especially under a loop.&lt;/p&gt;\n\n&lt;p&gt;And &lt;strong&gt;never&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random().Next();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not only it&apos;s slower (inside a loop), its randomness is... well not really good according to me..&lt;/p&gt;\n    ","\n&lt;p&gt;I would rather use the following class to generate random numbers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] random;\nSystem.Security.Cryptography.RNGCryptoServiceProvider prov = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; System.Security.Cryptography.RNGCryptoServiceProvider();\nprov.GetBytes(random);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;1) As Marc Gravell said, try to use ONE random-generator. It&apos;s always cool to add this to the constructor: System.Environment.TickCount.&lt;/p&gt;\n\n&lt;p&gt;2) One tip. Let&apos;s say you want to create 100 objects and suppose each of them should have its-own random-generator (handy if you calculate LOADS of random numbers in a very short period of time). If you would do this in a loop (generation of 100 objects), you could do this like that (to assure fully-randomness):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; inMyRandSeed;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;i++)\n{\n   inMyRandSeed = System.Environment.TickCount + i;\n   .\n   .\n   .\n   myNewObject = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyNewObject(inMyRandSeed);  \n   .\n   .\n   .\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Usage: Random m_rndGen = new Random(inMyRandSeed);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cheers.&lt;/p&gt;\n    ","\n&lt;p&gt;Every time you execute&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random (&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It does not matter if you execute it millions of times, you will always use the same seed.&lt;/p&gt;\n\n&lt;p&gt;If you use &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random ();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You get different random number sequence, if a hacker guesses the seed and your algorithm is related to the security of your system - your algorithm is broken. I you execute mult. In this constructor the seed is specified by the system clock and if several instances are created in a very short period of time (milliseconds) it is possible that they may have the same seed.&lt;/p&gt;\n\n&lt;p&gt;If you need safe random numbers you must use the class&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;System.Security.Cryptography.RNGCryptoServiceProvider&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; max&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(min &amp;gt;= max)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Min value is greater or equals than Max value.&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] intBytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt;(RNGCryptoServiceProvider rng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RNGCryptoServiceProvider())\n    {\n        rng.GetNonZeroBytes(intBytes);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  min +  Math.Abs(BitConverter.ToInt32(intBytes, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) % (max - min + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; randomNumber = Next(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use code like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ThreadSafeRandom&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; Random _global = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt; _local = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt;(() =&amp;gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; seed;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;lock&lt;/span&gt; (_global)\n        {\n            seed = _global.Next();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(seed);\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random Instance =&amp;gt; _local.Value;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code can be used as is or via the NuGet package &lt;a href=&quot;https://www.nuget.org/packages/ThreadSafeRandomizer/&quot; rel=&quot;nofollow noreferrer&quot;&gt;ThreadSafeRandomizer&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I use this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; randomNumber = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;.Parse(Guid.NewGuid().ToString().FirstOrDefault(Char.IsDigit).ToString().Replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Performance: Generating 1 million random number on my PC: 711 ms.&lt;/p&gt;\n&lt;p&gt;If the Guid not contains any number (i don&apos;t know that&apos;s possible or not) then 0 will be used as the result.&lt;/p&gt;\n    ","\n&lt;p&gt;There are a lot of solutions, here one: if you want only number erase the letters and the method receives a random and the result length.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;GenerateRandom&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Random oRandom, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; iLongitudPin&lt;/span&gt;)&lt;/span&gt;\n{\n    String sCharacters = &lt;span class=&quot;hljs-string&quot;&gt;&quot;123456789ABCDEFGHIJKLMNPQRSTUVWXYZ123456789&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; iLength = sCharacters.Length;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; cCharacter;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; iLongitudNuevaCadena = iLongitudPin; \n    String sRandomResult = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; iLongitudNuevaCadena; i++)\n    {\n        cCharacter = sCharacters[oRandom.Next(iLength)];\n        sRandomResult += cCharacter.ToString();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (sRandomResult);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I solved the problem by using the Rnd() function:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Function &lt;span class=&quot;hljs-title&quot;&gt;RollD6&lt;/span&gt;() As UInteger\n        RollD6&lt;/span&gt; = (Math.Floor(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; * Rnd())) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        Return RollD6\nEnd Function\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When the form loads, I use the Randomize() method to make sure I don&apos;t always get the same sequence of random numbers from run to run.&lt;/p&gt;\n    ","\n&lt;p&gt;In Visual Basic this works (probably can be translated to C#, if not a DLL reference can be a solution):&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Private Function &lt;span class=&quot;hljs-title&quot;&gt;GetRandomInt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ByVal Min As Integer, ByVal Max As Integer&lt;/span&gt;) As Integer\n     Static Generator As System.Random&lt;/span&gt; = New System.Random()\n     Return Generator.Next(Min, Max)\nEnd Function\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Always get a positive random number.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nexnumber = Guid.NewGuid().GetHashCode();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nexnumber &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            nexnumber *= &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":195,"title":"Random number generator only generating one random number","content":"\n                \n&lt;p&gt;I have the following function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Function to get random number&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RandomNumber&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; min, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; max&lt;/span&gt;)&lt;/span&gt;\n{\n    Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; random.Next(min, max);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How I call it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] mac = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; ++x)\n    mac[x] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(Misc.RandomNumber((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;0xFFFF&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;0xFFFFFF&lt;/span&gt;) % &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If I step that loop with the debugger during runtime I get different values (which is what I want).\nHowever, if I put a breakpoint two lines below that code, all members of the &lt;code&gt;mac&lt;/code&gt; array have equal value.&lt;/p&gt;\n\n&lt;p&gt;Why does that happen?&lt;/p&gt;\n    ","slug":"random-number-generator-only-generating-one-random-number-1657385468315","postType":"QUESTION","createdAt":"2022-07-09T16:51:08.000Z","updatedAt":"2022-07-09T16:51:08.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Is there a built in function for string natural sort?","slug":"is-there-a-built-in-function-for-string-natural-sort-1657388069553"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"},{"title":"srand() — why call it only once?","slug":"srand()-why-call-it-only-once-1657387794760"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"Serialize and Deserialize Json and Json Array in Unity","slug":"serialize-and-deserialize-json-and-json-array-in-unity-1657388273270"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653"},{"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"How to count the number of set bits in a 32-bit integer?","slug":"how-to-count-the-number-of-set-bits-in-a-32-bit-integer-1657388437370"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"}]},"__N_SSG":true}