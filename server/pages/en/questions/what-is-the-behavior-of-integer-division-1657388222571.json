{"pageProps":{"data":{"answer":["\n&lt;blockquote&gt;\n&lt;p&gt;Will result always be the floor of the division? What is the defined behavior?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Not quite. It rounds toward 0, rather than flooring.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;6.5.5 Multiplicative operators&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt; When integers are divided, the result of the / operator is the algebraic quotient with any\nfractional part discarded.&lt;sup&gt;88)&lt;/sup&gt; If the quotient a/b is representable, the expression\n(a/b)*b + a%b shall equal a.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and the corresponding footnote:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol start=&quot;88&quot;&gt;\n&lt;li&gt;This is often called truncation toward zero.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Of course two points to note are:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; The usual arithmetic conversions are performed on the operands.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt; The result of the / operator is the\nquotient from the division of the\nfirst operand by the second; the\nresult of the % operator is the\nremainder. &lt;em&gt;In both operations, if the\nvalue of the second operand is zero,\nthe behavior is undefined.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;[Note: Emphasis mine]&lt;/p&gt;\n    ","\n&lt;p&gt;Dirkgently gives &lt;a href=&quot;https://stackoverflow.com/questions/3602827/what-is-the-behavior-of-integer-division-in-c/3602857#3602857&quot;&gt;an excellent description&lt;/a&gt; of integer division in C99, but you should also know that in C89 integer division with a negative operand has an implementation-defined direction. &lt;/p&gt;\n\n&lt;p&gt;From the ANSI C draft (3.3.5):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If either operand is negative, whether the result of the / operator is the largest integer less than the algebraic quotient or the smallest integer greater than the algebraic quotient is implementation-defined, as is the sign of the result of the % operator.  If the quotient a/b is representable, the expression (a/b)*b + a%b shall equal a.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So watch out with negative numbers when you are stuck with a C89 compiler.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s a fun fact that C99 chose truncation towards zero because that was how FORTRAN did it. See &lt;a href=&quot;http://groups.google.com/group/comp.std.c/msg/3888950ced7530ff&quot; rel=&quot;noreferrer&quot;&gt;this message&lt;/a&gt; on comp.std.c.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, the result is always truncated towards zero. It will round towards the smallest absolute value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For unsigned and non-negative signed values, this is the same as floor (rounding towards -Infinity).&lt;/p&gt;\n    ","\n&lt;p&gt;Where the result is negative, C truncates towards 0 rather than flooring - I learnt this reading about why Python integer division always floors here: &lt;a href=&quot;http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html&quot; rel=&quot;noreferrer&quot;&gt;Why Python&apos;s Integer Division Floors&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Will result always be the floor of the division?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No. The result varies, but variation happens only for negative values.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;What is the defined behavior?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;To make it clear floor rounds towards negative infinity,while integer division rounds towards zero (truncates)&lt;/p&gt;\n\n&lt;p&gt;For positive values they are the same&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; integerDivisionResultPositive= &lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//= 1&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; flooringResultPositive= &lt;span class=&quot;hljs-built_in&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;125.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//=1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For negative value this is different&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; integerDivisionResultNegative= &lt;span class=&quot;hljs-number&quot;&gt;-125&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//=-1&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; flooringResultNegative= &lt;span class=&quot;hljs-built_in&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;-125.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//=-2.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know people have answered your question but in layman terms:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;5 / 2 = 2&lt;/code&gt; //since both 5 and 2 are integers and integers division always truncates decimals&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;5.0 / 2 or 5 / 2.0 or 5.0 /2.0 = 2.5&lt;/code&gt; //here either 5 or 2 or both has decimal hence the quotient you will get will be in decimal.&lt;/p&gt;\n    "],"id":507,"title":"What is the behavior of integer division?","content":"\n                \n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result;\n\nresult = &lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;result = &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will result always be the floor of the division? What is the defined behavior?&lt;/p&gt;\n    ","slug":"what-is-the-behavior-of-integer-division-1657388222571","postType":"QUESTION","createdAt":"2022-07-09T17:37:02.000Z","updatedAt":"2022-07-09T17:37:02.000Z","tags":[{"id":2523,"name":"c99","slug":"c99","createdAt":"2022-07-09T17:37:02.000Z","updatedAt":"2022-07-09T17:37:02.000Z","Questions_Tags":{"questionId":507,"tagId":2523}},{"id":2524,"name":"c89","slug":"c89","createdAt":"2022-07-09T17:37:02.000Z","updatedAt":"2022-07-09T17:37:02.000Z","Questions_Tags":{"questionId":507,"tagId":2524}}],"relatedQuestions":[{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571","tags":[{"name":"c99","Questions_Tags":{"questionId":507,"tagId":2523}},{"name":"c89","Questions_Tags":{"questionId":507,"tagId":2524}}]}]},"randomQuestions":[{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"When should static_cast, dynamic_cast, const_cast, and reinterpret_cast be used?","slug":"when-should-static_cast-dynamic_cast-const_cast-and-reinterpret_cast-be-used-1657388406205"},{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"What is the explicit promise construction antipattern and how do I avoid it?","slug":"what-is-the-explicit-promise-construction-antipattern-and-how-do-i-avoid-it-1657384436212"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"Numbering rows within groups in a data frame","slug":"numbering-rows-within-groups-in-a-data-frame-1657388556436"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"What is event bubbling and capturing?","slug":"what-is-event-bubbling-and-capturing-1657388059203"},{"title":"How does the \"this\" keyword work, and when should it be used?","slug":"how-does-the-\"this\"-keyword-work-and-when-should-it-be-used-1657384384385"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"What happens if you use the 32-bit int 0x80 Linux ABI in 64-bit code?","slug":"what-happens-if-you-use-the-32-bit-int-0x80-linux-abi-in-64-bit-code-1657388560485"},{"title":"Why is the command bound to a Button or event executed when declared?","slug":"why-is-the-command-bound-to-a-button-or-event-executed-when-declared-1657384872054"},{"title":"Performance optimization strategies of last resort [closed]","slug":"performance-optimization-strategies-of-last-resort-closed-1657388420614"},{"title":"Tkinter: AttributeError: NoneType object has no attribute <attribute name>","slug":"tkinter:-attributeerror:-nonetype-object-has-no-attribute-lessattribute-namegreater-1657385472410"},{"title":"Alternatives to gprof [closed]","slug":"alternatives-to-gprof-closed-1657388336554"}]},"__N_SSG":true}