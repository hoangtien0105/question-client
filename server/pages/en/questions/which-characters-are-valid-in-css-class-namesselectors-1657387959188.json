{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can check directly at the &lt;a href=&quot;http://www.w3.org/TR/CSS21/grammar.html#scanner&quot; rel=&quot;noreferrer&quot;&gt;CSS grammar&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Basically&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt;, a name must begin with an underscore (&lt;code&gt;_&lt;/code&gt;), a hyphen (&lt;code&gt;-&lt;/code&gt;), or a letter(&lt;code&gt;a&lt;/code&gt;&lt;code&gt;z&lt;/code&gt;), followed by any number of hyphens, underscores, letters, or numbers. There is a catch: if the first character is a hyphen, the second character must&lt;sup&gt;2&lt;/sup&gt; be a  letter or underscore, and the name must be at least 2 characters long.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;-?&lt;span class=&quot;hljs-selector-attr&quot;&gt;[_a-zA-Z]&lt;/span&gt;+&lt;span class=&quot;hljs-selector-attr&quot;&gt;[_a-zA-Z0-9-]&lt;/span&gt;*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In short, the previous rule translates to the following, extracted from the &lt;a href=&quot;https://www.w3.org/TR/CSS21/syndata.html#characters&quot; rel=&quot;noreferrer&quot;&gt;W3C spec.&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In CSS, identifiers (including element names, classes, and IDs in\nselectors) can contain only the characters [a-z0-9] and ISO 10646\ncharacters U+00A0 and higher, plus the hyphen (-) and the underscore\n(_); they cannot start with a digit, or a hyphen followed by a digit.\nIdentifiers can also contain escaped characters and any ISO 10646\ncharacter as a numeric code (see next item). For instance, the\nidentifier &quot;B&amp;amp;W?&quot; may be written as &quot;B&amp;amp;W?&quot; or &quot;B\\26 W\\3F&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Identifiers beginning with a hyphen or underscore are typically reserved for browser-specific extensions, as in &lt;code&gt;-moz-opacity&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; It&apos;s all made a bit more complicated by the inclusion of escaped unicode characters (that no one really uses).&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Note that, according to the grammar I linked, a rule starting with TWO hyphens, e.g. &lt;code&gt;--indent1&lt;/code&gt;, is invalid.  However, I&apos;m pretty sure I&apos;ve seen this in practice.&lt;/p&gt;\n    ","\n&lt;p&gt;To my surprise most answers here are wrong. It turns out that:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Any character except NUL is allowed in CSS class names in CSS.&lt;/strong&gt; (If CSS contains NUL (escaped or not), the result is undefined. [&lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#characters&quot; rel=&quot;noreferrer&quot;&gt;CSS-characters&lt;/a&gt;])&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/6592488/8554766&quot;&gt;Mathias Bynens&apos; answer&lt;/a&gt; links to &lt;a href=&quot;http://mathiasbynens.be/notes/css-escapes&quot; rel=&quot;noreferrer&quot;&gt;explanation&lt;/a&gt; and &lt;a href=&quot;http://mathiasbynens.be/demo/crazy-class&quot; rel=&quot;noreferrer&quot;&gt;demos&lt;/a&gt; showing how to use these names. &lt;em&gt;Written down&lt;/em&gt; in CSS code, a class name &lt;em&gt;may need escaping&lt;/em&gt;, but that doesnt change the class name. E.g. an unnecessarily over-escaped representation will look different from other representations of that name, but it still refers to the same class name.&lt;/p&gt;\n\n&lt;p&gt;Most other (programming) languages dont have that concept of escaping variable names (identifiers), so all representations of a variable have to look the same. This is not the case in CSS.&lt;/p&gt;\n\n&lt;p&gt;Note that in HTML there is no way to include &lt;a href=&quot;http://www.w3.org/TR/html/infrastructure.html#space-character&quot; rel=&quot;noreferrer&quot;&gt;space characters (space, tab, line feed, form feed and carriage return)&lt;/a&gt; in a &lt;a href=&quot;http://www.w3.org/TR/html/dom.html#classes&quot; rel=&quot;noreferrer&quot;&gt;class name attribute&lt;/a&gt;, because they already separate classes from each other.&lt;/p&gt;\n\n&lt;p&gt;So, if you need to turn a random string into a CSS class name: take care of NUL and space, and escape (accordingly for CSS or HTML). Done.&lt;/p&gt;\n    ","\n&lt;p&gt;Ive answered your question in-depth here: &lt;a href=&quot;http://mathiasbynens.be/notes/css-escapes&quot; rel=&quot;noreferrer&quot;&gt;http://mathiasbynens.be/notes/css-escapes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The article also explains how to escape any character in CSS (and JavaScript), and I made &lt;a href=&quot;http://mothereff.in/css-escapes#0~!%40%24%25%5E%26%2a%28%29%5f%2B-%3D%2C.%2F%27%3B%3A%22%3F%3E%3C%5B%5D%5C%7B%7D%7C%60%23&quot; rel=&quot;noreferrer&quot;&gt;a handy tool&lt;/a&gt; for this as well. From that page:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If you were to give an element an ID value of &lt;code&gt;~!@$%^&amp;amp;*()_+-=,./&apos;;:&quot;?&amp;gt;&amp;lt;[]{}|`#&lt;/code&gt;, the selector would look like this:&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&amp;lt;style&amp;gt;\n  #\\~\\!\\@\\$\\%\\^\\&amp;amp;\\*\\(\\)\\_\\+-\\=\\,\\.\\/\\&apos;\\;\\:\\&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\?\\&amp;gt;\\&amp;lt;\\[\\]\\\\\\{\\}\\|\\`\\#\n  {\n    background: hotpink;\n  }\n&amp;lt;/style&amp;gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&lt;strong&gt;JavaScript:&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// document.getElementById or similar&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;~!@$%^&amp;amp;*()_+-=,./\\&apos;;:&quot;?&amp;gt;&amp;lt;[]\\\\{}|`#&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// document.querySelector or similar&lt;/span&gt;\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#\\\\~\\\\!\\\\@\\\\$\\\\%\\\\^\\\\&amp;amp;\\\\*\\\\(\\\\)\\\\_\\\\+-\\\\=\\\\,\\\\.\\\\/\\\\\\&apos;\\\\;\\\\:\\\\&quot;\\\\?\\\\&amp;gt;\\\\&amp;lt;\\\\[\\\\]\\\\\\\\\\\\{\\\\}\\\\|\\\\`\\\\#&apos;&lt;/span&gt;);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Read the &lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#characters&quot; rel=&quot;noreferrer&quot;&gt;W3C spec&lt;/a&gt;. (this is CSS 2.1, find the appropriate version for your assumption of browsers)&lt;/p&gt;\n\n&lt;p&gt;edit: relevant paragraph follows:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In CSS, identifiers  (including\n  element names, classes, and IDs in\n  selectors) can contain only the\n  characters [a-z0-9] and ISO 10646\n  characters U+00A1 and higher, plus the\n  hyphen (-) and the underscore (_);\n  they cannot start with a digit, or a\n  hyphen followed by a digit.\n  Identifiers can also contain escaped\n  characters and any ISO 10646 character\n  as a numeric code (see next item). For\n  instance, the identifier &quot;B&amp;amp;W?&quot; may be\n  written as &quot;B\\&amp;amp;W\\?&quot; or &quot;B\\26 W\\3F&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;edit 2: as @mipadi points out in Triptych&apos;s answer, there&apos;s this &lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords&quot; rel=&quot;noreferrer&quot;&gt;caveat&lt;/a&gt;, also in the same webpage:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In CSS, identifiers may begin with &apos;-&apos;\n  (dash) or &apos;_&apos; (underscore). Keywords\n  and property names beginning with &apos;-&apos;\n  or &apos;_&apos; are reserved for\n  vendor-specific extensions. Such\n  vendor-specific extensions should have\n  one of the following formats:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; + vendor identifier + &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; + meaningful &lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; \n&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt; + vendor identifier + &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; + meaningful &lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Example(s):&lt;/p&gt;\n  \n  &lt;p&gt;For example, if XYZ organization added\n  a property to describe the color of\n  the border on the East side of the\n  display, they might call it\n  -xyz-border-east-color.&lt;/p&gt;\n  \n  &lt;p&gt;Other known examples:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt; -moz-&lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;\n -moz-&lt;span class=&quot;hljs-attribute&quot;&gt;border-radius&lt;/span&gt;\n -wap-accesskey\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;An initial dash or underscore is\n  guaranteed never to be used in a\n  property or keyword by any current or\n  future level of CSS. Thus typical CSS\n  implementations may not recognize such\n  properties and may ignore them\n  according to the rules for handling\n  parsing errors. However, because the\n  initial dash or underscore is part of\n  the grammar, CSS 2.1 implementers\n  should always be able to use a\n  CSS-conforming parser, whether or not\n  they support any vendor-specific\n  extensions.&lt;/p&gt;\n  \n  &lt;p&gt;Authors should avoid vendor-specific\n  extensions&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The complete regular expression is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;-&lt;span class=&quot;hljs-string&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;?:&lt;/span&gt;[_a-z]|&lt;span class=&quot;hljs-params&quot;&gt;[\\200-\\377]&lt;/span&gt;|\\\\[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-9a-f]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}(\\r\\n|&lt;span class=&quot;hljs-params&quot;&gt;[ \\t\\r\\n\\f])?&lt;/span&gt;|\\\\[^\\r\\n\\f0-9a-f])(&lt;span class=&quot;hljs-string&quot;&gt;?:&lt;/span&gt;[_a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]|&lt;span class=&quot;hljs-params&quot;&gt;[\\200-\\377]&lt;/span&gt;|\\\\[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-9a-f]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}(\\r\\n|&lt;span class=&quot;hljs-params&quot;&gt;[ \\t\\r\\n\\f])?&lt;/span&gt;|\\\\[^\\r\\n\\f0-9a-f])*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So all of your listed character except &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; are not allowed if used directly. But you can encode them using a backslash &lt;code&gt;foo\\~bar&lt;/code&gt; or using the unicode notation &lt;code&gt;foo\\7E bar&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For those looking for a workaround, you can use an attribute selector, for instance, if your class begins with a number. Change:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;.&lt;span class=&quot;hljs-number&quot;&gt;000000&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;../../images/common/000000-0.8.png&lt;/span&gt;);} &lt;span class=&quot;hljs-comment&quot;&gt;/* DOESN&apos;T WORK!! */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;to this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;000000-8&quot;&lt;/span&gt;]&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;../../images/common/000000-0.8.png&lt;/span&gt;);} &lt;span class=&quot;hljs-comment&quot;&gt;/* WORKS :) */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also, if there are multiple classes, you will need to specify them in selector or use the &lt;code&gt;~=&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[class~=&lt;span class=&quot;hljs-string&quot;&gt;&quot;000000-8&quot;&lt;/span&gt;]&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;../../images/common/000000-0.8.png&lt;/span&gt;);}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Sources:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://benfrain.com/when-and-where-you-can-use-numbers-in-id-and-class-names/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://benfrain.com/when-and-where-you-can-use-numbers-in-id-and-class-names/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21227702/is-there-a-workaround-to-make-css-classes-with-names-that-start-with-numbers-val&quot;&gt;Is there a workaround to make CSS classes with names that start with numbers valid?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;My understanding is that the underscore is technically valid. Check out:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/underscores_in_class_and_id_names&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en/underscores_in_class_and_id_names&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&quot;...errata to the specification published in early 2001 made underscores legal for the first time.&quot;&lt;/p&gt;\n\n&lt;p&gt;The article linked above says never use them, then gives a list of browsers that don&apos;t support them, all of which are, in terms of numbers of users at least, long-redundant.&lt;/p&gt;\n    ","\n&lt;p&gt;For HTML5/CSS3 classes and IDs can start with numbers.&lt;/p&gt;\n    ","\n&lt;p&gt;We can use all characters as class name. Even like &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; Just we have to escape it with &lt;code&gt;\\&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\.&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\&lt;span class=&quot;hljs-selector-id&quot;&gt;#123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\&lt;span class=&quot;hljs-keyword&quot;&gt;@123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: green;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: brown;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\`&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: purple;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\~&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: tomato;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test.123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test.123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test#123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test#123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test@123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test@123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&amp;lt;123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&amp;lt;123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test`123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test`123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test~123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test~123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Going off of @Triptych&apos;s answer, you can use the following 2 regex matches to make a string valid:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[^a-z0-9A-Z_-]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a reverse match that selects anything that isn&apos;t a letter, number, dash or underscore for easy removal.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;^-*&lt;span class=&quot;hljs-selector-attr&quot;&gt;[0-9]&lt;/span&gt;+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This matches 0 or 1 dashes followed by 1 or more numbers at the beginning of a string, also for easy removal.&lt;/p&gt;\n\n&lt;p&gt;How I use it in PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Make alphanumeric with dashes and underscores (removes all other characters)&lt;/span&gt;\n$&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;preg_replace&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/[^a-z0-9A-Z_-]/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, $&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//Classes only begin with an underscore or letter&lt;/span&gt;\n$&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;preg_replace&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/^-*[0-9]+/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, $&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//Make sure the string is 2 or more characters long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt;= strlen($&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;) ? $&lt;span class=&quot;hljs-title&quot;&gt;class&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;&apos;&apos;;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I &lt;strong&gt;would not recommend to use anything except A-z, _- and 0-9&lt;/strong&gt;, while it&apos;s just easier to code with those symbols. Also do not start classes with &lt;code&gt;-&lt;/code&gt; while those classes are usually browser-specific flags. To avoid any issues with IDE autocompletion, less complexity when you may need to generate those class names with some other code for whatever reason. Maybe some transpiling software may not work etc. etc.&lt;/p&gt;\n&lt;p&gt;Yet CSS is quite loose on this. You can use any symbols, even emoji works.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n.{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt; solid blue;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: hidden;\n}\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/oMC5Q.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/oMC5Q.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "],"id":430,"title":"Which characters are valid in CSS class names/selectors?","content":"\n                \n&lt;p&gt;What characters/symbols are allowed within the &lt;strong&gt;CSS&lt;/strong&gt; class selectors?&lt;br&gt;\nI know that the following characters are &lt;em&gt;invalid&lt;/em&gt;, but what characters are &lt;em&gt;valid&lt;/em&gt;?&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;~ ! @ &lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;% ^ &amp;amp; * ( ) + = , . / &lt;span class=&quot;hljs-string&quot;&gt;&apos; ; : &quot; ? &amp;gt; &amp;lt; [ ] \\ { } | ` #\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188","postType":"QUESTION","createdAt":"2022-07-09T17:32:39.000Z","updatedAt":"2022-07-09T17:32:39.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"\"Thinking in AngularJS\" if I have a jQuery background? [closed]","slug":"\"thinking-in-angularjs\"-if-i-have-a-jquery-background-closed-1657384761159"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"What does if __name__ == \"__main__\": do?","slug":"what-does-if-__name__-\"__main__\":-do-1657384825815"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"Transitions on the CSS display property","slug":"transitions-on-the-css-display-property-1657387761601"},{"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111"},{"title":"How to use PHP's password_hash to hash and verify passwords","slug":"how-to-use-php's-password_hash-to-hash-and-verify-passwords-1657387808784"},{"title":"How to calculate the difference between two dates using PHP?","slug":"how-to-calculate-the-difference-between-two-dates-using-php-1657387409560"},{"title":"Tkinter: AttributeError: NoneType object has no attribute <attribute name>","slug":"tkinter:-attributeerror:-nonetype-object-has-no-attribute-lessattribute-namegreater-1657385472410"},{"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233"},{"title":"Why are these constructs using pre and post-increment undefined behavior?","slug":"why-are-these-constructs-using-pre-and-post-increment-undefined-behavior-1657384520109"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"Importing files from different folder","slug":"importing-files-from-different-folder-1657388203798"},{"title":"When to use LinkedList over ArrayList in Java?","slug":"when-to-use-linkedlist-over-arraylist-in-java-1657388107480"},{"title":"\"is\" operator behaves unexpectedly with integers","slug":"\"is\"-operator-behaves-unexpectedly-with-integers-1657387563823"},{"title":"Asking the user for input until they give a valid response","slug":"asking-the-user-for-input-until-they-give-a-valid-response-1657384376162"}]},"__N_SSG":true}