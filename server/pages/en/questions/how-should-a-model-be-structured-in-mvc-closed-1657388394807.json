{"pageProps":{"data":{"answer":["\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;sub&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; the following is a description of how I understand MVC-like patterns in the context of PHP-based web applications. All the external links that are used in the content are there to explain terms and concepts, and &lt;strong&gt;not&lt;/strong&gt; to imply my own credibility on the subject.&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The first thing that I must clear up is: &lt;strong&gt;the model is a layer&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Second: there is a difference between &lt;em&gt;classical MVC&lt;/em&gt; and what we use in web development. &lt;a href=&quot;https://stackoverflow.com/a/7622038/727208&quot;&gt;Here&apos;s&lt;/a&gt; a bit of an older answer I wrote, which briefly describes how they are different.&lt;/p&gt;\n\n&lt;h3&gt;What a model is NOT:&lt;/h3&gt;\n\n&lt;p&gt;The model is not a class or any single object. It is a very common mistake to make &lt;em&gt;(I did too, though the original answer was written when I began to learn otherwise)&lt;/em&gt;, because most frameworks perpetuate this misconception.&lt;/p&gt;\n\n&lt;p&gt;Neither is it an Object-Relational Mapping technique (ORM) nor an abstraction of database tables. Anyone who tells you otherwise is most likely trying to &lt;em&gt;&apos;sell&apos;&lt;/em&gt; another brand-new ORM or a whole framework.&lt;/p&gt;\n\n&lt;h3&gt;What a model is:&lt;/h3&gt;\n\n&lt;p&gt;In proper MVC adaptation, the M contains all the domain business logic and the &lt;em&gt;Model Layer&lt;/em&gt; is &lt;strong&gt;mostly&lt;/strong&gt; made from three types of structures:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?DomainObject&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Domain Objects&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A domain object is a logical container of purely domain information; it usually represents a logical entity in the problem domain space. Commonly referred to as &lt;em&gt;business logic&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This would be where you define how to validate data before sending an invoice, or to compute the total cost of an order. At the same time, &lt;em&gt;Domain Objects&lt;/em&gt; are completely unaware of storage - neither from &lt;em&gt;where&lt;/em&gt; (SQL database, REST API, text file, etc.) nor even &lt;em&gt;if&lt;/em&gt; they get saved or retrieved.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/eaaCatalog/dataMapper.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Data Mappers&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;These objects are only responsible for the storage. If you store information in a database, this would be where the SQL lives. Or maybe you use an XML file to store data, and your &lt;em&gt;Data Mappers&lt;/em&gt; are parsing from and to XML files.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/eaaCatalog/serviceLayer.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Services&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can think of them as &quot;higher level Domain Objects&quot;, but instead of business logic, &lt;em&gt;Services&lt;/em&gt; are responsible for interaction between &lt;em&gt;Domain Objects&lt;/em&gt; and &lt;em&gt;Mappers&lt;/em&gt;. These structures end up creating a &quot;public&quot; interface for interacting with the domain business logic. You can avoid them, but at the penalty of leaking some domain logic into &lt;em&gt;Controllers&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;There is a related answer to this subject in the &lt;a href=&quot;https://stackoverflow.com/a/9685039/727208&quot;&gt;ACL implementation&lt;/a&gt; question - it might be useful.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The communication between the model layer and other parts of the MVC triad should happen only through &lt;em&gt;Services&lt;/em&gt;. The clear separation has a few additional benefits:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;it helps to enforce the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;noreferrer&quot;&gt;single responsibility principle&lt;/a&gt; (SRP)&lt;/li&gt;\n&lt;li&gt;provides additional &apos;wiggle room&apos; in case the logic changes&lt;/li&gt;\n&lt;li&gt;keeps the controller as simple as possible&lt;/li&gt;\n&lt;li&gt;gives a clear blueprint, if you ever need an external API&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;h1&gt;How to interact with a model?&lt;/h1&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;sub&gt;&lt;em&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; watch lectures &lt;a href=&quot;http://www.youtube.com/watch?v=-FRm3VPhseI&quot; rel=&quot;noreferrer&quot;&gt;&quot;Global State and Singletons&quot;&lt;/a&gt; and &lt;a href=&quot;http://www.youtube.com/watch?v=RlfLCWKxHJ0&quot; rel=&quot;noreferrer&quot;&gt;&quot;Don&apos;t Look For Things!&quot;&lt;/a&gt; from the Clean Code Talks.&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h3&gt;Gaining access to service instances&lt;/h3&gt;\n\n&lt;p&gt;For both the &lt;em&gt;View&lt;/em&gt; and &lt;em&gt;Controller&lt;/em&gt; instances (what you could call: &quot;UI layer&quot;) to have access these services,  there are two general approaches: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;You can inject the required services in the constructors of your views and controllers directly, preferably using a DI container. &lt;/li&gt;\n&lt;li&gt;Using a factory for services as a mandatory dependency for all of your views and controllers. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;As you might suspect, the DI container is a lot more elegant solution (while not being the easiest for a beginner). The two libraries, that I recommend considering for this functionality would be Syfmony&apos;s standalone &lt;a href=&quot;http://symfony.com/doc/master/components/dependency_injection.html&quot; rel=&quot;noreferrer&quot;&gt;DependencyInjection component&lt;/a&gt; or &lt;a href=&quot;https://github.com/rdlowrey/auryn&quot; rel=&quot;noreferrer&quot;&gt;Auryn&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;Both the solutions using a factory and a DI container would let you also share the instances of various servers to be shared between the selected controller and view for a given request-response cycle.&lt;/p&gt;\n\n&lt;h3&gt;Alteration of model&apos;s state&lt;/h3&gt;\n\n&lt;p&gt;Now that you can access to the model layer in the controllers, you need to start actually using them: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;postLogin&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Request &lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;identification-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;findIdentityByEmailAddress&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;identification-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;loginWithPassword&lt;/span&gt;(\n        &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;,\n        &lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;)\n    );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your controllers have a very clear task: take the user input and, based on this input, change the current state of business logic. In this example the states that are changed between are &quot;anonymous user&quot; and &quot;logged in user&quot;. &lt;/p&gt;\n\n&lt;p&gt;Controller is not responsible for validating user&apos;s input, because that is part of business rules and controller is definitely not calling SQL queries, like what you would see &lt;a href=&quot;https://stackoverflow.com/questions/44535565/codeigniniter-insert-data-through-models-and-controller&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/questions/27025412/loading-multiple-select-options-into-array&quot;&gt;here&lt;/a&gt; (please don&apos;t hate on them, they are misguided, not evil).&lt;/p&gt;\n\n&lt;h3&gt;Showing user the state-change.&lt;/h3&gt;\n\n&lt;p&gt;Ok, user has logged in (or failed). &lt;a href=&quot;http://i0.kym-cdn.com/photos/images/original/001/142/233/897.gif&quot; rel=&quot;noreferrer&quot;&gt;Now what?&lt;/a&gt; Said user is still unaware of it. So you need to actually produce a response and that is the responsibility of a view. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;postLogin&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$path&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;/login&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;identification-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;isUserLoggedIn&lt;/span&gt;()) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$path&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;/dashboard&apos;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RedirectResponse&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$path&lt;/span&gt;); \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, the view produced one of two possible responses, based on the current state of model layer. For a different use-case you would have the view picking different templates to render, based on something like &quot;current selected of article&quot; .&lt;/p&gt;\n\n&lt;p&gt;The presentation layer can actually get quite elaborate, as described here: &lt;a href=&quot;https://stackoverflow.com/a/16596704/727208&quot;&gt;Understanding MVC Views in PHP&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;But I am just making a REST API!&lt;/h3&gt;\n\n&lt;p&gt;Of course, there are situations, when this is a overkill.&lt;/p&gt;\n\n&lt;p&gt;MVC is just a concrete solution for &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot; rel=&quot;noreferrer&quot;&gt;Separation of Concerns&lt;/a&gt; principle. &lt;em&gt;MVC separates user interface from the business logic, and it in the UI it separated handling of user input and the presentation.&lt;/em&gt; This is crucial. While often people describe it as a &quot;triad&quot;, it&apos;s not actually made up from three independent parts. The structure is more like this: &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/iEn76.png&quot; alt=&quot;MVC separation&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;It means, that, when your presentation layer&apos;s logic is close to none-existent, the pragmatic approach is to keep them as single layer. It also can substantially simplify some aspects of model layer. &lt;/p&gt;\n\n&lt;p&gt;Using this approach the login example (for an API) can be written as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;postLogin&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Request &lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ok&apos;&lt;/span&gt;,\n    ];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;identification-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;findIdentityByEmailAddress&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$token&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;identification-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;loginWithPassword&lt;/span&gt;(\n            &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;,\n            &lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;)\n        );\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FailedIdentification &lt;span class=&quot;hljs-variable&quot;&gt;$exception&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = [\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;message&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Login failed!&apos;&lt;/span&gt;,\n        ]\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JsonResponse&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this is not sustainable, when you have complicate logic for rendering a response body, this simplification is very useful for more trivial scenarios. But &lt;strong&gt;be warned&lt;/strong&gt;, this approach will become a nightmare, when attempting to use in large codebases with complex presentation logic.&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;h1&gt;How to build the model?&lt;/h1&gt;\n\n&lt;p&gt;Since there is not a single &quot;Model&quot; class (as explained above), you really do not &quot;build the model&quot;. Instead you start from making &lt;em&gt;Services&lt;/em&gt;, which are able to perform certain methods. And then implement &lt;em&gt;Domain Objects&lt;/em&gt; and &lt;em&gt;Mappers&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h3&gt;An example of a service method:&lt;/h3&gt;\n\n&lt;p&gt;In the both approaches above there was this login method for the identification service. What would it actually look like. I am using a slightly modified version of the same functionality from &lt;a href=&quot;https://github.com/teresko/palladium&quot; rel=&quot;noreferrer&quot;&gt;a library&lt;/a&gt;, that I wrote .. because I am lazy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;loginWithPassword&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Identity &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;matchPassword&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;logWrongPasswordNotice&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;, [\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getEmailAddress&lt;/span&gt;(),\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, // this is the wrong password\n        ]);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PasswordMismatch&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setPassword&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;updateIdentityOnUse&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$cookie&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;createCookieIdentity&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;logger-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;login successful&apos;&lt;/span&gt;, [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt; =&amp;gt; [\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getEmailAddress&lt;/span&gt;(),\n        ],\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt; =&amp;gt; [\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;account&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getAccountId&lt;/span&gt;(),\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;identity&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getId&lt;/span&gt;(),\n        ],\n    ]);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$cookie&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getToken&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, at this level of abstraction, there is no indication of where the data was fetched from. It might be a database, but it also might be just a mock object for testing purposes. Even the data mappers, that are actually used for it, are hidden away in the &lt;code&gt;private&lt;/code&gt; methods of this service.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;changeIdentityStatus&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Entity\\Identity &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$status&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setStatus&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$status&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setLastUsed&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time&lt;/span&gt;());\n    &lt;span class=&quot;hljs-variable&quot;&gt;$mapper&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;mapperFactory-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Mapper\\Identity&lt;/span&gt;::&lt;span class=&quot;hljs-variable language_&quot;&gt;class&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$mapper&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;store&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$identity&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Ways of creating mappers&lt;/h3&gt;\n\n&lt;p&gt;To implement an abstraction of persistence, on the most flexible approaches is to create custom &lt;a href=&quot;http://martinfowler.com/eaaCatalog/dataMapper.html&quot; rel=&quot;noreferrer&quot;&gt;data mappers&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://ptgmedia.pearsoncmg.com/images/chap3_0321127420/elementLinks/03fig04.gif&quot; alt=&quot;Mapper diagram&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;From: &lt;a href=&quot;https://martinfowler.com/books/eaa.html&quot; rel=&quot;noreferrer&quot;&gt;PoEAA&lt;/a&gt; book&lt;/sub&gt;&lt;/p&gt;\n\n&lt;p&gt;In practice they are implemented for interaction with specific classes or superclasses. Lets say you have &lt;code&gt;Customer&lt;/code&gt; and &lt;code&gt;Admin&lt;/code&gt; in your code (both inheriting from a &lt;code&gt;User&lt;/code&gt; superclass). Both would probably end up having a separate matching mapper, since they contain different fields. But you will also end up with shared and commonly used operations. For example: updating the &lt;em&gt;&quot;last seen online&quot;&lt;/em&gt; time. And instead of making the existing mappers more convoluted, the more pragmatic approach is to have a general &quot;User Mapper&quot;, which only update that timestamp.&lt;/p&gt;\n\n&lt;h2&gt;Some additional comments:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Database tables and model&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;While sometimes there is a direct 1:1:1 relationship between a database table, &lt;em&gt;Domain Object&lt;/em&gt;, and &lt;em&gt;Mapper&lt;/em&gt;, in larger projects it might be less common than you expect:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Information used by a single &lt;em&gt;Domain Object&lt;/em&gt; might be mapped from different tables, while the object itself has no persistence in the database.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; if you are generating a monthly report. This would collect information from different of tables, but there is no magical &lt;code&gt;MonthlyReport&lt;/code&gt; table in the database.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A single &lt;em&gt;Mapper&lt;/em&gt; can affect multiple tables.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; when you are storing data from the &lt;code&gt;User&lt;/code&gt; object, this &lt;em&gt;Domain Object&lt;/em&gt; could contain collection of other domain objects - &lt;code&gt;Group&lt;/code&gt; instances. If you alter them and store the &lt;code&gt;User&lt;/code&gt;, the &lt;em&gt;Data Mapper&lt;/em&gt; will have to update and/or insert entries in multiple tables.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Data from a single &lt;em&gt;Domain Object&lt;/em&gt; is stored in more than one table.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; in large systems (think: a medium-sized social network), it might be pragmatic to store user authentication data and often-accessed data separately from larger chunks of content, which is rarely required. In that case you might still have a single &lt;code&gt;User&lt;/code&gt; class, but the information it contains would depend of whether full details were fetched.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For every &lt;em&gt;Domain Object&lt;/em&gt; there can be more than one mapper&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; you have a news site with a shared codebased for both public-facing and the management software. But, while both interfaces use the same &lt;code&gt;Article&lt;/code&gt; class, the management needs a lot more info populated in it. In this case you would have two separate mappers: &quot;internal&quot; and &quot;external&quot;. Each performing different queries, or even use different databases (as in master or slave).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;A view is not a template&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;View&lt;/em&gt; instances in MVC (if you are not using the MVP variation of the pattern) are responsible for the presentational logic. This means that each &lt;em&gt;View&lt;/em&gt; will usually juggle at least a few templates. It acquires data from the &lt;em&gt;Model Layer&lt;/em&gt; and then, based on the received information, chooses a template and sets values.&lt;/p&gt;\n\n&lt;p&gt;One of the benefits you gain from this is re-usability. If you create a &lt;code&gt;ListView&lt;/code&gt; class, then, with well-written code, you can have the same class handing the presentation of user-list and comments below an article. Because they both have the same presentation logic. You just switch templates.&lt;/p&gt;\n\n&lt;p&gt;You can use either &lt;a href=&quot;http://codeangel.org/articles/simple-php-template-engine.html&quot; rel=&quot;noreferrer&quot;&gt;native PHP templates&lt;/a&gt; or use some third-party templating engine. There also might be some third-party libraries, which are able to fully replace &lt;em&gt;View&lt;/em&gt; instances.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;What about the old version of the answer?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The only major change is that, what is called &lt;em&gt;Model&lt;/em&gt; in the old version, is actually a &lt;em&gt;Service&lt;/em&gt;. The rest of the &quot;library analogy&quot; keeps up pretty well.&lt;/p&gt;\n\n&lt;p&gt;The only flaw that I see is that this would be a really strange library, because it would return you information from the book, but not let you touch the book itself, because otherwise the abstraction would start to &quot;leak&quot;. I might have to think of a more fitting analogy.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the relationship between &lt;em&gt;View&lt;/em&gt; and &lt;em&gt;Controller&lt;/em&gt; instances?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The MVC structure is composed of two layers: ui and model. The main structures in the &lt;em&gt;UI layer&lt;/em&gt; are views and controller. &lt;/p&gt;\n\n&lt;p&gt;When you are dealing with websites that use MVC design pattern, the best way is to have 1:1 relation between views and controllers. Each view represents a whole page in your website and it has a dedicated controller to handle all the incoming requests for that particular view.&lt;/p&gt;\n\n&lt;p&gt;For example, to represent an opened article, you would have &lt;code&gt;\\Application\\Controller\\Document&lt;/code&gt; and &lt;code&gt;\\Application\\View\\Document&lt;/code&gt;. This would contain all the main functionality for UI layer, when it comes to dealing with articles &lt;em&gt;(of course you might have some &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot; rel=&quot;noreferrer&quot;&gt;XHR&lt;/a&gt; components that are not directly related to articles)&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Everything that is &lt;strong&gt;business logic&lt;/strong&gt; belongs in a model, whether it is a database query, calculations, a REST call, etc.&lt;/p&gt;\n\n&lt;p&gt;You can have the data access in the model itself, the MVC pattern doesn&apos;t restrict you from doing that. You can sugar coat it with services, mappers and what not, but the actual definition of a model is a layer that handles business logic, nothing more, nothing less. It can be a class, a function, or a complete module with a gazillion objects if that&apos;s what you want.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s always easier to have a separate object that actually executes the database queries instead of having them being executed in the model directly: this will especially come in handy when unit testing (because of the easiness of injecting a mock database dependency in your model):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Database&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$_conn&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;_conn = &lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;;\n   }\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ExecuteObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n       &lt;span class=&quot;hljs-comment&quot;&gt;// stuff&lt;/span&gt;\n   }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Model&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$_db&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Database &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;_db = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;;\n   }\n}\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Model&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CheckUsername&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n       &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n       &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT Username FROM&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;usersTableName . &lt;span class=&quot;hljs-string&quot;&gt;&quot; WHERE ...&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;_db-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ExecuteObject&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;);\n   }\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Database&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$model&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$model&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;CheckUsername&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, in PHP, you rarely need to catch/rethrow exceptions because the backtrace is preserved, especially in a case like your example. Just let the exception be thrown and catch it in the controller instead.&lt;/p&gt;\n    ","\n&lt;p&gt;In Web-&quot;MVC&quot; you can do whatever you please.&lt;/p&gt;\n\n&lt;p&gt;The original concept &lt;sup&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1549857/simple-php-mvc-framework/1549970#1549970&quot;&gt;(1)&lt;/a&gt;&lt;/sup&gt; described the model as the business logic. It should represent the application state and enforce some data consistency. That approach is often described as &quot;fat model&quot;.&lt;/p&gt;\n\n&lt;p&gt;Most PHP frameworks follow a more shallow approach, where the model is just a database interface. But at the very least these models should still validate the incoming data and relations.&lt;/p&gt;\n\n&lt;p&gt;Either way, you&apos;re not very far off if you separate the SQL stuff or database calls into another layer. This way you only need to concern yourself with the real data/behaviour, not with the actual storage API. (It&apos;s however unreasonable to overdo it. You&apos;ll e.g. never be able to replace a database backend with a filestorage if that wasn&apos;t designed ahead.)&lt;/p&gt;\n    ","\n&lt;p&gt;More oftenly most of the applications will have data,display and processing part and we just put all  those in the letters &lt;code&gt;M&lt;/code&gt;,&lt;code&gt;V&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Model(&lt;code&gt;M&lt;/code&gt;)&lt;/em&gt;--&amp;gt;Has the attributes that holds state of application and it dont know any thing about &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;View(&lt;code&gt;V&lt;/code&gt;)&lt;/em&gt;--&amp;gt;Has displaying format for the application and and only knows about how-to-digest model on it and does not bother about &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Controller(&lt;code&gt;C&lt;/code&gt;)&lt;/em&gt;----&amp;gt;Has processing part of application and acts as wiring between M and V and it depends on both &lt;code&gt;M&lt;/code&gt;,&lt;code&gt;V&lt;/code&gt; unlike &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Altogether there is separation of concern between each.\nIn future any change or enhancements can be added very easily.&lt;/p&gt;\n    ","\n&lt;p&gt;In my case I have a database class that handle all the direct database interaction such as querying, fetching, and such. So if I had to change my database from &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQL&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQL&lt;/a&gt; to &lt;a href=&quot;http://en.wikipedia.org/wiki/PostgreSQL&quot; rel=&quot;nofollow noreferrer&quot;&gt;PostgreSQL&lt;/a&gt; there won&apos;t be any problem. So adding that extra layer can be useful.&lt;/p&gt;\n&lt;p&gt;Each table can have its own class and have its specific methods, but to actually get the data, it lets the database class handle it:&lt;/p&gt;\n&lt;h3&gt;File &lt;code&gt;Database.php&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Database&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$current_query&lt;/span&gt;;\n    ...\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;){\n            &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;open_connection&lt;/span&gt;();\n        }\n        &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-variable&quot;&gt;$current_query&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;){\n            &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;close_connection&lt;/span&gt;();\n            &lt;span class=&quot;hljs-comment&quot;&gt;// throw custom error&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// The query failed for some reason. here is query :: self::$current_query&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;There is an Error in the query.\\n&amp;lt;b&amp;gt;Query:&amp;lt;/b&amp;gt;\\n&lt;span class=&quot;hljs-subst&quot;&gt;{$sql}&lt;/span&gt;\\n&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;handleError&lt;/span&gt;();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n    }\n ....\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;find_by_sql&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result_set&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$obj_arr&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result_set&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$obj_arr&lt;/span&gt;[] = &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;instantiate&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$obj_arr&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Table object classL&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DomainPeer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Database&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getDomainInfoList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d.`id`,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d.`name`,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d.`shortName`,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d.`created_at`,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d.`updated_at`,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;count(q.id) as queries &apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;FROM `domains` d &apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;LEFT JOIN queries q on q.domainId = d.id &apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; .=&lt;span class=&quot;hljs-string&quot;&gt;&apos;GROUP BY d.id&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;find_by_sql&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n    }\n\n    ....\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I hope this example helps you create a good structure.&lt;/p&gt;\n    "],"id":551,"title":"How should a model be structured in MVC? [closed]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Closed&lt;/b&gt;. This question is &lt;a href=&quot;/help/closed-questions&quot;&gt;opinion-based&lt;/a&gt;. It is not currently accepting answers.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n            &lt;hr class=&quot;my12 outline-none baw0 bb bc-powder-400&quot;&gt;\n        &lt;div class=&quot;fw-nowrap fc-black-600&quot;&gt;\n            &lt;div class=&quot;d-flex fd-column lh-md&quot;&gt;\n                &lt;div class=&quot;mb0 d-flex&quot;&gt;\n                        &lt;div class=&quot;flex--item mr8&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLightbulb&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M15 6.38A6.48 6.48 0 0 0 7.78.04h-.02A6.49 6.49 0 0 0 2.05 5.6a6.31 6.31 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0 0 15 6.37ZM4.03 5.85A4.49 4.49 0 0 1 8 2.02a4.48 4.48 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 0 1-1.64-3.94ZM10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2h3Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/div&gt;\n                    &lt;p&gt;&lt;b&gt;Want to improve this question?&lt;/b&gt; Update the question so it can be answered with facts and citations by &lt;a href=&quot;/posts/5863870/edit&quot;&gt;editing this post&lt;/a&gt;.&lt;/p&gt;\n                &lt;/div&gt;\n                    &lt;div class=&quot;mb0 mt6 d-flex&quot;&gt;\n                        &lt;p class=&quot;ml24 pl2&quot;&gt;Closed &lt;span title=&quot;2018-11-22 00:32:07Z&quot; class=&quot;relativetime&quot;&gt;3 years ago&lt;/span&gt;.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;ml24 pl2&quot;&gt;\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n            &lt;div class=&quot;mt24 d-flex gsx gs8&quot;&gt;\n                    &lt;a class=&quot;s-btn s-btn__outlined flex--item js-post-notice-edit-post&quot; href=&quot;/posts/5863870/edit&quot;&gt;\n                        Improve this question\n                    &lt;/a&gt;\n            &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I am just getting a grasp on the MVC framework and I often wonder how much code should go in the model. I tend to have a data access class that has methods like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CheckUsername&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n        &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Username&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//// SQL&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT Username FROM&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;usersTableName . &lt;span class=&quot;hljs-string&quot;&gt;&quot; WHERE Username = :Username&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//// Execute statement&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ExecuteObject&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$connection&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$e&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$e&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My models tend to be an entity class that is mapped to the database table.&lt;/p&gt;\n\n&lt;p&gt;Should the model object have all the database mapped properties as well as the code above or is it OK to separate that code out that actually does the database work?&lt;/p&gt;\n\n&lt;p&gt;Will I end up having four layers?&lt;/p&gt;\n    ","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807","postType":"QUESTION","createdAt":"2022-07-09T17:39:54.000Z","updatedAt":"2022-07-09T17:39:54.000Z","tags":[{"id":2680,"name":"architecture","slug":"architecture","createdAt":"2022-07-09T17:39:55.000Z","updatedAt":"2022-07-09T17:39:55.000Z","Questions_Tags":{"questionId":551,"tagId":2680}},{"id":2681,"name":"model","slug":"model","createdAt":"2022-07-09T17:39:55.000Z","updatedAt":"2022-07-09T17:39:55.000Z","Questions_Tags":{"questionId":551,"tagId":2681}}],"relatedQuestions":[{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807","tags":[{"name":"architecture","Questions_Tags":{"questionId":551,"tagId":2680}},{"name":"model","Questions_Tags":{"questionId":551,"tagId":2681}}]}]},"randomQuestions":[{"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981"},{"title":"How do I access previous promise results in a .then() chain?","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"Variables are not behaving as expected","slug":"variables-are-not-behaving-as-expected-1657384865672"},{"title":"Cleansing User Passwords","slug":"cleansing-user-passwords-1657387365583"},{"title":"How do I use reflection to call a generic method?","slug":"how-do-i-use-reflection-to-call-a-generic-method-1657387256751"},{"title":"How do I expire a PHP session after 30 minutes?","slug":"how-do-i-expire-a-php-session-after-30-minutes-1657387990658"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"How to unnest (explode) a column in a pandas DataFrame, into multiple rows","slug":"how-to-unnest-(explode)-a-column-in-a-pandas-dataframe-into-multiple-rows-1657387806735"},{"title":"Use of 'prototype' vs. 'this' in JavaScript?","slug":"use-of-'prototype'-vs.-'this'-in-javascript-1657388117307"},{"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"With arrays, why is it the case that a[5] == 5[a]?","slug":"with-arrays-why-is-it-the-case-that-a5-5a-1657387956216"},{"title":"PHP code is not being executed, but the code shows in the browser source code","slug":"php-code-is-not-being-executed-but-the-code-shows-in-the-browser-source-code-1657384553581"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825"},{"title":"When should I use a return statement in ES6 arrow functions","slug":"when-should-i-use-a-return-statement-in-es6-arrow-functions-1657388472113"},{"title":"How to parse JSON in Java","slug":"how-to-parse-json-in-java-1657384575136"},{"title":"Why Use Integer Instead of Long?","slug":"why-use-integer-instead-of-long-1657388012352"}]},"__N_SSG":true}