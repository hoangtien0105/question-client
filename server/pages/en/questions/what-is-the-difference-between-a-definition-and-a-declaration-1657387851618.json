{"pageProps":{"data":{"answer":["\n&lt;p&gt;A &lt;strong&gt;&lt;em&gt;declaration&lt;/em&gt;&lt;/strong&gt; introduces an identifier and describes its type, be it a type, object, or function. A declaration is &lt;strong&gt;&lt;em&gt;what the compiler needs&lt;/em&gt;&lt;/strong&gt; to accept references to that identifier. These are declarations: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; bar;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// extern can be omitted for function declarations&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// no extern allowed for type declarations&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A &lt;strong&gt;&lt;em&gt;definition&lt;/em&gt;&lt;/strong&gt; actually instantiates/implements this identifier. It&apos;s &lt;strong&gt;&lt;em&gt;what the linker needs&lt;/em&gt;&lt;/strong&gt; in order to link references to those entities. These are definitions corresponding to the above declarations: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; bar;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lhs, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; rhs)&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lhs*rhs;}\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; d)&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i+d;}\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt; {&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A definition can be used in the place of a declaration. &lt;/p&gt;\n\n&lt;p&gt;An identifier can be &lt;em&gt;declared&lt;/em&gt; as often as you want. Thus, the following is legal in C and C++: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// the same as the two above&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, it must be &lt;em&gt;defined&lt;/em&gt; exactly once. If you forget to define something that&apos;s been declared and referenced somewhere, then the linker doesn&apos;t know what to link references to and complains about a missing symbols. If you define something more than once, then the linker doesn&apos;t know &lt;em&gt;which&lt;/em&gt; of the definitions to link references to and complains about duplicated symbols. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Since the debate what is a class &lt;em&gt;declaration&lt;/em&gt; vs. a class &lt;em&gt;definition&lt;/em&gt; in C++ keeps coming up (in answers and comments to other questions) , I&apos;ll paste a quote from the C++ standard here.&lt;br&gt;\nAt 3.1/2, C++03 says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A declaration is a definition unless it [...] is a class name declaration [...].&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;3.1/3 then gives a few examples. Amongst them:&lt;/p&gt;\n\n&lt;pre&gt;[Example: [...]\nstruct S { int a; int b; }; // defines S, S::a, and S::b [...]\nstruct S; // declares S\nend example\n&lt;/pre&gt;\n\n&lt;p&gt;To sum it up: The C++ standard considers &lt;code&gt;struct x;&lt;/code&gt; to be a &lt;em&gt;declaration&lt;/em&gt; and &lt;code&gt;struct x {};&lt;/code&gt; a &lt;em&gt;definition&lt;/em&gt;. (In other words, &lt;strong&gt;&lt;em&gt;&quot;forward declaration&quot; a misnomer&lt;/em&gt;&lt;/strong&gt;, since there are no other forms of class declarations in C++.) &lt;/p&gt;\n\n&lt;p&gt;Thanks to &lt;a href=&quot;https://stackoverflow.com/users/34509/johannes-schaub-litb&quot;&gt;litb (Johannes Schaub)&lt;/a&gt; who dug out the actual chapter and verse in one of his answers. &lt;/p&gt;\n    ","\n&lt;p&gt;From the C++ standard section 3.1:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A &lt;strong&gt;declaration&lt;/strong&gt; introduces names into a translation unit or redeclares names introduced by previous\n  declarations. A declaration specifies the interpretation and attributes of these names.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The next paragraph states (emphasis mine) that a declaration &lt;strong&gt;is a definition&lt;/strong&gt; unless...&lt;/p&gt;\n\n&lt;p&gt;... it declares a function without specifying the functions body:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// declares sqrt&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... it declares a static member within a class definition:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;X&lt;/span&gt;\n{&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;         &lt;span class=&quot;hljs-comment&quot;&gt;// defines a&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;  &lt;span class=&quot;hljs-comment&quot;&gt;// declares b&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... it declares a class name:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Y&lt;/span&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... it contains the &lt;code&gt;extern&lt;/code&gt; keyword without an initializer or function body:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// defines i&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j;  &lt;span class=&quot;hljs-comment&quot;&gt;// declares j&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// declares foo&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... or is a &lt;code&gt;typedef&lt;/code&gt; or &lt;code&gt;using&lt;/code&gt; statement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; LONG_32;  &lt;span class=&quot;hljs-comment&quot;&gt;// declares LONG_32&lt;/span&gt;\nusing namespace &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// declares std&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now for the big reason why it&apos;s important to understand the difference between a declaration and definition: the &lt;strong&gt;One Definition Rule&lt;/strong&gt;.  From section 3.2.1 of the C++ standard:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Declaration: &quot;Somewhere, there exists a foo.&quot;&lt;/p&gt;\n\n&lt;p&gt;Definition: &quot;...and here it is!&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;There are interesting edge cases in C++ (some of them in C too). Consider&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;T t;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That can be a definition or a declaration, depending on what type &lt;code&gt;T&lt;/code&gt; is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\nT t; &lt;span class=&quot;hljs-comment&quot;&gt;// declaration of function &quot;t&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;X&lt;/span&gt; {&lt;/span&gt; \n  T t; &lt;span class=&quot;hljs-comment&quot;&gt;// declaration of function &quot;t&quot;.&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; T;\nT t; &lt;span class=&quot;hljs-comment&quot;&gt;// definition of object &quot;t&quot;.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C++, when using templates, there is another edge case. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;template &amp;lt;typename T&amp;gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;X&lt;/span&gt; {&lt;/span&gt; \n  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; member; &lt;span class=&quot;hljs-comment&quot;&gt;// declaration&lt;/span&gt;\n};\n\ntemplate&amp;lt;typename T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X&amp;lt;T&amp;gt;::member; &lt;span class=&quot;hljs-comment&quot;&gt;// definition&lt;/span&gt;\n\ntemplate&amp;lt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;&amp;gt;::member; &lt;span class=&quot;hljs-comment&quot;&gt;// declaration!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The last declaration was &lt;em&gt;not&lt;/em&gt; a definition. It&apos;s the declaration of an explicit specialization of the static member of &lt;code&gt;X&amp;lt;bool&amp;gt;&lt;/code&gt;. It tells the compiler: &quot;If it comes to instantiating &lt;code&gt;X&amp;lt;bool&amp;gt;::member&lt;/code&gt;, then don&apos;t instantiate the definition of the member from the primary template, but use the definition found elsewhere&quot;. To make it a definition, you have to supply an initializer&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;template&amp;lt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;&amp;gt;::member = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// definition, belongs into a .cpp file.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Declaration&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Declarations tell the compiler that a\n  program element or name exists. A\n  declaration introduces one or more\n  names into a program. Declarations can\n  occur more than once in a program.\n  Therefore, classes, structures,\n  enumerated types, and other\n  user-defined types can be declared for\n  each compilation unit.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Definitions specify what code or data\n  the name describes. A name must be\n  declared before it can be used.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;From the C99 standard, 6.7(5):&lt;/p&gt;\n\n&lt;p&gt;A declaration specifies the interpretation and attributes of a set of identifiers. A &lt;em&gt;definition&lt;/em&gt; of an identifier is a declaration for that identifier that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for an object, causes storage to be reserved for that object;&lt;/li&gt;\n&lt;li&gt;for a function, includes the function body;&lt;/li&gt;\n&lt;li&gt;for an enumeration constant or typedef name, is the (only) declaration of the\nidentifier.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;From the C++ standard, 3.1(2):&lt;/p&gt;\n\n&lt;p&gt;A declaration is a &lt;em&gt;definition&lt;/em&gt; unless it declares a function without specifying the function&apos;s body, it contains the extern specifier or a linkage-specification and neither an initializer nor a function-body, it declares a static data member in a class declaration, it is a class name declaration, or it is a typedef declaration, a using-declaration, or a using-directive.&lt;/p&gt;\n\n&lt;p&gt;Then there are some examples.&lt;/p&gt;\n\n&lt;p&gt;So interestingly (or not, but I&apos;m slightly surprised by it), &lt;code&gt;typedef int myint;&lt;/code&gt; is a definition in C99, but only a declaration in C++.&lt;/p&gt;\n    ","\n&lt;p&gt;From wiki.answers.com:&lt;/p&gt;\n\n&lt;p&gt;The term declaration means (in C) that you are telling the compiler about type, size and in case of function declaration, type and size of its parameters of any variable, or user defined type or function in your program. &lt;em&gt;No&lt;/em&gt; space is reserved in memory for any variable in case of declaration. However compiler knows how much space to reserve in case a variable of this type is created.&lt;/p&gt;\n\n&lt;p&gt;for example, following are all declarations: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; \n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;hljs-title&quot;&gt;tagExample&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b; }; \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Definition on the other hand means that in additions to all the things that declaration does, space is also reserved in memory. You can say &quot;DEFINITION = DECLARATION + SPACE RESERVATION&quot; following are examples of definition: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b; } \n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;hljs-title&quot;&gt;tagExample&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;example&lt;/span&gt;;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;see &lt;a href=&quot;http://wiki.answers.com/Q/What_is_the_difference_between_declaration_and_a_definition_in_C&quot; rel=&quot;noreferrer&quot;&gt;Answers&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;C++11 Update&lt;/h2&gt;\n&lt;p&gt;Since I don&apos;t see an answer pertinent to C++11 here&apos;s one.&lt;/p&gt;\n&lt;p&gt;A declaration is a &lt;em&gt;definition&lt;/em&gt; unless it declares a/n:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;opaque enum - &lt;code&gt;enum X : int;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;template parameter - &lt;em&gt;T&lt;/em&gt; in &lt;code&gt;template&amp;lt;typename T&amp;gt; class MyArray;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;parameter declaration - &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; in &lt;code&gt;int add(int x, int y);&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;alias declaration - &lt;code&gt;using IntVector = std::vector&amp;lt;int&amp;gt;;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;static assert declaration - &lt;code&gt;static_assert(sizeof(int) == 4, &quot;Yikes!&quot;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;attribute declaration (implementation-defined)&lt;/li&gt;\n&lt;li&gt;empty declaration &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Additional clauses inherited from C++03 by the above list:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;function declaration - &lt;em&gt;add&lt;/em&gt; in &lt;code&gt;int add(int x, int y);&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;extern specifier containing declaration or a linkage specifier - &lt;code&gt;extern int a;&lt;/code&gt; or &lt;code&gt;extern &quot;C&quot; { ... };&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;static data member in a class - &lt;em&gt;x&lt;/em&gt; in &lt;code&gt;class C { static int x; };&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;class/struct declaration - &lt;code&gt;struct Point;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;typedef declaration - &lt;code&gt;typedef int Int;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;using declaration - &lt;code&gt;using std::cout;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;using directive - &lt;code&gt;using namespace NS;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;A template-declaration is a declaration. A template-declaration is also a definition if its declaration defines a function, a class, or a static data member.&lt;/p&gt;\n&lt;p&gt;Examples from the standard which differentiates between declaration and definition that I found helpful in understanding the nuances between them:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// except one all these are definitions&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;                                  &lt;span class=&quot;hljs-comment&quot;&gt;// defines a&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;                 &lt;span class=&quot;hljs-comment&quot;&gt;// defines c&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x + a; }          &lt;span class=&quot;hljs-comment&quot;&gt;// defines f and defines x&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;S&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b; };             &lt;span class=&quot;hljs-comment&quot;&gt;// defines S, S::a, and S::b&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;X&lt;/span&gt; {&lt;/span&gt;                              &lt;span class=&quot;hljs-comment&quot;&gt;// defines X&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;                              &lt;span class=&quot;hljs-comment&quot;&gt;// defines non-static data member x&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y;                       &lt;span class=&quot;hljs-comment&quot;&gt;// DECLARES static data member y&lt;/span&gt;\n    X(): x(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { }                       &lt;span class=&quot;hljs-comment&quot;&gt;// defines a constructor of X&lt;/span&gt;\n};\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X::y = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;                           &lt;span class=&quot;hljs-comment&quot;&gt;// defines X::y&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; {&lt;/span&gt; up , down };                     &lt;span class=&quot;hljs-comment&quot;&gt;// defines up and down&lt;/span&gt;\nnamespace N { &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; d; }                  &lt;span class=&quot;hljs-comment&quot;&gt;// defines N and N::d&lt;/span&gt;\nnamespace N1 = N;                       &lt;span class=&quot;hljs-comment&quot;&gt;// defines N1&lt;/span&gt;\nX anX;                                  &lt;span class=&quot;hljs-comment&quot;&gt;// defines anX&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// all these are declarations&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;                           &lt;span class=&quot;hljs-comment&quot;&gt;// declares a&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c;                     &lt;span class=&quot;hljs-comment&quot;&gt;// declares c&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;                             &lt;span class=&quot;hljs-comment&quot;&gt;// declares f&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;S&lt;/span&gt;;&lt;/span&gt;                               &lt;span class=&quot;hljs-comment&quot;&gt;// declares S&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; Int;                        &lt;span class=&quot;hljs-comment&quot;&gt;// declares Int&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; X anotherX;                      &lt;span class=&quot;hljs-comment&quot;&gt;// declares anotherX&lt;/span&gt;\nusing N::d;                             &lt;span class=&quot;hljs-comment&quot;&gt;// declares N::d&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// specific to C++11 - these are not from the standard&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;X&lt;/span&gt; :&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;;                           &lt;span class=&quot;hljs-comment&quot;&gt;// declares X with int as the underlying type&lt;/span&gt;\nusing IntVector = &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// declares IntVector as an alias to std::vector&amp;lt;int&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;static_assert&lt;/span&gt;(X::y == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Oops!&quot;&lt;/span&gt;);      &lt;span class=&quot;hljs-comment&quot;&gt;// declares a static_assert which can render the program ill-formed or have no effect like an empty declaration, depending on the result of expr&lt;/span&gt;\ntemplate &amp;lt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;C&lt;/span&gt;;&lt;/span&gt;             &lt;span class=&quot;hljs-comment&quot;&gt;// declares template class C&lt;/span&gt;\n;                                       &lt;span class=&quot;hljs-comment&quot;&gt;// declares nothing&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Definition :&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;      &lt;span class=&quot;hljs-comment&quot;&gt;// Declaration &lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;             &lt;span class=&quot;hljs-comment&quot;&gt;// Definition&lt;/span&gt;\na = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;             &lt;span class=&quot;hljs-comment&quot;&gt;// Initialization&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Definition &amp;amp; Initialization&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Definition associates the variable with a type and allocates memory, whereas declaration just specifies the type but doesn&apos;t allocate memory. Declaration is more useful when you want to refer the variable before definition. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;*Don&apos;t confuse definition with initialization. Both are different, initialization gives value to the variable. See the above example.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Following are some examples of definition.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; b;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; c;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now &lt;strong&gt;function declaration :&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the semicolon at the end of function so it says it is only a declaration. Compiler knows that somewhere in the program that function will be &lt;strong&gt;defined&lt;/strong&gt; with that prototype. Now if the compiler gets a function call something like this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b=fun(x,y,z);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compiler will throw an error saying that there is no such function. Because it doesn&apos;t has any prototype for that function.&lt;/p&gt;\n\n&lt;p&gt;Note the difference between two programs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Program 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;\n{\n     &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,a);\n}\nmain()\n{\n    print(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this, print function is declared and defined as well. Since function call is coming after the definition. Now see the next program.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Program 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt; &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// In this case this is essential&lt;/span&gt;\n main()\n {\n    print(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;\n {\n     &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,a);\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is essential because function call precedes definition so compiler must know whether there is any such function. So we declare the function which will inform the compiler.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Definition  :&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;This part of defining a function is called Definition. It says what to do inside the function. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,a);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To understand the nouns, let&apos;s focus on the verbs first.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;declare&lt;/strong&gt; -\nto announce officially; proclaim&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;define&lt;/strong&gt; - \nto show or describe (someone or something) clearly and completely&lt;/p&gt;\n\n&lt;p&gt;So, when you declare something, you just tell &lt;em&gt;what it is&lt;/em&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This line &lt;em&gt;declares&lt;/em&gt; a C function called &lt;code&gt;sum&lt;/code&gt; that takes two arguments of type &lt;code&gt;int&lt;/code&gt; and returns an &lt;code&gt;int&lt;/code&gt;. However, you can&apos;t use it yet.&lt;/p&gt;\n\n&lt;p&gt;When you provide &lt;em&gt;how it actually works&lt;/em&gt;, that&apos;s the definition of it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// definition&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x + y;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;definition means actual function written &amp;amp; declaration means simple declare function \nfor e.g. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//this is simple declaration&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n some statement;    \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this is definition of function myfunction &lt;/p&gt;\n    ","\n&lt;p&gt;Rule of thumb:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A &lt;strong&gt;declaration&lt;/strong&gt; tells the compiler how to interpret the variable&apos;s data in memory. This is needed for every access.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A &lt;strong&gt;definition&lt;/strong&gt; reserves the memory to make the variable existing. This has to happen exactly once before first access.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;To understand the difference between declaration and definition we need to see the assembly code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;uint8_t&lt;/span&gt;   ui8 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movb    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x45&lt;/span&gt;(%rbp)\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;         i = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movl    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x3c&lt;/span&gt;(%rbp)\n&lt;span class=&quot;hljs-type&quot;&gt;uint32_t&lt;/span&gt; ui32 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movl    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x38&lt;/span&gt;(%rbp)\n&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; ui64 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movq    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x10&lt;/span&gt;(%rbp)\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;   doub = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movsd   &lt;span class=&quot;hljs-number&quot;&gt;0x328&lt;/span&gt;(%rip),%xmm0        # &lt;span class=&quot;hljs-number&quot;&gt;0x400a20&lt;/span&gt;\n                        movsd   %xmm0,&lt;span class=&quot;hljs-number&quot;&gt;-0x8&lt;/span&gt;(%rbp)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and this is only definition:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;ui8 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;   |   movb    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x45&lt;/span&gt;(%rbp)\ni = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;     |   movl    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x3c&lt;/span&gt;(%rbp)\nui32 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movl    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x38&lt;/span&gt;(%rbp)\nui64 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movq    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x10&lt;/span&gt;(%rbp)\ndoub = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  |   movsd   &lt;span class=&quot;hljs-number&quot;&gt;0x328&lt;/span&gt;(%rip),%xmm0        # &lt;span class=&quot;hljs-number&quot;&gt;0x400a20&lt;/span&gt;\n               movsd   %xmm0,&lt;span class=&quot;hljs-number&quot;&gt;-0x8&lt;/span&gt;(%rbp)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see nothing change.&lt;/p&gt;\n\n&lt;p&gt;Declaration is different from definition because it gives information used only by the compiler. For example uint8_t tell the compiler to use asm function movb.&lt;/p&gt;\n\n&lt;p&gt;See that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;uint def;                  |  no instructions\n&lt;span class=&quot;hljs-title function_&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some stuff...&quot;&lt;/span&gt;)&lt;/span&gt;;   |  [...] callq   &lt;span class=&quot;hljs-number&quot;&gt;0x400450&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;@plt&amp;gt;\ndef=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;                     |  movb    $&lt;span class=&quot;hljs-number&quot;&gt;0x5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-0x45&lt;/span&gt;(%rbp)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Declaration haven&apos;t an equivalent instruction because it is no something to be executed.&lt;/p&gt;\n\n&lt;p&gt;Furthermore declaration tells the compiler the scope of the variable.&lt;/p&gt;\n\n&lt;p&gt;We can say that declaration is an information used by the compiler to establish the correct use of the variable and for how long some memory belongs to certain variable.&lt;/p&gt;\n    ","\n&lt;p&gt;Find similar answers here: &lt;a href=&quot;http://sickprogrammersarea.blogspot.in/2014/03/technical-interview-questions-on-c_6.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Technical Interview Questions in C&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A &lt;strong&gt;declaration&lt;/strong&gt; provides a name to the program; a &lt;strong&gt;definition&lt;/strong&gt; provides a unique description of an entity (e.g. type, instance, and function) within the program. Declarations can be repeated in a given scope, it introduces a name in a given scope. &lt;/p&gt;\n\n&lt;p&gt;A declaration is a definition unless:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Declaration declares a function without specifying its body,&lt;/li&gt;\n&lt;li&gt;Declaration contains an extern specifier and no initializer or function body,&lt;/li&gt;\n&lt;li&gt;Declaration is the declaration of a static class data member without a class definition,&lt;/li&gt;\n&lt;li&gt;Declaration is a class name definition,&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A definition is a declaration unless:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Definition defines a static class data member,&lt;/li&gt;\n&lt;li&gt;Definition defines a non-inline member function.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Couldnt you state in the most general terms possible, that a declaration is an identifier in which no storage is allocated and a definition actually allocates storage from a declared identifier? &lt;/p&gt;\n\n&lt;p&gt;One interesting thought - a template cannot allocate storage until the class or function is linked with the type information.  So is the template identifier a declaration or definition?  It should be a declaration since no storage is allocated, and you are simply &apos;prototyping&apos; the template class or function.&lt;/p&gt;\n    ","\n&lt;p&gt;This is going to sound really cheesy, but it&apos;s the best way I&apos;ve been able to keep the terms straight in my head:&lt;/p&gt;\n\n&lt;p&gt;Declaration: Picture Thomas Jefferson giving a speech... &quot;I HEREBY DECLARE THAT THIS FOO EXISTS IN THIS SOURCE CODE!!!&quot;&lt;/p&gt;\n\n&lt;p&gt;Definition: picture a dictionary, you are looking up Foo and what it actually means.&lt;/p&gt;\n    ","\n&lt;p&gt;A declaration presents a symbol name to the compiler. A definition is a declaration that allocates space for the symbol.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// function declaration (I know f exists)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*x; } &lt;span class=&quot;hljs-comment&quot;&gt;// declaration and definition&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;According to the GNU C library manual (&lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Header-Files.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.gnu.org/software/libc/manual/html_node/Header-Files.html&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In C, a declaration merely provides information that a function or variable  exists and gives its type. For a function declaration, information about the  types of its arguments might be provided as well. The purpose of declarations is to allow the compiler to correctly process references to the declared variables and functions. A definition, on the other hand, actually allocates storage for a variable or says what a function does.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Declaration&lt;/strong&gt; of a variable is for informing to the compiler the following information: name of the variable, type of value it holds and the initial value if any it takes. i.e., declaration gives details about the properties of a variable. Whereas, &lt;strong&gt;Definition&lt;/strong&gt; of a variable says where the variable gets stored. i.e., memory for the variable is allocated during the definition of the variable.&lt;/p&gt;\n    ","\n&lt;p&gt;The concept of Declaration and Definition will form a pitfall when you are using the extern storage class because your definition will be in some other location and you are declaring the variable in your local code file (page). One difference between C and C++ is that in C you the declarations are done normally at the beginning of a function or code page. In C++ it&apos;s not like that. You can declare at a place of your choice.&lt;/p&gt;\n    ","\n&lt;p&gt;My favorite example is &quot;int Num = 5&quot; here your variable is 1. defined as int 2. declared as Num and 3. instantiated with a value of five. We&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Define the type of an object, which may be built-in or a class or struct.&lt;/li&gt;\n&lt;li&gt;Declare the name of an object, so anything with a name has been declared which includes Variables, Funtions, etc.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A class or struct allows you to change how objects will be defined when it is later used. For example&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;One may declare a heterogeneous variable or array which are not specifically defined.&lt;/li&gt;\n&lt;li&gt;Using an offset in C++ you may define an object which does not have a declared name.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;When we learn programming these two terms are often confused because we often do both at the same time. &lt;/p&gt;\n    ","\n&lt;p&gt;Stages of an executable generation: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;(1) pre-processor -&amp;gt; (2) translator/compiler -&amp;gt; (3) linker&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In stage 2 (translator/compiler), declaration statements in our code tell to the compiler that these things we are going to use in future and you can find definition later, meaning is :&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;translator make sure that : &lt;strong&gt;what is what ?&lt;/strong&gt; means declaration &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and (3) stage (linker) needs definition to bind the things &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Linker make sure that : &lt;strong&gt;where is what ?&lt;/strong&gt; means definition&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;There are some very clear definitions sprinkled throughout K&amp;amp;R (2nd edition); it helps to put them in one place and read them as one:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;Definition&quot; refers to the place where the variable is created or assigned storage; &quot;declaration&quot; refers to the places where the nature of the variable is stated but no storage is allocated. [p. 33]&lt;/p&gt;\n  \n  &lt;p&gt;...&lt;/p&gt;\n  \n  &lt;p&gt;It is important to distinguish between the &lt;em&gt;declaration&lt;/em&gt; of an external variable and its &lt;em&gt;definition&lt;/em&gt;.  A declaration announces the properties of a variable (primarily its type); a definition also causes storage to be set aside.\n   If the lines&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; sp;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; val[MAXVAL]\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;appear outside of any function, they &lt;em&gt;define&lt;/em&gt; the external variables &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt;, cause storage to be set aside, and also serve as the declaration for the rest of that source file.&lt;/p&gt;\n  \n  &lt;p&gt;On the other hand, the lines&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; sp;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; val[];\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&lt;em&gt;declare&lt;/em&gt; for the rest of the source file that &lt;code&gt;sp&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; and that &lt;code&gt;val&lt;/code&gt; is a &lt;code&gt;double&lt;/code&gt; array (whose size is determined elsewhere), but they do not create the variables or reserve storage for them.&lt;/p&gt;\n  \n  &lt;p&gt;There must be only one &lt;em&gt;definition&lt;/em&gt; of an external variable among all the files that make up the source program. ... Array sizes must be specified with the definition, but are optional with an &lt;code&gt;extern&lt;/code&gt; declaration. [pp. 80-81]&lt;/p&gt;\n  \n  &lt;p&gt;...&lt;/p&gt;\n  \n  &lt;p&gt;Declarations specify the interpretation given to each identifier; they do not necessarily reserve storage associated with the identifier.  Declarations that reserve storage are called &lt;em&gt;definitions&lt;/em&gt;.   [p. 210]&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The declaration is when a primitive or object reference variable or method is created without assigning value or object.\nint a;\nfinal int a;&lt;/p&gt;\n&lt;p&gt;The definition means assigning the value or object respectively\nint a =10;&lt;/p&gt;\n&lt;p&gt;Initialization means allocating memory for a respective variable or object.&lt;/p&gt;\n    ","\n&lt;p&gt;Adding definition and declaration examples from the C++ standard document(from the section 3.1 Declarations and definitions)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Definitions:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;                       &lt;span class=&quot;hljs-comment&quot;&gt;// defines a&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// defines c&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x+a; } &lt;span class=&quot;hljs-comment&quot;&gt;// defines f and defines x&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;S&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b; };  &lt;span class=&quot;hljs-comment&quot;&gt;// defines S, S::a, and S::b&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;X&lt;/span&gt; {&lt;/span&gt;                   &lt;span class=&quot;hljs-comment&quot;&gt;// defines X&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;                   &lt;span class=&quot;hljs-comment&quot;&gt;// defines non-static data member x&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y;            &lt;span class=&quot;hljs-comment&quot;&gt;// DECLARES static data member y&lt;/span&gt;\n    X(): x(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { }            &lt;span class=&quot;hljs-comment&quot;&gt;// defines a constructor of X&lt;/span&gt;\n};\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X::y = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;                &lt;span class=&quot;hljs-comment&quot;&gt;// defines X::y&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; {&lt;/span&gt; up, down };           &lt;span class=&quot;hljs-comment&quot;&gt;// defines up and down&lt;/span&gt;\nnamespace N { &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; d; }       &lt;span class=&quot;hljs-comment&quot;&gt;// defines N and N::d&lt;/span&gt;\nnamespace N1 = N;            &lt;span class=&quot;hljs-comment&quot;&gt;// defines N1&lt;/span&gt;\nX anX;                       &lt;span class=&quot;hljs-comment&quot;&gt;// defines anX&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Declarations:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;                 &lt;span class=&quot;hljs-comment&quot;&gt;// declares a&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c;           &lt;span class=&quot;hljs-comment&quot;&gt;// declares c&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;                   &lt;span class=&quot;hljs-comment&quot;&gt;// declares f&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;S&lt;/span&gt;;&lt;/span&gt;                     &lt;span class=&quot;hljs-comment&quot;&gt;// declares S&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; Int;              &lt;span class=&quot;hljs-comment&quot;&gt;// declares Int&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; X anotherX;            &lt;span class=&quot;hljs-comment&quot;&gt;// declares anotherX&lt;/span&gt;\nusing N::d;                   &lt;span class=&quot;hljs-comment&quot;&gt;// declares d&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Declaration means give name and type to a variable (in case of variable declaration), eg: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or give name,return type and parameter(s) type to a function without body(in case of function declaration), eg:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;whereas definition means assign value to a variable (in case of variable definition), eg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;i = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or provide/add body(functionality) to a function is called function definition, eg: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a&amp;gt;b)   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;  \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;many time declaration and definition can be done together as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a&amp;gt;b)   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;    \n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In above cases we define and declare variable &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;function max()&lt;/code&gt;.&lt;/p&gt;\n    "],"id":396,"title":"What is the difference between a definition and a declaration?","content":"\n                \n&lt;p&gt;The meaning of both eludes me.&lt;/p&gt;\n    ","slug":"what-is-the-difference-between-a-definition-and-a-declaration-1657387851618","postType":"QUESTION","createdAt":"2022-07-09T17:30:51.000Z","updatedAt":"2022-07-09T17:30:51.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I print my Java object without getting \"SomeType@2f92e0f4\"?","slug":"how-do-i-print-my-java-object-without-getting-\"sometype@2f92e0f4\"-1657384731950"},{"title":"What is a debugger and how can it help me diagnose problems?","slug":"what-is-a-debugger-and-how-can-it-help-me-diagnose-problems-1657384472469"},{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":"How to avoid having class data shared among instances?","slug":"how-to-avoid-having-class-data-shared-among-instances-1657387687732"},{"title":"Removing duplicates in lists","slug":"removing-duplicates-in-lists-1657388207448"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"How do I pass a variable by reference?","slug":"how-do-i-pass-a-variable-by-reference-1657384657232"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"Why don't flex items shrink past content size?","slug":"why-don't-flex-items-shrink-past-content-size-1657384687282"},{"title":"The difference between bracket [ ] and double bracket [[ ]] for accessing the elements of a list or dataframe","slug":"the-difference-between-bracket-and-double-bracket-for-accessing-the-elements-of-a-list-or-dataframe-1657388451711"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"How do you use a variable in a regular expression?","slug":"how-do-you-use-a-variable-in-a-regular-expression-1657387939007"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"PHP - Failed to open stream : No such file or directory","slug":"php-failed-to-open-stream-:-no-such-file-or-directory-1657387872896"},{"title":"Can PHP PDO Statements accept the table or column name as parameter?","slug":"can-php-pdo-statements-accept-the-table-or-column-name-as-parameter-1657387478588"},{"title":"Transpose / reshape dataframe without \"timevar\" from long to wide format","slug":"transpose-reshape-dataframe-without-\"timevar\"-from-long-to-wide-format-1657388213347"}]},"__N_SSG":true}