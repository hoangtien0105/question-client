{"pageProps":{"data":{"answer":["\n&lt;p&gt;In Python 3, you can use the &lt;code&gt;sep=&lt;/code&gt; and &lt;code&gt;end=&lt;/code&gt; parameters of the &lt;a href=&quot;https://docs.python.org/library/functions.html#print&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n\n&lt;p&gt;To not add a newline to the end of the string:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To not add a space between all the function arguments you want to print:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can pass any string to either parameter, and you can use both parameters at the same time.&lt;/p&gt;\n\n&lt;p&gt;If you are having trouble with buffering, you can flush the output by adding &lt;code&gt;flush=True&lt;/code&gt; keyword argument:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, flush=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Python 2.6 and 2.7&lt;/h2&gt;\n\n&lt;p&gt;From Python 2.6 you can either import the &lt;code&gt;print&lt;/code&gt; function from Python 3 using the &lt;a href=&quot;https://docs.python.org/2/library/__future__.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__future__&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which allows you to use the Python 3 solution above.&lt;/p&gt;\n\n&lt;p&gt;However, note that the &lt;code&gt;flush&lt;/code&gt; keyword is not available in the version of the &lt;code&gt;print&lt;/code&gt; function imported from &lt;code&gt;__future__&lt;/code&gt; in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you&apos;ll still need to flush manually with a call to &lt;code&gt;sys.stdout.flush()&lt;/code&gt;. You&apos;ll also have to rewrite all other print statements in the file where you do this import.&lt;/p&gt;\n\n&lt;p&gt;Or you can use &lt;a href=&quot;https://docs.python.org/library/sys.html#sys.stdout&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sys.stdout.write()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may also need to call&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sys.stdout.flush()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to ensure &lt;code&gt;stdout&lt;/code&gt; is flushed immediately.&lt;/p&gt;\n    ","\n&lt;p&gt;For Python 2 and earlier, it should be as simple as described in &lt;em&gt;&lt;a href=&quot;http://legacy.python.org/search/hypermail/python-1992/0115.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Re: How does one print without a CR?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot; rel=&quot;nofollow noreferrer&quot;&gt;Guido van Rossum&lt;/a&gt; (paraphrased):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Is it possible to print something, but not automatically have a\ncarriage return appended to it?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Yes, append a comma after the last argument to print. For instance, this loop prints the numbers 0..9 on a line separated by spaces. Note the parameterless &quot;print&quot; that adds the final newline:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i,\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Note: The title of this question used to be something like &quot;How to printf in Python&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Since people may come here looking for it based on the title, Python also supports printf-style substitution:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;strings = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt; ]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Item %d: %s&quot;&lt;/span&gt; % (i, strings[i])\n...\nItem &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: one\nItem &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: two\nItem &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: three\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And, you can handily multiply string values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n..........\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the Python&amp;nbsp;3-style print function for Python&amp;nbsp;2.6+ &lt;em&gt;(it will also break any existing keyworded print statements in the same file)&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# For Python 2 to use the print() function, removing the print keyword&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To not ruin all your Python 2 print keywords, create a separate &lt;code&gt;printf.py&lt;/code&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# printf.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, *args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; % args, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, use it in your file:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; printf &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; printf\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    printf(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;done&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#..........done&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;More examples showing the printf style:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello %s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;)\nprintf(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%i %f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#hello world10 3.140000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How to print on the same line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n   sys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n   sys.stdout.flush()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function in Python 3.x has an optional &lt;code&gt;end&lt;/code&gt; parameter that lets you modify the ending character:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;HELLOHELLO&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;There&apos;s also &lt;code&gt;sep&lt;/code&gt; for separator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, sep=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;HELLOHELLOHELLO&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If you wanted to use this in Python 2.x just add this at the &lt;strong&gt;start&lt;/strong&gt; of your file:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;em&gt;functools.partial&lt;/em&gt; to create a new function called &lt;em&gt;printf&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; functools\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;printf = functools.partial(&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world\\n&quot;&lt;/span&gt;)\nHello world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is an easy way to wrap a function with default parameters.&lt;/p&gt;\n    ","\n&lt;p&gt;In Python 3+, &lt;a href=&quot;https://docs.python.org/library/functions.html#print&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; is a function. When you call&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python translates it to&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can change &lt;code&gt;end&lt;/code&gt; to whatever you want.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.x, you can just add &lt;code&gt;,&lt;/code&gt; at the end of the &lt;code&gt;print&lt;/code&gt; function, so it won&apos;t print on a new line.&lt;/p&gt;\n    ","\n&lt;p&gt;Python &lt;strong&gt;3&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python &lt;strong&gt;2.6+&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function &lt;span class=&quot;hljs-comment&quot;&gt;# needs to be first statement in file&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python &lt;strong&gt;&amp;lt;=2.5&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If extra space is OK after each print, in Python 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Misleading&lt;/strong&gt; in Python 2 - &lt;strong&gt;avoid&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;# Avoid this if you want to remain sane&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This makes it look like print is a function, but it is not.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This is the `,` creating a tuple and the parentheses enclose an expression.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# To see the problem, try:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;# This will print `(&apos;.&apos;, &apos;x&apos;) `&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In general, there are two ways to do this:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Print without a newline in Python 3.x&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Append nothing after the print statement and remove &apos;\\n&apos; by using &lt;code&gt;end=&apos;&apos;&lt;/code&gt;, as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;)\nhello  &lt;span class=&quot;hljs-comment&quot;&gt;# Appending &apos;\\n&apos; automatically&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;)\nworld &lt;span class=&quot;hljs-comment&quot;&gt;# With previous &apos;\\n&apos; world comes down&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# The solution is:&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; world&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;# End with anything like end=&apos;-&apos; or end=&quot; &quot;, but not &apos;\\n&apos;&lt;/span&gt;\nhello world &lt;span class=&quot;hljs-comment&quot;&gt;# It seems to be the correct output&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Another Example in Loop&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Print without a newline in Python 2.x&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Adding a trailing comma says: after print, ignore &lt;code&gt;\\n&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; world&quot;&lt;/span&gt;\nhello world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Another Example in Loop&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;{} .&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i),\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can visit this &lt;a href=&quot;https://www.geeksforgeeks.org/print-without-newline-python/&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-comment&quot;&gt;# Keeps the initial message in buffer.&lt;/span&gt;\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\rfoobar bar black sheep&quot;&lt;/span&gt;)\nsys.stdout.flush()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Wait 2 seconds&lt;/span&gt;\ntime.sleep(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace the message with a new one.&lt;/span&gt;\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;hahahahaaa             &apos;&lt;/span&gt;)\nsys.stdout.flush()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finalize the new message by printing a return carriage.&lt;/span&gt;\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I recently had the same problem...&lt;/p&gt;\n&lt;p&gt;I solved it by doing:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys, os\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Reopen standard output with &quot;newline=None&quot;.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# in this mode,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Input:  accepts any newline character, outputs as &apos;\\n&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output: &apos;\\n&apos; converts to os.linesep&lt;/span&gt;\n\nsys.stdout = os.fdopen(sys.stdout.fileno(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;, newline=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This works on both Unix and Windows, but I have not tested it on Mac&amp;nbsp;OS&amp;nbsp;X.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do the same in Python&amp;nbsp;3 as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!usr/bin/python&lt;/span&gt;\n\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; :\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    i = i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And execute it with &lt;code&gt;python filename.py&lt;/code&gt; or &lt;code&gt;python3 filename.py&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Many of these answers seem a little complicated. In Python 3.x you simply do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&amp;lt;expr&amp;gt;, &amp;lt;expr&amp;gt;, ..., &amp;lt;expr&amp;gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The default value of end is &lt;code&gt;&quot;\\n&quot;&lt;/code&gt;. We are simply changing it to a space or you can also use &lt;code&gt;end=&quot;&quot;&lt;/code&gt; (no space) to do what &lt;code&gt;printf&lt;/code&gt; normally does.&lt;/p&gt;\n    ","\n&lt;p&gt;You want to print something in the &lt;em&gt;for&lt;/em&gt; loop right; but you don&apos;t want it print in new line every time...&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n\n OUTPUT:\n    hi\n    hi\n    hi\n    hi\n    hi\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;But you want it to print like this:\nhi hi hi hi hi hi right????&lt;/p&gt;\n&lt;p&gt;Just add a comma after printing &quot;hi&quot;.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OUTPUT:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;hi hi hi hi hi\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You will notice that all the above answers are correct. But I wanted to make a shortcut to always writing the &quot; end=&apos;&apos; &quot; parameter in the end.&lt;/p&gt;\n&lt;p&gt;You could define a function like&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Print&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, file=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, flush=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(*args, sep=sep, end=end, file=file, flush=flush)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It would accept all the number of parameters. Even it will accept all the other parameters, like file, flush, etc. and with the same name.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/493386/how-to-print-without-a-newline-or-space/4348063#4348063&quot;&gt;lenooh satisfied&lt;/a&gt; my query. I discovered this article while searching for &apos;python suppress newline&apos;. I&apos;m using &lt;a href=&quot;https://en.wikipedia.org/wiki/IDLE&quot; rel=&quot;nofollow noreferrer&quot;&gt;IDLE&amp;nbsp;3&lt;/a&gt; on Raspberry Pi to develop Python 3.2 for &lt;a href=&quot;https://en.wikipedia.org/wiki/PuTTY&quot; rel=&quot;nofollow noreferrer&quot;&gt;PuTTY&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I wanted to create a progress bar on the PuTTY command line. I didn&apos;t want the page scrolling away. I wanted a horizontal line to reassure the user from freaking out that the program hasn&apos;t cruncxed to a halt nor been sent to lunch on a merry infinite loop - as a plea to &apos;leave me be, I&apos;m doing fine, but this may take some time.&apos; interactive message - like a progress bar in text.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;print(&apos;Skimming for&apos;, search_string, &apos;\\b! .001&apos;, end=&apos;&apos;)&lt;/code&gt; initializes the message by preparing for the next screen-write, which will print three backspaces as  rubout and then a period, wiping off &apos;001&apos; and extending the line of periods.&lt;/p&gt;\n&lt;p&gt;After &lt;code&gt;search_string&lt;/code&gt; parrots user input, the &lt;code&gt;\\b!&lt;/code&gt; trims the exclamation point of my &lt;code&gt;search_string&lt;/code&gt; text to back over the space which &lt;code&gt;print()&lt;/code&gt; otherwise forces, properly placing the punctuation. That&apos;s followed by a space and the first &apos;dot&apos; of the &apos;progress bar&apos; which I&apos;m simulating.&lt;/p&gt;\n&lt;p&gt;Unnecessarily, the message is also then primed with the page number (formatted to a length of three with leading zeros) to take notice from the user that progress is being processed and which will also reflect the count of periods we will later build out to the right.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n\npage=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nsearch_string=&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Search for?&apos;&lt;/span&gt;,)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Skimming for&apos;&lt;/span&gt;, search_string, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\b! .001&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\nsys.stdout.flush() &lt;span class=&quot;hljs-comment&quot;&gt;# the print function with an end=&apos;&apos; won&apos;t print unless forced&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; page:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some stuff&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# search, scrub, and build bulk output list[], count items,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# set done flag True&lt;/span&gt;\n    page=page+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#done flag set in &apos;some_stuff&apos;&lt;/span&gt;\n    sys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\b\\b\\b.&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(page, &lt;span class=&quot;hljs-string&quot;&gt;&apos;03&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;-- here&apos;s the progress bar meat&lt;/span&gt;\n    sys.stdout.flush()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; done: &lt;span class=&quot;hljs-comment&quot;&gt;#( flag alternative to break, exit or quit)&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\nSorting&apos;&lt;/span&gt;, item_count, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;)\n        page=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# exits the &apos;while page&apos; loop&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.sort()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item_count &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, items)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[item_count])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#print footers here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)==items):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#error_handler&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The progress bar meat is in the &lt;code&gt;sys.stdout.write(&apos;\\b\\b\\b.&apos;+format(page, &apos;03&apos;))&lt;/code&gt; line. First, to erase to the left, it backs up the cursor over the three numeric characters with the &apos;\\b\\b\\b&apos; as  rubout and drops a new period to add to the progress bar length. Then it writes three digits of the page it has progressed to so far. Because &lt;code&gt;sys.stdout.write()&lt;/code&gt; waits for a full buffer or the output channel to close, the &lt;code&gt;sys.stdout.flush()&lt;/code&gt; forces the immediate write. &lt;code&gt;sys.stdout.flush()&lt;/code&gt; is built into the end of &lt;code&gt;print()&lt;/code&gt; which is bypassed with &lt;code&gt;print(txt, end=&apos;&apos; )&lt;/code&gt;. Then the code loops through its mundane time intensive operations while it prints nothing more until it returns here to wipe three digits back, add a period and write three digits again, incremented.&lt;/p&gt;\n&lt;p&gt;The three digits wiped and rewritten is by no means necessary - it&apos;s just a flourish which exemplifies &lt;code&gt;sys.stdout.write()&lt;/code&gt; versus &lt;code&gt;print()&lt;/code&gt;. You could just as easily prime with a period and forget the three fancy backslash-b  backspaces (of course not writing formatted page counts as well) by just printing the period bar longer by one each time through - without spaces or newlines using just the &lt;code&gt;sys.stdout.write(&apos;.&apos;); sys.stdout.flush()&lt;/code&gt; pair.&lt;/p&gt;\n&lt;p&gt;Please note that the Raspberry Pi IDLE 3 Python shell does not honor the backspace as  rubout, but instead prints a space, creating an apparent list of fractions instead.&lt;/p&gt;\n    ","\n&lt;p&gt;just use the &lt;code&gt;end&lt;/code&gt; =&quot;&quot; or &lt;code&gt;sep&lt;/code&gt; =&quot;&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;.........\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#setting the value of (i) in the range 0 to 5 &lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above code gives the following output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    \n &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you want to print all these output in a straight line then all you should do is add an attribute called    end() to print.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#setting the value of (i) in the range 0 to 5 &lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And not just a space, you can also add other endings for your output. For example,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#setting the value of (i) in the range 0 to 5 &lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Remember:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; Note: The [&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; variable &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(int_1, int_2):] always prints till the variable &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n less than it&lt;span class=&quot;hljs-string&quot;&gt;&apos;s limit. (1 less than int_2)\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Or have a function like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Print&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sys.stdout.write(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(s))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then now:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# Or `xrange` for the Python 2 version&lt;/span&gt;\n    Print(i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Outputs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;0123456789\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use &lt;code&gt;end=&apos;&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# aaaaa&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\b.&apos;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This worked in both 2.7.8 &amp;amp; 2.5.2 (&lt;a href=&quot;https://en.wikipedia.org/wiki/Enthought&quot; rel=&quot;nofollow noreferrer&quot;&gt;Enthought Canopy&lt;/a&gt; and OS&amp;nbsp;X terminal, respectively) -- no module imports or time travel required.&lt;/p&gt;\n    ","\n&lt;p&gt;Python3 :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:\n&lt;code&gt;Hello world&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;This method add spearator between provided texts :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;,sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;code&gt;Hello,world&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You do not need to import any library. Just use the delete character:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;BS = &lt;span class=&quot;hljs-string&quot;&gt;u&apos;\\0008&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# The Unicode point for the &quot;delete&quot; character&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(BS + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;),\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This removes the newline and the space (^_^)*.&lt;/p&gt;\n    "],"id":383,"title":"How to print without a newline or space","content":"\n                \n&lt;p&gt;Example in C:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;; i++)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;....\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Python:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n.\n.\n.\n.\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n. . . .\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Python, &lt;code&gt;print&lt;/code&gt; will add a &lt;code&gt;\\n&lt;/code&gt; or space. How can I avoid that? I&apos;d like to know how to &quot;append&quot; strings to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;\n    ","slug":"how-to-print-without-a-newline-or-space-1657387814213","postType":"QUESTION","createdAt":"2022-07-09T17:30:14.000Z","updatedAt":"2022-07-09T17:30:14.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Reshaping data.frame from wide to long format","slug":"reshaping-data.frame-from-wide-to-long-format-1657384678522"},{"title":"Why not use tables for layout in HTML? [closed]","slug":"why-not-use-tables-for-layout-in-html-closed-1657387752327"},{"title":"Can you provide some examples of why it is hard to parse XML and HTML with a regex? [closed]","slug":"can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-regex-closed-1657388410824"},{"title":"What is The Rule of Three?","slug":"what-is-the-rule-of-three-1657384390295"},{"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348"},{"title":"Performance optimization strategies of last resort [closed]","slug":"performance-optimization-strategies-of-last-resort-closed-1657388420614"},{"title":"Retrieve only the queried element in an object array in MongoDB collection","slug":"retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection-1657384890457"},{"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197"},{"title":"What is the difference between client-side and server-side programming?","slug":"what-is-the-difference-between-client-side-and-server-side-programming-1657384372926"},{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"How to count the number of set bits in a 32-bit integer?","slug":"how-to-count-the-number-of-set-bits-in-a-32-bit-integer-1657388437370"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"Is List<Dog> a subclass of List<Animal>? Why are Java generics not implicitly polymorphic?","slug":"is-listlessdoggreater-a-subclass-of-listlessanimalgreater-why-are-java-generics-not-implicitly-polymorphic-1657384766724"},{"title":"Why use getters and setters/accessors?","slug":"why-use-getters-and-settersaccessors-1657387343971"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"Alternatives to gprof [closed]","slug":"alternatives-to-gprof-closed-1657388336554"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"}]},"__N_SSG":true}