{"pageProps":{"data":{"answer":["\n&lt;p&gt;The biggest change in the syntax is the addition of &lt;a href=&quot;http://php.net/manual/en/regexp.reference.delimiters.php&quot; rel=&quot;noreferrer&quot;&gt;delimiters&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ereg&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/^hello/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Delimiters can be pretty much anything that is not alpha-numeric, a backslash or a whitespace character. The most used are generally &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can also use matching brackets:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[^hello]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(^hello)&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{^hello}&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// etc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your delimiter is found in the regular expression, you have to escape it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ereg&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^/hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/^\\/hello/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can easily escape all delimiters and reserved characters in a string by using &lt;a href=&quot;http://php.net/preg_quote&quot; rel=&quot;noreferrer&quot;&gt;preg_quote&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$expr&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_quote&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/^&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$expr&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, PCRE supports &lt;a href=&quot;http://php.net/manual/en/reference.pcre.pattern.modifiers.php&quot; rel=&quot;noreferrer&quot;&gt;modifiers&lt;/a&gt; for various things. One of the most used is the case-insensitive modifier &lt;code&gt;i&lt;/code&gt;, the alternative to &lt;a href=&quot;http://php.net/eregi&quot; rel=&quot;noreferrer&quot;&gt;eregi&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;eregi&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;HELLO&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/^hello/i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;HELLO&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can find the complete reference to &lt;a href=&quot;http://php.net/manual/en/pcre.pattern.php&quot; rel=&quot;noreferrer&quot;&gt;PCRE syntax in PHP in the manual&lt;/a&gt;, as well as a &lt;a href=&quot;http://php.net/manual/en/reference.pcre.pattern.posix.php&quot; rel=&quot;noreferrer&quot;&gt;list of differences&lt;/a&gt; between POSIX regex and PCRE to help converting the expression.&lt;/p&gt;\n\n&lt;p&gt;However, in your simple example you would not use a regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;stripos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello world&apos;&lt;/span&gt;) === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Ereg replacement with preg(as of PHP 5.3.0) was right move in our favor.&lt;/p&gt;\n\n&lt;p&gt;preg_match, which uses a Perl-compatible regular expression syntax, is often a faster alternative to ereg.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;You should know 4 main things to port ereg patterns to preg:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add delimiters&lt;/strong&gt;(/): &lt;code&gt;&apos;pattern&apos; =&amp;gt; &apos;/pattern/&apos;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Escape delimiter&lt;/strong&gt; if it is a part of the pattern: &lt;code&gt;&apos;patt/ern&apos; =&amp;gt; &apos;/patt\\/ern/&apos;&lt;/code&gt;&lt;br&gt;\nAchieve it programmatically in following way:&lt;br&gt;\n&lt;code&gt;$old_pattern = &apos;&amp;lt;div&amp;gt;.+&amp;lt;/div&amp;gt;&apos;;&lt;/code&gt;&lt;br&gt;\n&lt;code&gt;$new_pattern = &apos;/&apos; . addcslashes($old_pattern, &apos;/&apos;) . &apos;/&apos;;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;eregi&lt;/strong&gt;(case-insensitive matching): &lt;code&gt;&apos;pattern&apos; =&amp;gt; &apos;/pattern/i&apos;&lt;/code&gt;\nSo, if you are using eregi function for case insenstive matching, just add &apos;i&apos; in the end of new pattern(&apos;/pattern/&apos;).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;ASCII values&lt;/strong&gt;: In ereg, if you use number in the pattern, it is assumed that you are referring to the ASCII of a character. But in preg, number is not treated as ASCII value. So, if your pattern contain ASCII value in the ereg expression(for example: new line, tabs etc) then convert it to hexadecimal and prefix it with \\x.&lt;br&gt;\n&lt;code&gt;Example: 9(tab) becomes \\x9 or alternatively use \\t.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;From PHP version 5.3, &lt;code&gt;ereg&lt;/code&gt; is deprecated.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Moving from &lt;code&gt;ereg&lt;/code&gt; to &lt;code&gt;preg_match&lt;/code&gt; is just a small change in our pattern.&lt;/p&gt;\n\n&lt;p&gt;First, you have to add delimiters to your code, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ereg&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A-Z0-9a-z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/A-Z0-9a-z/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For &lt;code&gt;eregi&lt;/code&gt; case-insensitive matching, put &lt;code&gt;i&lt;/code&gt; after the last delimiter, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;eregi&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pattern&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;/pattern/i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are more differences between &lt;code&gt;ereg()&lt;/code&gt; and &lt;code&gt;preg_replace()&lt;/code&gt; than just the syntax:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Return value:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;On error&lt;/em&gt;: both return &lt;code&gt;FALSE&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;On no match&lt;/em&gt;: &lt;code&gt;ereg()&lt;/code&gt; returns &lt;code&gt;FALSE&lt;/code&gt;, &lt;code&gt;preg_match()&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;On match&lt;/em&gt;: &lt;code&gt;ereg()&lt;/code&gt; returns string length or &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;preg_match()&lt;/code&gt; returns always &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Resulting array of matched substrings: If some substring is not found at all (&lt;code&gt;(b)&lt;/code&gt; in &lt;code&gt;...a(b)?&lt;/code&gt;), corresponding item in &lt;code&gt;ereg()&lt;/code&gt; result will be &lt;code&gt;FALSE&lt;/code&gt;, while in &lt;code&gt;preg_match()&lt;/code&gt; it will not be set at all.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If one is not brave enough to convert his or her &lt;code&gt;ereg()&lt;/code&gt; to &lt;code&gt;preg_match()&lt;/code&gt;, he or she may use &lt;a href=&quot;http://php.net/manual/en/function.mb-ereg.php&quot; rel=&quot;noreferrer&quot;&gt;mb_ereg()&lt;/a&gt;, which is still available in PHP 7.&lt;/p&gt;\n    "],"id":328,"title":"How can I convert ereg expressions to preg in PHP?","content":"\n                \n&lt;p&gt;Since &lt;a href=&quot;http://php.net/regex&quot; rel=&quot;noreferrer&quot;&gt;POSIX regular expressions (ereg)&lt;/a&gt; are deprecated since PHP 5.3.0, I&apos;d like to know an easy way to convert the old expressions to &lt;a href=&quot;http://php.net/pcre&quot; rel=&quot;noreferrer&quot;&gt;PCRE (Perl Compatible Regular Expressions) (preg)&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Per example, I have this regular expression:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;eregi&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^hello world&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How can I translate expressions into &lt;code&gt;preg_match&lt;/code&gt; compatible expressions?&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt; This post serves as a placeholder for all posts related to conversion from ereg to preg, and as a duplicate options for related questions.&lt;/strong&gt; Please do not close this question.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Related:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/1374881/367456&quot;&gt;How to change PHP&apos;s eregi to preg_match&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6269693/changing-ereg-replace-to-equivalent-preg-replace&quot;&gt;Changing ereg_replace to equivalent preg_replace&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855","postType":"QUESTION","createdAt":"2022-07-09T17:27:32.000Z","updatedAt":"2022-07-09T17:27:32.000Z","tags":[{"id":1893,"name":"preg-replace","slug":"preg-replace","createdAt":"2022-07-09T17:27:32.000Z","updatedAt":"2022-07-09T17:27:32.000Z","Questions_Tags":{"questionId":328,"tagId":1893}},{"id":1894,"name":"preg-match","slug":"preg-match","createdAt":"2022-07-09T17:27:32.000Z","updatedAt":"2022-07-09T17:27:32.000Z","Questions_Tags":{"questionId":328,"tagId":1894}},{"id":1895,"name":"pcre","slug":"pcre","createdAt":"2022-07-09T17:27:32.000Z","updatedAt":"2022-07-09T17:27:32.000Z","Questions_Tags":{"questionId":328,"tagId":1895}},{"id":1896,"name":"ereg","slug":"ereg","createdAt":"2022-07-09T17:27:32.000Z","updatedAt":"2022-07-09T17:27:32.000Z","Questions_Tags":{"questionId":328,"tagId":1896}}],"relatedQuestions":[{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855","tags":[{"name":"preg-replace","Questions_Tags":{"questionId":328,"tagId":1893}},{"name":"preg-match","Questions_Tags":{"questionId":328,"tagId":1894}},{"name":"pcre","Questions_Tags":{"questionId":328,"tagId":1895}},{"name":"ereg","Questions_Tags":{"questionId":328,"tagId":1896}}]}]},"randomQuestions":[{"title":"Javascript infamous Loop issue? [duplicate]","slug":"javascript-infamous-loop-issue-duplicate-1657387498530"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"Crash or \"segmentation fault\" when data is copied/scanned/read to an uninitialized pointer","slug":"crash-or-\"segmentation-fault\"-when-data-is-copiedscannedread-to-an-uninitialized-pointer-1657387520581"},{"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486"},{"title":"How to convert string representation of list to a list","slug":"how-to-convert-string-representation-of-list-to-a-list-1657387384181"},{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"How can I read and parse CSV files in C++?","slug":"how-can-i-read-and-parse-csv-files-in-c++-1657387869219"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"Read file line by line using ifstream in C++","slug":"read-file-line-by-line-using-ifstream-in-c++-1657388236966"},{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216"},{"title":"How do I profile a Python script?","slug":"how-do-i-profile-a-python-script-1657388346692"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"Why do we always prefer using parameters in SQL statements?","slug":"why-do-we-always-prefer-using-parameters-in-sql-statements-1657388031476"},{"title":"re.findall behaves weird","slug":"re.findall-behaves-weird-1657388408049"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"Why Use Integer Instead of Long?","slug":"why-use-integer-instead-of-long-1657388012352"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"}]},"__N_SSG":true}