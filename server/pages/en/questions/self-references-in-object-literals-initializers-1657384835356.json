{"pageProps":{"data":{"answer":["\n&lt;p&gt;Well, the only thing that I can tell you about are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot; rel=&quot;noreferrer&quot;&gt;getter&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a syntactic extension introduced by the ECMAScript 5th Edition Specification, the syntax is supported by most modern browsers (including IE9).&lt;/p&gt;\n    ","\n&lt;p&gt;You could do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n   &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n   &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n   &lt;span class=&quot;hljs-attr&quot;&gt;init&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n   }\n}.&lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would be some kind of one time initialization of the object.&lt;/p&gt;\n\n&lt;p&gt;Note that you are actually assigning the return value of &lt;code&gt;init()&lt;/code&gt; to &lt;code&gt;foo&lt;/code&gt;, therefore you have to &lt;code&gt;return this&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The obvious, simple answer is missing, so for completeness:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;But &lt;em&gt;is&lt;/em&gt; there any way to have values in an object literal&apos;s properties depend on other properties declared earlier?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No. All of the solutions here defer it until after the object is created (in various ways) and then assign the third property. The &lt;em&gt;simplest&lt;/em&gt; way is to just do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n};\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All others are just more indirect ways to do the same thing. (Felix&apos;s is particularly clever, but requires creating and destroying a temporary function, adding complexity; and either leaves an extra property on the object or [if you &lt;code&gt;delete&lt;/code&gt; that property] &lt;a href=&quot;http://jsperf.com/test-dictionary-mode&quot;&gt;impacts the performance&lt;/a&gt; of subsequent property accesses on that object.)&lt;/p&gt;\n\n&lt;p&gt;If you need it to all be within one expression, you can do that without the temporary property:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n    o.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or of course, if you need to do this more than once:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;buildFoo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: b};\n    o.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then where you need to use it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-title function_&quot;&gt;buildFoo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simply instantiate an anonymous function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Now in ES6 you can create lazy cached properties. On first use the property evaluates once to become a normal static property. Result: The second time the math function overhead is skipped. &lt;/p&gt;\n\n&lt;p&gt;The magic is in the getter.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the arrow getter &lt;code&gt;this&lt;/code&gt; picks up the &lt;a href=&quot;http://eddmann.com/posts/arrow-functions-lexical-this-scoping-in-javascript/&quot; rel=&quot;noreferrer&quot;&gt;surrounding lexical scope&lt;/a&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;foo     &lt;span class=&quot;hljs-comment&quot;&gt;// {a: 5, b: 6}&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;\nfoo     &lt;span class=&quot;hljs-comment&quot;&gt;// {a: 5, b: 6 , c: 11}  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Some closure should deal with this;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = a + b;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a,\n        &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: b,\n        &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: c\n    }\n}();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All the variables declared within &lt;code&gt;foo&lt;/code&gt; are private to &lt;code&gt;foo&lt;/code&gt;, as you would expect with any function declaration and because they are all in scope, they all have access to each other without needing to refer to &lt;code&gt;this&lt;/code&gt;, just as you would expect with a function.  The difference is that this function returns an object that exposes the private variables and assigns that object to &lt;code&gt;foo&lt;/code&gt;.  In the end, you return just the interface you want to expose as an object with the &lt;code&gt;return {}&lt;/code&gt; statement.&lt;/p&gt;\n\n&lt;p&gt;The function is then executed at the end with the &lt;code&gt;()&lt;/code&gt; which causes the entire foo object to be evaluated, all the variables within instantiated and the return object added as properties of &lt;code&gt;foo()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You could do it like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a, b\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: b = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: a + b\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That method has proven useful to me when I had to refer to the object that a function was originally declared on. The following is a minimal example of how I used it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createMyObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, self\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: self = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(count++)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By defining self as the object that contains the print function you allow the function to refer to that object. This means you will not have to &apos;bind&apos; the print function to an object if you need to pass it somewhere else. &lt;/p&gt;\n\n&lt;p&gt;If you would, instead, use &lt;code&gt;this&lt;/code&gt; as illustrated below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createMyObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(count++)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the following code will log 0, 1, 2 and then give an error&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;hljs-title function_&quot;&gt;createMyObject&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; log = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;\no.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// this refers to the o.a object so the chaining works&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// this refers to the window object so the chaining fails!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using the self method you guarantee that print will always return the same object regardless of the context in which the function is ran. The code above will run just fine and log 0, 1, 2 and 3 when using the self version of &lt;code&gt;createMyObject()&lt;/code&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;For completion, in ES6 we&apos;ve got classes (supported at the time of writing this only by latest browsers, but available in Babel, TypeScript and other transpilers)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  }  \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;just for the sake of thought - place object&apos;s properties out of a timeline:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;}\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo.&lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;there are better answers above too&lt;/em&gt;. This is how I modified example code you questioned with.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;},\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;},\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;}\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// console.log(foo.c);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can do it using the module pattern. Just like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; that = {};\n\n  that.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n  that.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n\n  that.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; that.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + that.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; that;\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooObject = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\nfooObject.&lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//13&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this pattern you can instantiate several foo objects according to your need.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/jPNxY/1/&quot;&gt;http://jsfiddle.net/jPNxY/1/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There are several ways to accomplish this; this is what I would use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n &lt;span class=&quot;hljs-comment&quot;&gt;// return this; // commented out because this happens automatically&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;();\no.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// === 6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Creating new function on your object literal and invoking a constructor seems a radical departure from the original problem, and it&apos;s unnecessary.  &lt;/p&gt;\n\n&lt;p&gt;You cannot reference a sibling property during object literal initialization. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: a + b } &lt;span class=&quot;hljs-comment&quot;&gt;// not defined &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: y.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + y.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// not defined &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The simplest solution for computed properties follows (no heap, no functions, no constructor): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n\nx.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = x.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + x.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// apply computed property&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The other answers posted here are better but here&apos;s an alternative that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sets the value at initialization (not a getter, or derived, etc)&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t require any type of &lt;code&gt;init()&lt;/code&gt; or code outside of the object literal&lt;/li&gt;\n&lt;li&gt;Is an object literal and not a factory function or other object creation mechanic.&lt;/li&gt;\n&lt;li&gt;Shouldn&apos;t have any performance impact (except at initialization)    &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Self-executing anonymous functions and window storage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;:(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;temp&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;qwert&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;temp&lt;/span&gt;;\n    })(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;temp&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The order is &lt;a href=&quot;https://stackoverflow.com/a/17438220/728393&quot;&gt;guaranteed&lt;/a&gt; (&lt;code&gt;bar&lt;/code&gt; before &lt;code&gt;baz&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;It pollutes &lt;code&gt;window&lt;/code&gt; of course, but I can&apos;t imagine someone writing a script that requires &lt;code&gt;window.temp&lt;/code&gt; to be persistent. Maybe &lt;code&gt;tempMyApp&lt;/code&gt; if you&apos;re paranoid.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also ugly but occasionally useful. An example is when you are using an API with rigid initialization conditions and don&apos;t feel like refactoring so the scoping is correct.&lt;/p&gt;\n\n&lt;p&gt;And it&apos;s dry, of course.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the following code as alternative, and it works. And the variable can be array too. (@ Fausto R.)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;],\n  &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(x);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;;\n  }\n};\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;e&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// foo.d = [10,20,30,40]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; property works great, and you can also use a binded closure for &quot;expensive&quot; functions that should only run once &lt;em&gt;(this only works with &lt;code&gt;var&lt;/code&gt;, not with &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; info = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;: (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;databaseLookup&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;)\n  }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(info)(),\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fullName&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;computing fullName...&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.first}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.last}&lt;/span&gt;`&lt;/span&gt;\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;555-22-9999&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;First&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Last&apos;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;databaseLookup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fetching address from remote server (runs once)...&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`22 Main St, City, Country`&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(info.&lt;span class=&quot;hljs-property&quot;&gt;fullName&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(info.&lt;span class=&quot;hljs-property&quot;&gt;fullName&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n})()&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The key to all this is &lt;strong&gt;SCOPE&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You need to encapsulate the &quot;parent&quot; (parent object) of the property you want to define as it&apos;s own instantiated object, and then you can make references to sibling properties using the key word &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s very, very &lt;strong&gt;important&lt;/strong&gt; to remember that if you refer to &lt;code&gt;this&lt;/code&gt; without first so doing, then &lt;code&gt;this&lt;/code&gt; will refer to the outer scope... which will be the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;//this is really window.x&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;//assign value&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 9 (not 1 as you might expect, b/c *this* refers `window` object)&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if your object is written as a function which returns an object, AND you use ES6 object-attribute &apos;methods&apos;, then it&apos;s possible:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;state&lt;/span&gt;) =&amp;gt; ({\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-title function_&quot;&gt;oneThing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    state.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = state.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-title function_&quot;&gt;anotherThing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;oneThing&lt;/span&gt;();\n    state.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = state.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;\n  },\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; store = {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; root = &lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt;(store);\n\nroot.&lt;span class=&quot;hljs-title function_&quot;&gt;oneThing&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(store);\n\nroot.&lt;span class=&quot;hljs-title function_&quot;&gt;anotherThing&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(store);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(root, &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(root), root.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a neat ES6 way:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({\n    ...o,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;\n  }))({\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n  });\n  \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;I use it to do something like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; constants = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;freeze&lt;/span&gt;(\n  (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({\n    ..._,\n    &lt;span class=&quot;hljs-attr&quot;&gt;flag_data&lt;/span&gt;: {\n      [_.&lt;span class=&quot;hljs-property&quot;&gt;a_flag&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;,\n      [_.&lt;span class=&quot;hljs-property&quot;&gt;b_flag&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;,\n      [_.&lt;span class=&quot;hljs-property&quot;&gt;c_flag&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;oof&apos;&lt;/span&gt;\n    }\n  }))({\n    &lt;span class=&quot;hljs-attr&quot;&gt;a_flag&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b_flag&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c_flag&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,\n  })\n);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(constants.&lt;span class=&quot;hljs-property&quot;&gt;flag_data&lt;/span&gt;[constants.&lt;span class=&quot;hljs-property&quot;&gt;b_flag&lt;/span&gt;]);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just for everyone&apos;s amusement:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (                        &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;This={\n    a: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    b: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,                          }&lt;/span&gt;)=&amp;gt;&lt;/span&gt;({...&lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;             }))(\n);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;How about this  solution this will work with nested objects with array as well&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;      &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assignOwnProVal&lt;/span&gt;\n     = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;to,&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;){ \n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj,string&lt;/span&gt;){ \n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = string.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;); \n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = obj[parts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]; \n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(parts[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]){ \n                    parts.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newString = parts.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;); \n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(newObj,newString); \n                } \n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newObj; \n            } \n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[to] = &lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;);\n     } \n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { name : &lt;span class=&quot;hljs-string&quot;&gt;&apos;Gaurav&apos;&lt;/span&gt;, temp : \n                  {id : [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;:\n                        {&lt;span class=&quot;hljs-attr&quot;&gt;street&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;Brunswick&apos;&lt;/span&gt;}} } \n     obj.&lt;span class=&quot;hljs-title function_&quot;&gt;assignOwnProVal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;street&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;temp.city.street&apos;&lt;/span&gt;); \n     obj.&lt;span class=&quot;hljs-title function_&quot;&gt;assignOwnProVal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myid&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;temp.id.1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Throwing in an option since I didn&apos;t see this exact scenario covered.  If you &lt;em&gt;don&apos;t&lt;/em&gt; want &lt;code&gt;c&lt;/code&gt; updated when &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; update, then an ES6 IIFE works well.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n    a,\n    b,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: a + b\n}))(a,b);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For my needs, I have an object that relates to an array which will end up being used in a loop, so I only want to calculate some common setup once, so this is what I have:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; processingState = (&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;indexOfSelectedTier&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n    selectedTier,\n    indexOfSelectedTier,\n    &lt;span class=&quot;hljs-attr&quot;&gt;hasUpperTierSelection&lt;/span&gt;: tiers.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,indexOfSelectedTier)\n                         .&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt; =&amp;gt;&lt;/span&gt; pendingSelectedFiltersState[t.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;]),\n}))(tiers.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(selectedTier));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since I need to set a property for &lt;code&gt;indexOfSelectedTier&lt;/code&gt; and I need to use that value when setting the &lt;code&gt;hasUpperTierSelection&lt;/code&gt; property, I calculate that value first and pass it in as a param to the IIFE&lt;/p&gt;\n    ","\n&lt;p&gt;Here is an example of behavior of &apos;this&apos; in the object.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;external&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;global.prop&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; that = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;internal&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop1&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;//external&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//internal&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;log1&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//external&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;log2&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//&apos;global.prop&apos; in node; &apos;external&apos; in chrome&lt;/span&gt;\n    }()\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;log3&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//internal&lt;/span&gt;\n    })()\n  },\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Other approach would be to declare the object first before assigning properties into it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {};\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// Does work&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;getSum&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// foo.getSum() === 22&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With that, you can use the object variable name to access the already assigned values.&lt;br&gt;\nBest for &lt;code&gt;config.js&lt;/code&gt; file.&lt;/p&gt;\n    ","\n&lt;h2&gt;Two lazy solutions&lt;/h2&gt;\n&lt;p&gt;There are already excellent answers here and I&apos;m no expert on this, but I am an expert in being lazy and to my expert eye these answers don&apos;t seem lazy enough.&lt;/p&gt;\n&lt;h3&gt;First: return object from anonymous function&lt;/h3&gt;\n&lt;p&gt;A very slight variation from &lt;a href=&quot;https://stackoverflow.com/a/10766107/4621141&quot;&gt;T.J. Crowder&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17421508/4621141&quot;&gt;Henry Wrightson&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/14206385/4621141&quot;&gt;Rafael Rocha&lt;/a&gt; answers:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Paste in your original object&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  };\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// Use their properties&lt;/span&gt;\n  foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Do whatever else you want&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Finally, return object&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo;\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The slight advantage here is just pasting your original object as it was, without worrying about arguments etc. (IMHO the wrapper function becomes quite transparent this way).&lt;/p&gt;\n&lt;h3&gt;Second: using setTimeout&lt;/h3&gt;\n&lt;p&gt;This here may work, if you don&apos;t need &lt;code&gt;foo.c&lt;/code&gt; right away:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Though, at first, foo.c will be the integer returned by setTimeout&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);\n&lt;span class=&quot;hljs-comment&quot;&gt;// But if this isn&apos;t an issue, the value will be updated when time comes in the event loop&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Ok I came up with another solution. Here I want to initialize an object representing the amount of milliseconds for each unit of time.\nIt turns out enum in typescript can not be used in my case, so I declared multiple variables that I assign to an object as follow:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;SECOND&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;MINUTE&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;SECOND&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;HOUR&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;MINUTE&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;DAY&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;HOUR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;WEEK&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;DAY&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TimeInMS&lt;/span&gt; = {\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;SECOND&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;MINUTE&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;HOUR&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;DAY&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;WEEK&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The drawbacks of this method are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;variables are defined as constants, even if we dont need them. Thus it needs useless memory.&lt;/li&gt;\n&lt;li&gt;each value of the object must be declared as standalone variable&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This solution uses Typescript (you can use the vanilla JS which TS compiles to if needed)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;asd&lt;/span&gt; {\n    def = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n        ads= &lt;span class=&quot;hljs-string&quot;&gt;&apos;asd&apos;&lt;/span&gt;;\n        qwe= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ads&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this method is just to check/test this solution &lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;def&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;qwe&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// these two lines are just to check&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asd&lt;/span&gt;();\ninstance.&lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here were using class expressions to get the nested object literal interface we&apos;d want. This is the next best thing IMHO to being able to reference the properties of an object during creation.&lt;/p&gt;\n\n&lt;p&gt;Main thing to note is while using this solution, you have exact same interface as you&apos;d have had from an object literal. And the syntax is pretty close to an object literal itself (vs using a function, etc).&lt;/p&gt;\n\n&lt;h2&gt;Compare the following&lt;/h2&gt;\n\n&lt;h3&gt;Solution I&apos;ve proposed&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;asd&lt;/span&gt; {\n    def = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n        ads= &lt;span class=&quot;hljs-string&quot;&gt;&apos;asd&apos;&lt;/span&gt;;\n        qwe= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ads&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Solution if object literals would&apos;ve sufficed&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; asd = {\n    def : {\n        &lt;span class=&quot;hljs-attr&quot;&gt;ads&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;asd&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;qwe&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ads&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;, &lt;span class=&quot;hljs-comment&quot;&gt;//ILLEGAL CODE; just to show ideal scenario&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Another example&lt;/h2&gt;\n\n&lt;p&gt;Here in this class, you can combine multiple relative path among themselves, which is not possible with an object literal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CONSTANT&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; readonly &lt;span class=&quot;hljs-variable constant_&quot;&gt;PATH&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;/** private visibility because these relative paths don&apos;t make sense for direct access, they&apos;re only useful to path class\n         *\n         */&lt;/span&gt;\n        private readonly &lt;span class=&quot;hljs-variable constant_&quot;&gt;RELATIVE&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;AFTER_EFFECTS_TEMPLATE_BINARY_VERSION&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\assets\\\\aep-template\\\\src\\\\video-template.aep&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;AFTER_EFFECTS_TEMPLATE_XML_VERSION&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\assets\\\\aep-template\\\\intermediates\\\\video-template.aepx&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;RELATIVE_PATH_TO_AFTER_EFFECTS&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\Adobe\\\\Adobe After Effects CC 2018\\\\Support Files\\\\AfterFX.exe&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;OUTPUT_DIRECTORY_NAME&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\output&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;INPUT_DIRECTORY_NAME&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\input&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;ASSETS_DIRECTORY_NAME&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\assets&apos;&lt;/span&gt;;\n        };\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to use native JS, the other answers provide good solutions.&lt;/p&gt;\n\n&lt;p&gt;But if you&apos;re willing to write self-referencing objects like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{ \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: ...,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;${this.a + this.a}&quot;&lt;/span&gt;,\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wrote an npm library called &lt;a href=&quot;https://github.com/alex-e-leon/self-referenced-object&quot; rel=&quot;nofollow noreferrer&quot;&gt;self-referenced-object&lt;/a&gt; that supports that syntax and returns a native object.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secreta&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secretb&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secreta&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secretb&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is almost identical to @slicedtoad&apos;s answer, but doesn&apos;t use a function.&lt;/p&gt;\n    "],"id":165,"title":"Self-references in object literals / initializers","content":"\n                \n&lt;p&gt;Is there any way to get something like the following to work in JavaScript?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Doesn&apos;t work&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the current form, this code obviously throws a reference error since &lt;code&gt;this&lt;/code&gt; doesn&apos;t refer to &lt;code&gt;foo&lt;/code&gt;. But &lt;em&gt;is&lt;/em&gt; there any way to have values in an object literal&apos;s properties depend on other properties declared earlier?&lt;/p&gt;\n    ","slug":"self-references-in-object-literals-initializers-1657384835356","postType":"QUESTION","createdAt":"2022-07-09T16:40:35.000Z","updatedAt":"2022-07-09T16:40:35.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why does my function that calls an API or launches a coroutine return an empty or null value?","slug":"why-does-my-function-that-calls-an-api-or-launches-a-coroutine-return-an-empty-or-null-value-1657388483820"},{"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"How to horizontally center an element","slug":"how-to-horizontally-center-an-element-1657384634147"},{"title":"scanf() leaves the newline character in the buffer","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"jQuery Ajax File Upload","slug":"jquery-ajax-file-upload-1657387368970"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"Scroll to an element with jQuery","slug":"scroll-to-an-element-with-jquery-1657388523178"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216"},{"title":"Use of 'prototype' vs. 'this' in JavaScript?","slug":"use-of-'prototype'-vs.-'this'-in-javascript-1657388117307"}]},"__N_SSG":true}