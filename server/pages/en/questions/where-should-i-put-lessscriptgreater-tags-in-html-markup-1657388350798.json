{"pageProps":{"data":{"answer":["\n&lt;p&gt;Here&apos;s what happens when a browser loads a website with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag on it:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Fetch the HTML page (e.g. &lt;em&gt;index.html&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;Begin parsing the HTML&lt;/li&gt;\n&lt;li&gt;The parser encounters a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag referencing an external script file.&lt;/li&gt;\n&lt;li&gt;The browser requests the script file. Meanwhile, the parser blocks and stops parsing the other HTML on your page.&lt;/li&gt;\n&lt;li&gt;After some time the script is downloaded and subsequently executed.&lt;/li&gt;\n&lt;li&gt;The parser continues parsing the rest of the HTML document.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Step #4 causes a bad user experience. Your website basically stops loading until you&apos;ve downloaded all scripts. If there&apos;s one thing that users hate it&apos;s waiting for a website to load.&lt;/p&gt;\n&lt;h2&gt;Why does this even happen?&lt;/h2&gt;\n&lt;p&gt;Any script can insert its own HTML via &lt;code&gt;document.write()&lt;/code&gt; or other DOM manipulations. This implies that the parser has to wait until the script has been downloaded and executed before it can safely parse the rest of the document. After all, the script &lt;em&gt;could&lt;/em&gt; have inserted its own HTML in the document.&lt;/p&gt;\n&lt;p&gt;However, most JavaScript developers no longer manipulate the DOM &lt;em&gt;while&lt;/em&gt; the document is loading. Instead, they wait until the document has been loaded before modifying it. For example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My Page&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my-script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user-greeting&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Welcome back, user&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;JavaScript:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// my-script.js&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this function runs when the DOM is ready, i.e. when the document has been parsed&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user-greeting&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome back, Bart&quot;&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because your browser does not know &lt;em&gt;my-script.js&lt;/em&gt; isn&apos;t going to modify the document until it has been downloaded and executed, the parser stops parsing.&lt;/p&gt;\n&lt;h2&gt;Antiquated recommendation&lt;/h2&gt;\n&lt;p&gt;The old approach to solving this problem was to put &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags at the bottom of your &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, because this ensures the parser isn&apos;t blocked until the very end.&lt;/p&gt;\n&lt;p&gt;This approach has its own problem: the browser cannot start downloading the scripts until the entire document is parsed. For larger websites with large scripts and stylesheets, being able to download the script as soon as possible is very important for performance. If your website doesn&apos;t load within 2 seconds, people will go to another website.&lt;/p&gt;\n&lt;p&gt;In an optimal solution, the browser would start downloading your scripts as soon as possible, while at the same time parsing the rest of your document.&lt;/p&gt;\n&lt;h2&gt;The modern approach&lt;/h2&gt;\n&lt;p&gt;Today, browsers support the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes on scripts. These attributes tell the browser it&apos;s safe to continue parsing while the scripts are being downloaded.&lt;/p&gt;\n&lt;h3&gt;async&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script1.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script2.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Scripts with the async attribute are executed asynchronously. This means the script is executed as soon as it&apos;s downloaded, without blocking the browser in the meantime.\nThis implies that it&apos;s possible that script 2 is downloaded and executed before script 1.&lt;/p&gt;\n&lt;p&gt;According to &lt;a href=&quot;http://caniuse.com/#feat=script-async&quot; rel=&quot;noreferrer&quot;&gt;http://caniuse.com/#feat=script-async&lt;/a&gt;, 97.78% of all browsers support this.&lt;/p&gt;\n&lt;h3&gt;defer&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script1.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script2.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Scripts with the defer attribute are executed in order (i.e. first script 1, then script 2). This also does not block the browser.&lt;/p&gt;\n&lt;p&gt;Unlike async scripts, defer scripts are only executed after the entire document has been loaded.&lt;/p&gt;\n&lt;p&gt;According to &lt;a href=&quot;http://caniuse.com/#feat=script-defer&quot; rel=&quot;noreferrer&quot;&gt;http://caniuse.com/#feat=script-defer&lt;/a&gt;, 97.79% of all browsers support this. 98.06% support it at least partially.&lt;/p&gt;\n&lt;p&gt;An important note on browser compatibility: in some circumstances, Internet&amp;nbsp;Explorer 9 and earlier may execute deferred scripts out of order. If you need to support those browsers, please read &lt;a href=&quot;https://github.com/h5bp/lazyweb-requests/issues/42&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt; first!&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(To learn more and see some really helpful visual representations of the differences between async, defer and normal scripts check the first two links at the references section of this answer)&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n&lt;p&gt;The current state-of-the-art is to put scripts in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag and use the &lt;code&gt;async&lt;/code&gt; or &lt;code&gt;defer&lt;/code&gt; attributes. This allows your scripts to be downloaded ASAP without blocking your browser.&lt;/p&gt;\n&lt;p&gt;The good thing is that your website should still load correctly on the 2% of browsers that do not support these attributes while speeding up the other 98%.&lt;/p&gt;\n&lt;h2&gt;References&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html&quot; rel=&quot;noreferrer&quot;&gt;async vs defer attributes&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flaviocopes.com/javascript-async-defer/&quot; rel=&quot;noreferrer&quot;&gt;Efficiently load JavaScript with defer and async&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/docs/insights/BlockingJS&quot; rel=&quot;noreferrer&quot;&gt;Remove Render-Blocking JavaScript&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://gist.github.com/jakub-g/385ee6b41085303a53ad92c7c8afd7a6#visual-representation&quot; rel=&quot;noreferrer&quot;&gt;Async, Defer, Modules: A Visual Cheatsheet&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Just before the closing body tag, as stated on &lt;em&gt;&lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#js_bottom&quot; rel=&quot;nofollow noreferrer&quot;&gt;Put Scripts at the Bottom&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Put Scripts at the Bottom&lt;/p&gt;\n&lt;p&gt;The problem caused by scripts is that they block parallel downloads. The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won&apos;t start any other downloads, even on different hostnames.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Non-blocking script tags can be placed just about anywhere:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/scripting-1.html#attr-script-async&quot;&gt;&lt;strong&gt;&lt;code&gt;async&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; script will be executed asynchronously as soon as it is available&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/scripting-1.html#attr-script-defer&quot;&gt;&lt;strong&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; script is executed when the document has finished parsing&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;async defer&lt;/code&gt;&lt;/strong&gt; script falls back to the defer behavior if async is not supported&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Such scripts will be executed asynchronously/after document ready, which means you cannot do this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;jQuery(something);&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might throw &quot;jQuery is not defined&quot; error\n  * defer will not work either\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;document.write(something).js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might issue &quot;cannot write into document from an asynchronous script&quot; warning\n  * defer will not work either\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jQuery(something).js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might throw &quot;jQuery is not defined&quot; error (no guarantee which script runs first)\n  * defer will work in sane browsers\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;document.getElementById(header).js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might not locate #header (script could fire before parser looks at the next line)\n  * defer will work in sane browsers\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having said that, asynchronous scripts offer these advantages:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Parallel download of resources&lt;/strong&gt;:&lt;br&gt;\nBrowser can download stylesheets, images and other scripts in parallel without waiting for a script to download and execute.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Source order independence&lt;/strong&gt;:&lt;br&gt;\nYou can place the scripts inside head or body without worrying about blocking (useful if you are using a CMS). Execution order still matters though.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It is possible to circumvent the execution order issues by using external scripts that support callbacks. Many third party JavaScript APIs now support non-blocking execution. Here is an example of &lt;a href=&quot;http://salman-w.blogspot.com/2014/05/google-maps-asynchronous-loading.html&quot;&gt;loading the Google Maps API asynchronously&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The standard advice, promoted by the Yahoo! Exceptional Performance team, is to put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags at the end of the document body so they don&apos;t block rendering of the page.&lt;/p&gt;\n\n&lt;p&gt;But there are some newer approaches that offer better performance, as described in &lt;a href=&quot;https://stackoverflow.com/a/435295/578288&quot;&gt;this answer&lt;/a&gt; about the load time of the Google Analytics JavaScript file:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;There are some &lt;a href=&quot;http://stevesouders.com/docs/googleio-20080529.ppt&quot; rel=&quot;noreferrer&quot;&gt;great slides&lt;/a&gt; by Steve Souders (client-side performance expert) about:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Different techniques to load external JavaScript files in parallel&lt;/li&gt;\n  &lt;li&gt;their effect on loading time and page rendering&lt;/li&gt;\n  &lt;li&gt;what kind of &quot;in progress&quot; indicators the browser displays (e.g. &apos;loading&apos; in the status bar, hourglass mouse cursor).&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The modern approach in 2019 is using ES6 module type scripts&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;module&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;By default, modules are loaded asynchronously and deferred. i.e. you can place them anywhere and they will load in parallel and execute when the page finishes loading.&lt;/p&gt;\n&lt;p&gt;The differences between a script and a module are described here:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39652618/classic-scripts-vs-module-scripts-in-javascript/53821485#53821485&quot;&gt;Classic scripts vs. module scripts in JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The execution of a module compared to a script is described here:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/modules#defer&quot; rel=&quot;noreferrer&quot;&gt;Modules are deferred by default&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Support is shown here:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot; rel=&quot;noreferrer&quot;&gt;Can I use... Support tables for HTML5, CSS3, etc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using jQuery then put the JavaScript code wherever you find it best and use &lt;code&gt;$(document).ready()&lt;/code&gt; to ensure that things are loaded properly before executing any functions.&lt;/p&gt;\n&lt;p&gt;On a side note: I like all my script tags in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section as that seems to be the cleanest place.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myjs.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The script tag should always be used before the &lt;strong&gt;body close&lt;/strong&gt; or at the &lt;strong&gt;bottom in HTML&lt;/strong&gt; file.&lt;/p&gt;\n&lt;p&gt;The Page will load with HTML and CSS and later JavaScript will load.&lt;/p&gt;\n&lt;p&gt;Check this if required:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://stevesouders.com/hpws/rule-js-bottom.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://stevesouders.com/hpws/rule-js-bottom.php&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;best&lt;/strong&gt; place to put &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is before closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag, so the downloading and executing it doesn&apos;t block the browser to parse the HTML in document,&lt;/p&gt;\n&lt;p&gt;Also loading the JavaScript files externally has its own advantages like it will be cached by browsers and can speed up page load times, it separates the HTML and JavaScript code and help to manage the code base better.&lt;/p&gt;\n&lt;p&gt;But modern browsers also support some other optimal ways, like &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; to load external JavaScript files.&lt;/p&gt;\n&lt;h2&gt;Async and Defer&lt;/h2&gt;\n&lt;p&gt;Normally HTML page execution starts line by line. When an external JavaScript &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element is encountered, HTML parsing is stopped until a JavaScript is download and ready for execution. This normal page execution can be changed using the &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attribute.&lt;/p&gt;\n&lt;h2&gt;&lt;code&gt;Defer&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;When a defer attribute is used, JavaScript is downloaded parallelly with HTML parsing, but it will be execute only after full HTML parsing is done.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/local-js-path/myScript.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;Async&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;When the async attribute is used, JavaScript is downloaded as soon as the script is encountered and after the download, it will be executed asynchronously (parallelly) along with HTML parsing.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/local-js-path/myScript.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;When to use which attributes&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;If your script is independent of other scripts and is modular, use &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If you are loading script1 and script2 with &lt;code&gt;async&lt;/code&gt;, both will run\nparallelly along with HTML parsing, as soon as they are downloaded\nand available.&lt;/li&gt;\n&lt;li&gt;If your script depends on another script then use &lt;code&gt;defer&lt;/code&gt; for both:&lt;/li&gt;\n&lt;li&gt;When script1 and script2 are loaded in that order with &lt;code&gt;defer&lt;/code&gt;, then script1 is guaranteed to execute first,&lt;/li&gt;\n&lt;li&gt;Then script2 will execute after script1 is fully executed.&lt;/li&gt;\n&lt;li&gt;Must do this if script2 depends on script1.&lt;/li&gt;\n&lt;li&gt;If your script is small enough and is depended by another script\nof type &lt;code&gt;async&lt;/code&gt; then use your script with no attributes and place it above all the &lt;code&gt;async&lt;/code&gt; scripts.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Reference: &lt;em&gt;&lt;a href=&quot;http://knowledgehills.com/javascript/external-javascript-syntax-disadvantages.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;External JavaScript JS File  Advantages, Disadvantages, Syntax, Attributes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It turns out it can be everywhere.&lt;/p&gt;\n&lt;p&gt;You can defer the execution with something like jQuery so it doesn&apos;t matter where it&apos;s placed (except for a small performance hit during parsing).&lt;/p&gt;\n    ","\n&lt;p&gt;The most conservative (and widely accepted) answer is &quot;at the bottom just before the ending  tag&quot;, because then the entire DOM will have been loaded before anything can start executing.&lt;/p&gt;\n&lt;p&gt;There are dissenters, for various reasons, starting with the available practice to intentionally begin execution with a page onload event.&lt;/p&gt;\n    ","\n&lt;p&gt;It depends. If you are loading a script that&apos;s necessary to style your page / using actions in your page (like click of a button) then you better place it at the top. If your styling is 100% CSS and you have all fallback options for the button actions then you can place it at the bottom.&lt;/p&gt;\n&lt;p&gt;Or the best thing (if that&apos;s not a concern) is you can make a modal loading box, place your JavaScript code at the bottom of your page and make it disappear when the last line of your script gets loaded. This way you can avoid users using actions in your page before the scripts are loaded. And also avoid the improper styling.&lt;/p&gt;\n    ","\n&lt;p&gt;Including scripts at the end is mainly used where the content/ styles of the web page is to be shown first.&lt;/p&gt;\n&lt;p&gt;Including the scripts in the head loads the scripts early and can be used before the loading of the whole web page.&lt;/p&gt;\n&lt;p&gt;If the scripts are entered at last the validation will happen only after the loading of the entire styles and design which is not appreciated for fast responsive websites.&lt;/p&gt;\n    ","\n&lt;p&gt;You can add JavaScript code in an HTML document by employing the dedicated HTML tag &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; that wraps around JavaScript code.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag can be placed in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML, in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section, or after the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; close tag, depending on when you want the JavaScript to load.&lt;/p&gt;\n&lt;p&gt;Generally, JavaScript code can go inside of the document &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section in order to keep them contained and out of the main content of your HTML document.&lt;/p&gt;\n&lt;p&gt;However, if your script needs to run at a certain point within a pages layout  like when using &lt;code&gt;document.write&lt;/code&gt; to generate content  you should put it at the point where it should be called, usually within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section.&lt;/p&gt;\n    ","\n&lt;p&gt;Depending on the script and its usage the best possible (in terms of page load and rendering time) may be to not use a conventional &amp;lt;script&amp;gt;-tag per se, but to dynamically trigger the loading of the script asynchronously.&lt;/p&gt;\n&lt;p&gt;There are some different techniques, but the most straightforward is to use document.createElement(&quot;script&quot;) when the window.onload event is triggered. Then the script is loaded first when the page itself has rendered, thus not impacting the time the user has to wait for the page to appear.&lt;/p&gt;\n&lt;p&gt;This naturally requires that the script itself is not needed for the rendering of the page.&lt;/p&gt;\n&lt;p&gt;For more information, see the post &lt;em&gt;&lt;a href=&quot;http://www.stevesouders.com/blog/2008/12/27/coupling-async-scripts/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Coupling async scripts&lt;/a&gt;&lt;/em&gt; by Steve Souders (creator of &lt;a href=&quot;http://yslow.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;YSlow&lt;/a&gt;, but now at Google).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Script&lt;/em&gt; blocks DOM load until it&apos;s loaded and executed.&lt;/p&gt;\n&lt;p&gt;If you place scripts at the end of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, all of the DOM has a chance to load and render (the page will &quot;display&quot; faster). &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; will have access to all of those DOM elements.&lt;/p&gt;\n&lt;p&gt;On the other hand, placing it after the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; start or above will execute the script (where there still aren&apos;t any DOM elements).&lt;/p&gt;\n&lt;p&gt;You are including jQuery which means you can place it wherever you wish and use &lt;a href=&quot;https://learn.jquery.com/using-jquery-core/document-ready/&quot; rel=&quot;nofollow noreferrer&quot;&gt;.ready()&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you still care a lot about support and performance in Internet&amp;nbsp;Explorer before &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_11#Internet_Explorer_10&quot; rel=&quot;nofollow noreferrer&quot;&gt;version&amp;nbsp;10&lt;/a&gt;, it&apos;s best to &lt;em&gt;always&lt;/em&gt; make your script tags the last tags of your HTML body. That way, you&apos;re certain that the rest of the DOM has been loaded and you won&apos;t block and rendering.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you don&apos;t care too much any more about in Internet&amp;nbsp;Explorer before version&amp;nbsp;10, you might want to put your scripts in the head of your document and use &lt;code&gt;defer&lt;/code&gt; to ensure they only run after your DOM has been loaded (&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;path/to/script1.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;). If you still want your code to work in Internet&amp;nbsp;Explorer before version&amp;nbsp;10, don&apos;t forget to wrap your code in a &lt;code&gt;window.onload&lt;/code&gt; even, though!&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;You can place most of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; references at the end of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;But &lt;em&gt;if&lt;/em&gt; there are active components on your page which are using external scripts, then their dependency (.js files) should come before that (ideally in the &lt;em&gt;head&lt;/em&gt; tag).&lt;/p&gt;\n    ","\n&lt;p&gt;The best place to write your JavaScript code is at the end of the document after or right before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag to load the document first and then execute the JavaScript code.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; ... your code here ... &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And if you write in &lt;a href=&quot;https://en.wikipedia.org/wiki/JQuery&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery&lt;/a&gt;, the following can be in the head document and it will execute after the document loads:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Your code here...&lt;/span&gt;\n    });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think it depends on the webpage execution.&lt;/p&gt;\n&lt;p&gt;If the page that you want to display can not displayed properly  without loading JavaScript first then you should include the JavaScript file first.&lt;/p&gt;\n&lt;p&gt;But if you can display/render a webpage without initially download JavaScript file, then you should put JavaScript code at the bottom of the page. Because it will emulate a speedy page load, and from a user&apos;s point of view, it would seems like that the page is loading faster.&lt;/p&gt;\n    ","\n&lt;p&gt;Always, we have to put scripts before the closing body tag expect some specific scenario.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For Example :&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;`&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello JavaScript!&quot;&lt;/span&gt;; &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;`\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Prefer to put it before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; closing tag.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;\nAs per the official doc: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#a_hello_world!_example&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#a_hello_world!_example&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note: The reason the instructions (above) place the  element\nnear the bottom of the HTML file is that the browser reads code in the\norder it appears in the file.&lt;/p&gt;\n&lt;p&gt;If the JavaScript loads first and it is supposed to affect the HTML\nthat hasn&apos;t loaded yet, there could be problems. Placing JavaScript\nnear the bottom of an HTML page is one way to accommodate this\ndependency. To learn more about alternative approaches, see Script\nloading strategies.&lt;/p&gt;\n&lt;/blockquote&gt;\n    "],"id":537,"title":"Where should I put <script> tags in HTML markup?","content":"\n                \n&lt;p&gt;When embedding JavaScript in an HTML document, where is the proper place to put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags and included JavaScript? I seem to recall that you are not supposed to place these in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section, but placing at the beginning of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section is bad, too, since the JavaScript will have to be parsed before the page is rendered completely (or something like that). This seems to leave the &lt;em&gt;end&lt;/em&gt; of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section as a logical place for &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n&lt;p&gt;So, where &lt;em&gt;is&lt;/em&gt; the right place to put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags?&lt;/p&gt;\n&lt;p&gt;(This question references &lt;a href=&quot;https://stackoverflow.com/questions/436154/why-does-the-call-to-this-jquery-function-fail-in-firefox&quot;&gt;this question&lt;/a&gt;, in which it was suggested that JavaScript function calls should be moved from &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. I&apos;m specifically using jQuery, but more general answers are also appropriate.)&lt;/p&gt;\n    ","slug":"where-should-i-put-lessscriptgreater-tags-in-html-markup-1657388350798","postType":"QUESTION","createdAt":"2022-07-09T17:39:10.000Z","updatedAt":"2022-07-09T17:39:10.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I print my Java object without getting \"SomeType@2f92e0f4\"?","slug":"how-do-i-print-my-java-object-without-getting-\"sometype@2f92e0f4\"-1657384731950"},{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"Add a property to a JavaScript object using a variable as the name?","slug":"add-a-property-to-a-javascript-object-using-a-variable-as-the-name-1657388425650"},{"title":"How do I profile a Python script?","slug":"how-do-i-profile-a-python-script-1657388346692"},{"title":"Performance optimization strategies of last resort [closed]","slug":"performance-optimization-strategies-of-last-resort-closed-1657388420614"},{"title":"Importing files from different folder","slug":"importing-files-from-different-folder-1657388203798"},{"title":"Grouping functions (tapply, by, aggregate) and the *apply family","slug":"grouping-functions-(tapply-by-aggregate)-and-the-*apply-family-1657387844286"},{"title":"What is the difference between a definition and a declaration?","slug":"what-is-the-difference-between-a-definition-and-a-declaration-1657387851618"},{"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445"},{"title":"Methods in ES6 objects: using arrow functions","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"Why is the command bound to a Button or event executed when declared?","slug":"why-is-the-command-bound-to-a-button-or-event-executed-when-declared-1657384872054"},{"title":"What is the best way to detect a mobile device?","slug":"what-is-the-best-way-to-detect-a-mobile-device-1657387665025"},{"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"Query based on multiple where clauses in Firebase","slug":"query-based-on-multiple-where-clauses-in-firebase-1657387494547"},{"title":"Read file line by line using ifstream in C++","slug":"read-file-line-by-line-using-ifstream-in-c++-1657388236966"},{"title":"How do I select rows from a DataFrame based on column values?","slug":"how-do-i-select-rows-from-a-dataframe-based-on-column-values-1657384901065"},{"title":"How do I split a list into equally-sized chunks?","slug":"how-do-i-split-a-list-into-equally-sized-chunks-1657384580399"},{"title":"Why is 24.0000 not equal to 24.0000 in MATLAB?","slug":"why-is-24.0000-not-equal-to-24.0000-in-matlab-1657388376753"}]},"__N_SSG":true}