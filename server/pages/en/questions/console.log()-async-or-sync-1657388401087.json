{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;code&gt;console.log&lt;/code&gt; is not standardized, so the behavior is rather undefined, and can be changed easily from release to release of the developer tools. Your book is likely to be outdated, as might my answer soon.&lt;/p&gt;\n\n&lt;p&gt;To our code, it does not make any difference whether &lt;code&gt;console.log&lt;/code&gt; is async or not, it does not provide any kind of callback or so; and the values you pass are always referenced and computed at the time you call the function.&lt;/p&gt;\n\n&lt;p&gt;We don&apos;t really know what happens then (OK, we could, since Firebug, Chrome Devtools and Opera Dragonfly are all open source). The console will need to store the logged values somewhere, and it will display them on the screen. The rendering will happen asynchronously for sure (being throttled to rate-limit updates), as will future interactions with the logged objects in the console (like expanding object properties).&lt;/p&gt;\n\n&lt;p&gt;So the console might either clone (serialize) the mutable objects that you did log, or it will store references to them. The first one doesn&apos;t work well with deep/large objects. Also, at least the initial rendering in the console will probably show the &quot;current&quot; state of the object, i.e. the one when it got logged - in your example you see &lt;code&gt;Object {}&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;However, when you expand the object to inspect its properties further, it is likely that the console will have only stored a reference to your object and its properties, and displaying them now will then show their current (already mutated) state. If you click on the &lt;code&gt;+&lt;/code&gt;, you should be able to see the &lt;code&gt;bar&lt;/code&gt; property in your example.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a screenshot that was posted in the &lt;a href=&quot;http://code.google.com/p/chromium/issues/detail?id=50316&quot; rel=&quot;noreferrer&quot;&gt;bug report&lt;/a&gt; to explain their &quot;fix&quot;:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/UEMqd.png&quot; alt=&quot;&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;So, some values might be referenced long after they have been logged, and the evaluation of these is rather &lt;em&gt;lazy&lt;/em&gt; (&quot;when needed&quot;). The most famous example of this discrepancy is handled in the question &lt;a href=&quot;https://stackoverflow.com/questions/4057440/is-chromes-javascript-console-lazy-about-evaluating-arrays&quot;&gt;Is Chrome&apos;s JavaScript console lazy about evaluating arrays?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A workaround is to make sure to log serialized snapshots of your objects always, e.g. by doing &lt;code&gt;console.log(JSON.stringify(obj))&lt;/code&gt;. This will work for non-circular and rather small objects only, though. See also &lt;a href=&quot;https://stackoverflow.com/q/7389069/1048572&quot;&gt;How can I change the default behavior of console.log in Safari?&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The better solution is to use breakpoints for debugging, where the execution completely stops and you can inspect the current values at each point. Use logging only with serialisable and immutable data.&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t really an answer to the question, but it might be handy to someone who stumbled on this post, and it was too long to put in a comment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;logSync&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    args = args.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arg)));\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(...args);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Error trying to console.logSync()&apos;&lt;/span&gt;, ...args);\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This creates a pseudo-synchronous version of &lt;code&gt;console.log&lt;/code&gt;, but with the same caveats as mentioned in the accepted answer.&lt;/p&gt;\n\n&lt;p&gt;Since it seems like, at the moment, most browsers&apos; &lt;code&gt;console.log&lt;/code&gt;&apos;s are asynchronous in some manner, you may want to use a function like this in certain scenarios.&lt;/p&gt;\n    ","\n&lt;p&gt;When using console.log:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = {}; a.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-comment&quot;&gt;// without b&lt;/span&gt;\na = {}; a.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a1&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a2&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a3&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a4&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-comment&quot;&gt;// with b, maybe&lt;/span&gt;\na = {}; a.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-comment&quot;&gt;// with b&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in the first situation the object is simple enough, so console can &apos;stringify&apos; it then present to you; but in the other situations, a is too &apos;complicated&apos; to &apos;stringify&apos; so console will show you the in memory object instead, and yes, when you look at it b has already be attached to a.&lt;/p&gt;\n    "],"id":553,"title":"console.log() async or sync?","content":"\n                \n&lt;p&gt;I am currently reading &lt;a href=&quot;http://pragprog.com/book/tbajs/async-javascript&quot;&gt;Async Javascript&lt;/a&gt; by Trevor Burnham.  This has been a great book so far.&lt;/p&gt;\n\n&lt;p&gt;He talks about this snippet and console.log being &apos;async&apos; in the Safari and Chrome console. Unfortunately I can&apos;t replicate this. Here is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {}; \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); \nobj.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// my outcome: Object{}; &apos;bar&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The book outcome: {foo:bar};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If this was async, I would anticipate the outcome to be the books outcome. console.log() is put in the event queue until all code is executed, then it is ran and it would have the bar property.&lt;/p&gt;\n\n&lt;p&gt;It appears though it is running synchronously.&lt;/p&gt;\n\n&lt;p&gt;Am I running this code wrong? Is console.log actually async?&lt;/p&gt;\n    ","slug":"console.log()-async-or-sync-1657388401087","postType":"QUESTION","createdAt":"2022-07-09T17:40:01.000Z","updatedAt":"2022-07-09T17:40:01.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do you get the footer to stay at the bottom of a Web page?","slug":"how-do-you-get-the-footer-to-stay-at-the-bottom-of-a-web-page-1657387817544"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665"},{"title":"Can PHP PDO Statements accept the table or column name as parameter?","slug":"can-php-pdo-statements-accept-the-table-or-column-name-as-parameter-1657387478588"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"What are copy elision and return value optimization?","slug":"what-are-copy-elision-and-return-value-optimization-1657385455976"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"How to manage startActivityForResult on Android","slug":"how-to-manage-startactivityforresult-on-android-1657387967393"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"How can I prevent SQL injection in PHP?","slug":"how-can-i-prevent-sql-injection-in-php-1657384220094"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"How to return DataSnapshot value as a result of a method?","slug":"how-to-return-datasnapshot-value-as-a-result-of-a-method-1657387538165"},{"title":"How can I parse a JSON file with PHP? [duplicate]","slug":"how-can-i-parse-a-json-file-with-php-duplicate-1657388002325"},{"title":"What is this weird colon-member (\" : \") syntax in the constructor?","slug":"what-is-this-weird-colon-member-(\"-:-\")-syntax-in-the-constructor-1657387264047"},{"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486"},{"title":"Why is using \"for...in\" for array iteration a bad idea?","slug":"why-is-using-\"for...in\"-for-array-iteration-a-bad-idea-1657384653458"},{"title":"Is it safe to expose Firebase apiKey to the public?","slug":"is-it-safe-to-expose-firebase-apikey-to-the-public-1657388268111"},{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"}]},"__N_SSG":true}