{"pageProps":{"data":{"answer":["\n&lt;p&gt;It is returning &lt;code&gt;None&lt;/code&gt; because when you recursively call it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n    get_input()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;..you don&apos;t return the value.&lt;/p&gt;\n&lt;p&gt;So while the recursion does happen, the return value gets discarded, and then you fall off the end of the function.  Falling off the end of the function means that python implicitly returns &lt;code&gt;None&lt;/code&gt;, just like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;))\n&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, instead of just &lt;em&gt;calling&lt;/em&gt; &lt;code&gt;get_input()&lt;/code&gt; in your &lt;code&gt;if&lt;/code&gt; statement, you need to &lt;code&gt;return&lt;/code&gt; it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_input()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To return a value other than None, you need to use a return statement.&lt;/p&gt;\n\n&lt;p&gt;In your case, the if block only executes a return when executing one branch. Either move the return outside of the if/else block, or have returns in both options.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;():\n    my_var = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter &quot;a&quot; or &quot;b&quot;: &apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_input()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_var\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got input:&apos;&lt;/span&gt;, get_input())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;i think this code more clearly&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;():\n    my_var = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter &quot;a&quot; or &quot;b&quot;: &apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var == &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; my_var == &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got input:&apos;&lt;/span&gt;, my_var)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_var\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_input()\nget_input()\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":375,"title":"Why does my recursive function return None?","content":"\n                \n&lt;p&gt;I have this function that calls itself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;():\n    my_var = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter &quot;a&quot; or &quot;b&quot;: &apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n        get_input()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_var\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got input:&apos;&lt;/span&gt;, get_input())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if I input just &quot;a&quot; or &quot;b&quot;, everything works fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Type &quot;a&quot; or &quot;b&quot;: a\ngot input: a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, if I type something else and then &quot;a&quot; or &quot;b&quot;, I get this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Type &quot;a&quot; or &quot;b&quot;: purple\nYou didn&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.\nType &quot;a&quot; or &quot;b&quot;: a\ngot input: None\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I don&apos;t know why &lt;code&gt;get_input()&lt;/code&gt; is returning &lt;code&gt;None&lt;/code&gt; since it should only return &lt;code&gt;my_var&lt;/code&gt;. Where is this &lt;code&gt;None&lt;/code&gt; coming from and how do I fix my function?&lt;/p&gt;\n    ","slug":"why-does-my-recursive-function-return-none-1657387792894","postType":"QUESTION","createdAt":"2022-07-09T17:29:52.000Z","updatedAt":"2022-07-09T17:29:52.000Z","tags":[{"id":2058,"name":"recursion","slug":"recursion","createdAt":"2022-07-09T17:29:52.000Z","updatedAt":"2022-07-09T17:29:52.000Z","Questions_Tags":{"questionId":375,"tagId":2058}},{"id":2059,"name":"return","slug":"return","createdAt":"2022-07-09T17:29:52.000Z","updatedAt":"2022-07-09T17:29:52.000Z","Questions_Tags":{"questionId":375,"tagId":2059}}],"relatedQuestions":[{"title":"Why does my recursive function return None?","slug":"why-does-my-recursive-function-return-none-1657387792894","tags":[{"name":"recursion","Questions_Tags":{"questionId":375,"tagId":2058}},{"name":"return","Questions_Tags":{"questionId":375,"tagId":2059}}]}]},"randomQuestions":[{"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873"},{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"Providing white space in a Swing GUI","slug":"providing-white-space-in-a-swing-gui-1657384734588"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"Unfortunately MyApp has stopped. How can I solve this?","slug":"unfortunately-myapp-has-stopped.-how-can-i-solve-this-1657384402171"},{"title":"Passing data between view controllers","slug":"passing-data-between-view-controllers-1657384540021"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"Using global variables in a function","slug":"using-global-variables-in-a-function-1657384796002"},{"title":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","slug":"what-is-an-indexoutofrangeexception-argumentoutofrangeexception-and-how-do-i-fix-it-1657384697159"},{"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625"},{"title":"How can I access the contents of an iframe with JavaScript/jQuery?","slug":"how-can-i-access-the-contents-of-an-iframe-with-javascriptjquery-1657388369923"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":"How do we control web page caching, across all browsers?","slug":"how-do-we-control-web-page-caching-across-all-browsers-1657387529059"},{"title":"Get top 1 row of each group","slug":"get-top-1-row-of-each-group-1657387438304"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"}]},"__N_SSG":true}