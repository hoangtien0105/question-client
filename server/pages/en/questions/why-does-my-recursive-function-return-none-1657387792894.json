{"pageProps":{"data":{"answer":["\n&lt;p&gt;It is returning &lt;code&gt;None&lt;/code&gt; because when you recursively call it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n    get_input()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;..you don&apos;t return the value.&lt;/p&gt;\n&lt;p&gt;So while the recursion does happen, the return value gets discarded, and then you fall off the end of the function.  Falling off the end of the function means that python implicitly returns &lt;code&gt;None&lt;/code&gt;, just like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;))\n&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, instead of just &lt;em&gt;calling&lt;/em&gt; &lt;code&gt;get_input()&lt;/code&gt; in your &lt;code&gt;if&lt;/code&gt; statement, you need to &lt;code&gt;return&lt;/code&gt; it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_input()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To return a value other than None, you need to use a return statement.&lt;/p&gt;\n\n&lt;p&gt;In your case, the if block only executes a return when executing one branch. Either move the return outside of the if/else block, or have returns in both options.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;():\n    my_var = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter &quot;a&quot; or &quot;b&quot;: &apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_input()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_var\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got input:&apos;&lt;/span&gt;, get_input())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;i think this code more clearly&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;():\n    my_var = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter &quot;a&quot; or &quot;b&quot;: &apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var == &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; my_var == &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got input:&apos;&lt;/span&gt;, my_var)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_var\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; get_input()\nget_input()\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":375,"title":"Why does my recursive function return None?","content":"\n                \n&lt;p&gt;I have this function that calls itself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_input&lt;/span&gt;():\n    my_var = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter &quot;a&quot; or &quot;b&quot;: &apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; my_var != &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You didn\\&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.&apos;&lt;/span&gt;)\n        get_input()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_var\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got input:&apos;&lt;/span&gt;, get_input())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if I input just &quot;a&quot; or &quot;b&quot;, everything works fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Type &quot;a&quot; or &quot;b&quot;: a\ngot input: a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, if I type something else and then &quot;a&quot; or &quot;b&quot;, I get this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Type &quot;a&quot; or &quot;b&quot;: purple\nYou didn&apos;t type &quot;a&quot; or &quot;b&quot;. Try again.\nType &quot;a&quot; or &quot;b&quot;: a\ngot input: None\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I don&apos;t know why &lt;code&gt;get_input()&lt;/code&gt; is returning &lt;code&gt;None&lt;/code&gt; since it should only return &lt;code&gt;my_var&lt;/code&gt;. Where is this &lt;code&gt;None&lt;/code&gt; coming from and how do I fix my function?&lt;/p&gt;\n    ","slug":"why-does-my-recursive-function-return-none-1657387792894","postType":"QUESTION","createdAt":"2022-07-09T17:29:52.000Z","updatedAt":"2022-07-09T17:29:52.000Z","tags":[{"id":2058,"name":"recursion","slug":"recursion","createdAt":"2022-07-09T17:29:52.000Z","updatedAt":"2022-07-09T17:29:52.000Z","Questions_Tags":{"questionId":375,"tagId":2058}},{"id":2059,"name":"return","slug":"return","createdAt":"2022-07-09T17:29:52.000Z","updatedAt":"2022-07-09T17:29:52.000Z","Questions_Tags":{"questionId":375,"tagId":2059}}],"relatedQuestions":[{"title":"Why does my recursive function return None?","slug":"why-does-my-recursive-function-return-none-1657387792894","tags":[{"name":"recursion","Questions_Tags":{"questionId":375,"tagId":2058}},{"name":"return","Questions_Tags":{"questionId":375,"tagId":2059}}]}]},"randomQuestions":[{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"Variables are not behaving as expected","slug":"variables-are-not-behaving-as-expected-1657384865672"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"How do I give text or an image a transparent background using CSS?","slug":"how-do-i-give-text-or-an-image-a-transparent-background-using-css-1657388188508"},{"title":"What is the difference between == and equals() in Java?","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"How do we control web page caching, across all browsers?","slug":"how-do-we-control-web-page-caching-across-all-browsers-1657387529059"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216"},{"title":"How to access a local variable from a different function using pointers?","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"}]},"__N_SSG":true}