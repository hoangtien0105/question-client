{"pageProps":{"data":{"answer":["\n&lt;p&gt;The function linked in another answer is insufficient. It fails to escape &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; (start and end of string), or &lt;code&gt;-&lt;/code&gt;, which in a character group is used for ranges.&lt;/p&gt;\n&lt;p&gt;Use this function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[-\\/\\\\^$*+?.()|[\\]{}]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While it may seem unnecessary at first glance, escaping &lt;code&gt;-&lt;/code&gt; (as well as &lt;code&gt;^&lt;/code&gt;) makes the function suitable for escaping characters to be inserted into a character class as well as the body of the regex.&lt;/p&gt;\n&lt;p&gt;Escaping &lt;code&gt;/&lt;/code&gt; makes the function suitable for escaping characters to be used in a JavaScript regex literal for later evaluation.&lt;/p&gt;\n&lt;p&gt;As there is no downside to escaping either of them, it makes sense to escape to cover wider use cases.&lt;/p&gt;\n&lt;p&gt;And yes, it is a disappointing failing that this is not part of standard JavaScript.&lt;/p&gt;\n    ","\n&lt;p&gt;For anyone using Lodash, &lt;a href=&quot;https://github.com/lodash/lodash/wiki/Changelog#v300&quot; rel=&quot;noreferrer&quot;&gt;since v3.0.0&lt;/a&gt; a &lt;a href=&quot;https://lodash.com/docs#escapeRegExp&quot; rel=&quot;noreferrer&quot;&gt;_.escapeRegExp&lt;/a&gt; function is built-in:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.escapeRegExp(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[lodash](https://lodash.com/)&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And, in the event that you don&apos;t want to require the full Lodash library, you may require &lt;a href=&quot;https://www.npmjs.com/package/lodash.escaperegexp&quot; rel=&quot;noreferrer&quot;&gt;just that function&lt;/a&gt;!&lt;/p&gt;\n    ","\n&lt;p&gt;Most of the expressions here solve single specific use cases.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s okay, but I prefer an &quot;always works&quot; approach.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;regExpEscape&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;literal_string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; literal_string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[-[\\]{}()*+!&amp;lt;=:?.\\/\\\\^$|#\\s,]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will &quot;fully escape&quot; a literal string for any of the following uses in regular expressions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Insertion in a regular expression. E.g. &lt;code&gt;new RegExp(regExpEscape(str))&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Insertion in a character class. E.g. &lt;code&gt;new RegExp(&apos;[&apos; + regExpEscape(str) + &apos;]&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Insertion in integer count specifier. E.g. &lt;code&gt;new RegExp(&apos;x{1,&apos; + regExpEscape(str) + &apos;}&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Execution in non-JavaScript regular expression engines.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Special Characters Covered:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: Creates a character range in a character class.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[&lt;/code&gt; / &lt;code&gt;]&lt;/code&gt;: Starts / ends a character class.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;{&lt;/code&gt; / &lt;code&gt;}&lt;/code&gt;: Starts / ends a numeration specifier.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(&lt;/code&gt; / &lt;code&gt;)&lt;/code&gt;: Starts / ends a group.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;*&lt;/code&gt; / &lt;code&gt;+&lt;/code&gt; / &lt;code&gt;?&lt;/code&gt;: Specifies repetition type.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: Matches any character.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\&lt;/code&gt;: Escapes characters, and starts entities.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;^&lt;/code&gt;: Specifies start of matching zone, and negates matching in a character class.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$&lt;/code&gt;: Specifies end of matching zone.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;|&lt;/code&gt;: Specifies alternation.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;#&lt;/code&gt;: Specifies comment in free spacing mode.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\s&lt;/code&gt;: Ignored in free spacing mode.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;,&lt;/code&gt;: Separates values in numeration specifier.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;/&lt;/code&gt;: Starts or ends expression.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;:&lt;/code&gt;: Completes special group types, and part of Perl-style character classes.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;!&lt;/code&gt;: Negates zero-width group.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; / &lt;code&gt;=&lt;/code&gt;: Part of zero-width group specifications.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Notes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;/&lt;/code&gt; is not strictly necessary in any flavor of regular expression. However, it protects in case someone &lt;em&gt;(shudder)&lt;/em&gt; does &lt;code&gt;eval(&quot;/&quot; + pattern + &quot;/&quot;);&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;,&lt;/code&gt; ensures that if the string is meant to be an integer in the numerical specifier, it will properly cause a RegExp compiling error instead of silently compiling wrong.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;#&lt;/code&gt;, and &lt;code&gt;\\s&lt;/code&gt; do not need to be escaped in JavaScript, but do in many other flavors. They are escaped here in case the regular expression will later be passed to another program.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you also need to future-proof the regular expression against potential additions to the JavaScript regex engine capabilities, I recommend using the more paranoid:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;regExpEscapeFuture&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;literal_string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; literal_string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[^A-Za-z0-9_]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function escapes every character except those explicitly guaranteed not be used for syntax in future regular expression flavors.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For the truly sanitation-keen, consider this edge case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(choice1|choice2|&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;regExpEscape&lt;/span&gt;(s) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; compile fine in JavaScript, but will not in some other flavors. If intending to pass to another flavor, the null case of &lt;code&gt;s === &apos;&apos;&lt;/code&gt; should be independently checked, like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(choice1|choice2&apos;&lt;/span&gt; + (s ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;|&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;regExpEscape&lt;/span&gt;(s) : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping&quot; rel=&quot;noreferrer&quot;&gt;Mozilla Developer Network&apos;s Guide to Regular Expressions&lt;/a&gt; provides this escaping function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegExp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.*+?^${}()|[\\]\\\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// $&amp;amp; means the whole matched string&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In jQuery UI&apos;s autocomplete widget (version 1.9.1) they use a slightly different regular expression (line 6753), here&apos;s the regular expression combined with &lt;a href=&quot;https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711&quot;&gt;bobince&apos;s approach&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; value &lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$&amp;amp;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Nothing should prevent you from just escaping every non-alphanumeric character:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;usersString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(?=\\W)/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You lose a certain degree of readability when doing &lt;code&gt;re.toString()&lt;/code&gt; but you win a great deal of simplicity (and security).&lt;/p&gt;\n\n&lt;p&gt;According to ECMA-262, on the one hand, regular expression &quot;syntax characters&quot; are always non-alphanumeric, such that the result is secure, and special escape sequences (&lt;code&gt;\\d&lt;/code&gt;, &lt;code&gt;\\w&lt;/code&gt;, &lt;code&gt;\\n&lt;/code&gt;) are always alphanumeric such that no false control escapes will be produced.&lt;/p&gt;\n    ","\n&lt;p&gt;There is an &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#7th_Edition_-_ECMAScript_2016&quot; rel=&quot;nofollow noreferrer&quot;&gt;ES7&lt;/a&gt; proposal for RegExp.escape at &lt;a href=&quot;https://github.com/benjamingr/RexExp.escape/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/benjamingr/RexExp.escape/&lt;/a&gt;, with a polyfill available at &lt;a href=&quot;https://github.com/ljharb/regexp.escape&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ljharb/regexp.escape&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Another (much safer) approach is to escape all the characters (and not just a few special ones that we currently know) using the unicode escape format &lt;code&gt;\\u{code}&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegExp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;text&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(text)\n           .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;char&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`\\\\u{&lt;span class=&quot;hljs-subst&quot;&gt;${char.charCodeAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).toString(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)}&lt;/span&gt;}`&lt;/span&gt;)\n           .&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(escapeRegExp(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;\\u{61}\\u{2e}\\u{62}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please note that you need to pass the &lt;code&gt;u&lt;/code&gt; flag for this method to work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expression = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(escapeRegExp(usersString), &lt;span class=&quot;hljs-string&quot;&gt;&apos;u&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a shorter version.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[$-\\/?[-^{|}]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This includes the non-meta characters of &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&apos;&lt;/code&gt;, and &lt;code&gt;,&lt;/code&gt;, but the JavaScript RegExp specification allows this.&lt;/p&gt;\n    ","\n&lt;p&gt;There is an ES7 proposal for RegExp.escape at &lt;a href=&quot;https://github.com/benjamingr/RexExp.escape/&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/benjamingr/RexExp.escape/&lt;/a&gt;, with a polyfill available at &lt;a href=&quot;https://github.com/ljharb/regexp.escape&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/ljharb/regexp.escape&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;An example based on the rejected ES proposal, includes checks if the property already exists, in the case that TC39 backtracks on their decision.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;hasOwnProperty&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;escape&apos;&lt;/span&gt;)) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// https://github.com/benjamingr/RegExp.escape/issues/37&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.*+\\-?^${}()|[\\]\\\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// $&amp;amp; means the whole matched string&lt;/span&gt;\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Code Minified:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;hasOwnProperty&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;escape&quot;&lt;/span&gt;)||(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.*+\\-?^${}()|[\\]\\\\]/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$&amp;amp;&quot;&lt;/span&gt;)});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assert = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;assert&apos;&lt;/span&gt;);\n \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello. how are you?&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(str), &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;);\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(regex), &lt;span class=&quot;hljs-string&quot;&gt;&apos;/hello\\. how are you\\?/g&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;There is also an &lt;code&gt;npm&lt;/code&gt; module at:\n&lt;a href=&quot;https://www.npmjs.com/package/regexp.escape&quot; rel=&quot;noreferrer&quot;&gt;https://www.npmjs.com/package/regexp.escape&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;One can install this and use it as so:&lt;/p&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;npm install regexp.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;yarn add regexp.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;regexp.escape&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assert = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;assert&apos;&lt;/span&gt;);\n \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello. how are you?&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(str), &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;);\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(regex), &lt;span class=&quot;hljs-string&quot;&gt;&apos;/hello\\. how are you\\?/g&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the GitHub &amp;amp;&amp;amp; NPM page are descriptions of how to use the shim/polyfill for this option, as well. That logic is based on &lt;code&gt;return RegExp.escape || implementation;&lt;/code&gt;, where implementation contains the regexp used above.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The NPM module is an extra dependency, but it also make it easier for an external contributor to identify logical parts added to the code. ¯\\&lt;em&gt;()&lt;/em&gt;/¯&lt;/p&gt;\n    ","\n&lt;p&gt;XRegExp has an escape function:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;XRegExp.escape(&apos;Escaped? &amp;lt;.&amp;gt;&apos;);\n// -&amp;gt; &apos;Escaped\\?\\ &amp;lt;\\.&amp;gt;&apos;\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;More on: &lt;a href=&quot;http://xregexp.com/api/#escape&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://xregexp.com/api/#escape&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;escapeRegExp = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(str).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/([.*+?^=!:${}()|[\\]\\/\\\\])/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$1&apos;&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Rather than only escaping characters which will cause issues in your regular expression (e.g.: a blacklist), consider using a whitelist instead. This way each character is considered tainted unless it matches.&lt;/p&gt;\n&lt;p&gt;For this example, assume the following expression:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;be || ! be&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This whitelists letters, number and spaces:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/([^\\w\\d\\s])/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$1&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Returns:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;be \\|\\| \\! be&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This may escape characters which do not need to be escaped, but this doesn&apos;t hinder your expression (maybe some minor time penalties - but it&apos;s worth it for safety).&lt;/p&gt;\n    ","\n&lt;p&gt;The functions in the other answers are overkill for escaping entire regular expressions (they may be useful for escaping &lt;em&gt;parts&lt;/em&gt; of regular expressions that will later be concatenated into bigger regexps).&lt;/p&gt;\n\n&lt;p&gt;If you escape an entire regexp and are done with it, quoting the metacharacters that are either standalone (&lt;code&gt;.&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt;) or start something (&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;) is all you need:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;regexEscape&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;regexEscape&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[.?+*^$|({[\\\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And yes, it&apos;s disappointing that JavaScript doesn&apos;t have a function like this built-in.&lt;/p&gt;\n    ","\n&lt;p&gt;There has only ever been and ever will be 12 meta characters that need to be escaped\nto be considered a literal.&lt;/p&gt;\n&lt;p&gt;It doesn&apos;t matter what is done with the escaped string, inserted into a balanced regex wrapper or appended. It doesn&apos;t matter.&lt;/p&gt;\n&lt;p&gt;Do a string replace using this&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; escaped_string = oldstring.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\\\^$.|?*+()[{]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I borrowed bobince&apos;s &lt;a href=&quot;https://stackoverflow.com/a/3561711/3120446&quot;&gt;answer above&lt;/a&gt; and created a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates&quot; rel=&quot;nofollow noreferrer&quot;&gt;tagged template function&lt;/a&gt; for creating a &lt;code&gt;RegExp&lt;/code&gt; where part of the value is escaped and part isn&apos;t.&lt;/p&gt;\n&lt;h3&gt;regex-escaped.js&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escape&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;text&lt;/span&gt; =&amp;gt;&lt;/span&gt; text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\$&amp;amp;&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;escaped&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;flags&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;regexStrings, ...escaped&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; source = regexStrings\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// escaped[i] will be undefined for the last value of s&lt;/span&gt;\n        escaped[i] === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n          ? s\n          : s + &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(escaped[i].&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;())\n      )\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(source, flags);\n  };\n  \n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;capitalizeFirstUserInputCaseInsensitiveMatch&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;text, userInput&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [, before, match, after ] =\n    &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.escaped(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;`^((?:(?!&lt;span class=&quot;hljs-subst&quot;&gt;${userInput}&lt;/span&gt;).)*)(&lt;span class=&quot;hljs-subst&quot;&gt;${userInput}&lt;/span&gt;)?(.*)$`&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(text);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${before}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${match.toUpperCase()}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${after}&lt;/span&gt;`&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; text = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello (world)&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; userInput = &lt;span class=&quot;hljs-string&quot;&gt;&apos;lo (wor&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;capitalizeFirstUserInputCaseInsensitiveMatch&lt;/span&gt;(text, userInput));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;For our TypeScript fans...&lt;/p&gt;\n&lt;h3&gt;global.d.ts&lt;/h3&gt;\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExpConstructor&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Escapes a string so that it can be used as a literal within a `RegExp`. */&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;): &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;/**\n   * Returns a tagged template function that creates `RegExp` with its template values escaped.\n   *\n   * This can be useful when using a `RegExp` to search with user input.\n   *\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; flags The flags to apply to the `RegExp`.\n   *\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@example&lt;/span&gt;\n   *\n   * function capitalizeFirstUserInputCaseInsensitiveMatch(text: string, userInput: string) {\n   *   const [, before, match, after ] =\n   *     RegExp.escaped(&apos;i&apos;)`^((?:(?!${userInput}).)*)(${userInput})?(.*)$`.exec(text);\n   *\n   *   return `${before}${match.toUpperCase()}${after}`;\n   * }\n   */&lt;/span&gt;\n  escaped(flags?: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;): &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;regexStrings: TemplateStringsArray, ...escapedVals: &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":315,"title":"Is there a RegExp.escape function in JavaScript?","content":"\n                \n&lt;p&gt;I just want to create a regular expression out of any possible string.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; usersString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello?!*`~World()[]&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expression = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(usersString))\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(expression);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is there a built-in method for that? If not, what do people use? Ruby has &lt;a href=&quot;http://ruby-doc.org/core/classes/Regexp.html#M001195&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;RegExp.escape&lt;/code&gt;&lt;/a&gt;. I don&apos;t feel like I&apos;d need to write my own, there have got to be something standard out there.&lt;/p&gt;\n    ","slug":"is-there-a-regexp.escape-function-in-javascript-1657387606651","postType":"QUESTION","createdAt":"2022-07-09T17:26:46.000Z","updatedAt":"2022-07-09T17:26:46.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"How to randomize (shuffle) a JavaScript array?","slug":"how-to-randomize-(shuffle)-a-javascript-array-1657384790171"},{"title":"Why does my recursive function return None?","slug":"why-does-my-recursive-function-return-none-1657387792894"},{"title":"MySQL pivot row into dynamic number of columns","slug":"mysql-pivot-row-into-dynamic-number-of-columns-1657387981930"},{"title":"Is it possible for flex items to align tightly to the items above them?","slug":"is-it-possible-for-flex-items-to-align-tightly-to-the-items-above-them-1657388511179"},{"title":"How to remove the space between inline/inline-block elements?","slug":"how-to-remove-the-space-between-inlineinline-block-elements-1657384532273"},{"title":"$(document).ready equivalent without jQuery","slug":"dollar(document).ready-equivalent-without-jquery-1657388504115"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"What is the difference between a definition and a declaration?","slug":"what-is-the-difference-between-a-definition-and-a-declaration-1657387851618"},{"title":"What does a \"Cannot find symbol\" or \"Cannot resolve symbol\" error mean?","slug":"what-does-a-\"cannot-find-symbol\"-or-\"cannot-resolve-symbol\"-error-mean-1657384492160"},{"title":"How to center an element horizontally and vertically","slug":"how-to-center-an-element-horizontally-and-vertically-1657388132330"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"How can I do a FULL OUTER JOIN in MySQL?","slug":"how-can-i-do-a-full-outer-join-in-mysql-1657388175444"},{"title":"How to get the difference between two arrays in JavaScript?","slug":"how-to-get-the-difference-between-two-arrays-in-javascript-1657388463384"}]},"__N_SSG":true}