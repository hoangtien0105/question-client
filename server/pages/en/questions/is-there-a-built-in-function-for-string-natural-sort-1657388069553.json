{"pageProps":{"data":{"answer":["\n&lt;p&gt;There is a third party library for this on PyPI called &lt;a href=&quot;https://github.com/SethMMorton/natsort&quot; rel=&quot;noreferrer&quot;&gt;natsort&lt;/a&gt; (full disclosure, I am the package&apos;s author).  For your case, you can do either of the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; natsort &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; natsorted, ns\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;natsorted(x, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; y: y.lower())\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;natsorted(x, alg=ns.IGNORECASE)  &lt;span class=&quot;hljs-comment&quot;&gt;# or alg=ns.IC&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You should note that &lt;code&gt;natsort&lt;/code&gt; uses a general algorithm so it should work for just about any input that you throw at it. If you want more details on why you might choose a library to do this rather than rolling your own function, check out the &lt;code&gt;natsort&lt;/code&gt; documentation&apos;s &lt;a href=&quot;http://natsort.readthedocs.io/en/master/howitworks.html&quot; rel=&quot;noreferrer&quot;&gt;How It Works&lt;/a&gt; page, in particular the &lt;a href=&quot;http://natsort.readthedocs.io/en/master/howitworks.html#special-cases-everywhere&quot; rel=&quot;noreferrer&quot;&gt;Special Cases Everywhere!&lt;/a&gt; section.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;If you need a sorting key instead of a sorting function, use either of the below formulas.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; natsort &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; natsort_keygen, ns\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l2 = l1[:]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;natsort_key1 = natsort_keygen(key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; y: y.lower())\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1.sort(key=natsort_key1)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;natsort_key2 = natsort_keygen(alg=ns.IGNORECASE)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l2.sort(key=natsort_key2)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l2\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Update November 2020&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Given that a popular request/question is &quot;how to sort like Windows Explorer?&quot; (or whatever is your operating system&apos;s file system browser), as of &lt;code&gt;natsort&lt;/code&gt; version 7.1.0 there is a function called &lt;a href=&quot;https://natsort.readthedocs.io/en/master/api.html#natsort.os_sorted&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os_sorted&lt;/code&gt;&lt;/a&gt; to do exactly this. On Windows, it will sort in the same order as Windows Explorer, and on other operating systems it should sort like whatever is the local file system browser.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; natsort &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os_sorted\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;os_sorted(list_of_paths)\n&lt;span class=&quot;hljs-comment&quot;&gt;# your paths sorted like your file system browser&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For those needing a sort key, you can use &lt;code&gt;os_sort_keygen&lt;/code&gt; (or &lt;code&gt;os_sort_key&lt;/code&gt; if you just need the defaults).&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Caveat&lt;/em&gt; - Please read the API documentation for this function before you use to understand the limitations and how to get best results.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;): \n    convert = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; text: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(text) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; text.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; text.lower()\n    alphanum_key = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; key: [convert(c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;([0-9]+)&apos;&lt;/span&gt;, key)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(l, key=alphanum_key)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Code adapted from here: &lt;a href=&quot;http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html&quot; rel=&quot;noreferrer&quot;&gt;Sorting for Humans : Natural Sort Order&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a much more pythonic version of Mark Byer&apos;s answer:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sort_key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, _nsre=re.&lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;([0-9]+)&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(text) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; text.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; text.lower()\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; text &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _nsre.split(s)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now this function can be used as a key in any function that uses it, like &lt;code&gt;list.sort&lt;/code&gt;, &lt;code&gt;sorted&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;p&gt;As a lambda:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(t) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; t.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\d+)&apos;&lt;/span&gt;, s)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Fully reproducible demo code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\nnatsort = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(t) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; t.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\d+)&apos;&lt;/span&gt;, s)]\nL = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a10&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a11&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a22&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a3&quot;&lt;/span&gt;]   \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(L, key=natsort))  \n&lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;a1&apos;, &apos;a2&apos;, &apos;a3&apos;, &apos;a10&apos;, &apos;a11&apos;, &apos;a22&apos;] &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s analyse the data. The digit capacity of all elements is 2. And there are 3 letters in common literal part &lt;code&gt;&apos;elm&apos;&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;So, the maximal length of element is 5. We can increase this value to make sure (for example, to 8).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bearing that in mind, we&apos;ve got a one-line solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data.sort(key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;{0:0&amp;gt;8}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(x).lower())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;without regular expressions and external libraries!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(data)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explanation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; data:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{0:0&amp;gt;8}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(elm).lower())\n\n&amp;gt;&amp;gt;&amp;gt;\n0000elm0\n0000elm1\n0000elm2\n0000elm9\n000elm10\n000elm11\n000elm13\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wrote a function based on &lt;a href=&quot;http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html&quot;&gt;http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html&lt;/a&gt; which adds the ability to still pass in your own &apos;key&apos; parameter. I need this in order to perform a natural sort of lists that contain more complex objects (not just strings).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s:s&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    Sort the list into natural alphanumeric order.\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_alphanum_key_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;):\n        convert = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; text: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(text) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; text.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; text \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: [convert(c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;([0-9]+)&apos;&lt;/span&gt;, key(s))]\n    sort_key = get_alphanum_key_func(key)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.sort(key=sort_key)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_list = [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;}]\nnatural_sort(my_list, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; my_list\n[{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Given:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Similar to SergO&apos;s solution, a &lt;strong&gt;1-liner without external libraries would be&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data.sort(key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sorted_data = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(data, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Explanation:&lt;/p&gt;\n&lt;p&gt;This solution uses the &lt;em&gt;key&lt;/em&gt; feature of &lt;em&gt;sort&lt;/em&gt; to define a function that will be employed for the sorting. Because we know that every data entry is preceded by &apos;elm&apos; the sorting function converts to integer the portion of the string after the 3rd character (i.e. int(x[3:])). If the numerical part of the data is in a different location, then this part of the function would have to change.&lt;/p&gt;\n    ","\n&lt;strong&gt;And now for something more* elegant (pythonic)&lt;/strong&gt; &lt;em&gt;-just a touch&lt;/em&gt;\n\n&lt;p&gt;There are many implementations out there, and while some have come close, none quite captured the elegance modern python affords.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Tested using python(3.5.1)&lt;/li&gt;\n&lt;li&gt;Included an additional list to demonstrate that it works when the\nnumbers are mid string&lt;/li&gt;\n&lt;li&gt;Didn&apos;t test, however, I am assuming that if your list was sizable it would be more efficient to compile the regex beforehand\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;I&apos;m sure someone will correct me if this is an erroneous assumption&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;strong&gt;Quicky&lt;/strong&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; re &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;, split    \ndre = &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;(\\d+)&apos;&lt;/span&gt;)\nmylist.sort(key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; l: [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; split(dre, l)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;strong&gt;Full-Code&lt;/strong&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/python3&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# coding=utf-8&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nNatural-Sort Test\n&quot;&quot;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; re &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;, split\n\ndre = &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;(\\d+)&apos;&lt;/span&gt;)\nmylist = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm&apos;&lt;/span&gt;]\nmylist2 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;e0lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e1lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E2lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e9lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e10lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E12lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e13lm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e01lm&apos;&lt;/span&gt;]\n\nmylist.sort(key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; l: [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; split(dre, l)])\nmylist2.sort(key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; l: [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; split(dre, l)])\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(mylist)  \n  &lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;elm&apos;, &apos;elm0&apos;, &apos;elm1&apos;, &apos;Elm2&apos;, &apos;elm9&apos;, &apos;elm10&apos;, &apos;Elm11&apos;, &apos;Elm12&apos;, &apos;elm13&apos;]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(mylist2)  \n  &lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;e0lm&apos;, &apos;e1lm&apos;, &apos;e01lm&apos;, &apos;E2lm&apos;, &apos;e9lm&apos;, &apos;e10lm&apos;, &apos;E12lm&apos;, &apos;e13lm&apos;, &apos;elm&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt; when using&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;from os.path import split&lt;/code&gt;\n\n&lt;ul&gt;\n&lt;li&gt;you will need to differentiate the imports&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Inspiration&lt;/strong&gt; from&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/howto/sorting.html&quot; rel=&quot;noreferrer&quot;&gt;Python Documentation- Sorting HOW TO&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/sorting-for-humans-natural-sort-order/&quot; rel=&quot;noreferrer&quot;&gt;Sorting for Humans : Natural Sort Order&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://nedbatchelder.com/blog/200712.html#e20071211T054956&quot; rel=&quot;noreferrer&quot;&gt;Human Sorting&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Contributors/Commentators to this and referenced posts &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;Value Of This Post&lt;/h1&gt;\n&lt;p&gt;My point is to offer a non regex solution that can be applied generally.&lt;br&gt;\nI&apos;ll create three functions:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;find_first_digit&lt;/code&gt; which I borrowed from &lt;a href=&quot;https://stackoverflow.com/a/4510805/2336654&quot;&gt;@AnuragUniyal&lt;/a&gt;.  It will find the position of the first digit or non-digit in a string.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;split_digits&lt;/code&gt; which is a generator that picks apart a string into digit and non digit chunks.  It will also &lt;code&gt;yield&lt;/code&gt; integers when it is a digit.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;natural_key&lt;/code&gt; just wraps &lt;code&gt;split_digits&lt;/code&gt; into a &lt;code&gt;tuple&lt;/code&gt;.  This is what we use as a key for &lt;code&gt;sorted&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h1&gt;Functions&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;find_first_digit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, non=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(s):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x.isdigit() ^ non:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;split_digits&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, case=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    non = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; s:\n        i = find_first_digit(s, non)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            non = &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; non\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; i == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; case &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s.lower()\n            s = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            x, s = s[:i], s[i:]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; case &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; x.lower()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, *args, **kwargs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(split_digits(s, *args, **kwargs))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can see that it is general in that we can have multiple digit chunks:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Note that the key has lower case letters&lt;/span&gt;\nnatural_key(&lt;span class=&quot;hljs-string&quot;&gt;&apos;asl;dkfDFKJ:sdlkfjdf809lkasdjfa_543_hh&apos;&lt;/span&gt;)\n\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;asl;dkfdfkj:sdlkfjdf&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;809&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;lkasdjfa_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;543&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_hh&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or leave as case sensitive:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;natural_key(&lt;span class=&quot;hljs-string&quot;&gt;&apos;asl;dkfDFKJ:sdlkfjdf809lkasdjfa_543_hh&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;asl;dkfDFKJ:sdlkfjdf&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;809&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;lkasdjfa_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;543&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_hh&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;We can see that it sorts the OP&apos;s list in the appropriate order&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(\n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;],\n    key=natural_key\n)\n\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But it can handle more complicated lists as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(\n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;f_1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e_1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a_2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g_0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d_0_12:2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d_0_1_:2&apos;&lt;/span&gt;],\n    key=natural_key\n)\n\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a_2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d_0_1_:2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d_0_12:2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e_1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f_1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g_0&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;My regex equivalent would be&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;int_maybe&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x).isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; x\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;split_digits_re&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, case=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    parts = re.findall(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\d+|\\D+&apos;&lt;/span&gt;, s)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; case:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(int_maybe, (x.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; parts))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(int_maybe, parts)\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_key_re&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, *args, **kwargs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(split_digits_re(s, *args, **kwargs))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One option is to turn the string into a tuple and replace digits using expanded form &lt;a href=&quot;http://wiki.answers.com/Q/What_does_expanded_form_mean&quot; rel=&quot;nofollow&quot;&gt;http://wiki.answers.com/Q/What_does_expanded_form_mean&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;that way a90 would become (&quot;a&quot;,90,0) and a1 would become (&quot;a&quot;,1)&lt;/p&gt;\n\n&lt;p&gt;below is some sample code (which isn&apos;t very efficient due to the way It removes leading 0&apos;s from numbers)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;alist=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;something1&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;something12&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;something17&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;something2&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;something25and_then_33&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;something25and_then_34&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;something29&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;beta1.1&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;beta2.3.0&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;beta2.33.1&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;a001&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;a2&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;z002&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;z1&quot;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt;):\n    nums=&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0123456789&quot;&lt;/span&gt;))\n        chars=&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(k))\n    chars=chars-nums\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(k)):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; chars:\n            k=k.replace(c+&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;,c)\n    l=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(k)\n    base=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n    j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            l[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(l[i])*base**j\n            j+=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n            j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    l=&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(l)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; l\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(alist,key=key)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a001&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;beta1.1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;beta2.3.0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;beta2.33.1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something17&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something25and_then_33&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something25and_then_34&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;something29&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z002&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;An improvement on Claudiu&apos;s improvement on Mark Byers&apos; answer ;-)&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sort_key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, _re=re.&lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;r&apos;(\\d+)&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(t) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; t.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(_re.split(s))]\n\n...\nmy_naturally_sorted_list = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(my_list, key=natural_sort_key)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;BTW, maybe not everyone remembers that function argument defaults are evaluated at &lt;code&gt;def&lt;/code&gt; time&lt;/p&gt;\n    ","\n&lt;p&gt;Based on the answers here, I wrote a &lt;code&gt;natural_sorted&lt;/code&gt; function that behaves like the built-in function &lt;code&gt;sorted&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Copyright (C) 2018, Benjamin Drung &amp;lt;bdrung@posteo.de&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Permission to use, copy, modify, and/or distribute this software for any&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# purpose with or without fee is hereby granted, provided that the above&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# copyright notice and this permission notice appear in all copies.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sorted&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, key=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Return a new naturally sorted list from the items in *iterable*.\n\n    The returned list is in natural sort order. The string is ordered\n    lexicographically (using the Unicode code point number to order individual\n    characters), except that multi-digit numbers are ordered as a single\n    character.\n\n    Has two optional arguments which must be specified as keyword arguments.\n\n    *key* specifies a function of one argument that is used to extract a\n    comparison key from each list element: ``key=str.lower``.  The default value\n    is ``None`` (compare the elements directly).\n\n    *reverse* is a boolean value.  If set to ``True``, then the list elements are\n    sorted as if each comparison were reversed.\n\n    The :func:`natural_sorted` function is guaranteed to be stable. A sort is\n    stable if it guarantees not to change the relative order of elements that\n    compare equal --- this is helpful for sorting in multiple passes (for\n    example, sort by department, then by salary grade).\n    &quot;&quot;&quot;&lt;/span&gt;\n    prog = re.&lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;r&quot;(\\d+)&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alphanum_key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Split given key in list of strings and digits&quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(c) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; prog.split(key(element)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; element)]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=alphanum_key, reverse=reverse)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The source code is also available in my GitHub snippets repository:\n&lt;a href=&quot;https://github.com/bdrung/snippets/blob/master/natural_sorted.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/bdrung/snippets/blob/master/natural_sorted.py&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The algorithm I use is &lt;code&gt;padzero_with_lower&lt;/code&gt; as defined as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;padzero_with_lower&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; re.sub(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;\\d+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; m: m.group(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).rjust(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;), s).lower()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The algorithm finds:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;finds and pads numbers of any length, to a large enough length, e.g. 10&lt;/li&gt;\n&lt;li&gt;then, it turns the string into lower case&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Here&apos;s an example usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file1.txt&apos;&lt;/span&gt;))   &lt;span class=&quot;hljs-comment&quot;&gt;# file0000000001.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file12.txt&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# file0000000012.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file23.txt&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# file0000000023.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file123.txt&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# file0000000123.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file301.txt&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# file0000000301.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dir2/file15.txt&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# dir0000000002/file0000000015.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2/file123.txt&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# dir0000000002/file0000000123.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir15/file2.txt&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# dir0000000015/file0000000002.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dir15/file15.txt&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# dir0000000015/file0000000015.txt&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000000&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000001&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000002&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000009&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000010&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000011 &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000012&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(padzero_with_lower(&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# elm0000000013&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With this function tested, we can now use it as our key, i.e.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\nlis.sort(key=padzero_with_lower)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(lis)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output: [&apos;elm0&apos;, &apos;elm1&apos;, &apos;Elm2&apos;, &apos;elm9&apos;, &apos;elm10&apos;, &apos;Elm11&apos;, &apos;Elm12&apos;, &apos;elm13&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A compact solution, based on the transformation of the string into a &lt;code&gt;List[Tuple(str, int)]&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;Code&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;string_to_pairs&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, pairs=re.&lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;r&quot;(\\D*)(\\d*)&quot;&lt;/span&gt;&lt;/span&gt;).findall&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [(text.lower(), &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(digits &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (text, digits) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pairs(s)[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Demonstration&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;], key=string_to_pairs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Tests&lt;/h2&gt;\n&lt;h3&gt;Transformation&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) == []\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;123&quot;&lt;/span&gt;) == [(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;) == [(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;123abc&quot;&lt;/span&gt;) == [(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc123&quot;&lt;/span&gt;) == [(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;123abc456&quot;&lt;/span&gt;) == [(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; string_to_pairs(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc123efg&quot;&lt;/span&gt;) == [(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&quot;efg&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Sorting&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Some extracts from the test suite of the natsort library. Permalink:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# https://github.com/SethMMorton/natsort/blob/e3c32f5638bf3a0e9a23633495269bea0e75d379/tests/test_natsorted.py&lt;/span&gt;\n\nsort_data = [\n    (  &lt;span class=&quot;hljs-comment&quot;&gt;# same as test_natsorted_can_sort_as_unsigned_ints_which_is_default()&lt;/span&gt;\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a51.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50.31&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a-50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50.4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a5.034e1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50.300&quot;&lt;/span&gt;],\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a5.034e1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50.4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50.31&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a50.300&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a51.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a-50&quot;&lt;/span&gt;],\n    ),\n    (  &lt;span class=&quot;hljs-comment&quot;&gt;# same as test_natsorted_numbers_in_ascending_order()&lt;/span&gt;\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a10&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a6&quot;&lt;/span&gt;],\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a10&quot;&lt;/span&gt;],\n    ),\n    (  &lt;span class=&quot;hljs-comment&quot;&gt;# same as test_natsorted_can_sort_as_version_numbers()&lt;/span&gt;\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.9.9a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.11&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.9.9b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.11.4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.10.1&quot;&lt;/span&gt;],\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.9.9a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.9.9b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.10.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.11&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.11.4&quot;&lt;/span&gt;],\n    ),\n    (  &lt;span class=&quot;hljs-comment&quot;&gt;# different from test_natsorted_handles_filesystem_paths()&lt;/span&gt;\n        [\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder (10)/file.tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder (1)/file (1).tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder/file.x1.9.tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder (1)/file.tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder/file.x1.10.tar.gz&quot;&lt;/span&gt;,\n        ],\n        [\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder (1)/file (1).tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder (1)/file.tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder (10)/file.tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder/file.x1.9.tar.gz&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;/p/Folder/file.x1.10.tar.gz&quot;&lt;/span&gt;,\n        ],\n    ),\n    (  &lt;span class=&quot;hljs-comment&quot;&gt;# same as test_natsorted_path_extensions_heuristic()&lt;/span&gt;\n        [\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Try.Me.Bug - 09 - One.Two.Three.[text].mkv&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Try.Me.Bug - 07 - One.Two.5.[text].mkv&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Try.Me.Bug - 08 - One.Two.Three[text].mkv&quot;&lt;/span&gt;,\n        ],\n        [\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Try.Me.Bug - 07 - One.Two.5.[text].mkv&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Try.Me.Bug - 08 - One.Two.Three[text].mkv&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Try.Me.Bug - 09 - One.Two.Three.[text].mkv&quot;&lt;/span&gt;,\n        ],\n    ),\n    (  &lt;span class=&quot;hljs-comment&quot;&gt;# same as ns.IGNORECASE for test_natsorted_supports_case_handling()&lt;/span&gt;\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;corn&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Corn&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;banana&quot;&lt;/span&gt;],\n        [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;corn&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Corn&quot;&lt;/span&gt;],\n    ),\n\n]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (given, expected) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sort_data:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(given, key=string_to_pairs) == expected\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Bonus&lt;/h2&gt;\n&lt;p&gt;If your strings mix non-ascii texts and numbers, you may be interested in composing &lt;code&gt;string_to_pairs()&lt;/code&gt; with the function &lt;code&gt;remove_diacritics()&lt;/code&gt; I give &lt;a href=&quot;https://stackoverflow.com/a/71408065/173003&quot;&gt;elsewhere&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The above answers are good for the &lt;strong&gt;specific example&lt;/strong&gt; that was shown, but miss several useful cases for the more general question of natural sort. I just got bit by one of those cases, so created a more thorough solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sort_key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string_or_number&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    by Scott S. Lawton &amp;lt;scott@ProductArchitect.com&amp;gt; 2014-12-11; public domain and/or CC0 license\n\n    handles cases where simple &apos;int&apos; approach fails, e.g.\n        [&apos;0.501&apos;, &apos;0.55&apos;] floating point with different number of significant digits\n        [0.01, 0.1, 1]    already numeric so regex and other string functions won&apos;t work (and aren&apos;t required)\n        [&apos;elm1&apos;, &apos;Elm2&apos;]  ASCII vs. letters (not case sensitive)\n    &quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;try_float&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;astring&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(astring)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; astring\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(string_or_number, basestring):\n        string_or_number = string_or_number.lower()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(re.findall(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[.]\\d&apos;&lt;/span&gt;, string_or_number)) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# assume a floating point value, e.g. to correctly sort [&apos;0.501&apos;, &apos;0.55&apos;]&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;.&apos; for decimal is locale-specific, e.g. correct for the Anglosphere and Asia but not continental Europe&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [try_float(s) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;([\\d.]+)&apos;&lt;/span&gt;, string_or_number)]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# assume distinct fields, e.g. IP address, phone number with &apos;.&apos;, etc.&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# caveat: might want to first split by whitespace&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# TBD: for unicode, replace isdigit with isdecimal&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;(\\d+)&apos;&lt;/span&gt;, string_or_number)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# consider: add code to recurse for lists/tuples and perhaps other iterables&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string_or_number\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test code and several links (on and off of StackOverflow) are here:\n&lt;a href=&quot;http://productarchitect.com/code/better-natural-sort.py&quot; rel=&quot;nofollow&quot;&gt;http://productarchitect.com/code/better-natural-sort.py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Feedback welcome. That&apos;s not meant to be a definitive solution; just a step forward.&lt;/p&gt;\n    ","\n&lt;p&gt;Most likely &lt;code&gt;functools.cmp_to_key()&lt;/code&gt; is closely tied to the underlying implementation of python&apos;s sort. Besides, the &lt;em&gt;cmp&lt;/em&gt; parameter is legacy. The modern way is to transform the input items into objects that support the desired rich comparison operations.&lt;/p&gt;\n\n&lt;p&gt;Under CPython 2.x, objects of disparate types can be ordered even if the respective rich comparison operators haven&apos;t been implemented. Under CPython 3.x, objects of different types must explicitly support the comparison. See &lt;a href=&quot;https://stackoverflow.com/a/3270689&quot;&gt;How does Python compare string and int?&lt;/a&gt; which links to the &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#comparisons&quot; rel=&quot;nofollow noreferrer&quot;&gt;official documentation&lt;/a&gt;. Most of the answers depend on this implicit ordering. Switching to Python 3.x will require a new type to implement and unify comparisons between numbers and strings.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Python &lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.12&lt;/span&gt; (default, Sep &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;) \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &amp;lt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;  \n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Python &lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt; (default, Oct &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;) \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &amp;lt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n  TypeError: unorderable types: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;() &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are three different approaches. The first uses nested classes to take advantage of Python&apos;s &lt;code&gt;Iterable&lt;/code&gt; comparison algorithm. The second unrolls this nesting into a single class. The third foregoes subclassing &lt;code&gt;str&lt;/code&gt; to focus on performance. All are timed; the second is twice as fast while the third almost six times faster. Subclassing &lt;code&gt;str&lt;/code&gt; isn&apos;t required, and was probably a bad idea in the first place, but it does come with certain conveniences.&lt;/p&gt;\n\n&lt;p&gt;The sort characters are duplicated to force ordering by case, and case-swapped to force lower case letter to sort first; this is the typical definition of &quot;natural sort&quot;. I couldn&apos;t decide on the type of grouping; some might prefer the following, which also brings significant performance benefits:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: s.lower()+s.swapcase()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where utilized, the comparison operators are set to that of &lt;code&gt;object&lt;/code&gt; so they won&apos;t &lt;a href=&quot;https://hg.python.org/cpython/file/3.5/Lib/functools.py#l192&quot; rel=&quot;nofollow noreferrer&quot;&gt;be ignored by &lt;code&gt;functools.total_ordering&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; functools\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@functools.total_ordering&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NaturalStringA&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;str&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}({})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;\\\n            ( &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__name__\n            , &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__repr__()\n            )\n    d = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; c, s: [ c.NaturalStringPart(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(v))\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                       itertools.groupby(s, c.isdigit)\n                     ]\n    d = &lt;span class=&quot;hljs-built_in&quot;&gt;classmethod&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-meta&quot;&gt;    @functools.total_ordering&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NaturalStringPart&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;str&lt;/span&gt;):\n        d = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(c.lower()+c.swapcase() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; s)\n        d = &lt;span class=&quot;hljs-built_in&quot;&gt;staticmethod&lt;/span&gt;(d)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__lt__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(self) &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(other)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.isdigit():\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; other.isdigit():\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.d(self) &amp;lt; self.d(other)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(self) == &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(other)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; other.isdigit():\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.d(self) == self.d(other)\n        __le__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__le__\n        __ne__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__ne__\n        __gt__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__gt__\n        __ge__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__ge__\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__lt__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.d(self) &amp;lt; self.d(other)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.d(self) == self.d(other)\n    __le__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__le__\n    __ne__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__ne__\n    __gt__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__gt__\n    __ge__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__ge__\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; functools\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@functools.total_ordering&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NaturalStringB&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;str&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}({})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;\\\n            ( &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__name__\n            , &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__repr__()\n            )\n    d = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(c.lower()+c.swapcase() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; s)\n    d = &lt;span class=&quot;hljs-built_in&quot;&gt;staticmethod&lt;/span&gt;(d)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__lt__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;\n        groups = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i: itertools.groupby(i, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).isdigit), (self, other))\n        zipped = itertools.zip_longest(*groups)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s,o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; zipped:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            s_k, s_v = s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n            o_k, o_v = o[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(o[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_k &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; o_k:\n                s_v, o_v = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s_v), &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(o_v)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s_v &amp;lt; o_v\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; s_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; o_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                s_v, o_v = self.d(s_v), self.d(o_v)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s_v &amp;lt; o_v\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;\n        groups = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i: itertools.groupby(i, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).isdigit), (self, other))\n        zipped = itertools.zip_longest(*groups)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s,o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; zipped:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            s_k, s_v = s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n            o_k, o_v = o[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(o[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_k &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; o_k:\n                s_v, o_v = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(s_v), &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(o_v)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; s_k &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; o_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                s_v, o_v = self.d(s_v), self.d(o_v)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    __le__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__le__\n    __ne__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__ne__\n    __gt__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__gt__\n    __ge__ = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__ge__\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; functools\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; enum\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OrderingType&lt;/span&gt;(enum.Enum):\n    PerWordSwapCase         = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: s.lower()+s.swapcase()\n    PerCharacterSwapCase    = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(c.lower()+c.swapcase() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; s)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NaturalOrdering&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;    @classmethod&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;by&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, ordering&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cls(string, ordering)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, string, ordering=OrderingType.PerCharacterSwapCase&lt;/span&gt;):\n        self.string = string\n        self.groups = [ (k,&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(v)))\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                        (k,ordering(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(v)))\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                        itertools.groupby(string, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.isdigit)\n                      ]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}({})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;\\\n            ( &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__name__\n            , self.string\n            )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__lesser&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other, default&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s,o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.zip_longest(self.groups, other.groups):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            s_k, s_v = s\n            o_k, o_v = o\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_k &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; o_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s_v &amp;lt; o_v\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; s_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; o_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s_v &amp;lt; o_v\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; default\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__lt__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.__lesser(other, default=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__le__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.__lesser(other, default=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s,o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.zip_longest(self.groups, other.groups):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            s_k, s_v = s\n            o_k, o_v = o\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_k &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; o_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; s_k &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; o_k:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s_v == o_v:\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# functools.total_ordering doesn&apos;t create single-call wrappers if both&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# __le__ and __lt__ exist, so do it manually.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__gt__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        op_result = self.__le__(other)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; op_result &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; op_result\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; op_result\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__ge__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        op_result = self.__lt__(other)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; op_result &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NotImplemented&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; op_result\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; op_result\n    &lt;span class=&quot;hljs-comment&quot;&gt;# __ne__ is the only implied ordering relationship, it automatically&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# delegates to __eq__&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; natsort\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corn&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apPlE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;arbour&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Corn&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l2 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l3 = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;{} {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(x,y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l1 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l2]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sorted(l3+[&quot;0&quot;], key=NaturalStringA)&apos;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()))\n&lt;span class=&quot;hljs-number&quot;&gt;362.4729259099986&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sorted(l3+[&quot;0&quot;], key=NaturalStringB)&apos;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()))\n&lt;span class=&quot;hljs-number&quot;&gt;189.7340817489967&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sorted(l3+[&quot;0&quot;], key=NaturalOrdering.by(OrderingType.PerCharacterSwapCase))&apos;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()))\n&lt;span class=&quot;hljs-number&quot;&gt;69.34636392899847&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;natsort.natsorted(l3+[&quot;0&quot;], alg=natsort.ns.GROUPLETTERS | natsort.ns.LOWERCASEFIRST)&apos;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()))\n&lt;span class=&quot;hljs-number&quot;&gt;98.2531585780016&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Natural sorting is both pretty complicated and vaguely defined as a problem. Don&apos;t forget to run &lt;code&gt;unicodedata.normalize(...)&lt;/code&gt; beforehand, and consider use &lt;code&gt;str.casefold()&lt;/code&gt; rather than &lt;code&gt;str.lower()&lt;/code&gt;. There are probably subtle encoding issues I haven&apos;t considered. So I tentatively recommend the &lt;a href=&quot;https://pypi.python.org/pypi/natsort&quot; rel=&quot;nofollow noreferrer&quot;&gt;natsort&lt;/a&gt; library. I took a quick glance at the github repository; the code maintenance has been stellar.&lt;/p&gt;\n\n&lt;p&gt;All the algorithms I&apos;ve seen depend on tricks such as duplicating and lowering characters, and swapping case. While this doubles the running time, an alternative would require a total natural ordering on the input character set. I don&apos;t think this is part of the unicode specification, and since there are many more unicode digits than &lt;code&gt;[0-9]&lt;/code&gt;, creating such a sorting would be equally daunting. If you want locale-aware comparisons, prepare your strings with &lt;a href=&quot;https://docs.python.org/3/library/locale.html#locale.strxfrm&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;locale.strxfrm&lt;/code&gt;&lt;/a&gt; per Python&apos;s &lt;a href=&quot;https://docs.python.org/3/howto/sorting.html#odd-and-ends&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sorting HOW TO&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Following @Mark Byers answer, here is an adaptation which accepts the &lt;code&gt;key&lt;/code&gt; parameter, and is more PEP8-compliant.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natsorted&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq, key=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;text&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(text) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; text.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; text\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alphanum&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [convert(c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;([0-9]+)&apos;&lt;/span&gt;, key(obj))]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [convert(c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;([0-9]+)&apos;&lt;/span&gt;, obj)]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(seq, key=alphanum)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I also made a &lt;a href=&quot;https://gist.github.com/edouardtheron/5e23e494f5cfbd94cf5e19201d63ccaa&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gist&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let me submit my own take on this need:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; typing &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Tuple&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Union&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;, Generator\n\n\nStrOrInt = &lt;span class=&quot;hljs-type&quot;&gt;Union&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;]\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# On Python 3.6, string concatenation is REALLY fast&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Tested myself, and this fella also tested:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# https://blog.ganssle.io/articles/2019/11/string-concat.html&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;griter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;) -&amp;gt; Generator[StrOrInt, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;]:\n    last_was_digit: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n    cluster: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; s:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; last_was_digit &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            last_was_digit = c.isdigit()\n            cluster += c\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.isdigit() != last_was_digit:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; last_was_digit:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(cluster)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; cluster\n            last_was_digit = c.isdigit()\n            cluster = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n        cluster += c\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; last_was_digit:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(cluster)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; cluster\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;grouper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Tuple&lt;/span&gt;[StrOrInt, ...]:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(griter(s))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if we have the list like such:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filelist = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;File3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File007&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File3a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File5&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;File9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8b1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8b2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8b11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File6&apos;&lt;/span&gt;\n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can simply use the &lt;code&gt;key=&lt;/code&gt; kwarg to do a natural sort:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(filelist, key=grouper)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;File1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File3a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File5&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File6&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File007&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8&apos;&lt;/span&gt;, \n&lt;span class=&quot;hljs-string&quot;&gt;&apos;File8b1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8b2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File8b11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;File11&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The drawback here is of course, as it is now, the function will sort uppercase letters before lowercase letters.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ll leave the implementation of a case-insenstive grouper to the reader :-)&lt;/p&gt;\n    ","\n&lt;p&gt;Just for the records, here is yet another variant of Mark Byers&apos; simple solution, similar to the one suggested by Walter Tross, which avoids calling &lt;code&gt;isdigit()&lt;/code&gt;. This not only makes it faster, but also avoids the problems that can occur because &lt;code&gt;isdigit()&lt;/code&gt; considers more unicode chars as digits than the the regex &lt;code&gt;\\d+&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cycle\n\n_re_digits = re.&lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;r&quot;(\\d+)&quot;&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_comparison_key&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(part) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; is_digit &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; part\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; part, is_digit &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(_re_digits.split(key), cycle((&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)))\n    )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another version of Mark Byers&apos;s answer. This version demonstrates how to pass in an attribute name, that is to be used to evaluate the objects in the list.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;natural_sort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, attrib&lt;/span&gt;):\n    convert = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; text: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(text) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; text.isdigit() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; text.lower()\n    alphanum_key = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; key: [convert(c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; re.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;([0-9]+)&apos;&lt;/span&gt;, key.__dict__[attrib])]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(l, key=alphanum_key)\n\nresults = natural_sort(albums, &lt;span class=&quot;hljs-string&quot;&gt;&apos;albumid&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where &lt;code&gt;albums&lt;/code&gt; is a list of Album instances, and &lt;code&gt;albumid&lt;/code&gt; is an string attribute that nominally has numbers in it.&lt;/p&gt;\n    ","\n&lt;p&gt;I suggest you simply use the &lt;code&gt;key&lt;/code&gt; keyword argument of &lt;code&gt;sorted&lt;/code&gt; to achieve your desired list&lt;br&gt;\nFor example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;to_order= [e2,E1,e5,E4,e3]\nordered= &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(to_order, key= &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x.lower())\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ordered should be [E1,e2,e3,E4,e5]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;H1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H100&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H6&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H50&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H5&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H99&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;H8&apos;&lt;/span&gt;]\nb = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\nc = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bubble&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;bad_list&lt;/span&gt;):&lt;span class=&quot;hljs-comment&quot;&gt;#bubble sort method&lt;/span&gt;\n        length = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(bad_list) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(length):\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bad_list[i] &amp;gt; bad_list[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:\n                                &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n                                bad_list[i], bad_list[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = bad_list[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], bad_list[i] &lt;span class=&quot;hljs-comment&quot;&gt;#sort the integer list &lt;/span&gt;\n                                a[i], a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], a[i] &lt;span class=&quot;hljs-comment&quot;&gt;#sort the main list based on the integer list index value&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a_string &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a: &lt;span class=&quot;hljs-comment&quot;&gt;#extract the number in the string character by character&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a_string:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; letter.isdigit():\n                        &lt;span class=&quot;hljs-comment&quot;&gt;#print letter&lt;/span&gt;\n                        b += letter\n        c.append(b)\n        b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Before sorting....&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\nc = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, c) &lt;span class=&quot;hljs-comment&quot;&gt;#converting string list into number list&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; c\nbubble(c)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;After sorting....&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; c\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Acknowledgments&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/895371/bubble-sort-homework&quot;&gt;Bubble Sort Homework&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2633942/how-to-read-a-string-one-letter-at-a-time-in-python&quot;&gt;How to read a string one letter at a time in python&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(lst, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(re.findall(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;\\d+$&apos;&lt;/span&gt;, x)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":463,"title":"Is there a built in function for string natural sort?","content":"\n                \n&lt;p&gt;I have a list of strings for which I would like to perform a &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_sort_order&quot; rel=&quot;noreferrer&quot;&gt;natural alphabetical sort&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;For instance, the following list is naturally sorted (what I want):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And here&apos;s the &quot;sorted&quot; version of the above list (what I get using &lt;a href=&quot;https://docs.python.org/library/functions.html#sorted&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm12&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Elm2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm13&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;elm9&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;m looking for a sort function which behaves like the first one.&lt;/p&gt;\n    ","slug":"is-there-a-built-in-function-for-string-natural-sort-1657388069553","postType":"QUESTION","createdAt":"2022-07-09T17:34:29.000Z","updatedAt":"2022-07-09T17:34:29.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to sum a variable by group","slug":"how-to-sum-a-variable-by-group-1657384838148"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"Are global variables thread-safe in Flask? How do I share data between requests?","slug":"are-global-variables-thread-safe-in-flask-how-do-i-share-data-between-requests-1657387949951"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"},{"title":"Submit same Partial View called multiple times data to controller?","slug":"submit-same-partial-view-called-multiple-times-data-to-controller-1657387887213"},{"title":"How do I properly clean up Excel interop objects?","slug":"how-do-i-properly-clean-up-excel-interop-objects-1657388329706"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"Why are global variables evil? [closed]","slug":"why-are-global-variables-evil-closed-1657388260006"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"Why is using \"for...in\" for array iteration a bad idea?","slug":"why-is-using-\"for...in\"-for-array-iteration-a-bad-idea-1657384653458"},{"title":"Generating random whole numbers in JavaScript in a specific range","slug":"generating-random-whole-numbers-in-javascript-in-a-specific-range-1657388112728"},{"title":"What to do Regular expression pattern doesn't match anywhere in string?","slug":"what-to-do-regular-expression-pattern-doesn't-match-anywhere-in-string-1657388095896"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"Sort a Map<Key, Value> by values","slug":"sort-a-maplesskey-valuegreater-by-values-1657387443904"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"Servlet returns \"HTTP Status 404 The requested resource (/servlet) is not available\"","slug":"servlet-returns-\"http-status-404-the-requested-resource-(servlet)-is-not-available\"-1657384850661"},{"title":"Why does jQuery or a DOM method such as getElementById not find the element?","slug":"why-does-jquery-or-a-dom-method-such-as-getelementbyid-not-find-the-element-1657384326458"},{"title":"How do you use bcrypt for hashing passwords in PHP? [duplicate]","slug":"how-do-you-use-bcrypt-for-hashing-passwords-in-php-duplicate-1657387318517"}]},"__N_SSG":true}