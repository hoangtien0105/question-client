{"pageProps":{"data":{"answer":["\n&lt;p&gt;For a long time, DOM3 mutation events were the best available solution, but they have been deprecated for performance reasons. &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-mutationobserver&quot; rel=&quot;noreferrer&quot;&gt;DOM4 Mutation Observers&lt;/a&gt; are the replacement for deprecated DOM3 mutation events.  They are &lt;a href=&quot;http://caniuse.com/#feat=mutationobserver&quot; rel=&quot;noreferrer&quot;&gt;currently implemented in modern browsers&lt;/a&gt; as &lt;code&gt;MutationObserver&lt;/code&gt; (or as the vendor-prefixed &lt;code&gt;WebKitMutationObserver&lt;/code&gt; in old versions of Chrome):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;MutationObserver&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;MutationObserver&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;WebKitMutationObserver&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; observer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MutationObserver&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mutations, observer&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// fired when a mutation occurs&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mutations, observer);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// define what element should be observed by the observer&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and what types of mutations trigger the callback&lt;/span&gt;\nobserver.&lt;span class=&quot;hljs-title function_&quot;&gt;observe&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;subtree&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;attributes&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This example listens for DOM changes on &lt;code&gt;document&lt;/code&gt; and its entire subtree, and it will fire on changes to element attributes as well as structural changes.  The draft spec has a full list of valid &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-mutationobserver&quot; rel=&quot;noreferrer&quot;&gt;mutation listener properties&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;childList&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to &lt;code&gt;true&lt;/code&gt; if mutations to target&apos;s children are to be observed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;attributes&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to &lt;code&gt;true&lt;/code&gt; if mutations to target&apos;s attributes are to be observed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;characterData&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to &lt;code&gt;true&lt;/code&gt; if mutations to target&apos;s data are to be observed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;subtree&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to &lt;code&gt;true&lt;/code&gt; if mutations to not just target, but also target&apos;s descendants are to be observed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;attributeOldValue&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;attributes&lt;/code&gt; is set to true and target&apos;s attribute value before the mutation needs to be recorded.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;characterDataOldValue&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;characterData&lt;/code&gt; is set to true and target&apos;s data before the mutation needs to be recorded.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;attributeFilter&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;(This list is current as of April 2014; you may check the specification for any changes.)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This answer is now deprecated. See the answer by &lt;a href=&quot;http://stackoverflow.com/a/11546242/165737&quot;&gt;apsillers&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Since this is for a Chrome extension, you might as well use the standard DOM event - &lt;code&gt;DOMSubtreeModified&lt;/code&gt;. See the support for this &lt;a href=&quot;http://www.quirksmode.org/dom/events/#t18&quot; rel=&quot;noreferrer&quot;&gt;event&lt;/a&gt; across browsers. It has been supported in Chrome since 1.0.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#someDiv&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOMSubtreeModified&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tree changed&quot;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See a working example &lt;a href=&quot;http://jsfiddle.net/eQErD/1/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Many sites use AJAX/XHR/fetch to add, show, modify content dynamically and window.history API instead of in-site navigation so current URL is changed programmatically. Such sites are called SPA, short for Single Page Application.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Usual JS methods of detecting page changes&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;MutationObserver&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt;) to literally detect DOM changes.&lt;/p&gt;\n&lt;p&gt;Info/examples:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39334319&quot;&gt;How to change the HTML content as it&apos;s loading on the page&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39332340&quot;&gt;Performance of MutationObserver to detect nodes in entire DOM&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Lightweight observer to react to a change only if URL also changed:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; lastUrl = location.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;; \n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MutationObserver&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; url = location.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (url !== lastUrl) {\n    lastUrl = url;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;onUrlChange&lt;/span&gt;();\n  }\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;observe&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;subtree&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;childList&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onUrlChange&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL changed!&apos;&lt;/span&gt;, location.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Event listener&lt;/strong&gt; for sites that signal content change by sending a DOM event:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;pjax:end&lt;/code&gt; on &lt;code&gt;document&lt;/code&gt; used by many pjax-based sites e.g. GitHub,&lt;br&gt;\nsee &lt;a href=&quot;https://stackoverflow.com/a/10713622&quot;&gt;How to run jQuery before and after a pjax load?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;message&lt;/code&gt; on &lt;code&gt;window&lt;/code&gt; used by e.g. Google search in Chrome browser,&lt;br&gt;\nsee &lt;a href=&quot;https://stackoverflow.com/a/39288755&quot;&gt;Chrome extension detect Google search refresh&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;yt-navigate-finish&lt;/code&gt; used by Youtube,&lt;br&gt;\nsee &lt;a href=&quot;https://stackoverflow.com/a/34100952&quot;&gt;How to detect page navigation on YouTube and modify its appearance seamlessly?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Periodic checking of DOM via setInterval&lt;/strong&gt;:&lt;br&gt;\nObviously this will work only in cases when you wait for a specific element identified by its id/selector to appear, and it won&apos;t let you universally detect new dynamically added content unless you invent some kind of fingerprinting the existing contents.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cloaking &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot; rel=&quot;noreferrer&quot;&gt;History API&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; _pushState = &lt;span class=&quot;hljs-title class_&quot;&gt;History&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pushState&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;History&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pushState&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;state, title, url&lt;/span&gt;) {\n  _pushState.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, state, title, url);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL changed&apos;&lt;/span&gt;, url)\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Listening to &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/HashChangeEvent&quot; rel=&quot;noreferrer&quot;&gt;hashchange&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Events/popstate&quot; rel=&quot;noreferrer&quot;&gt;popstate&lt;/a&gt; events:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hashchange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL hash changed&apos;&lt;/span&gt;, e);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;();\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;popstate&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;State changed&apos;&lt;/span&gt;, e);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;();\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;P.S. All these methods can be used in a WebExtension&apos;s &lt;a href=&quot;https://stackoverflow.com/a/4532567&quot;&gt;content script&lt;/a&gt;. It&apos;s because the case we&apos;re looking at is where the URL was changed via history.pushState or replaceState so the page itself remained the same with the same content script environment.&lt;/p&gt;\n    ","\n&lt;p&gt;Another approach depending on how you are changing the div.\nIf you are using JQuery to change a div&apos;s contents with its html() method, you can extend that method and call a registration function each time you put html into a div.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; $, oldHtmlMethod &lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Override the core html method in the jQuery object.&lt;/span&gt;\n    $.fn.&lt;span class=&quot;hljs-property&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Execute the original HTML method using the&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// augmented arguments collection.&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = oldHtmlMethod.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt; );\n        com.&lt;span class=&quot;hljs-property&quot;&gt;invisibility&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;elements&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findAndRegisterElements&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n\n    };\n})( jQuery, jQuery.&lt;span class=&quot;hljs-property&quot;&gt;fn&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;html&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We just intercept the calls to html(), call a registration function with this, which in the context refers to the target element getting new content, then we pass on the call to the original jquery.html() function. Remember to return the results of the original html() method, because JQuery expects it for method chaining.&lt;/p&gt;\n\n&lt;p&gt;For more info on method overriding and extension, check out &lt;a href=&quot;http://www.bennadel.com/blog/2009-Using-Self-Executing-Function-Arguments-To-Override-Core-jQuery-Methods.htm&quot; rel=&quot;noreferrer&quot;&gt;http://www.bennadel.com/blog/2009-Using-Self-Executing-Function-Arguments-To-Override-Core-jQuery-Methods.htm&lt;/a&gt;, which is where I cribbed the closure function. Also check out the plugins tutorial at JQuery&apos;s site.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to the &quot;raw&quot; tools provided by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;MutationObserver&lt;/code&gt; API&lt;/a&gt;, there exist &quot;convenience&quot; libraries to work with DOM mutations.&lt;/p&gt;\n\n&lt;p&gt;Consider: MutationObserver represents each DOM change in terms of subtrees. So if you&apos;re, for instance, waiting for a certain element to be inserted, it may be deep inside the children of &lt;code&gt;mutations.mutation[i].addedNodes[j]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Another problem is when your own code, in reaction to mutations, changes DOM - you often want to filter it out.&lt;/p&gt;\n\n&lt;p&gt;A good convenience library that solves such problems is &lt;a href=&quot;https://github.com/rafaelw/mutation-summary&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mutation-summary&lt;/code&gt;&lt;/a&gt; (disclaimer: I&apos;m not the author, just a satisfied user), which enables you to specify queries of what you&apos;re interested in, and get exactly that.&lt;/p&gt;\n\n&lt;p&gt;Basic usage example from the docs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; observer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MutationSummary&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;callback&lt;/span&gt;: updateWidgets,\n  &lt;span class=&quot;hljs-attr&quot;&gt;queries&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;element&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;[data-widget]&apos;&lt;/span&gt;\n  }]\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateWidgets&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;summaries&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; widgetSummary = summaries[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n  widgetSummary.&lt;span class=&quot;hljs-property&quot;&gt;added&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(buildNewWidget);\n  widgetSummary.&lt;span class=&quot;hljs-property&quot;&gt;removed&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(cleanupExistingWidget);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":431,"title":"Is there a JavaScript / jQuery DOM change listener?","content":"\n                \n&lt;p&gt;Essentially I want to have a script execute when the contents of a &lt;code&gt;DIV&lt;/code&gt; change. Since the scripts are separate (content script in the Chrome extension &amp;amp; webpage script), I need a way simply observe changes in DOM state. I could set up polling but that seems sloppy.&lt;/p&gt;\n    ","slug":"is-there-a-javascript-jquery-dom-change-listener-1657387961200","postType":"QUESTION","createdAt":"2022-07-09T17:32:41.000Z","updatedAt":"2022-07-09T17:32:41.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"Efficiently convert rows to columns in sql server","slug":"efficiently-convert-rows-to-columns-in-sql-server-1657387919213"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"What is __init__.py for?","slug":"what-is-__init__.py-for-1657388415243"},{"title":"How do I install pip on Windows?","slug":"how-do-i-install-pip-on-windows-1657388147761"},{"title":"Removing duplicates in lists","slug":"removing-duplicates-in-lists-1657388207448"},{"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983"},{"title":"Sort a Map<Key, Value> by values","slug":"sort-a-maplesskey-valuegreater-by-values-1657387443904"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244"},{"title":"How to lazy load images in ListView in Android","slug":"how-to-lazy-load-images-in-listview-in-android-1657387332835"},{"title":"Why do I need to override the equals and hashCode methods in Java?","slug":"why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java-1657388359877"},{"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188"},{"title":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","slug":"what-is-an-indexoutofrangeexception-argumentoutofrangeexception-and-how-do-i-fix-it-1657384697159"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"Post an HTML Table to ADO.NET DataTable","slug":"post-an-html-table-to-ado.net-datatable-1657387462723"},{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"},{"title":"Serialize and Deserialize Json and Json Array in Unity","slug":"serialize-and-deserialize-json-and-json-array-in-unity-1657388273270"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"}]},"__N_SSG":true}