{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;code&gt;datetime.strptime&lt;/code&gt; is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\ndatetime_object = datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The resulting &lt;code&gt;datetime&lt;/code&gt; object is timezone-naive.&lt;/p&gt;\n&lt;p&gt;Links:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Python documentation for &lt;code&gt;strptime&lt;/code&gt;: &lt;a href=&quot;https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime&quot; rel=&quot;noreferrer&quot; title=&quot;datetime.datetime.strptime&quot;&gt;Python 2&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime&quot; rel=&quot;noreferrer&quot;&gt;Python 3&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Python documentation for &lt;code&gt;strptime&lt;/code&gt;/&lt;code&gt;strftime&lt;/code&gt; format strings: &lt;a href=&quot;https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior&quot; rel=&quot;noreferrer&quot; title=&quot;strftime-and-strptime-behavior&quot;&gt;Python 2&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot; rel=&quot;noreferrer&quot;&gt;Python 3&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://strftime.org/&quot; rel=&quot;noreferrer&quot;&gt;strftime.org&lt;/a&gt; is also a really nice reference for strftime&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Notes:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;strptime&lt;/code&gt; = &quot;string parse time&quot;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;strftime&lt;/code&gt; = &quot;string format time&quot;&lt;/li&gt;\n&lt;li&gt;Pronounce it out loud today &amp;amp; you won&apos;t have to search for it again in 6 months.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Also, as seen in a comment made by @Izkata, if you want a date instead of a datetime, going through datetime handles it nicely:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y&apos;&lt;/span&gt;).date() == date(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the third party &lt;a href=&quot;https://dateutil.readthedocs.io&quot; rel=&quot;noreferrer&quot;&gt;dateutil&lt;/a&gt; library:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parser\nparser.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aug 28 1999 12:00AM&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# datetime.datetime(1999, 8, 28, 0, 0)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can handle most date formats, including the one you need to parse. It&apos;s more convenient than &lt;code&gt;strptime&lt;/code&gt; as it can guess the correct format most of the time.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s very useful for writing tests, where readability is more important than performance.&lt;/p&gt;\n\n&lt;p&gt;You can install it with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install python-dateutil\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Check out &lt;a href=&quot;http://docs.python.org/3/library/time.html#time.strptime&quot; rel=&quot;noreferrer&quot;&gt;strptime&lt;/a&gt; in the &lt;a href=&quot;http://docs.python.org/3/library/time.html&quot; rel=&quot;noreferrer&quot;&gt;time&lt;/a&gt; module.  It is the inverse of &lt;a href=&quot;http://docs.python.org/3/library/time.html#time.strftime&quot; rel=&quot;noreferrer&quot;&gt;strftime&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;my_time = time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\ntime.struct_time(tm_year=&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, tm_mon=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, tm_mday=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                 tm_hour=&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, tm_min=&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, tm_sec=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n                 tm_wday=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, tm_yday=&lt;span class=&quot;hljs-number&quot;&gt;152&lt;/span&gt;, tm_isdst=-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\ntimestamp = time.mktime(my_time)\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert time object to datetime&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\nmy_datetime = datetime.fromtimestamp(timestamp)\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert time object to date&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; date\nmy_date = date.fromtimestamp(timestamp)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Python &amp;gt;= 3.7&lt;/h2&gt;\n&lt;p&gt;to convert &lt;strong&gt;YYYY-MM-DD&lt;/strong&gt; string to datetime object, &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;datetime.fromisoformat&lt;/code&gt;&lt;/a&gt; could be used.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\ndate_string = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2012-12-12 10:10:10&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (datetime.fromisoformat(date_string))\n&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have put together a project that can convert some really neat expressions. Check out &lt;strong&gt;&lt;a href=&quot;http://github.com/stevepeak/timestring&quot; rel=&quot;noreferrer&quot;&gt;timestring&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;h2&gt;Here are some examples below:&lt;/h2&gt;\n&lt;code&gt;pip install timestring&lt;/code&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timestring\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timestring.Date(&lt;span class=&quot;hljs-string&quot;&gt;&apos;monday, aug 15th 2015 at 8:40 pm&apos;&lt;/span&gt;)\n&amp;lt;timestring.Date &lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;-08-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4491909392&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timestring.Date(&lt;span class=&quot;hljs-string&quot;&gt;&apos;monday, aug 15th 2015 at 8:40 pm&apos;&lt;/span&gt;).date\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timestring.Range(&lt;span class=&quot;hljs-string&quot;&gt;&apos;next week&apos;&lt;/span&gt;)\n&amp;lt;timestring.Range From 03/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; to 03/03/&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4496004880&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(timestring.Range(&lt;span class=&quot;hljs-string&quot;&gt;&apos;next week&apos;&lt;/span&gt;).start.date, timestring.Range(&lt;span class=&quot;hljs-string&quot;&gt;&apos;next week&apos;&lt;/span&gt;).end.date)\n(datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Remember this and you didn&apos;t need to get confused in datetime conversion again.&lt;/p&gt;\n\n&lt;p&gt;String to datetime object = &lt;code&gt;strptime&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;datetime object to other formats = &lt;code&gt;strftime&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Jun 1 2005  1:33PM&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;is equals to&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;%b %d %Y %I:%M%p&lt;/code&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;%b    Month as locales abbreviated name(Jun)&lt;/p&gt;\n  \n  &lt;p&gt;%d    Day of the month as a zero-padded decimal number(1)&lt;/p&gt;\n  \n  &lt;p&gt;%Y    Year with century as a decimal number(2015)&lt;/p&gt;\n  \n  &lt;p&gt;%I    Hour (12-hour clock) as a zero-padded decimal number(01)&lt;/p&gt;\n  \n  &lt;p&gt;%M    Minute as a zero-padded decimal number(33)&lt;/p&gt;\n  \n  &lt;p&gt;%p    Locales equivalent of either AM or PM(PM)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;so you need strptime i-e converting &lt;code&gt;string&lt;/code&gt; to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dates:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    date = datetime.strptime(d, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(date)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; date\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.datetime&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;-06-01 &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.datetime&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1999&lt;/span&gt;-08-&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What if you have different format of dates you can use panda or dateutil.parse&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dateutil\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;12 1 2017&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1 1 2017&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1 12 2017&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;June 1 2017 1:30:00AM&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[parser.parse(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dates]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OutPut&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.&lt;/p&gt;\n&lt;p&gt;Python 3.2+:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;datetime.datetime.strptime(\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;March 5, 2014, 20:13:50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%B %d, %Y, %H:%M:%S&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This assumes you know the offset. If you don&apos;t, but you know e.g. the location, you can use the &lt;code&gt;pytz&lt;/code&gt; package to query the &lt;a href=&quot;https://www.iana.org/time-zones&quot; rel=&quot;nofollow noreferrer&quot;&gt;IANA time zone database&lt;/a&gt; for the offset. I&apos;ll use Tehran here as an example because it has a half-hour offset:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;tehran = pytz.timezone(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Asia/Tehran&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;local_time = tehran.localize(\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  datetime.datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;March 5, 2014, 20:13:50&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                             &lt;span class=&quot;hljs-string&quot;&gt;&quot;%B %d, %Y, %H:%M:%S&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;local_time\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, tzinfo=&amp;lt;DstTzInfo &lt;span class=&quot;hljs-string&quot;&gt;&apos;Asia/Tehran&apos;&lt;/span&gt; +0330+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; STD&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, &lt;code&gt;pytz&lt;/code&gt; has determined that the offset was +3:30 at that particular date. You can now convert this to UTC time, and it will apply the offset:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;utc_time = local_time.astimezone(pytz.utc)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;utc_time\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, tzinfo=&amp;lt;UTC&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that dates before the adoption of timezones will give you weird offsets. This is because the IANA has decided to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Local_mean_time&quot; rel=&quot;nofollow noreferrer&quot;&gt;Local Mean Time&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;chicago = pytz.timezone(&lt;span class=&quot;hljs-string&quot;&gt;&quot;America/Chicago&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;weird_time = chicago.localize(\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  datetime.datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;November 18, 1883, 11:00:00&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                             &lt;span class=&quot;hljs-string&quot;&gt;&quot;%B %d, %Y, %H:%M:%S&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;weird_time.astimezone(pytz.utc)\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;1883&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, tzinfo=&amp;lt;UTC&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The weird &quot;7 hours and 34 minutes&quot; are derived from the longitude of Chicago. I used this timestamp because it is right before &lt;a href=&quot;https://www.loc.gov/item/today-in-history/november-18/#time&quot; rel=&quot;nofollow noreferrer&quot;&gt;standardized time was adopted in Chicago&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If your string is in ISO8601 format and you have Python 3.7+ you can use the following simple code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\naDate = datetime.date.fromisoformat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2020-10-04&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for dates and&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\naDateTime = datetime.datetime.fromisoformat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2020-10-04 22:47:00&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for strings containing date and time. If timestamps are included the function &lt;code&gt;datetime.datetime.isoformat()&lt;/code&gt; supports the following format&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where &lt;code&gt;*&lt;/code&gt; matches any single character. See also &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\ndates = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;2015-12-25&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2015-12-26&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1) Use a list comprehension.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[d.date() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pd.to_datetime(dates)]\n[datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;), datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2) Convert the dates to a DatetimeIndex and extract the python dates.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.DatetimeIndex(dates).date.tolist()\n[datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;), datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Timings&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;dates = pd.DatetimeIndex(start=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2000-1-1&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2010-1-1&apos;&lt;/span&gt;, freq=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;).date.tolist()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit [d.date() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pd.to_datetime(dates)]\n&lt;span class=&quot;hljs-comment&quot;&gt;# 100 loops, best of 3: 3.11 ms per loop&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit pd.DatetimeIndex(dates).date.tolist()\n&lt;span class=&quot;hljs-comment&quot;&gt;# 100 loops, best of 3: 6.85 ms per loop&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here is how to convert the OP&apos;s original date-time examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;datetimes = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.to_datetime(datetimes).to_pydatetime().tolist()\n[datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;), \n datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;1999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are many options for converting from the strings to Pandas Timestamps using &lt;code&gt;to_datetime&lt;/code&gt;, so check the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; if you need anything special.&lt;/p&gt;\n\n&lt;p&gt;Likewise, Timestamps have many &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/api.html#datetimelike-properties&quot; rel=&quot;noreferrer&quot;&gt;properties and methods&lt;/a&gt; that can be accessed in addition to &lt;code&gt;.date&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I personally like the solution using the &lt;code&gt;parser&lt;/code&gt; module, which is the second Answer to this question and is beautiful, as you don&apos;t have to construct any string literals to get it working. &lt;strong&gt;BUT&lt;/strong&gt;, one downside is that it is &lt;strong&gt;90% slower&lt;/strong&gt; than the accepted answer with &lt;code&gt;strptime&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parser\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dt&lt;/span&gt;():\n    dt = parser.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jun 1 2005  1:33PM&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strptime&lt;/span&gt;():\n    datetime_object = datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(stmt=dt, number=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(stmt=strptime, number=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;10.70296801342902&lt;/span&gt;\n&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1.3627995655316933&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As long as you are not doing this &lt;em&gt;a million&lt;/em&gt; times over and over again, I still  think the &lt;code&gt;parser&lt;/code&gt; method is more convenient and will handle most of the time formats automatically.&lt;/p&gt;\n    ","\n&lt;p&gt;Something that isn&apos;t mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;num_suffix&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Returns the suffix for any given int\n    &apos;&apos;&apos;&lt;/span&gt;\n    suf = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;th&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;st&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;nd&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rd&apos;&lt;/span&gt;)\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(n) &lt;span class=&quot;hljs-comment&quot;&gt;# wise guy&lt;/span&gt;\n    tens = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(n)[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:])\n    units = n % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; tens &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; tens &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; suf[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# teens with &apos;th&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; units &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; suf[units]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; suf[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;th&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;day_suffix&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Returns the suffix of the given struct_time day\n    &apos;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; num_suffix(t.tm_mday)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Examples&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; num_suffix(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; num_suffix(&lt;span class=&quot;hljs-number&quot;&gt;3431&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; num_suffix(&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 Dec 00&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 Nov 01&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 Oct 02&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4 Sep 03&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13 Nov 90&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14 Oct 10&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;]: _now = datetime.datetime.now()\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: _now\nOut[&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;432000&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; _now\n&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;-01-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; 09:&lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00.432000&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;]: _parsed = datetime.datetime.strptime(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(_now),&lt;span class=&quot;hljs-string&quot;&gt;&quot;%Y-%m-%d %H:%M:%S.%f&quot;&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: _parsed\nOut[&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;432000&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; _now == _parsed\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Django Timezone aware datetime object example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; django.utils.timezone &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; get_current_timezone\ntz = get_current_timezone()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;\ndate_object = datetime.datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;)\ndate_obj = tz.localize(date_object)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This conversion is very important for Django and Python when you have &lt;code&gt;USE_TZ = True&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;RuntimeWarning: DateTimeField MyModel.created received a naive datetime (&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;-03-04 &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; time zone support &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; active.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Create a small utility function like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;datestr=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; datestr:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; datetime.today().date()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; datetime.strptime(datestr, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;).date()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is versatile enough:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&apos;t pass any arguments it will return today&apos;s date.&lt;/li&gt;\n&lt;li&gt;There&apos;s a date format as default that you can override.&lt;/li&gt;\n&lt;li&gt;You can easily modify it to return a datetime.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;It would do the helpful for converting string to datetime and also with time zone&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;convert_string_to_time&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;date_string, timezone&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pytz\n    date_time_obj = datetime.strptime(date_string[:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;%Y-%m-%d %H:%M:%S.%f&apos;&lt;/span&gt;)\n    date_time_obj_timezone = pytz.timezone(timezone).localize(date_time_obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; date_time_obj_timezone\n\ndate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;2018-08-14 13:09:24.543953+00:00&apos;&lt;/span&gt;\nTIME_ZONE = &lt;span class=&quot;hljs-string&quot;&gt;&apos;UTC&apos;&lt;/span&gt;\ndate_time_obj_timezone = convert_string_to_time(date, TIME_ZONE)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;arrow&lt;/strong&gt; offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; arrow\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dateStrings = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1  2005 1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt; ]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dateString &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dateStrings:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    dateString\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    arrow.get(dateString.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;MMM D YYYY H:mmA&apos;&lt;/span&gt;).datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    arrow.get(dateString.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;MMM D YYYY H:mmA&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ddd, Do MMM YYYY HH:mm&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    arrow.get(dateString.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;MMM D YYYY H:mmA&apos;&lt;/span&gt;).humanize(locale=&lt;span class=&quot;hljs-string&quot;&gt;&apos;de&apos;&lt;/span&gt;)\n...\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1  2005 1:33PM&apos;&lt;/span&gt;\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, tzinfo=tzutc())\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Wed, 1st Jun 2005 13:33&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;vor 11 Jahren&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;1999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, tzinfo=tzutc())\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Sat, 28th Aug 1999 00:00&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;vor 17 Jahren&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://arrow.readthedocs.io/en/latest/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://arrow.readthedocs.io/en/latest/&lt;/a&gt; for more.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also check out &lt;a href=&quot;https://dateparser.readthedocs.io/en/latest/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dateparser&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://pypi.org/project/dateparser/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dateparser&lt;/code&gt;&lt;/a&gt; provides modules to easily parse localized dates in almost\n  any string formats commonly found on web pages.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Install:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ pip install dateparser\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is, I think, the easiest way you can parse dates.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The most straightforward way is to use the &lt;code&gt;dateparser.parse&lt;/code&gt; function,\n  that wraps around most of the functionality in the module.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Sample Code:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dateparser\n\nt1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;\nt2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;\n\ndt1 = dateparser.parse(t1)\ndt2 = dateparser.parse(t2)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dt1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dt2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;2005-06-01 13:33:00\n1999-08-28 00:00:00\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;a href=&quot;https://github.com/ralphavalon/easy_date&quot; rel=&quot;noreferrer&quot;&gt;easy_date&lt;/a&gt; to make it easy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; date_converter\nconverted_date = date_converter.string_to_datetime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want only date format then you can manually convert it by passing your individual fields like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date = datetime.date(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2017&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;12&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;21&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date\ndatetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(date)\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.date&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can pass your split string values to convert it into date type like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;selected_month_rec = &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-09-01&apos;&lt;/span&gt;\ndate_formate = datetime.date(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(selected_month_rec.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(selected_month_rec.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(selected_month_rec.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will get the resulting value in date format.&lt;/p&gt;\n    ","\n&lt;p&gt;Similar to Javed above, I just wanted date from string - so combining Simon and Javed&apos;s logic (above) we get:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parser\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\ns=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2021-03-04&apos;&lt;/span&gt;\n\nparser.parse(s).date()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;datetime.date(2021, 3, 4)&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;It seems using &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pandas Timestamp&lt;/a&gt; is the fastest&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd \n\nN = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n\nl = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;] * N\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(pd.to_datetime(l, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;))\n\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(pd.to_datetime(l, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;1.58&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;21.6&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Other solutions&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: datetime.strptime(x, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;), l))\n&lt;span class=&quot;hljs-number&quot;&gt;9.41&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;95.7&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil.parser &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parse\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: parse(x), l))\n&lt;span class=&quot;hljs-number&quot;&gt;73.8&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;1.14&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;If the string is ISO8601 string please use &lt;a href=&quot;https://pypi.org/project/ciso8601/&quot; rel=&quot;nofollow noreferrer&quot;&gt;csio8601&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ciso8601\n\nl = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;2014-01-09&apos;&lt;/span&gt;] * N\n\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: ciso8601.parse_datetime(x), l))\n&lt;span class=&quot;hljs-number&quot;&gt;186&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;4.13&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you &lt;code&gt;don&apos;t&lt;/code&gt; want to &lt;code&gt;explicitly specify&lt;/code&gt; which &lt;code&gt;format&lt;/code&gt; your string is in with respect to date time format you can use this &lt;code&gt;hack to by pass that step&lt;/code&gt; :-&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil.parser &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parse\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# function that&apos;ll guess the format and convert it into python datetime format&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;update_event&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, end_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, description=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start_datetime &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        new_start_time = parse(start_datetime)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new_start_time\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#sample input dates in different format&lt;/span&gt;\nd = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40:23.277000&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021&apos;&lt;/span&gt;]\n\nnew = [update_event(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; date &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; new:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(date)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# sample output dates in python datetime object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# 2014-04-23 00:00:00&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# 2013-04-24 00:00:00&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# 2014-04-25 00:00:00&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to convert it into some other datetime format just modify the last line with the format you like for example something like &lt;code&gt;date.strftime(&apos;%Y/%m/%d %H:%M:%S.%f&apos;)&lt;/code&gt; :-&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil.parser &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parse\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;update_event&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, end_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, description=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start_datetime &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        new_start_time = parse(start_datetime)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new_start_time\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#sample input dates in different format&lt;/span&gt;\nd = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40:23.277000&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# passing the dates one by one through the function&lt;/span&gt;\nnew = [update_event(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; date &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; new:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(date.strftime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%Y/%m/%d %H:%M:%S.%f&apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# sample output dates in required python datetime object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#2021/06/07 06:40:23.277000&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#2021/06/07 06:40:00.000000&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#2021/06/07 00:00:00.000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;try running the above sniipet to have a btter clarity. Thanks&lt;/p&gt;\n    ","\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446&quot;&gt;my answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In real-world data this is a real problem: multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats, often mixed freely in one dataset. It&apos;s not ok for production code to fail, let alone go exception-happy like a fox.&lt;/p&gt;\n\n&lt;p&gt;We need to try...catch multiple datetime formats fmt1,fmt2,...,fmtn and suppress/handle the exceptions (from &lt;code&gt;strptime()&lt;/code&gt;) for all those that mismatch (and in particular, avoid needing a yukky n-deep indented ladder of try..catch clauses). From &lt;a href=&quot;https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446&quot;&gt;my solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;try_strptime&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, fmts=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;%d-%b-%y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;%m/%d/%Y&apos;&lt;/span&gt;]&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; fmt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fmts:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; datetime.strptime(s, fmt)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# or reraise the ValueError if no format matched, if you prefer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;emp = pd.read_csv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\py\\\\programs\\\\pandas_2\\\\pandas\\\\employees.csv&quot;&lt;/span&gt;)\nemp.info()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it shows &quot;Start Date Time&quot; Column and &quot;Last Login Time&quot; both are &quot;object = strings&quot; in data-frame&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pandas.core.frame.DataFrame&apos;&lt;/span&gt;&amp;gt;\nRangeIndex: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; entries, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;\nData columns (total &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; columns):\nFirst Name           &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nGender               &lt;span class=&quot;hljs-number&quot;&gt;855&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Start Date           &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n\nLast Login Time      &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Salary               &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null int64\nBonus %              &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null float64\nSenior Management    &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nTeam                 &lt;span class=&quot;hljs-number&quot;&gt;957&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\ndtypes: float64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), int64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\nmemory usage: &lt;span class=&quot;hljs-number&quot;&gt;62.6&lt;/span&gt;+ KB\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using &lt;code&gt;parse_dates&lt;/code&gt; option in &lt;code&gt;read_csv&lt;/code&gt; mention you can convert your string datetime into pandas datetime format.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;emp = pd.read_csv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\py\\\\programs\\\\pandas_2\\\\pandas\\\\employees.csv&quot;&lt;/span&gt;, parse_dates=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Start Date&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Last Login Time&quot;&lt;/span&gt;])\nemp.info()\n\n\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pandas.core.frame.DataFrame&apos;&lt;/span&gt;&amp;gt;\nRangeIndex: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; entries, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;\nData columns (total &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; columns):\nFirst Name           &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nGender               &lt;span class=&quot;hljs-number&quot;&gt;855&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Start Date           &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null datetime64[ns]\nLast Login Time      &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null datetime64[ns]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Salary               &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null int64\nBonus %              &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null float64\nSenior Management    &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nTeam                 &lt;span class=&quot;hljs-number&quot;&gt;957&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\ndtypes: datetime64[ns](&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), float64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), int64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\nmemory usage: &lt;span class=&quot;hljs-number&quot;&gt;62.6&lt;/span&gt;+ KB\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A short sample mapping a yyyy-mm-dd date string to a datetime.date object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; date\ndate_from_yyyy_mm_dd = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; δ : date(*[&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(_) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; δ.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)])\ndate_object = date_from_yyyy_mm_dd(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2021-02-15&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":351,"title":"Converting string into datetime","content":"\n                \n&lt;p&gt;How do I convert the following string to a datetime object?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jun 1 2005  1:33PM&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"converting-string-into-datetime-1657387717295","postType":"QUESTION","createdAt":"2022-07-09T17:28:37.000Z","updatedAt":"2022-07-09T17:28:37.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"UnboundLocalError on local variable when reassigned after first use","slug":"unboundlocalerror-on-local-variable-when-reassigned-after-first-use-1657387685248"},{"title":"Detecting a mobile browser","slug":"detecting-a-mobile-browser-1657388460071"},{"title":"What is DOM Event delegation?","slug":"what-is-dom-event-delegation-1657387625599"},{"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"Example images for code and mark-up Q&As [closed]","slug":"example-images-for-code-and-mark-up-qandas-closed-1657387690222"},{"title":"Converting string into datetime","slug":"converting-string-into-datetime-1657387717295"},{"title":"Is it possible for flex items to align tightly to the items above them?","slug":"is-it-possible-for-flex-items-to-align-tightly-to-the-items-above-them-1657388511179"},{"title":"What is the `self` parameter in class methods?","slug":"what-is-the-self-parameter-in-class-methods-1657387518448"},{"title":"Make container shrink-to-fit child elements as they wrap","slug":"make-container-shrink-to-fit-child-elements-as-they-wrap-1657388134549"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"How to remove the space between inline/inline-block elements?","slug":"how-to-remove-the-space-between-inlineinline-block-elements-1657384532273"},{"title":"Simulating group_concat MySQL function in Microsoft SQL Server 2005?","slug":"simulating-group_concat-mysql-function-in-microsoft-sql-server-2005-1657384832169"},{"title":"console.log() async or sync?","slug":"console.log()-async-or-sync-1657388401087"},{"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"}]},"__N_SSG":true}