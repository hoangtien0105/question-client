{"pageProps":{"data":{"answer":["\n&lt;h2&gt;What is &quot;variable scope&quot;?&lt;/h2&gt;\n\n&lt;p&gt;Variables have a limited &quot;scope&quot;, or &quot;places from which they are accessible&quot;. Just because you wrote &lt;code&gt;$foo = &apos;bar&apos;;&lt;/code&gt; once &lt;em&gt;somewhere&lt;/em&gt; in your application doesn&apos;t mean you can refer to &lt;code&gt;$foo&lt;/code&gt; from &lt;em&gt;everywhere&lt;/em&gt; else inside the application. The variable &lt;code&gt;$foo&lt;/code&gt; has a certain scope within which it is valid and only code in the same scope has access to the variable.&lt;/p&gt;\n\n&lt;h2&gt;How is a scope defined in PHP?&lt;/h2&gt;\n\n&lt;p&gt;Very simple: PHP has &lt;em&gt;function scope&lt;/em&gt;. That&apos;s the only kind of scope separator that exists in PHP. Variables inside a function are only available inside that function. Variables outside of functions are available anywhere outside of functions, but not inside any function. This means there&apos;s one special scope in PHP: the &lt;em&gt;global&lt;/em&gt; scope. Any variable declared outside of any function is within this global scope.&lt;/p&gt;\n\n&lt;h3&gt;Example:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;$foo&lt;/code&gt; is in the &lt;em&gt;global&lt;/em&gt; scope, &lt;code&gt;$baz&lt;/code&gt; is in a &lt;em&gt;local&lt;/em&gt; scope inside &lt;code&gt;myFunc&lt;/code&gt;. Only code inside &lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$baz&lt;/code&gt;. Only code &lt;em&gt;outside&lt;/em&gt; &lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$foo&lt;/code&gt;. Neither has access to the other:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// doesn&apos;t work&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// works&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// works&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// doesn&apos;t work&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Scope and included files&lt;/h2&gt;\n\n&lt;p&gt;File boundaries do &lt;em&gt;not separate&lt;/em&gt; scope:&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;a.php&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;b.php&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.php&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// works!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The same rules apply to &lt;code&gt;include&lt;/code&gt;d code as applies to any other code: only &lt;code&gt;function&lt;/code&gt;s separate scope. For the purpose of scope, you may think of including files like copy and pasting code:&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;c.php&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.php&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// works&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;myFunc&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// doesn&apos;t work!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above example, &lt;code&gt;a.php&lt;/code&gt; was included inside &lt;code&gt;myFunc&lt;/code&gt;, any variables inside &lt;code&gt;a.php&lt;/code&gt; only have local function scope. Just because they &lt;em&gt;appear&lt;/em&gt; to be in the global scope in &lt;code&gt;a.php&lt;/code&gt; doesn&apos;t necessarily mean they are, it actually depends on which context that code is included/executed in.&lt;/p&gt;\n\n&lt;h2&gt;What about functions inside functions and classes?&lt;/h2&gt;\n\n&lt;p&gt;Every new &lt;code&gt;function&lt;/code&gt; declaration introduces a new scope, it&apos;s that simple.&lt;/p&gt;\n\n&lt;h3&gt;(anonymous) functions inside functions&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;// no access to $foo&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// no access to $baz&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;classes&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bar&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;// no access to $foo&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;;\n    }\n\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// no access to $baz&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;What is scope good for?&lt;/h2&gt;\n\n&lt;p&gt;Dealing with scoping issues may seem annoying, but &lt;strong&gt;limited variable scope is essential to writing complex applications!&lt;/strong&gt; If every variable you declare would be available from everywhere else inside your application, you&apos;d be stepping all over your variables with no real way to track what changes what. There are only so many sensible names you can give to your variables, you probably want to use the variable &quot;&lt;code&gt;$name&lt;/code&gt;&quot; in more than one place. If you could only have this unique variable name once in your app, you&apos;d have to resort to really complicated naming schemes to make sure your variables are unique and that you&apos;re not changing the wrong variable from the wrong piece of code.&lt;/p&gt;\n\n&lt;p&gt;Observe:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If there was no scope, what would the above function do? Where does &lt;code&gt;$bar&lt;/code&gt; come from? What state does it have? Is it even initialized? Do you have to check every time? This is not maintainable. Which brings us to...&lt;/p&gt;\n\n&lt;h2&gt;Crossing scope boundaries&lt;/h2&gt;\n\n&lt;h3&gt;The right way: passing variables in and out&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The variable &lt;code&gt;$bar&lt;/code&gt; is explicitly coming into this scope as function argument. Just looking at this function it&apos;s clear where the values it works with originate from. It then explicitly &lt;em&gt;returns&lt;/em&gt; a value. The caller has the confidence to know what variables the function will work with and where its return values come from:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;   = &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$blarg&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Extending the scope of variables into anonymous functions&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The anonymous function explicitly includes &lt;code&gt;$foo&lt;/code&gt; from its surrounding scope. Note that this is not the same as &lt;em&gt;global&lt;/em&gt; scope.&lt;/p&gt;\n\n&lt;h3&gt;The wrong way: &lt;code&gt;global&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;As said before, the global scope is somewhat special, and functions can explicitly import variables from it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function uses and modifies the global variable &lt;code&gt;$foo&lt;/code&gt;. &lt;strong&gt;Do not do this!&lt;/strong&gt; &lt;sub&gt;(Unless you really really really really know what you&apos;re doing, and even then: don&apos;t!)&lt;/sub&gt;&lt;/p&gt;\n\n&lt;p&gt;All the caller of this function sees is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;baz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// outputs &quot;bar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;unset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;baz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// no output, WTF?!&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;baz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// outputs &quot;baz&quot;, WTF?!?!!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There&apos;s no indication that this function has any &lt;em&gt;side effects&lt;/em&gt;, yet it does. This very easily becomes a tangled mess as some functions keep modifying &lt;em&gt;and requiring&lt;/em&gt; some global state. You want functions to be &lt;em&gt;stateless&lt;/em&gt;, acting only on their inputs and returning defined output, however many times you call them.&lt;/p&gt;\n\n&lt;p&gt;You should avoid using the global scope in any way as much as possible; most certainly you should not be &quot;pulling&quot; variables out of the global scope into a local scope.&lt;/p&gt;\n    ","\n&lt;p&gt;Although variables defined inside of a function&apos;s scope can not be accessed from the outside that does not mean you can not use their values after that function completes. PHP has a well known &lt;code&gt;static&lt;/code&gt; keyword that is widely used in object-oriented PHP for defining static methods and properties but one should keep in mind that &lt;code&gt;static&lt;/code&gt; may also be used inside functions to define static variables.&lt;/p&gt;\n\n&lt;h1&gt;&lt;strong&gt;What is it &apos;static variable&apos;?&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Static variable differs from ordinary variable defined in function&apos;s scope in case that it does not loose value when program execution leaves this scope. Let&apos;s consider the following example of using static variables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;countSheep&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$num&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$counter&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n &lt;span class=&quot;hljs-variable&quot;&gt;$counter&lt;/span&gt; += &lt;span class=&quot;hljs-variable&quot;&gt;$num&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$counter&lt;/span&gt; sheep jumped over fence&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;countSheep&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;countSheep&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;countSheep&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; sheep jumped over fence\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; sheep jumped over fence\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; sheep jumped over fence\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we&apos;d defined &lt;code&gt;$counter&lt;/code&gt; without &lt;code&gt;static&lt;/code&gt; then each time echoed value would be the same as &lt;code&gt;$num&lt;/code&gt; parameter passed to the function. Using &lt;code&gt;static&lt;/code&gt; allows to build this simple counter without additional workaround.&lt;/p&gt;\n\n&lt;h1&gt;&lt;strong&gt;Static variables use-cases&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;To store values between consequent calls to function.&lt;/li&gt;\n&lt;li&gt;To store values between recursive calls when there is no way (or no\npurpose) to pass them as params.&lt;/li&gt;\n&lt;li&gt;To cache value which is normally better to retrieve once. For\nexample, result of reading immutable file on server.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;&lt;strong&gt;Tricks&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Static variable exists only in a local function scope. It can not be\n    accessed outside of the function it has been defined in. So you may \n    be sure that it will keep its value unchanged until the next call to\n    that function.&lt;/p&gt;\n\n&lt;p&gt;Static variable may only be defined as a scalar or as a scalar \n    expression (since PHP 5.6). Assigning other values to it inevitably \n    leads to a failure at least at the moment this article was written.\nNevertheless you are able to do so just on the next line of your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;countSheep&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$num&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$counter&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$counter&lt;/span&gt; += &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$num&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//imagine we need to take root of our sheep each time&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$counter&lt;/span&gt; sheep jumped over fence&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; sheep jumped over fence\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; sheep jumped over fence\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; sheep jumped over fence\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Static function is kinda &apos;shared&apos; between methods of objects of the\n    same class. It is easy to understand by viewing the following example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SomeClass&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; ++&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;;\n  }\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$object1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$object2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$object1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$object2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 2 oops, $object2 uses the same static $x as $object1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$object1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 3 now $object1 increments $x&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$object2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 4 and now his twin brother&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This only works with objects of the same class. If objects are from different classes (even extending one another) behavior of static vars will be as expected.&lt;/p&gt;\n\n&lt;h1&gt;&lt;strong&gt;Is static variable the only way to keep values between calls to a function?&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Another way to keep values between function calls is to use closures. Closures were introduced in PHP 5.3. In two words they allow you to limit access to some set of variables within a function scope to another anonymous function that will be the only way to access them. Being in closure variables may imitate (more or less successfully) OOP concepts like &apos;class constants&apos; (if they were passed in closure by value) or &apos;private properties&apos; (if passed by reference) in structured programming.&lt;/p&gt;\n\n&lt;p&gt;The latter actually allows to use closures instead of static variables. What to use is always up to developer to decide but it should be mentioned that static variables are definitely useful when working with recursions and deserve to be noticed by devs.&lt;/p&gt;\n    ","\n&lt;p&gt;I won&apos;t post a complete answer to the question, as the existing ones and the &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP manual&lt;/a&gt; do a great job of explaining most of this. &lt;/p&gt;\n\n&lt;p&gt;But one subject that was missed was that of &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;superglobals&lt;/a&gt;, including the commonly used &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, etc. These variables are arrays that are always available, in any scope, without a &lt;code&gt;global&lt;/code&gt; declaration.&lt;/p&gt;\n\n&lt;p&gt;For example, this function will print out the name of the user running the PHP script. The variable is available to the function without any problem.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$_ENV&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The general rule of &quot;globals are bad&quot; is typically amended in PHP to &quot;globals are bad but superglobals are alright,&quot; as long as one is not misusing them. (All these variables are writable, so they could be used to avoid dependency injection if you were really terrible.)&lt;/p&gt;\n\n&lt;p&gt;These variables are not guaranteed to be present; an administrator can disable some or all of them using the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;variables_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;, but this is not common behaviour.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;A list of current superglobals:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;$GLOBALS&lt;/code&gt; - All the global variables in the current script&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_SERVER&lt;/code&gt; - Information on the server and execution environment&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_GET&lt;/code&gt; - Values passed in the query string of the URL, regardless of the HTTP method used for the request&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_POST&lt;/code&gt; - Values passed in an HTTP POST request with &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; MIME types&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_FILES&lt;/code&gt; - Files passed in an HTTP POST request with a &lt;code&gt;multipart/form-data&lt;/code&gt; MIME type&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_COOKIE&lt;/code&gt; - Cookies passed with the current request&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_SESSION&lt;/code&gt; - Session variables stored internally by PHP&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_REQUEST&lt;/code&gt; - Typically a combination of &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, but sometimes &lt;code&gt;$_COOKIES&lt;/code&gt;. The content is determined by the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;request_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$_ENV&lt;/code&gt; - The environment variables of the current script&lt;/li&gt;\n&lt;/ul&gt;\n    "],"id":111,"title":"Reference: What is variable scope, which variables are accessible from where and what are \"undefined variable\" errors?","content":"\n                \n&lt;blockquote&gt;\n  &lt;p&gt;Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;What is &quot;variable scope&quot; in PHP? Are variables from one .php file accessible in another? Why do I sometimes get &lt;em&gt;&quot;undefined variable&quot;&lt;/em&gt; errors?&lt;/p&gt;\n    ","slug":"reference:-what-is-variable-scope-which-variables-are-accessible-from-where-and-what-are-\"undefined-variable\"-errors-1657384644697","postType":"QUESTION","createdAt":"2022-07-09T16:37:24.000Z","updatedAt":"2022-07-09T16:37:24.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"How do you use bcrypt for hashing passwords in PHP? [duplicate]","slug":"how-do-you-use-bcrypt-for-hashing-passwords-in-php-duplicate-1657387318517"},{"title":"What does a \"Cannot find symbol\" or \"Cannot resolve symbol\" error mean?","slug":"what-does-a-\"cannot-find-symbol\"-or-\"cannot-resolve-symbol\"-error-mean-1657384492160"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"},{"title":"Transitions on the CSS display property","slug":"transitions-on-the-css-display-property-1657387761601"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803"},{"title":"How to filter Pandas dataframe using 'in' and 'not in' like in SQL","slug":"how-to-filter-pandas-dataframe-using-'in'-and-'not-in'-like-in-sql-1657387371355"},{"title":"Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference","slug":"why-is-my-variable-unaltered-after-i-modify-it-inside-of-a-function-asynchronous-code-reference-1657384288966"},{"title":"When should static_cast, dynamic_cast, const_cast, and reinterpret_cast be used?","slug":"when-should-static_cast-dynamic_cast-const_cast-and-reinterpret_cast-be-used-1657388406205"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"Can a local variable's memory be accessed outside its scope?","slug":"can-a-local-variable's-memory-be-accessed-outside-its-scope-1657384460386"}]},"__N_SSG":true}