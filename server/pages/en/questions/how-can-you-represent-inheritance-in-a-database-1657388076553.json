{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/20860/bill-karwin&quot;&gt;@Bill Karwin&lt;/a&gt; describes three inheritance models in his &lt;a href=&quot;http://pragprog.com/titles/bksqla/sql-antipatterns&quot; rel=&quot;noreferrer&quot;&gt;SQL Antipatterns&lt;/a&gt; book, when proposing solutions to the SQL &lt;a href=&quot;http://en.wikipedia.org/wiki/Entity-attribute-value_model&quot; rel=&quot;noreferrer&quot;&gt;Entity-Attribute-Value&lt;/a&gt; antipattern. This is a brief overview:&lt;/p&gt;\n&lt;h2&gt;Single Table Inheritance (aka Table Per Hierarchy Inheritance):&lt;/h2&gt;\n&lt;p&gt;Using a single table as in your first option is probably the simplest design. As you mentioned, many attributes that are subtype-specific will have to be given a &lt;code&gt;NULL&lt;/code&gt; value on rows where these attributes do not apply. With this model, you would have one policies table, which would look something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------+----------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; date_issued         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; type     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; vehicle_reg_no &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; property_address &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------+----------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; MOTOR    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-number&quot;&gt;-04004&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; MOTOR    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;B&lt;span class=&quot;hljs-number&quot;&gt;-01010&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; PROPERTY &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;           &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Oxford Street    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; MOTOR    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;C&lt;span class=&quot;hljs-number&quot;&gt;-02020&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------+----------------+------------------+&lt;/span&gt;\n\n\\&lt;span class=&quot;hljs-comment&quot;&gt;------ COMMON FIELDS -------/          \\----- SUBTYPE SPECIFIC FIELDS -----/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keeping the design simple is a plus, but the main problems with this approach are the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;When it comes to adding new subtypes, you would have to alter the table to accommodate the attributes that describe these new objects. This can quickly become problematic when you have many subtypes, or if you plan to add subtypes on a regular basis.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The database will not be able to enforce which attributes apply and which don&apos;t, since there is no metadata to define which attributes belong to which subtypes.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You also cannot enforce &lt;code&gt;NOT NULL&lt;/code&gt; on attributes of a subtype that should be mandatory. You would have to handle this in your application, which in general is not ideal.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Concrete Table Inheritance:&lt;/h2&gt;\n&lt;p&gt;Another approach to tackle inheritance is to create a new table for each subtype, repeating all the common attributes in each table. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--// Table: policies_motor&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; date_issued         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; vehicle_reg_no &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-number&quot;&gt;-04004&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;B&lt;span class=&quot;hljs-number&quot;&gt;-01010&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;C&lt;span class=&quot;hljs-number&quot;&gt;-02020&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------------+&lt;/span&gt;\n                          \n&lt;span class=&quot;hljs-comment&quot;&gt;--// Table: policies_property    &lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; date_issued         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; property_address &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Oxford Street    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;   \n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+------------------+&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This design will basically solve the problems identified for the single table method:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Mandatory attributes can now be enforced with &lt;code&gt;NOT NULL&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Adding a new subtype requires adding a new table instead of adding columns to an existing one.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There is also no risk that an inappropriate attribute is set for a particular subtype, such as the &lt;code&gt;vehicle_reg_no&lt;/code&gt; field for a property policy.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There is no need for the &lt;code&gt;type&lt;/code&gt; attribute as in the single table method. The type is now defined by the metadata: the table name.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;However this model also comes with a few disadvantages:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The common attributes are mixed with the subtype specific attributes, and there is no easy way to identify them. The database will not know either.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When defining the tables, you would have to repeat the common attributes for each subtype table. That&apos;s definitely not &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; rel=&quot;noreferrer&quot;&gt;DRY&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Searching for all the policies regardless of the subtype becomes difficult, and would require a bunch of &lt;code&gt;UNION&lt;/code&gt;s.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This is how you would have to query all the policies regardless of the type:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;     date_issued, other_common_fields, &lt;span class=&quot;hljs-string&quot;&gt;&apos;MOTOR&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; type\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;       policies_motor\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;     date_issued, other_common_fields, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PROPERTY&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; type\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;       policies_property;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note how adding new subtypes would require the above query to be modified with an additional &lt;code&gt;UNION ALL&lt;/code&gt; for each subtype. This can easily lead to bugs in your application if this operation is forgotten.&lt;/p&gt;\n&lt;h2&gt;Class Table Inheritance (aka Table Per Type Inheritance):&lt;/h2&gt;\n&lt;p&gt;This is the solution that &lt;a href=&quot;https://stackoverflow.com/questions/3579079/how-can-you-represent-inheritance-in-a-database/3579139#3579139&quot;&gt;@David mentions in the other answer&lt;/a&gt;. You create a single table for your base class, which includes all the common attributes. Then you would create specific tables for each subtype, whose primary key also serves as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Foreign_key&quot; rel=&quot;noreferrer&quot;&gt;foreign key&lt;/a&gt; to the base table. Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; policies (\n   policy_id          &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n   date_issued        datetime,\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;-- // other common attributes ...&lt;/span&gt;\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; policy_motor (\n    policy_id         &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n    vehicle_reg_no    &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;-- // other attributes specific to motor insurance ...&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FOREIGN&lt;/span&gt; KEY (policy_id) &lt;span class=&quot;hljs-keyword&quot;&gt;REFERENCES&lt;/span&gt; policies (policy_id)\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; policy_property (\n    policy_id         &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n    property_address  &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;-- // other attributes specific to property insurance ...&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FOREIGN&lt;/span&gt; KEY (policy_id) &lt;span class=&quot;hljs-keyword&quot;&gt;REFERENCES&lt;/span&gt; policies (policy_id)\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This solution solves the problems identified in the other two designs:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Mandatory attributes can be enforced with &lt;code&gt;NOT NULL&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Adding a new subtype requires adding a new table instead of adding columns to an existing one.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No risk that an inappropriate attribute is set for a particular subtype.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No need for the &lt;code&gt;type&lt;/code&gt; attribute.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Now the common attributes are not mixed with the subtype specific attributes anymore.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;We can stay DRY, finally. There is no need to repeat the common attributes for each subtype table when creating the tables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Managing an auto incrementing &lt;code&gt;id&lt;/code&gt; for the policies becomes easier, because this can be handled by the base table, instead of each subtype table generating them independently.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Searching for all the policies regardless of the subtype now becomes very easy: No &lt;code&gt;UNION&lt;/code&gt;s needed - just a &lt;code&gt;SELECT * FROM policies&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I consider the class table approach as the most suitable in most situations.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The names of these three models come from &lt;a href=&quot;http://martinfowler.com/&quot; rel=&quot;noreferrer&quot;&gt;Martin Fowler&apos;s&lt;/a&gt; book &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321127420&quot; rel=&quot;noreferrer&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The 3rd option is to create a &quot;Policy&quot; table, then a &quot;SectionsMain&quot; table that stores all of the fields that are in common across the types of sections.  Then create other tables for each type of section that only contain the fields that are not in common.&lt;/p&gt;\n\n&lt;p&gt;Deciding which is best depends mostly on how many fields you have and how you want to write your SQL.  They would all work.  If you have just a few fields then I would probably go with #1.  With &quot;lots&quot; of fields I would lean towards #2 or #3.&lt;/p&gt;\n    ","\n&lt;p&gt;With the information provided, I&apos;d model the database to have the following:&lt;/p&gt;\n\n&lt;h2&gt;POLICIES&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;POLICY_ID (primary key)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;LIABILITIES&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;LIABILITY_ID (primary key)&lt;/li&gt;\n&lt;li&gt;POLICY_ID (foreign key)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;PROPERTIES&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;PROPERTY_ID (primary key)&lt;/li&gt;\n&lt;li&gt;POLICY_ID (foreign key)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;...and so on, because I&apos;d expect there to be different attributes associated with each section of the policy.  Otherwise, there could be a single &lt;code&gt;SECTIONS&lt;/code&gt; table and in addition to the &lt;code&gt;policy_id&lt;/code&gt;, there&apos;d be a &lt;code&gt;section_type_code&lt;/code&gt;...&lt;/p&gt;\n\n&lt;p&gt;Either way, this would allow you to support optional sections per policy...&lt;/p&gt;\n\n&lt;p&gt;I don&apos;t understand what you find unsatisfactory about this approach - this is how you store data while maintaining referential integrity and not duplicating data.  The term is &quot;normalized&quot;...&lt;/p&gt;\n\n&lt;p&gt;Because SQL is SET based, it&apos;s rather alien to procedural/OO programming concepts &amp;amp; requires code to transition from one realm to the other.  ORMs are often considered, but they don&apos;t work well in high volume, complex systems.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition at the Daniel Vassallo solution, if you use SQL Server 2016+, there is another solution that I used in some cases without considerable lost of performances.&lt;/p&gt;\n\n&lt;p&gt;You can create just a table with only the common field and add a single column with the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/json/json-data-sql-server&quot; rel=&quot;noreferrer&quot;&gt;JSON&lt;/a&gt; string that contains all the subtype specific fields.&lt;/p&gt;\n\n&lt;p&gt;I have tested this design for manage inheritance and I am very happy for the flexibility that I can use in the relative application.&lt;/p&gt;\n    ","\n&lt;p&gt;The another way to do it, is using the &lt;code&gt;INHERITS&lt;/code&gt; component. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; person (\n    id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ,\n    name &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; pessoa_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; natural_person (\n    social_security_number &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; pessoaf_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n) INHERITS (person);\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; juridical_person (\n    tin_number &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; pessoaj_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n) INHERITS (person);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thus it&apos;s possible to define a inheritance between tables.&lt;/p&gt;\n    ","\n&lt;p&gt;I lean towards method #1 (a unified Section table), for the sake of efficiently retrieving entire policies with all their sections (which I assume your system will be doing a lot).&lt;/p&gt;\n\n&lt;p&gt;Further, I don&apos;t know what version of SQL Server you&apos;re using, but in 2008+ &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc280604(v=SQL.100).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sparse Columns&lt;/a&gt; help optimize performance in situations where many of the values in a column will be NULL. &lt;/p&gt;\n\n&lt;p&gt;Ultimately, you&apos;ll have to decide just how &quot;similar&quot; the policy sections are. Unless they differ substantially, I think a more-normalized solution might be more trouble than it&apos;s worth... but only you can make that call. :)&lt;/p&gt;\n    ","\n&lt;p&gt;Alternatively, consider using a document databases (such as MongoDB) which natively support rich data structures and nesting.&lt;/p&gt;\n    "],"id":465,"title":"How can you represent inheritance in a database?","content":"\n                \n&lt;p&gt;I&apos;m thinking about how to represent a complex structure in a SQL Server database.&lt;/p&gt;\n\n&lt;p&gt;Consider an application that needs to store details of a family of objects, which share some attributes, but have many others not common. For example, a commercial insurance package may include liability, motor, property and indemnity cover within the same policy record.&lt;/p&gt;\n\n&lt;p&gt;It is trivial to implement this in C#, etc, as you can create a Policy with a collection of Sections, where Section is inherited as required for the various types of cover. However, relational databases don&apos;t seem to allow this easily.&lt;/p&gt;\n\n&lt;p&gt;I can see that there are two main choices:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Create a Policy table, then a Sections table, with all the fields required, for all possible variations, most of which would be null.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create a Policy table and numerous Section tables, one for each kind of cover.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Both of these alternatives seem unsatisfactory, especially as it is necessary to write queries across all Sections, which would involve numerous joins, or numerous null-checks.&lt;/p&gt;\n\n&lt;p&gt;What is the best practice for this scenario?&lt;/p&gt;\n    ","slug":"how-can-you-represent-inheritance-in-a-database-1657388076553","postType":"QUESTION","createdAt":"2022-07-09T17:34:36.000Z","updatedAt":"2022-07-09T17:34:36.000Z","tags":[{"id":2371,"name":"class-table-inheritance","slug":"class-table-inheritance","createdAt":"2022-07-09T17:34:36.000Z","updatedAt":"2022-07-09T17:34:36.000Z","Questions_Tags":{"questionId":465,"tagId":2371}}],"relatedQuestions":[{"title":"How can you represent inheritance in a database?","slug":"how-can-you-represent-inheritance-in-a-database-1657388076553","tags":[{"name":"class-table-inheritance","Questions_Tags":{"questionId":465,"tagId":2371}}]}]},"randomQuestions":[{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"},{"title":"Retrieve only the queried element in an object array in MongoDB collection","slug":"retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection-1657384890457"},{"title":"MySQL pivot row into dynamic number of columns","slug":"mysql-pivot-row-into-dynamic-number-of-columns-1657387981930"},{"title":"input() error - NameError: name '...' is not defined","slug":"input()-error-nameerror:-name-'...'-is-not-defined-1657388497243"},{"title":"What is the difference between a deep copy and a shallow copy?","slug":"what-is-the-difference-between-a-deep-copy-and-a-shallow-copy-1657388445063"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"How do I properly compare strings in C?","slug":"how-do-i-properly-compare-strings-in-c-1657387467202"},{"title":"Copy array by value","slug":"copy-array-by-value-1657387649531"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"How do I redirect to another webpage?","slug":"how-do-i-redirect-to-another-webpage-1657384869767"},{"title":"How to randomize (shuffle) a JavaScript array?","slug":"how-to-randomize-(shuffle)-a-javascript-array-1657384790171"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"When should I wrap quotes around a shell variable?","slug":"when-should-i-wrap-quotes-around-a-shell-variable-1657384659265"},{"title":"Can PHP PDO Statements accept the table or column name as parameter?","slug":"can-php-pdo-statements-accept-the-table-or-column-name-as-parameter-1657387478588"},{"title":"Order Bars in ggplot2 bar graph","slug":"order-bars-in-ggplot2-bar-graph-1657388099080"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Default constructor with empty brackets","slug":"default-constructor-with-empty-brackets-1657388246967"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"}]},"__N_SSG":true}