{"pageProps":{"data":{"answer":["\n&lt;p&gt;Given a module &lt;code&gt;foo&lt;/code&gt; with method &lt;code&gt;bar&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\nbar = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(foo, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;)\nresult = bar()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/library/functions.html#getattr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getattr&lt;/code&gt;&lt;/a&gt; can similarly be used on class instance bound methods, module-level methods, class methods... the list goes on.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Using &lt;a href=&quot;http://docs.python.org/library/functions.html#locals&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt;, which returns a dictionary with the current local symbol table:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfunction&quot;&lt;/span&gt;]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using &lt;a href=&quot;http://docs.python.org/library/functions.html#globals&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt;, which returns a dictionary with the global symbol table:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfunction&quot;&lt;/span&gt;]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Based on &lt;a href=&quot;https://stackoverflow.com/a/3071/365102&quot;&gt;Patrick&apos;s solution&lt;/a&gt;, to get the module dynamically as well, import it using:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;module = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\nfunc = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(module, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;)\nfunc()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just a simple contribution. If the class that we need to instance is in the same file, we can use something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Get class from globals and create an instance&lt;/span&gt;\nm = &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;our_class&apos;&lt;/span&gt;]()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Get the function (from the instance) that we need to call&lt;/span&gt;\nfunc = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(m, &lt;span class=&quot;hljs-string&quot;&gt;&apos;function_name&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Call it&lt;/span&gt;\nfunc()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, arg&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;you called sampleFunc({})&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(arg))\n\nm = &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]()\nfunc = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(m, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc&apos;&lt;/span&gt;)\nfunc(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sample arg&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Sample, all on one line&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;](), &lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc&apos;&lt;/span&gt;)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sample arg&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And, if not a class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;you called sampleFunc({})&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(arg))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc&apos;&lt;/span&gt;](&lt;span class=&quot;hljs-string&quot;&gt;&apos;sample arg&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Given a string, with a complete python path to a function, this is how I went about getting the result of said function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\nfunction_string = &lt;span class=&quot;hljs-string&quot;&gt;&apos;mypackage.mymodule.myfunc&apos;&lt;/span&gt;\nmod_name, func_name = function_string.rsplit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nmod = importlib.import_module(mod_name)\nfunc = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(mod, func_name)\nresult = func()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best answer according to the &lt;a href=&quot;https://docs.python.org/3/faq/programming.html#how-do-i-use-strings-to-call-functions-methods&quot; rel=&quot;noreferrer&quot;&gt;Python programming FAQ&lt;/a&gt; would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;functions = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;myfoo&apos;&lt;/span&gt;: foo.bar}\n\nmystring = &lt;span class=&quot;hljs-string&quot;&gt;&apos;myfoo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; mystring &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; functions:\n    functions[mystring]()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The primary advantage of this technique is that the strings do not need to match the names of the functions. This is also the primary technique used to emulate a case construct&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The answer (I hope) no one ever wanted&lt;/p&gt;\n\n&lt;p&gt;Eval like behavior&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;().get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why not add auto-importing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(\n    &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;().get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; \n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;), \n&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In case we have extra dictionaries we want to check&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;((x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (f(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n                          [&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;().get, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().get, \n                           self.__dict__.get, &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;]) \n              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x)),\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We need to go deeper&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;((x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (f(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n              ([&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;().get, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().get, self.__dict__.get] +\n               [d.get &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(dd.values()) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dd &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n                                [&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;(),&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;(),self.__dict__]\n                                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(dd,&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(d,&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;)] + \n               [&lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;])) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x)),\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For what it&apos;s worth, if you needed to pass the function (or class) name and app name as a string, then you could do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myFnName  = &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyFn&quot;&lt;/span&gt;\nmyAppName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyApp&quot;&lt;/span&gt;\napp = sys.modules[myAppName]\nfn  = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(app,myFnName)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this. While this still uses eval, it only uses it to &lt;em&gt;summon the function from the current context&lt;/em&gt;. Then, you have the real function to use as you wish.&lt;/p&gt;\n\n&lt;p&gt;The main benefit for me from this is that you will get any eval-related errors at the point of summoning the function. Then you will get &lt;em&gt;only&lt;/em&gt; the function-related errors when you call.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say_hello&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello {}!&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(name)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# get the function by name&lt;/span&gt;\nmethod_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;say_hello&apos;&lt;/span&gt;\nmethod = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(method_name)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# call it like a regular function later&lt;/span&gt;\nargs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;friend&apos;&lt;/span&gt;]\nkwargs = {}\nmethod(*args, **kwargs)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As this question &lt;a href=&quot;https://stackoverflow.com/questions/16642145/how-to-dynamically-call-methods-within-a-class-using-method-name-assignment-to-a&quot;&gt;How to dynamically call methods within a class using method-name assignment to a variable [duplicate]&lt;/a&gt; marked as a duplicate as this one, I am posting a related answer here:&lt;/p&gt;\n\n&lt;p&gt;The scenario is, a method in a class want to call another method on the same class dynamically, I have added some details to original example which offers some wider scenario and clarity:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, i&lt;/span&gt;):\n        self.i = i\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        func = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(MyClass, &lt;span class=&quot;hljs-string&quot;&gt;&apos;function{}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(self.i))\n        func(self, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;# This one will work&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# self.func(12)    # But this does NOT work.&lt;/span&gt;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, p1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;function1: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(p1))\n        &lt;span class=&quot;hljs-comment&quot;&gt;# do other stuff&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, p1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;function2: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(p1))\n        &lt;span class=&quot;hljs-comment&quot;&gt;# do other stuff&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    class1 = MyClass(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    class1.get()\n    class2 = MyClass(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    class2.get()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Output (Python 3.7.x)&lt;/p&gt;\n  \n  &lt;p&gt;function1: 12 &lt;/p&gt;\n  \n  &lt;p&gt;function2: 12&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;none of what was suggested helped me. I did discover this though.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;.__getattribute__(&amp;lt;string name&amp;gt;)(&amp;lt;params&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am using python 2.66 &lt;/p&gt;\n\n&lt;p&gt;Hope this helps&lt;/p&gt;\n    ","\n&lt;p&gt;Although getattr() is elegant (and about 7x faster) method, you can get return value from the function (local, class method, module) with eval as elegant as &lt;code&gt;x = eval(&apos;foo.bar&apos;)()&lt;/code&gt;. And when you implement some error handling then quite securely (the same principle can be used for getattr). Example with module import and class:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# import module, call module function, pass parameters and print retured value with eval():&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\nbar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random.randint&apos;&lt;/span&gt;\nrandint = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(bar)(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(randint) &lt;span class=&quot;hljs-comment&quot;&gt;# will print random int from &amp;lt;0;100)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# also class method returning (or not) value(s) can be used with eval: &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Say&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;something=&lt;span class=&quot;hljs-string&quot;&gt;&apos;nothing&apos;&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; something\n\nbar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Say.say&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(bar)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nice to meet you too&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# will print &apos;nice to meet you&apos; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When module or class does not exist (typo or anything better) then NameError is raised. When function does not exist, then AttributeError is raised. This can be used to handle errors:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# try/except block can be used to catch both errors&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Say.talk&apos;&lt;/span&gt;)() &lt;span class=&quot;hljs-comment&quot;&gt;# raises AttributeError because function does not exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Says.say&apos;&lt;/span&gt;)() &lt;span class=&quot;hljs-comment&quot;&gt;# raises NameError because the class does not exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# or the same with getattr:&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(Say, &lt;span class=&quot;hljs-string&quot;&gt;&apos;talk&apos;&lt;/span&gt;)() &lt;span class=&quot;hljs-comment&quot;&gt;# raises AttributeError&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(Says, &lt;span class=&quot;hljs-string&quot;&gt;&apos;say&apos;&lt;/span&gt;)() &lt;span class=&quot;hljs-comment&quot;&gt;# raises NameError&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; AttributeError:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do domething or just...&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Function does not exist&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; NameError:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do domething or just...&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Module does not exist&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In python3, you can use the &lt;code&gt;__getattribute__&lt;/code&gt; method. See following example with a list method name string:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;func_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;reverse&apos;&lt;/span&gt;\n\nl = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l)\n&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\nl.__getattribute__(func_name)()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l)\n&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Nobody mentioned &lt;code&gt;operator.attrgetter&lt;/code&gt; yet:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; attrgetter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;attrgetter(&lt;span class=&quot;hljs-string&quot;&gt;&apos;reverse&apos;&lt;/span&gt;)(l)()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;getattr&lt;/code&gt; calls method by name from an object.\nBut this object should be parent of calling class.\nThe parent class can be got by &lt;code&gt;super(self.__class__, self)&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call_base&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;This does not work&quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;new_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args, **kwargs&lt;/span&gt;):\n            name = func.__name__\n            &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(self.__class__, self), name)(*args, **kwargs)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new_func\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;BASE method invoked.&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;BASE method invoked.&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Inherit&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Base&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @Base.call_base&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;function body will be ignored by the decorator.&quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @Base.call_base&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;function body will be ignored by the decorator.&quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\nInherit().f() &lt;span class=&quot;hljs-comment&quot;&gt;# The goal is to print &quot;BASE method invoked.&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;i&apos;m facing the similar problem before, which is to convert a string to a function. &lt;strong&gt;but i can&apos;t use &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;ast.literal_eval()&lt;/code&gt;, because i don&apos;t want to execute this code immediately.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;e.g. i have a string &lt;code&gt;&quot;foo.bar&quot;&lt;/code&gt;, and i want to assign it to &lt;code&gt;x&lt;/code&gt; as a function name instead of a string, which means i can call the function by &lt;code&gt;x()&lt;/code&gt; &lt;strong&gt;ON DEMAND&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;here&apos;s my code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;str_to_convert = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.bar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;x = &lt;span class=&quot;hljs-subst&quot;&gt;{str_to_convert}&lt;/span&gt;&quot;&lt;/span&gt;)\nx()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;as for your question, you only need to add your module name &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; before &lt;code&gt;{}&lt;/code&gt; as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;str_to_convert = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;x = foo.&lt;span class=&quot;hljs-subst&quot;&gt;{str_to_convert}&lt;/span&gt;&quot;&lt;/span&gt;)\nx()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;WARNING!!! either &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;exec()&lt;/code&gt; is a dangerous method, you should confirm the safety.&lt;/strong&gt;\n&lt;strong&gt;WARNING!!! either &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;exec()&lt;/code&gt; is a dangerous method, you should confirm the safety.&lt;/strong&gt;\n&lt;strong&gt;WARNING!!! either &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;exec()&lt;/code&gt; is a dangerous method, you should confirm the safety.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You means get the pointer to an inner function from a module&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\nmethod = foo.bar\nexecuted = method(parameter)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is not a better pythonic way indeed is possible for punctual cases&lt;/p&gt;\n    ","\n&lt;p&gt;This is a simple answer, this will allow you to clear the screen for example. There are two examples below, with eval and exec, that will print 0 at the top after cleaning (if you&apos;re using Windows, change &lt;code&gt;clear&lt;/code&gt; to &lt;code&gt;cls&lt;/code&gt;, Linux and Mac users leave as is for example) or just execute it, respectively.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;os.system(\\&quot;clear\\&quot;)&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;os.system(\\&quot;clear\\&quot;)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":609,"title":"Calling a function of a module by using its name (a string)","content":"\n                \n&lt;p&gt;How do I call a function, using a string with the function&apos;s name? For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\nfunc_name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\ncall(foo, func_name)  &lt;span class=&quot;hljs-comment&quot;&gt;# calls foo.bar()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"calling-a-function-of-a-module-by-using-its-name-(a-string)-1657388565656","postType":"QUESTION","createdAt":"2022-07-09T17:42:45.000Z","updatedAt":"2022-07-09T17:42:45.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Sorting an array of objects by property values","slug":"sorting-an-array-of-objects-by-property-values-1657387447490"},{"title":"Are global variables thread-safe in Flask? How do I share data between requests?","slug":"are-global-variables-thread-safe-in-flask-how-do-i-share-data-between-requests-1657387949951"},{"title":"How to use ThreeTenABP in Android Project","slug":"how-to-use-threetenabp-in-android-project-1657384345704"},{"title":"Why do I need to override the equals and hashCode methods in Java?","slug":"why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java-1657388359877"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"UnboundLocalError on local variable when reassigned after first use","slug":"unboundlocalerror-on-local-variable-when-reassigned-after-first-use-1657387685248"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"How do I pass a variable by reference?","slug":"how-do-i-pass-a-variable-by-reference-1657384657232"},{"title":"How do I list all files of a directory?","slug":"how-do-i-list-all-files-of-a-directory-1657388340404"},{"title":"Reshaping data.frame from wide to long format","slug":"reshaping-data.frame-from-wide-to-long-format-1657384678522"},{"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"},{"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233"},{"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"Can a local variable's memory be accessed outside its scope?","slug":"can-a-local-variable's-memory-be-accessed-outside-its-scope-1657384460386"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"}]},"__N_SSG":true}