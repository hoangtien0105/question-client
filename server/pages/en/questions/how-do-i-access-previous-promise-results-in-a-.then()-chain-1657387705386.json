{"pageProps":{"data":{"answer":["\n&lt;h1&gt;Break the chain&lt;/h1&gt;\n\n&lt;p&gt;When you need to access the intermediate values in your chain, you should split your chain apart in those single pieces that you need. Instead of attaching one callback and somehow trying to use its parameter multiple times, attach multiple callbacks to the same promise - wherever you need the result value. Don&apos;t forget, a &lt;a href=&quot;https://stackoverflow.com/a/22540276/1048572&quot;&gt;promise just represents (proxies) a future value&lt;/a&gt;! Next to deriving one promise from the other in a linear chain, use the promise combinators that are given to you by your library to build the result value.&lt;/p&gt;\n\n&lt;p&gt;This will result in a very straightforward control flow, clear composition of functionalities and therefore easy modularisation.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([a, b]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[resultA, resultB]&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of the parameter destructuring in the callback after &lt;code&gt;Promise.all&lt;/code&gt; that only became availÂ­able with ES6, in ES5 the &lt;code&gt;then&lt;/code&gt; call would be replaced by a nifty helper method that was provided by many promise libraries (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot; rel=&quot;noreferrer&quot;&gt;when&lt;/a&gt;, ): &lt;code&gt;.spread(function(resultA, resultB) { &lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Bluebird also features a dedicated &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.join.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;join&lt;/code&gt; function&lt;/a&gt; to replace that &lt;code&gt;Promise.all&lt;/code&gt;+&lt;code&gt;spread&lt;/code&gt; combination with a simpler (and more efficient) construct:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(a, b, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA, resultB&lt;/span&gt;) {  });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;ECMAScript Harmony&lt;/h1&gt;\n&lt;p&gt;Of course, this problem was recognized by the language designers as well. They did a lot of work and the &lt;a href=&quot;http://tc39.github.io/ecmascript-asyncawait/&quot; rel=&quot;noreferrer&quot;&gt;async functions proposal&lt;/a&gt; finally made it into&lt;/p&gt;\n&lt;h2&gt;ECMAScript 8&lt;/h2&gt;\n&lt;p&gt;You don&apos;t need a single &lt;code&gt;then&lt;/code&gt; invocation or callback function anymore, as in an asynchronous function (that returns a promise when being called) you can simply wait for promises to resolve directly. It also features arbitrary control structures like conditions, loops and try-catch-clauses, but for the sake of convenience we don&apos;t need them here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultA = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultB = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;ECMAScript 6&lt;/h2&gt;\n&lt;p&gt;While we were waiting for ES8, we already did use a very similar kind of syntax. ES6 came with &lt;a href=&quot;http://davidwalsh.name/es6-generators&quot; rel=&quot;noreferrer&quot;&gt;generator functions&lt;/a&gt;, which allow breaking the execution apart in pieces at arbitrarily placed &lt;code&gt;yield&lt;/code&gt; keywords. Those slices can be run after each other, independently, even asynchronously - and that&apos;s just what we do when we want to wait for a promise resolution before running the next step.&lt;/p&gt;\n&lt;p&gt;There are dedicated libraries (like &lt;a href=&quot;https://github.com/tj/co&quot; rel=&quot;noreferrer&quot;&gt;co&lt;/a&gt; or &lt;a href=&quot;http://taskjs.org/&quot; rel=&quot;noreferrer&quot;&gt;task.js&lt;/a&gt;), but also many promise libraries have helper functions (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#generators&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/generators.html&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#es6-generators&quot; rel=&quot;noreferrer&quot;&gt;when&lt;/a&gt;, ) that do &lt;a href=&quot;https://stackoverflow.com/a/23554399/1048572&quot;&gt;this async step-by-step execution&lt;/a&gt; for you when you give them a generator function that yields promises.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getExample = &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;coroutine&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* () {\n&lt;span class=&quot;hljs-comment&quot;&gt;//               ^^^^^^^^^^^^^^^^^ Bluebird syntax&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultA = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultB = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This did work in Node.js since version 4.0, also a few browsers (or their dev editions) did support generator syntax relatively early.&lt;/p&gt;\n&lt;h2&gt;ECMAScript 5&lt;/h2&gt;\n&lt;p&gt;However, if you want/need to be backward-compatible you cannot use those without a transpiler. Both generator functions and async functions are supported by the current tooling, see for example the documentation of Babel on &lt;a href=&quot;http://babeljs.io/learn-es2015/#ecmascript-2015-features-generators&quot; rel=&quot;noreferrer&quot;&gt;generators&lt;/a&gt; and &lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-async-functions&quot; rel=&quot;noreferrer&quot;&gt;async functions&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;And then, there are also many other &lt;a href=&quot;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS#synchronous-to-asynchronous-javascript-compilers-cps&quot; rel=&quot;noreferrer&quot;&gt;compile-to-JS languages&lt;/a&gt;\nthat are dedicated to easing asynchronous programming. They usually use a syntax similar to &lt;code&gt;await&lt;/code&gt;, (e.g. &lt;a href=&quot;http://maxtaco.github.io/coffee-script/&quot; rel=&quot;noreferrer&quot;&gt;Iced CoffeeScript&lt;/a&gt;), but there are also others that feature a Haskell-like &lt;code&gt;do&lt;/code&gt;-notation (e.g. &lt;a href=&quot;http://lattejs.com/&quot; rel=&quot;noreferrer&quot;&gt;LatteJs&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/monadic&quot; rel=&quot;noreferrer&quot;&gt;monadic&lt;/a&gt;, &lt;a href=&quot;http://www.purescript.org/&quot; rel=&quot;noreferrer&quot;&gt;PureScript&lt;/a&gt; or &lt;a href=&quot;http://lispyscript.com/&quot; rel=&quot;noreferrer&quot;&gt;LispyScript&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;h1&gt;Synchronous inspection&lt;/h1&gt;\n\n&lt;p&gt;Assigning promises-for-later-needed-values to variables and then getting their value via synchronous inspection. The example uses bluebird&apos;s &lt;code&gt;.value()&lt;/code&gt; method but many libraries provide similar method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// a is guaranteed to be fulfilled here so we can just retrieve its&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// value synchronously&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aValue = a.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;();\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can be used for as many values as you like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;()\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = b.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseC&lt;/span&gt;();\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = c.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseD&lt;/span&gt;();\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;() + b.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;() + c.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;() + d.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;();\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Nesting (and) closures&lt;/h1&gt;\n\n&lt;p&gt;Using closures for maintaining the scope of variables (in our case, the success callback function parameters) is the natural JavaScript solution. With promises, we can arbitrarily &lt;a href=&quot;https://stackoverflow.com/a/22000931/1048572&quot;&gt;nest and flatten&lt;/a&gt; &lt;code&gt;.then()&lt;/code&gt; callbacks - they are semantically equivalent, except for the scope of the inner one.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB;&lt;/span&gt;\n        });\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, this is building an indentation pyramid. If indentation is getting too large, you still can apply the old tools to counter the &lt;a href=&quot;http://callbackhell.com/&quot; rel=&quot;noreferrer&quot;&gt;pyramid of doom&lt;/a&gt;: modularize, use extra named functions, and flatten the promise chain as soon as you don&apos;t need a variable any more.&lt;br&gt;\nIn theory, you can always avoid more than two levels of nesting (by making all closures explicit), in practise use as many as are reasonable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preprocessing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;makeAhandler&lt;/span&gt;());\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeAhandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;makeBhandler&lt;/span&gt;(resultA, ));\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeBhandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA, &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// anything that uses the variables in scope&lt;/span&gt;\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also use helper functions for this kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot; rel=&quot;noreferrer&quot;&gt;partial application&lt;/a&gt;, like &lt;code&gt;_.partial&lt;/code&gt; from &lt;a href=&quot;http://underscorejs.org/#partial&quot; rel=&quot;noreferrer&quot;&gt;Underscore&lt;/a&gt;/&lt;a href=&quot;https://lodash.com/docs#partial&quot; rel=&quot;noreferrer&quot;&gt;lodash&lt;/a&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;native &lt;code&gt;.bind()&lt;/code&gt; method&lt;/a&gt;, to further decrease indentation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preprocessing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(handlerA);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handlerA&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(handlerB.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, resultA));\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handlerB&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA, resultB&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// anything that uses resultA and resultB&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Explicit pass-through&lt;/h1&gt;\n\n&lt;p&gt;Similar to nesting the callbacks, this technique relies on closures. Yet, the chain stays flat - instead of passing only the latest result, some state object is passed for every step. These state objects accumulate the results of the previous actions, handing down all values that will be needed later again plus the result of the current task.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;b&lt;/span&gt; =&amp;gt;&lt;/span&gt; [resultA, b]); &lt;span class=&quot;hljs-comment&quot;&gt;// function(b) { return [resultA, b] }&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[resultA, resultB]&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, that little arrow &lt;code&gt;b =&amp;gt; [resultA, b]&lt;/code&gt; is the function that closes over &lt;code&gt;resultA&lt;/code&gt;, and passes an array of both results to the next step. Which uses parameter destructuring syntax to break it up in single variables again.&lt;/p&gt;\n\n&lt;p&gt;Before destructuring became available with ES6, a nifty helper method called &lt;code&gt;.spread()&lt;/code&gt; was proÂ­viÂ­ded by many promise libraries (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot; rel=&quot;noreferrer&quot;&gt;when&lt;/a&gt;, ). It takes a function with multiple parameters - one for each array element - to be used as &lt;code&gt;.spread(function(resultA, resultB) { &lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Of course, that closure needed here can be further simplified by some helper functions, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addTo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// imagine complex `arguments` fiddling or anything that helps usability&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// but you get the idea with this simple one:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; [x, res];\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;addTo&lt;/span&gt;(resultA));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, you can employ &lt;code&gt;Promise.all&lt;/code&gt; to produce the promise for the array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([resultA, &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;()]); &lt;span class=&quot;hljs-comment&quot;&gt;// resultA will implicitly be wrapped&lt;/span&gt;\n                                                    &lt;span class=&quot;hljs-comment&quot;&gt;// as if passed to Promise.resolve()&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[resultA, resultB]&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you might not only use arrays, but arbitrarily complex objects. For example, with &lt;a href=&quot;http://underscorejs.org/#extend&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;_.extend&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; in a different helper function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;augment&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj); r[name] = res; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r; };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;augment&lt;/span&gt;({resultA}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;resultB&quot;&lt;/span&gt;));\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both obj.resultA and obj.resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this pattern guarantees a flat chain and explicit state objects can improve clarity, it will become tedious for a long chain. Especially when you need the state only sporadically, you still have to pass it through every step. With this fixed interface, the single callbacks in the chain are rather tightly coupled and inflexible to change. It makes factoring out single steps harder, and callbacks cannot be supplied directly from other modules - they always need to be wrapped in boilerplate code that cares about the state. Abstract helper functions like the above can ease the pain a bit, but it will always be present.&lt;/p&gt;\n    ","\n&lt;h1&gt;Mutable contextual state&lt;/h1&gt;\n\n&lt;p&gt;The trivial (but inelegant and rather errorprone) solution is to just use higher-scope variables (to which all callbacks in the chain have access) and write result values to them when you get them:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultA;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_resultA&lt;/span&gt;) {\n        resultA = _resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of many variables one might also use an (initially empty) object, on which the results are stored as dynamically created properties.&lt;/p&gt;\n\n&lt;p&gt;This solution has several drawbacks:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/844536/1048572&quot;&gt;Mutable state is ugly&lt;/a&gt;, and &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;global variables are evil&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;This pattern doesn&apos;t work across function boundaries, modularising the functions is harder as their declarations must not leave the shared scope&lt;/li&gt;\n&lt;li&gt;The scope of the variables does not prevent to access them before they are initialized. This is especially likely for complex promise constructions (loops, branching, excptions) where race conditions might happen. Passing state explicitly, a &lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot; rel=&quot;noreferrer&quot;&gt;declarative design&lt;/a&gt; that promises encourage, forces a cleaner coding style which can prevent this.&lt;/li&gt;\n&lt;li&gt;One must choose the scope for those shared variables correctly. It needs to be local to the executed function to prevent race conditions between multiple parallel invocations, as would be the case if, for example, state was stored on an instance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The Bluebird library encourages the use of an object that is passed along, using &lt;a href=&quot;http://bluebirdjs.com/docs/api/bind.html&quot; rel=&quot;noreferrer&quot;&gt;their &lt;code&gt;bind()&lt;/code&gt; method&lt;/a&gt; to assign a context object to a promise chain. It will be accessible from each callback function via the otherwise unusable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt; keyword&lt;/a&gt;. While object properties are more prone to undetected typos than variables, the pattern is quite clever:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;({}) &lt;span class=&quot;hljs-comment&quot;&gt;// Bluebird only!&lt;/span&gt;\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resultA&lt;/span&gt; = resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both this.resultA and resultB&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// don&apos;t forget to unbind the object if you don&apos;t want the&lt;/span&gt;\n               &lt;span class=&quot;hljs-comment&quot;&gt;// caller to access it&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach can be easily simulated in promise libraries that do not support .bind (although in a somewhat more verbose way and cannot be used in an expression):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ctx = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resultA&lt;/span&gt; = resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(ctx)).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both this.resultA and resultB&lt;/span&gt;\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(ctx));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;A less harsh spin on &quot;Mutable contextual state&quot;&lt;/h1&gt;\n&lt;p&gt;Using a locally scoped object to collect the intermediate results in a promise chain is a reasonable approach to the question you posed. Consider the following snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//locally scoped&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; results = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;(paramsA).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;){\n        results.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = resultA;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;(paramsB);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;){\n        results.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = resultB;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseC&lt;/span&gt;(paramsC);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultC&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Resolve with composite of all promises&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(results.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + results.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + resultC);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Global variables are bad, so this solution uses a locally scoped variable which causes no harm.  It is only accessible within the function.&lt;/li&gt;\n&lt;li&gt;Mutable state is ugly, but this does not mutate state in an ugly manner.  The ugly mutable state traditionally refers to modifying the state of function arguments or global variables, but this approach simply modifies the state of a locally scoped variable that exists for the sole purpose of aggregating promise results...a variable that will die a simple death once the promise resolves.&lt;/li&gt;\n&lt;li&gt;Intermediate promises are not prevented from accessing the state of the results object, but this does not introduce some scary scenario where one of the promises in the chain will go rogue and sabotage your results.  The responsibility of setting the values in each step of the promise is confined to this function and the overall result will either be correct or incorrect...it will not be some bug that will crop up years later in production (unless you intend it to!)&lt;/li&gt;\n&lt;li&gt;This does not introduce a race condition scenario that would arise from parallel invocation because a new instance of the results variable is created for every invocation of the getExample function.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Example is available on &lt;a href=&quot;https://jsfiddle.net/w50zqgyr/2/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Node 7.4 now supports async/await calls with the harmony flag.&lt;/p&gt;\n\n&lt;p&gt;Try this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response2 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise2&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response, response2)\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and run the file with:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;node --harmony-async-await getExample.js&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Simple as can be!&lt;/p&gt;\n    ","\n&lt;p&gt;Another answer, using &lt;code&gt;babel-node&lt;/code&gt; version &amp;lt;6 &lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;async - await&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;npm install -g babel@5.6.14&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;example.js:&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response2 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise2&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response, response2)\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, run &lt;code&gt;babel-node example.js&lt;/code&gt; and voila!&lt;/p&gt;\n    ","\n&lt;p&gt;This days, I also hava meet some questions like you. At last, I find a good solution with the quesition, it&apos;s simple and good to read. I hope this can help you.&lt;/p&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;https://html5hive.org/how-to-chain-javascript-promises/&quot; rel=&quot;nofollow noreferrer&quot;&gt;how-to-chain-javascript-promises&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ok, let&apos;s look at the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;firstPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first promise is completed&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;});\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n    });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;secondPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;someStuff&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;second promise is completed&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;newData&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${someStuff.data}&lt;/span&gt; some more data`&lt;/span&gt;});\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n    });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;thirdPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;someStuff&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;third promise is completed&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;result&lt;/span&gt;: someStuff});\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n    });\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;firstPromise&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(secondPromise)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(thirdPromise)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am not going to use this pattern in my own code since I&apos;m not a big fan of using global variables. However, in a pinch it will work.&lt;/p&gt;\n\n&lt;p&gt;User is a promisified Mongoose model.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; globalVar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findAsync&lt;/span&gt;({}).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;users&lt;/span&gt;){\n  globalVar = users;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(globalVar);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another answer, using sequential executor &lt;a href=&quot;https://github.com/amaksr/nsynjs&quot; rel=&quot;nofollow noreferrer&quot;&gt;nsynjs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response1 = &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise1&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// promise1 is resolved at this point, &apos;.data&apos; has the result from resolve(result)&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response2 = &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise2&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// promise2 is resolved at this point, &apos;.data&apos; has the result from resolve(result)&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response, response2);\n\n}\n\nnynjs.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(getExample,{},&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;all done&apos;&lt;/span&gt;);\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Update: added working example&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;synchronousCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; urls=[\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js&quot;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js&quot;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;&lt;/span&gt;\n     ];\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;urls.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len=&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(urls[i]).&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             ^                   ^&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             |                   +- 2-nd promise result&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             |                      assigned to &apos;data&apos;&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             |&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             +-- 1-st promise result assigned to &apos;data&apos;&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n         &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL #&apos;&lt;/span&gt;+i+&lt;span class=&quot;hljs-string&quot;&gt;&apos; : &apos;&lt;/span&gt;+urls[i]+&lt;span class=&quot;hljs-string&quot;&gt;&quot;, length: &quot;&lt;/span&gt;+len);\n     }\n}\n\nnsynjs.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(synchronousCode,{},&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;all done&apos;&lt;/span&gt;);\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://rawgit.com/amaksr/nsynjs/master/nsynjs.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When using bluebird, you can use &lt;code&gt;.bind&lt;/code&gt; method to share variables in promise chain:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;somethingAsync&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;({})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;spread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;aValue, bValue&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;aValue&lt;/span&gt; = aValue;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bValue&lt;/span&gt; = bValue;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;somethingElseAsync&lt;/span&gt;(aValue, bValue);\n})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;cValue&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;aValue&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bValue&lt;/span&gt; + cValue;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;please check this link for further information:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.bind.html&quot; rel=&quot;nofollow&quot;&gt;http://bluebirdjs.com/docs/api/promise.bind.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; retA, retB;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        retA = resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// More processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//retA is value of promiseA&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// How do I gain access to resultA here?&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;easy way :D&lt;/p&gt;\n    ","\n&lt;p&gt;I think you can use hash of RSVP.&lt;/p&gt;\n\n&lt;p&gt;Something like as below :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mainPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promise1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first promise is completed&apos;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;});\n            }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        });\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promise2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;second promise is completed&apos;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;456&apos;&lt;/span&gt;});\n            }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        });\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;RSVP&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hash&lt;/span&gt;({\n              &lt;span class=&quot;hljs-attr&quot;&gt;prom1&lt;/span&gt;: promise1,\n              &lt;span class=&quot;hljs-attr&quot;&gt;prom2&lt;/span&gt;: promise2\n          });\n\n    };\n\n\n   &lt;span class=&quot;hljs-title function_&quot;&gt;mainPromise&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;prom1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;prom2&lt;/span&gt;);\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution:&lt;/p&gt;\n\n&lt;p&gt;You can put intermediate values in scope in any later &apos;then&apos; function explicitly, by using &apos;bind&apos;. It is a nice solution that doesn&apos;t require changing how Promises work, and only requires a line or two of code to propagate the values just like errors are already propagated.&lt;/p&gt;\n\n&lt;p&gt;Here is a complete example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get info asynchronously from a server&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pGetServerInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// then value: &quot;server info&quot;&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// pGetServerInfo&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Write into a file asynchronously&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pWriteFile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path,string&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// no then value&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// pWriteFile&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// The heart of the solution: Write formatted info into a log file asynchronously,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// using the pGetServerInfo and pWriteFile operations&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pLogInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;localInfo&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scope={&lt;span class=&quot;hljs-attr&quot;&gt;localInfo&lt;/span&gt;:localInfo}; &lt;span class=&quot;hljs-comment&quot;&gt;// Create an explicit scope object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thenFunc=p2.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(scope); &lt;span class=&quot;hljs-comment&quot;&gt;// Create a temporary function with this scope&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;pGetServerInfo&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(thenFunc)); &lt;span class=&quot;hljs-comment&quot;&gt;// Do the next &apos;then&apos; in the chain&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// pLogInfo&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Scope of this &apos;then&apos; function is {localInfo:localInfo}&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;p2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;serverInfo&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do the final &apos;then&apos; in the chain: Writes &quot;local info, server info&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pWriteFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;localInfo&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;+serverInfo);\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// p2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution can be invoked as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;pLogInfo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;local info&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(err);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note: a more complex and complete version of this solution has been tested, but not this example version, so it could have a bug.)&lt;/p&gt;\n    ","\n&lt;p&gt;What I learn about promises is to use it only as return values &lt;strong&gt;avoid referencing them&lt;/strong&gt; if possible. async/await syntax is particularly practical for that. Today all latest browsers and node support it: &lt;a href=&quot;https://caniuse.com/#feat=async-functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://caniuse.com/#feat=async-functions&lt;/a&gt; , is a simple behavior and the code is like reading synchronous code, forget about callbacks...&lt;/p&gt;\n\n&lt;p&gt;In cases I do need to reference a promises is when creation and resolution happen at independent/not-related places. So instead an artificial association and probably an event listener just to resolve the &quot;distant&quot; promise, I prefer to expose the promise as a Deferred, which the following code implements it in valid es5&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Promise like object that allows to resolve it promise from outside code. Example:\n *\n```\nclass Api {\n  fooReady = new Deferred&amp;lt;Data&amp;gt;()\n  private knower() {\n    inOtherMoment(data=&amp;gt;{\n      this.fooReady.resolve(data)\n    })\n  }\n}\n```\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt; = &lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@class&lt;/span&gt; */&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Deferred&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;pending&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n      instance.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;resolved&apos;&lt;/span&gt;; resolve.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); };\n      instance.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;rejected&apos;&lt;/span&gt;; reject.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); };\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; callback === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n      callback.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt;);\n    }\n  }\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(resolve);\n  };\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;catch&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(r);\n  };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;;\n}());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;transpiled form a typescript project of mine:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/cancerberoSgx/misc-utils-of-mine/blob/2927c2477839f7b36247d054e7e50abe8a41358b/misc-utils-of-mine-generic/src/promise.ts#L31&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/cancerberoSgx/misc-utils-of-mine/blob/2927c2477839f7b36247d054e7e50abe8a41358b/misc-utils-of-mine-generic/src/promise.ts#L31&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For more complex cases I often use these guy small promise utilities without dependencies tested and typed. p-map has been useful several times. I think he covered most use cases:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus?utf8=%E2%9C%93&amp;amp;tab=repositories&amp;amp;q=promise&amp;amp;type=source&amp;amp;language=&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sindresorhus?utf8=%E2%9C%93&amp;amp;tab=repositories&amp;amp;q=promise&amp;amp;type=source&amp;amp;language=&lt;/a&gt;&lt;/p&gt;\n    "],"id":346,"title":"How do I access previous promise results in a .then() chain?","content":"\n                \n&lt;p&gt;I have restructured my code to &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;promises&lt;/a&gt;, and built a wonderful long &lt;strong&gt;flat promise chain&lt;/strong&gt;, consisting of multiple &lt;code&gt;.then()&lt;/code&gt; callbacks. In the end I want to return some composite value, and need to access multiple &lt;strong&gt;intermediate promise results&lt;/strong&gt;. However the resolution values from the middle of the sequence are not in scope in the last callback, how do I access them?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;(â¦).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;(â¦);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// More processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// How do I gain access to resultA here?&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386","postType":"QUESTION","createdAt":"2022-07-09T17:28:25.000Z","updatedAt":"2022-07-09T17:28:25.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"How can I validate an email address in JavaScript?","slug":"how-can-i-validate-an-email-address-in-javascript-1657385475959"},{"title":"Scroll to an element with jQuery","slug":"scroll-to-an-element-with-jquery-1657388523178"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"Convert columns into rows with Pandas","slug":"convert-columns-into-rows-with-pandas-1657388374964"},{"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345"},{"title":"How do I vertically center text with CSS? [duplicate]","slug":"how-do-i-vertically-center-text-with-css-duplicate-1657387645821"},{"title":"How to center an element horizontally and vertically","slug":"how-to-center-an-element-horizontally-and-vertically-1657388132330"},{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484"},{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"How to generate a self-signed SSL certificate using OpenSSL? [closed]","slug":"how-to-generate-a-self-signed-ssl-certificate-using-openssl-closed-1657388298626"},{"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"}]},"__N_SSG":true}