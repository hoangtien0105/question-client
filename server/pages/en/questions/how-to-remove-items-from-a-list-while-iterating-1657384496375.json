{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can use a list comprehension to create a new list containing only the elements you don&apos;t want to remove:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; determine(x)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, by assigning to the slice &lt;code&gt;somelist[:]&lt;/code&gt;, you can mutate the existing list to contain only the items you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist[:] = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; determine(x)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This approach could be useful if there are other references to &lt;code&gt;somelist&lt;/code&gt; that need to reflect the changes.&lt;/p&gt;\n&lt;p&gt;Instead of a comprehension, you could also use &lt;code&gt;itertools&lt;/code&gt;. In Python 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or in Python 3:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That&apos;s different from what you&apos;d be doing by selective removal, as in &lt;a href=&quot;https://stackoverflow.com/a/1207427/3064538&quot;&gt;@Lennart&apos;s suggestion&lt;/a&gt; -- it&apos;s faster, but if your list is accessed via multiple references the fact that you&apos;re just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.&lt;/p&gt;\n\n&lt;p&gt;Fortunately, it&apos;s extremely easy to get both the speed of list comprehensions AND the required semantics of in-place alteration -- just code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist[:] = [tup &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the subtle difference with other answers: this one is NOT assigning to a barename - it&apos;s assigning to a list slice that just happens to be the entire list, thereby replacing the list &lt;em&gt;contents&lt;/em&gt; &lt;strong&gt;within the same Python list object&lt;/strong&gt;, rather than just reseating one reference (from previous list object to new list object) like the other answers.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.&lt;/p&gt;\n\n&lt;p&gt;For example (depends on what type of list):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist[:]:\n    etc....\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    somelist.remove(x)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist[:]:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    somelist.remove(x)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist\n[]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; some_condition(somelist, i):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; somelist[i]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You need to go backwards otherwise it&apos;s a bit like sawing off the tree-branch that you are sitting on :-)&lt;/p&gt;\n\n&lt;p&gt;Python 2 users: replace &lt;code&gt;range&lt;/code&gt; by &lt;code&gt;xrange&lt;/code&gt; to avoid creating a hardcoded list&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Overview of workarounds&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Either:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;use a linked list implementation/roll your own.&lt;/p&gt;\n&lt;p&gt;A linked list is the proper data structure to support efficient item removal, and does not force you to make space/time tradeoffs.&lt;/p&gt;\n&lt;p&gt;A CPython &lt;code&gt;list&lt;/code&gt; is implemented with &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_array&quot; rel=&quot;noreferrer&quot;&gt;dynamic arrays&lt;/a&gt; as &lt;a href=&quot;https://stackoverflow.com/questions/3917574/how-is-pythons-list-implemented&quot;&gt;mentioned here&lt;/a&gt;, which is not a good data type to support removals.&lt;/p&gt;\n&lt;p&gt;There doesn&apos;t seem to be a linked list in the standard library however:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19752134/is-there-a-linked-list-predefined-library-in-python&quot;&gt;Is there a linked list predefined library in Python?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/ajakubek/python-llist&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/ajakubek/python-llist&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;start a new &lt;code&gt;list()&lt;/code&gt; from scratch, and &lt;code&gt;.append()&lt;/code&gt; back at the end as mentioned at: &lt;a href=&quot;https://stackoverflow.com/a/1207460/895245&quot;&gt;https://stackoverflow.com/a/1207460/895245&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This time efficient, but less space efficient because it keeps an extra copy of the array around during iteration.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;use &lt;code&gt;del&lt;/code&gt; with an index as mentioned at: &lt;a href=&quot;https://stackoverflow.com/a/1207485/895245&quot;&gt;https://stackoverflow.com/a/1207485/895245&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This is more space efficient since it dispenses the array copy, but it is less time efficient, because removal from dynamic arrays requires shifting all following items back by one, which is O(N).&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Generally, if you are doing it quick and dirty and don&apos;t want to add a custom &lt;code&gt;LinkedList&lt;/code&gt; class, you just want to go for the faster &lt;code&gt;.append()&lt;/code&gt; option by default unless memory is a big concern.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Official Python 2 tutorial 4.2. &quot;for Statements&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/tutorial/controlflow.html#for-statements&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/2/tutorial/controlflow.html#for-statements&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This part of the docs makes it clear that:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;you need to make a copy of the iterated list to modify it&lt;/li&gt;\n&lt;li&gt;one way to do it is with the slice notation &lt;code&gt;[:]&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;window&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;defenestrate&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; words[:]:  &lt;span class=&quot;hljs-comment&quot;&gt;# Loop over a slice copy of the entire list.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(w) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        words.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, w)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;defenestrate&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;window&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;defenestrate&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Python 2 documentation 7.3. &quot;The for statement&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#for&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/2/reference/compound_stmts.html#for&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This part of the docs says once again that you have to make a copy, and gives an actual removal example:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note: There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated). Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. This can lead to nasty bugs that can be avoided by making a temporary copy using a slice of the whole sequence, e.g.,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a[:]:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: a.remove(x)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, I disagree with this implementation, since &lt;code&gt;.remove()&lt;/code&gt; has to iterate the &lt;em&gt;entire list&lt;/em&gt; to find the value.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Could Python do this better?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It seems like this particular Python API could be improved. Compare it, for instance, with:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Java &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/ListIterator.html&quot; rel=&quot;noreferrer&quot;&gt;ListIterator::remove&lt;/a&gt; which documents &quot;This call can only be made once per call to next or previous&quot;&lt;/li&gt;\n&lt;li&gt;C++ &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/vector/erase&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::vector::erase&lt;/code&gt;&lt;/a&gt; which returns a valid interator to the element after the one removed&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;both of which make it crystal clear that you cannot modify a list being iterated except with the iterator itself, and gives you efficient ways to do so without copying the list.&lt;/p&gt;\n&lt;p&gt;Perhaps the underlying rationale is that Python lists are assumed to be dynamic array backed, and therefore any type of removal will be time inefficient anyways, while Java has a nicer interface hierarchy with both &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; implementations of &lt;code&gt;ListIterator&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;There doesn&apos;t seem to be an explicit linked list type in the Python stdlib either: &lt;a href=&quot;https://stackoverflow.com/questions/280243/python-linked-list/280286&quot;&gt;Python Linked List&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Your best approach for such an example would be a &lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;noreferrer&quot;&gt;list comprehension&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist = [tup &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In cases where you&apos;re doing something more complex than calling a &lt;code&gt;determine&lt;/code&gt; function, I prefer constructing a new list and simply appending to it as I go.  For example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newlist = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# lots of code here, possibly setting things up for calling determine&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n        newlist.append(tup)\nsomelist = newlist\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Copying the list using &lt;code&gt;remove&lt;/code&gt; might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an &lt;code&gt;O(n)&lt;/code&gt; &lt;code&gt;remove&lt;/code&gt; operation for each element being removed, making this an &lt;code&gt;O(n^2)&lt;/code&gt; algorithm.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist[:]:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# lots of code here, possibly setting things up for calling determine&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n        newlist.append(tup)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those that like functional programming:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist[:] = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; tup: &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; determine(tup), somelist)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ifilterfalse\nsomelist[:] = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(ifilterfalse(determine, somelist))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to do this with a huge list, and duplicating the list seemed expensive, especially since in my case the number of deletions would be few compared to the items that remain. I took this low-level approach.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;array = [lots of stuff]\narraySize = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; arraySize:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; someTest(array[i]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; array[i]\n        arraySize -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What I don&apos;t know is how efficient a couple of deletes are compared to copying a large list. Please comment if you have any insight.&lt;/p&gt;\n    ","\n&lt;p&gt;Most of the answers here want you to create a copy of the list. I had a use case where the list was quite long (110K items) and it was smarter to keep reducing the list instead.&lt;/p&gt;\n\n&lt;p&gt;First of all you&apos;ll need to &lt;strong&gt;replace foreach loop with while loop&lt;/strong&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(somelist[i]):\n         &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; somelist[i]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The value of &lt;code&gt;i&lt;/code&gt; is not changed in the if block because you&apos;ll want to get value of the new item FROM THE SAME INDEX, once the old item is deleted.&lt;/p&gt;\n    ","\n&lt;p&gt;It might be smart to also just create a new list if the current list item meets the desired criteria. &lt;/p&gt;\n\n&lt;p&gt;so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; originalList:\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (item != badValue):\n        newList.append(item)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and to avoid having to re-code the entire project with the new lists name:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;originalList[:] = newList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;note, from Python documentation: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;copy.copy(x) \n  Return a shallow copy of x.&lt;/p&gt;\n  \n  &lt;p&gt;copy.deepcopy(x) \n  Return a deep copy of x.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;This answer was originally written in response to a question which has since been marked as duplicate:\n&lt;a href=&quot;https://stackoverflow.com/questions/40175149/removing-coordinates-from-list-on-python&quot;&gt;Removing coordinates from list on python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There are two problems in your code:&lt;/p&gt;\n\n&lt;p&gt;1) When using remove(), you attempt to remove integers whereas you need to remove a tuple.&lt;/p&gt;\n\n&lt;p&gt;2) The for loop will skip items in your list.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s run through what happens when we execute your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L1:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    L1.remove(a,b)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nTypeError: remove() takes exactly one argument (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; given)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first problem is that you are passing both &apos;a&apos; and &apos;b&apos; to remove(), but remove() only accepts a single argument. So how can we get remove() to work properly with your list? We need to figure out what each element of your list is. In this case, each one is a tuple. To see this, let&apos;s access one element of the list (indexing starts at 0):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(L1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;tuple&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Aha! Each element of L1 is actually a tuple. So that&apos;s what we need to be passing to remove(). Tuples in python are very easy, they&apos;re simply made by enclosing values in parentheses. &quot;a, b&quot; is not a tuple, but &quot;(a, b)&quot; is a tuple. So we modify your code and run it again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# The remove line now includes an extra &quot;()&quot; to make a tuple out of &quot;a,b&quot;&lt;/span&gt;\nL1.remove((a,b))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code runs without any error, but let&apos;s look at the list it outputs: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why is (1,-2) still in your list? It turns out modifying the list while using a loop to iterate over it is a very bad idea without special care. The reason that (1, -2) remains in the list is that the locations of each item within the list changed between iterations of the for loop. Let&apos;s look at what happens if we feed the above code a longer list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;span class=&quot;hljs-comment&quot;&gt;### Outputs:&lt;/span&gt;\nL1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can infer from that result, every time that the conditional statement evaluates to true and a list item is removed, the next iteration of the loop will skip evaluation of the next item in the list because its values are now located at different indices.&lt;/p&gt;\n\n&lt;p&gt;The most intuitive solution is to copy the list, then iterate over the original list and only modify the copy. You can try doing so like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L2 = L1\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L1:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        L2.remove((a,b))\n&lt;span class=&quot;hljs-comment&quot;&gt;# Now, remove the original copy of L1 and replace with L2&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; L2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; L1\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L1\nL1 = L2; &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L2\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;L1 is now: &quot;&lt;/span&gt;, L1)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the output will be identical to before:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;L1 is now: &apos;&lt;/span&gt;, [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because when we created L2, python did not actually create a new object. Instead, it merely referenced L2 to the same object as L1. We can verify this with &apos;is&apos; which is different from merely &quot;equals&quot; (==).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L2=L1\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; L2\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can make a true copy using copy.copy(). Then everything works as expected:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nL1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\nL2 = copy.copy(L1)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L1:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        L2.remove((a,b))\n&lt;span class=&quot;hljs-comment&quot;&gt;# Now, remove the original copy of L1 and replace with L2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L1\nL1 = L2; &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L2\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, there is one cleaner solution than having to make an entirely new copy of L1. The reversed() function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(L1):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        L1.remove((a,b))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;L1 is now: &quot;&lt;/span&gt;, L1)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unfortunately, I cannot adequately describe how reversed() works. It returns a &apos;listreverseiterator&apos; object when a list is passed to it. For practical purposes, you can think of it as creating a reversed copy of its argument. This is the solution I recommend.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to delete elements from a list while iterating, use a while-loop so you can alter the current index and end index after each deletion.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nlength = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(list1)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; length:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; condition:\n        list1.remove(list1[i])\n        i -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        length -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to do anything else during the iteration, it may be nice to get both the index (which guarantees you being able to reference it, for example if you have a list of dicts) and the actual list item contents.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;inlist = [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;field2&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;field2&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;}]    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; idx, i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(inlist):\n    do some stuff &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; i[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; somecondition:\n        xlist.append(idx)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(xlist): &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; inlist[i]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;enumerate&lt;/code&gt; gives you access to the item and the index at once. &lt;code&gt;reversed&lt;/code&gt; is so that the indices that you&apos;re going to later delete don&apos;t change on you. &lt;/p&gt;\n    ","\n&lt;p&gt;One possible solution, useful if you want not only remove some things, but also do something with all elements in a single loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;alist = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;good&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bad&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;good&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bad&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;good&apos;&lt;/span&gt;]\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; alist[:]:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;bad&apos;&lt;/span&gt;:\n        alist.pop(i)\n        i -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do something cool with x or just print x&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x)\n    i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;for loop will be iterate through index..&lt;/p&gt;\n\n&lt;p&gt;consider you have a list,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you have using list variable called &lt;code&gt;lis&lt;/code&gt;. and you using same to remove..&lt;/p&gt;\n\n&lt;p&gt;your variable &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;during 5th iteration,&lt;/p&gt;\n\n&lt;p&gt;your &lt;strong&gt;number 35&lt;/strong&gt; was not a prime so you removed it from a list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis.remove(y)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then &lt;strong&gt;next value (65)&lt;/strong&gt; move on to previous index.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so 4th iteration done pointer moved onto 5th.. &lt;/p&gt;\n\n&lt;p&gt;thats why your loop doesnt cover 65 since its moved into previous index.&lt;/p&gt;\n\n&lt;p&gt;so you shouldn&apos;t reference list into another variable which still reference original instead of copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;ite = lis &lt;span class=&quot;hljs-comment&quot;&gt;#dont do it will reference instead copy&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so do copy of list using &lt;code&gt;list[::]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;now you it will give,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Problem is you removed a value from a list during iteration then your list index will collapse.&lt;/p&gt;\n\n&lt;p&gt;so you can try comprehension instead.&lt;/p&gt;\n\n&lt;p&gt;which supports all the iterable like, list, tuple, dict, string etc &lt;/p&gt;\n    ","\n&lt;p&gt;The other answers are correct that it is usually a bad idea to delete from a list that you&apos;re iterating. Reverse iterating avoids some of the pitfalls, but it is much more difficult to follow code that does that, so usually you&apos;re better off using a list comprehension or &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;There is, however, one case where it is safe to remove elements from a sequence that you are iterating: if you&apos;re only removing one item while you&apos;re iterating. This can be ensured using a &lt;code&gt;return&lt;/code&gt; or a &lt;code&gt;break&lt;/code&gt;. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(lst):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item % &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        foo(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; lst[i]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is often easier to understand than a list comprehension when you&apos;re doing some operations with side effects on the first item in a list that meets some condition and then removing that item from the list immediately after.&lt;/p&gt;\n    ","\n&lt;p&gt;You can try for-looping in reverse so for some_list you&apos;ll do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list_len = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(some_list)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(list_len):\n    reverse_i = list_len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - i\n    cur = some_list[reverse_i]\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some logic with cur element&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; some_condition:\n        some_list.pop(reverse_i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way the index is aligned and doesn&apos;t suffer from the list updates (regardless whether you pop cur element or not).&lt;/p&gt;\n    ","\n&lt;p&gt;You might want to use &lt;code&gt;filter()&lt;/code&gt; available as the built-in.&lt;/p&gt;\n\n&lt;p&gt;For more details &lt;a href=&quot;http://docs.python.org/library/functions.html#filter&quot; rel=&quot;nofollow noreferrer&quot;&gt;check here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The most effective method is list comprehension, many people show their case, of course, it is also a good way to get an &lt;code&gt;iterator&lt;/code&gt; through &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;Filter&lt;/code&gt; receives a function and a sequence. &lt;code&gt;Filter&lt;/code&gt; applies the passed function to each element in turn, and then decides whether to retain or discard the element depending on whether the function return value is &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is an example  (get the odds in the tuple):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x:x%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)))  \n&lt;span class=&quot;hljs-comment&quot;&gt;# result: [1, 5, 9, 15]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Caution: You can also not handle iterators. Iterators are sometimes better than sequences.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I needed to do something similar and in my case the problem was memory - I needed to merge multiple dataset objects within a list, after doing some stuff with them, as a new object, and needed to get rid of each entry I was merging to avoid duplicating all of them and blowing up memory. In my case having the objects in a dictionary instead of a list worked fine:&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;k = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\nv = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]\nd = {key:val &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key,val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(k, v)}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d[i]\n    d.pop(i)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n    ","\n&lt;p&gt;TLDR:&lt;/p&gt;\n\n&lt;p&gt;I wrote a library that allows you to do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fluidIter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; FluidIterable\nfSomeList = FluidIterable(someList)  \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fSomeList:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n        &lt;span class=&quot;hljs-comment&quot;&gt;# remove &apos;tup&apos; without &quot;breaking&quot; the iteration&lt;/span&gt;\n        fSomeList.remove(tup)\n        &lt;span class=&quot;hljs-comment&quot;&gt;# tup has also been removed from &apos;someList&apos;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# as well as &apos;fSomeList&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s best to use another method if possible that doesn&apos;t require modifying your iterable while iterating over it, but for some algorithms it might not be that straight forward. And so if you are sure that you really do want the code pattern described in the original question, it is possible.&lt;/p&gt;\n\n&lt;p&gt;Should work on all mutable sequences not just lists.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Full answer:&lt;/p&gt;\n\n&lt;p&gt;Edit: The last code example in this answer gives a use case for &lt;strong&gt;&lt;em&gt;why&lt;/em&gt;&lt;/strong&gt; you might sometimes want to modify a list in place rather than use a list comprehension. The first part of the answers serves as tutorial of &lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; an array can be modified in place.&lt;/p&gt;\n\n&lt;p&gt;The solution follows on from &lt;a href=&quot;https://stackoverflow.com/a/6260097/4451578&quot;&gt;this&lt;/a&gt; answer (for a related question) from senderle. Which explains how the the array index is updated while iterating through a list that has been modified. The solution below is designed to correctly track the array index even if the list is modified.&lt;/p&gt;\n\n&lt;p&gt;Download &lt;code&gt;fluidIter.py&lt;/code&gt; from &lt;a href=&quot;https://github.com/alanbacon/FluidIterator&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; &lt;code&gt;https://github.com/alanbacon/FluidIterator&lt;/code&gt;, it is just a single file so no need to install git. There is no installer so you will need to make sure that the file is in the python path your self. The code has been written for python 3 and is untested on python 2.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fluidIter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; FluidIterable\nl = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]  \nfluidL = FluidIterable(l)                       \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fluidL:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;initial state of list on this iteration: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(fluidL)) \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;current iteration value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(i))\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;popped value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(fluidL.pop(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)))\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Final List Value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(l))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will produce the following output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;initial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n\nFinal &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; Value: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above we have used the &lt;code&gt;pop&lt;/code&gt; method on the fluid list object. Other common iterable methods are also implemented such as &lt;code&gt;del fluidL[i]&lt;/code&gt;, &lt;code&gt;.remove&lt;/code&gt;, &lt;code&gt;.insert&lt;/code&gt;, &lt;code&gt;.append&lt;/code&gt;, &lt;code&gt;.extend&lt;/code&gt;. The list can also be modified using slices (&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; methods are not implemented).&lt;/p&gt;\n\n&lt;p&gt;The only condition is that you must only modify the list in place, if at any point &lt;code&gt;fluidL&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt; were reassigned to a different list object the code would not work. The original &lt;code&gt;fluidL&lt;/code&gt; object would still be used by the for loop but would become out of scope for us to modify.&lt;/p&gt;\n\n&lt;p&gt;i.e.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fluidL[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;# is OK&lt;/span&gt;\nfluidL = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# is not OK&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we want to access the current index value of the list we cannot use enumerate, as this only counts how many times the for loop has run. Instead we will use the iterator object directly.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fluidArr = FluidIterable([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;hljs-comment&quot;&gt;# get iterator first so can query the current index&lt;/span&gt;\nfluidArrIter = fluidArr.__iter__()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(fluidArrIter):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;enum: &apos;&lt;/span&gt;, i)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;current val: &apos;&lt;/span&gt;, v)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;current ind: &apos;&lt;/span&gt;, fluidArrIter.currentIndex)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(fluidArr)\n    fluidArr.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Final List Value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(fluidArr))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will output the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;enum:  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nenum:  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nenum:  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nenum:  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nFinal &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; Value: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;FluidIterable&lt;/code&gt; class just provides a wrapper for the original list object. The original object can be accessed as a property of the fluid object like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;originalList = fluidArr.fixedIterable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More examples / tests can be found in the &lt;code&gt;if __name__ is &quot;__main__&quot;:&lt;/code&gt; section at the bottom of &lt;code&gt;fluidIter.py&lt;/code&gt;. These are worth looking at because they explain what happens in various situations. Such as: Replacing a large sections of the list using a slice. Or using (and modifying) the same iterable in nested for loops.&lt;/p&gt;\n\n&lt;p&gt;As I stated to start with: this is a complicated solution that will hurt the readability of your code and make it more difficult to debug. Therefore other solutions such as the list comprehensions mentioned in David Raznick&apos;s &lt;a href=&quot;https://stackoverflow.com/a/1207461/4451578&quot;&gt;answer&lt;/a&gt; should be considered first. That being said, I have found times where this class has been useful to me and has been easier to use than keeping track of the indices of elements that need deleting.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Edit: As mentioned in the comments, this answer does not really present a problem for which this approach provides a solution. I will try to address that here:&lt;/p&gt;\n\n&lt;p&gt;List comprehensions provide a way to generate a new list but these approaches tend to look at each element in isolation rather than the current state of the list as a whole.&lt;/p&gt;\n\n&lt;p&gt;i.e.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newList = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; oldList &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; testFunc(i)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But what if the result of the &lt;code&gt;testFunc&lt;/code&gt; depends on the elements that have been added to &lt;code&gt;newList&lt;/code&gt; already? Or the elements still in &lt;code&gt;oldList&lt;/code&gt; that might be added next? There might still be a way to use a list comprehension but it will begin to lose it&apos;s elegance, and for me it feels easier to modify a list in place.&lt;/p&gt;\n\n&lt;p&gt;The code below is one example of an algorithm that suffers from the above problem. The algorithm will reduce a list so that no element is a multiple of any other element.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;randInts = [&lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\nfRandInts = FluidIterable(randInts)\nfRandIntsIter = fRandInts.__iter__()\n&lt;span class=&quot;hljs-comment&quot;&gt;# for each value in the list (outer loop)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# test against every other value in the list (inner loop)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fRandIntsIter:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;outer val: &apos;&lt;/span&gt;, i)\n    innerIntsIter = fRandInts.__iter__()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; innerIntsIter:\n        innerIndex = innerIntsIter.currentIndex\n        &lt;span class=&quot;hljs-comment&quot;&gt;# skip the element that the outloop is currently on&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# because we don&apos;t want to test a value against itself&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; innerIndex == fRandIntsIter.currentIndex:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# if the test element, j, is a multiple &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# of the reference element, i, then remove &apos;j&apos;&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; j%i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;remove val: &apos;&lt;/span&gt;, j)\n                &lt;span class=&quot;hljs-comment&quot;&gt;# remove element in place, without breaking the&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;# iteration of either loop&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; fRandInts[innerIndex]\n            &lt;span class=&quot;hljs-comment&quot;&gt;# end if multiple, then remove&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# end if not the same value as outer loop&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# end inner loop&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# end outerloop&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;final list: &apos;&lt;/span&gt;, randInts)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output and the final reduced list are shown below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;outer val:  &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\n\nfinal &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:  [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In some situations, where you&apos;re doing more than simply filtering a list one item at time, you want your iteration to change while iterating.&lt;/p&gt;\n\n&lt;p&gt;Here is an example where copying the list beforehand is incorrect, reverse iteration is impossible and a list comprehension is also not an option.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; Sieve of Eratosthenes &quot;&quot;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generate_primes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; Generates all primes less than n. &quot;&quot;&quot;&lt;/span&gt;\n    primes = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,n))\n    idx = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; idx &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(primes):\n        p = primes[idx]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; multiple &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(p+p, n, p):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n                primes.remove(multiple)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#EAFP&lt;/span&gt;\n        idx += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I can think of three approaches to solve your problem. As an example, I will create a random list of tuples &lt;code&gt;somelist = [(1,2,3), (4,5,6), (3,6,6), (7,8,9), (15,0,0), (10,11,12)]&lt;/code&gt;. The condition that I choose is &lt;code&gt;sum of elements of a tuple = 15&lt;/code&gt;. In the final list we will only have those tuples whose sum is not equal to 15. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;What I have chosen is a randomly chosen example. &lt;strong&gt;Feel free to change&lt;/strong&gt; the &lt;strong&gt;list of tuples&lt;/strong&gt; and the &lt;strong&gt;condition&lt;/strong&gt; that I have chosen.&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 1.&amp;gt;&lt;/strong&gt; Use the framework that you had suggested (where one fills in a code inside a for loop). I use a small code with &lt;code&gt;del&lt;/code&gt; to delete a tuple that meets the said condition. However, this method will miss a tuple (which satisfies the said condition) if two consecutively placed tuples meet the given condition. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(tup)==&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; ): \n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; somelist[somelist.index(tup)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; somelist\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 2.&amp;gt;&lt;/strong&gt; Construct a new list which contains elements (tuples) where the given condition is not met (this is the same thing as removing elements of list where the given condition is met). Following is the code for that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newlist1 = [somelist[tup] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist)) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(somelist[tup])!=&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; newlist1\n&amp;gt;&amp;gt;&amp;gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 3.&amp;gt;&lt;/strong&gt; Find indices where the given condition is met, and then use remove elements (tuples) corresponding to those indices. Following is the code for that.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;indices = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist)) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(somelist[i])==&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)]\nnewlist2 = [tup &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j, tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(somelist) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; newlist2\n&amp;gt;&amp;gt;&amp;gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 1 and method 2 are faster than method 3&lt;/strong&gt;. Method2 and method3 are more efficient than method1. I &lt;strong&gt;prefer method2&lt;/strong&gt;. For the aforementioned example, &lt;code&gt;time(method1) : time(method2) : time(method3) = 1 : 1 : 1.7&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you will use the new list later, you can simply set the elem to None, and then judge it in the later loop, like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; li:\n    i = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; li:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; elem &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this way, you dont&apos;t need copy the list and it&apos;s easier to understand. &lt;/p&gt;\n    ","\n&lt;p&gt;For anything that has the potential to be really big, I use the following. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\norig_list = np.array([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;])\n\nremove_me = [&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\ncleaned = np.delete(orig_list, remove_me)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(cleaned)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That should be significantly faster than anything else. &lt;/p&gt;\n    "],"id":75,"title":"How to remove items from a list while iterating?","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question&apos;s answers are a &lt;a href=&quot;/help/privileges/edit-community-wiki&quot;&gt;community effort&lt;/a&gt;&lt;/b&gt;. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I&apos;m iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n         code_to_remove_tup\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What should I use in place of &lt;code&gt;code_to_remove_tup&lt;/code&gt;? I can&apos;t figure out how to remove the item in this fashion.&lt;/p&gt;\n    ","slug":"how-to-remove-items-from-a-list-while-iterating-1657384496375","postType":"QUESTION","createdAt":"2022-07-09T16:34:56.000Z","updatedAt":"2022-07-09T16:34:56.000Z","tags":[{"id":273,"name":"iteration","slug":"iteration","createdAt":"2022-07-09T16:34:56.000Z","updatedAt":"2022-07-09T16:34:56.000Z","Questions_Tags":{"questionId":75,"tagId":273}}],"relatedQuestions":[{"title":"How to remove items from a list while iterating?","slug":"how-to-remove-items-from-a-list-while-iterating-1657384496375","tags":[{"name":"iteration","Questions_Tags":{"questionId":75,"tagId":273}}]}]},"randomQuestions":[{"title":"Loop through an array in JavaScript","slug":"loop-through-an-array-in-javascript-1657387821551"},{"title":"Error in finding last used cell in Excel with VBA","slug":"error-in-finding-last-used-cell-in-excel-with-vba-1657384584748"},{"title":"How do I compare strings in Java?","slug":"how-do-i-compare-strings-in-java-1657384243187"},{"title":"HTTP GET with request body","slug":"http-get-with-request-body-1657387379038"},{"title":"How does the \"this\" keyword work, and when should it be used?","slug":"how-does-the-\"this\"-keyword-work-and-when-should-it-be-used-1657384384385"},{"title":"Big O, how do you calculate/approximate it?","slug":"big-o-how-do-you-calculateapproximate-it-1657387856392"},{"title":"What is an efficient way to implement a singleton pattern in Java? [closed]","slug":"what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java-closed-1657387970474"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"What is the difference between a deep copy and a shallow copy?","slug":"what-is-the-difference-between-a-deep-copy-and-a-shallow-copy-1657388445063"},{"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"getContactsFromFirebase() method return an empty list","slug":"getcontactsfromfirebase()-method-return-an-empty-list-1657388433928"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"How to format numbers as currency strings","slug":"how-to-format-numbers-as-currency-strings-1657388399166"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"}]},"__N_SSG":true}