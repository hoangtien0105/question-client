{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;code&gt;myArray&lt;/code&gt; is a local variable and as thus the pointer is only valid until the end of its scope (which is in this case the containing function &lt;code&gt;getArray&lt;/code&gt;) is left. If you access it later you get undefined behavior.&lt;/p&gt;\n\n&lt;p&gt;In practice what happens is that the call to &lt;code&gt;printf&lt;/code&gt; overwrites the part of the stack used by &lt;code&gt;myArray&lt;/code&gt; and it then contains some other data.&lt;/p&gt;\n\n&lt;p&gt;To fix your code you need to either declare the array in a scope that lives long enough (the &lt;code&gt;main&lt;/code&gt; function in your example) or allocate it on the heap. If you allocate it on the heap you need to free it either manually, or in C++ using RAII.&lt;/p&gt;\n\n&lt;p&gt;One alternative I missed (probably even the best one here, provided the array is not too big) is to wrap your array into a struct and thus make it a value type. Then returning it creates a copy which survives the function return. See &lt;a href=&quot;https://stackoverflow.com/users/560684/tp1&quot;&gt;tp1&lt;/a&gt;&apos;s &lt;a href=&quot;https://stackoverflow.com/a/4581061/&quot;&gt;answer&lt;/a&gt; for details on this.&lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t access a local variable once it goes out of scope.  This is what it means to be a local variable.  &lt;/p&gt;\n\n&lt;p&gt;When you are accessing the array in the &lt;code&gt;replaceNumberAndPrint&lt;/code&gt; function the result is undefined. The fact it appears to work first time is just a fortunate coincidence. Probably the memory location you are pointing to is unallocated on the stack and is still correctly set for the first call,  but the call to &lt;code&gt;printf&lt;/code&gt; then overwrites this by pushing values onto the stack during its operation which is why the second call to &lt;code&gt;printf&lt;/code&gt; displays something different.&lt;/p&gt;\n\n&lt;p&gt;You need to store the array data on the heap and pass a pointer, or in a variable that remains in scope (e.g. a global or something scoped within the main function).&lt;/p&gt;\n    ","\n&lt;p&gt;Try something like that. The way you do it &quot;kills&quot; &lt;code&gt;myArray&lt;/code&gt; cause if it locally defined.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * array)&lt;/span&gt; &lt;/span&gt;{\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt; , array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(array);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * myArray = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;;\n myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n &lt;span class=&quot;hljs-comment&quot;&gt;//{4, 65, 23};&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n &lt;span class=&quot;hljs-built_in&quot;&gt;replaceNumberAndPrint&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;getArray&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More : &lt;a href=&quot;http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/&quot;&gt;http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; As Comments correctly pointed out:  A better way to do it would be that :&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * array)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!array)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt; , array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;createArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * myArray = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!myArray)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * array = &lt;span class=&quot;hljs-built_in&quot;&gt;createArray&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;replaceNumberAndPrint&lt;/span&gt;(array);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(array);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;myArray goes out of scope as soon as you leave getArray. You need to allocate space for it on the heap instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Your code invokes Undefined Behaviour because &lt;code&gt;myArray&lt;/code&gt; goes out of scope as soon as &lt;code&gt;getArray()&lt;/code&gt; returns and any attempt to &lt;em&gt;use&lt;/em&gt; (dereference) the dangling pointer is UB.&lt;/p&gt;\n    ","\n&lt;p&gt;Local variables go out of scope upon return, so you can&apos;t return a pointer to a local variable. &lt;/p&gt;\n\n&lt;p&gt;You need to allocate it dynamically (on the heap), using &lt;code&gt;malloc&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;assert&lt;/span&gt;(array != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n    array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array;\n }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;destroy_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(array);\n }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array = &lt;span class=&quot;hljs-built_in&quot;&gt;create_array&lt;/span&gt;();\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; ++i)\n         &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, array[i]);\n     &lt;span class=&quot;hljs-built_in&quot;&gt;destroy_array&lt;/span&gt;(array);\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, you can declare the array as static, keeping in mind the semantics are different. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;get_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[] = { &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array;\n }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array = &lt;span class=&quot;hljs-built_in&quot;&gt;get_array&lt;/span&gt;();\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; ++i)\n         &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, array[i]);\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you don&apos;t know what &lt;code&gt;static&lt;/code&gt; means, read &lt;a href=&quot;https://stackoverflow.com/questions/572547/what-does-static-mean-in-a-c-program&quot;&gt;this question &amp;amp; answer&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Right way to do this is as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Arr&lt;/span&gt; {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n};\n&lt;span class=&quot;hljs-function&quot;&gt;Arr &lt;span class=&quot;hljs-title&quot;&gt;get_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n   Arr a;\n   a.array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n   a.array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n   a.array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n   Arr a = &lt;span class=&quot;hljs-built_in&quot;&gt;get_array&lt;/span&gt;();\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++)\n       &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, a.array[i]);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To understand why you need to do this, you need to know how sizeof(array) works. C (and thus c++) tries hard to avoid copying the array, and you need the struct to go past that. Why copying is needed is because of scopes -- the get_array() function&apos;s scope disappears and every value still needed from that scope will need to be copied to calling scope.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;C++ solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;May I have any access to a local variable in a different function? If so, how?&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The answer is no, not after the function has ended. Local variables are destroyed at that point.&lt;/p&gt;\n\n&lt;p&gt;In &lt;code&gt;C++&lt;/code&gt; the way to deal with returning arrays is to manage them in a &lt;em&gt;container&lt;/em&gt; like a &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot; rel=&quot;nofollow noreferrer&quot;&gt;std::array&lt;/a&gt; (fixed size) or a &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/vector&quot; rel=&quot;nofollow noreferrer&quot;&gt;std::vector&lt;/a&gt; (dynamic size).&lt;/p&gt;\n\n&lt;p&gt;Eg:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;gt;&amp;amp; array)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 3&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 3&amp;gt; myArray = {&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the second function the returned value is optimized by the compiler so you don&apos;t pay the price of actually copying the array.&lt;/p&gt;\n    ","\n&lt;p&gt;In this code you have used pointer to local objects but when a function returns all local variables goes out of scope. If you will allocate memory (using &lt;code&gt;malloc()&lt;/code&gt; function for allocation) then no data will be lost or overwrite.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *myArray = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(size*&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *vector = &lt;span class=&quot;hljs-built_in&quot;&gt;getArray&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;i++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;,vector[i]);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;getch&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code will print all the array elements and no overwritten will be happened.&lt;/p&gt;\n    ","\n&lt;p&gt;Static ..or.. Global within your .c will do the trick ;)&lt;/p&gt;\n&lt;p&gt;However the entire time the program will occupy those 3 bytes BUT you avoid doing malloc on simple things like this (malloc recommended for big arrays)&lt;/p&gt;\n&lt;p&gt;On the other hand if the outside function modify the pointer, then the internal &apos;myArray&apos; will be modified cause it points to it, that&apos;s it&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; myArray[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":488,"title":"How to access a local variable from a different function using pointers?","content":"\n                \n&lt;p&gt;May I have any access to a local variable in a different function? If so, how?&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; myArray[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;replaceNumberAndPrint&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;getArray&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output of the piece of code above:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;65\n4202656\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What am I doing wrong? What does the &quot;4202656&quot; mean?&lt;/p&gt;\n\n&lt;p&gt;Do I have to copy the whole array in the &lt;code&gt;replaceNumberAndPrint()&lt;/code&gt; function to be able to access it more than the first time?&lt;/p&gt;\n    ","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760","postType":"QUESTION","createdAt":"2022-07-09T17:35:59.000Z","updatedAt":"2022-07-09T17:35:59.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What does the 'static' keyword do in a class?","slug":"what-does-the-'static'-keyword-do-in-a-class-1657388554238"},{"title":"Why does this UnboundLocalError occur (closure)? [duplicate]","slug":"why-does-this-unboundlocalerror-occur-(closure)-duplicate-1657388531538"},{"title":"Official locator strategies for the webdriver","slug":"official-locator-strategies-for-the-webdriver-1657384353174"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"What does \"list comprehension\" and similar mean? How does it work and how can I use it?","slug":"what-does-\"list-comprehension\"-and-similar-mean-how-does-it-work-and-how-can-i-use-it-1657387996940"},{"title":"Simulating group_concat MySQL function in Microsoft SQL Server 2005?","slug":"simulating-group_concat-mysql-function-in-microsoft-sql-server-2005-1657384832169"},{"title":"PHP code is not being executed, but the code shows in the browser source code","slug":"php-code-is-not-being-executed-but-the-code-shows-in-the-browser-source-code-1657384553581"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"},{"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467"},{"title":"What is a NullPointerException, and how do I fix it?","slug":"what-is-a-nullpointerexception-and-how-do-i-fix-it-1657384201768"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"Is it possible for flex items to align tightly to the items above them?","slug":"is-it-possible-for-flex-items-to-align-tightly-to-the-items-above-them-1657388511179"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"javascript function doesn't work when link is clicked","slug":"javascript-function-doesn't-work-when-link-is-clicked-1657387767488"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"},{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"When can I use a forward declaration?","slug":"when-can-i-use-a-forward-declaration-1657388251827"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"Numbering rows within groups in a data frame","slug":"numbering-rows-within-groups-in-a-data-frame-1657388556436"}]},"__N_SSG":true}