{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;It drops the students table.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The original code in the school&apos;s program probably looks something like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;q &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO Students VALUES (&apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; FNMName.Text &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;, &apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; LName.Text &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the naive way to add text input into a query, and is &lt;em&gt;very bad&lt;/em&gt;, as you will see.&lt;/p&gt;\n\n&lt;p&gt;After the values from the first name, middle name textbox &lt;em&gt;FNMName.Text&lt;/em&gt; (which is &lt;code&gt;Robert&apos;); DROP TABLE STUDENTS; --&lt;/code&gt;) and the last name textbox &lt;em&gt;LName.Text&lt;/em&gt; (let&apos;s call it &lt;code&gt;Derper&lt;/code&gt;) are concatenated with the rest of the query, the result is now actually &lt;em&gt;two queries&lt;/em&gt; separated by the &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Language_elements&quot; rel=&quot;noreferrer&quot;&gt;statement terminator&lt;/a&gt; (semicolon).  The second query has been &lt;strong&gt;injected&lt;/strong&gt; into the first.  When the code executes this query against the database, it will look like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Students &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; Students; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;, &apos;Derper&apos;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which, in plain English, roughly translates to the two queries:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Add a new record to the Students table with a Name value of &apos;Robert&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Delete the Students table&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Everything past the second query is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms181627.aspx&quot; rel=&quot;noreferrer&quot;&gt;marked as a comment&lt;/a&gt;:  &lt;code&gt;--&apos;, &apos;Derper&apos;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;&apos;&lt;/code&gt; in the student&apos;s name is not a comment, it&apos;s the closing &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms179899.aspx&quot; rel=&quot;noreferrer&quot;&gt;string delimiter&lt;/a&gt;.  Since the student&apos;s name is a string, it&apos;s needed syntactically to complete the hypothetical query.  Injection attacks only work &lt;em&gt;when the SQL query they inject results in valid SQL&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;&lt;sup&gt;Edited &lt;strong&gt;&lt;em&gt;again&lt;/em&gt;&lt;/strong&gt; as per &lt;a href=&quot;https://stackoverflow.com/users/287586/dan04&quot;&gt;dan04&lt;/a&gt;&apos;s astute comment&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s say the name was used in a variable, &lt;code&gt;$Name&lt;/code&gt;.  You then run this query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Students &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&apos;$Name&apos;&lt;/span&gt; )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The code is mistakenly placing anything the user supplied as the variable. You wanted the SQL to be:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;INSERT INTO Students VALUES ( &apos;&lt;kbd&gt;Robert Tables&lt;/kbd&gt;` )&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;But a clever user can supply whatever they want:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;INSERT INTO Students VALUES ( &apos;&lt;kbd&gt;Robert&apos;); DROP TABLE Students; --&lt;/kbd&gt;&apos; )&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;What you get is:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Students &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt; );  &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos; )&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;--&lt;/code&gt; only comments the remainder of the line.&lt;/p&gt;\n    ","\n&lt;p&gt;As everyone else has pointed out already, the &lt;code&gt;&apos;);&lt;/code&gt; closes the original statement and then a second statement follows. Most frameworks, including languages like PHP, have default security settings by now that don&apos;t allow multiple statements in one SQL string. In PHP, for example, you can only run multiple statements in one SQL string by using the &lt;code&gt;mysqli_multi_query&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;You can, however, manipulate an existing SQL statement via SQL injection without having to add a second statement. Let&apos;s say you have a login system which checks a username and a password with this simple select:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;SELECT * FROM users WHERE username=&apos;&quot; . $_REQUEST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;] . &quot;&apos; and (password=&apos;&quot;.$_REQUEST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;].&quot;&apos;)&quot;;\n$&lt;span class=&quot;hljs-keyword&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;mysql_query($query);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you provide &lt;code&gt;peter&lt;/code&gt; as the username and &lt;code&gt;secret&lt;/code&gt; as the password, the resulting SQL string would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;peter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (password&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;secret&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Everything&apos;s fine. Now imagine you provide this string as the password:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; OR &apos;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;=&apos;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the resulting SQL string would be this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;peter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (password&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That would enable you to log in to any account without knowing the password. So you don&apos;t need to be able to use two statements in order to use SQL injection, although you can do more destructive things if you are able to supply multiple statements.&lt;/p&gt;\n    ","\n&lt;p&gt;No, &lt;code&gt;&apos;&lt;/code&gt; isn&apos;t a comment in SQL, but a delimiter.&lt;/p&gt;\n\n&lt;p&gt;Mom supposed the database programmer made a request looking like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;students&apos;&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;first_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;last_name&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;$firstName&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$lastName&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(for example) to add the new student, where the &lt;code&gt;$xxx&lt;/code&gt; variable contents was taken directly out of an HTML form, without checking format nor escaping special characters.&lt;/p&gt;\n\n&lt;p&gt;So if &lt;code&gt;$firstName&lt;/code&gt; contains &lt;code&gt;Robert&apos;); DROP TABLE students; --&lt;/code&gt; the database program will execute the following request directly on the DB: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;students&apos;&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;first_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;last_name&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; students; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;, &apos;XKCD&apos;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ie. it will terminate early the insert statement, execute whatever malicious code the cracker wants, then comment out whatever remainder of code there might be.&lt;/p&gt;\n\n&lt;p&gt;Mmm, I am too slow, I see already 8 answers before mine in the orange band... :-) A popular topic, it seems.&lt;/p&gt;\n    ","\n&lt;h2&gt;TL;DR&lt;/h2&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;-- The application accepts input, in this case &apos;Nancy&apos;, without attempting to\n-- sanitize the input, such as by escaping special characters\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Nancy&apos;);\nINSERT 0 1\n\n-- SQL injection occurs when input into a database command is manipulated to\n-- cause the database server to execute arbitrary SQL\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Robert&apos;); DROP TABLE students; --&apos;);\nINSERT 0 1\nDROP TABLE\n\n-- The student records are now gone - it could have been even worse!\nschool=&amp;gt; SELECT * FROM students;\nERROR:  relation &quot;students&quot; does not exist\nLINE 1: SELECT * FROM students;\n                      ^\n&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;This drops (deletes) the student table.&lt;/h3&gt;\n&lt;p&gt;(&lt;em&gt;All code examples in this answer were run on a PostgreSQL 9.1.2 database server.&lt;/em&gt;)&lt;/p&gt;\n&lt;p&gt;To make it clear what&apos;s happening, let&apos;s try this with a simple table containing only the name field and add a single row:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;school=&amp;gt; CREATE TABLE students (name TEXT PRIMARY KEY);\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index &quot;students_pkey&quot; for table &quot;students&quot;\nCREATE TABLE\nschool=&amp;gt; INSERT INTO students VALUES (&apos;John&apos;);\nINSERT 0 1\n&lt;/pre&gt;\n&lt;p&gt;Let&apos;s assume the application uses the following SQL to insert data into the table:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;INSERT INTO students VALUES (&apos;foobar&apos;);\n&lt;/pre&gt;\n&lt;p&gt;Replace &lt;code&gt;foobar&lt;/code&gt; with the actual name of the student. A normal insert operation would look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;--                            Input:   Nancy\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Nancy&apos;);\nINSERT 0 1\n&lt;/pre&gt;\n&lt;p&gt;When we query the table, we get this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;school=&amp;gt; SELECT * FROM students;\n name\n-------\n John\n Nancy\n(2 rows)\n&lt;/pre&gt;\n&lt;p&gt;What happens when we insert Little Bobby Tables&apos;s name into the table?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;--                            Input:   Robert&apos;); DROP TABLE students; --\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Robert&apos;); DROP TABLE students; --&apos;);\nINSERT 0 1\nDROP TABLE\n&lt;/pre&gt;\n&lt;p&gt;The SQL injection here is the result of the name of the student terminating the statement and including a separate &lt;code&gt;DROP TABLE&lt;/code&gt; command; the two dashes at the end of the input are intended to comment out any leftover code that would otherwise cause an error. The last line of the output confirms that the database server has dropped the table.&lt;/p&gt;\n&lt;p&gt;It&apos;s important to notice that during the &lt;code&gt;INSERT&lt;/code&gt; operation the application isn&apos;t checking the input for any special characters, and is therefore allowing arbitrary input to be entered into the SQL command. This means that a malicious user can insert, into a field normally intended for user input, special symbols such as quotes along with arbitrary SQL code to cause the database system to execute it, hence &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL&amp;nbsp;&lt;em&gt;injection&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The result?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;school=&amp;gt; SELECT * FROM students;\nERROR:  relation &quot;students&quot; does not exist\nLINE 1: SELECT * FROM students;\n                      ^\n&lt;/pre&gt;\n&lt;p&gt;SQL injection is the database equivalent of a remote &lt;a href=&quot;http://en.wikipedia.org/wiki/Arbitrary_code_execution&quot; rel=&quot;nofollow noreferrer&quot;&gt;arbitrary code execution&lt;/a&gt; vulnerability in an operating system or application.  The potential impact of a successful SQL injection attack cannot be underestimated--depending on the database system and application configuration, it can be used by an attacker to cause data loss (as in this case), gain unauthorized access to data, or even execute arbitrary code on the host machine itself.&lt;/p&gt;\n&lt;p&gt;As noted by the XKCD comic, one way of protecting against SQL injection attacks is to sanitize database inputs, such as by escaping special characters, so that they cannot modify the underlying SQL command and therefore cannot cause execution of arbitrary SQL code. This can be done at the application level, and some implementations of parameterized queries operate by sanitizing input.&lt;/p&gt;\n&lt;p&gt;However, sanitizing inputs at the application level may not stop more advanced SQL injection techniques. For example, &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;there are ways to circumvent the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; PHP function&lt;/a&gt;. For added protection, many database systems support &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt;. If properly implemented in the backend, prepared statements can make SQL injection impossible by treating data inputs as semantically separate from the rest of the command.&lt;/p&gt;\n    ","\n&lt;p&gt;Say you naively wrote a student creation method like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;void createStudent(String name) {\n    database.execute(&quot;INSERT INTO students (name) VALUES (&apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;)&quot;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And someone enters the name &lt;code&gt;Robert&apos;); DROP TABLE STUDENTS; --&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;What gets run on the database is this query:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; students (name) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The semicolon ends the insert command and starts another; the -- comments out the rest of the line. The DROP TABLE command is executed...&lt;/p&gt;\n\n&lt;p&gt;This is why bind parameters are a good thing.&lt;/p&gt;\n    ","\n&lt;p&gt;A single quote is the start and end of a string. A semicolon is the end of a statement. So if they were doing a select like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; Students\n&lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt; (Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;NameGetsInsertedHere&amp;gt;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The SQL would become:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; Students\n&lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt; (Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--             ^-------------------------------^&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On some systems, the &lt;code&gt;select&lt;/code&gt; would get ran first followed by the &lt;code&gt;drop&lt;/code&gt; statement! The message is: DONT EMBED VALUES INTO YOUR SQL. Instead use parameters!&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;&apos;);&lt;/code&gt; ends the query, it doesn&apos;t start a comment. Then it drops the students table and comments the rest of the query that was supposed to be executed.&lt;/p&gt;\n    ","\n&lt;p&gt;In this case, &lt;code&gt;&apos;&lt;/code&gt; is not a comment character.  It&apos;s used to delimit string literals.  The comic artist is banking on the idea that the school in question has dynamic sql somewhere that looks something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `Students` (FirstName, LastName) VALUES (&apos;&quot; . $fname . &quot;&apos;, &apos;&quot; . $lname . &quot;&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So now the &lt;code&gt;&apos;&lt;/code&gt; character ends the string literal before the programmer was expecting it.  Combined with the &lt;code&gt;;&lt;/code&gt; character to end the statement, an attacker can now add (inject) whatever sql they want.  The &lt;code&gt;--&lt;/code&gt; comment at the end is to make sure any remaining sql in the original statement does not prevent the query from compiling on the server.&lt;/p&gt;\n&lt;p&gt;FWIW, I also think the comic in question has an important detail wrong: if you &lt;em&gt;&lt;strong&gt;sanitize&lt;/strong&gt;&lt;/em&gt; your database inputs, as the comic suggests, you&apos;re still doing it wrong. Instead, you should think in terms of &lt;em&gt;&lt;strong&gt;quarantining&lt;/strong&gt;&lt;/em&gt; your database inputs, and the correct way to do this is via parameterized queries/prepared statements.&lt;/p&gt;\n    ","\n&lt;p&gt;The writer of the database probably did a &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM STUDENTS WHERE (STUDENT_NAME = &apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; student_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;) AND other stuff&quot;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If student_name is the one given, that does the selection with the name &quot;Robert&quot; and then drops the table.  The &quot;-- &quot; part changes the rest of the given query into a comment.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;&apos;&lt;/code&gt; character in SQL is used  for string constants. In this case it is used for ending the string constant and not for comment.&lt;/p&gt;\n    ","\n&lt;p&gt;This is how it works:\nLets suppose the administrator is looking for records of student  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;Robert&lt;span class=&quot;hljs-string&quot;&gt;&apos;); DROP TABLE STUDENTS; --\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the admin account has high privileges deleting the table from this account is possible.&lt;/p&gt;\n\n&lt;p&gt;The code to retrieve user name from request is&lt;/p&gt;\n\n&lt;p&gt;Now the query would be something like this (to search the student table)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;String query&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;Select * from student where username=&apos;&quot;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;student_name&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&quot;&apos;&quot;;\n\nstatement.executeQuery(query); &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Rest &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the code follows\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The resultant query becomes&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the user input is not sanitized, The above query has is manipulated into 2 parts&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The double dash (--) will just comment out remaining part of the query. &lt;/p&gt;\n\n&lt;p&gt;This is dangerous as it can nullify password authentication, if present&lt;/p&gt;\n\n&lt;p&gt;The first one will do the normal search. &lt;/p&gt;\n\n&lt;p&gt;The second one will drop the table student if the account has sufficient privileges (Generally the school admin account will run such query and will have the privileges talked about above).&lt;/p&gt;\n    ","\n&lt;h1&gt;You don&apos;t need to input form data to make SQL injection. &lt;/h1&gt;\n\n&lt;p&gt;No one pointed this out before so through I might alert some of you. &lt;/p&gt;\n\n&lt;p&gt;Mostly we will try to patch forms input. But this is not the only place where you can get attacked with SQL injection. You can do very simple attack with URL which send data through GET request;\nConsider the fallowing example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;/show?id=1&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt; something&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your url would look \n&lt;a href=&quot;http://yoursite.com/show?id=1&quot; rel=&quot;noreferrer&quot;&gt;http://yoursite.com/show?id=1&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now someone could try something like this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;http:&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;yoursite.com&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt;?id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;TRUNCATE&lt;/span&gt; table_name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try to replace table_name with the real table name. If he get your table name right they would empty your table! &lt;strong&gt;(It is very easy to brut force this URL with simple script)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Your query would look something like this...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&quot;SELECT * FROM page WHERE id = 4;TRUNCATE page&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Example of PHP vulnerable code using PDO:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;?php\n...\n$id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n\n$pdo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PDO($database_dsn, $database_user, $database_pass);\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM page WHERE id = {$id}&quot;;\n$stmt &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $pdo&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;query($query);\n$data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt;(); \n&lt;span class=&quot;hljs-comment&quot;&gt;/************* You have lost your data!!! :( *************/&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Solution - use PDO prepare() &amp;amp; bindParam() methods:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;?php\n...\n$id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM page WHERE id = :idVal&apos;&lt;/span&gt;;\n$stmt &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $pdo&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prepare&lt;/span&gt;($query);\n$stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;bindParam(&lt;span class=&quot;hljs-string&quot;&gt;&apos;idVal&apos;&lt;/span&gt;, $id, PDO::PARAM_INT);\n$stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt;();\n$data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;/************* Your data is safe! :) *************/&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":104,"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","content":"\n                \n&lt;p&gt;Just looking at:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/G0ifh.png&quot; alt=&quot;XKCD Strip&quot; title=&quot;Her daughter is named Help I&apos;m trapped in a driver&apos;s license factory.&quot;&gt;\n&lt;em&gt;(Source: &lt;a href=&quot;https://xkcd.com/327/&quot; rel=&quot;noreferrer&quot;&gt;https://xkcd.com/327/&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;What does this SQL do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;Robert&lt;span class=&quot;hljs-string&quot;&gt;&apos;); DROP TABLE STUDENTS; --\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know both &lt;code&gt;&apos;&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; are for comments, but doesn&apos;t the word &lt;code&gt;DROP&lt;/code&gt; get commented as well since it is part of the same line?&lt;/p&gt;\n    ","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653","postType":"QUESTION","createdAt":"2022-07-09T16:37:01.000Z","updatedAt":"2022-07-09T16:37:01.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"Preview an image before it is uploaded","slug":"preview-an-image-before-it-is-uploaded-1657388048128"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"How can I change an element's class with JavaScript?","slug":"how-can-i-change-an-element's-class-with-javascript-1657387694695"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"Why can templates only be implemented in the header file?","slug":"why-can-templates-only-be-implemented-in-the-header-file-1657384341933"},{"title":"What is the best way to detect a mobile device?","slug":"what-is-the-best-way-to-detect-a-mobile-device-1657387665025"},{"title":"How do I properly clean up Excel interop objects?","slug":"how-do-i-properly-clean-up-excel-interop-objects-1657388329706"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"Variables are not behaving as expected","slug":"variables-are-not-behaving-as-expected-1657384865672"},{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064"},{"title":"What is a debugger and how can it help me diagnose problems?","slug":"what-is-a-debugger-and-how-can-it-help-me-diagnose-problems-1657384472469"},{"title":"Sort (order) data frame rows by multiple columns","slug":"sort-(order)-data-frame-rows-by-multiple-columns-1657388355671"},{"title":"How can I combine two strings together in PHP?","slug":"how-can-i-combine-two-strings-together-in-php-1657388279401"},{"title":"XMLHttpRequest cannot load XXX No 'Access-Control-Allow-Origin' header","slug":"xmlhttprequest-cannot-load-xxx-no-'access-control-allow-origin'-header-1657384758362"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873"},{"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093"}]},"__N_SSG":true}