{"pageProps":{"data":{"answer":["\n&lt;h2&gt;Background: Whats an Optional?&lt;/h2&gt;\n&lt;p&gt;In Swift, &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Optional&amp;lt;Wrapped&amp;gt;&lt;/code&gt;&lt;/a&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Option_type&quot; rel=&quot;noreferrer&quot;&gt;option type&lt;/a&gt;: it can contain any value from the original (&quot;Wrapped&quot;) type, or no value at all (the special value &lt;code&gt;nil&lt;/code&gt;). An optional value must be &lt;strong&gt;unwrapped&lt;/strong&gt; before it can be used.&lt;/p&gt;\n&lt;p&gt;Optional is a &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html&quot; rel=&quot;noreferrer&quot;&gt;generic type&lt;/a&gt;, which means that &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt; are distinct types  the type inside &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is called the Wrapped type. Under the hood, an Optional is an &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html&quot; rel=&quot;noreferrer&quot;&gt;enum&lt;/a&gt; with two cases: &lt;code&gt;.some(Wrapped)&lt;/code&gt; and &lt;code&gt;.none&lt;/code&gt;, where &lt;code&gt;.none&lt;/code&gt; is equivalent to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Optionals can be declared using the named type &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;, or (most commonly) as a shorthand with a &lt;code&gt;?&lt;/code&gt; suffix.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anInt: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalInt: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anotherOptionalInt: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?  &lt;span class=&quot;hljs-comment&quot;&gt;// `nil` is the default when no value is provided&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aVerboseOptionalInt: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;&amp;gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// equivalent to `Int?`&lt;/span&gt;\n\nanOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// now this variable contains nil instead of an integer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Optionals are a simple yet powerful tool to express your assumptions while writing code. The compiler can use this information to prevent you from making mistakes. From &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html&quot; rel=&quot;noreferrer&quot;&gt;The Swift Programming Language&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Swift is a &lt;em&gt;type-safe&lt;/em&gt; language, which means the language helps you to be clear about the types of values your code can work with. If part of your code requires a &lt;code&gt;String&lt;/code&gt;, type safety prevents you from passing it an &lt;code&gt;Int&lt;/code&gt; by mistake. &lt;strong&gt;Likewise, type safety prevents you from accidentally passing an optional &lt;code&gt;String&lt;/code&gt; to a piece of code that requires a non-optional &lt;code&gt;String&lt;/code&gt;.&lt;/strong&gt; Type safety helps you catch and fix errors as early as possible in the development process.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Some other programming languages also have generic &lt;a href=&quot;https://en.wikipedia.org/wiki/Option_type&quot; rel=&quot;noreferrer&quot;&gt;option types&lt;/a&gt;: for example, &lt;a href=&quot;https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Maybe.html&quot; rel=&quot;noreferrer&quot;&gt;Maybe&lt;/a&gt; in Haskell, &lt;a href=&quot;https://doc.rust-lang.org/std/option/&quot; rel=&quot;noreferrer&quot;&gt;option&lt;/a&gt; in Rust, and &lt;a href=&quot;https://en.cppreference.com/w/cpp/utility/optional&quot; rel=&quot;noreferrer&quot;&gt;optional&lt;/a&gt; in C++17.&lt;/p&gt;\n&lt;p&gt;In programming languages &lt;em&gt;without&lt;/em&gt; option types, a particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Sentinel_value&quot; rel=&quot;noreferrer&quot;&gt;&quot;sentinel&quot; value&lt;/a&gt; is often used to indicate the absence of a valid value. In Objective-C, for example, &lt;code&gt;nil&lt;/code&gt; (the &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_pointer&quot; rel=&quot;noreferrer&quot;&gt;null pointer&lt;/a&gt;) represents the lack of an object. For primitive types such as &lt;code&gt;int&lt;/code&gt;, a null pointer can&apos;t be used, so you would need either a separate variable (such as &lt;code&gt;value: Int&lt;/code&gt; and &lt;code&gt;isValid: Bool&lt;/code&gt;) or a designated sentinel value (such as &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt;). These approaches are error-prone because it&apos;s easy to forget to check &lt;code&gt;isValid&lt;/code&gt; or to check for the sentinel value. Also, if a particular value is chosen as the sentinel, that means it can no longer be treated as a &lt;em&gt;valid&lt;/em&gt; value.&lt;/p&gt;\n&lt;p&gt;Option types such as Swift&apos;s &lt;code&gt;Optional&lt;/code&gt; solve these problems by introducing a special, separate &lt;code&gt;nil&lt;/code&gt; value (so you don&apos;t have to designate a sentinel value), and by leveraging the strong type system so the compiler can help you remember to check for nil when necessary.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Why did I get &lt;em&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value&lt;/em&gt;?&lt;/h2&gt;\n&lt;p&gt;In order to access an optionals value (if it has one at all), you need to &lt;strong&gt;unwrap&lt;/strong&gt; it. An optional value can be unwrapped safely or forcibly. If you force-unwrap an optional, and it &lt;em&gt;didn&apos;t&lt;/em&gt; have a value, your program will crash with the above message.&lt;/p&gt;\n&lt;p&gt;Xcode will show you the crash by highlighting a line of code. The problem occurs on this line.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/dQelz.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/dQelz.png&quot; alt=&quot;crashed line&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This crash can occur with two different kinds of force-unwrap:&lt;/p&gt;\n&lt;h3&gt;1. Explicit Force Unwrapping&lt;/h3&gt;\n&lt;p&gt;This is done with the &lt;code&gt;!&lt;/code&gt; operator on an optional. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; anOptionalString: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(anOptionalString&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- CRASH&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As &lt;code&gt;anOptionalString&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; here, you will get a crash on the line where you force unwrap it.&lt;/p&gt;\n&lt;h3&gt;2. Implicitly Unwrapped Optionals&lt;/h3&gt;\n&lt;p&gt;These are defined with  a &lt;code&gt;!&lt;/code&gt;, rather than a &lt;code&gt;?&lt;/code&gt; after the type.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; optionalDouble: &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;!   &lt;span class=&quot;hljs-comment&quot;&gt;// this value is implicitly unwrapped wherever it&apos;s used&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These optionals are assumed to contain a value. Therefore whenever you access an implicitly unwrapped optional, it will automatically be force unwrapped for you. If it doesnt contain a value, it will crash.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(optionalDouble) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- CRASH&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Fatal error: Unexpectedly found nil while &lt;strong&gt;implicitly&lt;/strong&gt; unwrapping an Optional value&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In order to work out which variable caused the crash, you can hold &lt;kbd&gt;&lt;/kbd&gt; while clicking to show the definition, where you might find the optional type.&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/zZmlK.gif&quot; width=&quot;300&quot;&gt;\n&lt;p&gt;IBOutlets, in particular, are usually implicitly unwrapped optionals. This is because your xib or storyboard will link up the outlets at runtime, &lt;em&gt;after&lt;/em&gt; initialization. You should therefore ensure that youre not accessing outlets before they&apos;re loaded in. You also should check that the connections are correct in your storyboard/xib file, otherwise the values will be &lt;code&gt;nil&lt;/code&gt; at runtime, and therefore crash when they are implicitly unwrapped. When fixing connections, try deleting the lines of code that define your outlets, then reconnect them.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;When should I ever force unwrap an Optional?&lt;/h2&gt;\n&lt;h3&gt;Explicit Force Unwrapping&lt;/h3&gt;\n&lt;p&gt;As a general rule, you should never explicitly force unwrap an optional with the &lt;code&gt;!&lt;/code&gt; operator. There may be cases where using &lt;code&gt;!&lt;/code&gt; is acceptable  but you should only ever be using it if you are 100% sure that the optional contains a value.&lt;/p&gt;\n&lt;p&gt;While there &lt;em&gt;may&lt;/em&gt; be an occasion where you can use force unwrapping, as you know for a &lt;em&gt;fact&lt;/em&gt; that an optional contains a value  there is not a &lt;em&gt;single&lt;/em&gt; place where you cannot safely unwrap that optional instead.&lt;/p&gt;\n&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;h3&gt;Implicitly Unwrapped Optionals&lt;/h3&gt;\n&lt;p&gt;These variables are designed so that you can defer their assignment until later in your code. It is &lt;em&gt;your&lt;/em&gt; responsibility to ensure they have a value before you access them. However, because they involve force unwrapping, they are still inherently unsafe  as they &lt;em&gt;assume&lt;/em&gt; your value is non-nil, even though assigning nil is valid.&lt;/p&gt;\n&lt;p&gt;You should only be using implicitly unwrapped optionals as a &lt;em&gt;last resort&lt;/em&gt;. If you can use a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID255&quot; rel=&quot;noreferrer&quot;&gt;lazy variable&lt;/a&gt;, or provide a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID206&quot; rel=&quot;noreferrer&quot;&gt;default value&lt;/a&gt; for a variable  you should do so instead of using an implicitly unwrapped optional.&lt;/p&gt;\n&lt;p&gt;However, there are a &lt;a href=&quot;https://stackoverflow.com/a/24583157/2976878&quot;&gt;few scenarios where implicitly unwrapped optionals are beneficial&lt;/a&gt;, and you are still able to use various ways of safely unwrapping them as listed below  but you should &lt;em&gt;always&lt;/em&gt; use them with due caution.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;How can I safely deal with Optionals?&lt;/h2&gt;\n&lt;p&gt;The simplest way to check whether an optional contains a value, is to compare it to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Contains a value!&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Doesnt contain a value.&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, 99.9% of the time when working with optionals, youll actually want to access the value it contains, if it contains one at all. To do this, you can use &lt;em&gt;Optional Binding&lt;/em&gt;.&lt;/p&gt;\n&lt;h3&gt;Optional Binding&lt;/h3&gt;\n&lt;p&gt;Optional Binding allows you to check if an optional contains a value  and allows you to assign the unwrapped value to a new variable or constant. It uses the syntax &lt;code&gt;if let x = anOptional {...}&lt;/code&gt; or &lt;code&gt;if var x = anOptional {...}&lt;/code&gt;, depending if you need to modify the value of the new variable after binding it.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Contains a value! It is &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;!&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Doesnt contain a number&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What this does is first check that the optional contains a value. If it &lt;em&gt;does&lt;/em&gt;, then the unwrapped value is assigned to  a new variable (&lt;code&gt;number&lt;/code&gt;)  which you can then freely use as if it were non-optional. If the optional &lt;em&gt;doesnt&lt;/em&gt; contain a value, then the else clause will be invoked, as you would expect.&lt;/p&gt;\n&lt;p&gt;Whats neat about optional binding, is you can unwrap multiple optionals at the same time. You can just separate the statements with a comma. The statement will succeed if all the optionals were unwrapped.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalInt : &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalString : &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt, &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalString {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;anOptionalInt contains a value: &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;. And so does anOptionalString, its: &lt;span class=&quot;hljs-subst&quot;&gt;\\(text)&lt;/span&gt;&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One or more of the optionals dont contain a value&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Another neat trick is that you can also use commas to check for a certain condition on the value, after unwrapping it.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt, number &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;anOptionalInt contains a value: &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;, and its greater than zero!&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The only catch with using optional binding within an if statement, is that you can only access the unwrapped value from within the scope of the statement. If you need access to the value from outside of the scope of the statement, you can use a &lt;em&gt;guard statement&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;A &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/if-statement&quot; rel=&quot;noreferrer&quot;&gt;guard statement&lt;/a&gt; allows you to define a condition for success  and the current scope will only continue executing if that condition is met. They are defined with the syntax &lt;code&gt;guard condition else {...}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So, to use them with an optional binding, you can do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;(Note that within the guard body, you &lt;strong&gt;must&lt;/strong&gt; use one of the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID135&quot; rel=&quot;noreferrer&quot;&gt;control transfer statements&lt;/a&gt; in order to exit the scope of the currently executing code).&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;anOptionalInt&lt;/code&gt; contains a value, it will be unwrapped and assigned to the new &lt;code&gt;number&lt;/code&gt; constant. The code &lt;em&gt;after&lt;/em&gt; the guard will then continue executing. If it doesnt contain a value  the guard will execute the code within the brackets, which will lead to transfer of control, so that the code immediately after will not be executed.&lt;/p&gt;\n&lt;p&gt;The real neat thing about guard statements is the unwrapped value is now available to use in code that follows the statement (as we know that future code can &lt;em&gt;only&lt;/em&gt; execute if the optional has a value). This is a great for eliminating &lt;a href=&quot;https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)&quot; rel=&quot;noreferrer&quot;&gt;pyramids of doom&lt;/a&gt; created by nesting multiple if statements.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;anOptionalInt contains a value, and its: &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;!&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Guards also support the same neat tricks that the if statement supported, such as unwrapping multiple optionals at the same time and using the &lt;code&gt;where&lt;/code&gt; clause.&lt;/p&gt;\n&lt;p&gt;Whether you use an if or guard statement completely depends on whether any future code &lt;em&gt;requires&lt;/em&gt; the optional to contain a value.&lt;/p&gt;\n&lt;h3&gt;Nil Coalescing Operator&lt;/h3&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID72&quot; rel=&quot;noreferrer&quot;&gt;Nil Coalescing Operator&lt;/a&gt; is a nifty shorthand version of the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID71&quot; rel=&quot;noreferrer&quot;&gt;ternary conditional operator&lt;/a&gt;, primarily designed to convert optionals to non-optionals. It has the syntax &lt;code&gt;a ?? b&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; is an optional type and &lt;code&gt;b&lt;/code&gt; is the same type as &lt;code&gt;a&lt;/code&gt; (although usually non-optional).&lt;/p&gt;\n&lt;p&gt;It essentially lets you say If &lt;code&gt;a&lt;/code&gt; contains a value, unwrap it. If it doesnt then return &lt;code&gt;b&lt;/code&gt; instead. For example, you could use it like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will define a &lt;code&gt;number&lt;/code&gt; constant of &lt;code&gt;Int&lt;/code&gt; type, that will either contain the value of &lt;code&gt;anOptionalInt&lt;/code&gt;, if it contains a value, or &lt;code&gt;0&lt;/code&gt; otherwise.&lt;/p&gt;\n&lt;p&gt;Its just shorthand for:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt; anOptionalInt&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Optional Chaining&lt;/h3&gt;\n&lt;p&gt;You can use &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245&quot; rel=&quot;noreferrer&quot;&gt;Optional Chaining&lt;/a&gt; in order to call a method or access a property on an optional. This is simply done by suffixing the variable name with a &lt;code&gt;?&lt;/code&gt; when using it.&lt;/p&gt;\n&lt;p&gt;For example, say we have a variable &lt;code&gt;foo&lt;/code&gt;, of type an optional &lt;code&gt;Foo&lt;/code&gt; instance.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo : &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt;?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we wanted to call a method on &lt;code&gt;foo&lt;/code&gt; that doesnt return anything, we can simply do:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.doSomethingInteresting()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;foo&lt;/code&gt; contains a value, this method will be called on it. If it doesnt, nothing bad will happen  the code will simply continue executing.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;(This is similar behaviour to sending messages to &lt;code&gt;nil&lt;/code&gt; in Objective-C)&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;This can therefore also be used to set properties as well as call methods. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.bar &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bar&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, nothing bad will happen here if &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. Your code will simply continue executing.&lt;/p&gt;\n&lt;p&gt;Another neat trick that optional chaining lets you do is check whether setting a property or calling a method was successful. You can do this by comparing the return value to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;(This is because an optional value will return &lt;code&gt;Void?&lt;/code&gt; rather than &lt;code&gt;Void&lt;/code&gt; on a method that doesnt return anything)&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.bar &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bar&lt;/span&gt;()) &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar was set successfully&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar wasnt set successfully&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, things become a little bit more tricky when trying to access properties or call methods that return a value. Because &lt;code&gt;foo&lt;/code&gt; is optional, anything returned from it will also be optional. To deal with this, you can either unwrap the optionals that get returned using one of the above methods  or unwrap &lt;code&gt;foo&lt;/code&gt; itself before accessing methods or calling methods that return values.&lt;/p&gt;\n&lt;p&gt;Also, as the name suggests, you can chain these statements together. This means that if &lt;code&gt;foo&lt;/code&gt; has an optional property &lt;code&gt;baz&lt;/code&gt;, which has a property &lt;code&gt;qux&lt;/code&gt;  you could write the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; optionalQux &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.baz&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.qux\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, because &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; are optional, the value returned from &lt;code&gt;qux&lt;/code&gt; will always be an optional regardless of whether &lt;code&gt;qux&lt;/code&gt; itself is optional.&lt;/p&gt;\n&lt;h3&gt;&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;An often underused feature with optionals is the ability to use the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; functions. These allow you to apply non-optional transforms to optional variables. If an optional has a value, you can apply a given transformation to it. If it doesnt have a value, it will remain &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For example, lets say you have an optional string:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; anOptionalString:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;By applying the &lt;code&gt;map&lt;/code&gt; function to it  we can use the &lt;code&gt;stringByAppendingString&lt;/code&gt; function in order to concatenate it to another string.&lt;/p&gt;\n&lt;p&gt;Because &lt;code&gt;stringByAppendingString&lt;/code&gt; takes a non-optional string argument, we cannot input our optional string directly. However, by using &lt;code&gt;map&lt;/code&gt;, we can use allow &lt;code&gt;stringByAppendingString&lt;/code&gt; to be used if &lt;code&gt;anOptionalString&lt;/code&gt; has a value.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalString:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n\nanOptionalString &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalString.map {unwrappedString &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;.stringByAppendingString(unwrappedString)\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(anOptionalString) &lt;span class=&quot;hljs-comment&quot;&gt;// Optional(&quot;foobar&quot;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, if &lt;code&gt;anOptionalString&lt;/code&gt; doesnt have a value, &lt;code&gt;map&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt;. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalString:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n\nanOptionalString &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalString.map {unwrappedString &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;.stringByAppendingString(unwrappedString)\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(anOptionalString) &lt;span class=&quot;hljs-comment&quot;&gt;// nil&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;flatMap&lt;/code&gt; works similarly to &lt;code&gt;map&lt;/code&gt;, except it allows you to return &lt;em&gt;another&lt;/em&gt; optional from within the closure body. This means you can input an optional into a process that requires a non-optional input, but can output an optional itself.&lt;/p&gt;\n&lt;h2&gt;&lt;code&gt;try!&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;Swift&apos;s error handling system can be safely used with &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508&quot; rel=&quot;noreferrer&quot;&gt;Do-Try-Catch&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; someThrowingFunc() \n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;someThrowingFunc()&lt;/code&gt; throws an error, the error will be safely caught in the &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; constant you see in the &lt;code&gt;catch&lt;/code&gt; block has not been declared by us - it&apos;s automatically generated by &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You can also declare &lt;code&gt;error&lt;/code&gt; yourself, it has the advantage of being able to cast it to a useful format, for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; someThrowingFunc()    \n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error.debugDescription)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;try&lt;/code&gt; this way is the proper way to try, catch and handle errors coming from throwing functions.&lt;/p&gt;\n&lt;p&gt;There&apos;s also &lt;code&gt;try?&lt;/code&gt; which absorbs the error:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; someThrowingFunc() {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cool&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// handle the failure, but there&apos;s no error information available&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But Swift&apos;s error handling system also provides a way to &quot;force try&quot; with &lt;code&gt;try!&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try!&lt;/span&gt; someThrowingFunc()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The concepts explained in this post also apply here: if an error is thrown, the application will crash.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;You should only ever use &lt;code&gt;try!&lt;/code&gt; if you can prove that its result will never fail in your context - and this is very rare.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Most of the time you will use the complete Do-Try-Catch system - and the optional one, &lt;code&gt;try?&lt;/code&gt;, in the rare cases where handling the error is not important.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Resources&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330&quot; rel=&quot;noreferrer&quot;&gt;Apple documentation on Swift Optionals&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/24583157/2976878&quot;&gt;When to use and when not to use implicitly unwrapped optionals&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/10209/my-app-crashed-now-what-part-1&quot; rel=&quot;noreferrer&quot;&gt;Learn how to debug an iOS app crash&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;TL;DR answer&lt;/h1&gt;\n&lt;p&gt;With &lt;a href=&quot;https://stackoverflow.com/a/24583157/1311272&quot;&gt;very few exceptions&lt;/a&gt;, this rule is golden:&lt;/p&gt;\n&lt;h1&gt;Avoid use of &lt;code&gt;!&lt;/code&gt;&lt;/h1&gt;\n&lt;h3&gt;Declare variable optional (&lt;code&gt;?&lt;/code&gt;), not implicitly unwrapped optionals (IUO) (&lt;code&gt;!&lt;/code&gt;)&lt;/h3&gt;\n&lt;p&gt;In other words, rather use:&lt;br&gt;\n&lt;code&gt;var nameOfDaughter: String?&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Instead of:&lt;br&gt;\n&lt;code&gt;var nameOfDaughter: String!&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;Unwrap optional variable using &lt;code&gt;if let&lt;/code&gt; or &lt;code&gt;guard let&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;Either unwrap variable like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nameOfDaughter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; nameOfDaughter {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My daughters name is: &lt;span class=&quot;hljs-subst&quot;&gt;\\(nameOfDaughter)&lt;/span&gt;&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nameOfDaughter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; nameOfDaughter &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My daughters name is: &lt;span class=&quot;hljs-subst&quot;&gt;\\(nameOfDaughter)&lt;/span&gt;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This answer was intended to be concise, &lt;a href=&quot;https://stackoverflow.com/a/32170457/1311272&quot;&gt;for full comprehension read accepted answer&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Resources&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.timac.org/2017/0628-swift-banning-force-unwrapping-optionals/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Avoiding force unwrapping&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This question comes up &lt;strong&gt;ALL THE TIME&lt;/strong&gt; on SO. It&apos;s one of the first things that new Swift developers struggle with.&lt;/p&gt;\n&lt;h2&gt;Background:&lt;/h2&gt;\n&lt;p&gt;Swift uses the concept of &quot;Optionals&quot; to deal with values that could contain a value, or not. In other languages like C, you might store a value of 0 in a variable to indicate that it contains no value. However, what if 0 is a valid value? Then you might use -1. What if -1 is a valid value? And so on.&lt;/p&gt;\n&lt;p&gt;Swift optionals let you set up a variable of any type to contain either a valid value, or no value.&lt;/p&gt;\n&lt;p&gt;You put a question mark after the type when you declare a variable to mean (type x, or no value).&lt;/p&gt;\n&lt;p&gt;An optional is actually a container than contains either a variable of a given type, or nothing.&lt;/p&gt;\n&lt;p&gt;An optional needs to be &quot;unwrapped&quot; in order to fetch the value inside.&lt;/p&gt;\n&lt;p&gt;The &quot;!&quot; operator is a &quot;force unwrap&quot; operator. It says &quot;trust me. I know what I am doing. I guarantee that when this code runs, the variable will not contain nil.&quot; If you are wrong, you crash.&lt;/p&gt;\n&lt;p&gt;Unless you really &lt;strong&gt;do&lt;/strong&gt; know what you are doing, avoid the &quot;!&quot; force unwrap operator. It is probably the largest source of crashes for beginning Swift programmers.&lt;/p&gt;\n&lt;h2&gt;How to deal with optionals:&lt;/h2&gt;\n&lt;p&gt;There are lots of other ways of dealing with optionals that are safer. Here are some (not an exhaustive list)&lt;/p&gt;\n&lt;p&gt;You can use &quot;optional binding&quot; or &quot;if let&quot; to say &quot;if this optional contains a value, save that value into a new, non-optional variable. If the optional does not contain a value, skip the body of this if statement&quot;.&lt;/p&gt;\n&lt;p&gt;Here is an example of optional binding with our &lt;code&gt;foo&lt;/code&gt; optional:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo &lt;span class=&quot;hljs-comment&quot;&gt;//If let is called optional binding. {&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo is not nil&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo is nil&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the variable you define when you use optional biding only exists (is only &quot;in scope&quot;) in the body of the if statement.&lt;/p&gt;\n&lt;p&gt;Alternately, you could use a guard statement, which lets you exit your function if the variable is nil:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;aFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; input &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n  &lt;span class=&quot;hljs-comment&quot;&gt;//For the rest of the function newFoo is a non-optional var&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Guard statements were added in Swift 2. Guard lets you preserve the &quot;golden path&quot; through your code, and avoid ever-increasing levels of nested ifs that sometimes result from using &quot;if let&quot; optional binding.&lt;/p&gt;\n&lt;p&gt;There is also a construct called the &quot;nil coalescing operator&quot;. It takes the form &quot;optional_var ?? replacement_val&quot;. It returns a non-optional variable with the same type as the data contained in the optional. If the optional contains nil, it returns the value of the expression after the &quot;??&quot; symbol.&lt;/p&gt;\n&lt;p&gt;So you could use code like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;nil&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;??&quot; is the nil coalescing operator&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo = &lt;span class=&quot;hljs-subst&quot;&gt;\\(newFoo)&lt;/span&gt;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You could also use try/catch or guard error handling, but generally one of the other techniques above is cleaner.&lt;/p&gt;\n&lt;h2&gt;EDIT:&lt;/h2&gt;\n&lt;p&gt;Another, slightly more subtle gotcha with optionals is &quot;implicitly unwrapped optionals. When we declare foo, we could say:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In that case foo is still an optional, but you don&apos;t have to unwrap it to reference it.  That means any time you try to reference foo, you crash if it&apos;s nil.&lt;/p&gt;\n&lt;p&gt;So this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;!\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; upperFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.capitalizedString\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will crash on reference to foo&apos;s capitalizedString property even though we&apos;re not force-unwrapping foo. the print looks fine, but it&apos;s not.&lt;/p&gt;\n&lt;p&gt;Thus you want to be really careful with implicitly unwrapped optionals.  (and perhaps even avoid them completely until you have a solid understanding of optionals.)&lt;/p&gt;\n&lt;p&gt;Bottom line: When you are first learning Swift, pretend the &quot;!&quot; character is not part of the language. It&apos;s likely to get you into trouble.&lt;/p&gt;\n    ","\n&lt;p&gt;Since the above answers clearly explains how to play safely with Optionals.\nI will try explain what Optionals are really in swift.&lt;/p&gt;\n\n&lt;p&gt;Another way to declare an optional variable is &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var i : Optional&amp;lt;Int&amp;gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;And Optional type is nothing but an enumeration with two cases, i.e &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Optional&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Wrapped&lt;/span&gt;&amp;gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;ExpressibleByNilLiteral&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; none \n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Wrapped&lt;/span&gt;)\n    .\n    .\n    .\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So to assign a nil to our variable &apos;i&apos;. We can do \n&lt;code&gt;var i = Optional&amp;lt;Int&amp;gt;.none&lt;/code&gt;\nor to assign a value, we will pass some value \n&lt;code&gt;var i = Optional&amp;lt;Int&amp;gt;.some(28)&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;According to swift, &apos;nil&apos; is the absence of value.\nAnd to create an instance initialized with &lt;code&gt;nil&lt;/code&gt; We have to conform to a protocol called &lt;code&gt;ExpressibleByNilLiteral&lt;/code&gt; and great if you guessed it, only &lt;code&gt;Optionals&lt;/code&gt; conform to &lt;code&gt;ExpressibleByNilLiteral&lt;/code&gt; and conforming to other types is discouraged.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ExpressibleByNilLiteral&lt;/code&gt; has a single method called &lt;code&gt;init(nilLiteral:)&lt;/code&gt; which initializes an instace with nil. You usually wont call this method and according to swift documentation it is discouraged to call this initializer directly as the compiler calls it whenever you initialize an Optional type with &lt;code&gt;nil&lt;/code&gt; literal.&lt;/p&gt;\n\n&lt;p&gt;Even myself has to wrap (no pun intended) my head around Optionals :D\n&lt;em&gt;Happy Swfting All&lt;/em&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;First, you should know what an Optional value is.\nYou can step to &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Swift Programming Language&lt;/a&gt; for detail.&lt;/p&gt;\n\n&lt;p&gt;Second, you should know the optional value has two statuses. One is the full value, and the other is a nil value. So before you implement an optional value, you should check which state it is.&lt;/p&gt;\n\n&lt;p&gt;You can use &lt;code&gt;if let ...&lt;/code&gt; or &lt;code&gt;guard let ... else&lt;/code&gt; and so on.&lt;/p&gt;\n\n&lt;p&gt;One other way, if you don&apos;t want to check the variable state before your implementation, you can also use &lt;code&gt;var buildingName = buildingName ?? &quot;buildingName&quot;&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;I had this error once when I was trying to set my Outlets values from the prepare for segue method as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;segue&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIStoryboardSegue&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; destination &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; segue.destination &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DestinationVC&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sender &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataItem&lt;/span&gt;{\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This line pops up the error&lt;/span&gt;\n            destination.nameLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; item.name\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I found out that I can&apos;t set the values of the destination controller outlets because the controller hasn&apos;t been loaded or initialized yet.&lt;/p&gt;\n\n&lt;p&gt;So I solved it this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;segue&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIStoryboardSegue&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; destination &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; segue.destination &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DestinationVC&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sender &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataItem&lt;/span&gt;{\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Created this method in the destination Controller to update its outlets after it&apos;s being initialized and loaded&lt;/span&gt;\n            destination.updateView(itemData:  item)\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Destination Controller:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// This variable to hold the data received to update the Label text after the VIEW DID LOAD&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Outlets&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nameLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do any additional setup after loading the view.&lt;/span&gt;\n    nameLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; name\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;itemDate&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;ObjectModel&lt;/span&gt;) {\n    name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; itemDate.name\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I hope this answer helps anyone out there with the same issue as I found the marked answer is great resource to the understanding of optionals and how they work but hasn&apos;t addressed the issue itself directly.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically you tried to use a nil value in places where Swift allows only non-nil ones, by telling the compiler to trust you that there will never be nil value there, thus allowing your app to compile.&lt;/p&gt;\n\n&lt;p&gt;There are several scenarios that lead to this kind of fatal error:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;forced unwraps:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; user &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someVariable&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;someVariable&lt;/code&gt; is nil, then you&apos;ll get a crash. By doing a force unwrap you moved the nil check responsibility from the compiler to you, basically by doing a forced unwrap you&apos;re guaranteeing to the compiler that you&apos;ll never have nil values there. And guess what it happens if somehow a nil value ends in in &lt;code&gt;someVariable&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;Solution? Use optional binding (aka if-let), do the variable processing there:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; user &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someVariable {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do your stuff&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;forced (down)casts:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myRectangle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someShape &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Rectangle&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here by force casting you tell the compiler to no longer worry, as you&apos;ll always have a &lt;code&gt;Rectangle&lt;/code&gt; instance there. And as long as that holds, you don&apos;t have to worry. The problems start when you or your colleagues from the project start circulating non-rectangle values.&lt;/p&gt;\n\n&lt;p&gt;Solution? Use optional binding (aka if-let), do the variable processing there:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myRectangle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someShape &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Rectangle&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// yay, I have a rectangle&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Implicitly unwrapped optionals. Let&apos;s assume you have the following class definition:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;!\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;() {\n        name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(unnamed)&quot;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nicerName&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mr/Ms &quot;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; name\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if no-one messes up with the &lt;code&gt;name&lt;/code&gt; property by setting it to &lt;code&gt;nil&lt;/code&gt;, then it works as expected, however if &lt;code&gt;User&lt;/code&gt; is initialized from a JSON that lacks the &lt;code&gt;name&lt;/code&gt; key, then you get the fatal error when trying to use the property.&lt;/p&gt;\n\n&lt;p&gt;Solution? Don&apos;t use them :) Unless you&apos;re 102% sure that the property will always have a non-nil value by the time it needs to be used. In most cases converting to an optional or non-optional will work. Making it non-optional will also result in the compiler helping you by telling the code paths you missed giving a value to that property&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Unconnected, or not yet connected, outlets. This is a particular case of scenario #3. Basically you have some XIB-loaded class that you want to use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SignInViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; emailTextField: &lt;span class=&quot;hljs-type&quot;&gt;UITextField&lt;/span&gt;!\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if you missed connecting the outlet from the XIB editor, then the app will crash as soon as you&apos;ll want to use the outlet.\nSolution? Make sure all outlets are connected. Or use the &lt;code&gt;?&lt;/code&gt; operator on them: &lt;code&gt;emailTextField?.text = &quot;my@email.com&quot;&lt;/code&gt;. Or declare the outlet as optional, though in this case the compiler will force you to unwrap it all over the code.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Values coming from Objective-C, and that don&apos;t have nullability annotations. Let&apos;s assume we have the following Objective-C class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyUser&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSObject&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;name;\n&lt;span class=&quot;hljs-meta&quot;&gt;@end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if no nullability annotations are specified (either explicitly or via &lt;code&gt;NS_ASSUME_NONNULL_BEGIN&lt;/code&gt;/&lt;code&gt;NS_ASSUME_NONNULL_END&lt;/code&gt;), then the &lt;code&gt;name&lt;/code&gt; property will be imported in Swift as &lt;code&gt;String!&lt;/code&gt; (an IUO - implicitly unwrapped optional). As soon as some swift code will want to use the value, it will crash if &lt;code&gt;name&lt;/code&gt; is nil.&lt;/p&gt;\n\n&lt;p&gt;Solution? Add nullability annotations to your Objective-C code. Beware though, the Objective-C compiler is a little bit permissive when it comes to nullability, you might end up with nil values, even if you explicitly marked them as &lt;code&gt;nonnull&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;This is more of a important comment and that why implicitly unwrapped optionals can be deceptive when it comes to debugging &lt;code&gt;nil&lt;/code&gt; values.&lt;/p&gt;\n\n&lt;p&gt;Think of the following code: \nIt compiles with no errors/warnings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c3.address.city\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yet at runtime it gives the following error: &lt;em&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Can you tell me which object is &lt;code&gt;nil&lt;/code&gt;?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;You can&apos;t!&lt;/p&gt;\n\n&lt;p&gt;The full code would be: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NormalContact&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c3 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BadContact&lt;/span&gt;()\n\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c3.address.city &lt;span class=&quot;hljs-comment&quot;&gt;// compiler hides the truth from you and then you sudden get a crash&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NormalContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;(city: &lt;span class=&quot;hljs-string&quot;&gt;&quot;defaultCity&quot;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BadContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;!\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Address&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; city : &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Long story short by using &lt;code&gt;var address : Address!&lt;/code&gt; you&apos;re &lt;strong&gt;hiding&lt;/strong&gt; the possibility that a variable can be &lt;code&gt;nil&lt;/code&gt; from other readers. And when it crashes you&apos;re like &quot;what the hell?! my &lt;code&gt;address&lt;/code&gt; isn&apos;t an optional, so why am I crashing?!. &lt;/p&gt;\n\n&lt;p&gt;Hence it&apos;s better to write as such: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.city  &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR:  Fatal error: Unexpectedly found nil while unwrapping an Optional value &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Can you now tell me which object it is that was &lt;code&gt;nil&lt;/code&gt;?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;This time the code has been made more clear to you. You can rationalize and think that likely it&apos;s the &lt;code&gt;address&lt;/code&gt; parameter that was forcefully unwrapped. &lt;/p&gt;\n\n&lt;p&gt;The full code would be :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NormalContact&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;GoodContact&lt;/span&gt;()\n\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.city\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.city &lt;span class=&quot;hljs-comment&quot;&gt;// not compile-able. No deceiving by the compiler&lt;/span&gt;\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address.city &lt;span class=&quot;hljs-comment&quot;&gt;// not compile-able. No deceiving by the compiler&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.city {  &lt;span class=&quot;hljs-comment&quot;&gt;// safest approach. But that&apos;s not what I&apos;m talking about here. &lt;/span&gt;\n            c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; city\n        }\n\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NormalContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;(city: &lt;span class=&quot;hljs-string&quot;&gt;&quot;defaultCity&quot;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GoodContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;?\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Address&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; city : &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The errors &lt;code&gt;EXC_BAD_INSTRUCTION&lt;/code&gt; and &lt;code&gt;fatal error: unexpectedly found nil while implicitly unwrapping an Optional value&lt;/code&gt; appears the most when you have declared an &lt;code&gt;@IBOutlet&lt;/code&gt;, but not connected to the &lt;strong&gt;storyboard&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You should also learn about how &lt;strong&gt;Optionals&lt;/strong&gt; work, mentioned in other answers, but this is the only time that mostly appears to me.&lt;/p&gt;\n    ","\n&lt;p&gt;If you get this error in CollectionView try to create CustomCell file and Custom xib also.&lt;/p&gt;\n\n&lt;p&gt;add this code in ViewDidLoad() at mainVC.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nib &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UINib&lt;/span&gt;(nibName: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CustomnibName&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.collectionView.register(nib, forCellWithReuseIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;cell&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Xcode 12 iOS 14 Swift 5&lt;/p&gt;\n&lt;p&gt;My problem was the type of navigation as I called the vie controller direct without instantiating the storyboard so that&apos;s mean data was not set yet from the storyboard.&lt;/p&gt;\n&lt;p&gt;When you navigate, navigate with&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; homeViewController &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIStoryboard&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Main&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;).instantiateViewController(withIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;home&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeEventsViewController&lt;/span&gt;\n    homeViewController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.modalTransitionStyle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .crossDissolve\n    homeViewController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.modalPresentationStyle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .fullScreen\n    view.present(homeViewController &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;(), animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, completion: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hopefully it works :-)&lt;/p&gt;\n    ","\n&lt;p&gt;I came across this error while making a segue from a table view controller to a view controller because I had forgotten to specify the custom class name for the view controller in the main storyboard.&lt;/p&gt;\n\n&lt;p&gt;Something simple that is worth checking if all else looks ok&lt;/p&gt;\n    ","\n&lt;p&gt;If my case I set a variable to UILabel which was nil.&lt;/p&gt;\n&lt;p&gt;So I fixed it and thereafter it did not throw the error.&lt;/p&gt;\n&lt;p&gt;Code snippet&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ResultViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bmiValue&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(bmiValue)\n        resultLabel.text&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;bmiValue &lt;span class=&quot;hljs-comment&quot;&gt;//where bmiValue was nil , I fixed it and problem was solved&lt;/span&gt;\n\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;recaculateBmi&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIButton&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.dismiss(animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, completion: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n    }\n    \n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;in simple words\nyou are trying to use a value of the optional variable which is nil.\nquick fix could be use &lt;code&gt;guard&lt;/code&gt; or &lt;code&gt;if let&lt;/code&gt; instead of force unwrap like putting &lt;code&gt;!&lt;/code&gt; at the end of variable&lt;/p&gt;\n    ","\n&lt;p&gt;This is because you are trying to use a value which can possible be nil, but you decided you don&apos;t want to have to check it, but instead assume its set when you uses it and define it as !, there are different philosophies on use of variable set as force unwrap, some people are against there use at all, I personal think they are ok for things that will crash all the time and are simple to reason about, usually references to resource, like outlets to xib files, or uses of images with you app that are part of your assets, if these are not set up properly, you app is going to crash straight away, for a very obvious reason, you can get into difficult when the order of objects being created can be uncertain, and trying to reason solutions to this can be difficult, it usually means a bad design as even it you make them optional, calls to you optional variable may not ever be executed, some projects can demand use of force unwraps for security reasons, things like banking apps, because they want the app to crash rather then continue to work in an unplanned way.&lt;/p&gt;\n    "],"id":98,"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","content":"\n                \n&lt;p&gt;My Swift program is crashing with &lt;code&gt;EXC_BAD_INSTRUCTION&lt;/code&gt; and one of the following similar errors. What does this error mean, and how do I fix it?&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;or&lt;/em&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;This post is intended to collect answers to &quot;unexpectedly found nil&quot; issues, so that they are not scattered and hard to find. Feel free to add your own answer or &lt;a href=&quot;https://stackoverflow.com/posts/32170457/edit&quot;&gt;edit&lt;/a&gt; the existing wiki answer.&lt;/sup&gt;&lt;/p&gt;\n    ","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944","postType":"QUESTION","createdAt":"2022-07-09T16:36:33.000Z","updatedAt":"2022-07-09T16:36:33.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why should there be spaces around '[' and ']' in Bash?","slug":"why-should-there-be-spaces-around-''-and-''-in-bash-1657387984122"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"What and where are the stack and heap?","slug":"what-and-where-are-the-stack-and-heap-1657387415361"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"How does the Java 'for each' loop work?","slug":"how-does-the-java-'for-each'-loop-work-1657388423749"},{"title":"How to fix \"Headers already sent\" error in PHP","slug":"how-to-fix-\"headers-already-sent\"-error-in-php-1657384315553"},{"title":"JQuery - $ is not defined","slug":"jquery-dollar-is-not-defined-1657388385731"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"How to sum a variable by group","slug":"how-to-sum-a-variable-by-group-1657384838148"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"Randomize a List<T>","slug":"randomize-a-listlesstgreater-1657388172793"},{"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197"},{"title":"How to store objects in HTML5 localStorage","slug":"how-to-store-objects-in-html5-localstorage-1657387568907"},{"title":"How to manage startActivityForResult on Android","slug":"how-to-manage-startactivityforresult-on-android-1657387967393"},{"title":"Iterating over dictionaries using 'for' loops","slug":"iterating-over-dictionaries-using-'for'-loops-1657388334481"},{"title":"How do I write a correct micro-benchmark in Java?","slug":"how-do-i-write-a-correct-micro-benchmark-in-java-1657384488725"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890"},{"title":"Sorting object property by values","slug":"sorting-object-property-by-values-1657388367300"}]},"__N_SSG":true}