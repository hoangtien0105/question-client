{"pageProps":{"data":{"answer":["\n&lt;p&gt;Your current data structure is great to look up the participants of a specific chat. It is however not a very good structure for looking up the inverse: the chats that a user participates in.&lt;/p&gt;\n&lt;p&gt;A few problems here:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;you&apos;re storing a &lt;em&gt;set&lt;/em&gt; as an array&lt;/li&gt;\n&lt;li&gt;you can only index on fixed paths&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Set vs array&lt;/h1&gt;\n&lt;p&gt;A chat can have multiple participants, so you modelled this as an array. But this actually is not the ideal data structure. Likely each participant can only be in the chat once. But by using an array, I could have:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;participants&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;puf&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;puf&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is clearly not what you have in mind, but the data structure allows it. You can try to secure this in code and security rules, but it would be easier if you start with a data structure that implicitly matches your model better.&lt;/p&gt;\n&lt;p&gt;My rule of thumb: &lt;strong&gt;if you find yourself writing &lt;code&gt;array.contains()&lt;/code&gt;, you should be using a set&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;A set is a structure where each child can be present at most once, so it naturally protects against duplicates. In Firebase you&apos;d model a set as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;participants&lt;/span&gt;: {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;puf&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;true&lt;/code&gt; here is really just a dummy value: the important thing is that we&apos;ve moved the name to the key. Now if I&apos;d try to join this chat again, it would be a noop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;participants&lt;/span&gt;: {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;puf&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And when you&apos;d join:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;participants&lt;/span&gt;: {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;puf&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is the most direct representation of your requirement: a collection that can only contain each participant once.&lt;/p&gt;\n&lt;h1&gt;You can only index known properties&lt;/h1&gt;\n&lt;p&gt;With the above structure, you &lt;em&gt;could&lt;/em&gt; query for chats that you are in with:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;ref.&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;chats&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;orderByChild&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;participants/john&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equalTo&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The problem is that this requires you to define an index on `participants/john&quot;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;rules&quot;&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;chats&quot;&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;$chatid&quot;&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;participants&quot;&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-string&quot;&gt;&quot;.indexOn&quot;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;puf&quot;&lt;/span&gt;]\n        }\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will work and perform great. But now each time someone new joins the chat app, you&apos;ll need to add another index. That&apos;s clearly not a scaleable model. We&apos;ll need to change our data structure to allow the query you want.&lt;/p&gt;\n&lt;h1&gt;Invert the index - pull categories up, flattening the tree&lt;/h1&gt;\n&lt;p&gt;Second rule of thumb: &lt;strong&gt;model your data to reflect what you show in your app&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Since you are looking to show a list of chat rooms for a user, store the chat rooms for each user:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;userChatrooms&lt;/span&gt;: {\n  &lt;span class=&quot;hljs-attr&quot;&gt;john&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatRoom1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatRoom2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;puf&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatRoom1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatRoom3&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now you can simply determine your list of chat rooms with:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;ref.&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;userChatrooms&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And then loop over the keys to get each room.&lt;/p&gt;\n&lt;p&gt;You&apos;ll like have two relevant lists in your app:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the list of chat rooms for a specific user&lt;/li&gt;\n&lt;li&gt;the list of participants in a specific chat room&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In that case you&apos;ll also have both lists in the database.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chatroomUsers\n  chatroom1\n    &lt;span class=&quot;hljs-attr&quot;&gt;user1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;user2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  chatroom2\n    &lt;span class=&quot;hljs-attr&quot;&gt;user1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;user3&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nuserChatrooms\n  &lt;span class=&quot;hljs-attr&quot;&gt;user1&lt;/span&gt;:\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatroom1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatroom2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;user2&lt;/span&gt;:\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatroom1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;user2&lt;/span&gt;:\n    &lt;span class=&quot;hljs-attr&quot;&gt;chatroom2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;ve pulled both lists to the top-level of the tree, since Firebase recommends against nesting data.&lt;/p&gt;\n&lt;p&gt;Having both lists is completely normal in NoSQL solutions. In the example above we&apos;d refer to &lt;code&gt;userChatrooms&lt;/code&gt; as the inverted index of &lt;code&gt;chatroomsUsers&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;Cloud Firestore&lt;/h1&gt;\n&lt;p&gt;This is one of the cases where Cloud Firestore has better support for this type of query. Its &lt;code&gt;array-contains&lt;/code&gt; operator allows filter documents that have a certain value in an array, while &lt;code&gt;arrayRemove&lt;/code&gt; allows you to treat an array as a set. For more on this, see &lt;a href=&quot;https://firebase.googleblog.com/2018/08/better-arrays-in-cloud-firestore.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Better Arrays in Cloud Firestore&lt;/a&gt;.&lt;/p&gt;\n    "],"id":393,"title":"Firebase query if child of child contains a value","content":"\n                \n&lt;p&gt;The structure of the table is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;chats&lt;/li&gt;\n&lt;li&gt;--&amp;gt; randomId&lt;/li&gt;\n&lt;li&gt;--&amp;gt;--&amp;gt; participants&lt;/li&gt;\n&lt;li&gt;--&amp;gt;--&amp;gt;--&amp;gt; 0: &apos;name1&apos;&lt;/li&gt;\n&lt;li&gt;--&amp;gt;--&amp;gt;--&amp;gt; 1: &apos;name2&apos;&lt;/li&gt;\n&lt;li&gt;--&amp;gt;--&amp;gt; chatItems&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;etc&lt;/p&gt;\n\n&lt;p&gt;What I am trying to do is query the chats table to find all the chats that hold a participant by a passed in username string.&lt;/p&gt;\n\n&lt;p&gt;Here is what I have so far:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;subscribeChats&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;username: string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;af&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;database&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;chats&apos;&lt;/span&gt;, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;query&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;orderByChild&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;participants&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: username, &lt;span class=&quot;hljs-comment&quot;&gt;// How to check if participants contain username&lt;/span&gt;\n        }\n    });\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"firebase-query-if-child-of-child-contains-a-value-1657387841291","postType":"QUESTION","createdAt":"2022-07-09T17:30:41.000Z","updatedAt":"2022-07-09T17:30:41.000Z","tags":[{"id":2125,"name":"angularfire2","slug":"angularfire2","createdAt":"2022-07-09T17:30:41.000Z","updatedAt":"2022-07-09T17:30:41.000Z","Questions_Tags":{"questionId":393,"tagId":2125}}],"relatedQuestions":[{"title":"Firebase query if child of child contains a value","slug":"firebase-query-if-child-of-child-contains-a-value-1657387841291","tags":[{"name":"angularfire2","Questions_Tags":{"questionId":393,"tagId":2125}}]}]},"randomQuestions":[{"title":"Sort ArrayList of custom Objects by property","slug":"sort-arraylist-of-custom-objects-by-property-1657387678339"},{"title":"What is the difference between client-side and server-side programming?","slug":"what-is-the-difference-between-client-side-and-server-side-programming-1657384372926"},{"title":"What special characters must be escaped in regular expressions?","slug":"what-special-characters-must-be-escaped-in-regular-expressions-1657387465381"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"What does \"list comprehension\" and similar mean? How does it work and how can I use it?","slug":"what-does-\"list-comprehension\"-and-similar-mean-how-does-it-work-and-how-can-i-use-it-1657387996940"},{"title":"Accessing nested JavaScript objects and arrays by string path","slug":"accessing-nested-javascript-objects-and-arrays-by-string-path-1657387321754"},{"title":"Alternatives to gprof [closed]","slug":"alternatives-to-gprof-closed-1657388336554"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"Where and why do I have to put the \"template\" and \"typename\" keywords?","slug":"where-and-why-do-i-have-to-put-the-\"template\"-and-\"typename\"-keywords-1657384467606"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"What is the canonical way to check for errors using the CUDA runtime API?","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"}]},"__N_SSG":true}