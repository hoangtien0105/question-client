{"pageProps":{"data":{"answer":["\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Improper use of &lt;strong&gt;eval&lt;/strong&gt; opens up your\ncode for injection attacks&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt; can be more challenging\n(no line numbers, etc.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;eval&apos;d code executes slower (no opportunity to compile/cache eval&apos;d code)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Edit: As @Jeff Walden points out in comments, #3 is less true today than it was in 2008. However, while some caching of compiled scripts may happen this will only be limited to scripts that are eval&apos;d repeated with no modification. A more likely scenario is that you are eval&apos;ing scripts that have undergone slight modification each time and as such could not be cached. Let&apos;s just say that SOME eval&apos;d code executes more slowly.&lt;/p&gt;\n    ","\n&lt;p&gt;eval isn&apos;t always evil. There are times where it&apos;s perfectly appropriate.&lt;/p&gt;\n\n&lt;p&gt;However, eval is currently and historically massively over-used by people who don&apos;t know what they&apos;re doing. That includes people writing JavaScript tutorials, unfortunately, and in some cases this can indeed have security consequences - or, more often, simple bugs. So the more we can do to throw a question mark over eval, the better. Any time you use eval you need to sanity-check what you&apos;re doing, because chances are you could be doing it a better, safer, cleaner way.&lt;/p&gt;\n\n&lt;p&gt;To give an all-too-typical example, to set the colour of an element with an id stored in the variable &apos;potato&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.&apos;&lt;/span&gt; + potato + &lt;span class=&quot;hljs-string&quot;&gt;&apos;.style.color = &quot;red&quot;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the authors of the kind of code above had a clue about the basics of how JavaScript objects work, they&apos;d have realised that square brackets can be used instead of literal dot-names, obviating the need for eval:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;[potato].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...which is much easier to read as well as less potentially buggy.&lt;/p&gt;\n\n&lt;p&gt;(But then, someone who /really/ knew what they were doing would say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(potato).&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is more reliable than the dodgy old trick of accessing DOM elements straight out of the document object.)&lt;/p&gt;\n    ","\n&lt;p&gt;I believe it&apos;s because it can execute any JavaScript function from a string. Using it makes it easier for people to inject rogue code into the application.&lt;/p&gt;\n    ","\n&lt;p&gt;Two points come to mind:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Security (but as long as you generate the string to be evaluated yourself, this might be a non-issue)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Performance: until the code to be executed is unknown, it cannot be optimized.  (about javascript and performance, certainly &lt;a href=&quot;http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html&quot; rel=&quot;noreferrer&quot;&gt;Steve Yegge&apos;s presentation&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;It&apos;s generally only an issue if you&apos;re passing eval user input.&lt;/p&gt;\n    ","\n&lt;p&gt;Passing user input to eval() is a security risk, but also each invocation of eval() creates a new instance of the JavaScript interpreter. This can be a resource hog.&lt;/p&gt;\n    ","\n&lt;p&gt;Mainly, it&apos;s a lot harder to maintain and debug. It&apos;s like a &lt;code&gt;goto&lt;/code&gt;. You can use it, but it makes it harder to find problems and harder on the people who may need to make changes later.&lt;/p&gt;\n    ","\n&lt;p&gt;One thing to keep in mind is that you can often use eval() to execute code in an otherwise restricted environment - social networking sites that block specific JavaScript functions can sometimes be fooled by breaking them up in an eval block -&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;al&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;er&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;t(\\&apos;&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi there!&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;)&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So if you&apos;re looking to run some JavaScript code where it might not otherwise be allowed (&lt;a href=&quot;http://en.wikipedia.org/wiki/Myspace&quot; rel=&quot;noreferrer&quot;&gt;Myspace&lt;/a&gt;, I&apos;m looking at you...) then eval() can be a useful trick.&lt;/p&gt;\n\n&lt;p&gt;However, for all the reasons mentioned above, you shouldn&apos;t use it for your own code, where you have complete control - it&apos;s just not necessary, and better-off relegated to the &apos;tricky JavaScript hacks&apos; shelf.&lt;/p&gt;\n    ","\n&lt;p&gt;Unless you let eval() a dynamic content (through cgi or input), it is as safe and solid as all other JavaScript in your page.&lt;/p&gt;\n    ","\n&lt;p&gt;Along with the rest of the answers, I don&apos;t think eval statements can have advanced minimization.&lt;/p&gt;\n    ","\n&lt;p&gt;It is a possible security risk, it has a different scope of execution, and is quite inefficient, as it creates an entirely new scripting environment for the execution of the code. See here for some more info: &lt;a href=&quot;http://userjs.org/help/tutorials/efficient-code#evalevil&quot; rel=&quot;nofollow noreferrer&quot;&gt;eval&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;It is quite useful, though, and used with moderation can add a lot of good functionality.&lt;/p&gt;\n    ","\n&lt;p&gt;Unless you are 100% sure that the code being evaluated is from a trusted source (usually your own application) then it&apos;s a surefire way of exposing your system to a cross-site scripting attack.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s not necessarily that bad provided you know what context you&apos;re using it in.&lt;/p&gt;\n\n&lt;p&gt;If your application is using &lt;code&gt;eval()&lt;/code&gt; to create an object from some JSON which has come back from an &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot; rel=&quot;nofollow noreferrer&quot;&gt;XMLHttpRequest&lt;/a&gt; to your own site, created by your trusted server-side code, it&apos;s probably not a problem.&lt;/p&gt;\n\n&lt;p&gt;Untrusted client-side JavaScript code can&apos;t do that much anyway. Provided the thing you&apos;re executing &lt;code&gt;eval()&lt;/code&gt; on has come from a reasonable source, you&apos;re fine.&lt;/p&gt;\n    ","\n&lt;p&gt;It greatly reduces your level of confidence about security.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want the user to input some logical functions and evaluate for AND the OR then the JavaScript eval function is perfect. I can accept two strings and &lt;code&gt;eval(uate) string1 === string2&lt;/code&gt;, etc.&lt;/p&gt;\n    ","\n&lt;p&gt;If you spot the use of eval() in your code, remember the mantra eval() is evil. &lt;/p&gt;\n\n&lt;p&gt;This\nfunction takes an arbitrary string and executes it as JavaScript code. When the code in\nquestion is known beforehand (not determined at runtime), theres no reason to use\neval(). \nIf the code is dynamically generated at runtime, theres often a better way to\nachieve the goal without eval(). \nFor example, just using square bracket notation to\naccess dynamic properties is better and simpler:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// antipattern&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property = &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj.&quot;&lt;/span&gt; + property));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// preferred&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property = &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(obj[property]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using &lt;code&gt;eval()&lt;/code&gt; also has security implications, because you might be executing code (for\nexample coming from the network) that has been tampered with. \nThis is a common antipattern when dealing with a JSON response from an Ajax request. \nIn those cases\nits better to use the browsers built-in methods to parse the JSON response to make\nsure its safe and valid. For browsers that dont support &lt;code&gt;JSON.parse()&lt;/code&gt; natively, you can\nuse a library from JSON.org.&lt;/p&gt;\n\n&lt;p&gt;Its also important to remember that passing strings to &lt;code&gt;setInterval()&lt;/code&gt;, &lt;code&gt;setTimeout()&lt;/code&gt;,\nand the &lt;code&gt;Function()&lt;/code&gt; constructor is, for the most part, similar to using &lt;code&gt;eval()&lt;/code&gt; and therefore\nshould be avoided. &lt;/p&gt;\n\n&lt;p&gt;Behind the scenes, JavaScript still has to evaluate and execute\nthe string you pass as programming code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// antipatterns&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myFunc()&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myFunc(1, 2, 3)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// preferred&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(myFunc, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n&lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n}, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using the new Function() constructor is similar to eval() and should be approached\nwith care. It could be a powerful construct but is often misused. \nIf you absolutely must\nuse &lt;code&gt;eval()&lt;/code&gt;, you can consider using new Function() instead. &lt;/p&gt;\n\n&lt;p&gt;There is a small potential\nbenefit because the code evaluated in new Function() will be running in a local function\nscope, so any variables defined with var in the code being evaluated will not become\nglobals automatically. &lt;/p&gt;\n\n&lt;p&gt;Another way to prevent automatic globals is to wrap the\n&lt;code&gt;eval()&lt;/code&gt; call into an immediate function.&lt;/p&gt;\n    ","\n&lt;p&gt;Besides the possible security issues if you are executing user-submitted code, most of the time there&apos;s a better way that doesn&apos;t involve re-parsing the code every time it&apos;s executed. Anonymous functions or object properties can replace most uses of eval and are much safer and faster.&lt;/p&gt;\n    ","\n&lt;p&gt;This may become more of an issue as the next generation of browsers come out with some flavor of a JavaScript compiler. Code executed via Eval may not perform as well as the rest of your JavaScript against these newer browsers. Someone should do some profiling.&lt;/p&gt;\n    ","\n&lt;p&gt;This is one of good articles talking about eval and how it is not an evil:\n&lt;a href=&quot;http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/&quot; rel=&quot;nofollow&quot;&gt;http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Im not saying you should go run out and start using eval()\n  everywhere. In fact, there are very few good use cases for running\n  eval() at all. There are definitely concerns with code clarity,\n  debugability, and certainly performance that should not be overlooked.\n  But you shouldnt be afraid to use it when you have a case where\n  eval() makes sense. Try not using it first, but dont let anyone scare\n  you into thinking your code is more fragile or less secure when eval()\n  is used appropriately.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;eval() is very powerful and can be used to execute a JS statement or evaluate an expression. But the question isn&apos;t about the uses of eval() but lets just say some how the string you running with eval() is affected by a malicious party. At the end you will be running malicious code. With power comes great responsibility. So use it wisely is you are using it. \n This isn&apos;t related much to eval() function but this article has pretty good information:\n &lt;a href=&quot;http://blogs.popart.com/2009/07/javascript-injection-attacks/&quot; rel=&quot;nofollow&quot;&gt;http://blogs.popart.com/2009/07/javascript-injection-attacks/&lt;/a&gt;\nIf you are looking for the basics of eval() look here: \n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot; rel=&quot;nofollow&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The JavaScript Engine has a number of performance optimizations that it performs during the compilation phase. Some of these boil down to being able to essentially statically analyze the code as it lexes, and pre-determine where all the variable and function declarations are, so that it takes less effort to resolve identifiers during execution.&lt;/p&gt;\n\n&lt;p&gt;But if the Engine finds an eval(..) in the code, it essentially has to assume that all its awareness of identifier location may be invalid, because it cannot know at lexing time exactly what code you may pass to eval(..) to modify the lexical scope, or the contents of the object you may pass to with to create a new lexical scope to be consulted.&lt;/p&gt;\n\n&lt;p&gt;In other words, in the pessimistic sense, most of those optimizations it would make are pointless if eval(..) is present, so it simply doesn&apos;t perform the optimizations at all.&lt;/p&gt;\n\n&lt;p&gt;This explains it all.&lt;/p&gt;\n\n&lt;p&gt;Reference :&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;amp;%20closures/ch2.md#eval&quot; rel=&quot;nofollow&quot;&gt;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;amp;%20closures/ch2.md#eval&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;amp;%20closures/ch2.md#performance&quot; rel=&quot;nofollow&quot;&gt;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;amp;%20closures/ch2.md#performance&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s not always a bad idea. Take for example, code generation. I recently wrote a library called &lt;a href=&quot;https://github.com/vincentracine/hyperbars&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hyperbars&lt;/a&gt; which bridges the gap between &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot; rel=&quot;nofollow noreferrer&quot;&gt;virtual-dom&lt;/a&gt; and &lt;a href=&quot;http://handlebarsjs.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;handlebars&lt;/a&gt;. It does this by parsing a handlebars template and converting it to &lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot; rel=&quot;nofollow noreferrer&quot;&gt;hyperscript&lt;/a&gt; which is subsequently used by virtual-dom. The hyperscript is generated as a string first and before returning it, &lt;code&gt;eval()&lt;/code&gt; it to turn it into executable code. I have found &lt;code&gt;eval()&lt;/code&gt; in this particular situation the exact opposite of evil. &lt;/p&gt;\n\n&lt;p&gt;Basically from&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div&amp;gt;\n    {{#each names}}\n        &amp;lt;span&amp;gt;{{&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;}}&amp;lt;/span&amp;gt;\n    {{/each}}\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;state&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runtime&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Hyperbars&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Runtime&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = state;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div&apos;&lt;/span&gt;, {}, [&lt;span class=&quot;hljs-title class_&quot;&gt;Runtime&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(context[&lt;span class=&quot;hljs-string&quot;&gt;&apos;names&apos;&lt;/span&gt;], context, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;context, parent, options&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;span&apos;&lt;/span&gt;, {}, [options[&lt;span class=&quot;hljs-string&quot;&gt;&apos;@index&apos;&lt;/span&gt;], context])]\n    })])\n}.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;({}))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The performance of &lt;code&gt;eval()&lt;/code&gt; isn&apos;t an issue in a situation like this because you only need to interpret the generated string once and then reuse the executable output many times over.&lt;/p&gt;\n\n&lt;p&gt;You can see how the code generation was achieved if you&apos;re curious &lt;a href=&quot;https://github.com/vincentracine/hyperbars/blob/master/src/hyperbars.js#L131&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I would go as far as to say that it doesn&apos;t really matter if you use &lt;code&gt;eval()&lt;/code&gt; in javascript which is run in browsers.*(caveat)&lt;/p&gt;\n\n&lt;p&gt;All modern browsers have a developer console where you can execute arbitrary javascript anyway and any semi-smart developer can look at your JS source and put whatever bits of it they need to into the dev console to do what they wish.&lt;/p&gt;\n\n&lt;p&gt;*As long as your server endpoints have the correct validation &amp;amp; sanitisation of user supplied values, it should not matter what gets parsed and eval&apos;d in your client side javascript.&lt;/p&gt;\n\n&lt;p&gt;If you were to ask if it&apos;s suitable to use &lt;code&gt;eval()&lt;/code&gt; in PHP however, the answer is &lt;strong&gt;NO&lt;/strong&gt;, unless you &lt;strong&gt;whitelist&lt;/strong&gt; any values which may be passed to your eval statement.&lt;/p&gt;\n    ","\n&lt;p&gt;Garbage collection&lt;/p&gt;\n\n&lt;p&gt;The browsers garbage collection has no idea if the code that&apos;s eval&apos;ed can be removed from memory so it just keeps it stored until the page is reloaded. \nNot too bad if your users are only on your page shortly, but it can be a problem for webapp&apos;s. &lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a script to demo the problem&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/CynderRnAsh/qux1osnw/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/CynderRnAsh/qux1osnw/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;evalLeak&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;; x++) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(x.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;());\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Something as simple as the above code causes a small amount of memory to be store until the app dies. \nThis is worse when the evaled script is a giant function, and called on interval.&lt;/p&gt;\n    ","\n&lt;p&gt;I won&apos;t attempt to refute anything said heretofore, but i will offer this use of eval() that (as far as I know) can&apos;t be done any other way.  There&apos;s probably other ways to code this, and probably ways to optimize it, but this is done longhand and without any bells and whistles for clarity sake to illustrate a use of eval that really doesn&apos;t have any other alternatives.  That is: dynamical (or more accurately) programmically-created object names (as opposed to values).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Place this in a common/global JS lib:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;NS&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;namespace&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; namespaceParts = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(namespace).&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; namespaceToTest = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; namespaceParts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n            namespaceToTest = namespaceParts[i];\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n            namespaceToTest = namespaceToTest + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; + namespaceParts[i];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;typeof &apos;&lt;/span&gt; + namespaceToTest) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(namespaceToTest + &lt;span class=&quot;hljs-string&quot;&gt;&apos; = {}&apos;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(namespace);\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Then, use this in your class definition libs:&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;NS&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Root.Namespace&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;Class&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;settings&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;//Class constructor code here&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//some generic method:&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Root&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Namespace&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Class&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Method&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;args&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Code goes here&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//this.MyOtherMethod(&quot;foo&quot;));  // =&amp;gt; &quot;foo&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Then, in your applications, use this to instantiate an instance of your class:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anInstanceOfClass = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Root&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Namespace&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Class&lt;/span&gt;(settings);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT:  by the way, I wouldn&apos;t suggest (for all the security reasons pointed out heretofore) that you base you object names on user input.  I can&apos;t imagine any good reason you&apos;d want to do that though.  Still, thought I&apos;d point it out that it wouldn&apos;t be a good idea :)&lt;/p&gt;\n    "],"id":276,"title":"Why is using the JavaScript eval function a bad idea?","content":"\n                \n&lt;p&gt;The eval function is a powerful and easy way to dynamically generate code, so what are the caveats?&lt;/p&gt;\n    ","slug":"why-is-using-the-javascript-eval-function-a-bad-idea-1657387485165","postType":"QUESTION","createdAt":"2022-07-09T17:24:45.000Z","updatedAt":"2022-07-09T17:24:45.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"My regex is matching too much. How do I make it stop? [duplicate]","slug":"my-regex-is-matching-too-much.-how-do-i-make-it-stop-duplicate-1657384845028"},{"title":"Do I cast the result of malloc?","slug":"do-i-cast-the-result-of-malloc-1657384271583"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"Find object by id in an array of JavaScript objects","slug":"find-object-by-id-in-an-array-of-javascript-objects-1657387572087"},{"title":"How do I pass a variable by reference?","slug":"how-do-i-pass-a-variable-by-reference-1657384657232"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"How to center an element horizontally and vertically","slug":"how-to-center-an-element-horizontally-and-vertically-1657388132330"},{"title":".prop() vs .attr()","slug":".prop()-vs-.attr()-1657384898328"},{"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216"},{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"Why does this PDO statement silently fail?","slug":"why-does-this-pdo-statement-silently-fail-1657384892133"}]},"__N_SSG":true}