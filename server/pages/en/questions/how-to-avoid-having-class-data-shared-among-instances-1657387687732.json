{"pageProps":{"data":{"answer":["\n&lt;p&gt;You want this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;a&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Declaring the variables inside the class declaration makes them &quot;class&quot; members and not instance members. Declaring them inside the &lt;code&gt;__init__&lt;/code&gt; method makes sure that a new instance of the members is created alongside every new instance of the object, which is the behavior you&apos;re looking for.&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted answer works but a little more explanation does not hurt. &lt;/p&gt;\n\n&lt;p&gt;Class attributes do not become instance attributes when an instance is created. They become instance attributes when a value is assigned to them.&lt;/p&gt;\n\n&lt;p&gt;In the original code no value is assigned to &lt;code&gt;list&lt;/code&gt; attribute after instantiation; so it remains a class attribute. Defining list inside &lt;code&gt;__init__&lt;/code&gt; works because &lt;code&gt;__init__&lt;/code&gt; is called after instantiation. Alternatively, this code would also produce the desired output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;a&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = a()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = a()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(y.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the confusing scenario in the question will never happen to immutable objects such as numbers and strings, because their value cannot be changed without assignment. For example a code similar to the original with string attribute type works without any problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;a&lt;/span&gt;:\n    string = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = a()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = a()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.string += &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.string += &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.string\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.string\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So to summarize: &lt;strong&gt;class attributes become instance attributes if and only if a value is assigned to them after instantiation, being in the &lt;code&gt;__init__&lt;/code&gt; method or not&lt;/strong&gt;. This is a good thing because this way you can have static attributes if you never assign a value to an attribute after instantiation.&lt;/p&gt;\n    ","\n&lt;p&gt;Although the accepted anwer is spot on, I would like to add a bit description.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s do a small exercise &lt;/p&gt;\n\n&lt;p&gt;first of all define a class as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;:\n    temp = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Skyharbor&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, x&lt;/span&gt;):\n        self.x = x\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, y&lt;/span&gt;):\n        self.temp = y\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So what do we have here?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;We have a very simple class which has an attribute &lt;code&gt;temp&lt;/code&gt; which is a string&lt;/li&gt;\n&lt;li&gt;An &lt;code&gt;__init__&lt;/code&gt; method which sets &lt;code&gt;self.x&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;A change method sets &lt;code&gt;self.temp&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Pretty straight forward so far yeah? Now let&apos;s start playing around with this class. Let&apos;s initialize  this class first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = A(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Tesseract&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a.temp)\nSkyharbor\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(A.temp)\nSkyharbor\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Well, &lt;code&gt;a.temp&lt;/code&gt; worked as expected but how the hell did &lt;code&gt;A.temp&lt;/code&gt; work? Well it worked because temp is a class attribute. Everything in python is an object. Here A is also an object of class &lt;code&gt;type&lt;/code&gt;. Thus the attribute temp is an attribute held by the &lt;code&gt;A&lt;/code&gt; class and if you change the value of temp through &lt;code&gt;A&lt;/code&gt; (and not through an instance of &lt;code&gt;a&lt;/code&gt;), the changed value is going to be reflected in all the instance of &lt;code&gt;A&lt;/code&gt; class.\nLet&apos;s go ahead and do that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;A.temp = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Monuments&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(A.temp)\nMonuments\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a.temp)\nMonuments\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Interesting isn&apos;t it? And &lt;strong&gt;note that &lt;code&gt;id(a.temp)&lt;/code&gt; and &lt;code&gt;id(A.temp)&lt;/code&gt; are still the same&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Any Python object is automatically given a &lt;code&gt;__dict__&lt;/code&gt; attribute, which contains its list of attributes. Let&apos;s investigate what this dictionary contains for our example objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(A.__dict__)\n{\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;change&apos;&lt;/span&gt;: &amp;lt;function change at &lt;span class=&quot;hljs-number&quot;&gt;0x7f5e26fee6e0&lt;/span&gt;&amp;gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;__init__&apos;&lt;/span&gt;: &amp;lt;function __init__ at &lt;span class=&quot;hljs-number&quot;&gt;0x7f5e26fee668&lt;/span&gt;&amp;gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;temp&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Monuments&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a.__dict__)\n{x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Tesseract&apos;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that &lt;code&gt;temp&lt;/code&gt; attribute is listed among &lt;code&gt;A&lt;/code&gt; class&apos;s attributes while &lt;code&gt;x&lt;/code&gt; is listed for the instance.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So how come that we get a defined value of &lt;code&gt;a.temp&lt;/code&gt; if it is not even listed for the instance &lt;code&gt;a&lt;/code&gt;. Well that&apos;s the magic of &lt;code&gt;__getattribute__()&lt;/code&gt; method. In Python the dotted syntax automatically invokes this method so when we write &lt;code&gt;a.temp&lt;/code&gt;, Python executes &lt;code&gt;a.__getattribute__(&apos;temp&apos;)&lt;/code&gt;. That method performs the attribute lookup action, i.e. finds the value of the attribute by looking in different places.&lt;/p&gt;\n\n&lt;p&gt;The standard implementation of &lt;code&gt;__getattribute__()&lt;/code&gt; searches first the internal dictionary (&lt;strong&gt;dict&lt;/strong&gt;) of an object, then the type of the object itself. In this case &lt;code&gt;a.__getattribute__(&apos;temp&apos;)&lt;/code&gt; executes first &lt;code&gt;a.__dict__[&apos;temp&apos;]&lt;/code&gt; and then &lt;code&gt;a.__class__.__dict__[&apos;temp&apos;]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Okay now let&apos;s use our &lt;code&gt;change&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.change(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Intervals&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a.temp)\nIntervals\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(A.temp)\nMonuments\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Well now that we have used &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;print(a.temp)&lt;/code&gt; gives us a different value from &lt;code&gt;print(A.temp)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Now if we compare &lt;code&gt;id(a.temp)&lt;/code&gt; and &lt;code&gt;id(A.temp)&lt;/code&gt;, they will be different.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You declared &quot;list&quot; as a &quot;class level property&quot; and not &quot;instance level property&quot;.  In order to have properties scoped at the instance level, you need to initialize them through referencing with the &quot;self&quot; parameter in the &lt;code&gt;__init__&lt;/code&gt; method (or elsewhere depending on the situation).&lt;/p&gt;\n\n&lt;p&gt;You don&apos;t strictly have to initialize the instance properties in the &lt;code&gt;__init__&lt;/code&gt; method but it makes for easier understanding.&lt;/p&gt;\n    ","\n&lt;p&gt;So nearly every response here seems to miss a particular point.  Class variables &lt;strong&gt;never&lt;/strong&gt; become instance variables as demonstrated by the code below.  By utilizing a metaclass to intercept variable assignment at the class level, we can see that when a.myattr is reassigned, the field assignment magic method on the class is not called.  This is because the assignment &lt;strong&gt;creates a new instance variable&lt;/strong&gt;.  This behavior has &lt;strong&gt;absolutely nothing&lt;/strong&gt; to do with the class variable as demonstrated by the second class which has no class variables and yet still allows field assignment.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;mymeta&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, bases, d&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__setattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, attr, value&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;setting &quot;&lt;/span&gt; + attr)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(mymeta, cls).__setattr__(attr, value)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;myclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __metaclass__ = mymeta\n    myattr = []\n\na = myclass()\na.myattr = []           &lt;span class=&quot;hljs-comment&quot;&gt;#NOTHING IS PRINTED&lt;/span&gt;\nmyclass.myattr = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;#change is printed here&lt;/span&gt;\nb = myclass()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b.myattr)         &lt;span class=&quot;hljs-comment&quot;&gt;#pass through lookup on the base class&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;expando&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\na = expando()\na.random = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;            &lt;span class=&quot;hljs-comment&quot;&gt;#no class variable required&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a.random)         &lt;span class=&quot;hljs-comment&quot;&gt;#but it still works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;IN SHORT&lt;/strong&gt; Class variables have NOTHING to do with instance variables.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;More clearly&lt;/strong&gt; They just happen to be in the scope for lookups on instances. Class variables are in fact &lt;em&gt;instance variables&lt;/em&gt; on the class object itself.  You can also have &lt;em&gt;metaclass variables&lt;/em&gt; if you want as well because metaclasses themselves are objects too.  Everything is an object whether it is used to create other objects or not, so do not get bound up in the semantics of other languages usage of the word class.  In python, a class is really just an object that is used to determine how to create other objects and what their behaviors will be.  Metaclasses are classes that create classes, just to further illustrate this point. &lt;/p&gt;\n    ","\n&lt;p&gt;Yes you must declare in the &quot;constructor&quot; if you want that the list becomes an object property and not a class property.&lt;/p&gt;\n    ","\n&lt;p&gt;To protect your variable shared by other instance you need to create new instance variable each time you create an instance. When you are declaring a variable inside a class it&apos;s class variable and shared by all instance. If you want to make it for instance wise need to use the &lt;strong&gt;init&lt;/strong&gt; method to reinitialize the variable as  refer to the instance  &lt;/p&gt;\n\n&lt;p&gt;From &lt;a href=&quot;https://www.programiz.com/python-programming/class&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;Python Objects and Class&lt;/em&gt; by Programiz.com&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;__init__()&lt;/code&gt; function. This special function gets called whenever a new object of that class is instantiated.&lt;/p&gt;\n  \n  &lt;p&gt;This type of function is also called constructors in Object Oriented\n  Programming (OOP). We normally use it to initialize all the variables.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;example&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;=[] &lt;span class=&quot;hljs-comment&quot;&gt;#This is class variable shared by all instance&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = [] &lt;span class=&quot;hljs-comment&quot;&gt;#This is instance variable referred to specific instance&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":340,"title":"How to avoid having class data shared among instances?","content":"\n                \n&lt;p&gt;What I want is this behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;a&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n\nx = a()\ny = a()\n\nx.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\ny.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\nx.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\ny.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [1, 3]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(y.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [2, 4]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, what really happens when I print is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [1, 2, 3, 4]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(y.&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [1, 2, 3, 4]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clearly they are sharing the data in class &lt;code&gt;a&lt;/code&gt;. How do I get separate instances to achieve the behavior I desire?&lt;/p&gt;\n    ","slug":"how-to-avoid-having-class-data-shared-among-instances-1657387687732","postType":"QUESTION","createdAt":"2022-07-09T17:28:07.000Z","updatedAt":"2022-07-09T17:28:07.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"Submit same Partial View called multiple times data to controller?","slug":"submit-same-partial-view-called-multiple-times-data-to-controller-1657387887213"},{"title":"Why is using 'eval' a bad practice?","slug":"why-is-using-'eval'-a-bad-practice-1657387348760"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"How do we control web page caching, across all browsers?","slug":"how-do-we-control-web-page-caching-across-all-browsers-1657387529059"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"Official locator strategies for the webdriver","slug":"official-locator-strategies-for-the-webdriver-1657384353174"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"What does it mean to \"program to an interface\"?","slug":"what-does-it-mean-to-\"program-to-an-interface\"-1657384671665"},{"title":"How do I merge two dictionaries in a single expression?","slug":"how-do-i-merge-two-dictionaries-in-a-single-expression-1657387593160"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988"},{"title":"String.equals versus == [duplicate]","slug":"string.equals-versus-duplicate-1657387599972"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"}]},"__N_SSG":true}