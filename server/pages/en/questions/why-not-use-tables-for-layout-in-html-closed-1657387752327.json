{"pageProps":{"data":{"answer":["\n&lt;p&gt;I&apos;m going to go through your arguments one after another and try to show the errors in them. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s good to separate content from layout\n  But this is a fallacious argument; Clich√© Thinking.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s not fallacious at all because HTML was designed intentionally. Misuse of an element might not be completely out of question (after all, new idioms have developed in other languages, as well) but possible negative implications have to be counterbalanced. Additionally, even if there were no arguments against misusing the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element today, there might be tomorrow because of the way browser vendors apply special treatment to the element. After all, they know that &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements are for tabular data only and might use this fact to improve the rendering engine, in the process subtly changing how &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;s behave, and thus breaking cases where it was previously misused.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;So what? Does my boss care? Do my users care?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Depends. Is your boss pointy-haired? Then he might not care. If she&apos;s competent, then she will care, because the users &lt;a href=&quot;http://www.hotdesign.com/seybold/&quot; rel=&quot;nofollow noreferrer&quot;&gt;will&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Perhaps me or my fellow developers who have to maintain a web page care... Is a table less maintainable? I think using a table is easier than using divs and css.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;del&gt;The majority of professional web developers seem to oppose you&lt;/del&gt;&lt;sup&gt;[&lt;em&gt;citation needed&lt;/em&gt;]&lt;/sup&gt;. That tables &lt;em&gt;are&lt;/em&gt; in fact less maintainable should be obvious. Using tables for layout means that changing the corporate layout will in fact mean changing every single page. This can be &lt;em&gt;very&lt;/em&gt; expensive. On the other hand, judicious use of semantically meaningful HTML combined with CSS &lt;em&gt;might&lt;/em&gt; confine such changes to the CSS and the pictures used.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;By the way... why is using a div or a span good separation of content from layout and a table not? Getting a good layout with only divs often requires a lot of nested divs.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Deeply nested &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s are an anti-pattern just as table layouts. Good web designers don&apos;t need many of them. On the other hand, even such deep-nested divs don&apos;t have many of the problems of table layouts. In fact, they can even contribute to a semantic structure by logically dividing the content in parts.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Readability of the code\n  I think it&apos;s the other way around. Most people understand html, little understand css. It&apos;s simpler.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Most people don&apos;t matter. Professionals matter. For professionals, table layouts create many more problems than HTML + CSS. This is like saying I shouldn&apos;t use GVim or Emacs because Notepad is simpler for most people. Or that I shouldn&apos;t use LaTeX because MS Word is simpler for most people.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s better for SEO not to use tables&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&apos;t know if this is true and wouldn&apos;t use this as an argument but it would be logical. Search engines search for &lt;em&gt;relevant&lt;/em&gt; data. While tabular data could of course be relevant, it&apos;s rarely what users search for. Users search for terms used in the page title or similarly prominent positions. It would therefore be logical to exclude tabular content from filtering and thus cutting the processing time (and costs!) by a large factor.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Tables are slower.\n  An extra tbody element has to be inserted. This is peanuts for modern web browsers.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The extra element has got nothing to do with tables being slower. On the other hand, the layout algorithm for tables is much harder, the browser often has to wait for the whole table to load before it can begin to layout the content. Additionally, caching of the layout won&apos;t work (CSS can easily be cached). All this has been mentioned before. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Show me some benchmarks where the use of a table significantly slows down a page.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Unfortunately, I don&apos;t have any benchmark data. I would be interested in it myself because it&apos;s right that this argument lacks a certain scientific rigour.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Most web sites that need an upgrade need new content (html) as well. Scenarios where a new version of a web site only needs a new css file are not very likely.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not at all. I&apos;ve worked on several cases where changing the design was simplified by a separation of content and design. It&apos;s often still necessary to change some HTML code but the changes will always be much more confined. Additionally, design changes must on occasion be made dynamically. Consider template engines such as the one used by the WordPress blogging system. Table layouts would literally kill this system. I&apos;ve worked on a similar case for a commercial software. Being able to change the design without changing the HTML code was one of the business requirements.&lt;/p&gt;\n\n&lt;p&gt;Another thing. Table layout makes automated parsing of websites (screen scraping) much harder. This might sound trivial because, after all, who does it? I was surprised myself. Screen scraping can help a lot if the service in question doesn&apos;t offer a WebService alternative to access its data. I&apos;m working in bioinformatics where this is a sad reality. Modern web techniques and WebServices have not reached most developers and often, screen scraping is the only way to automate the process of getting data. No wonder that many biologists still perform such tasks manually. For thousands of data sets.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my &lt;em&gt;programmer&apos;s answer&lt;/em&gt; from a &lt;a href=&quot;https://stackoverflow.com/questions/5323/is-there-a-business-reason-for-striving-for-pure-css-layout#75488&quot;&gt;simliar thread&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Semantics 101&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;First take a look at this code and think about what&apos;s wrong here...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;car&lt;/span&gt; {&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; wheels = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; engine;\n}\n\ncar mybike = new car();\nmybike.wheels = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\nmybike.engine = null;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem, of course, is that a bike is not a car. The car class is an inappropriate class for the bike instance. The code is error-free, but is &lt;em&gt;semantically&lt;/em&gt; incorrect. It reflects poorly on the programmer.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Semantics 102&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Now apply this to document markup. If your document needs to present tabular data, then the appropriate tag would be &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. If you place navigation into a table however, then you&apos;re misusing the intended purpose of the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element. In the second case, you&apos;re not presenting tabular data -- you&apos;re (mis)using the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element to achieve a presentational goal.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Will visitors notice? No. Does your boss care? Maybe. Do we sometimes cut corners as programmers?  Sure. But should we?  No. Who benefits if you use semantic markup? You -- and your professional reputation. Now go and do the right thing.&lt;/p&gt;\n    ","\n&lt;p&gt;Obvious answer: See &lt;a href=&quot;http://csszengarden.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Zen Garden&lt;/a&gt;. If you tell me that you can easily do the same with a table-based layout (remember - the HTML isn&apos;t changing) then by all means use tables for layout.&lt;/p&gt;\n\n&lt;p&gt;Two other important things are accessibility and SEO.&lt;/p&gt;\n\n&lt;p&gt;Both care about in what order information is presented. You cannot easily present your navigation at the top of the page if your table-based layout puts it in the 3rd cell of the 2nd row of the 2nd nested table on the page.&lt;/p&gt;\n\n&lt;p&gt;So your answers are maintainability, accessibility and SEO.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t be lazy. Do things the right and proper way even if they are a bit harder to learn.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30251/tables-instead-of-divs#30271&quot;&gt;See this duplicate question.&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;One item you&apos;re forgetting there is accessibility.  Table-based layouts don&apos;t translate as well if you need to use a screen reader, for example.  And if you do work for the government, supporting accessible browsers like screen readers may be &lt;em&gt;required&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;I also think you underestimate the impact of some of the things you mentioned in the question.  For example, if you are both the designer and the programmer, you may not have a full appreciation of how well it separates presentation from content.  But once you get into a shop where they are two distinct roles the advantages start to become clearer.&lt;/p&gt;\n\n&lt;p&gt;If you know what you&apos;re doing and have good tools, CSS really does have significant advantages over tables for layout.  And while each item by itself may not justify abandoning tables, taken together it&apos;s generally worth it.&lt;/p&gt;\n    ","\n&lt;p&gt;Unfortunately, CSS Zen Garden can no longer be used as an example of good HTML/CSS design.  Virtually all of their recent designs use graphics for section heading.  These graphic files are specified in the CSS.&lt;/p&gt;\n\n&lt;p&gt;Hence, a website whose purpose is to show the advantage of keeping design out of content, now regularly commits the UNSPEAKABLE SIN of putting content into design.  (If the section heading in the HTML file were to change, the section heading displayed would not).&lt;/p&gt;\n\n&lt;p&gt;Which only goes to show that even those advocate the strict DIV &amp;amp; CSS religion, can&apos;t follow their own rules.   You may use that as a guideline in how closely you follow them.&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t the definitive argument, by any means, but with CSS you can take the same markup and change the layout depending on medium, which is a nice advantage. For a print page you can quietly suppress navigation without having to create a printer-friendly page, for example.&lt;/p&gt;\n    ","\n&lt;p&gt;One table for layout wouldn&apos;t be that bad.  But you can&apos;t get the layout you need with just one table most of the time.  Pretty soon you have 2 or three nested tables.  This becomes very cumbersome.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It IS a LOT harder to read.  That&apos;s not up to opinion.  There&apos;s just more nested tags with no identifying marks on them.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Separating content from presentation is a good thing because it allows you to focus on what you&apos;re doing.  Mixing the two leads to bloated pages that are hard to read.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;CSS for styles allows your browser to cache the files and subsequent requests are much faster.  This is HUGE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Tables lock you into a design.  Sure, not everyone needs the flexibility of CSS Zen Garden, but I&apos;ve never worked on a site where I didn&apos;t need to change the design a little bit here and there.  It&apos;s much easier with CSS.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Tables are hard to style.  You don&apos;t have very much flexibility with them (i.e. you still need to add HTML attributes to fully control a table&apos;s styles)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I haven&apos;t used tables for non-tabular data in probably 4 years.  I haven&apos;t looked back.&lt;/p&gt;\n\n&lt;p&gt;I&apos;d really like to suggest reading &lt;a href=&quot;http://cssmastery.com/&quot;&gt;CSS Mastery&lt;/a&gt; by Andy Budd.  It&apos;s fantastic.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://ecx.images-amazon.com/images/I/41TH5NFKPEL._SL500_BO2,204,203,200_PIsitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&quot;&gt;Image at ecx.images-amazon.com http://ecx.images-amazon.com/images/I/41TH5NFKPEL._SL500_BO2,204,203,200_PIsitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s good to separate content from layout&lt;br&gt;\n  But this is a fallacious argument; Cliche Thinking&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s a fallacious argument because HTML tables are layout!  The content is the &lt;em&gt;data&lt;/em&gt; in the table, the presentation is the table itself.  This is why separating CSS from HTML can be very difficult at times.  You&apos;re not separating content from presentation, you&apos;re separating presentation from presentation!  A pile of nested divs is no different than a table - it&apos;s just a different set of tags.  &lt;/p&gt;\n\n&lt;p&gt;The other problem with separating the HTML from the CSS is that they need intimate knowledge of one another - you really can&apos;t separate them fully.  The tag layout in the HTML is tightly coupled with the CSS file no matter what you do.&lt;/p&gt;\n\n&lt;p&gt;I think tables vs divs comes down to the needs of your application.  &lt;/p&gt;\n\n&lt;p&gt;In the application we develop at work, we needed a page layout where the pieces would dynamically size themselves to their content.  I spent days trying to get this to work cross-browser with CSS and DIVs and it was a complete nightmare.  We switched to tables and it all just &lt;em&gt;worked&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;However, we have a very closed audience for our product (we sell a piece of hardware with a web interface) and accessibility issues are not a concern for us.  I don&apos;t know why screen readers can&apos;t deal with tables well, but I guess if that&apos;s the way it is then developers have to handle it.&lt;/p&gt;\n    ","\n&lt;p&gt;CSS/DIV - it&apos;s just jobs for the design boys, isn&apos;t it.  The hundreds of hours I&apos;ve spent debugging DIV/CSS issues, searching the Internet to get some part of markup working with an obscure browser - it drives me mad.  You make one little change and the whole layout goes horrendously wrong - where on eath is the logic in that.  Spending hours moving something 3 pixels this way then something else 2 pixels the other to get them all to line up.  This just seems plain wrong to me somehow.  Just because you&apos;re a purist and something is &quot;not the right thing to do&quot; doesn&apos;t mean you should make use of it to the nth degree and under all circumstances, especially if it makes your life 1000 times easier.  &lt;/p&gt;\n\n&lt;p&gt;So I&apos;ve finally decided, purely on commercial grounds, although I keep use to minimum, if I anticipate 20 hours work to get a DIV placed correctly, I&apos;ll stick in a table.  It&apos;s wrong, it upsets the purists, but in most cases it costs less time and is cheaper to manage. I can then concentrate on getting the application working as the customer wants, rather than pleasing the purists.  They do pay the bills after all and my argument to a manager enforcing the use of CSS/DIV - I would merely point out the customers pay his salary as well!  &lt;/p&gt;\n\n&lt;p&gt;The only reason all these CSS/DIV arguments occur is because of the shortcoming of CSS in the first place and because the browsers aren&apos;t compatible with each other and if they were, half the web designers in the world would be out of a job.&lt;/p&gt;\n\n&lt;p&gt;When you design a windows form you don&apos;t try moving controls around after you have laid them out so I kind of think it&apos;s strange to me why you would you want to do this with a web form.  I simply can&apos;t understand this logic.  Get the layout right to start with and what&apos;s the problem.  I think it&apos;s because designers like to flirt with creativity, whilst application developers are more concerned with actually getting the application working, creating business objects, implementing business rules, working out how bits of customer data relates to each other, ensuring the thing meets the customers requirements - you know - like the real world stuff.  &lt;/p&gt;\n\n&lt;p&gt;Don&apos;t get me wrong, both arguments are valid, but please don&apos;t critise developers for choosing an easier, more logical approach to designing forms.  We often have more important things to worry about than the correct semantics of using a table over a div.&lt;/p&gt;\n\n&lt;p&gt;Case in point - based on this discussion I converted a few existing tds and trs to divs. 45 minutes messing about with it trying to get everything to line up next to each other and I gave up.  TDs back in 10 seconds later - works - straight away - on all browsers, nothing more to do.  Please try to make me understand - what possible justification do you have for wanting me to do it any other way!&lt;/p&gt;\n    ","\n&lt;p&gt;Layout should be easy. The fact that there are articles written on how to achieve a dynamic three column layout with header and footer in CSS shows that it is a poor layout system. Of course you can get it to work, but there are literally hundreds of articles online about how to do it. There are pretty much no such articles for a similar layout with tables because it&apos;s patently obvious. No matter what you say against tables and in favor of CSS, this one fact undoes it all: a basic three column layout in CSS is often called &quot;The Holy Grail&quot;.&lt;/p&gt;\n\n&lt;p&gt;If that doesn&apos;t make you say &quot;WTF&quot; then you really need to put down the kool-aid now.&lt;/p&gt;\n\n&lt;p&gt;I love CSS. It offers amazing styling options and some cool positioning tools, but as a layout engine it is deficient. There needs to be some type of dynamic grid positioning system. A straightforward way to align boxes on multiple axis without knowing their sizes first. I don&apos;t give a damn if you call it &amp;lt;table&amp;gt; or &amp;lt;gridlayout&amp;gt; or whatever, but this is a basic layout feature that is missing from CSS.&lt;/p&gt;\n\n&lt;p&gt;The larger problem is that by not admitting there are missing features, the CSS zealots have been holding CSS back from all it could be. I&apos;d be perfectly happy to stop using tables if CSS provided decent multi-axis grid positioning like basically every other layout engine in the world. (You do realize this problem has already been solved many times in many languages by everyone except the W3C, right? And nobody else denied that such a feature was useful.) &lt;/p&gt;\n\n&lt;p&gt;Sigh. Enough venting. Go ahead and stick your head back in the sand.&lt;/p&gt;\n    ","\n&lt;p&gt;According to 508 compliance (for screen readers for visually impared), tables should only be used to hold data and not for layout as it causes the screen readers to freak out.  Or so I&apos;ve been told.&lt;/p&gt;\n\n&lt;p&gt;If you assign names to each of the divs, you can skin them all together using CSS as well.  They&apos;re just a bit more of a pain to get to sit the way you need them to.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a section of html from a recent project:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{DYNAMIC(TITLE)}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Style-Type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;./styles/base.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page title --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Navigation items --&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;clearfix&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sidebar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page content --&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Footer content --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here&apos;s that same code as a table based layout.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{DYNAMIC(TITLE)}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Style-Type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;./styles/base.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;cellspacing&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page Title --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;Navitem&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;Navitem&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page content --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only cleanliness I see in that table based layout is the fact that I&apos;m overzealous with my indentation. I&apos;m sure that the content section would have a further two embedded tables.&lt;/p&gt;\n\n&lt;p&gt;Another thing to think about: &lt;strong&gt;filesizes&lt;/strong&gt;. I&apos;ve found that table-based layouts are twice the size of their CSS counterparts usually. On our hig-speed broadband that isn&apos;t a huge issue but it is on those with dial up modems.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d like to add that div-based layouts are easer to mantain, evolve, and refactor.  Just some changes in the CSS to reorder elements and it is done.  From my experience, redesign a layout that uses tables is a nightmare (more if there are nested tables).&lt;/p&gt;\n\n&lt;p&gt;Your code also has a meaning from a &lt;a href=&quot;http://en.wikipedia.org/wiki/Semantic_Web&quot; rel=&quot;nofollow noreferrer&quot;&gt;semantic&lt;/a&gt; point of view.&lt;/p&gt;\n    ","\n&lt;p&gt;No arguments in DIVs favour from me. &lt;/p&gt;\n\n&lt;p&gt;I&apos;d say : If the shoe fits, wear it.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s worth noting that it&apos;s difficult if not impossible to find a good DIV+CSS method of rendering contents in two or three columns, that is consistent on all browsers, and still looks just the way I intended.&lt;/p&gt;\n\n&lt;p&gt;This tips the balance a bit towards tables in most of my layouts, and altough I feel guilty of using them (dunny why, people just say it&apos;s bad so I try to listen to them), in the end , the pragmatic view is it&apos;s just easier and faster  for me to use TABLEs. I&apos;m not being payed by the hour, so tables are cheaper for me.&lt;/p&gt;\n    ","\n&lt;p&gt;CSS layouts are generally much better for accessibility, provided the content comes in a natural order and makes sense without a stylesheet.  And it&apos;s not just screen readers that struggle with table-based layouts: they also make it much harder for mobile browsers to render a page properly.&lt;/p&gt;\n\n&lt;p&gt;Also, with a div-based layout you can very easily do cool things with a print stylesheet such as excluding headers, footers and navigation from printed pages - I think it would be impossible, or at least much more difficult, to do that with a table-based layout.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re doubting that separation of content from layout is easier with divs than with tables, take a look at the div-based HTML at &lt;a href=&quot;http://www.csszengarden.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Zen Garden&lt;/a&gt;, see how changing the stylesheets can drastically change the layout, and think about whether you could achieve the same variety of layouts if the HTML was table based...  If you&apos;re doing a table-based layout, you&apos;re unlikely to be using CSS to control all the spacing and padding in the cells (if you were, you&apos;d almost certainly find it easier to use floating divs etc. in the first place).  Without using CSS to control all that, and because of the fact that tables specify the left-to-right and top-to bottom order of things in the HTML, tables tend to mean that your layout becomes very much fixed in the HTML.&lt;/p&gt;\n\n&lt;p&gt;Realistically I think it&apos;s very hard to completely change the layout of a div-and-CSS-based design without changing the divs a bit.  However, with a div-and-CSS-based layout it&apos;s much easier to tweak things like the spacing between various blocks, and their relative sizes.&lt;/p&gt;\n    ","\n&lt;p&gt;The fact that this is a hotly debated question is a testament to the failure of the W3C to anticipate the diversity of layout designs which would be attempted. Using divs+css for semantically-friendly layout is a great concept, but the details of implementation are so flawed that they actually limit creative freedom.&lt;/p&gt;\n\n&lt;p&gt;I attempted to switch one of our company&apos;s sites from tables to divs, and it was such a headache that I totally scrapped the hours of work I had poured into it and went back to tables. Trying to wrestle with my divs in order to gain control of vertical alignment has cursed me with major psychological issues that I will never shake as long as this debate rages on.&lt;/p&gt;\n\n&lt;p&gt;The fact that people must frequently come up with complex and ugly workarounds to accomplish simple design goals (such as vertical alignment) strongly suggests that the rules are not nearly flexible enough. If the specs ARE sufficient, then why do high-profile sites (like SO) find it necessary to bend the rules using tables and other workarounds?&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;I guess it&apos;s true that using the table element for layout has little to do with tabular data. So what? Does my boss care? Do my users care?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Google and other automated systems &lt;strong&gt;do&lt;/strong&gt; care, and they&apos;re just as important in many situations. Semantic code is easier for a non-intelligent system to parse and process.&lt;/p&gt;\n    ","\n&lt;p&gt;Having had to work with a website that involved 6 layers of nested tables generated by some application, and having had it generate invalid HTML, it was in fact a 3 hour job to rectify it breaking for a minor change. &lt;/p&gt;\n\n&lt;p&gt;This is of course the edge case, but table based design is unmaintainable. If you use css, you separate the style out so when fixing the HTML you have less to worry about breaking. &lt;/p&gt;\n\n&lt;p&gt;Also, try this with JavaScript.  Move a single table cell from one place to another place in another table. Rather complicated to perform where div/span would just work copy-paste-wise. &lt;/p&gt;\n\n&lt;p&gt;&quot;Does my boss care&quot; &lt;/p&gt;\n\n&lt;p&gt;If I were your boss. You would care. ;) If you value your life. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Layout flexibility&lt;/strong&gt;&lt;br&gt;\nImagine you&apos;re making a page with a large number of thumbnails.&lt;br&gt;\n&lt;strong&gt;DIVs&lt;/strong&gt;:&lt;br&gt;\nIf you put each thumbnail in a DIV, floated left, maybe 10 of them fit on a row. Make the window narrower, and BAM - it&apos;s 6 on a row, or 2, or however many fit.&lt;br&gt;\n&lt;strong&gt;TABLE:&lt;/strong&gt;&lt;br&gt;\nYou have to explicitly say how many cells are in a row. If the window is too narrow, the user has to scroll horizontally.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;&lt;br&gt;\nSame situation as above. Now you want to add three thumbnails to the third row.&lt;br&gt;\n&lt;strong&gt;DIVs:&lt;/strong&gt;&lt;br&gt;\nAdd them in. The layout will automatically adjust.&lt;br&gt;\n&lt;strong&gt;TABLE:&lt;/strong&gt;\nPaste the new cells into the third row. &lt;strong&gt;Oops!&lt;/strong&gt; Now there are too many items there. Cut some from that row and put them on the fourth row. Now there are too many items there. Cut some from that row... (etc)&lt;br&gt;\n(&lt;i&gt;Of course, if you&apos;re generating the rows and cells with server-side scripting, this probably won&apos;t be an issue.&lt;/i&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;I think that boat has sailed. If you look at the direction the industry has taken you will notice that CSS and Open Standards are the winners of that discussion. Which in turn means for most html work, with the exception of forms, the designers will use divs instead of tables. I have a hard time with that because I am not a CSS guru but thats the way it is. &lt;/p&gt;\n    ","\n&lt;p&gt;Also, don&apos;t forget, tables don&apos;t quite render well on mobile browsers. Sure, the iPhone has a kick-ass browser but everyone doesn&apos;t have an iPhone. Table rendering can be peanuts for modern browsers, but it&apos;s a bunch of watermelons for mobile browsers. &lt;/p&gt;\n\n&lt;p&gt;I have personally found that many people use too many &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, but in moderation, it can be extremely clean and easy to read. You mention that folks have a harder time reading CSS than tables; in terms of &apos;code&apos; that maybe true; but in terms of reading content (view &amp;gt; source) it is a heck of a lot easier to understand the structure with stylesheets than with tables.&lt;/p&gt;\n    ","\n&lt;p&gt;Looks like you are just used to tables and that&apos;s it.\nPutting layout in a table limits you for just that layout. With CSS you can move bits around, take a look at &lt;a href=&quot;http://csszengarden.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://csszengarden.com/&lt;/a&gt;\nAnd no, layout does not usally require a lot of nested divs.&lt;/p&gt;\n\n&lt;p&gt;With no tables for layout and proper semantics HTML is much cleaner, hence easier to read. \nWhy should someone who cannot understand CSS try to read it? And if someone considers himself to be webdeveloper then the good grasp of CSS is a must.&lt;/p&gt;\n\n&lt;p&gt;SEO benefits come from the ability to have most important content higher up the page and \nhaving better content-to-markup ratio.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.hotdesign.com/seybold/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.hotdesign.com/seybold/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;508 Compliance - the ability for a screenreader to make sense of your markup.&lt;/li&gt;\n&lt;li&gt;Waiting for render - tables don&apos;t render in the browser until it gets to the end of the &lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt; element.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The whole idea around semantic markup is the separation of markup and presentation, which includes layout.&lt;/p&gt;\n\n&lt;p&gt;Div&apos;s aren&apos;t replacing tables, they have their own use in separating content into blocks of related content (, ). When you don&apos;t have the skills and are relying on tables, you&apos;ll often have to separate your content in to cells in order to get the desired layout, but you wont need to touch the markup to achieve presentation when using semantic markup. This is really important when the markup is being generated rather than static pages.&lt;/p&gt;\n\n&lt;p&gt;Developers need to stop providing markup that implies layout so that those of us who do have the skills to present content can get on with our jobs, and developers don&apos;t have to come back to their code to make changes when presentation needs change.&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t really about whether &apos;divs are better than tables for layout&apos;. Someone who understands CSS can duplicate any design using &apos;layout tables&apos; pretty straightforwardly. The real win is using HTML elements for what they are there for. The reason you would not use tables for non-tablular data is the same reason you don&apos;t store integers as character strings - technology works much more easily when you use it for the purpose for which it is desgined. If it was ever necessary to use tables for layout (because of browser shortcomings in the early 1990s) it certainly isn&apos;t now.&lt;/p&gt;\n    ","\n&lt;p&gt;Tools that use table layouts can become extraordinarily heavy due to the amount of code required to create the layout. SAP&apos;s Netweaver Portal by default uses TABLE to layout their pages.&lt;/p&gt;\n\n&lt;p&gt;The production SAP portal at my current gig has a home page whose HTML weighs over 60K and goes seven tables deep, three times within the page.  Add in the Javascript, the misuse of 16 iframes with similar table issues inside of them, overly heavy CSS etc, and the page weighs over 5MB.  &lt;/p&gt;\n\n&lt;p&gt;Taking the time to lower the page weight so you can use your bandwidth to do engaging activities with users is worth the effort. &lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s worth figuring out CSS and divs so the central content column loads and renders before the sidebar in a page layout.  But if you are struggling to use floating divs to vertically align a logo with some sponsorship text, just use the table and move on with life.  The Zen garden religion just doesn&apos;t give much bang for the buck.&lt;/p&gt;\n\n&lt;p&gt;The idea of separating content from presentation is to partition the application so different kinds of work affect different blocks of code.  This is actually about change management.  But coding standards can only examine the present state of code in a superficial manner.&lt;/p&gt;\n\n&lt;p&gt;The change log for an application that depends on coding standards to &quot;separate content from presentation&quot; will show a pattern of parallel changes across vertical silos.  If a change to &quot;content&quot; is always accompanied by a change to &quot;presentation&quot;, how successful is the partitioning?&lt;/p&gt;\n\n&lt;p&gt;If you really want to partition your code productively, use Subversion and review your change logs.  Then use the simplest coding techniques -- divs, tables, JavaScript, includes, functions, objects, continuations, whatever -- to structure the application so that the changes fit in a simple and comfortable manner.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it&apos;s HELL to maintain a site that uses tables, and takes a LOT longer to code. If you&apos;re scared of floating divs, go take a course in them. They&apos;re not difficult to understand and they&apos;re approximately 100 times more efficient and a million times less a pain in the ass (unless you don&apos;t understand them -- but hey, welcome to the world of computers).&lt;/p&gt;\n\n&lt;p&gt;Anyone considering doing their layout with a table better not expect me to maintain it. It&apos;s the most ass-backwards way to render a website. Thank god we have a much better alternative now. I would NEVER go back.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s scary that some folks might not be aware of the time and energy benefits from creating a site using modern tools.&lt;/p&gt;\n    ","\n&lt;p&gt;Tables are not &lt;em&gt;in general&lt;/em&gt; easier or more maintainable than CSS. However, there are a few &lt;em&gt;specific&lt;/em&gt; layout-problems where tables are indeed the simplest and most flexible solution.&lt;/p&gt;\n\n&lt;p&gt;CSS is clearly preferable in cases where presentational markup and CSS support the same kind of design, no one in their right mind would argue that &lt;code&gt;font&lt;/code&gt;-tags are better than specifying typography in CSS, since CSS gives you the same power than &lt;code&gt;font&lt;/code&gt;-tags, but in a much cleaner way.&lt;/p&gt;\n\n&lt;p&gt;The issue with tables, however, is basically that the table-layout model in CSS is not supported in Microsoft Internet Explorer. Tables and CSS are therefore &lt;em&gt;not&lt;/em&gt; equivalent in power. The missing part is the &lt;strong&gt;grid-like behavior&lt;/strong&gt; of tables, where the edges of cells align both vertically and horizontally, while cells still expand to contain their content. This behavior is not easy to achieve in pure CSS without hardcoding some dimensions, which makes the design rigid and brittle (as long as we have to support Internet Explorer - in other browsers this is easliy achieved by using &lt;code&gt;display:table-cell&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;So it&apos;s not really a question of whether tables or CSS is preferable, but it is a question of recognizing the specific cases where use of tables may make the layout more flexible.&lt;/p&gt;\n\n&lt;p&gt;The most important reason for &lt;em&gt;not&lt;/em&gt; using tables is accessibility. The Web Content Accessibility Guidelines &lt;a href=&quot;http://www.w3.org/TR/WCAG10/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.w3.org/TR/WCAG10/&lt;/a&gt; advice againt using tables for layout. If you are concerned about accessibility (and in some cases you may be legally obliged to), you should use CSS even if tables are simpler. Note that you can &lt;em&gt;always&lt;/em&gt; create the same layout with CSS as with tables, it might just require more work.&lt;/p&gt;\n    ","\n&lt;p&gt;I was surprised to see some issues were not already covered, so here are my 2 cents, in addition to all the very valid points made earlier:&lt;/p&gt;\n\n&lt;p&gt;.1. &lt;strong&gt;CSS &amp;amp; SEO:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;a) CSS used to have a very significant impact on SEO by allowing to position the content in the page wherever you want. A few years ago, Search Engines were giving a significant emphasis to &quot;on-page&quot; factors. Something at the top of the page was deemed more relevant to the page than something located at the bottom. &quot;Top of the page&quot; for a spider meant &quot;at the beginning of the code&quot;. Using CSS, you could organize your keyword-rich content at the beginning of the code, and still position it wherever you liked in the page. This is still somewhat relevant, but on page factors are less and less important for page ranking.&lt;/p&gt;\n\n&lt;p&gt;b) When the layout is moved over to CSS, the HTML page is lighter and therefore loads faster for a search engine spider. (spiders don&apos;t bother downloading external css files). Fast loading pages is an important ranking consideration for several search engines, including Google&lt;/p&gt;\n\n&lt;p&gt;c) SEO work often requires testing and changing things, which is much more convenient with a CSS based layout&lt;/p&gt;\n\n&lt;p&gt;.2. &lt;strong&gt;Generated content:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A table is considerably easier to generate programmically than the equivalent CSS layout.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;foreach ($comment as $key=&amp;gt;$value)\n{\n   echo &quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$key&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$value&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Generating a table is simple and safe. It is self-contained and integrates well within any template. To do the same with CSS is considerably harder and may be of no benefit at all: hard to edit the CSS stylesheet on the flight, and adding the style inline is no different from using a table (content is not separated from layout).&lt;/p&gt;\n\n&lt;p&gt;Further, when a table is generated, the content (in variables) is already separated from the layout (in code), making it as easy to modify.&lt;/p&gt;\n\n&lt;p&gt;This is one reason why some very well designed websites (SO for instance) still use table layouts.&lt;/p&gt;\n\n&lt;p&gt;Of course, if the results need to be acted upon through JavaScript, divs are worth the trouble. &lt;/p&gt;\n\n&lt;p&gt;.3. &lt;strong&gt;Quick conversion testing&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When figuring out what works for a specific audience, it is useful to be able to change the layout in various ways to figure out what gets the best results. A CSS based layout makes things considerably easier&lt;/p&gt;\n\n&lt;p&gt;.4. &lt;strong&gt;Different solutions for different problems&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Layout tables are usually dissed because &quot;everybody knows divs &amp;amp; CSS&quot; are the way to go. &lt;/p&gt;\n\n&lt;p&gt;However the fact remains that tables are faster to create, easier to understand and are more robust than most CSS layouts. (Yes, CSS can be as robust, but a quick look through the net on different browsers and screen resolutions shows it&apos;s not often the case)&lt;/p&gt;\n\n&lt;p&gt;There are a lot of downsides to tables, including maintenance, lack of flexibility... but let&apos;s not throw the baby with the bath water. There are plenty of professional uses for a solution which is both quick and reliable. &lt;/p&gt;\n\n&lt;p&gt;Some time ago, I had to rewrite a clean and simple CSS layout using tables because a significant portion of the users would be using an older version of IE with really bad support for CSS&lt;/p&gt;\n\n&lt;p&gt;I, for one, am sick and tired of the knee-jerk reaction &quot;Oh noes! Tables for layout!&quot;&lt;/p&gt;\n\n&lt;p&gt;As for the &quot;it wasn&apos;t intended for that purpose and therefore you shouldn&apos;t use it this way&quot; crowd, isn&apos;t that hypocrisy? What do you think of all the CSS tricks you have to use to get the darn thing working in most browsers? Were they meant for that purpose?&lt;/p&gt;\n    "],"id":363,"title":"Why not use tables for layout in HTML? [closed]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLightbulb&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M15 6.38A6.48 6.48 0 0 0 7.78.04h-.02A6.49 6.49 0 0 0 2.05 5.6a6.31 6.31 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0 0 15 6.37ZM4.03 5.85A4.49 4.49 0 0 1 8 2.02a4.48 4.48 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 0 1-1.64-3.94ZM10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2h3Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        As it currently stands, this question is not a good fit for our Q&amp;amp;A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, &lt;a href=&quot;/help/reopen-questions&quot;&gt;visit the help center&lt;/a&gt; for guidance.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2011-12-02 15:21:56Z&quot; class=&quot;relativetime&quot;&gt;10 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Locked&lt;/b&gt;. This question and its answers are &lt;a href=&quot;/help/locked-posts&quot;&gt;locked&lt;/a&gt; because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;It seems to be the &lt;a href=&quot;https://stackoverflow.com/questions/82391/should-tables-be-avoided-in-html-at-any-cost#82402&quot;&gt;general opinion&lt;/a&gt; that tables should not be used for layout in HTML. &lt;/p&gt;\n\n&lt;p&gt;Why?&lt;/p&gt;\n\n&lt;p&gt;I have never (or rarely to be honest) seen good arguments for this. The usual answers are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It&apos;s good to &lt;a href=&quot;https://stackoverflow.com/questions/82391/should-tables-be-avoided-in-html-at-any-cost#82422&quot;&gt;separate content from layout&lt;/a&gt;&lt;br&gt;But this is a fallacious argument; &lt;a href=&quot;http://www.don-lindsay-archive.org/skeptic/arguments.html#cliche&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cliche Thinking&lt;/a&gt;. I guess it&apos;s true that using the table element for layout has little to do with tabular data. So what? Does my boss care? Do my users care?&lt;br&gt;&lt;br&gt;Perhaps me or my fellow developers who have to maintain a web page care... Is a table less maintainable? I think using a table is &lt;a href=&quot;https://stackoverflow.com/questions/82391/should-tables-be-avoided-in-html-at-any-cost#82571&quot;&gt;easier&lt;/a&gt; than using divs and CSS.&lt;br&gt;&lt;br&gt;By the way... why is using a div or a span good separation of content from layout and a table not? Getting a good layout with only divs often requires a lot of nested divs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Readability of the code&lt;br&gt;I think it&apos;s the other way around. Most people understand HTML, few understand CSS.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It&apos;s better for SEO not to use tables&lt;br&gt;Why? Can anybody show some evidence that it is? Or a statement from Google that tables are discouraged from an SEO perspective?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Tables are slower.&lt;br&gt;An extra tbody element has to be inserted. This is peanuts for modern web browsers. Show me some benchmarks where the use of a table significantly slows down a page.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A layout overhaul is easier without tables, see &lt;a href=&quot;http://csszengarden.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;css Zen Garden&lt;/a&gt;.&lt;br&gt;Most web sites that need an upgrade need new content (HTML) as well. Scenarios where a new version of a web site only needs a new CSS file are not very likely. Zen Garden is a nice web site, but a bit theoretical. Not to mention its &lt;a href=&quot;https://stackoverflow.com/questions/83073/div-vs-table#83639&quot;&gt;misuse&lt;/a&gt; of CSS.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I am really interested in good arguments to use divs + CSS instead of tables.&lt;/p&gt;\n    ","slug":"why-not-use-tables-for-layout-in-html-closed-1657387752327","postType":"QUESTION","createdAt":"2022-07-09T17:29:12.000Z","updatedAt":"2022-07-09T17:29:12.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"},{"title":"Why does printf not flush after the call unless a newline is in the format string?","slug":"why-does-printf-not-flush-after-the-call-unless-a-newline-is-in-the-format-string-1657387853407"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":"UnboundLocalError on local variable when reassigned after first use","slug":"unboundlocalerror-on-local-variable-when-reassigned-after-first-use-1657387685248"},{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"How do I select rows from a DataFrame based on column values?","slug":"how-do-i-select-rows-from-a-dataframe-based-on-column-values-1657384901065"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Default constructor with empty brackets","slug":"default-constructor-with-empty-brackets-1657388246967"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"Why is using 'eval' a bad practice?","slug":"why-is-using-'eval'-a-bad-practice-1657387348760"},{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()","slug":"truth-value-of-a-series-is-ambiguous.-use-a.empty-a.bool()-a.item()-a.any()-or-a.all()-1657387724259"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"How do I access previous promise results in a .then() chain?","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386"},{"title":"Understanding slicing","slug":"understanding-slicing-1657384397680"},{"title":"What is the best algorithm for overriding GetHashCode?","slug":"what-is-the-best-algorithm-for-overriding-gethashcode-1657387848932"},{"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093"}]},"__N_SSG":true}