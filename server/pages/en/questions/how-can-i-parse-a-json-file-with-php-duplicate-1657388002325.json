{"pageProps":{"data":{"answer":["\n&lt;p&gt;To iterate over a multidimensional array, you can use &lt;a href=&quot;http://us2.php.net/manual/en/recursivearrayiterator.getchildren.php&quot; rel=&quot;noreferrer&quot;&gt;RecursiveArrayIterator&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$jsonIterator&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;RecursiveIteratorIterator&lt;/span&gt;(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;RecursiveArrayIterator&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;)),\n    &lt;span class=&quot;hljs-title class_&quot;&gt;RecursiveIteratorIterator&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;SELF_FIRST&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$jsonIterator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$key&lt;/span&gt;:\\n&quot;&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-subst&quot;&gt;$val&lt;/span&gt;\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;John:\nstatus =&amp;gt; Wait\nJennifer:\nstatus =&amp;gt; Active\nJames:\nstatus =&amp;gt; Active\nage =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;\ncount =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nprogress =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;\nbad =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://codepad.org/Gtk8DqJE&quot; rel=&quot;noreferrer&quot;&gt;run on codepad&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t believe so many people are posting answers without reading the JSON properly.&lt;/p&gt;\n\n&lt;p&gt;If you foreach iterate &lt;code&gt;$json_a&lt;/code&gt; alone, you have an object of objects. Even if you pass in &lt;code&gt;true&lt;/code&gt; as the second parameter, you have a two-dimensional array. If you&apos;re looping through the first dimension you can&apos;t just echo the second dimension like that. So this is wrong:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; : &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To echo the statuses of each person, try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// deal with error...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// deal with error...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person_name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person_a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The most elegant solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;shipments.js&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remember that the json-file has to be encoded in UTF-8 without BOM. If the file has BOM, then json_decode will return NULL.&lt;/p&gt;\n\n&lt;p&gt;Alternatively:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;shipments.js&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s completely beyond me that no one pointed out that your begining &quot;tags&quot; are wrong. You&apos;re creating an object with {}, while you could create an array with []. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[ &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- Note that I changed this&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// And moved the name here.&lt;/span&gt;\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wait&quot;&lt;/span&gt;\n    },\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jennifer&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Active&quot;&lt;/span&gt;\n    },\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;James&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Active&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;count&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;progress&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;bad&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    }\n] &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- And this.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this change, the json will be parsed as an array instead of an object. And with that array, you can do whatever you want, like loops etc. &lt;/p&gt;\n    ","\n&lt;p&gt;Try This&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    &lt;span class=&quot;hljs-variable&quot;&gt;$json_data&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{\n    &quot;John&quot;: {\n        &quot;status&quot;:&quot;Wait&quot;\n    },\n    &quot;Jennifer&quot;: {\n        &quot;status&quot;:&quot;Active&quot;\n    },\n    &quot;James&quot;: {\n        &quot;status&quot;:&quot;Active&quot;,\n        &quot;age&quot;:56,\n        &quot;count&quot;:10,\n        &quot;progress&quot;:0.0029857,\n        &quot;bad&quot;:0\n      }\n     }&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$decode_data&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_data&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$decode_data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;){\n\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&amp;gt;&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br /&amp;gt;&apos;&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&amp;gt;&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br /&amp;gt;&apos;&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;More standard answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$jsondata&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(PATH_TO_JSON_FILE.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/jsonfile.json&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$jsondata&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;b&amp;gt;Name: &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/b&amp;gt;&amp;lt;/br&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_keys&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;amp;nbsp;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ucfirst&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/br&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;endforeach&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;endforeach&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the output is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;Name: John\n Status = Wait\nName: Jennifer\n Status = Active\nName: James\n Status = Active\n Age = &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;\n Count = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n Progress = &lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;\n Bad = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Loop through the JSON with a &lt;code&gt;foreach&lt;/code&gt; loop as key-value pairs. Do type-checking to determine if more looping needs to be done.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;gettype&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-comment&quot;&gt;# and so on&lt;/span&gt;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{\n    &quot;response&quot;: {\n        &quot;data&quot;: [{&quot;identifier&quot;: &quot;Be Soft Drinker, Inc.&quot;, &quot;entityName&quot;: &quot;BusinessPartner&quot;}],\n        &quot;status&quot;: 0,\n        &quot;totalRows&quot;: 83,\n        &quot;startRow&quot;: 0,\n        &quot;endRow&quot;: 82\n    }\n}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//echo &apos;&amp;lt;pre&amp;gt;&apos;; print_r($json); exit;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;identifier&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;entityName&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;totalRows&apos;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;startRow&apos;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;endRow&apos;&lt;/span&gt;]; \n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)\n {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; : &apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;)\n   {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you decode a json string, you will get an object. not an array. So the best way to see the structure you are getting, is to make a var_dump of the decode. (this var_dump can help you understand the structure, mainly in complex cases).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n     &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/michael/test.json&apos;&lt;/span&gt;);\n     &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n     &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to see the structure. It will help you for future cases&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;){\n         &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;-&amp;gt;status;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n     }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_o&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$personal&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person&lt;/span&gt;. &lt;span class=&quot;hljs-string&quot;&gt;&quot; with &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$personal&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The quickest way to echo all json values is using loop in loop, the first loop is going to get all the objects and the second one the values...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$object&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$object&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You have to give like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;]; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jennifer&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;];\n\nbr inside &amp;lt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which gives the result :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;wait\nactive\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am using below code for converting json to array in &lt;code&gt;PHP&lt;/code&gt;,\nIf JSON is valid then &lt;code&gt;json_decode()&lt;/code&gt; works well, and will return an array,\nBut in case of malformed JSON It will return &lt;code&gt;NULL&lt;/code&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonDecode1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In case of malformed JSON, it will return NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;jsonDecode1&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;) );\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If in case of malformed JSON, you are expecting only array, then you can use this function,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonDecode2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;) &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In case of malformed JSON, it will return an empty array()&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;jsonDecode2&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;) );\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If in case of malformed JSON, you want to stop code execution, then you can use this function,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonDecode3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;) &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_last_error&lt;/span&gt;())){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ErrorException&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_last_error_msg&lt;/span&gt;() );\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In case of malformed JSON, Fatal error will be generated&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;jsonDecode3&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;) );\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":446,"title":"How can I parse a JSON file with PHP? [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has an answer here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/29308898/how-to-extract-and-access-data-from-json-with-php&quot; dir=&quot;ltr&quot;&gt;How to extract and access data from JSON with PHP?&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (1 answer)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2022-05-26 13:55:23Z&quot; class=&quot;relativetime&quot;&gt;last month&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I tried to parse a JSON file using PHP. But I am stuck now.&lt;/p&gt;\n&lt;p&gt;This is the content of my JSON file:&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wait&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;Jennifer&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Active&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;James&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Active&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;progress&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;bad&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And this is what I have tried so far:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;][status];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jennifer&apos;&lt;/span&gt;][status];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But because I don&apos;t know the names (like &lt;code&gt;&apos;John&apos;&lt;/code&gt;, &lt;code&gt;&apos;Jennifer&apos;&lt;/code&gt;) and all available keys and values (like &lt;code&gt;&apos;age&apos;&lt;/code&gt;, &lt;code&gt;&apos;count&apos;&lt;/code&gt;) beforehand, I think I need to create some foreach loop.&lt;/p&gt;\n&lt;p&gt;I would appreciate an example for this.&lt;/p&gt;\n    ","slug":"how-can-i-parse-a-json-file-with-php-duplicate-1657388002325","postType":"QUESTION","createdAt":"2022-07-09T17:33:22.000Z","updatedAt":"2022-07-09T17:33:22.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"UTF-8 all the way through","slug":"utf-8-all-the-way-through-1657384323434"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"Order Bars in ggplot2 bar graph","slug":"order-bars-in-ggplot2-bar-graph-1657388099080"},{"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981"},{"title":"How to return DataSnapshot value as a result of a method?","slug":"how-to-return-datasnapshot-value-as-a-result-of-a-method-1657387538165"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"Scroll to an element with jQuery","slug":"scroll-to-an-element-with-jquery-1657388523178"},{"title":"The Use of Multiple JFrames: Good or Bad Practice? [closed]","slug":"the-use-of-multiple-jframes:-good-or-bad-practice-closed-1657384478184"},{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216"},{"title":"Selecting and manipulating CSS pseudo-elements such as ::before and ::after using javascript (or jQuery)","slug":"selecting-and-manipulating-css-pseudo-elements-such-as-::before-and-::after-using-javascript-(or-jquery)-1657387406132"},{"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"Cross-thread operation not valid: Control accessed from a thread other than the thread it was created on","slug":"cross-thread-operation-not-valid:-control-accessed-from-a-thread-other-than-the-thread-it-was-created-on-1657387659019"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429"},{"title":"Why is 24.0000 not equal to 24.0000 in MATLAB?","slug":"why-is-24.0000-not-equal-to-24.0000-in-matlab-1657388376753"}]},"__N_SSG":true}