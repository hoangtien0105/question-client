{"pageProps":{"data":{"answer":["\n&lt;p&gt;Use &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;GroupBy.sum&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;]).&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;()\n\nOut[&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;]: \n               Number\nFruit   Name         \nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n        Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n        Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n        Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n        Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n        Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also you can use agg function,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].agg(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to keep the original columns &lt;code&gt;Fruit&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt;, use &lt;code&gt;reset_index()&lt;/code&gt;. Otherwise &lt;code&gt;Fruit&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; will become part of the index. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;().reset_index()\n\nFruit   Name       Number\nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\nApples  Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nApples  Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\nGrapes  Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\nGrapes  Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\nOranges Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\nOranges Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As seen in the other answers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;()\n\n               Number\nFruit   Name         \nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n        Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n        Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n        Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n        Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n        Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Both the other answers accomplish what you want.  &lt;/p&gt;\n\n&lt;p&gt;You can use the &lt;code&gt;pivot&lt;/code&gt; functionality to arrange the data in a nice table&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;],as_index = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;().pivot(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;).fillna(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n\n\n\nName    Bob     Mike    Steve   Tom    Tony\nFruit                   \nApples  &lt;span class=&quot;hljs-number&quot;&gt;16.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;10.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;35.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;87.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;67.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;57.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can select different columns to sum numbers. &lt;/p&gt;\n    ","\n&lt;p&gt;A variation on the .agg() function; provides the ability to (1) persist type DataFrame, (2) apply averages, counts, summations, etc. and (3) enables groupby on multiple columns while maintaining legibility. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;att1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;att2&apos;&lt;/span&gt;]).agg({&lt;span class=&quot;hljs-string&quot;&gt;&apos;att1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;count&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;att3&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;sum&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;att4&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;mean&apos;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;using your values... &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;]).agg({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;sum&quot;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can set the &lt;code&gt;groupby&lt;/code&gt; column to  &lt;code&gt;index&lt;/code&gt;  then using &lt;code&gt;sum&lt;/code&gt; with &lt;code&gt;level&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.set_index([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;]).&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(level=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;175&lt;/span&gt;]: \n               Number\nFruit   Name         \nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n        Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n        Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n        Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n        Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n        Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could also use &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html&quot; rel=&quot;noreferrer&quot;&gt;transform()&lt;/a&gt; on column &lt;code&gt;Number&lt;/code&gt; after group by. This operation will calculate the total number in one group with function &lt;code&gt;sum&lt;/code&gt;, the result is a series with the same index as original dataframe.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;] = df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].transform(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;)\ndf = df.drop_duplicates(subset=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;]).drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Date&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, you can drop the duplicate rows on column &lt;code&gt;Fruit&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt;. Moreover, you can drop the column &lt;code&gt;Date&lt;/code&gt; by specifying axis &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt; for rows and &lt;code&gt;1&lt;/code&gt; for columns).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# print(df)&lt;/span&gt;\n\n      Fruit   Name  Number\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    Apples    Bob      &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    Apples   Mike       &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    Apples  Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   Oranges    Bob      &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   Oranges    Tom      &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   Oranges   Mike      &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   Oranges   Tony       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;   Grapes    Bob      &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;   Grapes    Tom      &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;   Grapes   Tony      &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# You could achieve the same result with functions discussed by others: &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# print(df.groupby([&apos;Fruit&apos;, &apos;Name&apos;], as_index=False)[&apos;Number&apos;].sum())&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# print(df.groupby([&apos;Fruit&apos;, &apos;Name&apos;], as_index=False)[&apos;Number&apos;].agg(&apos;sum&apos;))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is an official tutorial &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html&quot; rel=&quot;noreferrer&quot;&gt;Group by: split-apply-combine&lt;/a&gt; talking about what you can do after group by.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use dfsql&lt;br&gt;\nfor your problem, it will look something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.sql(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT fruit, sum(number) GROUP BY fruit&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/mindsdb/dfsql&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/mindsdb/dfsql&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;here is an article about it:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://medium.com/riselab/why-every-data-scientist-using-pandas-needs-modin-bringing-sql-to-dataframes-3b216b29a7c0&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://medium.com/riselab/why-every-data-scientist-using-pandas-needs-modin-bringing-sql-to-dataframes-3b216b29a7c0&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you want the aggregated column to have a custom name such as &lt;code&gt;Total Number&lt;/code&gt;, &lt;code&gt;Total&lt;/code&gt; etc. (all the solutions on here results in a dataframe where the aggregate column is named &lt;code&gt;Number&lt;/code&gt;), use named aggregation:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;], as_index=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).agg(**{&lt;span class=&quot;hljs-string&quot;&gt;&apos;Total Number&apos;&lt;/span&gt;: (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;)})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or (if the custom name doesn&apos;t need to have a white space in it):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;], as_index=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).agg(Total=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this is equivalent to SQL query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Fruit, Name, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(Number) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; df \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Fruit, Name\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Speaking of SQL, there&apos;s &lt;code&gt;pandasql&lt;/code&gt; module that allows you to query pandas dataFrames in the local environment using SQL syntax. It&apos;s not part of Pandas, so will have to be installed separately.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#! pip install pandasql&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pandasql &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sqldf\nsqldf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nSELECT Fruit, Name, sum(Number) AS Total\nFROM df \nGROUP BY Fruit, Name\n&quot;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":415,"title":"How do I Pandas group-by to get sum?","content":"\n                \n&lt;p&gt;I am using this data frame:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Fruit   Date      Name  Number\nApples  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\nApples  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob    &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\nApples  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Mike   &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nApples  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Steve &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nApples  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Tom   &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Mike  &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob   &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Tony   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Tom   &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob   &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Bob   &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt; Tony  &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I want to aggregate this by &lt;code&gt;Name&lt;/code&gt; and then by &lt;code&gt;Fruit&lt;/code&gt; to get a total number of &lt;code&gt;Fruit&lt;/code&gt; per &lt;code&gt;Name&lt;/code&gt;. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Bob,Apples,&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I tried grouping by &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Fruit&lt;/code&gt; but how do I get the total number of Fruit?&lt;/p&gt;\n    ","slug":"how-do-i-pandas-group-by-to-get-sum-1657387908708","postType":"QUESTION","createdAt":"2022-07-09T17:31:48.000Z","updatedAt":"2022-07-09T17:31:48.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to create a GUID / UUID","slug":"how-to-create-a-guid-uuid-1657387749530"},{"title":"What is the difference between == and equals() in Java?","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654"},{"title":"R cannot be resolved - Android error","slug":"r-cannot-be-resolved-android-error-1657388526258"},{"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348"},{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"},{"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"Randomize a List<T>","slug":"randomize-a-listlesstgreater-1657388172793"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"How do we control web page caching, across all browsers?","slug":"how-do-we-control-web-page-caching-across-all-browsers-1657387529059"},{"title":"How to deal with SettingWithCopyWarning in Pandas","slug":"how-to-deal-with-settingwithcopywarning-in-pandas-1657384778377"},{"title":"In CSS Flexbox, why are there no \"justify-items\" and \"justify-self\" properties?","slug":"in-css-flexbox-why-are-there-no-\"justify-items\"-and-\"justify-self\"-properties-1657384782711"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"Is there a \"previous sibling\" selector?","slug":"is-there-a-\"previous-sibling\"-selector-1657384771067"},{"title":"When should I wrap quotes around a shell variable?","slug":"when-should-i-wrap-quotes-around-a-shell-variable-1657384659265"},{"title":"Generating random whole numbers in JavaScript in a specific range","slug":"generating-random-whole-numbers-in-javascript-in-a-specific-range-1657388112728"},{"title":"How do I get PHP errors to display?","slug":"how-do-i-get-php-errors-to-display-1657384570095"},{"title":"How can I prevent SQL injection in PHP?","slug":"how-can-i-prevent-sql-injection-in-php-1657384220094"}]},"__N_SSG":true}