{"pageProps":{"data":{"answer":["\n&lt;p&gt;Caveat: It is &lt;em&gt;not&lt;/em&gt; necessary to put the implementation in the header file, see the alternative solution at the end of this answer.&lt;/p&gt;\n\n&lt;p&gt;Anyway, the reason your code is failing is that, when instantiating a template, the compiler creates a new class with the given template argument. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    T bar;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T param)&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff using T */&lt;/span&gt;}\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// somewhere in a .cpp&lt;/span&gt;\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; f; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When reading this line, the compiler will create a new class (let&apos;s call it &lt;code&gt;FooInt&lt;/code&gt;), which is equivalent to the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooInt&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; bar;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; param)&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff using int */&lt;/span&gt;}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Consequently, the compiler needs to have access to the implementation of the methods, to instantiate them with the template argument (in this case &lt;code&gt;int&lt;/code&gt;). If these implementations were not in the header, they wouldn&apos;t be accessible, and therefore the compiler wouldn&apos;t be able to instantiate the template.&lt;/p&gt;\n\n&lt;p&gt;A common solution to this is to write the template declaration in a header file, then implement the class in an implementation file (for example .tpp), and include this implementation file at the end of the header.&lt;/p&gt;\n\n&lt;p&gt;Foo.h&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T param)&lt;/span&gt;&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Foo.tpp&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Foo.tpp&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; Foo&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;doSomething&lt;/span&gt;(T param)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//implementation&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, implementation is still separated from declaration, but is accessible to the compiler.&lt;/p&gt;\n\n&lt;h1&gt;Alternative solution&lt;/h1&gt;\n\n&lt;p&gt;Another solution is to keep the implementation separated, and explicitly instantiate all the template instances you&apos;ll need:&lt;/p&gt;\n\n&lt;p&gt;Foo.h&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// no implementation&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; { ... };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Foo.cpp&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// implementation of Foo&apos;s methods&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// explicit instantiations&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// You will only be able to use Foo with int or float&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If my explanation isn&apos;t clear enough, you can have a look at the &lt;a href=&quot;https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl&quot; rel=&quot;noreferrer&quot;&gt;C++ Super-FAQ on this subject&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s because of the requirement for separate compilation and because templates are instantiation-style polymorphism.&lt;/p&gt;\n\n&lt;p&gt;Lets get a little closer to concrete for an explanation. Say I&apos;ve got the following files:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;foo.h\n&lt;ul&gt;\n&lt;li&gt;declares the interface of &lt;code&gt;class MyClass&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;foo.cpp\n&lt;ul&gt;\n&lt;li&gt;defines the implementation of &lt;code&gt;class MyClass&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;bar.cpp\n&lt;ul&gt;\n&lt;li&gt;uses &lt;code&gt;MyClass&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Separate compilation means I should be able to compile &lt;strong&gt;foo.cpp&lt;/strong&gt; independently from &lt;strong&gt;bar.cpp&lt;/strong&gt;. The compiler does all the hard work of analysis, optimization, and code generation on each compilation unit completely independently; we don&apos;t need to do whole-program analysis. It&apos;s only the linker that needs to handle the entire program at once, and the linker&apos;s job is substantially easier.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;bar.cpp&lt;/strong&gt; doesn&apos;t even need to exist when I compile &lt;strong&gt;foo.cpp&lt;/strong&gt;, but I should still be able to link the &lt;strong&gt;foo.o&lt;/strong&gt; I already had together with the &lt;strong&gt;bar.o&lt;/strong&gt; I&apos;ve only just produced, without needing to recompile &lt;strong&gt;foo.cpp&lt;/strong&gt;. &lt;strong&gt;foo.cpp&lt;/strong&gt; could even be compiled into a dynamic library, distributed somewhere else without &lt;strong&gt;foo.cpp&lt;/strong&gt;, and linked with code they write years after I wrote &lt;strong&gt;foo.cpp&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&quot;Instantiation-style polymorphism&quot; means that the template &lt;code&gt;MyClass&amp;lt;T&amp;gt;&lt;/code&gt; isn&apos;t really a generic class that can be compiled to code that can work for any value of &lt;code&gt;T&lt;/code&gt;. That would add overhead such as boxing, needing to pass function pointers to allocators and constructors, etc. The intention of C++ templates is to avoid having to write nearly identical &lt;code&gt;class MyClass_int&lt;/code&gt;, &lt;code&gt;class MyClass_float&lt;/code&gt;, etc, but to still be able to end up with compiled code that is mostly as if we &lt;em&gt;had&lt;/em&gt; written each version separately. So a template is &lt;em&gt;literally&lt;/em&gt; a template; a class template is &lt;em&gt;not&lt;/em&gt; a class, it&apos;s a recipe for creating a new class for each &lt;code&gt;T&lt;/code&gt; we encounter. A template cannot be compiled into code, only the result of instantiating the template can be compiled.&lt;/p&gt;\n\n&lt;p&gt;So when &lt;strong&gt;foo.cpp&lt;/strong&gt; is compiled, the compiler can&apos;t see &lt;strong&gt;bar.cpp&lt;/strong&gt; to know that &lt;code&gt;MyClass&amp;lt;int&amp;gt;&lt;/code&gt; is needed. It can see the template &lt;code&gt;MyClass&amp;lt;T&amp;gt;&lt;/code&gt;, but it can&apos;t emit code for that (it&apos;s a template, not a class). And when &lt;strong&gt;bar.cpp&lt;/strong&gt; is compiled, the compiler can see that it needs to create a &lt;code&gt;MyClass&amp;lt;int&amp;gt;&lt;/code&gt;, but it can&apos;t see the template &lt;code&gt;MyClass&amp;lt;T&amp;gt;&lt;/code&gt; (only its interface in &lt;strong&gt;foo.h&lt;/strong&gt;) so it can&apos;t create it.&lt;/p&gt;\n\n&lt;p&gt;If &lt;strong&gt;foo.cpp&lt;/strong&gt; itself uses &lt;code&gt;MyClass&amp;lt;int&amp;gt;&lt;/code&gt;, then code for that will be generated while compiling &lt;strong&gt;foo.cpp&lt;/strong&gt;, so when &lt;strong&gt;bar.o&lt;/strong&gt; is linked to &lt;strong&gt;foo.o&lt;/strong&gt; they can be hooked up and will work. We can use that fact to allow a finite set of template instantiations to be implemented in a .cpp file by writing a single template. But there&apos;s no way for &lt;strong&gt;bar.cpp&lt;/strong&gt; to use the template &lt;em&gt;as a template&lt;/em&gt; and instantiate it on whatever types it likes; it can only use pre-existing versions of the templated class that the author of &lt;strong&gt;foo.cpp&lt;/strong&gt; thought to provide.&lt;/p&gt;\n\n&lt;p&gt;You might think that when compiling a template the compiler should &quot;generate all versions&quot;, with the ones that are never used being filtered out during linking. Aside from the huge overhead and the extreme difficulties such an approach would face because &quot;type modifier&quot; features like pointers and arrays allow even just the built-in types to give rise to an infinite number of types, what happens when I now extend my program by adding:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;baz.cpp\n&lt;ul&gt;\n&lt;li&gt;declares and implements &lt;code&gt;class BazPrivate&lt;/code&gt;, and uses &lt;code&gt;MyClass&amp;lt;BazPrivate&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There is no possible way that this could work unless we either&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Have to recompile &lt;strong&gt;foo.cpp&lt;/strong&gt; every time we change &lt;em&gt;any other file in the program&lt;/em&gt;, in case it added a new novel instantiation of &lt;code&gt;MyClass&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Require that &lt;strong&gt;baz.cpp&lt;/strong&gt; contains (possibly via header includes) the full template of &lt;code&gt;MyClass&amp;lt;T&amp;gt;&lt;/code&gt;, so that the compiler can generate &lt;code&gt;MyClass&amp;lt;BazPrivate&amp;gt;&lt;/code&gt; during compilation of &lt;strong&gt;baz.cpp&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Nobody likes (1), because whole-program-analysis compilation systems take &lt;em&gt;forever&lt;/em&gt; to compile , and because it makes it impossible to distribute compiled libraries without the source code. So we have (2) instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Plenty correct answers here, but I wanted to add this (for completeness):&lt;/p&gt;\n&lt;p&gt;If you, at the bottom of the implementation cpp file, do explicit instantiation of all the types the template will be used with, the linker will be able to find them as usual.&lt;/p&gt;\n&lt;p&gt;Edit: Adding example of explicit template instantiation. Used after the template has been defined, and all member functions has been defined.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will instantiate (and thus make available to the linker) the class and all its member functions (only). Similar syntax works for function templates, so if you have non-member operator overloads you may need to do the same for those.&lt;/p&gt;\n&lt;p&gt;The above example is fairly useless since vector is fully defined in headers, except when a common include file (precompiled header?) uses &lt;code&gt;extern template class vector&amp;lt;int&amp;gt;&lt;/code&gt; so as to keep it from instantiating it in all the &lt;em&gt;other&lt;/em&gt; (1000?) files that use vector.&lt;/p&gt;\n    ","\n&lt;p&gt;Templates need to be &lt;em&gt;instantiated&lt;/em&gt; by the compiler before actually compiling them into object code.  This instantiation can only be achieved if the template arguments are known. Now imagine a scenario where a template function is declared in &lt;code&gt;a.h&lt;/code&gt;, defined in &lt;code&gt;a.cpp&lt;/code&gt; and used in &lt;code&gt;b.cpp&lt;/code&gt;. When &lt;code&gt;a.cpp&lt;/code&gt; is compiled, it is not necessarily known that the upcoming compilation &lt;code&gt;b.cpp&lt;/code&gt; will require an instance of the template, let alone which specific instance would that be. For more header and source files, the situation can quickly get more complicated.&lt;/p&gt;\n\n&lt;p&gt;One can argue that compilers can be made smarter to &quot;look ahead&quot; for all uses of the template, but I&apos;m sure that it wouldn&apos;t be difficult to create recursive or otherwise complicated scenarios. AFAIK, compilers don&apos;t do such look aheads.  As Anton pointed out, some compilers support explicit export declarations of template instantiations, but not all compilers support it (yet?).&lt;/p&gt;\n    ","\n&lt;p&gt;Actually, prior to C++11 the standard defined the &lt;code&gt;export&lt;/code&gt; keyword that &lt;em&gt;would&lt;/em&gt; make it possible to declare templates in a header file and implement them elsewhere. In a manner of speaking. Not really, as the only ones who ever &lt;em&gt;implemented&lt;/em&gt; that feature &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;pointed out&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Phantom advantage #1: Hiding source code. Many users, have said that they expect that by using export they will\nno longer have to ship definitions for member/nonmember function templates and member functions of class\ntemplates. This is not true. With export, library writers still have to ship full template source code or its direct\nequivalent (e.g., a system-specific parse tree) because the full information is required for instantiation. [...]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Phantom advantage #2: Fast builds, reduced dependencies. Many users expect that export will allow true separate\ncompilation of templates to object code which they expect would allow faster builds. It doesnt because the\ncompilation of exported templates is indeed separate but not to object code. Instead, export almost always makes\nbuilds slower, because at least the same amount of compilation work must still be done at prelink time. Export\ndoes not even reduce dependencies between template definitions because the dependencies are intrinsic,\nindependent of file organization.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;None of the popular compilers implemented this keyword. The only implementation of the feature was in the frontend written by the Edison Design Group, which is used by the Comeau C++ compiler. All others required you to write templates in header files, because the compiler needs the template definition for proper instantiation (as others pointed out already).&lt;/p&gt;\n&lt;p&gt;As a result, the ISO C++ standard committee decided to remove the &lt;code&gt;export&lt;/code&gt; feature of templates with C++11.&lt;/p&gt;\n    ","\n&lt;p&gt;Although standard C++ has no such requirement, some compilers require that all function and class templates need to be made available in every translation unit they are used. In effect, for those compilers, the bodies of template functions must be made available in a header file. To repeat: that means those compilers won&apos;t allow them to be defined in non-header files such as .cpp files&lt;/p&gt;\n\n&lt;p&gt;There is an &lt;em&gt;export&lt;/em&gt; keyword which is supposed to mitigate this problem, but it&apos;s nowhere close to being portable.&lt;/p&gt;\n    ","\n&lt;p&gt;Templates are often used in headers because the compiler needs to instantiate different versions of the code, depending on the parameters given/deduced for template parameters, and it&apos;s easier (as a programmer) to let the compiler recompile the same code multiple times and deduplicate later.\nRemember that a template doesn&apos;t represent code directly, but a template for several versions of that code.\nWhen you compile a non-template function in a &lt;code&gt;.cpp&lt;/code&gt; file, you are compiling a concrete function/class.\nThis is not the case for templates, which can be instantiated with different types, namely, concrete code must be emitted when replacing template parameters with concrete types.&lt;/p&gt;\n&lt;p&gt;There was a feature with the &lt;code&gt;export&lt;/code&gt; keyword that was meant to be used for separate compilation.\nThe &lt;code&gt;export&lt;/code&gt; feature is deprecated in &lt;code&gt;C++11&lt;/code&gt; and, AFAIK, only one compiler implemented it.\nYou shouldn&apos;t make use of &lt;code&gt;export&lt;/code&gt;.\nSeparate compilation is not possible in &lt;code&gt;C++&lt;/code&gt; or &lt;code&gt;C++11&lt;/code&gt; but maybe in &lt;code&gt;C++17&lt;/code&gt;, if concepts make it in, we could have some way of separate compilation.&lt;/p&gt;\n&lt;p&gt;For separate compilation to be achieved, separate template body checking must be possible.\nIt seems that a solution is possible with concepts.\nTake a look at this &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3629.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;paper&lt;/a&gt; recently presented at the\nstandards committee meeting.\nI think this is not the only requirement, since you still need to instantiate code for the template code in user code.&lt;/p&gt;\n&lt;p&gt;The separate compilation problem for templates I guess it&apos;s also a problem that is arising with the migration to modules, which is currently being worked.&lt;/p&gt;\n&lt;p&gt;EDIT: As of August 2020 Modules are already a reality for C++: &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/modules&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.cppreference.com/w/cpp/language/modules&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Even though there are plenty of good explanations above, I&apos;m missing a practical way to separate templates into header and body.&lt;br&gt;\nMy main concern is avoiding recompilation of all template users, when I change its definition.&lt;br&gt;\nHaving all template instantiations in the template body is not a viable solution for me, since the template author may not know all if its usage and the template user may not have the right to modify it.&lt;br&gt;\nI took the following approach, which works also for older compilers (gcc 4.3.4, aCC A.03.13).&lt;/p&gt;\n\n&lt;p&gt;For each template usage there&apos;s a typedef in its own header file (generated from the UML model). Its body contains the instantiation (which ends up in a library which is linked in at the end).&lt;br&gt;\nEach user of the template includes that header file and uses the typedef.  &lt;/p&gt;\n\n&lt;p&gt;A schematic example:&lt;/p&gt;\n\n&lt;p&gt;MyTemplate.h:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; MyTemplate_h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MyTemplate_h 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyTemplate&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MyTemplate&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp; rt);\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n  T t;\n};\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;MyTemplate.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyTemplate.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nMyTemplate&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;MyTemplate&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp; rt)\n: &lt;span class=&quot;hljs-built_in&quot;&gt;t&lt;/span&gt;(rt)\n{\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; MyTemplate&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;dump&lt;/span&gt;()\n{\n  cerr &amp;lt;&amp;lt; t &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;MyInstantiatedTemplate.h:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; MyInstantiatedTemplate_h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MyInstantiatedTemplate_h 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyTemplate.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; MyTemplate&amp;lt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;gt; MyInstantiatedTemplate;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;MyInstantiatedTemplate.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyTemplate.cpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyTemplate&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;main.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInstantiatedTemplate.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;MyInstantiatedTemplate &lt;span class=&quot;hljs-title&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n  m.&lt;span class=&quot;hljs-built_in&quot;&gt;dump&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way only the template instantiations will need to be recompiled, not all template users (and dependencies).&lt;/p&gt;\n    ","\n&lt;p&gt;It means that the most portable way to define method implementations of template classes is to define them inside the template class definition.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ... &amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;\n{\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n       &lt;span class=&quot;hljs-comment&quot;&gt;// Not just declaration. Add method implementation here&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The compiler will generate code for each template instantiation when you use a template during the compilation step. \nIn the compilation and linking process .cpp files are converted to pure object or machine code which in them contains references or undefined symbols because the .h files that are included in your main.cpp have no implementation YET. These are ready to be linked with another object file that defines an implementation for your template and thus you have a full a.out executable.&lt;/p&gt;\n\n&lt;p&gt;However since templates need to be processed in the compilation step in order to generate code for each template instantiation that you define, so simply compiling a template separate from it&apos;s header file won&apos;t work because they always go hand and hand, for the very reason that each template instantiation is a whole new class literally. In a regular class you can separate .h and .cpp because .h is a blueprint of that class and the .cpp is the raw implementation so any implementation files can be compiled and linked regularly, however using templates .h is a blueprint of how the class should look not how the object should look meaning a template .cpp file isn&apos;t a raw regular implementation of a class, it&apos;s simply a blueprint for a class, so any implementation of a .h template file can&apos;t be compiled because you need something concrete to compile, templates are abstract in that sense. &lt;/p&gt;\n\n&lt;p&gt;Therefore templates are never separately compiled and are only compiled wherever you have a concrete instantiation in some other source file. However, the concrete instantiation needs to know the implementation of the template file, because simply modifying the &lt;code&gt;typename T&lt;/code&gt; using a concrete type in the .h file is not going to do the job because what .cpp is there to link, I can&apos;t find it later on because remember templates are abstract and can&apos;t be compiled, so I&apos;m forced to give the implementation right now so I know what to compile and link, and now that I have the implementation it gets linked into the enclosing source file. Basically, the moment I instantiate a template I need to create a whole new class, and I can&apos;t do that if I don&apos;t know how that class should look like when using the type I provide unless I make notice to the compiler of the template implementation, so now the compiler can replace &lt;code&gt;T&lt;/code&gt; with my type and create a concrete class that&apos;s ready to be compiled and linked.&lt;/p&gt;\n\n&lt;p&gt;To sum up, templates are blueprints for how classes should look, classes are blueprints for how an object should look.\nI can&apos;t compile templates separate from their concrete instantiation because the compiler only compiles concrete types, in other words, templates at least in C++, is pure language abstraction. We have to de-abstract templates so to speak, and we do so by giving them a concrete type to deal with so that our template abstraction can transform into a regular class file and in turn, it can be compiled normally. Separating the template .h file and the template .cpp file is meaningless. It is nonsensical because the separation of .cpp and .h only is only where the .cpp can be compiled individually and linked individually, with templates since we can&apos;t compile them separately, because templates are an abstraction, therefore we are always forced to put the abstraction always together with the concrete instantiation where the concrete instantiation always has to know about the type being used.&lt;/p&gt;\n\n&lt;p&gt;Meaning &lt;code&gt;typename T&lt;/code&gt; get&apos;s replaced during the compilation step not the linking step so if I try to compile a template without &lt;code&gt;T&lt;/code&gt; being replaced as a concrete value type that is completely meaningless to the compiler and as a result object code can&apos;t be created because it doesn&apos;t know what &lt;code&gt;T&lt;/code&gt; is.&lt;/p&gt;\n\n&lt;p&gt;It is technically possible to create some sort of functionality that will save the template.cpp file and switch out the types when it finds them in other sources, I think that the standard does have a keyword &lt;code&gt;export&lt;/code&gt; that will allow you to put templates in a separate cpp file but not that many compilers actually implement this.&lt;/p&gt;\n\n&lt;p&gt;Just a side note, when making specializations for a template class, you can separate the header from the implementation because a specialization by definition means that I am specializing for a concrete type that can be compiled and linked individually.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to add something noteworthy here. One can define methods of a templated class just fine in the implementation file when they are not function templates.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;myQueue.hpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;QueueA&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size;\n    ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;T &lt;span class=&quot;hljs-title&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n       &lt;span class=&quot;hljs-comment&quot;&gt;// implementation here&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n\n    ...\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;myQueue.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// implementation of regular methods goes like this:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; QueueA&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;isEmpty&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;size == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;main&lt;/span&gt;()\n{\n    QueueA&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; Q;\n\n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the concern is the extra compilation time and binary size bloat produced by compiling the .h as part of all the .cpp modules using it, in many cases what you can do is make the template class descend from a non-templatized base class for non type-dependent parts of the interface, and that base class can have its implementation in the .cpp file. &lt;/p&gt;\n    ","\n&lt;p&gt;That is exactly correct because the compiler has to know what type it is for allocation. So template classes, functions, enums,etc.. must be implemented as well in the header file if it is to be made public or part of a library (static or dynamic) because header files are NOT compiled unlike the c/cpp files which are. If the compiler doesn&apos;t know the type is can&apos;t compile it. In .Net it can because all objects derive from the Object class. This is not .Net.&lt;/p&gt;\n    ","\n&lt;p&gt;A way to have separate implementation is as follows.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//inner_foo.h&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T param)&lt;/span&gt;&lt;/span&gt;;\n};\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//foo.tpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;inner_foo.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; Foo&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;doSomething&lt;/span&gt;(T param)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//implementation&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//foo.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;foo.tpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//main.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;foo.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;inner_foo has the forward declarations. foo.tpp has the implementation and include inner_foo.h; and foo.h will have just one line, to include foo.tpp.&lt;/p&gt;\n\n&lt;p&gt;On compile time, contents of foo.h are copied to foo.tpp and then the whole file is copied to foo.h after which it compiles. This way, there is no limitations, and the naming is consistent, in exchange for one extra file.&lt;/p&gt;\n\n&lt;p&gt;I do this because static analyzers for the code break when it does not see the forward declarations of class in *.tpp. This is annoying when writing code in any IDE or using YouCompleteMe or others.&lt;/p&gt;\n    ","\n&lt;p&gt;I suggest looking at this gcc page which discusses the tradeoffs between the &quot;cfront&quot; and &quot;borland&quot; model for template instantiations.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-4.6.4/gcc/Template-Instantiation.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://gcc.gnu.org/onlinedocs/gcc-4.6.4/gcc/Template-Instantiation.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The &quot;borland&quot; model corresponds to what the author suggests, providing the full template definition, and having things compiled multiple times.&lt;/p&gt;\n\n&lt;p&gt;It contains explicit recommendations concerning using manual and automatic template instantiation.  For example, the &quot;-repo&quot; option can be used to collect templates which need to be instantiated.  Or another option is to disable automatic template instantiations using &quot;-fno-implicit-templates&quot; to force manual template instantiation.&lt;/p&gt;\n\n&lt;p&gt;In my experience, I rely on the C++ Standard Library and Boost templates being instantiated for each compilation unit (using a template library).  For my large template classes, I do manual template instantiation, once, for the types I need.&lt;/p&gt;\n\n&lt;p&gt;This is my approach because I am providing a working program, not a template library for use in other programs.  The author of the book, Josuttis, works a lot on template libraries.&lt;/p&gt;\n\n&lt;p&gt;If I was really worried about speed, I suppose I would explore using Precompiled Headers \n&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;which is gaining support in many compilers.  However, I think precompiled headers would be difficult with template header files.&lt;/p&gt;\n    ","\n&lt;p&gt;Another reason that it&apos;s a good idea to write both declarations and definitions in header files is for readability. Suppose there&apos;s such a template function in Utility.h:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;T &lt;span class=&quot;hljs-title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; one, T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; theOther)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in the Utility.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Utility.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;T &lt;span class=&quot;hljs-title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; one, T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; other)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; one &amp;lt; other ? one : other;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This requires every T class here to implement the less than operator (&amp;lt;). It will throw a compiler error when you compare two class instances that haven&apos;t implemented the &quot;&amp;lt;&quot;.&lt;/p&gt;\n\n&lt;p&gt;Therefore if you separate the template declaration and definition, you won&apos;t be able to only read the header file to see the ins and outs of this template in order to use this API on your own classes, though the compiler will tell you in this case about which operator needs to be overridden.&lt;/p&gt;\n    ","\n&lt;p&gt;You can actually define your template class inside a .template file rather than a .cpp file. Whoever is saying you can only define it inside a header file is wrong. This is something that works all the way back to c++ 98.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t forget to have your compiler treat your .template file as a c++ file to keep the intelli sense. &lt;/p&gt;\n\n&lt;p&gt;Here is an example of this for a dynamic array class.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; dynarray_h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; dynarray_h&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DynArray&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacity_;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size_;\n    T* data;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacity=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;DynArray&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; DynArray&amp;amp; d1);\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;DynArray&lt;/span&gt;();\n    T&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;[]( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; index);\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; DynArray&amp;lt;T&amp;gt;&amp;amp; d1);\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;T&amp;amp; &lt;span class=&quot;hljs-title&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;T&amp;amp; &lt;span class=&quot;hljs-title&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;T&amp;amp; &lt;span class=&quot;hljs-title&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;dynarray.template&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// this is how you get the header file&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now inside you .template file you define your functions just how you normally would.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nDynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;DynArray&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacity){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (capacity &amp;gt;= size){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;size_ = size;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;capacity_ = capacity;\n        data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T[capacity];\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//    for (int i = 0; i &amp;lt; size; ++i) {&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//        data[i] = 0;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//    }&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nDynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;DynArray&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; DynArray&amp;amp; d1){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//clear();&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//delete [] data;&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;size_ = d1.size_;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;capacity_ = d1.capacity_;\n    data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T[&lt;span class=&quot;hljs-built_in&quot;&gt;capacity&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i){\n        data[i] = d1.data[i];\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nDynArray&amp;lt;T&amp;gt;::~&lt;span class=&quot;hljs-built_in&quot;&gt;DynArray&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] data;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nT&amp;amp; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;[]( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; index){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(index);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; DynArray&amp;lt;T&amp;gt;&amp;amp; d1){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n    }\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;assign&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;size_ = d1.size_;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;capacity_ = d1.capacity_;\n    data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T[&lt;span class=&quot;hljs-built_in&quot;&gt;capacity&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i){\n        data[i] = d1.data[i];\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//delete [] d1.data;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; size_;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;capacity&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; capacity_;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i){\n        data[i] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n    size_ = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    capacity_ = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;capacity&lt;/span&gt;()) {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;grow&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//redo the array&lt;/span&gt;\n        T* copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T[capacity_ + &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i) {\n            copy[i] = data[i];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] data;\n        data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T[ capacity_ * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;capacity&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; ++i) {\n            data[i] = copy[i];\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] copy;\n        capacity_ *= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n    data[&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()] = n;\n    ++size_;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;pop_back&lt;/span&gt;(){\n    data[&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    --size_;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nT&amp;amp; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;runtime_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;invalid index&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[n];\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nT&amp;amp; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;back&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;runtime_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vector is empty&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\nT&amp;amp; DynArray&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;front&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;runtime_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vector is empty&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":31,"title":"Why can templates only be implemented in the header file?","content":"\n                \n&lt;p&gt;Quote from &lt;a href=&quot;http://books.google.com/books?id=n9VEG2Gp5pkC&amp;amp;pg=PA10&amp;amp;lpg=PA10&amp;amp;dq=%22The%20only%20portable%20way%20of%20using%20templates%20at%20the%20moment%20is%20to%20implement%20them%20in%20header%20files%20by%20using%20inline%20functions.%22&amp;amp;source=bl&amp;amp;ots=Ref8pl8dPX&amp;amp;sig=t4K5gvxtBblpcujNxodpwMfei8I&amp;amp;hl=en&amp;amp;ei=qkR6TvbiGojE0AHq4IzqAg&amp;amp;sa=X&amp;amp;oi=book_result&amp;amp;ct=result&amp;amp;resnum=3&amp;amp;ved=0CC8Q6AEwAg#v=onepage&amp;amp;q=%22The%20only%20portable%20way%20of%20using%20templates%20at%20the%20moment%20is%20to%20implement%20them%20in%20header%20files%20by%20using%20inline%20functions.%22&amp;amp;f=false&quot; rel=&quot;noreferrer&quot;&gt;The C++ standard library: a tutorial and handbook&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The only portable way of using templates at the moment is to implement them in header files by using inline functions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Why is this?&lt;/p&gt;\n\n&lt;p&gt;(Clarification: header files are not the &lt;em&gt;only&lt;/em&gt; portable solution. But they are the most convenient portable solution.)&lt;/p&gt;\n    ","slug":"why-can-templates-only-be-implemented-in-the-header-file-1657384341933","postType":"QUESTION","createdAt":"2022-07-09T16:32:21.000Z","updatedAt":"2022-07-09T16:32:21.000Z","tags":[{"id":104,"name":"templates","slug":"templates","createdAt":"2022-07-09T16:32:22.000Z","updatedAt":"2022-07-09T16:32:22.000Z","Questions_Tags":{"questionId":31,"tagId":104}}],"relatedQuestions":[{"title":"Why can templates only be implemented in the header file?","slug":"why-can-templates-only-be-implemented-in-the-header-file-1657384341933","tags":[{"name":"templates","Questions_Tags":{"questionId":31,"tagId":104}}]}]},"randomQuestions":[{"title":"When should I use a return statement in ES6 arrow functions","slug":"when-should-i-use-a-return-statement-in-es6-arrow-functions-1657388472113"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"How to make good reproducible pandas examples","slug":"how-to-make-good-reproducible-pandas-examples-1657384310402"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"What is object slicing?","slug":"what-is-object-slicing-1657384506425"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"Generating random whole numbers in JavaScript in a specific range","slug":"generating-random-whole-numbers-in-javascript-in-a-specific-range-1657388112728"},{"title":"Sort array of objects by string property value","slug":"sort-array-of-objects-by-string-property-value-1657384860090"},{"title":"Why does std::getline() skip input after a formatted extraction?","slug":"why-does-std::getline()-skip-input-after-a-formatted-extraction-1657384756118"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"Understanding slicing","slug":"understanding-slicing-1657384397680"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"}]},"__N_SSG":true}