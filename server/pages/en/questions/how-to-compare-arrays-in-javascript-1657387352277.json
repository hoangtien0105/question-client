{"pageProps":{"data":{"answer":["\n&lt;p&gt;To compare arrays, loop through them and compare every value:&lt;/p&gt;\n&lt;h2&gt;Comparing arrays:&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Warn if overriding existing method&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there&apos;s a framework conflict or you&apos;ve got double inclusions in your code.&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// attach the .equals method to Array&apos;s prototype to call it on any array&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if the other array is a falsy value, return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!array)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// compare lengths - can save a lot of time &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; != array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l=&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Check if we have nested arrays&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; array[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// recurse into the nested arrays&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(array[i]))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;       \n        }           \n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] != array[i]) { \n            &lt;span class=&quot;hljs-comment&quot;&gt;// Warning - two different object instances will never be equal: {x:20} != {x:20}&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;   \n        }           \n    }       \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Hide method from for-in loops&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;equals&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Usage:&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2,3&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]) === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You may say &quot;&lt;em&gt;But it is much faster to compare strings - no loops...&lt;/em&gt;&quot; well, then you should note there ARE loops. First recursive loop that converts Array to string and second, that compares two strings. So this method &lt;strong&gt;is faster than use of string&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;I believe that larger amounts of data should be always stored in arrays, not in objects. However if you use objects, they can be partially compared too.&lt;br&gt;\n&lt;strong&gt;Here&apos;s how:&lt;/strong&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;h2&gt;Comparing objects:&lt;/h2&gt;\n&lt;p&gt;I&apos;ve stated above, that two object &lt;strong&gt;instances&lt;/strong&gt; will never be equal, even if they contain same data at the moment:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;numberOfTheBeast&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;666&lt;/span&gt;}) == ({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;numberOfTheBeast&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;666&lt;/span&gt;})  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This has a reason, since there may be, for example &lt;a href=&quot;https://stackoverflow.com/a/201471/607407&quot;&gt;private variables within objects.&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;However, if you just use object structure to contain data, comparing is still possible:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//For the first loop, we only check for types&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (propName &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Check for inherited methods and properties - like .equals itself&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Return false if the return value is different&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(propName) != object2.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(propName)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Check instance type&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName] != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; object2[propName]) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Different types =&amp;gt; not equal&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Now a deeper check using other objects property names&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(propName &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; object2) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//We must check instances anyway, there may be a property that only exists in object2&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//I wonder, if remembering the checked values from the first loop would be faster or not &lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(propName) != object2.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(propName)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName] != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; object2[propName]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//If the property is inherited, do not check any more (it must be equa if both objects inherit it)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(propName))\n          &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        \n        &lt;span class=&quot;hljs-comment&quot;&gt;//Now the detail check and recursion&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-comment&quot;&gt;//This returns the script back to the array comparing&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;/**REQUIRES Array.equals**/&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; object2[propName] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n                   &lt;span class=&quot;hljs-comment&quot;&gt;// recurse into the nested arrays&lt;/span&gt;\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(object2[propName]))\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &amp;amp;&amp;amp; object2[propName] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n                   &lt;span class=&quot;hljs-comment&quot;&gt;// recurse into another objects&lt;/span&gt;\n                   &lt;span class=&quot;hljs-comment&quot;&gt;//console.log(&quot;Recursing to compare &quot;, this[propName],&quot;with&quot;,object2[propName], &quot; both named \\&quot;&quot;+propName+&quot;\\&quot;&quot;);&lt;/span&gt;\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(object2[propName]))\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Normal value comparison for strings and numbers&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[propName] != object2[propName]) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//If everything passed, let&apos;s say YES&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, remember that this one is to serve in comparing JSON like data, not class instances and other stuff. If you want to compare more complicated objects, look at &lt;a href=&quot;https://stackoverflow.com/a/1144249/607407&quot;&gt;this answer and it&apos;s super long function&lt;/a&gt;.&lt;br&gt;\nTo make this work with &lt;code&gt;Array.equals&lt;/code&gt; you must edit the original function a little bit:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;...\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Check if we have nested arrays&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; array[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// recurse into the nested arrays&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(array[i]))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**REQUIRES OBJECT COMPARE**/&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &amp;amp;&amp;amp; array[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// recurse into another objects&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//console.log(&quot;Recursing to compare &quot;, this[propName],&quot;with&quot;,object2[propName], &quot; both named \\&quot;&quot;+propName+&quot;\\&quot;&quot;);&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(array[i]))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] != array[i]) {\n...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I made a &lt;a href=&quot;http://jsfiddle.net/Darker/SBtu2/&quot; rel=&quot;noreferrer&quot;&gt;little test tool for both of the functions&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Bonus: Nested arrays with &lt;code&gt;indexOf&lt;/code&gt; and &lt;code&gt;contains&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript/14853974?noredirect=1#comment59337127_14853974&quot;&gt;Samy Bencherif has prepared&lt;/a&gt; useful functions for the case you&apos;re searching for a specific object in nested arrays, which are available here: &lt;a href=&quot;https://jsfiddle.net/SamyBencherif/8352y6yw/&quot; rel=&quot;noreferrer&quot;&gt;https://jsfiddle.net/SamyBencherif/8352y6yw/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;While this only works for scalar arrays (see note below), it is short code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === array2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; array1.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value === array2[index]})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Same as above but in ECMAScript 6 / CoffeeScript / TypeScript with Arrow Functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === array2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; array1.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; value === array2[index])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Note: &apos;scalar&apos; here means values that can be compared directly using &lt;code&gt;===&lt;/code&gt; . So: numbers, strings, objects by reference, functions by reference. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot; rel=&quot;noreferrer&quot;&gt;the MDN reference&lt;/a&gt; for more info about the comparison operators).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;From what I read in the comments, sorting the array and comparing may give accurate result:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array2Sorted = array2.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\narray1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === array2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; array1.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value === array2Sorted[index];\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Eg:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array1 = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\narray2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then the above code would return &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I like to use the Underscore library for array/object heavy coding projects ... in Underscore and Lodash whether you&apos;re comparing arrays or objects it just looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(array1, array2)   &lt;span class=&quot;hljs-comment&quot;&gt;// returns a boolean&lt;/span&gt;\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(object1, object2) &lt;span class=&quot;hljs-comment&quot;&gt;// returns a boolean&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://underscorejs.org/#isEqual&quot; rel=&quot;noreferrer&quot;&gt;Underscore isEqual docs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://lodash.com/docs/#isEqual&quot; rel=&quot;noreferrer&quot;&gt;Lodash isEqual docs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This I think is the simplest way to do it using JSON stringify, and it may be the best solution in some situations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a1) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This converts the objects &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; into strings so they can be compared. The order is important in most cases, for that can sort the object using a sort algorithm shown in one of the above answers.&lt;/p&gt;\n\n&lt;p&gt;Please do note that you are no longer comparing the object but the string representation of the object. It may not be exactly what you want.&lt;/p&gt;\n    ","\n&lt;p&gt;In the spirit of the original question:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;I&apos;d like to compare two arrays... ideally, &lt;strong&gt;efficiently&lt;/strong&gt;. &lt;strong&gt;Nothing\n  fancy&lt;/strong&gt;, just true if they are identical, and false if not.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I have been running performance tests on some of the more simple suggestions proposed here with the following &lt;a href=&quot;http://jsben.ch/#/1Mq8s&quot; rel=&quot;noreferrer&quot;&gt;results&lt;/a&gt; (fast to slow):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/7837725/308645&quot;&gt;while&lt;/a&gt; (67%)&lt;/strong&gt; by Tim Down&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = a1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a1[i] !== a2[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/19746771/308645&quot;&gt;every&lt;/a&gt; (69%)&lt;/strong&gt; by user2782196&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a1.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt; v === a2[i]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/40496893/308645&quot;&gt;reduce&lt;/a&gt; (74%)&lt;/strong&gt; by DEIs&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a1.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a &amp;amp;&amp;amp; a2.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(b), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/42143065/308645&quot;&gt;join&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://stackoverflow.com/a/19001149/308645&quot;&gt;toString&lt;/a&gt; (78%)&lt;/strong&gt; by Gaizka Allende &amp;amp; vivek&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a1.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) === a2.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n\na1.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() === a2.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/39238456/308645&quot;&gt;half toString&lt;/a&gt; (90%)&lt;/strong&gt; by Victor Palomo&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a1 == a2.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/23555773/308645&quot;&gt;stringify&lt;/a&gt; (100%)&lt;/strong&gt; by radtek&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a1) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the examples below assumes the arrays are sorted, single-dimensional arrays. &lt;code&gt;.length&lt;/code&gt; comparison has been removed for a common benchmark (add &lt;code&gt;a1.length === a2.length&lt;/code&gt; to any of the suggestions and you will get a ~10% performance boost). Choose whatever solutions that works best for you knowing the speed and limitation of each.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;em&gt;Unrelated note:&lt;/em&gt; it is interesting to see people getting all trigger-happy John Waynes on the down vote button on perfectly legitimate answers to this question. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h3&gt;The Practical Way&lt;/h3&gt;\n\n&lt;p&gt;I think it&apos;s wrong to say a particular implementation is &quot;The Right Way&quot; if it&apos;s only &quot;right&quot; (&quot;correct&quot;) in contrast to a &quot;wrong&quot; solution. Tomáš&apos;s solution is a clear improvement over string-based array comparison, but that doesn&apos;t mean it&apos;s objectively &quot;right&quot;. What is &lt;em&gt;right&lt;/em&gt; anyway? Is it the fastest? Is it the most flexible? Is it the easiest to comprehend? Is it the quickest to debug? Does it use the least operations? Does it have any side effects? No one solution can have the best of all the things.&lt;/p&gt;\n\n&lt;p&gt;Tomáš&apos;s could say his solution is fast but I would also say it is needlessly complicated. It tries to be an all-in-one solution that works for all arrays, nested or not. In fact, it even accepts more than just arrays as an input and still attempts to give a &quot;valid&quot; answer.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Generics offer reusability&lt;/h3&gt;\n\n&lt;p&gt;My answer will approach the problem differently. I&apos;ll start with a generic &lt;code&gt;arrayCompare&lt;/code&gt; procedure that is only concerned with stepping through the arrays. From there, we&apos;ll build our other basic comparison functions like &lt;code&gt;arrayEqual&lt;/code&gt; and &lt;code&gt;arrayDeepEqual&lt;/code&gt;, etc&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// arrayCompare :: (a -&amp;gt; a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrayCompare&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[x,...xs]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[y,...ys]&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n  x === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; y === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n    ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    : &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt; (f (x) (y)) &amp;amp;&amp;amp; arrayCompare (f) (xs) (ys)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In my opinion, the best kind of code doesn&apos;t even need comments, and this is no exception. There&apos;s so little happening here that you can understand the behaviour of this procedure with almost no effort at all. Sure, some of the ES6 syntax might seem foreign to you now, but that&apos;s only because ES6 is relatively new. &lt;/p&gt;\n\n&lt;p&gt;As the type suggests, &lt;code&gt;arrayCompare&lt;/code&gt; takes comparison function, &lt;code&gt;f&lt;/code&gt;, and two input arrays, &lt;code&gt;xs&lt;/code&gt; and &lt;code&gt;ys&lt;/code&gt;. For the most part, all we do is call &lt;code&gt;f (x) (y)&lt;/code&gt; for each element in the input arrays. We return an early &lt;code&gt;false&lt;/code&gt; if the user-defined &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;  thanks to &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&apos;s short-circuit evaluation. So yes, this means the comparator can stop iteration early and prevent looping through the rest of the input array when unnecessary.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Strict comparison&lt;/h3&gt;\n\n&lt;p&gt;Next, using our &lt;code&gt;arrayCompare&lt;/code&gt; function, we can easily create other functions we might need. We&apos;ll start with the elementary &lt;code&gt;arrayEqual&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// equal :: a -&amp;gt; a -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt; = x =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n  x === y &lt;span class=&quot;hljs-comment&quot;&gt;// notice: triple equal&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// arrayEqual :: [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayEqual =\n  arrayCompare (equal)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayEqual (xs) (ys))      &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 === 1) &amp;amp;&amp;amp; (2 === 2) &amp;amp;&amp;amp; (3 === 3)  //=&amp;gt; true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; zs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayEqual (xs) (zs))      &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 === &apos;1&apos;)                          //=&amp;gt; false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple as that. &lt;code&gt;arrayEqual&lt;/code&gt; can be defined with &lt;code&gt;arrayCompare&lt;/code&gt; and a comparator function that compares &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; using &lt;code&gt;===&lt;/code&gt; (for strict equality).&lt;/p&gt;\n\n&lt;p&gt;Notice that we also define &lt;code&gt;equal&lt;/code&gt; as it&apos;s own function. This highlights the role of &lt;code&gt;arrayCompare&lt;/code&gt; as a higher-order function to utilize our first order comparator in the context of another data type (Array).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Loose comparison&lt;/h3&gt;\n\n&lt;p&gt;We could just as easily defined &lt;code&gt;arrayLooseEqual&lt;/code&gt; using a &lt;code&gt;==&lt;/code&gt; instead. Now when comparing &lt;code&gt;1&lt;/code&gt; (Number) to &lt;code&gt;&apos;1&apos;&lt;/code&gt; (String), the result will be &lt;code&gt;true&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// looseEqual :: a -&amp;gt; a -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;looseEqual&lt;/span&gt; = x =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n  x == y &lt;span class=&quot;hljs-comment&quot;&gt;// notice: double equal&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// arrayLooseEqual :: [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayLooseEqual =\n  arrayCompare (looseEqual)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayLooseEqual (xs) (ys))    &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 == &apos;1&apos;) &amp;amp;&amp;amp; (2 == &apos;2&apos;) &amp;amp;&amp;amp; (3 == &apos;3&apos;)  //=&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Deep comparison (recursive)&lt;/h3&gt;\n\n&lt;p&gt;You&apos;ve probably noticed that this is only shallow comparison tho. Surely Tomáš&apos;s solution is &quot;The Right Way&quot; because it does implicit deep comparison, right ?&lt;/p&gt;\n\n&lt;p&gt;Well our &lt;code&gt;arrayCompare&lt;/code&gt; procedure is versatile enough to use in a way that makes a deep equality test a breeze &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// isArray :: a -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isArray =\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isArray&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// arrayDeepCompare :: (a -&amp;gt; a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrayDeepCompare&lt;/span&gt; = f =&amp;gt;\n  arrayCompare (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;b&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n    isArray (a) &amp;amp;&amp;amp; isArray (b)\n      ? arrayDeepCompare (f) (a) (b)\n      : f (a) (b))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]]]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;]]]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayDeepCompare (equal) (xs) (ys)) &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 === 1) &amp;amp;&amp;amp; (2 === 2) &amp;amp;&amp;amp; (3 === &apos;3&apos;)         //=&amp;gt; false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayDeepCompare (looseEqual) (xs) (ys)) &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 == 1) &amp;amp;&amp;amp; (2 == 2) &amp;amp;&amp;amp; (3 == &apos;3&apos;)                 //=&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple as that. We build a deep comparator using &lt;em&gt;another&lt;/em&gt; higher-order function. This time we&apos;re wrapping &lt;code&gt;arrayCompare&lt;/code&gt; using a custom comparator that will check if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are arrays. If so, reapply &lt;code&gt;arrayDeepCompare&lt;/code&gt; otherwise compare &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to the user-specified comparator (&lt;code&gt;f&lt;/code&gt;). This allows us to keep the deep comparison behavior separate from how we actually compare the individual elements. Ie, like the example above shows, we can deep compare using &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;looseEqual&lt;/code&gt;, or any other comparator we make.&lt;/p&gt;\n\n&lt;p&gt;Because &lt;code&gt;arrayDeepCompare&lt;/code&gt; is curried, we can partially apply it like we did in the previous examples too&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// arrayDeepEqual :: [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayDeepEqual =\n  arrayDeepCompare (equal)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// arrayDeepLooseEqual :: [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayDeepLooseEqual =\n  arrayDeepCompare (looseEqual)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To me, this already a clear improvement over Tomáš&apos;s solution because I can &lt;em&gt;explicitly&lt;/em&gt; choose a shallow or deep comparison for my arrays, as needed.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Object comparison (example)&lt;/h3&gt;\n\n&lt;p&gt;Now what if you have an array of objects or something ? Maybe you want to consider those arrays as &quot;equal&quot; if each object has the same &lt;code&gt;id&lt;/code&gt; value &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// idEqual :: {id: Number} -&amp;gt; {id: Number} -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;idEqual&lt;/span&gt; = x =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n  x.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; x.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; === y.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// arrayIdEqual :: [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayIdEqual =\n  arrayCompare (idEqual)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayIdEqual (xs) (ys)) &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 === 1) &amp;amp;&amp;amp; (2 === 2)            //=&amp;gt; true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; zs = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayIdEqual (xs) (zs)) &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (1 === 1) &amp;amp;&amp;amp; (2 === 6)            //=&amp;gt; false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple as that. Here I&apos;ve used vanilla JS objects, but this type of comparator could work for &lt;em&gt;any&lt;/em&gt; object type; even your custom objects. Tomáš&apos;s solution would need to be completely reworked to support this kind of equality test&lt;/p&gt;\n\n&lt;p&gt;Deep array with objects? Not a problem. We built highly versatile, generic functions, so they&apos;ll work in a wide variety of use cases.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}]]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}]]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayCompare (idEqual) (xs) (ys))     &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayDeepCompare (idEqual) (xs) (ys)) &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Arbitrary comparison (example)&lt;/h3&gt;\n\n&lt;p&gt;Or what if you wanted to do some other kind of kind of completely arbitrary comparison ? Maybe I want to know if each &lt;code&gt;x&lt;/code&gt; is greater than each &lt;code&gt;y&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// gt :: Number -&amp;gt; Number -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;gt&lt;/span&gt; = x =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n  x &amp;gt; y\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// arrayGt :: [a] -&amp;gt; [a] -&amp;gt; Bool&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayGt = arrayCompare (gt)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayGt (xs) (ys))     &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (5 &amp;gt; 2) &amp;amp;&amp;amp; (10 &amp;gt; 4) &amp;amp;&amp;amp; (20 &amp;gt; 8)  //=&amp;gt; true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; zs = [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (arrayGt (xs) (zs))     &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (5 &amp;gt; 6)                          //=&amp;gt; false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Less is More&lt;/h3&gt;\n\n&lt;p&gt;You can see we&apos;re actually doing more with less code. There&apos;s nothing complicated about &lt;code&gt;arrayCompare&lt;/code&gt; itself and each of the custom comparators we&apos;ve made have a very simple implementation.&lt;/p&gt;\n\n&lt;p&gt;With ease, we can define exactly how we wish for two arrays to be compared  shallow, deep, strict, loose, some object property, or some arbitrary computation, or any combination of these  &lt;strong&gt;all using one procedure&lt;/strong&gt;, &lt;code&gt;arrayCompare&lt;/code&gt;. Maybe even dream up a &lt;code&gt;RegExp&lt;/code&gt; comparator ! I know how kids love those regexps &lt;/p&gt;\n\n&lt;p&gt;Is it the fastest? Nope. But it probably doesn&apos;t need to be either. If speed is the only metric used to measure the quality of our code, a lot of really great code would get thrown away  That&apos;s why I&apos;m calling this approach &lt;strong&gt;The Practical Way&lt;/strong&gt;. Or maybe to be more fair, &lt;em&gt;A&lt;/em&gt; Practical Way. This description is suitable for this answer because I&apos;m not saying this answer is only practical in comparison to some other answer; it is objectively true. We&apos;ve attained a high degree of practicality with very little code that&apos;s very easy to reason about. No other code can say we haven&apos;t earned this description.&lt;/p&gt;\n\n&lt;p&gt;Does that make it the &quot;right&quot; solution for you ? That&apos;s up for &lt;em&gt;you&lt;/em&gt; to decide. And no one else can do that for you; only you know what your needs are. In almost all cases, I value straightforward, practical, and versatile code over clever and fast kind. What you value might differ, so pick what works for you.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Edit&lt;/h3&gt;\n\n&lt;p&gt;My old answer was more focused on decomposing &lt;code&gt;arrayEqual&lt;/code&gt; into tiny procedures. It&apos;s an interesting exercise, but not really the best (most practical) way to approach this problem. If you&apos;re interested, you can see this revision history.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s unclear what you mean by &quot;identical&quot;. For example, are the arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; below identical (note the nested arrays)?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;]], b = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;]];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s an optimized array comparison function that compares corresponding elements of each array in turn using strict equality and does not do recursive comparison of array elements that are themselves arrays, meaning that for the above example, &lt;code&gt;arraysIdentical(a, b)&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt;. It works in the general case, which JSON- and &lt;code&gt;join()&lt;/code&gt;-based solutions will not:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arraysIdentical&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i != b.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[i] !== b[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Building off Tomáš Zato&apos;s answer, I agree that just iterating through the arrays is the fastest.  Additionally (like others have already stated), the function should be called equals/equal, not compare.  In light of this, I modified the function to handle comparing arrays for similarity - i.e. they have the same elements, but out of order - for personal use, and thought I&apos;d throw it on here for everyone to see.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;array, strict&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!array)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        strict = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; != array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; array[i] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(array[i], strict))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (strict &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] != array[i]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!strict) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function takes an additional parameter of strict that defaults to true.  This strict parameter defines if the arrays need to be wholly equal in both contents and the order of those contents, or simply just contain the same contents.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// Loosely equal to 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr3 = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// Not equal to 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr4 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// Strictly equal to 1&lt;/span&gt;\n\narr1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr2);         &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\narr1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr2, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\narr1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr3);         &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\narr1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr3, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\narr1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr4);         &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\narr1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr4, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve also written up a quick jsfiddle with the function and this example:&lt;br&gt;\n&lt;a href=&quot;http://jsfiddle.net/Roundaround/DLkxX/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/Roundaround/DLkxX/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;On the same lines as JSON.encode is to use join().&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; arrA, arrB &lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//check if lengths are different&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(arrA.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== arrB.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//slice so we do not effect the original&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//sort makes sure they are in order&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//join makes it a string so we can do a string compare&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cA = arrA.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;); \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cB = arrB.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cA===cB;\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; e = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;//will return true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,b) );  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,c) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,d) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,e) );  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Only problem is if you care about types which the last comparison tests.\nIf you care about types, you will have to loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; arrA, arrB &lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//check if lengths are different&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(arrA.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== arrB.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//slice so we do not effect the orginal&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//sort makes sure they are in order&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cA = arrA.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(); \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cB = arrB.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;cA.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;i++){\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(cA[i]!==cB[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; e = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,b) );  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,c) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,d) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,e) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the order should remain the same, than it is just a loop, no sort is needed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; arrA, arrB &lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//check if lengths are different&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(arrA.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== arrB.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;arrA.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;i++){\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(arrA[i]!==arrB[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; e = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,a) );  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,b) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,c) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,d) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;checkArrays&lt;/span&gt;(a,e) );  &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In my case compared arrays contain only numbers and strings. This function will show you if arrays contain same elements.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;are_arrs_match&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr1, arr2&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() === arr2.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s test it!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;nik&apos;&lt;/span&gt;]\narr2 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;nik&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\narr3 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;are_arrs_match&lt;/span&gt;(arr1, arr2)) &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;are_arrs_match&lt;/span&gt;(arr1, arr3)) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Even though this has a lot of answers, one that I believe to be of help:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray = [ ...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;( [...arr1, ...arr2] ) ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is not stated in the question how the structure of the array is going to look like, so If you know for sure that you &lt;strong&gt;won&apos;t have nested arrays nor objects&lt;/strong&gt; in you array (it happened to me, that&apos;s why I came to this answer) the above code will work.&lt;/p&gt;\n\n&lt;p&gt;What happens is that we use spread operator ( ... ) to concat both arrays, then we use Set to eliminate any duplicates. Once you have that you can compare their sizes, if all three arrays have the same size you are good to go.&lt;/p&gt;\n\n&lt;p&gt;This answer also &lt;strong&gt;ignores the order of elements&lt;/strong&gt;, as I said, the exact situation happened to me, so maybe someone in the same situation might end up here (as I did).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Edit1.&lt;/p&gt;\n\n&lt;p&gt;Answering Dmitry Grinko&apos;s question: &quot;Why did you use spread operator ( ... ) here - ...new Set ? It doesn&apos;t work&quot;&lt;/p&gt;\n\n&lt;p&gt;Consider this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr1 = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt; ]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; ]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray = [ &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;( [...arr1, ...arr2] ) ]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArray)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;ll get&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[ &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt; { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; } ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In order to work with that value you&apos;d need to use some Set properties (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&lt;/a&gt;).\nOn the other hand, when you use this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr1 = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt; ]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; ]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray = [ ...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;( [...arr1, ...arr2] ) ]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArray)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;ll get&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[ &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s the difference, the former would give me a Set, it would work too as I could get the size of that Set, but the latter gives me the array I need, what&apos;s more direct to the resolution.&lt;/p&gt;\n    ","\n&lt;h1&gt;Shortest&lt;/h1&gt;\n&lt;p&gt;For an array of numbers try:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a1==&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;+a2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( a1==&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;+a2 )&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this method will not work when the array also contains strings, e.g. &lt;code&gt;a2 = [1, &quot;2,3&quot;]&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Your code will not handle the case appropriately when both arrays have same elements but not in same order.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Have a look at my code with your example which compares two arrays whose elements are numbers, you might modify or extend it for other element types (by utilising .join() instead of .toString()).&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arraysAreEqual = a1.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;()==a2.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// true if both arrays have same elements else false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arraysAreEqual);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can simply use &lt;a href=&quot;https://lodash.com/docs/4.17.15#isEqual&quot; rel=&quot;noreferrer&quot;&gt;isEqual&lt;/a&gt; from lodash library. It is very efficient and clean.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; {isEqual} &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;lodash&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isTwoArraysEqual = &lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(array1, array2);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Code Golfing&lt;/h1&gt;\n&lt;p&gt;There are plenty of answers showing how to compare arrays efficiently.&lt;/p&gt;\n&lt;p&gt;Below is the &lt;em&gt;shortest&lt;/em&gt; way to compare two int or (string) arrays, measured in bytes of code.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1. &quot;&lt;/span&gt;, a.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;() == b.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;())\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2. &quot;&lt;/span&gt;, a.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;() == [].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;())\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3. &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4. &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + [] == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// even shorter&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4. b) &quot;&lt;/span&gt;, a == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + b)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// false positives (see flaws)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;5. &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + [&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;// type differences&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;6. &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1,2&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Explanation&lt;/h2&gt;\n&lt;p&gt;This works because when using the &lt;code&gt;+&lt;/code&gt; operator, the types are automatically converted to allow concatenation. In this case, the &lt;code&gt;1&lt;/code&gt; and the &lt;code&gt;[1, 2, 3]&lt;/code&gt; are both converted to a string.&lt;/p&gt;\n&lt;p&gt;Internally, JavaScript uses &lt;code&gt;[1, 2, 3].join()&lt;/code&gt; to convert the array to a string and then adds them resulting in &lt;code&gt;11,2,3&lt;/code&gt;. When doing this on both arrays, one can simply use &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt; to compare the two strings.&lt;/p&gt;\n&lt;h2&gt;Flaws&lt;/h2&gt;\n&lt;p&gt;Using this technique, the comparison does not care if the elements in the arrays to be compared are of different types. &lt;code&gt;[1, 2]&lt;/code&gt; will be equal to &lt;code&gt;[&quot;1&quot;, &quot;2&quot;]&lt;/code&gt; because of the string conversion.&lt;/p&gt;\n&lt;p&gt;EDIT: As pointed out in the comments, comparing string arrays can produce false positives, such as &lt;code&gt;[&quot;1,2&quot;]&lt;/code&gt; being &apos;equal&apos; to &lt;code&gt;[&quot;1&quot;, &quot;2&quot;]&lt;/code&gt;. This is of no concern if you are sure these never occur (e.g. in many code golfing challenges).&lt;/p&gt;\n&lt;h2&gt;Disclaimer&lt;/h2&gt;\n&lt;p&gt;While this is useful for code golfing, it should probably not be used in production code. The two flaws pointed out aren&apos;t helping that either.&lt;/p&gt;\n    ","\n&lt;p&gt;There are many complicated long answers in here, so I just want to contribute one very simple answer: use toString() to turn an array into a simple comma-separated string which you can easily compare with ===&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;())  &lt;span class=&quot;hljs-comment&quot;&gt;// this outputs &quot;1,2,3&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() === b.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;())  &lt;span class=&quot;hljs-comment&quot;&gt;// this outputs true because &quot;1,2,3&quot; === &quot;1,2,3&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() === c.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;())  &lt;span class=&quot;hljs-comment&quot;&gt;// this outputs false because &quot;1,2,3&quot; != &quot;4,2,3&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a Typescript version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//https://stackoverflow.com/a/16436975/2589276&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; arraysEqual&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;): boolean {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a === b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || b == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; != b.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[i] !== b[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//https://stackoverflow.com/a/16436975/2589276&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; arraysDeepEqual&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;): boolean {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(b)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some test cases for mocha:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arraysEqual&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; d = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; e = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; f = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; g = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banan8&apos;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysEqual&lt;/span&gt;(a, b)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysEqual&lt;/span&gt;(c, d)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysEqual&lt;/span&gt;(a, d)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysEqual&lt;/span&gt;(e, f)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysEqual&lt;/span&gt;(f, g)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n})\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arraysDeepEqual&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; d = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; e = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; f = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; g = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banan8&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; h = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banan8&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banan8&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; j = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;banan8&apos;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(a, b)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(c, d)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(a, d)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(e, f)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(f, g)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(h, i)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arraysDeepEqual&lt;/span&gt;(h, j)).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a &lt;a href=&quot;https://github.com/tc39/proposal-array-equality&quot; rel=&quot;noreferrer&quot;&gt;Stage 1 proposal&lt;/a&gt;, introduced in 2020, to allow for the easy comparison of arrays by adding &lt;code&gt;Array.prototype.equals&lt;/code&gt; to the language. This is how it would work, without any libraries, monkeypatching, or any other code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;// evaluates to true&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;// evaluates to false&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]]) &lt;span class=&quot;hljs-comment&quot;&gt;// evaluates to true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s only a tentative proposal so far - TC39 &lt;a href=&quot;https://tc39.es/process-document/&quot; rel=&quot;noreferrer&quot;&gt;will now&lt;/a&gt; &quot;devote time to examining the problem space, solutions and cross-cutting concerns&quot;. If it makes it to stage 2, it has a good chance of eventually being integrated into the language proper.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using a testing framework like &lt;a href=&quot;http://mochajs.org/&quot; rel=&quot;noreferrer&quot;&gt;Mocha&lt;/a&gt; with the &lt;a href=&quot;http://chaijs.com/&quot; rel=&quot;noreferrer&quot;&gt;Chai&lt;/a&gt; assertion library, you can use &lt;a href=&quot;http://chaijs.com/api/bdd/#deep&quot; rel=&quot;noreferrer&quot;&gt;deep&lt;/a&gt; equality to compare arrays.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(a1).&lt;span class=&quot;hljs-property&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;deep&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(a2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should return true only if the arrays have equal elements at corresponding indices.&lt;/p&gt;\n    ","\n&lt;p&gt;If they are two arrays of numbers or strings only, this is a quick one-line one&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array1.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) === array2.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array3 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array4 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array3.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) === array4.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another approach with very few code (using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot; rel=&quot;noreferrer&quot;&gt;Array reduce&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot; rel=&quot;noreferrer&quot;&gt;Array includes&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; == arr2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a &amp;amp;&amp;amp; arr2.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(b), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to compare also the equality of order:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; == arr2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a &amp;amp;&amp;amp; arr2[i], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;length&lt;/code&gt; check ensures that the set of elements in one array isn&apos;t just a subset of the other one.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The reducer is used to walk through one array and search for each item in other array. If one item isn&apos;t found the reduce function returns &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;In the first example it&apos;s being tested that an element is included&lt;/li&gt;\n&lt;li&gt;The second example check for the order too&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Lot of good answers here. This is how I usually do it -&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( arr1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === arr2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a1&lt;/span&gt;) =&amp;gt;&lt;/span&gt; arr2.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(a1)) ) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// logic&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;every()&lt;/code&gt; will only return true if all elements pass the given camparison\nlogic. If it encounters a false, in any iteration, it terminates and\nreturns false.&lt;/p&gt;\n&lt;p&gt;Time complexity will be O(n*m).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Here you go,&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; diff = b.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; !a.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(diff)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Most of the above answers dosen&apos;t work for unordered list.\nThis works for unordered lists too.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; diff = b.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; !a.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(diff)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If size of a is greater than b,&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; diff = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; b.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; ? a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; !b.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(e)) : b.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; !a.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(diff)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;We could do this the functional way, using &lt;code&gt;every&lt;/code&gt; (&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every&quot; rel=&quot;nofollow&quot;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every&lt;/a&gt;)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareArrays&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array1, array2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (array1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === array2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array1.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a === array2[index])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a3 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a4 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;compareArrays&lt;/span&gt;(a1,a2)) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;compareArrays&lt;/span&gt;(a1,a3)) &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;compareArrays&lt;/span&gt;(a3,a4)) &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This compares 2 unsorted arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; != b.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !b.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(i);\n  }).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simple approach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((a &amp;amp;&amp;amp; !b) || (!a &amp;amp;&amp;amp; b) || (!a &amp;amp;&amp;amp; !b) || (a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== b.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isDifferent = a.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;element, index&lt;/span&gt;) { \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element !== b[index];\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !isDifferent;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here a possibility for unsorted arrays and custom comparison:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isInArray1 = array1.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; array2.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item2&lt;/span&gt; =&amp;gt;&lt;/span&gt; item===item2))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isInArray2 = array2.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; array1.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item2&lt;/span&gt; =&amp;gt;&lt;/span&gt; item===item2))\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isSameArray = array1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === array2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; isInArray1 &amp;amp;&amp;amp; isInArray2\n    \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(isSameArray); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Herer&apos;s my solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Tests two data structures for equality\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;object&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;object&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;y&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt;}\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; equal = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x !== &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; y) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; y &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; x.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== y.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(p)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x[p] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; y[p] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x[p] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; y[p] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; x[p].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== y[p].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x[p] !== &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; y[p]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x[p] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; y[p] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;equal&lt;/span&gt;(x[p], y[p])) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x[p] !== y[p]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x === y;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Works with any nested data structure, and obviously ignores objects&apos; methods. Don&apos;t even think of extending Object.prototype with this method, when I tried this once, jQuery broke ;)&lt;/p&gt;\n\n&lt;p&gt;For most arrays it&apos;s still faster than most of serialization solutions. It&apos;s probably the fastest compare method for arrays of object records.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(collectionNames).&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(sourceNames)) ?  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(collection[i]) : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is how i did it.&lt;/p&gt;\n    ","\n&lt;p&gt;Already some great answers.But i would like to share anther idea which has proven to be reliable in comparing arrays. We can compare two array using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;JSON.stringify ( )&lt;/strong&gt;&lt;/a&gt; . It will create a string out the the array and thus compare two obtained strings from two array for equality&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":232,"title":"How to compare arrays in JavaScript?","content":"\n                \n&lt;p&gt;I&apos;d like to compare two arrays... ideally, efficiently. Nothing fancy, just &lt;code&gt;true&lt;/code&gt; if they are identical, and &lt;code&gt;false&lt;/code&gt; if not. Not surprisingly, the comparison operator doesn&apos;t seem to work.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a1==a2);    &lt;span class=&quot;hljs-comment&quot;&gt;// Returns false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a1)==&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a2));    &lt;span class=&quot;hljs-comment&quot;&gt;// Returns true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JSON encoding each array does, but is there a faster or &quot;better&quot; way to simply compare arrays without having to iterate through each value?&lt;/p&gt;\n    ","slug":"how-to-compare-arrays-in-javascript-1657387352277","postType":"QUESTION","createdAt":"2022-07-09T17:22:32.000Z","updatedAt":"2022-07-09T17:22:32.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Sending Email in Android using JavaMail API without using the default/built-in app","slug":"sending-email-in-android-using-javamail-api-without-using-the-defaultbuilt-in-app-1657387883400"},{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"How can I upload files asynchronously with jQuery?","slug":"how-can-i-upload-files-asynchronously-with-jquery-1657384815389"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"Int division: Why is the result of 1/3 == 0?","slug":"int-division:-why-is-the-result-of-13-0-1657387547814"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"Firebase query if child of child contains a value","slug":"firebase-query-if-child-of-child-contains-a-value-1657387841291"},{"title":"Arrays, linked lists and other data structures in cmd.exe (batch) script","slug":"arrays-linked-lists-and-other-data-structures-in-cmd.exe-(batch)-script-1657387558484"},{"title":"Why Use Integer Instead of Long?","slug":"why-use-integer-instead-of-long-1657388012352"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"},{"title":"How can I validate an email address in JavaScript?","slug":"how-can-i-validate-an-email-address-in-javascript-1657385475959"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"$(document).ready equivalent without jQuery","slug":"dollar(document).ready-equivalent-without-jquery-1657388504115"},{"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043"},{"title":"I just assigned a variable, but echo $variable shows something else","slug":"i-just-assigned-a-variable-but-echo-dollarvariable-shows-something-else-1657387574561"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"Why is \"using namespace std;\" considered bad practice?","slug":"why-is-\"using-namespace-std\"-considered-bad-practice-1657384296377"},{"title":"Why should there be spaces around '[' and ']' in Bash?","slug":"why-should-there-be-spaces-around-''-and-''-in-bash-1657387984122"}]},"__N_SSG":true}