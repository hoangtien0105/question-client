{"pageProps":{"data":{"answer":["\n&lt;p&gt;Here&apos;s some fun valid XML for you:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE x [ &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!ENTITY y &lt;span class=&quot;hljs-string&quot;&gt;&quot;a]&amp;gt;b&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; ]&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;x&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;y;&lt;/span&gt;&amp;gt;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &amp;lt;![CDATA[[a&amp;gt;b &amp;lt;a&amp;gt;b &amp;lt;a]]&amp;gt;\n    &amp;lt;?x &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- &amp;lt;b&amp;gt; ?&amp;gt; c --&amp;gt;&lt;/span&gt; d\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;x&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And this little bundle of joy is valid HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt; [\n    &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!ENTITY % e &lt;span class=&quot;hljs-string&quot;&gt;&quot;href=&apos;hello&apos;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!ENTITY e &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a %e;&amp;gt;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n]&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;x&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;TITLE&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;  =  &lt;span class=&quot;hljs-string&quot;&gt;a:b&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; / &lt;span class=&quot;hljs-attr&quot;&gt;hello&lt;/span&gt; &amp;lt;/&lt;span class=&quot;hljs-attr&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &amp;amp;amp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;left&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!---- &amp;gt;t&amp;lt;!---&amp;gt;&lt;/span&gt; &amp;lt; --&amp;gt;\n    &amp;amp;e link &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not to mention all the browser-specific parsing for invalid constructs.&lt;/p&gt;\n\n&lt;p&gt;Good luck pitting regex against that!&lt;/p&gt;\n\n&lt;p&gt;EDIT (JÃ¶rg W Mittag): Here is another nice piece of well-formed, valid HTML 4.01:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//W3C//DTD HTML 4.01//EN&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/TR/html4/strict.dtd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; \n&amp;lt;HTML/\n  &amp;lt;HEAD/\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;TITLE&lt;/span&gt;/&amp;gt;&lt;/span&gt;/\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;P&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Actually&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;imgtag.gif&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;img&amp;gt;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is not valid HTML, and is not valid XML either.&lt;/p&gt;\n\n&lt;p&gt;It is not valid XML because the &apos;&amp;lt;&apos; and &apos;&amp;gt;&apos; are not valid characters inside attribute strings. They need to be escaped using the corresponding XML entities &amp;amp;lt; and &amp;amp;gt;&lt;/p&gt;\n\n&lt;p&gt;It is not valid HTML either because the short closing form is not allowed in HTML (but is correct in XML and XHTML). The &apos;img&apos; tag is also an implicitly closed tag as per the HTML 4.01 specification. This means that manually closing it is actually wrong, and is equivalent to closing any other tag twice.&lt;/p&gt;\n\n&lt;p&gt;The correct version in HTML is&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;imgtag.gif&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;img&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the correct version in XHTML and XML is&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;imgtag.gif&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;img&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following example you gave is also invalid&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;&amp;lt;\ntag\nattr=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;\n/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is not valid HTML or XML either. The name of the tag must be right behind the &apos;&amp;lt;&apos;, although the attributes and the closing &apos;&amp;gt;&apos; may be wherever they want. So the valid XML is actually&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tag&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;attr&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;\n/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here&apos;s another funkier one: you can actually choose to use either &quot; or &apos; as your attribute quoting character&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;image.gif&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is single quoted AND valid!&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All the other reasons that were posted are correct, but the biggest problem with parsing HTML is that people usually don&apos;t understand all the syntax rules correctly. The fact that your browser interprets your tagsoup as HTML doesn&apos;t means that you have actually written valid HTML.&lt;/p&gt;\n\n&lt;p&gt;Edit: And even stackoverflow.com agrees with me regarding the definition of valid and invalid. Your invalid XML/HTML is not highlighted, while my corrected version is.&lt;/p&gt;\n\n&lt;p&gt;Basically, XML is not made to be parsed with regexps. But there is also no reason to do so. There are many, many XML parsers for each and every language. You have the choice between SAX parsers, DOM parsers and Pull parsers. All of these are guaranteed to be much faster than parsing with a regexp and you may then use cool technologies like XPath or XSLT on the resulting DOM tree.&lt;/p&gt;\n\n&lt;p&gt;My reply is therefore: not only is parsing XML with regexps hard, but it is also a bad idea. Just use one of the millions of existing XML parsers, and take advantage of all the advanced features of XML. &lt;/p&gt;\n\n&lt;p&gt;HTML is just too hard to even try parsing on your own. First the legal syntax has many little subtleties that you may not be aware of, and second, HTML in the wild is just a huge stinking pile of (you get my drift). There are a variety of lax parser libraries that do a good job at handling HTML like tag soup, just use these.&lt;/p&gt;\n    ","\n&lt;p&gt;I wrote an entire blog entry on this subject: &lt;a href=&quot;https://blog.paranoidcoding.com/2008/10/15/regular-expression-limitations.html&quot; rel=&quot;noreferrer&quot;&gt;Regular Expression Limitations&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The crux of the issue is that HTML and XML are recursive structures which require counting mechanisms in order to properly parse.  A true regex is not capable of counting.  You must have a context free grammar in order to count.&lt;/p&gt;\n&lt;p&gt;The previous paragraph comes with a slight caveat.  Certain regex implementations now support the idea of recursion.  However once you start adding recursion into your regex expressions, you are really stretching the boundaries and should consider a parser.&lt;/p&gt;\n    ","\n&lt;p&gt;One gotcha not on your list is that attributes can appear in any order, so if your regex is looking for a link with the href &quot;foo&quot; and the class &quot;bar&quot;, they can come in any order, and have any number of other things between them.&lt;/p&gt;\n    ","\n&lt;p&gt;It depends on what you mean by &quot;parsing&quot;. Generally speaking, XML cannot be parsed using regex since XML grammar is by no means regular. To put it simply, regexes cannot count (well, Perl regexes might actually be able to count things) so you cannot balance open-close tags.&lt;/p&gt;\n    ","\n&lt;p&gt;Are people actually making a mistake by using a regex, or is it simply good enough for the task they&apos;re trying to achieve?&lt;/p&gt;\n\n&lt;p&gt;I totally agree that parsing html and xml using a regex is not possible as other people have answered.&lt;/p&gt;\n\n&lt;p&gt;However, if your requirement is not to parse html/xml but to just get at one small bit of data in a &quot;known good&quot; bit of html / xml then maybe a regular expression or even an even simpler &quot;substring&quot; is good enough.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m tempted to say &quot;don&apos;t re-invent the wheel&quot;. Except that XML is a really, &lt;em&gt;really&lt;/em&gt; complex format. So maybe I should say &quot;don&apos;t reinvent the synchrotron.&quot;&lt;/p&gt;\n\n&lt;p&gt;Perhaps the correct cliche starts &quot;when all you have is a hammer...&quot; You know how to use regular expressions, regular expression are good at parsing, so why bother to learn an XML parsing library?&lt;/p&gt;\n\n&lt;p&gt;Because parsing XML is &lt;em&gt;hard&lt;/em&gt;. Any effort you save by not having to learn to use an XML parsing library will be more than made up by the amount of creative work and bug-swatting you will have to do. For your own sake, google &quot;XML library&quot; and leverage somebody else&apos;s work.&lt;/p&gt;\n    ","\n&lt;p&gt;People normally default to writing greedy patterns, often enough leading to an un-thought-through .* slurping large chunks of file into the largest possible &amp;lt;foo&amp;gt;.*&amp;lt;/foo&amp;gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I think the problems boil down to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The regex is almost invariably incorrect. There are legitimate inputs which it will fail to match correctly. If you work hard enough you can make it 99% correct, or 99.999%, but making it 100% correct is almost impossible, if only because of the weird things that XML allows by using entities.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the regex is incorrect, even for 0.00001% of inputs, then you have a security problem, because someone can discover the one input that will break your application.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the regex is correct enough to cover 99.99% of cases then it is going to be thoroughly unreadable and unmaintainable.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It&apos;s very likely that a regex will perform very badly on moderate-sized input files. My very first encounter with XML was to replace a Perl script that (incorrectly) parsed incoming XML documents with a proper XML parser, and we not only replaced 300 lines of unreadable code with 100 lines that anyone could understand, but we improved user response time from 10 seconds to about 0.1 seconds.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I believe &lt;a href=&quot;https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags&quot;&gt;this&lt;/a&gt; &lt;strong&gt;classic&lt;/strong&gt; has the information you are looking for. You can find the point in one of the comments there:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;I think the flaw here is that HTML is a Chomsky Type 2 grammar\n  (context free grammar) and RegEx is a Chomsky Type 3 grammar (regular\n  expression). &lt;strong&gt;Since a Type 2 grammar is fundamentally more complex than\n  a Type 3 grammar - you can&apos;t possibly hope to make this work&lt;/strong&gt;. But many\n  will try, some will claim success and others will find the fault and\n  totally mess you up.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Some more info from Wikipedia: &lt;a href=&quot;http://en.wikipedia.org/wiki/Chomsky_hierarchy&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Chomsky Hierarchy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I gave a simplified answer to this problem &lt;a href=&quot;https://stackoverflow.com/a/33856224/3257871&quot;&gt;here&lt;/a&gt;.  While it doesn&apos;t account for the 100% mark, I explain how it&apos;s possible if you&apos;re willing to do some pre-processing work.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Generally speaking, XML cannot be parsed using regex since XML grammar is by no means regular. To put it simply, regexes cannot count (well, Perl regexes might actually be able to count things) so you cannot balance open-close tags.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I disagree. If you will use recursive in regex, you can easily find open and close tags.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1692830/matching-pair-tag-with-regex/28369773#28369773&quot;&gt;Here&lt;/a&gt; I showed example of regex to avoid parsing errors of examples in first message.&lt;/p&gt;\n    "],"id":557,"title":"Can you provide some examples of why it is hard to parse XML and HTML with a regex? [closed]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Closed&lt;/b&gt;. This question needs to be more &lt;a href=&quot;/help/closed-questions&quot;&gt;focused&lt;/a&gt;. It is not currently accepting answers.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n            &lt;hr class=&quot;my12 outline-none baw0 bb bc-powder-400&quot;&gt;\n        &lt;div class=&quot;fw-nowrap fc-black-600&quot;&gt;\n            &lt;div class=&quot;d-flex fd-column lh-md&quot;&gt;\n                &lt;div class=&quot;mb0 d-flex&quot;&gt;\n                        &lt;div class=&quot;flex--item mr8&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLightbulb&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M15 6.38A6.48 6.48 0 0 0 7.78.04h-.02A6.49 6.49 0 0 0 2.05 5.6a6.31 6.31 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0 0 15 6.37ZM4.03 5.85A4.49 4.49 0 0 1 8 2.02a4.48 4.48 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 0 1-1.64-3.94ZM10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2h3Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/div&gt;\n                    &lt;p&gt;&lt;b&gt;Want to improve this question?&lt;/b&gt; Update the question so it focuses on one problem only by &lt;a href=&quot;/posts/701166/edit&quot;&gt;editing this post&lt;/a&gt;.&lt;/p&gt;\n                &lt;/div&gt;\n                    &lt;div class=&quot;mb0 mt6 d-flex&quot;&gt;\n                        &lt;p class=&quot;ml24 pl2&quot;&gt;Closed &lt;span title=&quot;2016-11-02 17:37:34Z&quot; class=&quot;relativetime&quot;&gt;5 years ago&lt;/span&gt;.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;ml24 pl2&quot;&gt;\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n            &lt;div class=&quot;mt24 d-flex gsx gs8&quot;&gt;\n                    &lt;a class=&quot;s-btn s-btn__outlined flex--item js-post-notice-edit-post&quot; href=&quot;/posts/701166/edit&quot;&gt;\n                        Improve this question\n                    &lt;/a&gt;\n            &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;One mistake I see people making &lt;a href=&quot;https://stackoverflow.com/questions/699708/variable-order-regex-syntax&quot;&gt;over&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/457015/regular-expression-help&quot;&gt;over again&lt;/a&gt; is trying to parse XML or HTML with a regex.  Here are a few of the reasons parsing XML and HTML is hard:&lt;/p&gt;\n\n&lt;p&gt;People want to treat a file as a sequence of lines, but this is valid:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tag&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;attr&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;\n/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;People want to treat &amp;lt; or &amp;lt;tag as the start of a tag, but stuff like this exists in the wild:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;imgtag.gif&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;img&amp;gt;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;People often want to match starting tags to ending tags, but XML and HTML allow tags to contain themselves (which traditional regexes cannot handle at all):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&amp;lt;span &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer&quot;&lt;/span&gt;&amp;gt;&amp;lt;span &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner&quot;&lt;/span&gt;&amp;gt;foo&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;People often want to match against the content of a document (such as the famous &quot;find all phone numbers on a given page&quot; problem), but the data may be marked up (even if it appears to be normal when viewed):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;phonenum&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;area code&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;703&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;)\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;348&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;-&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;linenum&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3020&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Comments may contain poorly formatted or incomplete tags:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;foo&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- &lt;span class=&quot;hljs-doctag&quot;&gt;FIXME:&lt;/span&gt;\n    &amp;lt;a href=&quot;\n--&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;bar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What other gotchas are you aware of?&lt;/p&gt;\n    ","slug":"can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-regex-closed-1657388410824","postType":"QUESTION","createdAt":"2022-07-09T17:40:10.000Z","updatedAt":"2022-07-09T17:40:10.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"How can I make an AJAX call without jQuery?","slug":"how-can-i-make-an-ajax-call-without-jquery-1657388448955"},{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"What is an efficient way to implement a singleton pattern in Java? [closed]","slug":"what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java-closed-1657387970474"},{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"},{"title":"\"Notice: Undefined variable\", \"Notice: Undefined index\", \"Warning: Undefined array key\", and \"Notice: Undefined offset\" using PHP","slug":"\"notice:-undefined-variable\"-\"notice:-undefined-index\"-\"warning:-undefined-array-key\"-and-\"notice:-undefined-offset\"-using-php-1657384250748"},{"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"How does the \"this\" keyword work, and when should it be used?","slug":"how-does-the-\"this\"-keyword-work-and-when-should-it-be-used-1657384384385"},{"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964"},{"title":"How to use ThreeTenABP in Android Project","slug":"how-to-use-threetenabp-in-android-project-1657384345704"},{"title":"Add a property to a JavaScript object using a variable as the name?","slug":"add-a-property-to-a-javascript-object-using-a-variable-as-the-name-1657388425650"},{"title":"How to print without a newline or space","slug":"how-to-print-without-a-newline-or-space-1657387814213"},{"title":"$(document).ready equivalent without jQuery","slug":"dollar(document).ready-equivalent-without-jquery-1657388504115"},{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"How do I declare a 2d array in C++ using new?","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163"}]},"__N_SSG":true}