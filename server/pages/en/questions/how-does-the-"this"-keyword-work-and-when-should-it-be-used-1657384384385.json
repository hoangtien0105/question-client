{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; is a keyword in JavaScript that is a property of an execution context. Its main use is in functions and constructors.\nThe rules for &lt;code&gt;this&lt;/code&gt; are quite simple (if you stick to best practices).&lt;/p&gt;\n&lt;h2&gt;Technical description of &lt;code&gt;this&lt;/code&gt; in the specification&lt;/h2&gt;\n&lt;p&gt;The &lt;a href=&quot;//tc39.es/ecma262&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript standard&lt;/a&gt; defines &lt;a href=&quot;//tc39.es/ecma262/#sec-this-keyword&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; via the abstract operation (abbreviated &lt;em&gt;AO&lt;/em&gt;) &lt;a href=&quot;//tc39.es/ecma262/#sec-resolvethisbinding&quot; rel=&quot;noreferrer&quot;&gt;ResolveThisBinding&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The [AO] ResolveThisBinding [] determines the binding of the keyword &lt;code&gt;this&lt;/code&gt; using the LexicalEnvironment of the &lt;a href=&quot;//tc39.es/ecma262/#running-execution-context&quot; rel=&quot;noreferrer&quot;&gt;running execution context&lt;/a&gt;. [Steps]:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;envRec&lt;/em&gt; be &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisenvironment&quot; rel=&quot;noreferrer&quot;&gt;GetThisEnvironment&lt;/a&gt;().&lt;/li&gt;\n&lt;li&gt;Return ? &lt;em&gt;envRec&lt;/em&gt;.GetThisBinding().&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-global-environment-records&quot; rel=&quot;noreferrer&quot;&gt;Global Environment Records&lt;/a&gt;, &lt;a href=&quot;//tc39.es/ecma262/#sec-module-environment-records&quot; rel=&quot;noreferrer&quot;&gt;module Environment Records&lt;/a&gt;, and &lt;a href=&quot;//tc39.es/ecma262/#sec-function-environment-records&quot; rel=&quot;noreferrer&quot;&gt;function Environment Records&lt;/a&gt; each have their own GetThisBinding method.&lt;/p&gt;\n&lt;p&gt;The &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisenvironment&quot; rel=&quot;noreferrer&quot;&gt;GetThisEnvironment&lt;/a&gt; AO finds the current &lt;a href=&quot;//tc39.es/ecma262/#running-execution-context&quot; rel=&quot;noreferrer&quot;&gt;running execution context&lt;/a&gt;s LexicalEnvironment and finds the closest ascendant Environment Record (by iteratively accessing their [[OuterEnv]] properties) which has a &lt;em&gt;this&lt;/em&gt; binding (i.e. HasThisBinding returns &lt;strong&gt;true&lt;/strong&gt;). This process ends in one of the three Environment Record types.&lt;/p&gt;\n&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; often depends on whether code is in &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode&quot; rel=&quot;noreferrer&quot;&gt;strict mode&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The return value of GetThisBinding reflects the value of &lt;code&gt;this&lt;/code&gt; of the current execution context, so whenever a new execution context is established, &lt;code&gt;this&lt;/code&gt; resolves to a distinct value. This can also happen when the current execution context is modified. The following subsections list the five cases where this can happen.&lt;/p&gt;\n&lt;p&gt;You can put the code samples in the &lt;a href=&quot;//astexplorer.net/&quot; rel=&quot;noreferrer&quot;&gt;AST explorer&lt;/a&gt; to follow along with specification details.&lt;/p&gt;\n&lt;h3&gt;1. Global execution context in scripts&lt;/h3&gt;\n&lt;p&gt;This is script code evaluated at the top level, e.g. directly inside a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Global context&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs global object.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not global context&quot;&lt;/span&gt;);\n});\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When in the initial global execution context of a script, evaluating &lt;code&gt;this&lt;/code&gt; causes &lt;a href=&quot;//tc39.es/ecma262/#sec-global-environment-records-getthisbinding&quot; rel=&quot;noreferrer&quot;&gt;GetThisBinding&lt;/a&gt; to take the following steps:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The GetThisBinding concrete method of a global Environment Record &lt;em&gt;envRec&lt;/em&gt; [] [does this]:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Return &lt;em&gt;envRec&lt;/em&gt;.[[GlobalThisValue]].&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The [[GlobalThisValue]] property of a global Environment Record is always set to the host-defined &lt;a href=&quot;//tc39.es/ecma262/#sec-global-object&quot; rel=&quot;noreferrer&quot;&gt;global object&lt;/a&gt;, which is reachable via &lt;a href=&quot;//tc39.es/ecma262/#sec-globalthis&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;window&lt;/code&gt; on Web, &lt;code&gt;global&lt;/code&gt; on Node.js; &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/globalThis&quot; rel=&quot;noreferrer&quot;&gt;Docs on MDN&lt;/a&gt;). Follow the steps of &lt;a href=&quot;//tc39.es/ecma262/#sec-initializehostdefinedrealm&quot; rel=&quot;noreferrer&quot;&gt;InitializeHostDefinedRealm&lt;/a&gt; to learn how the [[GlobalThisValue]] property comes to be.&lt;/p&gt;\n&lt;h3&gt;2. Global execution context in &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Guide/Modules&quot; rel=&quot;noreferrer&quot;&gt;modules&lt;/a&gt;&lt;/h3&gt;\n&lt;p&gt;Modules have been introduced in ECMAScript 2015.&lt;/p&gt;\n&lt;p&gt;This applies to modules, e.g. when directly inside a &lt;code&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;&lt;/code&gt;, as opposed to a simple &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;When in the initial global execution context of a module, evaluating &lt;code&gt;this&lt;/code&gt; causes &lt;a href=&quot;//tc39.es/ecma262/#sec-module-environment-records-getthisbinding&quot; rel=&quot;noreferrer&quot;&gt;GetThisBinding&lt;/a&gt; to take the following steps:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The GetThisBinding concrete method of a module Environment Record [] [does this]:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Return &lt;strong&gt;undefined&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In modules, the value of &lt;code&gt;this&lt;/code&gt; is always &lt;code&gt;undefined&lt;/code&gt; in the global context. Modules are implicitly in &lt;a href=&quot;//tc39.es/ecma262/#sec-strict-mode-code&quot; rel=&quot;noreferrer&quot;&gt;strict mode&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;3. Entering &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/eval&quot; rel=&quot;noreferrer&quot;&gt;eval&lt;/a&gt; code&lt;/h3&gt;\n&lt;p&gt;There are two kinds of &lt;code&gt;eval&lt;/code&gt; calls: &lt;a href=&quot;//tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;direct&lt;/a&gt; and &lt;a href=&quot;//tc39.es/ecma262/#sec-eval-x&quot; rel=&quot;noreferrer&quot;&gt;indirect&lt;/a&gt;. This distinction exists since the ECMAScript 5th edition.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;A direct &lt;code&gt;eval&lt;/code&gt; call usually looks like &lt;code&gt;eval(&lt;/code&gt;&lt;code&gt;);&lt;/code&gt; or &lt;code&gt;(eval)(&lt;/code&gt;&lt;code&gt;);&lt;/code&gt; (or &lt;code&gt;((eval))(&lt;/code&gt;&lt;code&gt;);&lt;/code&gt;, etc.).&lt;sup&gt;1&lt;/sup&gt; Its only &lt;em&gt;direct&lt;/em&gt; if the call expression fits a narrow pattern.&lt;sup&gt;2&lt;/sup&gt;&lt;/li&gt;\n&lt;li&gt;An indirect &lt;code&gt;eval&lt;/code&gt; call involves calling the function reference &lt;code&gt;eval&lt;/code&gt; in any other way. It could be &lt;code&gt;eval?.(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;&lt;code&gt;, eval)(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, &lt;code&gt;window.eval(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, &lt;code&gt;eval.call(&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, etc. Given &lt;code&gt;const aliasEval1 = eval; window.aliasEval2 = eval;&lt;/code&gt;, it would also be &lt;code&gt;aliasEval1(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, &lt;code&gt;aliasEval2(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;. Separately, given &lt;code&gt;const originalEval = eval; window.eval = (x) =&amp;gt; originalEval(x);&lt;/code&gt;, calling &lt;code&gt;eval(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt; would also be indirect.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;See &lt;a href=&quot;//stackoverflow.com/a/9107491/196844&quot;&gt;chuckjs answer to &lt;em&gt;(1, eval)(&apos;this&apos;) vs eval(&apos;this&apos;) in JavaScript?&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;//dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode#indirect-eval-call&quot; rel=&quot;noreferrer&quot;&gt;Dmitry Soshnikovs ECMA-262-5 in detail  Chapter 2: Strict Mode&lt;/a&gt; (&lt;a href=&quot;//web.archive.org/web/20210530120958/https://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode#indirect-eval-call&quot; rel=&quot;noreferrer&quot;&gt;archived&lt;/a&gt;) for when you might use an indirect &lt;code&gt;eval()&lt;/code&gt; call.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-performeval&quot; rel=&quot;noreferrer&quot;&gt;PerformEval&lt;/a&gt; executes the &lt;code&gt;eval&lt;/code&gt; code. It creates a new &lt;a href=&quot;//tc39.es/ecma262/#sec-declarative-environment-records&quot; rel=&quot;noreferrer&quot;&gt;declarative Environment Record&lt;/a&gt; as its LexicalEnvironment, which is where &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisenvironment&quot; rel=&quot;noreferrer&quot;&gt;GetThisEnvironment&lt;/a&gt; gets the &lt;code&gt;this&lt;/code&gt; value from.&lt;/p&gt;\n&lt;p&gt;Then, if &lt;code&gt;this&lt;/code&gt; appears in &lt;code&gt;eval&lt;/code&gt; code, the GetThisBinding method of the Environment Record found by &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisenvironment&quot; rel=&quot;noreferrer&quot;&gt;GetThisEnvironment&lt;/a&gt; is called and its value returned.&lt;/p&gt;\n&lt;p&gt;And the created &lt;a href=&quot;//tc39.es/ecma262/#sec-declarative-environment-records&quot; rel=&quot;noreferrer&quot;&gt;declarative Environment Record&lt;/a&gt; depends on whether the &lt;code&gt;eval&lt;/code&gt; call was direct or indirect:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;In a direct eval, it will be based on the current &lt;a href=&quot;//tc39.es/ecma262/#running-execution-context&quot; rel=&quot;noreferrer&quot;&gt;running execution context&lt;/a&gt;s LexicalEnvironment.&lt;/li&gt;\n&lt;li&gt;In an indirect eval, it will be based on the [[GlobalEnv]] property (a &lt;a href=&quot;//tc39.es/ecma262/#sec-global-environment-records&quot; rel=&quot;noreferrer&quot;&gt;global Environment Record&lt;/a&gt;) of the &lt;a href=&quot;//tc39.es/ecma262/#sec-code-realms&quot; rel=&quot;noreferrer&quot;&gt;Realm Record&lt;/a&gt; which executed the indirect eval.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Which means:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;In a direct eval, the &lt;code&gt;this&lt;/code&gt; value doesnt change; its taken from the lexical scope that called &lt;code&gt;eval&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;In an indirect eval, the &lt;code&gt;this&lt;/code&gt; value is the global object (&lt;code&gt;globalThis&lt;/code&gt;).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;em&gt;What about &lt;code&gt;new Function&lt;/code&gt;?&lt;/em&gt;&lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/Function&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;new Function&lt;/code&gt;&lt;/a&gt; is similar to &lt;code&gt;eval&lt;/code&gt;, but it doesnt call the code immediately; it creates a function. A &lt;em&gt;this&lt;/em&gt; binding doesnt apply anywhere here, except when the function is called, which works normally, as explained in the next subsection.&lt;/p&gt;\n&lt;h3&gt;4. Entering &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions&quot; rel=&quot;noreferrer&quot;&gt;function&lt;/a&gt; code&lt;/h3&gt;\n&lt;p&gt;Entering function code occurs when &lt;em&gt;calling&lt;/em&gt; a function.&lt;/p&gt;\n&lt;p&gt;There are four categories of syntax to invoke a function.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The &lt;a href=&quot;//tc39.es/ecma262/#sec-evaluatecall&quot; rel=&quot;noreferrer&quot;&gt;EvaluateCall&lt;/a&gt; AO is performed for these three:&lt;sup&gt;3&lt;/sup&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;Normal function calls&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-optional-chaining-evaluation&quot; rel=&quot;noreferrer&quot;&gt;Optional chaining calls&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-tagged-templates-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;Tagged templates&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;And &lt;a href=&quot;//tc39.es/ecma262/#sec-evaluatenew&quot; rel=&quot;noreferrer&quot;&gt;EvaluateNew&lt;/a&gt; is performed for this one:&lt;sup&gt;3&lt;/sup&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-new-operator-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;Constructor invocations&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The actual function call happens at the &lt;a href=&quot;//tc39.es/ecma262/#sec-call&quot; rel=&quot;noreferrer&quot;&gt;Call&lt;/a&gt; AO, which is called with a &lt;em&gt;thisValue&lt;/em&gt; determined from context; this argument is passed along in a long chain of call-related calls. &lt;a href=&quot;//tc39.es/ecma262/#sec-call&quot; rel=&quot;noreferrer&quot;&gt;Call&lt;/a&gt; calls the &lt;a href=&quot;//tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist&quot; rel=&quot;noreferrer&quot;&gt;[[Call]]&lt;/a&gt; internal slot of the function. This calls &lt;a href=&quot;//tc39.es/ecma262/#sec-prepareforordinarycall&quot; rel=&quot;noreferrer&quot;&gt;PrepareForOrdinaryCall&lt;/a&gt; where a new &lt;a href=&quot;//tc39.es/ecma262/#sec-function-environment-records&quot; rel=&quot;noreferrer&quot;&gt;function Environment Record&lt;/a&gt; is created:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;A &lt;em&gt;function Environment Record&lt;/em&gt; is a declarative Environment Record that is used to represent the top-level scope of a function and, if the function is not an &lt;em&gt;ArrowFunction&lt;/em&gt;, provides a &lt;code&gt;this&lt;/code&gt; binding. If a function is not an &lt;em&gt;ArrowFunction&lt;/em&gt; function and references &lt;code&gt;super&lt;/code&gt;, its function Environment Record also contains the state that is used to perform &lt;code&gt;super&lt;/code&gt; method invocations from within the function.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In addition, there is the [[ThisValue]] field in a function Environment Record:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This is the &lt;code&gt;this&lt;/code&gt; value used for this invocation of the function.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The &lt;a href=&quot;//tc39.es/ecma262/#sec-newfunctionenvironment&quot; rel=&quot;noreferrer&quot;&gt;NewFunctionEnvironment&lt;/a&gt; call also sets the function environments [[ThisBindingStatus]] property.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist&quot; rel=&quot;noreferrer&quot;&gt;[[Call]]&lt;/a&gt; also calls &lt;a href=&quot;//tc39.es/ecma262/#sec-ordinarycallbindthis&quot; rel=&quot;noreferrer&quot;&gt;OrdinaryCallBindThis&lt;/a&gt;, where the appropriate &lt;em&gt;thisArgument&lt;/em&gt; is determined based on:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the original reference,&lt;/li&gt;\n&lt;li&gt;the kind of the function, and&lt;/li&gt;\n&lt;li&gt;whether or not the code is in &lt;a href=&quot;//tc39.es/ecma262/#sec-strict-mode-code&quot; rel=&quot;noreferrer&quot;&gt;strict mode&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Once determined, a final call to the &lt;a href=&quot;//tc39.es/ecma262/#sec-bindthisvalue&quot; rel=&quot;noreferrer&quot;&gt;BindThisValue&lt;/a&gt; method of the newly created function Environment Record actually sets the [[ThisValue]] field to the &lt;em&gt;thisArgument&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Finally, this very field is where a &lt;a href=&quot;//tc39.es/ecma262/#sec-function-environment-records&quot; rel=&quot;noreferrer&quot;&gt;function Environment Records&lt;/a&gt; &lt;a href=&quot;//tc39.es/ecma262/#sec-function-environment-records-getthisbinding&quot; rel=&quot;noreferrer&quot;&gt;GetThisBinding&lt;/a&gt; AO gets the value for &lt;code&gt;this&lt;/code&gt; from:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The GetThisBinding concrete method of a function Environment Record &lt;em&gt;envRec&lt;/em&gt; [] [does this]:&lt;/p&gt;\n&lt;p&gt;[]&lt;br&gt;\n3. Return &lt;em&gt;envRec&lt;/em&gt;.[[ThisValue]].&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Again, how exactly the &lt;em&gt;this&lt;/em&gt; value is determined depends on many factors; this was just a general overview. With this technical background, lets examine all the concrete examples.&lt;/p&gt;\n&lt;h4&gt;&lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;Arrow functions&lt;/a&gt;&lt;/h4&gt;\n&lt;p&gt;When an &lt;a href=&quot;//tc39.es/ecma262/#sec-runtime-semantics-instantiatearrowfunctionexpression&quot; rel=&quot;noreferrer&quot;&gt;arrow function&lt;/a&gt; is evaluated, the [[ThisMode]] internal slot of the function object is set to &lt;em&gt;lexical&lt;/em&gt; in &lt;a href=&quot;//tc39.es/ecma262/#sec-ordinaryfunctioncreate&quot; rel=&quot;noreferrer&quot;&gt;OrdinaryFunctionCreate&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;At &lt;a href=&quot;//tc39.es/ecma262/#sec-ordinarycallbindthis&quot; rel=&quot;noreferrer&quot;&gt;OrdinaryCallBindThis&lt;/a&gt;, which takes a function &lt;em&gt;F&lt;/em&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;thisMode&lt;/em&gt; be &lt;em&gt;F&lt;/em&gt;.[[ThisMode]].&lt;/li&gt;\n&lt;li&gt;If &lt;em&gt;thisMode&lt;/em&gt; is &lt;em&gt;lexical&lt;/em&gt;, return NormalCompletion(&lt;code&gt;undefined&lt;/code&gt;).\n[]&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;which just means that the rest of the algorithm which binds &lt;em&gt;this&lt;/em&gt; is skipped. An arrow function does not bind its own &lt;em&gt;this&lt;/em&gt; value.&lt;/p&gt;\n&lt;p&gt;So, what is &lt;code&gt;this&lt;/code&gt; inside an arrow function, then? Looking back at &lt;a href=&quot;//tc39.es/ecma262/#sec-resolvethisbinding&quot; rel=&quot;noreferrer&quot;&gt;ResolveThisBinding&lt;/a&gt; and &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisenvironment&quot; rel=&quot;noreferrer&quot;&gt;GetThisEnvironment&lt;/a&gt;, the &lt;a href=&quot;//tc39.es/ecma262/#sec-function-environment-records-hasthisbinding&quot; rel=&quot;noreferrer&quot;&gt;HasThisBinding method explicitly returns &lt;strong&gt;false&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The HasThisBinding concrete method of a function Environment Record &lt;em&gt;envRec&lt;/em&gt; [] [does this]:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;If &lt;em&gt;envRec&lt;/em&gt;.[[ThisBindingStatus]] is &lt;em&gt;lexical&lt;/em&gt;, return &lt;strong&gt;false&lt;/strong&gt;; otherwise, return &lt;strong&gt;true&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So the outer environment is looked up instead, iteratively. The process will end in one of the three environments that have a &lt;em&gt;this&lt;/em&gt; binding.&lt;/p&gt;\n&lt;p&gt;This just means that, &lt;strong&gt;in arrow function bodies, &lt;code&gt;this&lt;/code&gt; comes from the lexical scope of the arrow function&lt;/strong&gt;, or in other words (from &lt;a href=&quot;//stackoverflow.com/a/34361380&quot;&gt;Arrow function vs function declaration / expressions: Are they equivalent / exchangeable?&lt;/a&gt;):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Arrow functions dont have their own &lt;code&gt;this&lt;/code&gt; [] binding. Instead, [this identifier is] resolved in the lexical scope like any other variable. That means that inside an arrow function, &lt;code&gt;this&lt;/code&gt; [refers] to the [value of &lt;code&gt;this&lt;/code&gt;] in the environment the arrow function is &lt;em&gt;defined&lt;/em&gt; in (i.e. outside the arrow function).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h4&gt;Function &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_Accessors&quot; rel=&quot;noreferrer&quot;&gt;properties&lt;/a&gt;&lt;/h4&gt;\n&lt;p&gt;In normal functions (&lt;code&gt;function&lt;/code&gt;, &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Method_definitions&quot; rel=&quot;noreferrer&quot;&gt;methods&lt;/a&gt;), &lt;code&gt;this&lt;/code&gt; is determined &lt;strong&gt;by how the function is called&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;This is where these syntax variants come in handy.&lt;/p&gt;\n&lt;p&gt;Consider this object containing a function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; refObj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    }\n  };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; refObj = {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    }\n  };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In any of the following function calls, the &lt;code&gt;this&lt;/code&gt; value inside &lt;code&gt;func&lt;/code&gt; will be &lt;code&gt;refObj&lt;/code&gt;.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;refObj.func()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;refObj[&quot;func&quot;]()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;refObj?.func()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;refObj.func?.()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;refObj.func``&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If the called function is syntactically a property of a base object, then this base will be the reference of the call, which, in usual cases, will be the value of &lt;code&gt;this&lt;/code&gt;. This is explained by the evaluation steps linked above; for example, in &lt;code&gt;refObj.func()&lt;/code&gt; (or &lt;code&gt;refObj[&quot;func&quot;]()&lt;/code&gt;), the &lt;a href=&quot;//tc39.es/ecma262/#prod-CallMemberExpression&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;CallMemberExpression&lt;/em&gt;&lt;/a&gt; is the entire expression &lt;code&gt;refObj.func()&lt;/code&gt;, which consists of the &lt;em&gt;&lt;a href=&quot;//tc39.es/ecma262/#prod-MemberExpression&quot; rel=&quot;noreferrer&quot;&gt;MemberExpression&lt;/a&gt;&lt;/em&gt; &lt;code&gt;refObj.func&lt;/code&gt; and the &lt;a href=&quot;//tc39.es/ecma262/#prod-Arguments&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Arguments&lt;/em&gt;&lt;/a&gt; &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;But also, &lt;code&gt;refObj.func&lt;/code&gt; and &lt;code&gt;refObj&lt;/code&gt; play three roles, each:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;theyre both expressions,&lt;/li&gt;\n&lt;li&gt;theyre both references, and&lt;/li&gt;\n&lt;li&gt;theyre both values.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;refObj.func&lt;/code&gt; as a &lt;em&gt;value&lt;/em&gt; is the callable function object; the corresponding &lt;em&gt;reference&lt;/em&gt; is used to determine the &lt;code&gt;this&lt;/code&gt; binding.&lt;/p&gt;\n&lt;p&gt;The optional chaining and tagged template examples work very similarly: basically, the reference is everything before the &lt;code&gt;?.()&lt;/code&gt;, before the &lt;code&gt;``&lt;/code&gt;, or before the &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-evaluatecall&quot; rel=&quot;noreferrer&quot;&gt;EvaluateCall&lt;/a&gt; uses &lt;a href=&quot;//tc39.es/ecma262/#sec-ispropertyreference&quot; rel=&quot;noreferrer&quot;&gt;IsPropertyReference&lt;/a&gt; of that reference to determine if it is a property of an object, syntactically. Its trying to get the [[Base]] property of the reference (which is e.g. &lt;code&gt;refObj&lt;/code&gt;, when applied to &lt;code&gt;refObj.func&lt;/code&gt;; or &lt;code&gt;foo.bar&lt;/code&gt; when applied to &lt;code&gt;foo.bar.baz&lt;/code&gt;). If it is written as a property, then &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisvalue&quot; rel=&quot;noreferrer&quot;&gt;GetThisValue&lt;/a&gt; will get this [[Base]] property and use it as the &lt;em&gt;this&lt;/em&gt; value.&lt;/p&gt;\n&lt;p&gt;Note: &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/get&quot; rel=&quot;noreferrer&quot;&gt;Getters / Setters&lt;/a&gt; work the same way as methods, regarding &lt;code&gt;this&lt;/code&gt;. Simple properties dont affect the execution context, e.g. here, &lt;code&gt;this&lt;/code&gt; is in global scope:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// Is `globalThis.a`.&lt;/span&gt;\n    [&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Refers to `globalThis.a`.&lt;/span&gt;\n  };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;Calls without base reference, strict mode, and &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/with&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;\n&lt;p&gt;A call without a base reference is usually a function that isnt called as a property. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// As opposed to `refObj.func();`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This also happens when &lt;a href=&quot;/q/30486345&quot;&gt;passing or assigning methods&lt;/a&gt;, or using the &lt;a href=&quot;/q/35522560&quot;&gt;comma operator&lt;/a&gt;. This is where the difference between Reference Record and Value is relevant.&lt;/p&gt;\n&lt;p&gt;Note function &lt;code&gt;j&lt;/code&gt;: following the specification, you will notice that &lt;code&gt;j&lt;/code&gt; can only return the function object (Value) itself, but not a Reference Record. Therefore the base reference &lt;code&gt;refObj&lt;/code&gt; is lost.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// No base ref.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; h = refObj.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;j&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; refObj.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;(refObj.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// No base ref.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;j&lt;/span&gt;()(); &lt;span class=&quot;hljs-comment&quot;&gt;// No base ref.&lt;/span&gt;\n(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, refObj.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt;)(); &lt;span class=&quot;hljs-comment&quot;&gt;// Another common pattern to remove the base ref.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-evaluatecall&quot; rel=&quot;noreferrer&quot;&gt;EvaluateCall&lt;/a&gt; calls &lt;a href=&quot;//tc39.es/ecma262/#sec-call&quot; rel=&quot;noreferrer&quot;&gt;Call&lt;/a&gt; with a &lt;em&gt;thisValue&lt;/em&gt; of &lt;strong&gt;undefined&lt;/strong&gt; here. This makes a difference in &lt;a href=&quot;//tc39.es/ecma262/#sec-ordinarycallbindthis&quot; rel=&quot;noreferrer&quot;&gt;OrdinaryCallBindThis&lt;/a&gt; (&lt;em&gt;F&lt;/em&gt;: the function object; &lt;em&gt;thisArgument&lt;/em&gt;: the &lt;em&gt;thisValue&lt;/em&gt; passed to &lt;a href=&quot;//tc39.es/ecma262/#sec-call&quot; rel=&quot;noreferrer&quot;&gt;Call&lt;/a&gt;):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;thisMode&lt;/em&gt; be &lt;em&gt;F&lt;/em&gt;.[[ThisMode]].&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;[]&lt;/p&gt;\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;If &lt;em&gt;thisMode&lt;/em&gt; is &lt;em&gt;strict&lt;/em&gt;, let &lt;em&gt;thisValue&lt;/em&gt; be &lt;em&gt;thisArgument&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Else,\n&lt;ol&gt;\n&lt;li&gt;If &lt;em&gt;thisArgument&lt;/em&gt; is &lt;strong&gt;undefined&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt;, then\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;globalEnv&lt;/em&gt; be &lt;em&gt;calleeRealm&lt;/em&gt;.[[GlobalEnv]].&lt;/li&gt;\n&lt;li&gt;[]&lt;/li&gt;\n&lt;li&gt;Let &lt;em&gt;thisValue&lt;/em&gt; be &lt;em&gt;globalEnv&lt;/em&gt;.[[GlobalThisValue]].&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;li&gt;Else,\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;thisValue&lt;/em&gt; be ! &lt;a href=&quot;//tc39.es/ecma262/#sec-toobject&quot; rel=&quot;noreferrer&quot;&gt;ToObject&lt;/a&gt;(thisArgument).&lt;/li&gt;\n&lt;li&gt;NOTE: &lt;a href=&quot;//tc39.es/ecma262/#sec-toobject&quot; rel=&quot;noreferrer&quot;&gt;ToObject&lt;/a&gt; produces wrapper objects [].&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;[]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note: step 5 sets the actual value of &lt;code&gt;this&lt;/code&gt; to the supplied &lt;em&gt;thisArgument&lt;/em&gt; in strict mode&lt;code&gt;undefined&lt;/code&gt; in this case. In sloppy mode, an undefined or null &lt;em&gt;thisArgument&lt;/em&gt; results in &lt;code&gt;this&lt;/code&gt; being the global &lt;em&gt;this&lt;/em&gt; value.&lt;/p&gt;\n&lt;p&gt;If &lt;a href=&quot;//tc39.es/ecma262/#sec-ispropertyreference&quot; rel=&quot;noreferrer&quot;&gt;IsPropertyReference&lt;/a&gt; returns &lt;strong&gt;false&lt;/strong&gt;, then &lt;a href=&quot;//tc39.es/ecma262/#sec-evaluatecall&quot; rel=&quot;noreferrer&quot;&gt;EvaluateCall&lt;/a&gt; takes these steps:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;refEnv&lt;/em&gt; be &lt;em&gt;ref&lt;/em&gt;.[[Base]].&lt;/li&gt;\n&lt;li&gt;Assert: &lt;em&gt;refEnv&lt;/em&gt; is an Environment Record.&lt;/li&gt;\n&lt;li&gt;Let &lt;em&gt;thisValue&lt;/em&gt; be &lt;em&gt;refEnv&lt;/em&gt;.WithBaseObject().&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This is where an undefined &lt;em&gt;thisValue&lt;/em&gt; may come from: &lt;em&gt;refEnv&lt;/em&gt;.&lt;a href=&quot;//tc39.es/ecma262/#sec-object-environment-records-withbaseobject&quot; rel=&quot;noreferrer&quot;&gt;WithBaseObject&lt;/a&gt;() is always &lt;strong&gt;undefined&lt;/strong&gt;, &lt;em&gt;except&lt;/em&gt; in &lt;a href=&quot;//tc39.es/ecma262/#sec-with-statement-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements. In this case, &lt;em&gt;thisValue&lt;/em&gt; will be the binding object.&lt;/p&gt;\n&lt;p&gt;Theres also &lt;a href=&quot;//tc39.es/ecma262/#sec-symbol.unscopables&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Symbol.unscopables&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables&quot; rel=&quot;noreferrer&quot;&gt;Docs on MDN&lt;/a&gt;) to control the &lt;code&gt;with&lt;/code&gt; binding behavior.&lt;/p&gt;\n&lt;p&gt;To summarize, so far:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = {\n    f1,\n    f2,\n    [&lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;unscopables&lt;/span&gt;]: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;f2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    }\n  };\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `globalThis`.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;with&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;){\n  &lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `o`.&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;f2&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// `f2` is unscopable, so this logs `globalThis`.&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;f3&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// `f3` is not on `o`, so this logs `globalThis`.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `undefined`.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// `with` statements are not allowed in strict-mode code.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that when evaluating &lt;code&gt;this&lt;/code&gt;, &lt;strong&gt;it doesnt matter &lt;em&gt;where&lt;/em&gt; a normal function is defined&lt;/strong&gt;.&lt;/p&gt;\n&lt;h4&gt;&lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.call&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.apply&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.bind&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;thisArg&lt;/em&gt;, and primitives&lt;/h4&gt;\n&lt;p&gt;Another consequence of step 5 of &lt;a href=&quot;//tc39.es/ecma262/#sec-ordinarycallbindthis&quot; rel=&quot;noreferrer&quot;&gt;OrdinaryCallBindThis&lt;/a&gt;, in conjunction with step 6.2 (6.b in the spec), is that a primitive &lt;em&gt;this&lt;/em&gt; value is coerced to an object &lt;em&gt;only&lt;/em&gt; in sloppy mode.&lt;/p&gt;\n&lt;p&gt;To examine this, lets introduce another source for the &lt;em&gt;this&lt;/em&gt; value: the three methods that override the &lt;em&gt;this&lt;/em&gt; binding:&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;Function.prototype.apply(thisArg, argArray)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Function.prototype.&lt;/code&gt; {&lt;code&gt;call&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;} &lt;code&gt;(thisArg, ...args)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;//tc39.es/ecma262/#sec-function.prototype.bind&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.bind&lt;/code&gt;&lt;/a&gt; creates a bound function, whose &lt;em&gt;this&lt;/em&gt; binding is set to &lt;em&gt;thisArg&lt;/em&gt; and cannot change again. &lt;a href=&quot;//tc39.es/ecma262/#sec-function.prototype.call&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.call&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;//tc39.es/ecma262/#sec-function.prototype.apply&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.apply&lt;/code&gt;&lt;/a&gt; call the function immediately, with the &lt;em&gt;this&lt;/em&gt; binding set to &lt;em&gt;thisArg&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt; map directly to &lt;a href=&quot;//tc39.es/ecma262/#sec-call&quot; rel=&quot;noreferrer&quot;&gt;Call&lt;/a&gt;, using the specified &lt;em&gt;thisArg&lt;/em&gt;. &lt;code&gt;.bind&lt;/code&gt; creates a bound function with &lt;a href=&quot;//tc39.es/ecma262/#sec-boundfunctioncreate&quot; rel=&quot;noreferrer&quot;&gt;BoundFunctionCreate&lt;/a&gt;. These have &lt;em&gt;their own&lt;/em&gt; &lt;a href=&quot;//tc39.es/ecma262/#sec-bound-function-exotic-objects-call-thisargument-argumentslist&quot; rel=&quot;noreferrer&quot;&gt;[[Call]] method&lt;/a&gt; which looks up the function objects [[BoundThis]] internal slot.&lt;/p&gt;\n&lt;p&gt;Examples of setting a custom &lt;em&gt;this&lt;/em&gt; value:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myObj = {},\n  g = f.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(myObj),\n  h = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// All of these log `myObj`.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;();\nf.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(myObj)();\nf.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(myObj);\n&lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(g);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For objects, this is the same in strict and non-strict mode.&lt;/p&gt;\n&lt;p&gt;Now, try to supply a primitive value:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;,\n  g = f.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(myString);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;();              &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `String { &quot;s&quot; }`.&lt;/span&gt;\nf.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(myString); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `String { &quot;s&quot; }`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In non-strict mode, primitives are coerced to their object-wrapped form. Its the same kind of object you get when calling &lt;code&gt;Object(&quot;s&quot;)&lt;/code&gt; or &lt;code&gt;new String(&quot;s&quot;)&lt;/code&gt;. In strict mode, you &lt;em&gt;can&lt;/em&gt; use primitives:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;,\n  g = f.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(myString);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;();              &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `&quot;s&quot;`.&lt;/span&gt;\nf.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(myString); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `&quot;s&quot;`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Libraries make use of these methods, e.g. jQuery sets the &lt;code&gt;this&lt;/code&gt; to the DOM element selected here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs the clicked button.&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;Constructors, &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes&quot; rel=&quot;noreferrer&quot;&gt;classes&lt;/a&gt;, and &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/new&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;\n&lt;p&gt;When calling a function as a constructor using the &lt;code&gt;new&lt;/code&gt; operator, &lt;a href=&quot;//tc39.es/ecma262/#sec-evaluatenew&quot; rel=&quot;noreferrer&quot;&gt;EvaluateNew&lt;/a&gt; calls &lt;a href=&quot;//tc39.es/ecma262/#sec-construct&quot; rel=&quot;noreferrer&quot;&gt;Construct&lt;/a&gt;, which calls the &lt;a href=&quot;//tc39.es/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget&quot; rel=&quot;noreferrer&quot;&gt;[[Construct]] method&lt;/a&gt;. If the function is a base constructor (i.e. not a &lt;code&gt;class extends&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;), it sets &lt;em&gt;thisArgument&lt;/em&gt; to a new object created from the constructors prototype. Properties set on &lt;code&gt;this&lt;/code&gt; in the constructor will end up on the resulting instance object. &lt;code&gt;this&lt;/code&gt; is implicitly returned, unless you explicitly return your own non-primitive value.&lt;/p&gt;\n&lt;p&gt;A &lt;a href=&quot;//tc39.es/ecma262/#sec-class-definitions&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt; is a new way of creating constructor functions, introduced in ECMAScript 2015.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Old&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;p&lt;/span&gt; = a;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Old&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(o);  &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `Old { p: 1 }`.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt;{\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;p&lt;/span&gt; = a;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(n); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `New { p: 1 }`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Class definitions are implicitly in &lt;a href=&quot;//tc39.es/ecma262/#sec-strict-mode-code&quot; rel=&quot;noreferrer&quot;&gt;strict mode&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;{\n  &lt;span class=&quot;hljs-title function_&quot;&gt;m1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-title function_&quot;&gt;m2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; m1 = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;m1&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;m1&lt;/span&gt;());\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;m2&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `undefined`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;&lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/super&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;super&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;\n&lt;p&gt;The exception to the behavior with &lt;code&gt;new&lt;/code&gt; is &lt;code&gt;class extends&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;, as mentioned above. Derived classes do not immediately set their &lt;em&gt;this&lt;/em&gt; value upon invocation; they only do so once the base class is reached through a series of &lt;code&gt;super&lt;/code&gt; calls (happens implicitly without an own &lt;code&gt;constructor&lt;/code&gt;). Using &lt;code&gt;this&lt;/code&gt; before calling &lt;code&gt;super&lt;/code&gt; is not allowed.&lt;/p&gt;\n&lt;p&gt;Calling &lt;a href=&quot;//tc39.es/ecma262/#sec-super-keyword-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;super&lt;/code&gt;&lt;/a&gt; calls the super constructor with the &lt;em&gt;this&lt;/em&gt; value of the lexical scope (the function Environment Record) of the call. &lt;a href=&quot;//tc39.es/ecma262/#sec-getthisvalue&quot; rel=&quot;noreferrer&quot;&gt;GetThisValue&lt;/a&gt; has a special rule for &lt;code&gt;super&lt;/code&gt; calls. It uses &lt;a href=&quot;//tc39.es/ecma262/#sec-bindthisvalue&quot; rel=&quot;noreferrer&quot;&gt;BindThisValue&lt;/a&gt; to set &lt;code&gt;this&lt;/code&gt; to that Environment Record.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DerivedNew&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;New&lt;/span&gt;{\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, a2&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using `this` before `super` results in a ReferenceError.&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;(a);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;p2&lt;/span&gt; = a2;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DerivedNew&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(n2); &lt;span class=&quot;hljs-comment&quot;&gt;// Logs `DerivedNew { p: 1, p2: 2 }`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;5. Evaluating class fields&lt;/h3&gt;\n&lt;p&gt;Instance fields and static fields were introduced in ECMAScript 2022.&lt;/p&gt;\n&lt;p&gt;When a &lt;code&gt;class&lt;/code&gt; is evaluated, &lt;a href=&quot;//tc39.es/ecma262/#sec-runtime-semantics-classdefinitionevaluation&quot; rel=&quot;noreferrer&quot;&gt;ClassDefinitionEvaluation&lt;/a&gt; is performed, modifying the &lt;a href=&quot;//tc39.es/ecma262/#running-execution-context&quot; rel=&quot;noreferrer&quot;&gt;running execution context&lt;/a&gt;. For each &lt;a href=&quot;//tc39.es/ecma262/#prod-ClassElement&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;ClassElement&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;if a field is static, then &lt;code&gt;this&lt;/code&gt; refers to the class itself,&lt;/li&gt;\n&lt;li&gt;if a field is not static, then &lt;code&gt;this&lt;/code&gt; refers to the instance.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Private fields (e.g. &lt;code&gt;#x&lt;/code&gt;) and methods are added to a PrivateEnvironment.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;//github.com/tc39/proposal-class-static-block&quot; rel=&quot;noreferrer&quot;&gt;Static blocks&lt;/a&gt; are currently a &lt;a href=&quot;//tc39.es/process-document/&quot; rel=&quot;noreferrer&quot;&gt;TC39 stage 3 proposal&lt;/a&gt;. Static blocks work the same as static fields and methods: &lt;code&gt;this&lt;/code&gt; inside them refers to the class itself.&lt;/p&gt;\n&lt;p&gt;Note that in methods and getters / setters, &lt;code&gt;this&lt;/code&gt; works just like in normal function properties.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;{\n  a = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; c = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Getters, setters, private modifiers are also possible.&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; demo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(demo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;, demo.&lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Both log `demo`.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;d&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Both log `Demo`.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;: &lt;code&gt;(o.f)()&lt;/code&gt; is equivalent to &lt;code&gt;o.f()&lt;/code&gt;; &lt;code&gt;(f)()&lt;/code&gt; is equivalent to &lt;code&gt;f()&lt;/code&gt;. This is explained in &lt;a href=&quot;//2ality.com/2015/12/references.html&quot; rel=&quot;noreferrer&quot;&gt;this 2ality article&lt;/a&gt; (&lt;a href=&quot;//web.archive.org/web/20210201161804/https://2ality.com/2015/12/references.html&quot; rel=&quot;noreferrer&quot;&gt;archived&lt;/a&gt;). Particularly see &lt;a href=&quot;//tc39.es/ecma262/#sec-grouping-operator&quot; rel=&quot;noreferrer&quot;&gt;how a &lt;em&gt;ParenthesizedExpression&lt;/em&gt; is evaluated&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;: It must be a &lt;em&gt;&lt;a href=&quot;//tc39.es/ecma262/#prod-MemberExpression&quot; rel=&quot;noreferrer&quot;&gt;MemberExpression&lt;/a&gt;&lt;/em&gt;, must not be a property, must have a [[ReferencedName]] of exactly &lt;strong&gt;&quot;eval&quot;&lt;/strong&gt;, and must be the %eval% intrinsic object.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt;: Whenever the specification says &lt;em&gt;Let&lt;/em&gt; ref &lt;em&gt;be the result of evaluating&lt;/em&gt; X., then &lt;em&gt;X&lt;/em&gt; is some expression that you need to find the evaluation steps for. For example, evaluating a &lt;em&gt;&lt;a href=&quot;//tc39.es/ecma262/#prod-MemberExpression&quot; rel=&quot;noreferrer&quot;&gt;MemberExpression&lt;/a&gt;&lt;/em&gt; or &lt;a href=&quot;//tc39.es/ecma262/#prod-CallExpression&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;CallExpression&lt;/em&gt;&lt;/a&gt; is the result of one of &lt;a href=&quot;//tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;these algorithms&lt;/a&gt;. Some of them result in a &lt;a href=&quot;//tc39.es/ecma262/#sec-reference-record-specification-type&quot; rel=&quot;noreferrer&quot;&gt;Reference Record&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt;: There are also several other native and host methods that allow providing a &lt;em&gt;this&lt;/em&gt; value, notably &lt;code&gt;Array.prototype.map&lt;/code&gt;, &lt;code&gt;Array.prototype.forEach&lt;/code&gt;, etc. that accept a &lt;em&gt;thisArg&lt;/em&gt; as their second argument. Anyone can make their own methods to alter &lt;code&gt;this&lt;/code&gt; like &lt;code&gt;(func, thisArg) =&amp;gt; func.bind(thisArg)&lt;/code&gt;, &lt;code&gt;(func, thisArg) =&amp;gt; func.call(thisArg)&lt;/code&gt;, etc. As always, &lt;a href=&quot;//developer.mozilla.org/en/docs/Web/JavaScript/Reference&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt; offers great documentation.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Just for fun, test your understanding with some examples&lt;/h2&gt;\n&lt;p&gt;For each code snippet, answer the question: &lt;em&gt;What is the value of &lt;code&gt;this&lt;/code&gt; at the marked line? Why?&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;To reveal the answers, click the gray boxes.&lt;/em&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; &lt;code&gt;globalThis&lt;/code&gt;. The marked line is evaluated in the initial global execution context.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is obj&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === obj,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is globalThis&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === globalThis\n  };\n}\n\nobj.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt; = myFun;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;());\n\n   &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; &lt;code&gt;obj&lt;/code&gt;. When calling a function as a property of an object, it is called with the &lt;em&gt;this&lt;/em&gt; binding set to the &lt;em&gt;base&lt;/em&gt; of the reference &lt;code&gt;obj.method&lt;/code&gt;, i.e. &lt;code&gt;obj&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;myMethod&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;is obj&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === obj,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;is globalThis&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === globalThis\n      };\n    }\n  },\n  myFun = obj.&lt;span class=&quot;hljs-property&quot;&gt;myMethod&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;myFun&lt;/span&gt;());\n\n   &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; &lt;code&gt;globalThis&lt;/code&gt;. Since the function value &lt;code&gt;myFun&lt;/code&gt; / &lt;code&gt;obj.myMethod&lt;/code&gt; is not called off of an object, as a property, the &lt;em&gt;this&lt;/em&gt; binding will be &lt;code&gt;globalThis&lt;/code&gt;.\n\n This is different from Python, in which accessing a method (&lt;code&gt;obj.myMethod&lt;/code&gt;) creates a &lt;a href=&quot;//docs.python.org/3/library/stdtypes.html#methods&quot; rel=&quot;noreferrer&quot;&gt;bound method object&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;myFun&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;is obj&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === obj,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;is globalThis&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === globalThis\n    })\n  };\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;myFun&lt;/span&gt;());\n\n   &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; &lt;code&gt;globalThis&lt;/code&gt;. Arrow functions dont create their own &lt;em&gt;this&lt;/em&gt; binding. The lexical scope is the same as the initial global scope, so &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;globalThis&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;myMethod&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n      &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myFun()&quot;&lt;/span&gt;);\n    }\n  };\n\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;myMethod&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; &lt;code&gt;globalThis&lt;/code&gt;. When evaluating the direct eval call, &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;obj&lt;/code&gt;. However, in the eval code, &lt;code&gt;myFun&lt;/code&gt; is not called off of an object, so the &lt;em&gt;this&lt;/em&gt; binding is set to the global object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is obj&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === obj,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is globalThis&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === globalThis\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myFun.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj));\n\n   &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; &lt;code&gt;obj&lt;/code&gt;. The line &lt;code&gt;myFun.call(obj);&lt;/code&gt; is invoking the special built-in function &lt;code&gt;Function.prototype.call&lt;/code&gt;, which accepts &lt;code&gt;thisArg&lt;/code&gt; as the first argument.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCls&lt;/span&gt;{\n  arrow = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-comment&quot;&gt;// What is `this` here?&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is MyCls&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;MyCls&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is globalThis&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === globalThis,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is instance&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCls&lt;/span&gt;\n  });\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCls&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;arrow&lt;/span&gt;());\n\n   &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;blockquote class=&quot;spoiler&quot; data-spoiler=&quot;Reveal spoiler&quot;&gt;\n&lt;p&gt; Its the instance of &lt;code&gt;MyCls&lt;/code&gt;. Arrow functions dont change the &lt;em&gt;this&lt;/em&gt; binding, so it comes from lexical scope. Therefore, this is &lt;em&gt;exactly the same&lt;/em&gt; as with the class fields mentioned above, like &lt;code&gt;a = this;&lt;/code&gt;. Try changing it to &lt;code&gt;static arrow&lt;/code&gt;. Do you get the result you expect?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword behaves differently in JavaScript compared to other languages. In Object Oriented languages, the &lt;code&gt;this&lt;/code&gt; keyword refers to the current instance of the class. In JavaScript the value of &lt;code&gt;this&lt;/code&gt; is determined by the invocation context of function (&lt;em&gt;&lt;code&gt;context.function()&lt;/code&gt;&lt;/em&gt;) and where it is called.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. When used in global context&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; in global context, it is bound to global object (&lt;code&gt;window&lt;/code&gt; in browser)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//[object Window]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; inside a function defined in the global context, &lt;code&gt;this&lt;/code&gt; is still bound to global object since the function is actually made a method of global context.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;//[object Window]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above &lt;code&gt;f1&lt;/code&gt; is made a method of global object. Thus we can also call it on &lt;code&gt;window&lt;/code&gt; object as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//[object Window]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;2. When used inside object method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; keyword inside an object method, &lt;code&gt;this&lt;/code&gt; is bound to the &quot;immediate&quot; enclosing object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n    }\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;//[object Object]:obj&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above I have put the word immediate in double quotes. It is to make the point that if you nest the object inside another object, then &lt;code&gt;this&lt;/code&gt; is bound to the immediate parent.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;nestedobj&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;nestedobj&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n        }\n    }            \n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;nestedobj&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//[object Object]:nestedobj&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even if you add function explicitly to the object as a method, it still follows above rules, that is &lt;code&gt;this&lt;/code&gt; still points to the immediate parent object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1&quot;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n}\n\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt; = returnName; &lt;span class=&quot;hljs-comment&quot;&gt;//add method to object&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//[object Object]:obj1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;3. When invoking context-less function&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; inside function that is invoked without any context (i.e. not on any object), it is bound to the global object (&lt;code&gt;window&lt;/code&gt; in browser)(even if the function is defined inside the object) .&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;hljs-string&quot;&gt;&quot;global&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {  \n    &lt;span class=&quot;hljs-attr&quot;&gt;context&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {                  \n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; +&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;; \n        };\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//invoked without context&lt;/span&gt;\n    }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//[object Window]:global &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Trying it all with functions&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;We can try above points with functions too. However there are some differences.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Above we added members to objects using object literal notation. We can add members to functions by using &lt;code&gt;this&lt;/code&gt;. to specify them.&lt;/li&gt;\n&lt;li&gt;Object literal notation creates an instance of object which we can use immediately. With function we may need to first create its instance using &lt;code&gt;new&lt;/code&gt; operator.&lt;/li&gt;\n&lt;li&gt;Also in an object literal approach, we can explicitly add members to already defined object using dot operator. This gets added to the specific instance only. However I have added variable to the function prototype so that it gets reflected in all instances of the function.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Below I tried out all the things that we did with Object and &lt;code&gt;this&lt;/code&gt; above, but by first creating function instead of directly writing an object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/********************************************************************* \n  1. When you add variable to the function using this keyword, it \n     gets added to the function prototype, thus allowing all function \n     instances to have their own copy of the variables added.\n*********************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionDef&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;ObjDefinition&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){                \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n    }\n}        \n\nobj1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionDef&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//[object Object]:ObjDefinition   &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/********************************************************************* \n   2. Members explicitly added to the function protorype also behave \n      as above: all function instances have their own copy of the \n      variable added.\n*********************************************************************/&lt;/span&gt;\nfunctionDef.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;version&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\nfunctionDef.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getVersion&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;v&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;version&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//see how this.version refers to the&lt;/span&gt;\n                             &lt;span class=&quot;hljs-comment&quot;&gt;//version variable added through &lt;/span&gt;\n                             &lt;span class=&quot;hljs-comment&quot;&gt;//prototype&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;getVersion&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//v1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/********************************************************************* \n   3. Illustrating that the function variables added by both above \n      ways have their own copies across function instances\n*********************************************************************/&lt;/span&gt;\nfunctionDef.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;incrementVersion&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;version&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;version&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionDef&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj2.&lt;span class=&quot;hljs-title function_&quot;&gt;getVersion&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//v1&lt;/span&gt;\n\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;incrementVersion&lt;/span&gt;();      &lt;span class=&quot;hljs-comment&quot;&gt;//incrementing version in obj2&lt;/span&gt;\n                              &lt;span class=&quot;hljs-comment&quot;&gt;//does not affect obj1 version&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj2.&lt;span class=&quot;hljs-title function_&quot;&gt;getVersion&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//v2&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;getVersion&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//v1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/********************************************************************* \n   4. `this` keyword refers to the immediate parent object. If you \n       nest the object through function prototype, then `this` inside \n       object refers to the nested object not the function instance\n*********************************************************************/&lt;/span&gt;\nfunctionDef.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nestedObj&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;nestedObj&apos;&lt;/span&gt;, \n                                    getName1 : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n                                    }                            \n                                  };\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj2.&lt;span class=&quot;hljs-property&quot;&gt;nestedObj&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getName1&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//[object Object]:nestedObj&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/********************************************************************* \n   5. If the method is on an object&apos;s prototype chain, `this` refers \n      to the object the method was called on, as if the method was on \n      the object.\n*********************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProtoObj&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;fun&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj3 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;ProtoObj&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//creating an object setting ProtoObj&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-comment&quot;&gt;//as its prototype&lt;/span&gt;\nobj3.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;;                       &lt;span class=&quot;hljs-comment&quot;&gt;//adding instance member to obj3&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj3.&lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;()+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//999&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-comment&quot;&gt;//calling obj3.fun() makes &lt;/span&gt;\n                                    &lt;span class=&quot;hljs-comment&quot;&gt;//ProtoObj.fun() to access obj3.a as &lt;/span&gt;\n                                    &lt;span class=&quot;hljs-comment&quot;&gt;//if fun() is defined on obj3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;4. When used inside constructor function&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;When the function is used as a constructor (that is when it is called with &lt;code&gt;new&lt;/code&gt; keyword), &lt;code&gt;this&lt;/code&gt; inside function body points to the new object being constructed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myname = &lt;span class=&quot;hljs-string&quot;&gt;&quot;global context&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SimpleFun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myname&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;simple function&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleFun&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//adds myname to obj1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//1. `new` causes `this` inside the SimpleFun() to point to the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//   object being constructed thus adding any member&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//   created inside SimipleFun() using this.membername to the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//   object being constructed&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//2. And by default `new` makes function to return newly &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//   constructed object if no explicit return value is specified&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-property&quot;&gt;myname&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//simple function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;5. When used inside function defined on prototype chain&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If the method is on an object&apos;s prototype chain, &lt;code&gt;this&lt;/code&gt; inside such method refers to the object the method was called on, as if the method is defined on the object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProtoObj&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;fun&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;;\n    }\n};\n&lt;span class=&quot;hljs-comment&quot;&gt;//Object.create() creates object with ProtoObj as its&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//prototype and assigns it to obj3, thus making fun() &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//to be the method on its prototype chain&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj3 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;ProtoObj&lt;/span&gt;);\nobj3.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(obj3.&lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//999&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Notice that fun() is defined on obj3&apos;s prototype but &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//`this.a` inside fun() retrieves obj3.a   &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;6. Inside call(), apply() and bind() functions&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All these methods are defined on &lt;code&gt;Function.prototype&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;These methods allows to write a function once and invoke it in different context. In other words, they allows to specify the value of &lt;code&gt;this&lt;/code&gt; which will be used while the function is being executed. They also take any parameters to be passed to the original function when it is invoked.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;fun.apply(obj1 [, argsArray])&lt;/code&gt;&lt;/strong&gt; Sets &lt;code&gt;obj1&lt;/code&gt; as the value of &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;fun()&lt;/code&gt; and calls &lt;code&gt;fun()&lt;/code&gt; passing elements of &lt;code&gt;argsArray&lt;/code&gt; as its arguments.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;fun.call(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])&lt;/code&gt;&lt;/strong&gt; - Sets &lt;code&gt;obj1&lt;/code&gt; as the value of &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;fun()&lt;/code&gt; and calls &lt;code&gt;fun()&lt;/code&gt; passing &lt;code&gt;arg1, arg2, arg3, ...&lt;/code&gt; as its arguments.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;fun.bind(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])&lt;/code&gt;&lt;/strong&gt; - Returns the reference to the function &lt;code&gt;fun&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; inside fun bound to &lt;code&gt;obj1&lt;/code&gt; and parameters of &lt;code&gt;fun&lt;/code&gt; bound to the   parameters specified &lt;code&gt;arg1, arg2, arg3,...&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;By now the difference between &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; must have become apparent. &lt;code&gt;apply&lt;/code&gt; allows to specify the arguments to function as array-like object i.e. an object with a numeric &lt;code&gt;length&lt;/code&gt; property and corresponding non-negative integer properties. Whereas &lt;code&gt;call&lt;/code&gt; allows to specify the arguments to the function directly. Both &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;call&lt;/code&gt; immediately invokes the function in the specified context and with the specified arguments. On the other hand, &lt;code&gt;bind&lt;/code&gt; simply returns the function bound to the specified &lt;code&gt;this&lt;/code&gt; value and the arguments. We can capture the reference to this returned function by assigning it to a variable and later we can call it any time.&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;inc1, inc2&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + inc1 + inc2;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = { a : &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; };\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(add.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//15&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//above add.call(o,5,6) sets `this` inside&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//add() to `o` and calls add() resulting:&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// this.a + inc1 + inc2 = &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// `o.a` i.e. 4 + 5 + 6 = 15&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(add.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o, [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//15&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// `o.a` i.e. 4 + 5 + 6 = 15&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; g = add.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);       &lt;span class=&quot;hljs-comment&quot;&gt;//g: `o.a` i.e. 4 + 5 + 6&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;()+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;);    &lt;span class=&quot;hljs-comment&quot;&gt;//15&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; h = add.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);          &lt;span class=&quot;hljs-comment&quot;&gt;//h: `o.a` i.e. 4 + 5 + ?&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//15&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// 4 + 5 + 6 = 15&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//NaN&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//no parameter is passed to h()&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//thus inc2 inside add() is `undefined`&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//4 + 5 + undefined = NaN&amp;lt;/code&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;7. &lt;code&gt;this&lt;/code&gt; inside event handlers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;When you assign function directly to event handlers of an element, use of &lt;code&gt;this&lt;/code&gt; directly inside event handling function refers to the corresponding element. Such direct function assignment can be done using &lt;code&gt;addeventListener&lt;/code&gt; method or through the traditional event registration methods like &lt;code&gt;onclick&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Similarly, when you use &lt;code&gt;this&lt;/code&gt; directly inside the event property (like &lt;code&gt;&amp;lt;button onclick=&quot;...this...&quot; &amp;gt;&lt;/code&gt;) of the element, it refers to the element.&lt;/li&gt;\n&lt;li&gt;However use of &lt;code&gt;this&lt;/code&gt; indirectly through the other function called inside the event handling function or event property resolves to the global object &lt;code&gt;window&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The same above behavior is achieved when we attach the function to the event handler using Microsoft&apos;s Event Registration model method &lt;code&gt;attachEvent&lt;/code&gt;. Instead of assigning the function to the event handler (and the thus making the function method of the element), it calls the function on the event (effectively calling it in global context).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;I recommend to better try this in &lt;a href=&quot;http://jsfiddle.net/Mahesha999/xKtzC/8/embedded/html,js,result&quot; rel=&quot;noreferrer&quot;&gt;JSFiddle&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clickedMe&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; : &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tagName&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; : &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;);\n    } \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, clickedMe, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = clickedMe;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button5&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onclick&apos;&lt;/span&gt;, clickedMe);   \n&amp;lt;/script&amp;gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Using `this` &quot;directly&quot; inside event handler or event property&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click() &quot;assigned&quot; using addEventListner() &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click() &quot;assigned&quot; using click() &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button3&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;alert(this+ &apos; : &apos; + this.tagName + &apos; : &apos; + this.id);&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;used `this` directly in click event property&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Using `this` &quot;indirectly&quot; inside event handler or event property&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;alert((function(){return this + &apos; : &apos; + this.tagName + &apos; : &apos; + this.id;})());&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;`this` used indirectly, inside function &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt; defined &amp;amp; called inside event property&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button4&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;clickedMe()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;`this` used indirectly, inside function &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt; called inside event property&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable constant_&quot;&gt;IE&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;only&lt;/span&gt;: &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button5&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click() &quot;attached&quot; using attachEvent() &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;8. &lt;code&gt;this&lt;/code&gt; in ES6 arrow function&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;In an arrow function, &lt;code&gt;this&lt;/code&gt; will behave like common variables: it will be inherited from its lexical scope. The function&apos;s &lt;code&gt;this&lt;/code&gt;, where the arrow function is defined, will be the arrow function&apos;s &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So, that&apos;s the same behavior as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalArrowFunction&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;globalArrowFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//window&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contextObject = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;method1&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;},\n  &lt;span class=&quot;hljs-attr&quot;&gt;method2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;};\n  }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contextObject.&lt;span class=&quot;hljs-title function_&quot;&gt;method1&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//window&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contextLessFunction = contextObject.&lt;span class=&quot;hljs-property&quot;&gt;method1&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;contextLessFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//window&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contextObject.&lt;span class=&quot;hljs-title function_&quot;&gt;method2&lt;/span&gt;()()) &lt;span class=&quot;hljs-comment&quot;&gt;//contextObject&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; innerArrowFunction = contextObject.&lt;span class=&quot;hljs-title function_&quot;&gt;method2&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;innerArrowFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//contextObject &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Javascript&apos;s &lt;code&gt;this&lt;/code&gt;&lt;/h1&gt;\n\n&lt;h2&gt;Simple function invocation&lt;/h2&gt;\n\n&lt;p&gt;Consider the following function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// calling the function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that we are running this in the normal mode, i.e. strict mode is not used.&lt;/p&gt;\n\n&lt;p&gt;When running in a browser, the value of &lt;code&gt;this&lt;/code&gt; would be logged as &lt;code&gt;window&lt;/code&gt;. This is because &lt;code&gt;window&lt;/code&gt; is the global variable in a web browser&apos;s scope.&lt;/p&gt;\n\n&lt;p&gt;If you run this same piece of code in an environment like node.js, &lt;code&gt;this&lt;/code&gt; would refer to the global variable in your app.&lt;/p&gt;\n\n&lt;p&gt;Now if we run this in strict mode by adding the statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; to the beginning of the function declaration, &lt;code&gt;this&lt;/code&gt; would no longer refer to the global variable in either of the environments. This is done to avoid confusions in strict mode. &lt;code&gt;this&lt;/code&gt; would, in this case just log &lt;code&gt;undefined&lt;/code&gt;, because that is what it is, it is not defined.&lt;/p&gt;\n\n&lt;p&gt;In the following cases, we would see how to manipulate the value of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Calling a function on an object&lt;/h2&gt;\n\n&lt;p&gt;There are different ways to do this. If you have called native methods in Javascript like &lt;code&gt;forEach&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt;, you should already know that the &lt;code&gt;this&lt;/code&gt; variable in that case refers to the &lt;code&gt;Object&lt;/code&gt; on which you called that function (Note that in javascript, just about everything is an &lt;code&gt;Object&lt;/code&gt;, including &lt;code&gt;Array&lt;/code&gt;s and &lt;code&gt;Function&lt;/code&gt;s). Take the following code for example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObj = {&lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Obj&quot;&lt;/span&gt;};\nmyObj.&lt;span class=&quot;hljs-property&quot;&gt;logThis&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// I am a method&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\nmyObj.&lt;span class=&quot;hljs-title function_&quot;&gt;logThis&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// myObj is logged&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If an &lt;code&gt;Object&lt;/code&gt; contains a property which holds a &lt;code&gt;Function&lt;/code&gt;, the property is called a method. This method, when called, will always have it&apos;s &lt;code&gt;this&lt;/code&gt; variable set to the &lt;code&gt;Object&lt;/code&gt; it is associated with. This is true for both strict and non-strict modes.&lt;/p&gt;\n\n&lt;p&gt;Note that if a method is stored (or rather, copied) in another variable, the reference to &lt;code&gt;this&lt;/code&gt; is no longer preserved in the new variable. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// continuing with the previous code snippet&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myVar = myObj.&lt;span class=&quot;hljs-property&quot;&gt;logThis&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;myVar&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// logs either of window/global/undefined based on mode of operation&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Considering a more commonly practical scenario:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; el = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;idOfEl&apos;&lt;/span&gt;);\nel.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) });\n&lt;span class=&quot;hljs-comment&quot;&gt;// the function called by addEventListener contains this as the reference to the element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// so clicking on our element would log that element itself&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;The &lt;code&gt;new&lt;/code&gt; keyword&lt;/h2&gt;\n\n&lt;p&gt;Consider a constructor function in Javascript:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt; (name) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayHello&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; awal = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Awal&quot;&lt;/span&gt;);\nawal.&lt;span class=&quot;hljs-title function_&quot;&gt;sayHello&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// In `awal.sayHello`, `this` contains the reference to the variable `awal`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How does this work? Well, let&apos;s see what happens when we use the &lt;code&gt;new&lt;/code&gt; keyword.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Calling the function with the &lt;code&gt;new&lt;/code&gt; keyword would immediately initialize an &lt;code&gt;Object&lt;/code&gt; of type &lt;code&gt;Person&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The constructor of this &lt;code&gt;Object&lt;/code&gt; has its constructor set to &lt;code&gt;Person&lt;/code&gt;. Also, note that &lt;code&gt;typeof awal&lt;/code&gt; would return &lt;code&gt;Object&lt;/code&gt; only.&lt;/li&gt;\n&lt;li&gt;This new &lt;code&gt;Object&lt;/code&gt; would be assigned the prototype of &lt;code&gt;Person.prototype&lt;/code&gt;. This means that any method or property in the &lt;code&gt;Person&lt;/code&gt; prototype would be available to all instances of &lt;code&gt;Person&lt;/code&gt;, including &lt;code&gt;awal&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The function &lt;code&gt;Person&lt;/code&gt; itself is now invoked; &lt;code&gt;this&lt;/code&gt; being a reference to the newly constructed object &lt;code&gt;awal&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Pretty straightforward, eh?&lt;/p&gt;\n\n&lt;p&gt;Note that the official ECMAScript spec nowhere states that such types of functions are actual &lt;code&gt;constructor&lt;/code&gt; functions. They are just normal functions, and &lt;code&gt;new&lt;/code&gt; can be used on any function. It&apos;s just that we use them as such, and so we call them as such only.&lt;/p&gt;\n\n&lt;h2&gt;Calling functions on Functions: &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;So yeah, since &lt;code&gt;function&lt;/code&gt;s are also &lt;code&gt;Objects&lt;/code&gt; (and in-fact first class variables in Javascript), even functions have methods which are... well, functions themselves.&lt;/p&gt;\n\n&lt;p&gt;All functions inherit from the global &lt;code&gt;Function&lt;/code&gt;, and two of its many methods are &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, and both can be used to manipulate the value of &lt;code&gt;this&lt;/code&gt; in the function on which they are called.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; () { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thisArg = {&lt;span class=&quot;hljs-attr&quot;&gt;myObj&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;is cool&quot;&lt;/span&gt;};\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(thisArg, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a typical example of using &lt;code&gt;call&lt;/code&gt;. It basically takes the first parameter and sets &lt;code&gt;this&lt;/code&gt; in the function &lt;code&gt;foo&lt;/code&gt; as a reference to &lt;code&gt;thisArg&lt;/code&gt;.  All other parameters passed to &lt;code&gt;call&lt;/code&gt; is passed to the function &lt;code&gt;foo&lt;/code&gt; as arguments.&lt;br&gt;\nSo the above code will log &lt;code&gt;{myObj: &quot;is cool&quot;}, [1, 2, 3]&lt;/code&gt; in the console. Pretty nice way to change the value of &lt;code&gt;this&lt;/code&gt; in any function.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; is almost the same as &lt;code&gt;call&lt;/code&gt; accept that it takes only two parameters: &lt;code&gt;thisArg&lt;/code&gt; and an array which contains the arguments to be passed to the function. So the above &lt;code&gt;call&lt;/code&gt; call can be translated to &lt;code&gt;apply&lt;/code&gt; like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;foo.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(thisArg, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; can override the value of &lt;code&gt;this&lt;/code&gt; set by dot method invocation we discussed in the second bullet.\nSimple enough :)&lt;/p&gt;\n\n&lt;h2&gt;Presenting.... &lt;code&gt;bind&lt;/code&gt;!&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; is a brother of &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;.  It is also a method inherited by all functions from the global &lt;code&gt;Function&lt;/code&gt; constructor in Javascript. The difference between &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;call&lt;/code&gt;/&lt;code&gt;apply&lt;/code&gt; is that both &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; will actually invoke the function. &lt;code&gt;bind&lt;/code&gt;, on the other hand, returns a new function with the &lt;code&gt;thisArg&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; pre-set. Let&apos;s take an example to better understand this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; (a, b) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thisArg = {&lt;span class=&quot;hljs-attr&quot;&gt;myObj&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;even more cool now&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bound = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(thisArg, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; bound); &lt;span class=&quot;hljs-comment&quot;&gt;// logs `function`&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; (bound);\n&lt;span class=&quot;hljs-comment&quot;&gt;/* logs `function () { native code }` */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;bound&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// calling the function returned by `.bind`&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// logs `{myObj: &quot;even more cool now&quot;}, [1, 2]`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the difference between the three? It is subtle, but they are used differently. Like &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt; will also over-ride the value of &lt;code&gt;this&lt;/code&gt; set by dot-method invocation.&lt;/p&gt;\n\n&lt;p&gt;Also note that neither of these three functions do any change to the original function. &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; would return the value from freshly constructed functions while &lt;code&gt;bind&lt;/code&gt; will return the freshly constructed function itself, ready to be called.&lt;/p&gt;\n\n&lt;h2&gt;Extra stuff, copy this&lt;/h2&gt;\n\n&lt;p&gt;Sometimes, you don&apos;t like the fact that &lt;code&gt;this&lt;/code&gt; changes with scope, especially nested scope. Take a look at the following example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;hello&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;\n        },\n    &lt;span class=&quot;hljs-attr&quot;&gt;myMethod&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// copy this, variable names are case-sensitive&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; that = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// callbacks ftw \\o/&lt;/span&gt;\n        foo.&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;args&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// I want to call `hello` here&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// but `this` references to `foo` damn!&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// oh wait we have a backup \\o/&lt;/span&gt;\n            that.&lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;world&quot;&lt;/span&gt;\n        });\n    }\n  };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above code, we see that the value of &lt;code&gt;this&lt;/code&gt; changed with the nested scope, but we wanted the value of &lt;code&gt;this&lt;/code&gt; from the original scope. So we &apos;copied&apos; &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;that&lt;/code&gt; and used the copy instead of &lt;code&gt;this&lt;/code&gt;. Clever, eh?&lt;/p&gt;\n\n&lt;p&gt;Index:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;What is held in &lt;code&gt;this&lt;/code&gt; by default?&lt;/li&gt;\n&lt;li&gt;What if we call the function as a method with Object-dot notation?&lt;/li&gt;\n&lt;li&gt;What if we use the &lt;code&gt;new&lt;/code&gt; keyword?&lt;/li&gt;\n&lt;li&gt;How do we manipulate &lt;code&gt;this&lt;/code&gt; with &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;?&lt;/li&gt;\n&lt;li&gt;Using &lt;code&gt;bind&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Copying &lt;code&gt;this&lt;/code&gt; to solve nested-scope issues.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&quot;this&quot; is all about scope. Every function has its own scope, and since everything in JS is an object, even a function can store some values into itself using &quot;this&quot;. OOP 101 teaches that &quot;this&quot; is only applicable to &lt;em&gt;instances&lt;/em&gt; of an object. Therefore, every-time a function executes, a new &quot;instance&quot; of that function has a new meaning of &quot;this&quot;.&lt;/p&gt;\n\n&lt;p&gt;Most people get confused when they try to use &quot;this&quot; inside of anonymous closure functions like:&lt;/p&gt;\n\n&lt;pre&gt;(function(value) {\n    this.value = value;\n    $(&apos;.some-elements&apos;).each(function(elt){\n        elt.innerHTML = this.value;        // uh oh!! possibly undefined\n    });\n})(2);\n&lt;/pre&gt;\n\n&lt;p&gt;So here, inside each(), &quot;this&quot; doesn&apos;t hold the &quot;value&quot; that you expect it to (from &lt;/p&gt;&lt;pre&gt;this.value = value;&lt;/pre&gt; above it). So, to get over this (no pun intended) problem, a developer could:&lt;p&gt;&lt;/p&gt;\n\n&lt;pre&gt;(function(value) {\n    var self = this;            // small change\n    self.value = value;\n    $(&apos;.some-elements&apos;).each(function(elt){\n        elt.innerHTML = self.value;        // phew!! == 2 \n    });\n})(2);\n&lt;/pre&gt;\n\n&lt;p&gt;Try it out; you&apos;ll begin to like this pattern of programming&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Since this thread has bumped up, I have compiled few points for readers new to &lt;code&gt;this&lt;/code&gt; topic.&lt;/em&gt; &lt;/p&gt;\n\n&lt;h1&gt;How is the value of &lt;code&gt;this&lt;/code&gt; determined?&lt;/h1&gt;\n\n&lt;p&gt;We use this similar to the way we use pronouns in natural languages like English:  John is running fast because &lt;strong&gt;&lt;em&gt;he&lt;/em&gt;&lt;/strong&gt; is trying to catch the train. Instead we could have written  &lt;strong&gt;&lt;em&gt;John&lt;/em&gt;&lt;/strong&gt; is trying to catch the train.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person = {    \n    &lt;span class=&quot;hljs-attr&quot;&gt;firstName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Penelope&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;lastName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Barrymore&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;fullName&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// We use &quot;this&quot; just as in the sentence above:&lt;/span&gt;\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// We could have also written:&lt;/span&gt;\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(person.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + person.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; &lt;strong&gt;is not assigned a value&lt;/strong&gt; until an object invokes the function where it is defined. In the global scope, all global variables and functions are defined on the &lt;code&gt;window&lt;/code&gt; object. Therefore, &lt;code&gt;this&lt;/code&gt; in a global function refers to (and has the value of) the global &lt;code&gt;window&lt;/code&gt; object. &lt;/p&gt;\n\n&lt;p&gt;When &lt;code&gt;use strict&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; in global and in anonymous functions that are not bound to any object holds a value of &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword is &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/#When_this_is_most_misunderstood_and_becomes_tricky&quot; rel=&quot;noreferrer&quot;&gt;most misunderstood&lt;/a&gt; when: 1) we borrow a method that uses &lt;code&gt;this&lt;/code&gt;, 2) we assign a method that uses &lt;code&gt;this&lt;/code&gt; to a variable, 3) a function that uses &lt;code&gt;this&lt;/code&gt; is passed as a callback function, and 4) &lt;code&gt;this&lt;/code&gt; is used inside a closure  an inner function. &lt;sup&gt;(2)&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/nPSkX.png&quot; alt=&quot;table&quot;&gt;&lt;/p&gt;\n\n&lt;h2&gt;What holds the future&lt;/h2&gt;\n\n&lt;p&gt;Defined in &lt;a href=&quot;https://leanpub.com/understandinges6/read&quot; rel=&quot;noreferrer&quot;&gt;ECMA Script 6&lt;/a&gt;, arrow-functions adopt the &lt;code&gt;this&lt;/code&gt; binding from the\nenclosing (function or global) scope.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// return an arrow function&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// `this` here is lexically inherited from `foo()`&lt;/span&gt;\n     &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;);\n  };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj1);\nbar.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;( obj2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// 2, not 3!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While arrow-functions provide an alternative to using &lt;code&gt;bind()&lt;/code&gt;, its important to note that they essentially are disabling the traditional &lt;code&gt;this&lt;/code&gt; mechanism in favor of more widely understood lexical scoping. &lt;sup&gt;(1)&lt;/sup&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;this &amp;amp; Object Prototypes&lt;/strong&gt;, by Kyle Simpson. © 2014 Getify Solutions.&lt;/li&gt;\n&lt;li&gt;javascriptissexy.com - &lt;a href=&quot;http://goo.gl/pvl0GX&quot; rel=&quot;noreferrer&quot;&gt;http://goo.gl/pvl0GX&lt;/a&gt; &lt;/li&gt;\n&lt;li&gt;Angus Croll - &lt;a href=&quot;http://goo.gl/Z2RacU&quot; rel=&quot;noreferrer&quot;&gt;http://goo.gl/Z2RacU&lt;/a&gt; &lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; in JavaScript always refers to the &apos;owner&apos; of the function that is &lt;strong&gt;being executed&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;If no explicit owner is defined, then the top most owner, the window object, is referenced.&lt;/p&gt;\n\n&lt;p&gt;So if I did&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someKindOfFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;element.onclick = someKindOfFunction;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; would refer to the element object. But be careful, a lot of people make this mistake.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;lt;element onclick=&quot;someKindOfFunction()&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;In the latter case, you merely reference the function, not hand it over to the element. Therefore, &lt;code&gt;this&lt;/code&gt; will refer to the window object.&lt;/p&gt;\n    ","\n&lt;p&gt;Every &lt;em&gt;execution context&lt;/em&gt; in javascript has a &lt;em&gt;this&lt;/em&gt; parameter that is set by:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;How the function is called (including as an object method, use of &lt;em&gt;call&lt;/em&gt; and &lt;em&gt;apply&lt;/em&gt;, use of &lt;em&gt;new&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;Use of &lt;em&gt;bind&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Lexically for arrow functions (they adopt the &lt;em&gt;this&lt;/em&gt; of their outer execution context)&lt;/li&gt;\n&lt;li&gt;Whether the code is in strict or non-strict mode&lt;/li&gt;\n&lt;li&gt;Whether the code was invoked using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can set the value of &lt;em&gt;this&lt;/em&gt; using &lt;code&gt;func.call&lt;/code&gt;, &lt;code&gt;func.apply&lt;/code&gt; or &lt;code&gt;func.bind&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;By default, and what confuses most beginners, when a listener is called after an event is raised on a DOM element, the &lt;em&gt;this&lt;/em&gt; value of the function is the DOM element.&lt;/p&gt;\n\n&lt;p&gt;jQuery makes this trivial to change with jQuery.proxy.&lt;/p&gt;\n    ","\n&lt;p&gt;Daniel, awesome explanation! A couple of words on this and good list of &lt;code&gt;this&lt;/code&gt; execution context pointer in case of event handlers.&lt;/p&gt;\n\n&lt;p&gt;In two words, &lt;code&gt;this&lt;/code&gt; in JavaScript points the object from whom (or from whose execution context) the current function was run and it&apos;s always read-only, you can&apos;t set it anyway (such an attempt will end up with &apos;Invalid left-hand side in assignment&apos; message.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For event handlers:&lt;/strong&gt; inline event handlers, such as &lt;code&gt;&amp;lt;element onclick=&quot;foo&quot;&amp;gt;&lt;/code&gt;, override any other handlers attached earlier and before, so be careful and it&apos;s better to stay off of inline event delegation at all.\nAnd thanks to Zara Alaverdyan who inspired me to this list of examples through a dissenting debate :)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;el.onclick = foo; // in the foo - obj&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;el.onclick = function () {this.style.color = &apos;#fff&apos;;} // obj&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;el.onclick = function() {doSomething();} // In the doSomething -\nWindow&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;el.addEventListener(&apos;click&apos;,foo,false) // in the foo - obj&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;el.attachEvent(&apos;onclick, function () { // this }&apos;) // window, all the\ncompliance to IE :)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;button onclick=&quot;this.style.color = &apos;#fff&apos;;&quot;&amp;gt; // obj&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;button onclick=&quot;foo&quot;&amp;gt; // In the foo - window, but you can &amp;lt;button\nonclick=&quot;foo(this)&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://bjorn.tipling.com/all-this&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt; is one good source of &lt;code&gt;this&lt;/code&gt; in &lt;code&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here is the summary:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;global this&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In a browser, at the global scope, &lt;code&gt;this&lt;/code&gt; is the &lt;code&gt;window&lt;/code&gt;object&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;bar&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;bar&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;In &lt;code&gt;node&lt;/code&gt; using the repl, &lt;code&gt;this&lt;/code&gt; is the top namespace. You can refer to it as &lt;code&gt;global&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;\n  { &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayBuffer&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayBuffer&lt;/span&gt;],\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Int8Array&lt;/span&gt;: { [&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Int8Array&lt;/span&gt;] &lt;span class=&quot;hljs-attr&quot;&gt;BYTES_PER_ELEMENT&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; },\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Uint8Array&lt;/span&gt;: { [&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Uint8Array&lt;/span&gt;] &lt;span class=&quot;hljs-attr&quot;&gt;BYTES_PER_ELEMENT&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; },\n    ...\n&amp;gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; === &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;\n &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &lt;code&gt;node&lt;/code&gt; executing from a script, &lt;code&gt;this&lt;/code&gt; at the global scope starts as an empty object. It is not the same as &lt;code&gt;global&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\\\\test.&lt;span class=&quot;hljs-property&quot;&gt;js&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);  \\\\ {}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;); \\\\ fasle\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;function this&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Except in the case of DOM event handlers or when a &lt;code&gt;thisArg&lt;/code&gt; is provided (see further down), both in node and in a browser using &lt;code&gt;this&lt;/code&gt; in a function that is not called with &lt;code&gt;new&lt;/code&gt; references the global scope&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;\n    foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;foo&quot;&lt;/span&gt;\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you use &lt;code&gt;use strict;&lt;/code&gt;, in which case &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;\n    foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;//Uncaught TypeError: Cannot set property &apos;foo&apos; of undefined &lt;/span&gt;\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you call a function with &lt;code&gt;new&lt;/code&gt; the &lt;code&gt;this&lt;/code&gt; will be a new context, it will not reference the global &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;\n    foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testThis&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;foo&quot;&lt;/span&gt;\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;prototype this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Functions you create become function objects. They automatically get a special &lt;code&gt;prototype&lt;/code&gt; property, which is something you can assign values to. When you create an instance by calling your function with &lt;code&gt;new&lt;/code&gt; you get access to the values you assigned to the &lt;code&gt;prototype&lt;/code&gt; property. You access those values using &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Thing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thing = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thing.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is usually a mistake to assign &lt;em&gt;arrays&lt;/em&gt; or &lt;em&gt;objects&lt;/em&gt; on the &lt;code&gt;prototype&lt;/code&gt;. If you want instances to each have their own arrays, create them in the function, not the prototype.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Thing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;things&lt;/span&gt; = [];\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thing1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thing2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;();\nthing1.&lt;span class=&quot;hljs-property&quot;&gt;things&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thing1.&lt;span class=&quot;hljs-property&quot;&gt;things&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs [&quot;foo&quot;]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thing2.&lt;span class=&quot;hljs-property&quot;&gt;things&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs []&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;object this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can use &lt;code&gt;this&lt;/code&gt; in any function on an object to refer to other properties on that object. This is not the same as an instance created with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;logFoo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);\n    }\n};\n\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;logFoo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;DOM event this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In an HTML DOM event handler, &lt;code&gt;this&lt;/code&gt; is always a reference to the DOM element the event was attached to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Listener&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;handleClick&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Listener&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;handleClick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;&amp;lt;div id=&quot;foo&quot;&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; listener = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Listener&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unless you &lt;code&gt;bind&lt;/code&gt; the context&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Listener&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;handleClick&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Listener&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;handleClick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs Listener {handleClick: function}&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; listener = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Listener&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;HTML this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Inside HTML attributes in which you can put JavaScript, &lt;code&gt;this&lt;/code&gt; is a reference to the element. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;console.log(this);&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &amp;lt;div id=&quot;foo&quot;...&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;eval this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can use &lt;code&gt;eval&lt;/code&gt; to access &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Thing&lt;/span&gt; () {\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;logFoo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;console.log(this.foo)&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thing = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;();\nthing.&lt;span class=&quot;hljs-title function_&quot;&gt;logFoo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;with this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can use &lt;code&gt;with&lt;/code&gt; to add &lt;code&gt;this&lt;/code&gt; to the current scope to read and write to values on &lt;code&gt;this&lt;/code&gt; without referring to &lt;code&gt;this&lt;/code&gt; explicitly.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Thing&lt;/span&gt; () {\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;logFoo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);\n        foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thing = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt;();\nthing.&lt;span class=&quot;hljs-title function_&quot;&gt;logFoo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// logs &quot;bar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thing.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// logs &quot;foo&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;jQuery this&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;the jQuery will in many places have &lt;code&gt;this&lt;/code&gt; refer to a DOM element. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\n$(&quot;.foo&quot;).each(function () {\n    console.log(this); //logs &amp;lt;div class=&quot;foo...\n});\n$(&quot;.foo&quot;).on(&quot;click&quot;, function () {\n    console.log(this); //logs &amp;lt;div class=&quot;foo...\n});\n$(&quot;.foo&quot;).each(function () {\n    this.click();\n});\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a lot of confusion regarding how &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; keyword is interpreted in JavaScript. Hopefully this article will lay all those to rest once and for all. And a lot more. Please read the entire article carefully. Be forewarned that this article is long.&lt;/p&gt;\n\n&lt;p&gt;Irrespective of the context in which it is used, &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; always references the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; in Javascript. However, what the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; is  differs according to &lt;strong&gt;context&lt;/strong&gt;. The &lt;strong&gt;context&lt;/strong&gt; may be exactly &lt;strong&gt;1 of the 6&lt;/strong&gt; following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Global&lt;/strong&gt; (i.e. Outside all functions)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inside Direct &quot;Non Bound Function&quot; Call&lt;/strong&gt; (i.e. a function that has &lt;strong&gt;not been&lt;/strong&gt; bound by calling &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inside Indirect &quot;Non Bound Function&quot; Call&lt;/strong&gt; through &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inside &quot;Bound Function&quot; Call&lt;/strong&gt; (i.e. a function that &lt;strong&gt;has been bound&lt;/strong&gt; by calling &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;While Object Creation through &quot;new&quot;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inside Inline DOM event handler&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The following describes each of this contexts one by one:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Global Context&lt;/strong&gt; (i.e. Outside all functions):&lt;/p&gt;\n\n&lt;p&gt;Outside all functions (i.e. in global context) the &lt;strong&gt;&quot;current\nobject&quot;&lt;/strong&gt; (and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) is always the\n&lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object for browsers.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inside Direct &quot;Non Bound Function&quot; Call&lt;/strong&gt;: &lt;/p&gt;\n\n&lt;p&gt;Inside a Direct  &quot;Non Bound Function&quot; Call, &lt;strong&gt;the object that\ninvoked the function call becomes the &quot;current object&quot;&lt;/strong&gt; (and hence\nthe value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;). If a function is called without a explicit &lt;strong&gt;current object&lt;/strong&gt;, the &lt;strong&gt;current object&lt;/strong&gt; is either the &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object (For Non Strict Mode) or &lt;strong&gt;undefined&lt;/strong&gt; (For Strict Mode)  . Any function (or variable) defined in\n&lt;strong&gt;Global Context&lt;/strong&gt; automatically becomes a property of the &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object.For e.g Suppose function is defined in Global Context as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it becomes the property of the window object, as if you have defined\nit as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;UserDefinedFunction&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n}  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &quot;Non Strict Mode&quot;, Calling/Invoking this function directly through   &lt;strong&gt;&quot;UserDefinedFunction()&quot;&lt;/strong&gt; will automatically call/invoke\nit as &lt;strong&gt;&quot;window.UserDefinedFunction()&quot;&lt;/strong&gt; making &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; as the\n&lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) within &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt;.Invoking this function in &quot;Non Strict Mode&quot; will result in the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// displays [object Window]  as it automatically gets invoked as window.UserDefinedFunction()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &quot;Strict Mode&quot;, Calling/Invoking the function directly through\n&lt;strong&gt;&quot;UserDefinedFunction()&quot;&lt;/strong&gt; will &lt;strong&gt;&quot;NOT&quot;&lt;/strong&gt; automatically call/invoke it as &lt;strong&gt;&quot;window.UserDefinedFunction()&quot;&lt;/strong&gt;.Hence the &lt;strong&gt;&quot;current\nobject&quot;&lt;/strong&gt; (and the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) within\n&lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; shall be &lt;strong&gt;undefined&lt;/strong&gt;. Invoking this function in &quot;Strict Mode&quot; will result in the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// displays undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, invoking it explicitly using window object shall result in\nthe following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;always displays [object Window]   irrespective of mode.&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let us look at another example. Please look at the following code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;)\n    }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o1={\n            &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;\n      }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o2={\n            &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;\n       }\n\no1.&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\no2.&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above example we see that when &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; was\ninvoked through &lt;strong&gt;o1&lt;/strong&gt;, &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; takes value of &lt;strong&gt;o1&lt;/strong&gt; and the\nvalue of its properties &lt;strong&gt;&quot;a&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;b&quot;&lt;/strong&gt; get displayed. The value\nof &lt;strong&gt;&quot;c&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;d&quot;&lt;/strong&gt; were shown as &lt;strong&gt;undefined&lt;/strong&gt; as &lt;strong&gt;o1&lt;/strong&gt; does\nnot define these properties&lt;/p&gt;\n\n&lt;p&gt;Similarly when &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; was invoked through &lt;strong&gt;o2&lt;/strong&gt;,\n&lt;strong&gt;&quot;this&quot;&lt;/strong&gt; takes value of &lt;strong&gt;o2&lt;/strong&gt; and the value of its properties &lt;strong&gt;&quot;c&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;d&quot;&lt;/strong&gt; get displayed.The value of &lt;strong&gt;&quot;a&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;b&quot;&lt;/strong&gt; were shown as &lt;strong&gt;undefined&lt;/strong&gt; as &lt;strong&gt;o2&lt;/strong&gt; does not define these properties.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inside Indirect &quot;Non Bound Function&quot; Call&lt;/strong&gt; through &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;When a &lt;strong&gt;&quot;Non Bound Function&quot;&lt;/strong&gt; is called through\n&lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;, the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) is set to the value of\n&lt;strong&gt;&quot;this&quot;&lt;/strong&gt; parameter (first parameter) passed to &lt;strong&gt;call/apply&lt;/strong&gt;. The following code demonstrates the same.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;)\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o1={\n            &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;\n       }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o2={\n            &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;\n       }\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o1) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o1) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n\no1.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\no1.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n\no2.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o1) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\no2.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o1) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above code clearly shows that the &quot;this&quot; value for any &quot;NON\nBound Function&quot; can be altered through &lt;strong&gt;call/apply&lt;/strong&gt;. Also,if the\n&lt;strong&gt;&quot;this&quot;&lt;/strong&gt; parameter is  not explicitly passed to &lt;strong&gt;call/apply&lt;/strong&gt;, &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of &quot;this&quot;) is set to &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; in Non strict mode and &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in strict mode.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inside &quot;Bound Function&quot; Call&lt;/strong&gt; (i.e. a function that has been bound by calling &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt;):&lt;/p&gt;\n\n&lt;p&gt;A bound function is a function whose &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; value has been\nfixed. The following code demonstrated how &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; works in case\nof bound function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;  + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;)\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o1={\n          &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;bf&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n       }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o2={\n           &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n           &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n           &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;,\n           &lt;span class=&quot;hljs-attr&quot;&gt;bf&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n        }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bound1=&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o1); &lt;span class=&quot;hljs-comment&quot;&gt;// permanantly fixes &quot;this&quot; value of function &quot;bound1&quot; to Object o1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bound1&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bound2=&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o2); &lt;span class=&quot;hljs-comment&quot;&gt;// permanantly fixes &quot;this&quot; value of function &quot;bound2&quot; to Object o2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bound2&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bound3=o1.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o2); &lt;span class=&quot;hljs-comment&quot;&gt;// permanantly fixes &quot;this&quot; value of function &quot;bound3&quot; to Object o2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bound3&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bound4=o2.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o1); &lt;span class=&quot;hljs-comment&quot;&gt;// permanantly fixes &quot;this&quot; value of function &quot;bound4&quot; to Object o1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bound4&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\n\no1.&lt;span class=&quot;hljs-property&quot;&gt;bf&lt;/span&gt;=&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// permanantly fixes &quot;this&quot; value of function &quot;o1.bf&quot; to Object o2&lt;/span&gt;\no1.&lt;span class=&quot;hljs-title function_&quot;&gt;bf&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display undefined,undefined,3,4&lt;/span&gt;\n\no2.&lt;span class=&quot;hljs-property&quot;&gt;bf&lt;/span&gt;=&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(o1) &lt;span class=&quot;hljs-comment&quot;&gt;// permanantly fixes &quot;this&quot; value of function &quot;o2.bf&quot; to Object o1&lt;/span&gt;\no2.&lt;span class=&quot;hljs-title function_&quot;&gt;bf&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Shall display 1,2,undefined,undefined&lt;/span&gt;\n\nbound1.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall still display 1,2,undefined,undefined. &quot;call&quot; cannot alter the value of &quot;this&quot; for bound function&lt;/span&gt;\n\nbound1.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall still display 1,2,undefined,undefined. &quot;apply&quot; cannot alter the value of &quot;this&quot; for bound function&lt;/span&gt;\n\no2.&lt;span class=&quot;hljs-property&quot;&gt;bf&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall still display 1,2,undefined,undefined. &quot;call&quot; cannot alter the value of &quot;this&quot; for bound function&lt;/span&gt;\no2.&lt;span class=&quot;hljs-property&quot;&gt;bf&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o2) &lt;span class=&quot;hljs-comment&quot;&gt;// Shall still display 1,2,undefined,undefined.&quot;apply&quot; cannot alter the value of &quot;this&quot; for bound function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As given in the code above, &lt;strong&gt;&quot;this&quot; value for any &quot;Bound Function&quot;\nCANNOT be altered through call/apply&lt;/strong&gt;. Also, if the &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;\nparameter is  not explicitly passed to bind, &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt;\n(and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; ) is set to &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; in Non\nstrict mode and &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in strict mode.  One more thing.\nBinding an already bound function does not change the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;.\nIt remains set as the value set by first bind function.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;While Object Creation through &quot;new&quot;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Inside a constructor function, the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of \n&lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) references the object that is currently being created\nthrough &lt;strong&gt;&quot;new&quot;&lt;/strong&gt; irrespective of the bind status of the function. However\nif the constructor is a bound function it shall get called with \npredefined set of arguments as set for the bound function.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inside Inline DOM event handler&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Please look at the following HTML Snippet&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button onclick=&lt;span class=&quot;hljs-string&quot;&gt;&apos;this.style.color=white&apos;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;World&lt;/span&gt;&amp;lt;/button&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;width:100px;height:100px;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;OnDivClick(event,this)&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; in above examples refer to &quot;button&quot; element and the\n&quot;div&quot; element respectively.&lt;/p&gt;\n\n&lt;p&gt;In the first example, the font color of the button shall be set to\nwhite when it is clicked.&lt;/p&gt;\n\n&lt;p&gt;In the second example when the &lt;strong&gt;&quot;div&quot;&lt;/strong&gt; element is clicked it shall\ncall the &lt;strong&gt;OnDivClick&lt;/strong&gt; function with its second parameter\nreferencing the clicked div element. However the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;\nwithin OnDivClick &lt;strong&gt;SHALL NOT&lt;/strong&gt; reference the clicked &lt;strong&gt;div&lt;/strong&gt;\nelement. It shall be set as the &lt;strong&gt;&quot;window object&quot;&lt;/strong&gt; or\n&lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in &lt;strong&gt;Non strict&lt;/strong&gt; and &lt;strong&gt;Strict Modes&lt;/strong&gt; respectively (if &lt;strong&gt;OnDivClick&lt;/strong&gt; is an &lt;strong&gt;unbound function&lt;/strong&gt;) or set to a predefined\nBound value (if &lt;strong&gt;OnDivClick&lt;/strong&gt; is a &lt;strong&gt;bound function&lt;/strong&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The following summarizes the entire article&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;In Global Context &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; always refers to the &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Whenever a function is invoked, it is invoked in context of an\nobject (&lt;strong&gt;&quot;current object&quot;&lt;/strong&gt;). If the &lt;strong&gt;current object&lt;/strong&gt; is not explicitly provided,\nthe &lt;strong&gt;current object&lt;/strong&gt;  is the &lt;strong&gt;&quot;window object&quot;&lt;/strong&gt; in &lt;strong&gt;NON Strict\nMode&lt;/strong&gt; and &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in Strict Mode by default.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within a Non Bound function is the reference to object in context of which the function is invoked (&lt;strong&gt;&quot;current object&quot;&lt;/strong&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within a Non Bound function can be overriden by\n&lt;strong&gt;call&lt;/strong&gt; and &lt;strong&gt;apply&lt;/strong&gt; methods of the function.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; is fixed for a Bound function and cannot be\noverriden by &lt;strong&gt;call&lt;/strong&gt; and &lt;strong&gt;apply&lt;/strong&gt; methods of the function.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Binding and already bound function does not change the value of &quot;this&quot;. It remains set as the value set by first bind function.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within a constructor is the object that is being\ncreated and initialized&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within an inline DOM event handler is reference\nto the element for which the event handler is given.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Probably the most detailed and comprehensive article on &lt;code&gt;this&lt;/code&gt; is the following: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gentle explanation of &apos;this&apos; keyword in JavaScript&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The idea behind &lt;code&gt;this&lt;/code&gt; is to understand that the function invocation types have the significant importance on setting &lt;code&gt;this&lt;/code&gt; value.  &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;When having troubles identifying &lt;code&gt;this&lt;/code&gt;, &lt;strong&gt;do not&lt;/strong&gt; ask yourself:  &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Where is &lt;em&gt;&lt;code&gt;this&lt;/code&gt; taken from&lt;/em&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;but &lt;strong&gt;do&lt;/strong&gt; ask yourself:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;How is the function &lt;em&gt;invoked&lt;/em&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;For an arrow function (special case of context transparency) ask yourself:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;What value has &lt;code&gt;this&lt;/code&gt; where the arrow function is &lt;em&gt;defined&lt;/em&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This mindset is correct when dealing with &lt;code&gt;this&lt;/code&gt; and will save you from headache.&lt;/p&gt;\n    ","\n&lt;p&gt;This is the best explanation I&apos;ve seen: &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Understand JavaScripts &lt;em&gt;this&lt;/em&gt; with Clarity&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;em&gt;this&lt;/em&gt; reference ALWAYS refers to (and holds the value of) an\n  objecta singular objectand it is usually used inside a function or a\n  method, although it can be used outside a function in the global\n  scope. Note that when we use strict mode, this holds the value of\n  undefined in global functions and in anonymous functions that are not\n  bound to any object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There are Four Scenarios where &lt;em&gt;this&lt;/em&gt; can be confusing:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;When we pass a method (that uses &lt;em&gt;this&lt;/em&gt;) as an argument to be used as a callback function. &lt;/li&gt;\n&lt;li&gt;When we use an inner function (a closure). It is important to take note that closures cannot access the outer functions &lt;em&gt;this&lt;/em&gt; variable by using the this keyword because the this variable is accessible only by the function itself, not by inner functions.&lt;/li&gt;\n&lt;li&gt;When a method which relies on &lt;em&gt;this&lt;/em&gt; is assigned to a variable across contexts, in which case &lt;em&gt;this&lt;/em&gt; references another object than originally intended.&lt;/li&gt;\n&lt;li&gt;When using &lt;em&gt;this&lt;/em&gt; along with the bind, apply, and call methods.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;He gives code examples, explanations, and solutions, which I thought was very helpful.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is one of the misunderstood concept in JavaScript because it behaves little differently from place to place. Simply, &lt;code&gt;this&lt;/code&gt; refers to the &lt;strong&gt;&quot;owner&quot; of the function we are currently executing&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; helps to get the current object (a.k.a. execution context) we work with. If you understand in which object the current function is getting executed, you can understand easily what current &lt;code&gt;this&lt;/code&gt; is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = &lt;span class=&quot;hljs-string&quot;&gt;&quot;window.val&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;val&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj.val&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;innerMethod&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj.val.inner&quot;&lt;/span&gt;,\n            func = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.&lt;span class=&quot;hljs-property&quot;&gt;val&lt;/span&gt;;\n            };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func;\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;outerMethod&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;val&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//This actually gets executed inside window object &lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;innerMethod&lt;/span&gt;()()); &lt;span class=&quot;hljs-comment&quot;&gt;//returns window.val&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Breakdown in to 2 lines explains this in detail&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _inn = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;innerMethod&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;_inn&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//returns window.val&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;outerMethod&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//returns obj.val&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above we create 3 variables with same name &apos;val&apos;. One in global context, one inside obj and the other inside innerMethod of obj. JavaScript resolves identifiers within a particular context by going up the scope chain from local go global. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;Few places where &lt;code&gt;this&lt;/code&gt; can be differentiated&lt;/em&gt; &lt;/p&gt;\n\n&lt;h2&gt;Calling a method of a object&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; status = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; helper = {\n    status : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getStatus&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; theStatus1 = helper.&lt;span class=&quot;hljs-title function_&quot;&gt;getStatus&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//line1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(theStatus1); &lt;span class=&quot;hljs-comment&quot;&gt;//2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; theStatus2 = helper.&lt;span class=&quot;hljs-property&quot;&gt;getStatus&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;theStatus2&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When line1 is executed, JavaScript establishes an execution context (EC) for the function call, setting &lt;code&gt;this&lt;/code&gt; to the &lt;strong&gt;object referenced by whatever came before the last &quot;.&quot;&lt;/strong&gt;. so in the last line you can understand that &lt;code&gt;a()&lt;/code&gt; was executed in the global context which is the &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;With Constructor&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; can be used to refer to the object being created&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;personName&lt;/span&gt; = name;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayHello&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;personName&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Scott&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(person1.&lt;span class=&quot;hljs-title function_&quot;&gt;sayHello&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//Hello Scott&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hugh&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sayHelloP2 = person2.&lt;span class=&quot;hljs-property&quot;&gt;sayHello&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sayHelloP2&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//Hello undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When new &lt;code&gt;Person()&lt;/code&gt; is executed, a completely new object is created. &lt;code&gt;Person&lt;/code&gt; is called and its &lt;code&gt;this&lt;/code&gt; is set to reference that new object. &lt;/p&gt;\n\n&lt;h2&gt;Function call&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myCustomAttribute&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Custom Attribute&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; whatIsThis = &lt;span class=&quot;hljs-title function_&quot;&gt;testFunc&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(whatIsThis); &lt;span class=&quot;hljs-comment&quot;&gt;//window&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; whatIsThis2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testFunc&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(whatIsThis2);  &lt;span class=&quot;hljs-comment&quot;&gt;//testFunc() / object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myCustomAttribute&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Custom Attribute &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we miss &lt;code&gt;new&lt;/code&gt; keyword, &lt;code&gt;whatIsThis&lt;/code&gt; referes to the most global context it can find(&lt;code&gt;window&lt;/code&gt;)&lt;/p&gt;\n\n&lt;h2&gt;With event handlers&lt;/h2&gt;\n\n&lt;p&gt;If the event handler is inline, &lt;code&gt;this&lt;/code&gt; refers to global object&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/javascript&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;click_handler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// alerts the window object&lt;/span&gt;\n    }\n&amp;lt;/script&amp;gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;thebutton&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;click_handler()&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When adding event handler through JavaScript, &lt;code&gt;this&lt;/code&gt; refers to DOM element that generated the event.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You can also manipulate the context using &lt;code&gt;.apply()&lt;/code&gt; &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.bind()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;JQuery proxy is another way you can use to make sure this in a function will be the value you desire. (Check &lt;a href=&quot;https://stackoverflow.com/q/4986329/340046&quot;&gt;Understanding $.proxy()&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/3349380/340046&quot;&gt;jQuery.proxy() usage&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/4886696/340046&quot;&gt;What does &lt;code&gt;var that = this&lt;/code&gt; means in JavaScript&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The value of &quot;this&quot; depends on the &quot;context&quot; in which the function is executed. The context can be any object or the global object, i.e., window.&lt;/p&gt;\n\n&lt;p&gt;So the Semantic of &quot;this&quot; is different from the traditional OOP languages. And it causes problems:\n1. when a function is passed to another variable (most likely, a callback); and 2. when a closure is invoked from a member method of a class.&lt;/p&gt;\n\n&lt;p&gt;In both cases, this is set to window.&lt;/p&gt;\n    ","\n&lt;p&gt;In pseudoclassical terms, the way many lectures teach the &apos;this&apos; keyword is as an object instantiated by a class or object constructor. Each time a new object is constructed from a class, imagine that under the hood a local instance of a &apos;this&apos; object is created and returned. I remember it taught like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;make, model, year&lt;/span&gt;) {\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; = {}; &lt;span class=&quot;hljs-comment&quot;&gt;// under the hood, so to speak&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;make&lt;/span&gt; = make;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;model&lt;/span&gt; = model;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;year&lt;/span&gt; = year;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// under the hood&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mycar = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Eagle&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Talon TSi&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1993&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// ========= under the hood&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; = {};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;make&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Eagle&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;model&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Talon TSi&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;year&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1993&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Whould &lt;a href=&quot;http://www.quirksmode.org/js/this.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;this&lt;/a&gt; help? (Most confusion of &apos;this&apos; in javascript is coming from the fact that it generally is not linked to your object, but to the current executing scope -- that might not be exactly how it works but is always feels like that to me -- see the article for a complete explanation)&lt;/p&gt;\n    ","\n&lt;p&gt;A little bit info about &lt;strong&gt;this&lt;/strong&gt; keyword&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s log &lt;code&gt;this&lt;/code&gt; keyword to the console in global scope without any more code but&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &lt;strong&gt;Client/Browser&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; keyword is a global object which is &lt;code&gt;window&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;p&gt;In &lt;strong&gt;Server/Node/Javascript runtime&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; keyword is also a global object which is &lt;code&gt;module.exports&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Keep in mind &lt;code&gt;exports&lt;/code&gt; is just a reference to &lt;code&gt;module.exports&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I have a different take on &lt;code&gt;this&lt;/code&gt; from the other answers that I hope is helpful.&lt;/p&gt;\n\n&lt;p&gt;One way to look at JavaScript is to see that there are only 1 way to call a function&lt;sup&gt;1&lt;/sup&gt;. It is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;functionObject.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(objectForThis, arg0, arg1, arg2, ...);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is always some value supplied for &lt;code&gt;objectForThis&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Everything else is syntactic sugar for &lt;code&gt;functionObject.call&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So, everything else can be described by how it translates into &lt;code&gt;functionObject.call&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you just call a function then &lt;code&gt;this&lt;/code&gt; is the &quot;global object&quot; which in the browser is the window&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// this is the window object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;In other words, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;was effectively translated into&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;foo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you use strict mode then &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// this is the window object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;which means&lt;/p&gt;\n\n&lt;p&gt;In other words, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;was effectively translated into&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;foo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In JavaScript there are operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;. There is also the dot operator which is &lt;code&gt;.&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; operator when used with a function on the right and an object on the left effectively means &quot;pass object as &lt;code&gt;this&lt;/code&gt; to function.&lt;/p&gt;\n\n&lt;p&gt;Example&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bar = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); \n  },\n};\n\nbar.&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// this is bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;In other words &lt;code&gt;bar.foo()&lt;/code&gt; translates into &lt;code&gt;const temp = bar.foo; temp.call(bar);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that it doesn&apos;t matter how the function was created (mostly...). All of these will produce the same results&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bar = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-title function_&quot;&gt;fn1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); },\n  &lt;span class=&quot;hljs-attr&quot;&gt;fn2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); },\n  &lt;span class=&quot;hljs-attr&quot;&gt;fn3&lt;/span&gt;: otherFunction,\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;otherFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) };\n\nbar.&lt;span class=&quot;hljs-title function_&quot;&gt;fn1&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// this is bar&lt;/span&gt;\nbar.&lt;span class=&quot;hljs-title function_&quot;&gt;fn2&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// this is bar&lt;/span&gt;\nbar.&lt;span class=&quot;hljs-title function_&quot;&gt;fn3&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// this is bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Again these all are just syntactic sugar for&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; temp = bar.&lt;span class=&quot;hljs-property&quot;&gt;fn1&lt;/span&gt;; temp.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(bar); }\n{ &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; temp = bar.&lt;span class=&quot;hljs-property&quot;&gt;fn2&lt;/span&gt;; temp.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(bar); }\n{ &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; temp = bar.&lt;span class=&quot;hljs-property&quot;&gt;fn3&lt;/span&gt;; temp.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(bar); }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One other wrinkle is the prototype chain. When you use &lt;code&gt;a.b&lt;/code&gt; JavaScript first looks on the object referenced directly by &lt;code&gt;a&lt;/code&gt; for the property &lt;code&gt;b&lt;/code&gt;. If &lt;code&gt;b&lt;/code&gt; is not found on the object then JavaScript will look in the object&apos;s prototype to find &lt;code&gt;b&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;There are various ways to define an object&apos;s prototype, the most common in 2019 is the &lt;code&gt;class&lt;/code&gt; keyword. For the purposes of &lt;code&gt;this&lt;/code&gt; though it doesn&apos;t matter. What matters is that as it looks in object &lt;code&gt;a&lt;/code&gt; for property &lt;code&gt;b&lt;/code&gt; if it finds property &lt;code&gt;b&lt;/code&gt; on the object or in it&apos;s prototype chain if &lt;code&gt;b&lt;/code&gt; ends up being a function then the same rules as above apply. The function &lt;code&gt;b&lt;/code&gt; references will be called using the &lt;code&gt;call&lt;/code&gt; method and passing &lt;code&gt;a&lt;/code&gt; as objectForThis as shown a the top of this answer.&lt;/p&gt;\n\n&lt;p&gt;Now. Let&apos;s imagine we make a function that explicitly sets &lt;code&gt;this&lt;/code&gt; before calling another function and then call it with the &lt;code&gt;.&lt;/code&gt; (dot) operator&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; objectForThis = {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;moo&apos;&lt;/span&gt;}\n  foo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(objectForThis);  &lt;span class=&quot;hljs-comment&quot;&gt;// explicitly passing objectForThis&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  bar,\n};\n\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;();  &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Following the translation to use &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;obj.bar()&lt;/code&gt; becomes &lt;code&gt;const temp = obj.bar; temp.call(obj);&lt;/code&gt;. When we enter the &lt;code&gt;bar&lt;/code&gt; function we call &lt;code&gt;foo&lt;/code&gt; but we explicitly passed in another object for objectForThis so when we arrive at foo &lt;code&gt;this&lt;/code&gt; is that inner object.&lt;/p&gt;\n\n&lt;p&gt;This is what both &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;=&amp;gt;&lt;/code&gt; functions effectively do. They are more syntactic sugar. They effectively build a new invisible function exactly like &lt;code&gt;bar&lt;/code&gt; above that explicitly sets &lt;code&gt;this&lt;/code&gt; before it calls whatever function is specified. In the case of bind &lt;code&gt;this&lt;/code&gt; is set to whatever you pass to &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bar = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;moo&apos;&lt;/span&gt;});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// bind created a new invisible function that calls foo with the bound object.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;();  \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the objectForThis we are passing to bar here is ignored because&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the invisible function that bind created will call foo with with&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the object we bound above&lt;/span&gt;\n\nbar.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;other&apos;&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that if &lt;code&gt;functionObject.bind&lt;/code&gt; did not exist we could make our own like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn, objectForThis&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(objectForthis, ...args);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then we could call it like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bar = &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(foo, {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Arrow functions, the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator are syntactic sugar for bind&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is the same as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; tempFn = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)}; \n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = tempFn.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just like &lt;code&gt;bind&lt;/code&gt;, a new invisible function is created that calls the given function with a bound value for &lt;code&gt;objectForThis&lt;/code&gt; but unlike &lt;code&gt;bind&lt;/code&gt; the object to be bound is implicit. It&apos;s whatever &lt;code&gt;this&lt;/code&gt; happens to be when the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator is used.&lt;/p&gt;\n\n&lt;p&gt;So, just like the rules above&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }  &lt;span class=&quot;hljs-comment&quot;&gt;// this is the global object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }  &lt;span class=&quot;hljs-comment&quot;&gt;// this is undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  foo,\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;obj.foo()&lt;/code&gt; translates to &lt;code&gt;const temp = obj.foo; temp.call(obj);&lt;/code&gt; which means the arrow operator inside &lt;code&gt;foo&lt;/code&gt; will bind &lt;code&gt;obj&lt;/code&gt; to a new invisible function and return that new invisible function which is assigned to &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;b()&lt;/code&gt; will work as it always has as &lt;code&gt;b.call(window)&lt;/code&gt; or &lt;code&gt;b.call(undefined)&lt;/code&gt; calling the new invisible function that &lt;code&gt;foo&lt;/code&gt; created. That invisible function ignores the &lt;code&gt;this&lt;/code&gt; passed into it and  passes &lt;code&gt;obj&lt;/code&gt; as objectForThis` to the arrow function.&lt;/p&gt;\n\n&lt;p&gt;The code above translates to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tempFn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tempFn.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  foo,\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\nb.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt; or &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; strict mode);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;code&gt;apply&lt;/code&gt; is another function similar to &lt;code&gt;call&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;functionName.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(objectForThis, arrayOfArgs);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But as of ES6 conceptually you can even translate that into&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;functionName.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(objectForThis, ...arrayOfArgs);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;this use for Scope just like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&amp;gt;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#tbleName tbody tr&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;{\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; txt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\ntxt += $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;td&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;();\n\\\\same &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; above but synatx different\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; txt1=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n txt1+=$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#tbleName tbody tr&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(txt1)\n});\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;value of txt1 and txt is same\nin Above example \n$(this)=$(&apos;#tbleName tbody tr&apos;) is Same&lt;/p&gt;\n    ","\n&lt;h2&gt;Summary &lt;code&gt;this&lt;/code&gt; Javascript:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The value of &lt;code&gt;this&lt;/code&gt; is determined by &lt;strong&gt;how the function is invoked not, where it was created!&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Usually the value of &lt;code&gt;this&lt;/code&gt; is determined by the Object which is left of the dot. (&lt;code&gt;window&lt;/code&gt; in global space)&lt;/li&gt;\n&lt;li&gt;In event listeners the value of &lt;code&gt;this&lt;/code&gt;  refers to the DOM element on which the event was called.&lt;/li&gt;\n&lt;li&gt;When in function is called with the &lt;code&gt;new&lt;/code&gt; keyword the value of &lt;code&gt;this&lt;/code&gt; refers to the newly created object&lt;/li&gt;\n&lt;li&gt;You can manipulate the value of &lt;code&gt;this&lt;/code&gt; with the functions: &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example:&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; object = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);}\n}\n\nobject.&lt;span class=&quot;hljs-title function_&quot;&gt;prop1&lt;/span&gt;();   &lt;span class=&quot;hljs-comment&quot;&gt;// object is left of the dot, thus this is object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myFunction = object.&lt;span class=&quot;hljs-property&quot;&gt;prop1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// We store the function in the variable myFunction&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;myFunction&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Here we are in the global space&lt;/span&gt;\n              &lt;span class=&quot;hljs-comment&quot;&gt;// myFunction is a property on the global object&lt;/span&gt;\n              &lt;span class=&quot;hljs-comment&quot;&gt;// Therefore it logs the window object&lt;/span&gt;\n              \n             &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Example event listeners:&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.foo&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// This refers to the DOM element the eventListener was invoked from&lt;/span&gt;\n})\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.foo&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Tip, es6 arrow function don&apos;t have their own binding to the this v&lt;/span&gt;\n})                    &lt;span class=&quot;hljs-comment&quot;&gt;// Therefore this will log the global object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.foo&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Example constructor:&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt; (name) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; me = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Willem&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// When using the new keyword the this in the constructor function will refer to the newly created object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(me.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); \n&lt;span class=&quot;hljs-comment&quot;&gt;// Therefore, the name property was placed on the object created with new keyword.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&quot;this&quot; in JavaScript\nthis is one of the properties of the Execution Context.\n&lt;a href=&quot;https://i.stack.imgur.com/jiAdn.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/jiAdn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;this property is created every time a function is executed and not\nbefore that.&lt;/li&gt;\n&lt;li&gt;Its value is not static but rather depends on how it is being used.&lt;/li&gt;\n&lt;li&gt;takes a value that points to the owner of the function in which it is\nused&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;There are different ways in which the &quot;this&quot; keyword can be used, below are the example for it (method, regular function, arrow function, Event listener, Explicit function Binding).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1. Inside a method.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;this === (to the object that is calling the Method).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SAtWz.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SAtWz.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;\nIn the above example the method &quot; fullName()&quot; is called by an Object &quot;person&quot; hence the value of this inside the method &quot; fullName()&quot; will be equal to the &quot;person&quot; Object.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;2. Inside a Function.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;i) function declaration/expression&lt;/p&gt;\n&lt;p&gt;in loose mode this === window (object)\n&lt;a href=&quot;https://i.stack.imgur.com/5E55o.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5E55o.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;in Strict mode this === undefined\n&lt;a href=&quot;https://i.stack.imgur.com/AGWJ4.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/AGWJ4.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Note&amp;nbsp;: this property works the same while defining a function using function declaration or function expression approach.&lt;/p&gt;\n&lt;p&gt;ii) Arrow Function&amp;nbsp;:&lt;/p&gt;\n&lt;p&gt;Arrow Function does not have their own this property, they take the value of this as their surrounding Function.\nIf the surrounding function is not present i.e if they are defined at the global level then this === window (object)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/9NPIK.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/9NPIK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;3. Event Listener&lt;/strong&gt;\nthis === object on which the handler is attached.\nclick event bind to the Document&amp;nbsp;object&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Y6elH.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Y6elH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In the above example since the click handler is attached to the &quot;document&quot; object, this will be equal to the &quot;document&quot; object&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;4. Explicit Function Binding (call, Apply, Bind)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The call() and apply() methods are predefined JavaScript methods.&lt;/p&gt;\n&lt;p&gt;They can both be used to call an object method with another object as an argument.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IPfrH.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IPfrH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In the above example this inside the &quot;printFullDetails()&quot; is explicitly set to the personObj1 and personObj2 by passing as the first argument to call method.&lt;/p&gt;\n&lt;p&gt;You can Explore more about call, apply and bind methods &lt;a href=&quot;https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind/62058682#62058682&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;To understand &quot;this&quot; properly one must understand the context and scope and difference between them.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;: In javascript scope is related to the visibility of the variables, scope achieves through the use of the function. (Read more about scope)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: Context is related to objects. It refers to the object to which a function belongs. When you use the JavaScript this keyword, it refers to the object to which function belongs. &lt;strong&gt;For example, inside of a function, when you say: this.accoutNumber, you are referring to the property accoutNumber, that belongs to the object to which that function belongs.&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;If the object myObj has a method called getMyName, when the JavaScript keyword this is used inside of getMyName, it refers to myObj. If the function getMyName were executed in the global scope, then this refers to the window object (except in strict mode). &lt;/p&gt;\n\n&lt;p&gt;Now let&apos;s see some example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &amp;lt;script&amp;gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;What is this: &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    &amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Runnig abobve code in browser output will:\n&lt;a href=&quot;https://i.stack.imgur.com/zO7hd.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/zO7hd.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;According to the output you are inside of the context of the window object, it is also visible that window prototype refers to the Object.&lt;/p&gt;\n\n&lt;p&gt;Now let&apos;s try inside of a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &amp;lt;script&amp;gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;What is this: &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc&lt;/span&gt;();\n    &amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ciuzi.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ciuzi.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;\nThe output is the same because we logged &apos;this&apos; variable in the global scope and we logged it in functional scope, we didn&apos;t change the context. In both case context was same, related to &lt;strong&gt;widow object&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;Now let&apos;s create our own object. In javascript, you can create an object in many ways.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &amp;lt;script&amp;gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nora&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zaman&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObj = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;firstName&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lord&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;lastName&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;Baron&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;printNameGetContext&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(firstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;+lastName);\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; +&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n            }\n        }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = myObj.&lt;span class=&quot;hljs-title function_&quot;&gt;printNameGetContext&lt;/span&gt;();\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(context);\n    &amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output: \n&lt;a href=&quot;https://i.stack.imgur.com/4JxJF.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/4JxJF.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So from the above example, we found that &apos;this&apos; keyword is referring to a new context that is related to myObj, and myObject also has prototype chain to Object.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s go throw another example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;body&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printMe&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Terminal2: this function declared inside window context so this function belongs to the window object.&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.btn&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Terminal1: button context, this callback function belongs to DOM element &lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;printMe&lt;/span&gt;();\n        })\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/body&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output: \nMake sense right? (read comments) \n&lt;a href=&quot;https://i.stack.imgur.com/z3yDX.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/z3yDX.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;If you having trouble to understand the above example let&apos;s try with our own callback;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObj = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;firstName&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lord&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;lastName&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;Baron&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;printName&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback1, callback2&lt;/span&gt;){\n                &lt;span class=&quot;hljs-comment&quot;&gt;//Attaching callback1 with this myObj context&lt;/span&gt;\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;callback1&lt;/span&gt; = callback1;\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;callback1&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; +&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;)\n                &lt;span class=&quot;hljs-comment&quot;&gt;//We did not attached callback2 with myObj so, it&apos;s reamin with window context by default&lt;/span&gt;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;callback2&lt;/span&gt;();\n                &lt;span class=&quot;hljs-comment&quot;&gt;/*\n                 //test bellow codes\n                 this.callback2 = callback2;\n                 this.callback2();\n                */&lt;/span&gt;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; callback2 = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n        }\n        myObj.&lt;span class=&quot;hljs-title function_&quot;&gt;printName&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n        }, callback2);\n    &amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:\n&lt;a href=&quot;https://i.stack.imgur.com/5rCRA.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5rCRA.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now let&apos;s Understand Scope, Self, IIFE and THIS how behaves &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; color = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// property of window&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n           &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// property of window&lt;/span&gt;\n           &lt;span class=&quot;hljs-attr&quot;&gt;printColor&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// property of obj, attached with obj&lt;/span&gt;\n               &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;In printColor -- this.color: &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;);\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;In printColor -- self.color: &apos;&lt;/span&gt;+self.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;);\n               (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// decleard inside of printColor but not property of object, it will executed on window context.&lt;/span&gt;\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;In IIFE -- this.color: &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;In IIFE -- self.color: &apos;&lt;/span&gt;+self.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;); \n               })();\n\n               &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nestedFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-comment&quot;&gt;// decleard inside of printColor but not property of object, it will executed on window context.&lt;/span&gt;\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nested fun -- this.color: &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nested fun -- self.color: &apos;&lt;/span&gt;+self.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;);\n               }\n\n               &lt;span class=&quot;hljs-title function_&quot;&gt;nestedFunc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// executed on window context&lt;/span&gt;\n               &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nestedFunc;\n           }\n       };\n\n       obj.&lt;span class=&quot;hljs-title function_&quot;&gt;printColor&lt;/span&gt;()(); &lt;span class=&quot;hljs-comment&quot;&gt;// returned function executed on window context&lt;/span&gt;\n   &amp;lt;/script&amp;gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output is pretty awesome right?\n&lt;a href=&quot;https://i.stack.imgur.com/Q9poV.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Q9poV.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "],"id":44,"title":"How does the \"this\" keyword work, and when should it be used?","content":"\n                \n&lt;p&gt;I am looking to find a clear explanation of what the &quot;this&quot; keyword does, and how to use it correctly.&lt;/p&gt;\n&lt;p&gt;It seems to behave strangely, and I don&apos;t fully understand why.&lt;/p&gt;\n&lt;p&gt;How does &lt;code&gt;this&lt;/code&gt; work and when should it be used?&lt;/p&gt;\n    ","slug":"how-does-the-\"this\"-keyword-work-and-when-should-it-be-used-1657384384385","postType":"QUESTION","createdAt":"2022-07-09T16:33:04.000Z","updatedAt":"2022-07-09T16:33:04.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Should I avoid the use of set(Preferred|Maximum|Minimum)Size methods in Java Swing?","slug":"should-i-avoid-the-use-of-set(preferredormaximumorminimum)size-methods-in-java-swing-1657384628399"},{"title":"Templated check for the existence of a class member function?","slug":"templated-check-for-the-existence-of-a-class-member-function-1657388363414"},{"title":"How do I format a date in JavaScript?","slug":"how-do-i-format-a-date-in-javascript-1657384649498"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"Resolve build errors due to circular dependency amongst classes","slug":"resolve-build-errors-due-to-circular-dependency-amongst-classes-1657384903462"},{"title":"How to manage startActivityForResult on Android","slug":"how-to-manage-startactivityforresult-on-android-1657387967393"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"How to remove the space between inline/inline-block elements?","slug":"how-to-remove-the-space-between-inlineinline-block-elements-1657384532273"},{"title":"How do I declare a 2d array in C++ using new?","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163"},{"title":"I just assigned a variable, but echo $variable shows something else","slug":"i-just-assigned-a-variable-but-echo-dollarvariable-shows-something-else-1657387574561"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484"},{"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839"}]},"__N_SSG":true}