{"pageProps":{"data":{"answer":["\n&lt;p&gt;A &lt;code&gt;RegExp&lt;/code&gt; object with the &lt;code&gt;g&lt;/code&gt; flag keeps track of the &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp/lastIndex&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; where a match occurred, so on subsequent matches it will start from the last used index, instead of 0. Take a look:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo B&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(query, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(re.&lt;span class=&quot;hljs-property&quot;&gt;lastIndex&lt;/span&gt;);\n\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If you don&apos;t want to manually reset &lt;code&gt;lastIndex&lt;/code&gt; to 0 after every test, just remove the &lt;code&gt;g&lt;/code&gt; flag.&lt;/p&gt;\n&lt;p&gt;Here&apos;s the algorithm that the specs dictate (section 15.10.6.2):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;RegExp.prototype.exec(string)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Performs\na regular expression match of string\nagainst the regular expression and\nreturns an Array object containing the\nresults of the match, or null if the\nstring did not match The string\nToString(string) is searched for an\noccurrence of the regular expression\npattern as follows:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Let &lt;em&gt;R&lt;/em&gt; be this RexExp object.&lt;/li&gt;\n&lt;li&gt;Let &lt;em&gt;S&lt;/em&gt; be the value of ToString(string).&lt;/li&gt;\n&lt;li&gt;Let &lt;em&gt;length&lt;/em&gt; be the length of &lt;em&gt;S&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Let lastIndex be the value of the lastIndex property on &lt;em&gt;R&lt;/em&gt;.&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Let i be the value of ToInteger(lastIndex).&lt;/li&gt;\n&lt;li&gt;If the global property is false, let i = 0.&lt;/li&gt;\n&lt;li&gt;If i &amp;lt; 0 or i &amp;gt; length then set the &lt;em&gt;lastIndex&lt;/em&gt; property of &lt;em&gt;R&lt;/em&gt; to 0 and return null.&lt;/li&gt;\n&lt;li&gt;Call [[Match]], giving it the arguments S and i. If [[Match]]\nreturned failure, go to step 9;\notherwise let r be its State result\nand go to step 10.&lt;/li&gt;\n&lt;li&gt;Let i = i+1.&lt;/li&gt;\n&lt;li&gt;Go to step 7.&lt;/li&gt;\n&lt;li&gt;Let e be r&apos;s endIndex value.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;If the global property is true, set the &lt;em&gt;lastIndex&lt;/em&gt; property of &lt;em&gt;R&lt;/em&gt; to e.&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Let n be the length of r&apos;s captures array. (This is the same\nvalue as 15.10.2.1&apos;s\nNCapturingParens.)&lt;/li&gt;\n&lt;li&gt;Return a new array with the following properties:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;The index\nproperty is set to the position of the\nmatched substring within the complete\nstring S.&lt;/li&gt;\n&lt;li&gt;The input property is set\nto S.&lt;/li&gt;\n&lt;li&gt;The length property is set to\nn + 1.&lt;/li&gt;\n&lt;li&gt;The 0 property is set to the\nmatched substring (i.e. the portion of\nS between offset i inclusive and\noffset e exclusive).&lt;/li&gt;\n&lt;li&gt;For each\ninteger i such that i &amp;gt; 0 and i  n,\nset the property named ToString(i) to\nthe ith element of r&apos;s captures array.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You are using a single &lt;code&gt;RegExp&lt;/code&gt; object and executing it multiple times. On each successive execution it continues on from the last match index.&lt;/p&gt;\n\n&lt;p&gt;You need to &quot;reset&quot; the regex to start from the beginning before each execution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\nre.&lt;span class=&quot;hljs-property&quot;&gt;lastIndex&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// result is now [true, true]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having said that it may be more readable to create a new RegExp object each time (overhead is minimal as the RegExp is cached anyway):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;((&lt;span class=&quot;hljs-regexp&quot;&gt;/Foo B/gi&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(stringA));\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;((&lt;span class=&quot;hljs-regexp&quot;&gt;/Foo B/gi&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(stringB));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;RegExp.prototype.test&lt;/code&gt;&lt;/strong&gt; updates the regular expressions&apos; &lt;strong&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/strong&gt; property so that each test will start where the last one stopped. I&apos;d suggest using &lt;strong&gt;&lt;code&gt;String.prototype.match&lt;/code&gt;&lt;/strong&gt; since it doesn&apos;t update the &lt;strong&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/strong&gt; property:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;!!&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(re); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;\n!!&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(re); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: &lt;strong&gt;&lt;code&gt;!!&lt;/code&gt;&lt;/strong&gt; converts it to a boolean and then inverts the boolean so it reflects the result.&lt;/p&gt;\n\n&lt;p&gt;Alternatively, you could just reset the &lt;strong&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/strong&gt; property:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\nre.&lt;span class=&quot;hljs-property&quot;&gt;lastIndex&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Removing global &lt;code&gt;g&lt;/code&gt; flag will fix your problem.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(query, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Should be&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(query, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to set re.lastIndex = 0 because with g flag regex keep track of last match occured, so test will not go to test the same string, for that you need to do re.lastIndex = 0 &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo B&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(query, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\nre.&lt;span class=&quot;hljs-property&quot;&gt;lastIndex&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using the /g flag tells it to continue searching after a hit.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec&quot; rel=&quot;nofollow noreferrer&quot;&gt;If the match succeeds, the exec() method returns an array and updates properties of the regular expression object.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Before your first search:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myRegex.&lt;span class=&quot;hljs-property&quot;&gt;lastIndex&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//is 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After the first search&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myRegex.&lt;span class=&quot;hljs-property&quot;&gt;lastIndex&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//is 8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remove the g and it exits the search after each call to exec().&lt;/p&gt;\n    ","\n&lt;p&gt;I had the function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseDevName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-regexp&quot;&gt;/^([^-]+)-([^-]+)-([^-]+)$/g&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match = re.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(name);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; match.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rv = &lt;span class=&quot;hljs-title function_&quot;&gt;parseDevName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BR-H-01&quot;&lt;/span&gt;);\nrv = &lt;span class=&quot;hljs-title function_&quot;&gt;parseDevName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BR-H-01&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first call works.\nThe second call doesn&apos;t. The &lt;code&gt;slice&lt;/code&gt; operation complains about a null value. I assume this is because of the &lt;code&gt;re.lastIndex&lt;/code&gt;. This is strange because I would expect a new &lt;code&gt;RegExp&lt;/code&gt; to be allocated each time the function is called and not shared across multiple invocations of my function.&lt;/p&gt;\n\n&lt;p&gt;When I changed it to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^([^-]+)-([^-]+)-([^-]+)$&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I don&apos;t get the &lt;code&gt;lastIndex&lt;/code&gt; holdover effect. It works as I would expect it to.&lt;/p&gt;\n    "],"id":373,"title":"Why does a RegExp with global flag give wrong results?","content":"\n                \n&lt;p&gt;What is the problem with this regular expression when I use the global flag and the case insensitive flag? Query is a user generated input. The result should be [true, true].&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo B&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(query, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\nresult.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(re.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo Bar&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// result will be [true, false]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reg = &lt;span class=&quot;hljs-regexp&quot;&gt;/^a$/g&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i++ &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;)\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(reg.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","slug":"why-does-a-regexp-with-global-flag-give-wrong-results-1657387788550","postType":"QUESTION","createdAt":"2022-07-09T17:29:48.000Z","updatedAt":"2022-07-09T17:29:48.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Daylight saving time and time zone best practices [closed]","slug":"daylight-saving-time-and-time-zone-best-practices-closed-1657387973687"},{"title":"What and where are the stack and heap?","slug":"what-and-where-are-the-stack-and-heap-1657387415361"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"How to generate all permutations of a list","slug":"how-to-generate-all-permutations-of-a-list-1657388537371"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"How can I do a FULL OUTER JOIN in MySQL?","slug":"how-can-i-do-a-full-outer-join-in-mysql-1657388175444"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"},{"title":"Loop through an array in JavaScript","slug":"loop-through-an-array-in-javascript-1657387821551"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"How to fix \"Headers already sent\" error in PHP","slug":"how-to-fix-\"headers-already-sent\"-error-in-php-1657384315553"},{"title":"How to compare arrays in JavaScript?","slug":"how-to-compare-arrays-in-javascript-1657387352277"},{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"How can I read inputs as numbers?","slug":"how-can-i-read-inputs-as-numbers-1657384503324"},{"title":"Using fflush(stdin)","slug":"using-fflush(stdin)-1657387602771"}]},"__N_SSG":true}