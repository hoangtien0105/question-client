{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can parameterize &lt;em&gt;each&lt;/em&gt; value, so something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] { &quot;ruby&quot;, &quot;rails&quot;, &quot;scruffy&quot;, &quot;rubyonrails&quot; };\nstring cmdText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM Tags WHERE Name IN ({0})&quot;;\n\nstring[] paramNames &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tags.Select(\n    (s, i) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &quot;@tag&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i.ToString()\n).ToArray();\n\nstring inClause &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; string.Join(&quot;, &quot;, paramNames);\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (SqlCommand cmd &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(string.Format(cmdText, inClause))) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; paramNames.Length; i&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;) {\n       cmd.Parameters.AddWithValue(paramNames[i], tags[i]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which will give you:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;cmd.CommandText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM Tags WHERE Name IN (@tag0, @tag1, @tag2, @tag3)&quot;\ncmd.Parameters[&quot;@tag0&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;ruby&quot;\ncmd.Parameters[&quot;@tag1&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;rails&quot;\ncmd.Parameters[&quot;@tag2&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;scruffy&quot;\ncmd.Parameters[&quot;@tag3&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;rubyonrails&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No, this is not open to &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;noreferrer&quot;&gt;SQL injection&lt;/a&gt;. The only injected text into CommandText is not based on user input. It&apos;s solely based on the hardcoded &quot;@tag&quot; prefix, and the index of an array. The index will &lt;em&gt;always&lt;/em&gt; be an integer, is not user generated, and is safe.&lt;/p&gt;\n\n&lt;p&gt;The user inputted values are still stuffed into parameters, so there is no vulnerability there.&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Injection concerns aside, take care to note that constructing the command text to accomodate a variable number of parameters (as above) impede&apos;s SQL server&apos;s ability to take advantage of cached queries. The net result is that you almost certainly lose the value of using parameters in the first place (as opposed to merely inserting the predicate strings into the SQL itself).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not that cached query plans aren&apos;t valuable, but IMO this query isn&apos;t nearly complicated enough to see much benefit from it. While the compilation costs may approach (or even exceed) the execution costs, you&apos;re still talking milliseconds. &lt;/p&gt;\n\n&lt;p&gt;If you have enough RAM, I&apos;d expect SQL&amp;nbsp;Server would probably cache a plan for the common counts of parameters as well. I suppose you could always add five parameters, and let the unspecified tags be NULL - the query plan should be the same, but it seems pretty ugly to me and I&apos;m not sure that it&apos;d worth the micro-optimization (although, on Stack&amp;nbsp;Overflow - it may very well be worth it).&lt;/p&gt;\n\n&lt;p&gt;Also, SQL&amp;nbsp;Server 7 and later will &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa175264(SQL.80).aspx&quot; rel=&quot;noreferrer&quot;&gt;auto-parameterize queries&lt;/a&gt;, so using parameters isn&apos;t really necessary from a performance standpoint - it is, however, &lt;em&gt;critical&lt;/em&gt; from a security standpoint - especially with user inputted data like this.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a quick-and-dirty technique I have used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|ruby|rails|scruffy|rubyonrails|&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; Name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So here&apos;s the C# code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] { &quot;ruby&quot;, &quot;rails&quot;, &quot;scruffy&quot;, &quot;rubyonrails&quot; };\nconst string cmdText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;select * from tags where &apos;|&apos; + @tags + &apos;|&apos; like &apos;%|&apos; + Name + &apos;|%&apos;&quot;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (SqlCommand cmd &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(cmdText)) {\n   cmd.Parameters.AddWithValue(&quot;@tags&quot;, string.Join(&quot;|&quot;, tags);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Two caveats:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The performance is terrible. &lt;code&gt;LIKE &quot;%...%&quot;&lt;/code&gt; queries are not indexed.&lt;/li&gt;\n&lt;li&gt;Make sure you don&apos;t have any &lt;code&gt;|&lt;/code&gt;, blank, or null tags or this won&apos;t work&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There are other ways to accomplish this that some people may consider cleaner, so please keep reading.&lt;/p&gt;\n    ","\n&lt;p&gt;For SQL Server 2008, you can use a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb675163.aspx&quot; rel=&quot;noreferrer&quot;&gt;table valued parameter&lt;/a&gt;. It&apos;s a bit of work, but it is arguably cleaner than &lt;a href=&quot;https://stackoverflow.com/questions/337704/parameterizing-a-sql-in-clause#337792&quot;&gt;my other method&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;First, you have to create a type&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; TYPE dbo.TagNamesTableType &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ( Name nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;) )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, your ADO.NET code looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] tags = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;ruby&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rails&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;scruffy&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rubyonrails&quot;&lt;/span&gt; };\ncmd.CommandText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT Tags.* FROM Tags JOIN @tagNames as P ON Tags.Name = P.Name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// value must be IEnumerable&amp;lt;SqlDataRecord&amp;gt;&lt;/span&gt;\ncmd.Parameters.AddWithValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;@tagNames&quot;&lt;/span&gt;, tags.AsSqlDataRecord(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;)).SqlDbType = SqlDbType.Structured;\ncmd.Parameters[&lt;span class=&quot;hljs-string&quot;&gt;&quot;@tagNames&quot;&lt;/span&gt;].TypeName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;dbo.TagNamesTableType&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Extension method for converting IEnumerable&amp;lt;string&amp;gt; to IEnumerable&amp;lt;SqlDataRecord&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; IEnumerable&amp;lt;SqlDataRecord&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;AsSqlDataRecord&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; values, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; columnName&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (values == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || !values.Any()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Annoying, but SqlClient wants null instead of 0 rows&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstRecord = values.First();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; metadata= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlMetaData(columnName, SqlDbType.NVarChar, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//50 as per SQL Type&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values.Select(v =&amp;gt; \n    {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlDataRecord(metadata);\n       r.SetValues(v);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;\nAs Per @Doug&lt;/p&gt;\n&lt;p&gt;Please try to avoid &lt;code&gt;var metadata = SqlMetaData.InferFromValue(firstRecord, columnName);&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;It&apos;s set first value length, so if first value is 3 characters then its set max length 3 and other records will truncated if more then 3 characters.&lt;/p&gt;\n&lt;p&gt;So, please try to use: &lt;code&gt;var metadata= new SqlMetaData(columnName, SqlDbType.NVarChar, maxLen);&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Note: &lt;code&gt;-1&lt;/code&gt; for max length.&lt;/p&gt;\n    ","\n&lt;p&gt;The original question was &lt;strong&gt;&quot;How do I parameterize a query ...&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is &lt;strong&gt;not an answer&lt;/strong&gt; to that original question. There are some very good demonstrations of how to do that, in other answers.&lt;/p&gt;\n&lt;p&gt;See the &lt;a href=&quot;https://stackoverflow.com/a/337864&quot;&gt;answer from Mark Brackett&lt;/a&gt; for the preferred answer that I (and 231 others) upvoted. The approach given in his answer allows 1) for effective use of bind variables, and 2) for predicates that are sargable.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Selected answer&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I am addressing here the approach given in Joel Spolsky&apos;s answer, the answer &quot;selected&quot; as the right answer.&lt;/p&gt;\n&lt;p&gt;Joel Spolsky&apos;s approach is clever.  And it works reasonably, it&apos;s going to exhibit predictable behavior and predictable performance, given &quot;normal&quot; values, and with the normative edge cases, such as NULL and the empty string.  And it may be sufficient for a particular application.&lt;/p&gt;\n&lt;p&gt;But in terms generalizing this approach, let&apos;s also consider the more obscure corner cases, like when the &lt;code&gt;Name&lt;/code&gt; column contains a wildcard character (as recognized by the LIKE predicate.)  The wildcard character I see most commonly used is &lt;code&gt;%&lt;/code&gt; (a percent sign.). So let&apos;s deal with that here now, and later go on to other cases.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Some problems with % character&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Consider a Name value of &lt;code&gt;&apos;pe%ter&apos;&lt;/code&gt;.  (For the examples here, I use a literal string value in place of the column name.)  A row with a Name value of `&apos;pe%ter&apos; would be returned by a query of the form:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|peanut|butter|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%ter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But that same row will &lt;strong&gt;not&lt;/strong&gt; be returned if the order of the search terms is reversed:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|butter|peanut|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%ter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The behavior we observe is kind of odd.  Changing the order of the search terms in the list changes the result set.&lt;/p&gt;\n&lt;p&gt;It almost goes without saying that we might not want &lt;code&gt;pe%ter&lt;/code&gt; to match peanut butter, no matter how much he likes it.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Obscure corner case&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;(Yes, I will agree that this is an obscure case.  Probably one that is not likely to be tested.  We wouldn&apos;t expect a wildcard in a column value.  We may assume that the application prevents such a value from being stored.  But in my experience, I&apos;ve rarely seen a database constraint that specifically disallowed characters or patterns that would be considered wildcards on the right side of a &lt;code&gt;LIKE&lt;/code&gt; comparison operator.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Patching a hole&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;One approach to patching this hole is to escape the &lt;code&gt;%&lt;/code&gt; wildcard character.  (For anyone not familiar with the escape clause on the operator, here&apos;s a link to the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa933232(SQL.80).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Server documentation&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|peanut|butter|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe\\%ter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we can match the literal %.  Of course, when we have a column name, we&apos;re going to need to dynamically escape the wildcard.  We can use the &lt;code&gt;REPLACE&lt;/code&gt; function to find occurrences of the &lt;code&gt;% &lt;/code&gt;character and insert a backslash character in front of each one, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|pe%ter|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; REPLACE( &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%ter&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\%&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So that solves the problem with the % wildcard.  Almost.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Escape the escape&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;We recognize that our solution has introduced another problem.  The escape character.  We see that we&apos;re also going to need to escape any occurrences of escape character itself.  This time, we use the ! as the escape character:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|pe%t!r|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; REPLACE(REPLACE( &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%t!r&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;!&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;!!&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;!%&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;The underscore too&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Now that we&apos;re on a roll, we can add another &lt;code&gt;REPLACE&lt;/code&gt; handle the underscore wildcard.   And just for fun, this time, we&apos;ll use $ as the escape character.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|p_%t!r|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; REPLACE(REPLACE(REPLACE( &lt;span class=&quot;hljs-string&quot;&gt;&apos;p_%t!r&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$$&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$%&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$_&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I prefer this approach to escaping because it works in Oracle and MySQL as well as SQL Server.  (I usually use the \\ backslash as the escape character, since that&apos;s the character we use in regular expressions. But why be constrained by convention!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Those pesky brackets&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;SQL Server also allows for wildcard characters to be treated as literals by enclosing them in brackets &lt;code&gt;[]&lt;/code&gt;.  So we&apos;re not done fixing yet, at least for SQL Server.  Since pairs of brackets have special meaning, we&apos;ll need to escape those as well.  If we manage to properly escape the brackets, then at least we won&apos;t have to bother with the hyphen &lt;code&gt;-&lt;/code&gt; and the carat &lt;code&gt;^&lt;/code&gt; within the brackets.  And we can leave any &lt;code&gt;% &lt;/code&gt;and &lt;code&gt;_&lt;/code&gt; characters inside the brackets escaped, since we&apos;ll have basically disabled the special meaning of the brackets.&lt;/p&gt;\n&lt;p&gt;Finding matching pairs of brackets shouldn&apos;t be that hard.  It&apos;s a little more difficult than handling the occurrences of singleton % and _.  (Note that it&apos;s not sufficient to just escape all occurrences of brackets, because a singleton bracket is considered to be a literal, and doesn&apos;t need to be escaped. The logic is getting a little fuzzier than I can handle without running more test cases.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Inline expression gets messy&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;That inline expression in the SQL is getting longer and uglier.  We can probably make it work, but heaven help the poor soul that comes behind and has to decipher it.  As much of a fan I am for inline expressions, I&apos;m inclined not use one here, mainly because I don&apos;t want to have to leave a comment explaining the reason for the mess, and apologizing for it.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A function where ?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Okay, so, if we don&apos;t handle that as an inline expression in the SQL, the closest alternative we have is a user defined function.  And we know that won&apos;t speed things up any (unless we can define an index on it, like we could with Oracle.)  If we&apos;ve got to create a function, we might better do that in the code that calls the SQL statement.&lt;/p&gt;\n&lt;p&gt;And that function may have some differences in behavior, dependent on the DBMS and version.  (A shout out to all you Java developers so keen on being able to use any database engine interchangeably.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Domain knowledge&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;We may have specialized knowledge of the domain for the column, (that is, the set of allowable values enforced for the column.  We may know &lt;em&gt;a priori&lt;/em&gt; that the values stored in the column will never contain a percent sign, an underscore, or bracket pairs.  In that case, we just include a quick comment that those cases are covered.&lt;/p&gt;\n&lt;p&gt;The values stored in the column may allow for % or _ characters, but a constraint may require those values to be escaped, perhaps using a defined character, such that the values are LIKE comparison &quot;safe&quot;.  Again, a quick comment about the allowed set of values, and in particular which character is used as an escape character, and go with Joel Spolsky&apos;s approach.&lt;/p&gt;\n&lt;p&gt;But, absent the specialized knowledge and a guarantee, it&apos;s important for us to at least consider handling those obscure corner cases, and consider whether the behavior is reasonable and &quot;per the specification&quot;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Other issues recapitulated&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I believe others have already sufficiently pointed out some of the other commonly considered areas of concern:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL injection&lt;/a&gt; (taking what would appear to be user supplied information, and including that in the SQL text rather than supplying them through bind variables.  Using bind variables isn&apos;t required, it&apos;s just one convenient approach to thwart with SQL injection.  There are other ways to deal with it:&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;optimizer plan using index scan rather than index seeks, possible need for an expression or function for escaping wildcards (possible index on expression or function)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;using literal values in place of bind variables impacts scalability&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I like Joel Spolsky&apos;s approach.  It&apos;s clever.  And it works.&lt;/p&gt;\n&lt;p&gt;But as soon as I saw it, I immediately saw a potential problem with it, and it&apos;s not my nature to let it slide.  I don&apos;t mean to be critical of the efforts of others.  I know many developers take their work very personally, because they invest so much into it and they care so much about it.  So please understand, this is not a personal attack.  What I&apos;m identifying here is the type of problem that crops up in production rather than testing.&lt;/p&gt;\n    ","\n&lt;p&gt;You can pass the parameter as a string&lt;/p&gt;\n\n&lt;p&gt;So you have the string &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@tags&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@tags&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ruby&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;rails&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;scruffy&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;rubyonrails\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fnSplit(&lt;span class=&quot;hljs-variable&quot;&gt;@tags&lt;/span&gt;, &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then all you have to do is pass the string as 1 parameter.&lt;/p&gt;\n\n&lt;p&gt;Here is the split function I use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; [dbo].[fnSplit](\n    &lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;-- List of delimited items&lt;/span&gt;\n  , &lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- delimiter that separates items&lt;/span&gt;\n) &lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; (item &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;)\nWHILE CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;RTRIM(LTRIM(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;))),\n  &lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;RTRIM(LTRIM(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;),LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;))))\n\n IF LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\nIF LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- Put the last item in&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I heard Jeff/Joel talk about this on the podcast today (&lt;em&gt;&lt;a href=&quot;http://itc.conversationsnetwork.org/audio/download/ITC.SO-Episode34-2008.12.16.mp3&quot; rel=&quot;noreferrer&quot;&gt;episode 34&lt;/a&gt;&lt;/em&gt;, 2008-12-16 (MP3, 31&amp;nbsp;MB), 1 h 03 min 38 secs - 1 h 06 min 45 secs), and I thought I recalled Stack&amp;nbsp;Overflow was using &lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL&quot; rel=&quot;noreferrer&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;, but maybe it was ditched. Here&apos;s the same thing in LINQ&amp;nbsp;to&amp;nbsp;SQL.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;var inValues &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; [] { &quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot; };\n\nvar results &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Tags\n              &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; inValues.Contains(tag.Name)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; tag;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s it. And, yes, LINQ already looks backwards enough, but the &lt;code&gt;Contains&lt;/code&gt; clause seems extra backwards to me. When I had to do a similar query for a project at work, I naturally tried to do this the wrong way by doing a join between the local array and the SQL Server table, figuring the LINQ&amp;nbsp;to&amp;nbsp;SQL translator would be smart enough to handle the translation somehow. It didn&apos;t, but it did provide an error message that was descriptive and pointed me towards using &lt;em&gt;Contains&lt;/em&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Anyway, if you run this in the highly recommended &lt;a href=&quot;http://www.linqpad.net/&quot; rel=&quot;noreferrer&quot;&gt;LINQPad&lt;/a&gt;, and run this query, you can view the actual SQL that the SQL LINQ provider generated. It&apos;ll show you each of the values getting parameterized into an &lt;code&gt;IN&lt;/code&gt; clause.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are calling from .NET, you could use &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot; rel=&quot;noreferrer&quot;&gt;Dapper dot net&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] names &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] {&quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot;};\nvar tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dataContext.Query&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;Tags&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;(@&quot;\nselect * from Tags \nwhere Name in @names\norder by Count desc&quot;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; {names});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here Dapper does the thinking, so you don&apos;t have to. Something similar is possible with &lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL&quot; rel=&quot;noreferrer&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;, of course:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] names &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] {&quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot;};\nvar tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dataContext.Tags\n           &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; names.Contains(tag.Name)\n           orderby tag.Count descending\n           &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; tag;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In &lt;code&gt;SQL Server 2016+&lt;/code&gt; you could use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt684588.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;STRING_SPLIT&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt; NVARCHAR(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; STRING_SPLIT(&lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [Count] &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt; NVARCHAR(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags t\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; STRING_SPLIT(&lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t.Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [Count] &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/481811&quot; rel=&quot;noreferrer&quot;&gt;LiveDemo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/a/337817/5070879&quot;&gt;accepted answer&lt;/a&gt; will of course work and it is one of the way to go, but it is anti-pattern.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;E. Find rows by list of values&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;This is replacement for common anti-pattern such as creating a dynamic SQL string in application layer or Transact-SQL, or by using LIKE operator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ProductId, Name, Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Product\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,1,2,3,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(ProductId &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,%&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;Addendum&lt;/em&gt;:&lt;/p&gt;\n\n&lt;p&gt;To improve the &lt;code&gt;STRING_SPLIT&lt;/code&gt; table function row estimation, it is a good idea to materialize splitted values as temporary table/table variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt; NVARCHAR(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails,sql&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; #t(val NVARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; #t(val) &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; s.[&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; STRING_SPLIT(&lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) s;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags tg\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; #t t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t.val &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tg.TagName\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [Count] &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/1196908?opt.withExecutionPlan=true#executionPlan&quot; rel=&quot;noreferrer&quot;&gt;SEDE - Live Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Related: &lt;a href=&quot;https://www.brentozar.com/archive/2020/02/how-to-pass-a-list-of-values-into-a-stored-procedure/&quot; rel=&quot;noreferrer&quot;&gt;How to Pass a List of Values Into a Stored Procedure&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;hr&gt;\n&lt;sup&gt;Original question has requirement &lt;code&gt;SQL Server 2008&lt;/code&gt;. Because this question is often used as duplicate, I&apos;ve added this answer as reference. &lt;/sup&gt;&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is possibly a half nasty way of doing it, I used it once, was rather effective.&lt;/p&gt;\n\n&lt;p&gt;Depending on your goals it might be of use. &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Create a &lt;em&gt;temp table&lt;/em&gt; with one column. &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;INSERT&lt;/code&gt; each look-up value into that column. &lt;/li&gt;\n&lt;li&gt;Instead of using an &lt;code&gt;IN&lt;/code&gt;, you can then just use your standard &lt;code&gt;JOIN&lt;/code&gt; rules. ( Flexibility++ )&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This has a bit of added flexibility in what you can do, but it&apos;s more suited for situations where you have a large table to query, with good indexing, and you want to use the parametrized list more than once. Saves having to execute it twice and have all the sanitation done manually.&lt;/p&gt;\n\n&lt;p&gt;I never got around to profiling exactly how &lt;em&gt;fast&lt;/em&gt; it was, but in my situation it was needed. &lt;/p&gt;\n    ","\n&lt;p&gt;We have function that creates a table variable that you can join to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; [dbo].[Fn_sqllist_to_table](&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;),\n                                           &lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt;(\n  Position &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;    &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n      WHILE Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt;\n                        (Position,&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;     (&lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;, Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n            IF Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Len(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt;\n                          (Position,&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;     (&lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;, Len(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n      IF Len(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt;\n                    (Position,&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;     (&lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;)\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;@Name&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;    \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; fn_sqllist_to_table(&lt;span class=&quot;hljs-variable&quot;&gt;@Name&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)))\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is gross, but if you are guaranteed to have at least one, you could do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ...\n       ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;@tag1&lt;/span&gt;, ISNULL( &lt;span class=&quot;hljs-variable&quot;&gt;@tag2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@tag1&lt;/span&gt; ), ISNULL( &lt;span class=&quot;hljs-variable&quot;&gt;@tag3&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@tag1&lt;/span&gt; ), etc. )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having IN( &apos;tag1&apos;, &apos;tag2&apos;, &apos;tag1&apos;, &apos;tag1&apos;, &apos;tag1&apos; ) will be easily optimized away by SQL Server. Plus, you get direct index seeks&lt;/p&gt;\n    ","\n&lt;p&gt;I would pass a table type parameter (since it&apos;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2008&quot; rel=&quot;noreferrer&quot;&gt;SQL Server 2008&lt;/a&gt;), and do a &lt;code&gt;where exists&lt;/code&gt;, or inner join. You may also use XML, using &lt;code&gt;sp_xml_preparedocument&lt;/code&gt;, and then even index that temporary table.&lt;/p&gt;\n    ","\n&lt;p&gt;In my opinion, the best source to solve this problem, is what has been posted on this site:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://weblogs.sqlteam.com/dinakar/archive/2007/03/28/60150.aspx&quot; rel=&quot;noreferrer&quot;&gt;Syscomments. Dinakar Nethi&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; dbo.fnParseArray (&lt;span class=&quot;hljs-variable&quot;&gt;@Array&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;),&lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@T&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; (col1 &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;--DECLARE @T Table (col1 varchar(50))  &lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- @Array is the array we wish to parse&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- @Separator is the separator charactor such as a comma&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- This is used to locate each separator character&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;-- this holds each array value as it is returned&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- For my loop to work I need an extra separator at the end. I always look to the&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- left of the separator character for each array value&lt;/span&gt;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;\n\n &lt;span class=&quot;hljs-comment&quot;&gt;-- Loop through the string searching for separtor characters&lt;/span&gt;\n WHILE PATINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; \n &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- patindex matches the a pattern against a string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; PATINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- This is where you process the values passed.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@T&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value)    \n    &lt;span class=&quot;hljs-comment&quot;&gt;-- Replace this select statement with your processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- @array_value holds the value of this element of the array&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- This replaces what we just processed with and empty string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; STUFF(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; dbo.fnParseArray(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a,b,c,d,e,f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREDITS FOR: Dinakar Nethi&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The proper way IMHO is to store the list in a character string (limited in length by what the DBMS support); the only trick is that (in order to simplify processing) I have a separator (a comma in my example) at the beginning and at the end of the string. The idea is to &quot;normalize on the fly&quot;, turning the list into a one-column table that contains one row per value. This allows you to turn&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;in (ct1,ct2, ct3 ... ctn)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;into an&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;in (select ...)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;or (the solution I&apos;d probably prefer) a regular join, if you just add a &quot;distinct&quot; to avoid problems with duplicate values in the list.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately, the techniques to slice a string are fairly product-specific.\nHere is the SQL Server version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; qry(n, names) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;\n       (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; len(list.names) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; len(replace(list.names, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(list.names, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, len(list.names)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; names\n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,Doc,Grumpy,Happy,Sneezy,Bashful,Sleepy,Dopey,&apos;&lt;/span&gt; names) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; list\n        &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; (n &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(names, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; charindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, names), len(names)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; names\n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; qry\n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; n &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; n, &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(names, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, charindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, names) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) dwarf\n &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; qry;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The Oracle version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; n, substr(name, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, instr(name, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) dwarf\n &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; n,\n             substr(val, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; instr(val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, n)) name\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; rownum &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n,\n                   list.val\n            &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;  (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,Doc,Grumpy,Happy,Sneezy,Bashful,Sleepy,Dopey,&apos;&lt;/span&gt; val\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dual) list\n            &lt;span class=&quot;hljs-keyword&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; level &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; length(list.val) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;\n                               length(replace(list.val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the MySQL version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pivot.n,\n      substring_index(substring_index(list.val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; pivot.n), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n) pivot,    (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,Doc,Grumpy,Happy,Sneezy,Bashful,Sleepy,Dopey,&apos;&lt;/span&gt; val) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; pivot.n &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;  length(list.val) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;\n                   length(replace(list.val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Of course, &quot;pivot&quot; must return as many rows as the maximum number of\nitems we can find in the list)&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;ve got &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2008&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Server 2008&lt;/a&gt; or later I&apos;d use a &lt;a href=&quot;https://stackoverflow.com/questions/5595353/how-to-pass-table-value-parameters-to-stored-procedure-from-net-code&quot;&gt;Table Valued Parameter&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re unlucky enough to be stuck on &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2005&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Server 2005&lt;/a&gt; you could add a &lt;a href=&quot;http://en.wikipedia.org/wiki/Common_Language_Runtime&quot; rel=&quot;nofollow noreferrer&quot;&gt;CLR&lt;/a&gt; function like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;[SqlFunction(\n    DataAccessKind.None,\n    IsDeterministic &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    SystemDataAccess &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SystemDataAccessKind.None,\n    IsPrecise &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    FillRowMethodName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SplitFillRow&quot;,\n    TableDefinintion &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;s NVARCHAR(MAX)&quot;]\npublic &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; IEnumerable Split(SqlChars seperator, SqlString s)\n{\n    if (s.IsNull)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.ToString().Split(seperator.Buffer);\n}\n\npublic &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; void SplitFillRow(object &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; SqlString s)\n{\n    s &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlString(row.ToString());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which you could use like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@desiredTags&lt;/span&gt; nvarchar(MAX);\n&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@desiredTags&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [dbo].[Split] (&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@desiredTags&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think this is a case when a static query is just not the way to go. Dynamically build the list for your in clause, escape your single quotes, and dynamically build SQL. In this case you probably won&apos;t see much of a difference with any method due to the small list, but the most efficient method really is to send the SQL exactly as it is written in your post. I think it is a good habit to write it the most efficient way, rather than to do what makes the prettiest code, or consider it bad practice to dynamically build SQL.&lt;/p&gt;\n\n&lt;p&gt;I have seen the split functions take longer to execute than the query themselves in many cases where the parameters get large. A stored procedure with table valued parameters in SQL 2008 is the only other option I would consider, although this will probably be slower in your case. TVP will probably only be faster for large lists if you are searching on the primary key of the TVP, because SQL will build a temporary table for the list anyway (if the list is large). You won&apos;t know for sure unless you test it.&lt;/p&gt;\n\n&lt;p&gt;I have also seen stored procedures that had 500 parameters with default values of null, and having WHERE Column1 IN (@Param1, @Param2, @Param3, ..., @Param500). This caused SQL to build a temp table, do a sort/distinct, and then do a table scan instead of an index seek. That is essentially what you would be doing by parameterizing that query, although on a small enough scale that it won&apos;t make a noticeable difference. I highly recommend against having NULL in your IN lists, as if that gets changed to a NOT IN it will not act as intended. You could dynamically build the parameter list, but the only obvious thing that you would gain is that the objects would escape the single quotes for you. That approach is also slightly slower on the application end since the objects have to parse the query to find the parameters. It may or may not be faster on SQL, as parameterized queries call sp_prepare, sp_execute for as many times you execute the query, followed by sp_unprepare. &lt;/p&gt;\n\n&lt;p&gt;The reuse of execution plans for stored procedures or parameterized queries may give you a performance gain, but it will lock you in to one execution plan determined by the first query that is executed. That may be less than ideal for subsequent queries in many cases. In your case, reuse of execution plans will probably be a plus, but it might not make any difference at all as the example is a really simple query.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Cliffs notes:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For your case anything you do, be it parameterization with a fixed number of items in the list (null if not used), dynamically building the query with or without parameters, or using stored procedures with table valued parameters will not make much of a difference. However, my general recommendations are as follows:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Your case/simple queries with few parameters:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Dynamic SQL, maybe with parameters if testing shows better performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Queries with reusable execution plans, called multiple times by simply changing the parameters or if the query is complicated:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;SQL with dynamic parameters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Queries with large lists:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Stored procedure with table valued parameters. If the list can vary by a large amount use WITH RECOMPILE on the stored procedure, or simply use dynamic SQL without parameters to generate a new execution plan for each query.&lt;/p&gt;\n    ","\n&lt;p&gt;May be we can use XML here:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; xml\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;items&amp;gt;\n    &amp;lt;item myvalue=&quot;29790&quot; /&amp;gt;\n    &amp;lt;item myvalue=&quot;31250&quot; /&amp;gt;\n    &amp;lt;/items&amp;gt;\n    &apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; CTE &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n         &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n            x.item.value(&lt;span class=&quot;hljs-string&quot;&gt;&apos;@myvalue[1]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;decimal&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; myvalue\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt;.nodes(&lt;span class=&quot;hljs-string&quot;&gt;&apos;//items/item&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; x(item) )\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; tableColumnName &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; myvalue &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; cte)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we have strings stored inside the IN clause with the comma(,) delimited, we can use the charindex function to get the values. If you use .NET, then you can map with SqlParameters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;DDL Script:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; Tags\n    ([ID] &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, [Name] &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;))\n;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Tags\n    ([ID], [Name])\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;scruffy&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rubyonrails&apos;&lt;/span&gt;)\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;T-SQL:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt; nvarchar(max)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; CharIndex(Name,&lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use the above statement in your .NET code and map the parameter with SqlParameter.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://sqlfiddle.com/#!3/31994/3&quot; rel=&quot;noreferrer&quot;&gt;Fiddler demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;\nCreate the table called SelectedTags using the following script.&lt;/p&gt;\n\n&lt;p&gt;DDL Script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; SelectedTags\n(Name nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; SelectedTags &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;),(&lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;T-SQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; nvarchar(max)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;coalesce&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;st.Name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; SelectedTags st\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; CharIndex(Name,&lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;d approach this by default with passing a table valued function (that returns a table from a string) to the IN condition.&lt;/p&gt;\n\n&lt;p&gt;Here is the code for the UDF &lt;em&gt;(I got it from Stack Overflow somewhere, i can&apos;t find the source right now)&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; [dbo].[Split] (&lt;span class=&quot;hljs-variable&quot;&gt;@sep&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; Pieces(pn, &lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;, stop) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sep&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; pn &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, stop &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sep&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt;, stop &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Pieces\n      &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; stop &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n      &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; stop &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; stop&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; s\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Pieces\n  )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once you got this your code would be as simple as this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dbo.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby;rails;scruffy;rubyonrails&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unless you have a ridiculously long string, this should work well with the table index.&lt;/p&gt;\n\n&lt;p&gt;If needed you can insert it into a temp table, index it, then run a join...&lt;/p&gt;\n    ","\n&lt;p&gt;For a variable number of arguments like this the only way I&apos;m aware of is to either generate the SQL explicitly or do something that involves populating a temporary table with the items you want and joining against the temp table.&lt;/p&gt;\n    ","\n&lt;p&gt;Another possible solution is instead of passing a variable number of arguments to a stored procedure, pass a single string containing the names you&apos;re after, but make them unique by surrounding them with &apos;&amp;lt;&amp;gt;&apos;. Then use PATINDEX to find the names:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; PATINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&amp;lt;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; Name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;gt;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;jo&amp;gt;,&amp;lt;john&amp;gt;,&amp;lt;scruffy&amp;gt;,&amp;lt;rubyonrails&amp;gt;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the following stored procedure. It uses a custom split function, which can be found &lt;a href=&quot;http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/01/t-sql-split-function.aspx&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; stored &lt;span class=&quot;hljs-keyword&quot;&gt;procedure&lt;/span&gt; GetSearchMachingTagNames \n    &lt;span class=&quot;hljs-variable&quot;&gt;@PipeDelimitedTagNames&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(max), \n    &lt;span class=&quot;hljs-variable&quot;&gt;@delimiter&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) \n    &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n         &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; [dbo].[Split](&lt;span class=&quot;hljs-variable&quot;&gt;@PipeDelimitedTagNames&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@delimiter&lt;/span&gt;) \n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is another alternative. Just pass a comma-delimited list as a string parameter to the stored procedure and:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PROCEDURE&lt;/span&gt; [dbo].[sp_myproc]\n    &lt;span class=&quot;hljs-variable&quot;&gt;@UnitList&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;1,2,3&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; ph.UnitID &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; CsvToInt(&lt;span class=&quot;hljs-variable&quot;&gt;@UnitList&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; [dbo].[CsvToInt] ( &lt;span class=&quot;hljs-variable&quot;&gt;@Array&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(MAX))\n&lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@IntTable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n(IntValue &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(MAX)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n\n    while patindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%,%&apos;&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; patindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%,%&apos;&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@IntTable&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Values&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;Cast&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stuff(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In &lt;a href=&quot;http://en.wikipedia.org/wiki/ColdFusion&quot; rel=&quot;noreferrer&quot;&gt;ColdFusion&lt;/a&gt; we just do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;cfset myvalues &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;ruby|rails|scruffy|rubyonrails&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;cfquery name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;q&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sometable &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;cfqueryparam &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;#myvalues#&quot; list&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;true&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;cfquery&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a technique that recreates a local table to be used in a query string. Doing it this way eliminates all parsing problems. &lt;/p&gt;\n\n&lt;p&gt;The string can be built in any language. In this example I used SQL since that was the original problem I was trying to solve. I needed a clean way to pass in table data on the fly in a string to be executed later.&lt;/p&gt;\n\n&lt;p&gt;Using a user defined type is optional. Creating the type is only created once and can be done ahead of time. Otherwise just add a full table type to the declaration in the string. &lt;/p&gt;\n\n&lt;p&gt;The general pattern is easy to extend and can be used for passing more complex tables.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a user defined type for the list.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; TYPE [dbo].[StringList] &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt;(\n    [StringValue] [nvarchar](max) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a sample list using the list table type.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; [dbo].[StringList]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Build a string in which we recreate the list so we can pass it to exec&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-- This can be done in any language since we&apos;re just building a string.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; nvarchar(max);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;DECLARE @list [dbo].[StringList]; INSERT INTO @list VALUES &apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Add all the values we want to the string. This would be a loop in C++.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; StringValue &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;),&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Remove the trailing comma so the query is valid sql.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, len(&lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Add a select to test the string.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;; SELECT * FROM @list;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Execute the string and see we&apos;ve pass the table correctly.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXEC&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In SQL Server 2016+ another possibility is to use the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn921879.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;OPENJSON&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;\n\n&lt;p&gt;This approach is blogged about in &lt;a href=&quot;http://blogs.msdn.com/b/sqlserverstorageengine/archive/2015/11/03/openjson-one-of-best-ways-to-select-rows-by-list-of-id.aspx&quot; rel=&quot;noreferrer&quot;&gt;OPENJSON - one of best ways to select rows by list of ids&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A full worked example below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; dbo.Tags\n  (\n     Name  &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;),\n     Count &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;\n  )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; dbo.Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;      (&lt;span class=&quot;hljs-string&quot;&gt;&apos;VB&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;982&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1306&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1478&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;scruffy&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;C#&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1784&lt;/span&gt;)\n\nGO\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; PROC dbo.SomeProc\n&lt;span class=&quot;hljs-variable&quot;&gt;@Tags&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(MAX)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; T.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   dbo.Tags T\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  T.Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; J.Value &lt;span class=&quot;hljs-keyword&quot;&gt;COLLATE&lt;/span&gt; Latin1_General_CI_AS\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   OPENJSON(CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@Tags&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;)) J)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; T.Count &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n\nGO\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXEC&lt;/span&gt; dbo.SomeProc &lt;span class=&quot;hljs-variable&quot;&gt;@Tags&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; dbo.Tags \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have an answer that doesn&apos;t require a UDF, XML\nBecause IN accepts a select statement\ne.g. SELECT * FROM Test where Data IN (SELECT Value FROM TABLE)&lt;/p&gt;\n\n&lt;p&gt;You really only need a way to convert the string into a table.&lt;/p&gt;\n\n&lt;p&gt;This can be done with a recursive CTE, or a query with a number table (or Master..spt_value)&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s the CTE version.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n\n;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; RecursiveCSV(x,y) \n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; \n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n        x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)),\n        y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n        x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)),\n        y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,LEN(y))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n        RecursiveCSV \n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,LEN(y)) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; \n        &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n    Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; \n    Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; RecursiveCSV)\nOPTION (MAXRECURSION &lt;span class=&quot;hljs-number&quot;&gt;32767&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I use a more concise version &lt;a href=&quot;https://stackoverflow.com/a/337792/16587&quot;&gt;of the top voted answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;SqlParameter&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; parameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tags.Select((s, i) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(&quot;@tag&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i.ToString(), SqlDbType.NVarChar(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)) { &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s}).ToList();\n\nvar whereCondition &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; string.Format(&quot;tags in ({0})&quot;, String.Join(&quot;,&quot;,parameters.Select(s &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; s.ParameterName)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It does loop through the tag parameters twice; but that doesn&apos;t matter most of the time (it won&apos;t be your bottleneck; if it is, unroll the loop).&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re really interested in performance and don&apos;t want to iterate through the loop twice, here&apos;s a less beautiful version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;var parameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;SqlParameter&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\nvar paramNames &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (var i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; tags.Length; i&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;)  \n{\n    var paramName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;@tag&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i;\n\n    &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Include size &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; explicitly (&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; AddWithValue)\n    &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Because &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; Server may use an implicit conversion if it doesn&lt;span class=&quot;hljs-string&quot;&gt;&apos;t know\n    //the actual size.\n    var p = new SqlParameter(paramName, SqlDbType.NVarChar(50) { Value = tags[i]; } \n    paramNames.Add(paramName);\n    parameters.Add(p);\n}\n\nvar inClause = string.Join(&quot;,&quot;, paramNames);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is another answer to this problem. &lt;/p&gt;\n\n&lt;p&gt;(new version posted on 6/4/13).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    private &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; DataSet GetDataSet(SqlConnectionStringBuilder scsb, string strSql, params object[] pars)\n    {\n        var ds &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DataSet();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (var sqlConn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlConnection(scsb.ConnectionString))\n        {\n            var sqlParameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;SqlParameter&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\n            var replacementStrings &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Dictionary&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;string, string&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\n            if (pars &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; pars.Length; i&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;)\n                {\n                    if (pars[i] &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; IEnumerable&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;)\n                    {\n                        List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; enumerable &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (pars[i] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IEnumerable&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;).ToList();\n                        replacementStrings.Add(&quot;@&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i, String.Join(&quot;,&quot;, enumerable.Select((&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, pos) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; String.Format(&quot;@_{0}_{1}&quot;, i, pos))));\n                        sqlParameters.AddRange(enumerable.Select((&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, pos) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(String.Format(&quot;@_{0}_{1}&quot;, i, pos), &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; ?? DBNull.Value)).ToArray());\n                    }\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                    {\n                        sqlParameters.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(String.Format(&quot;@{0}&quot;, i), pars[i] ?? DBNull.Value));\n                    }\n                }\n            }\n            strSql &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; replacementStrings.Aggregate(strSql, (&lt;span class=&quot;hljs-keyword&quot;&gt;current&lt;/span&gt;, replacementString) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; current.Replace(replacementString.Key, replacementString.Value));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (var sqlCommand &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(strSql, sqlConn))\n            {\n                if (pars &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)\n                {\n                    sqlCommand.Parameters.AddRange(sqlParameters.ToArray());\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Fail&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;safe, just &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; intends &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; pass a single &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;parameter&lt;/span&gt;\n                    sqlCommand.Parameters.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(&quot;@0&quot;, DBNull.Value));\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (var sqlDataAdapter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlDataAdapter(sqlCommand))\n                {\n                    sqlDataAdapter.Fill(ds);\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ds;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cheers.&lt;/p&gt;\n    ","\n&lt;p&gt;The only winning move is not to play.&lt;/p&gt;\n\n&lt;p&gt;No infinite variability for you.  Only finite variability.&lt;/p&gt;\n\n&lt;p&gt;In the SQL you have a clause like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ( {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b.CompanyId &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ({&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}) )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the C# code you do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; origCount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; idList.Count;\n  if (origCount &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n    throw &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&quot;You may only specify up to five originators to filter on.&quot;);\n  }\n  while (idList.Count &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) { idList.Add(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;); }  &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; an impossible &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ExecuteQuery&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;PublishDate&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;(getValuesInListSQL, \n               origCount,   \n               idList[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So basically if the count is 0 then there is no filter and everything goes through.  If the count is higher than 0 the then the value must be in the list, but the list has been padded out to five with impossible values (so that the SQL still makes sense)&lt;/p&gt;\n\n&lt;p&gt;Sometimes the lame solution is the only one that actually works.&lt;/p&gt;\n    "],"id":295,"title":"Parameterize an SQL IN clause","content":"\n                \n&lt;p&gt;How do I parameterize a query containing an &lt;code&gt;IN&lt;/code&gt; clause with a variable number of arguments, like this one?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;scruffy&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;rubyonrails&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this query, the number of arguments could be anywhere from 1 to 5.&lt;/p&gt;\n\n&lt;p&gt;I would prefer not to use a dedicated stored procedure for this (or XML), but if there is some elegant way specific to &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2008&quot; rel=&quot;noreferrer&quot;&gt;SQL Server 2008&lt;/a&gt;, I am open to that.&lt;/p&gt;\n    ","slug":"parameterize-an-sql-in-clause-1657387536064","postType":"QUESTION","createdAt":"2022-07-09T17:25:36.000Z","updatedAt":"2022-07-09T17:25:36.000Z","tags":[{"id":1782,"name":"sql-server-2008","slug":"sql-server-2008","createdAt":"2022-07-09T17:25:36.000Z","updatedAt":"2022-07-09T17:25:36.000Z","Questions_Tags":{"questionId":295,"tagId":1782}},{"id":1783,"name":"parameters","slug":"parameters","createdAt":"2022-07-09T17:25:36.000Z","updatedAt":"2022-07-09T17:25:36.000Z","Questions_Tags":{"questionId":295,"tagId":1783}}],"relatedQuestions":[{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064","tags":[{"name":"sql-server-2008","Questions_Tags":{"questionId":295,"tagId":1782}},{"name":"parameters","Questions_Tags":{"questionId":295,"tagId":1783}}]}]},"randomQuestions":[{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"How do I vertically center text with CSS? [duplicate]","slug":"how-do-i-vertically-center-text-with-css-duplicate-1657387645821"},{"title":"Change the maximum upload file size","slug":"change-the-maximum-upload-file-size-1657388495156"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"ggplot with 2 y axes on each side and different scales","slug":"ggplot-with-2-y-axes-on-each-side-and-different-scales-1657388519163"},{"title":"Copy array by value","slug":"copy-array-by-value-1657387649531"},{"title":"How to generate all permutations of a list","slug":"how-to-generate-all-permutations-of-a-list-1657388537371"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"Javascript infamous Loop issue? [duplicate]","slug":"javascript-infamous-loop-issue-duplicate-1657387498530"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"Reference: mod_rewrite, URL rewriting and \"pretty links\" explained","slug":"reference:-mod_rewrite-url-rewriting-and-\"pretty-links\"-explained-1657384905504"},{"title":"What is the `self` parameter in class methods?","slug":"what-is-the-self-parameter-in-class-methods-1657387518448"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"Split array into chunks","slug":"split-array-into-chunks-1657387896420"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"srand() — why call it only once?","slug":"srand()-why-call-it-only-once-1657387794760"}]},"__N_SSG":true}