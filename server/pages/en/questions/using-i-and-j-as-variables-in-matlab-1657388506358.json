{"pageProps":{"data":{"answer":["\n&lt;p&gt;Because &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are both functions denoting the &lt;a href=&quot;http://en.wikipedia.org/wiki/Imaginary_unit&quot;&gt;&lt;em&gt;imaginary unit&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.mathworks.co.uk/help/matlab/ref/i.html&quot;&gt;http://www.mathworks.co.uk/help/matlab/ref/i.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.mathworks.co.uk/help/matlab/ref/j.html&quot;&gt;http://www.mathworks.co.uk/help/matlab/ref/j.html&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So a variable called &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;j&lt;/code&gt; will override them, potentially silently breaking code that does complex maths.&lt;/p&gt;\n\n&lt;p&gt;Possible solutions include using &lt;code&gt;ii&lt;/code&gt; and &lt;code&gt;jj&lt;/code&gt; as loop variables instead, or using &lt;code&gt;1i&lt;/code&gt; whenever &lt;code&gt;i&lt;/code&gt; is required to represent the imaginary unit.&lt;/p&gt;\n    ","\n&lt;p&gt;It is good practice to avoid &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; variables to prevent confusion about them being variables or the imaginary unit.&lt;/p&gt;\n&lt;p&gt;Personally, however, I use &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; as variables quite often as the index of short loops. To avoid problems in my own code, I follow another good practice regarding &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;: &lt;em&gt;don&apos;t&lt;/em&gt; use them to denote imaginary numbers. In fact, &lt;a href=&quot;http://www.mathworks.com/help/matlab/ref/i.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;MATLAB&apos;s own documentation states&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;For speed and improved robustness, you can replace complex &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; by &lt;code&gt;1i&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So rather than avoiding two very commonly used variable names because of a potential conflict, I&apos;m explicit about imaginary numbers. It also makes my code more clear. Anytime I see &lt;code&gt;1i&lt;/code&gt;, I know that it represents &lt;code&gt;sqrt(-1)&lt;/code&gt; because it could not possibly be a variable.&lt;/p&gt;\n    ","\n&lt;p&gt;In old versions of MATLAB, there used to be a good reason to avoid the use of &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; as variable names - early versions of the MATLAB JIT were not clever enough to tell whether you were using them as variables or as imaginary units, and would therefore turn off many otherwise possible optimizations.&lt;/p&gt;\n\n&lt;p&gt;Your code would therefore get slower just by the very presence of &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; as variables, and would speed up if you changed them to something else. That&apos;s why, if you read through much MathWorks code, you&apos;ll see &lt;code&gt;ii&lt;/code&gt; and &lt;code&gt;jj&lt;/code&gt; used fairly widely as loop indices. For a while, MathWorks might even have unofficially advised people to do that themselves (although they always officially advise people to program for elegance/maintainability rather than to whatever the current JIT does, as it&apos;s a moving target each version).&lt;/p&gt;\n\n&lt;p&gt;But that&apos;s rather a long time ago, and nowadays it&apos;s a bit of a &quot;zombie&quot; issue that is really much less important than many people still think, but refuses to die.&lt;/p&gt;\n\n&lt;p&gt;In any recent version, it&apos;s really a personal preference whether to use &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; as variable names or not. If you do a lot of work with complex numbers, you may want to avoid &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; as variables, to avoid any small potential risk of confusion (although you may also/instead want to only use &lt;code&gt;1i&lt;/code&gt; or &lt;code&gt;1j&lt;/code&gt; for even less confusion, and a little better performance).&lt;/p&gt;\n\n&lt;p&gt;On the other hand, in my typical work I never deal with complex numbers, and I find my code more readable if I feel free to use &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; as loop indices.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I see a lot of answers here that say &lt;em&gt;It is not recommended...&lt;/em&gt; without saying who&apos;s doing that recommending. Here&apos;s the extent of MathWorks&apos; actual recommendations, from the current release documentation for &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Since i is a function, it can be overridden and used as a variable. However, it is best to avoid using i and j for variable names if you intend to use them in complex arithmetic. [...] For speed and improved robustness, you can replace complex i and j by 1i.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;As described in other answers, the use of &lt;code&gt;i&lt;/code&gt; in general code is not recommended for two reasons:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you want to use the imaginary number, it can be confused with or overwritten by an index&lt;/li&gt;\n&lt;li&gt;If you use it as an index it can overwrite or be confused with the imaginary number&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;As suggested: &lt;code&gt;1i&lt;/code&gt; and &lt;code&gt;ii&lt;/code&gt; are recommended. However, though these are both fine deviations from &lt;code&gt;i&lt;/code&gt;, it is not very nice to use both of these alternatives together.&lt;/p&gt;\n&lt;p&gt;Here is an example why (personally) I don&apos;t like it:&lt;/p&gt;\n&lt;pre class=&quot;lang-matlab s-code-block&quot;&gt;&lt;code class=&quot;hljs language-matlab&quot;&gt;val2 = val + &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;% 1&lt;/span&gt;\nval2 = val + ii &lt;span class=&quot;hljs-comment&quot;&gt;% 2&lt;/span&gt;\nval2 = val + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;% 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One will not easily be misread for two or three, but two and three resemble each other.&lt;/p&gt;\n&lt;p&gt;Therefore my personal recommendation would be: In case you sometimes work with complex code, always use &lt;code&gt;1i&lt;/code&gt; combined with a different loop variable.&lt;/p&gt;\n&lt;p&gt;Examples of single letter indices that for if you don&apos;t use many loop variables and letters suffice: &lt;code&gt;t&lt;/code&gt;,&lt;code&gt;u&lt;/code&gt;,&lt;code&gt;k&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Example of longer indices: &lt;code&gt;i_loop&lt;/code&gt;,&lt;code&gt;step&lt;/code&gt;,&lt;code&gt;walk&lt;/code&gt;, and &lt;code&gt;t_now&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Of course this is a matter of personal taste as well, but it should not be hard to find indices to use that have a clear meaning without growing too long.&lt;/p&gt;\n    ","\n&lt;p&gt;It was pointed out that &lt;code&gt;1i&lt;/code&gt; is an acceptable and unambiguous way to write &lt;code&gt;sqrt(-1)&lt;/code&gt;, and that as such there is no need to avoid using &lt;code&gt;i&lt;/code&gt;. Then again, as &lt;a href=&quot;https://stackoverflow.com/questions/14790740/using-i-and-j-as-variables-in-matlab/14893729#14893729&quot;&gt;Dennis pointed out&lt;/a&gt;, it can be hard to see the difference between &lt;code&gt;1i&lt;/code&gt; and &lt;code&gt;ii&lt;/code&gt;. My suggestion: use &lt;code&gt;1j&lt;/code&gt; as the imaginary constant where possible. It&apos;s the same trick that electrical engineers employ - they use &lt;code&gt;j&lt;/code&gt; for &lt;code&gt;sqrt(-1)&lt;/code&gt; because &lt;code&gt;i&lt;/code&gt; is already taken for &lt;a href=&quot;https://en.wikipedia.org/wiki/Electric_current&quot; rel=&quot;nofollow noreferrer&quot;&gt;current&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Personally I never use &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;; I use &lt;code&gt;ii&lt;/code&gt; and &lt;code&gt;jj&lt;/code&gt; as shorthand indexing variables, (and kk, ll, mm, ...) and &lt;code&gt;1j&lt;/code&gt; when I need to use complex numbers.&lt;/p&gt;\n    ","\n&lt;p&gt;Confusion with the imaginary unit has been well covered here, but there are some other more prosaic reasons why these and other single-letter variable names are sometimes discouraged.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;MATLAB specifically: if you&apos;re using coder to generate C++ source from your MATLAB code (don&apos;t, it&apos;s horrible) then you are explicitly warned not to reuse variables because of potential typing clashes.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Generally, and depending on your IDE, a single-letter variable name can cause havoc with highlighters and search/replace. MATLAB doesn&apos;t suffer from this and I believe Visual Studio hasn&apos;t had a problem for some time, but the C/C++ coding standards like &lt;a href=&quot;https://en.wikipedia.org/wiki/MISRA_C&quot; rel=&quot;nofollow noreferrer&quot;&gt;MISRA&lt;/a&gt;, etc. tend to advise against them.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;For my part I avoid all single-letter variables, despite the obvious advantages for directly implementing mathematical sources. It takes a little extra effort the first few hundred times you do it, but after that you stop noticing, and the advantages when you or some other poor soul come to read your code are legion.&lt;/p&gt;\n    ","\n&lt;p&gt;By default &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; stand for the imaginary unit. So from MATLAB&apos;s point of view, using &lt;code&gt;i&lt;/code&gt; as a variable is somehow like using &lt;code&gt;1&lt;/code&gt; as a variable.&lt;/p&gt;\n    ","\n&lt;p&gt;Any non-trivial code contains multiple &lt;code&gt;for&lt;/code&gt; loops, and the best practices recommend you use a descriptive name indicative of its purpose and scope. For times immemorial (and unless its 5-10 lines script that I am not going to save),  I have always been using variable names like &lt;code&gt;idxTask&lt;/code&gt;, &lt;code&gt;idxAnotherTask&lt;/code&gt; and &lt;code&gt;idxSubTask&lt;/code&gt; etc. &lt;/p&gt;\n\n&lt;p&gt;Or at the very least doubling the first letter of the array it is indexing e.g. &lt;code&gt;ss&lt;/code&gt; to index &lt;code&gt;subjectList&lt;/code&gt;, &lt;code&gt;tt&lt;/code&gt; to index &lt;code&gt;taskList&lt;/code&gt;, but not &lt;code&gt;ii&lt;/code&gt; or &lt;code&gt;jj&lt;/code&gt; which doesn&apos;t help me effortlessly identify which array they are indexing out of my multiple for loops.&lt;/p&gt;\n    ","\n&lt;p&gt;Unless you are a very confused user I think there is very little risk in using variable names &lt;em&gt;i&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; and I use them regularly. I haven&apos;t seen any official indication that this practice should be avoided.&lt;/p&gt;\n\n&lt;p&gt;While it&apos;s true that shadowing the imaginary unit could cause some confusion in some context as mentioned in other posts, overall I simply don&apos;t see it as a major issue. There are far more confusing things you can do in MATLAB, take for instance defining &lt;code&gt;false=true&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;In my opinion the only time you should probably avoid them is if your code specifically deals with imaginary numbers.&lt;/strong&gt;&lt;/p&gt;\n    "],"id":591,"title":"Using i and j as variables in MATLAB","content":"\n                \n&lt;p&gt;&lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are very popular variable names (see e.g., &lt;a href=&quot;https://stackoverflow.com/questions/4137785/why-are-variables-i-and-j-used-for-counters&quot;&gt;this question&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/454303/why-are-we-using-i-as-a-counter-in-loops&quot;&gt;this one&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;For example, in loops:&lt;/p&gt;\n&lt;pre class=&quot;lang-matlab s-code-block&quot;&gt;&lt;code class=&quot;hljs language-matlab&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n    &lt;span class=&quot;hljs-comment&quot;&gt;% Do something...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As indices into a matrix:&lt;/p&gt;\n&lt;pre class=&quot;lang-matlab s-code-block&quot;&gt;&lt;code class=&quot;hljs language-matlab&quot;&gt;mat(&lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;j&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Why &lt;em&gt;shouldn&apos;t&lt;/em&gt; they be used as variable names in MATLAB?&lt;/p&gt;\n    ","slug":"using-i-and-j-as-variables-in-matlab-1657388506358","postType":"QUESTION","createdAt":"2022-07-09T17:41:46.000Z","updatedAt":"2022-07-09T17:41:46.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"Why can't an element with a z-index value cover its child?","slug":"why-can't-an-element-with-a-z-index-value-cover-its-child-1657387707187"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"Sorting object property by values","slug":"sorting-object-property-by-values-1657388367300"},{"title":"How do I declare a 2d array in C++ using new?","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163"},{"title":"What is a raw type and why shouldn't we use it?","slug":"what-is-a-raw-type-and-why-shouldn't-we-use-it-1657384481079"},{"title":"What is the best algorithm for overriding GetHashCode?","slug":"what-is-the-best-algorithm-for-overriding-gethashcode-1657387848932"},{"title":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","slug":"how-does-the-windows-command-interpreter-(cmd.exe)-parse-scripts-1657387731560"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"Use of 'prototype' vs. 'this' in JavaScript?","slug":"use-of-'prototype'-vs.-'this'-in-javascript-1657388117307"},{"title":"How to convert a factor to integer\\numeric without loss of information?","slug":"how-to-convert-a-factor-to-integernumeric-without-loss-of-information-1657387880273"},{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","slug":"what-is-an-indexoutofrangeexception-argumentoutofrangeexception-and-how-do-i-fix-it-1657384697159"},{"title":"Why can't I store a value and a reference to that value in the same struct?","slug":"why-can't-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct-1657387506828"},{"title":"Read file line by line using ifstream in C++","slug":"read-file-line-by-line-using-ifstream-in-c++-1657388236966"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Find object by id in an array of JavaScript objects","slug":"find-object-by-id-in-an-array-of-javascript-objects-1657387572087"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"}]},"__N_SSG":true}