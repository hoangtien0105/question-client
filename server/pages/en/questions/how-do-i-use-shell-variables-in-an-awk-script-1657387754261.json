{"pageProps":{"data":{"answer":["\n&lt;blockquote&gt;\n&lt;p&gt;#Getting shell variables into &lt;code&gt;awk&lt;/code&gt;\nmay be done in several ways. Some are better than others. This should cover most of them.  If you have a comment, please leave below.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v1.5&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h2&gt;Using &lt;code&gt;-v&lt;/code&gt;  (The best way, most portable)&lt;/h2&gt;\n&lt;p&gt;Use the &lt;code&gt;-v&lt;/code&gt; option: (P.S. use a space after &lt;code&gt;-v&lt;/code&gt; or it will be less portable. E.g., &lt;code&gt;awk -v var=&lt;/code&gt; not &lt;code&gt;awk -vvar=&lt;/code&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\nawk -v var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print var}&apos;&lt;/span&gt;\nline one\nline two\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This should be compatible with most &lt;code&gt;awk&lt;/code&gt;, and the variable is available in the &lt;code&gt;BEGIN&lt;/code&gt; block as well:&lt;/p&gt;\n&lt;p&gt;If you have multiple variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var1&lt;/span&gt;&quot;&lt;/span&gt; -v b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var2&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print a,b}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;.  As Ed Morton writes, escape sequences will be interpreted so &lt;code&gt;\\t&lt;/code&gt; becomes a real &lt;code&gt;tab&lt;/code&gt; and not &lt;code&gt;\\t&lt;/code&gt; if that is what you search for. Can be solved by using &lt;code&gt;ENVIRON[]&lt;/code&gt; or access it via &lt;code&gt;ARGV[]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; If you like three vertical bar as separator &lt;code&gt;|||&lt;/code&gt;, it can&apos;t be escaped, so use &lt;code&gt;-F&quot;[|][|][|]&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example on getting data from a program/function inn to &lt;code&gt;awk&lt;/code&gt; (here date is used)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v time=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(date +&lt;span class=&quot;hljs-string&quot;&gt;&quot;%F %H:%M&quot;&lt;/span&gt; -d &apos;-1 minute&apos;)&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print time}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example of testing the contents of a shell variable as a regexp:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$0 ~ var{print &quot;found it&quot;}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Variable after code block&lt;/h2&gt;\n&lt;p&gt;Here we get the variable after the &lt;code&gt;awk&lt;/code&gt; code. This will work fine as long as you do not need the variable in the &lt;code&gt;BEGIN&lt;/code&gt; block:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;input data&quot;&lt;/span&gt; | awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print var}&apos;&lt;/span&gt; var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${variable}&lt;/span&gt;&quot;&lt;/span&gt;\nor\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print var}&apos;&lt;/span&gt; var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${variable}&lt;/span&gt;&quot;&lt;/span&gt; file\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Adding multiple variables:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;awk &apos;{print a,b,$0}&apos; a=&quot;$var1&quot; b=&quot;$var2&quot; file&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;In this way we can also set different Field Separator &lt;code&gt;FS&lt;/code&gt; for each file.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;awk &apos;some code&apos; FS=&apos;,&apos; file1.txt FS=&apos;;&apos; file2.ext&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Variable after the code block will not work for the &lt;code&gt;BEGIN&lt;/code&gt; block:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;echo &quot;input data&quot; | awk &apos;BEGIN {print var}&apos; var=&quot;${variable}&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Here-string&lt;/h2&gt;\n&lt;p&gt;Variable can also be added to &lt;code&gt;awk&lt;/code&gt; using a &lt;a href=&quot;http://en.wikipedia.org/wiki/Here_document&quot; rel=&quot;noreferrer&quot;&gt;here-string&lt;/a&gt; from shells that support them (including Bash):&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $0}&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is the same as:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%s&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt; | awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $0}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;P.S. this treats the variable as a file input.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;ENVIRON&lt;/code&gt; input&lt;/h2&gt;\n&lt;p&gt;As TrueY writes, you can use the &lt;code&gt;ENVIRON&lt;/code&gt; to print &lt;strong&gt;Environment Variables&lt;/strong&gt;.\nSetting a variable before running AWK, you can print it out like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;X=MyVar\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print ENVIRON[&quot;X&quot;],ENVIRON[&quot;SHELL&quot;]}&apos;&lt;/span&gt;\nMyVar /bin/bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;ARGV&lt;/code&gt; input&lt;/h2&gt;\n&lt;p&gt;As Steven Penny writes, you can use &lt;code&gt;ARGV&lt;/code&gt; to get the data into awk:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;v=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my data&quot;&lt;/span&gt;\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print ARGV[1]}&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\nmy data\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To get the data into the code itself, not just the BEGIN:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;v=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my data&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; | awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{var=ARGV[1];ARGV[1]=&quot;&quot;} {print var, $0}&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\nmy data &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Variable within the code: USE WITH CAUTION&lt;/h2&gt;\n&lt;p&gt;You can use a variable within the &lt;code&gt;awk&lt;/code&gt; code, but it&apos;s messy and hard to read, and as &lt;code&gt;Charles Duffy&lt;/code&gt; points out, this version may also be a victim of code injection.  If someone adds bad stuff to the variable, it will be executed as part of the &lt;code&gt;awk&lt;/code&gt; code.&lt;/p&gt;\n&lt;p&gt;This works by extracting the variable within the code, so it becomes a part of it.&lt;/p&gt;\n&lt;p&gt;If you want to make an &lt;code&gt;awk&lt;/code&gt; that changes dynamically with use of variables, you can do it this way, but DO NOT use it for normal variables.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&apos;&lt;/span&gt;\nline one\nline two\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is an example of code injection:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&apos;line one\\nline two&quot; ; for (i=1;i&amp;lt;=1000;++i) print i&quot;&apos;&lt;/span&gt;\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&apos;&lt;/span&gt;\nline one\nline two\n1\n2\n3\n.\n.\n1000\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can add lots of commands to &lt;code&gt;awk&lt;/code&gt; this way.  Even make it crash with non valid commands.&lt;/p&gt;\n&lt;p&gt;One valid use of this approach, though, is when you want to pass a symbol to awk to be applied to some input, e.g. a simple calculator:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;calc&lt;/span&gt;&lt;/span&gt;() { awk -v x=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; -v z=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$3&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{ print x &apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; z }&apos;&lt;/span&gt;; }\n\n$ calc 2.7 &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt; 3.4\n6.1\n\n$ calc 2.7 &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt; 3.4\n9.18\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is no way to do that using an awk variable populated with the value of a shell variable, you NEED the shell variable to expand to become part of the text of the awk script before awk interprets it.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Extra info:&lt;/h2&gt;\n&lt;h3&gt;Use of double quote&lt;/h3&gt;\n&lt;p&gt;It&apos;s always good to double quote variable &lt;code&gt;&quot;$variable&quot;&lt;/code&gt;&lt;br&gt;\nIf not, multiple lines will be added as a long single line.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Line one\nThis is line two&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nLine one This is line two\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt;\nLine one\nThis is line two\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other errors you can get without double quote:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\nawk -v var=&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print var}&apos;&lt;/span&gt;\nawk: cmd. line:1: one\\nline\nawk: cmd. line:1:    ^ backslash not last character on line\nawk: cmd. line:1: one\\nline\nawk: cmd. line:1:    ^ syntax error\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And with single quote, it does not expand the value of the variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v var=&lt;span class=&quot;hljs-string&quot;&gt;&apos;$variable&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print var}&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;More info about AWK and variables&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;http://cfajohnson.com/shell/cus-faq-2.html#Q24&quot; rel=&quot;noreferrer&quot;&gt;Read this faq&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It seems that the good-old &lt;code&gt;ENVIRON&lt;/code&gt; &lt;a href=&quot;/questions/tagged/awk&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;awk&apos;&quot; rel=&quot;tag&quot;&gt;awk&lt;/a&gt; built-in hash is not mentioned at all. An example of its usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ X=Solaris awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print ENVIRON[&quot;X&quot;], ENVIRON[&quot;TERM&quot;]}&apos;&lt;/span&gt;\nSolaris rxvt\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use either of these depending how you want backslashes in the shell variables handled (&lt;code&gt;avar&lt;/code&gt; is an awk variable, &lt;code&gt;svar&lt;/code&gt; is a shell variable):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v avar=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$svar&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;... avar ...&apos;&lt;/span&gt; file\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{avar=ARGV[1];ARGV[1]=&quot;&quot;}... avar ...&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$svar&lt;/span&gt;&quot;&lt;/span&gt; file\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://cfajohnson.com/shell/cus-faq-2.html#Q24&quot;&gt;http://cfajohnson.com/shell/cus-faq-2.html#Q24&lt;/a&gt; for details and other options. The first method above is almost always your best option and has the most obvious semantics.&lt;/p&gt;\n    ","\n&lt;p&gt;You could pass in the &lt;a href=&quot;http://www.gnu.org/software/gawk/manual/gawk.html#Options&quot; rel=&quot;noreferrer&quot;&gt;command-line option&lt;/a&gt; &lt;code&gt;-v&lt;/code&gt; with a variable name (&lt;code&gt;v&lt;/code&gt;) and a value (&lt;code&gt;=&lt;/code&gt;) of the environment variable (&lt;code&gt;&quot;${v}&quot;&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% awk -vv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${v}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN { print v }&apos;&lt;/span&gt;\n123test\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or to make it clearer (with far fewer &lt;code&gt;v&lt;/code&gt;s):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% environment_variable=123test\n% awk -vawk_variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${environment_variable}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN { print awk_variable }&apos;&lt;/span&gt;\n123test\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can utilize ARGV:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;v=123test\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print ARGV[1]}&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you are going to continue into the body, you will need to adjust\nARGC:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {ARGC--} {print ARGV[2], $0}&apos;&lt;/span&gt; file &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just changed @Jotne&apos;s answer for &quot;for loop&quot;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;hljs-built_in&quot;&gt;seq&lt;/span&gt; 11 20`; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; host myserver-&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; | awk -v i=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print &quot;myserver-&quot;i&quot; &quot; $4}&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had to insert date at the beginning of the lines of a log file and it&apos;s done like below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;DATE=$(&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; +&lt;span class=&quot;hljs-string&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;)\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$DATE&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;, $0; }&apos;&lt;/span&gt; /path_to_log_file/log_file.log\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can be redirect to another file to save&lt;/p&gt;\n    ","\n&lt;h2&gt;Pro Tip&lt;/h2&gt;\n&lt;p&gt;It could come handy to create a function that handles this so you dont have to type everything every time. Using the selected solution we get...&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;awk_switch_columns&lt;/span&gt;&lt;/span&gt;() {\n     &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; &amp;lt; /dev/stdin | awk -v a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; -v b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; { t = \\$a; \\$a = \\$b; \\$b = t; print; } &quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And use it as...&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a b c d&apos;&lt;/span&gt; | awk_switch_columns 2 4\n\nOutput:\na d c b\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;example:&lt;/p&gt;\n&lt;p&gt;in.txt:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo\nbar\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $1}&apos;&lt;/span&gt; in.txt) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;command:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt; out.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;out.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo\nbar\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;another:&lt;/p&gt;\n&lt;p&gt;in.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo,aaa\nbar,bbb\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(awk -F &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $1}&apos;&lt;/span&gt; in.txt) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;out.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo\nbar\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(awk -F &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $2}&apos;&lt;/span&gt; in.txt) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;out.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;aaa\nbbb\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":364,"title":"How do I use shell variables in an awk script?","content":"\n                \n&lt;p&gt;I found some ways to pass external shell variables to an &lt;code&gt;awk&lt;/code&gt; script, but I&apos;m confused about &lt;code&gt;&apos;&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;First, I tried with a shell script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ v=123test\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;\n123test\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\n123test\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then tried awk:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&apos;&lt;/span&gt;\n$ 123test\n$ awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print &apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt;\n$ 123\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why is the difference?&lt;/p&gt;\n\n&lt;p&gt;Lastly I tried this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print &quot; &apos;&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; &quot;}&apos;&lt;/span&gt;\n$  123test\n$ awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print &apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt;\nawk: cmd. line:1: BEGIN{&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\nawk: cmd. line:1:             ^ unexpected newline or end of string \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m confused about this.&lt;/p&gt;\n    ","slug":"how-do-i-use-shell-variables-in-an-awk-script-1657387754261","postType":"QUESTION","createdAt":"2022-07-09T17:29:14.000Z","updatedAt":"2022-07-09T17:29:14.000Z","tags":[{"id":2018,"name":"awk","slug":"awk","createdAt":"2022-07-09T17:29:14.000Z","updatedAt":"2022-07-09T17:29:14.000Z","Questions_Tags":{"questionId":364,"tagId":2018}}],"relatedQuestions":[{"title":"How do I use shell variables in an awk script?","slug":"how-do-i-use-shell-variables-in-an-awk-script-1657387754261","tags":[{"name":"awk","Questions_Tags":{"questionId":364,"tagId":2018}}]}]},"randomQuestions":[{"title":"Using async/await with a forEach loop","slug":"using-asyncawait-with-a-foreach-loop-1657384512667"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"Why don't flex items shrink past content size?","slug":"why-don't-flex-items-shrink-past-content-size-1657384687282"},{"title":"What happens if you use the 32-bit int 0x80 Linux ABI in 64-bit code?","slug":"what-happens-if-you-use-the-32-bit-int-0x80-linux-abi-in-64-bit-code-1657388560485"},{"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411"},{"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486"},{"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111"},{"title":"Prototypical inheritance - writing up [duplicate]","slug":"prototypical-inheritance-writing-up-duplicate-1657385478064"},{"title":"Merge/flatten an array of arrays","slug":"mergeflatten-an-array-of-arrays-1657387827427"},{"title":"How can I read inputs as numbers?","slug":"how-can-i-read-inputs-as-numbers-1657384503324"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"SQL select only rows with max value on a column [duplicate]","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292"},{"title":"\"Least Astonishment\" and the Mutable Default Argument","slug":"\"least-astonishment\"-and-the-mutable-default-argument-1657384412508"},{"title":"Example images for code and mark-up Q&As [closed]","slug":"example-images-for-code-and-mark-up-qandas-closed-1657387690222"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983"},{"title":"JavaScript closure inside loops – simple practical example","slug":"javascript-closure-inside-loops-simple-practical-example-1657384278449"},{"title":"What is the best way to detect a mobile device?","slug":"what-is-the-best-way-to-detect-a-mobile-device-1657387665025"},{"title":"How to format numbers as currency strings","slug":"how-to-format-numbers-as-currency-strings-1657388399166"},{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"}]},"__N_SSG":true}