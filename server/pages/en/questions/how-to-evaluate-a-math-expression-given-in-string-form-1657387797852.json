{"pageProps":{"data":{"answer":["\n&lt;p&gt;With JDK1.6, you can use the built-in Javascript engine.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngineManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngine;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptException;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ScriptException {\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mgr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mgr.getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;40+2&quot;&lt;/span&gt;;\n    System.out.println(engine.eval(foo));\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve written this &lt;code&gt;eval&lt;/code&gt; method for arithmetic expressions to answer this question. It does addition, subtraction, multiplication, division, exponentiation (using the &lt;code&gt;^&lt;/code&gt; symbol), and a few basic functions like &lt;code&gt;sqrt&lt;/code&gt;. It supports grouping using &lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;, and it gets the operator &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot; rel=&quot;noreferrer&quot;&gt;precedence&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot; rel=&quot;noreferrer&quot;&gt;associativity&lt;/a&gt; rules correct.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String str)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ch;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            ch = (++pos &amp;lt; str.length()) ? str.charAt(pos) : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; charToEat)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) nextChar();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch == charToEat) {\n                nextChar();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            nextChar();\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseExpression();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pos &amp;lt; str.length()) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n        \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Grammar:&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// expression = term | expression `+` term | expression `-` term&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// term = factor | term `*` factor | term `/` factor&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// factor = `+` factor | `-` factor | `(` expression `)` | number&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//        | functionName `(` expression `)` | functionName factor&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//        | factor `^` factor&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseTerm();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) x += parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// addition&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) x -= parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// subtraction&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseTerm&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseFactor();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;)) x *= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// multiplication&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)) x /= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// division&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseFactor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; +parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary plus&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary minus&lt;/span&gt;\n            \n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; x;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;startPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// parentheses&lt;/span&gt;\n                x = parseExpression();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing &apos;)&apos;&quot;&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// numbers&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) nextChar();\n                x = Double.parseDouble(str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos));\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// functions&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) nextChar();\n                &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;)) {\n                    x = parseExpression();\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing &apos;)&apos; after argument to &quot;&lt;/span&gt; + func);\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    x = parseFactor();\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sqrt&quot;&lt;/span&gt;)) x = Math.sqrt(x);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sin&quot;&lt;/span&gt;)) x = Math.sin(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cos&quot;&lt;/span&gt;)) x = Math.cos(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tan&quot;&lt;/span&gt;)) x = Math.tan(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unknown function: &quot;&lt;/span&gt; + func);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            }\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^&apos;&lt;/span&gt;)) x = Math.pow(x, parseFactor()); &lt;span class=&quot;hljs-comment&quot;&gt;// exponentiation&lt;/span&gt;\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n    }.parse();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;((4 - 2^3 + 1) * -sqrt(3*3+4*4)) / 2&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output: 7.5 &lt;a href=&quot;https://www.wolframalpha.com/input/?i=%28%284%20-%202%5E3%20%2B%201%29%20*%20-sqrt%283*3%2B4*4%29%29%20%2F%202&quot; rel=&quot;noreferrer&quot;&gt;(which is correct)&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The parser is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot; rel=&quot;noreferrer&quot;&gt;recursive descent parser&lt;/a&gt;, so internally uses separate parse methods for each level of operator precedence in its grammar. I deliberately kept it &lt;strong&gt;short&lt;/strong&gt;, but here are some ideas you might want to expand it with:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Variables:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The bit of the parser that reads the names for functions can easily be changed to handle custom variables too, by looking up names in a variable table passed to the &lt;code&gt;eval&lt;/code&gt; method, such as a &lt;code&gt;Map&amp;lt;String,Double&amp;gt; variables&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Separate compilation and evaluation:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;What if, having added support for variables, you wanted to evaluate the same expression millions of times with changed variables, without parsing it every time? It&apos;s possible. First define an interface to use to evaluate the precompiled expression:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@FunctionalInterface&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; {\n      &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now to rework the original &quot;eval&quot; function into a &quot;parse&quot; function, change all the methods that return &lt;code&gt;double&lt;/code&gt;s, so instead they return an instance of that interface. Java 8&apos;s lambda syntax works well for this. Example of one of the changed methods:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  Expression &lt;span class=&quot;hljs-title function_&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n      &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseTerm();\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// addition&lt;/span&gt;\n              &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x, b = parseTerm();\n              x = (() -&amp;gt; a.eval() + b.eval());\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// subtraction&lt;/span&gt;\n              &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x, b = parseTerm();\n              x = (() -&amp;gt; a.eval() - b.eval());\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n          }\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That builds a recursive tree of &lt;code&gt;Expression&lt;/code&gt; objects representing the compiled expression (an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot; rel=&quot;noreferrer&quot;&gt;abstract syntax tree&lt;/a&gt;). Then you can compile it once and evaluate it repeatedly with different values:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n      Map&amp;lt;String,Double&amp;gt; variables = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n      &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x^2 - x + 2&quot;&lt;/span&gt;, variables);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;; x &amp;lt;= +&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;; x++) {\n          variables.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, x);\n          System.out.println(x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; =&amp;gt; &quot;&lt;/span&gt; + exp.eval());\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Different datatypes:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Instead of &lt;code&gt;double&lt;/code&gt;, you could change the evaluator to use something more powerful like &lt;code&gt;BigDecimal&lt;/code&gt;, or a class that implements complex numbers, or rational numbers (fractions). You could even use &lt;code&gt;Object&lt;/code&gt;, allowing some mix of datatypes in expressions, just like a real programming language. :)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sub&gt;All code in this answer released &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot; rel=&quot;noreferrer&quot;&gt;to the public domain&lt;/a&gt;. Have fun!&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For my university project, I was looking for a parser / evaluator supporting both basic formulas and more complicated equations (especially iterated operators). I found very nice open source library for JAVA and .NET called mXparser. I will give a few examples to make some feeling on the syntax, for further instructions please visit project website (especially tutorial section).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://mathparser.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mathparser.org/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://mathparser.org/mxparser-tutorial/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mathparser.org/mxparser-tutorial/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://mathparser.org/api/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mathparser.org/api/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;And few examples&lt;/p&gt;\n&lt;p&gt;1 - Simple furmula&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;( 2 + 3/4 + sin(pi) )/2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2 - User defined arguments and constants&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Argument&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Argument&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x = 10&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Constant&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Constant&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a = pi^2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cos(a*x)&quot;&lt;/span&gt;, x, a);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3 - User defined functions&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f(x, y, z) = sin(x) + cos(y*z)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f(3,2,5)&quot;&lt;/span&gt;, f);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;4 - Iteration&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sum( i, 1, 100, sin(i) )&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Found recently - in case you would like to try the syntax (and see the advanced use case) you can download the &lt;a href=&quot;https://scalarmath.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;Scalar&lt;/a&gt; &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&quot; rel=&quot;nofollow noreferrer&quot;&gt;Calculator&lt;/a&gt; &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&quot; rel=&quot;nofollow noreferrer&quot;&gt;app&lt;/a&gt; that is powered by mXparser.&lt;/p&gt;\n    ","\n&lt;p&gt;The correct way to solve this is with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot; rel=&quot;noreferrer&quot;&gt;lexer&lt;/a&gt; and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Parser&quot; rel=&quot;noreferrer&quot;&gt;parser&lt;/a&gt;. You can write simple versions of these yourself, or those pages also have links to Java lexers and parsers.&lt;/p&gt;\n\n&lt;p&gt;Creating a recursive descent parser is a really good learning exercise.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://github.com/uklimaschewski/EvalEx&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt; is another open source library on GitHub named EvalEx.&lt;/p&gt;\n\n&lt;p&gt;Unlike the JavaScript engine this library is focused in evaluating mathematical expressions only. Moreover, the library is extensible and supports use of boolean operators as well as parentheses.&lt;/p&gt;\n    ","\n&lt;p&gt;You can evaluate expressions easily if your Java application already accesses a database, without using any other JARs.&lt;/p&gt;\n\n&lt;p&gt;Some databases require you to use a dummy table (eg, Oracle&apos;s &quot;dual&quot; table) and others will allow you to evaluate expressions without &quot;selecting&quot; from any table.&lt;/p&gt;\n\n&lt;p&gt;For example, in Sql Server or Sqlite&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;select (((&lt;span class=&quot;hljs-number&quot;&gt;12.10&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;12.0&lt;/span&gt;))/ &lt;span class=&quot;hljs-number&quot;&gt;233.0&lt;/span&gt;) amount\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in Oracle&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;select (((&lt;span class=&quot;hljs-number&quot;&gt;12.10&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;12.0&lt;/span&gt;))/ &lt;span class=&quot;hljs-number&quot;&gt;233.0&lt;/span&gt;) amount from dual;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The advantage of using a DB is that you can evaluate many expressions at the same time. Also most DB&apos;s will allow you to use highly complex expressions and   will also have a number of extra functions that can be called as necessary.  &lt;/p&gt;\n\n&lt;p&gt;However performance may suffer if many single expressions need to be evaluated individually, particularly when the DB is located on a network server.&lt;/p&gt;\n\n&lt;p&gt;The following addresses the performance problem to some extent, by using a Sqlite in-memory database.    &lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a full working example in Java&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Class. forName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.sqlite.JDBC&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; DriverManager.getConnection(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:sqlite::memory:&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; conn.createStatement();\n&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stat.executeQuery( &lt;span class=&quot;hljs-string&quot;&gt;&quot;select (1+10)/20.0 amount&quot;&lt;/span&gt;);\nrs.next();\nSystem.out.println(rs.getBigDecimal(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\nstat.close();\nconn.close();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course you could extend the above code to handle multiple calculations at the same time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stat.executeQuery( &lt;span class=&quot;hljs-string&quot;&gt;&quot;select (1+10)/20.0 amount, (1+100)/20.0 amount2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can also try the &lt;a href=&quot;http://www.beanshell.org&quot; rel=&quot;noreferrer&quot;&gt;BeanShell&lt;/a&gt; interpreter:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Interpreter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;interpreter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Interpreter&lt;/span&gt;();\ninterpreter.eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result = (7+21*6)/(32-27)&quot;&lt;/span&gt;);\nSystem.out.println(interpreter.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way is to use the &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spring Expression Language or SpEL&lt;/a&gt; which does a whole lot more along with evaluating mathematical expressions, therefore maybe slightly overkill. You do not have to be using Spring framework to use this expression library as it is stand-alone. Copying examples from SpEL&apos;s documentation:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ExpressionParser&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpelExpressionParser&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parser.parseExpression(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 + 1&quot;&lt;/span&gt;).getValue(Integer.class); &lt;span class=&quot;hljs-comment&quot;&gt;// 2 &lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;twentyFour&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parser.parseExpression(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.0 * 3e0 * 4&quot;&lt;/span&gt;).getValue(Double.class); &lt;span class=&quot;hljs-comment&quot;&gt;//24.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/&quot; rel=&quot;noreferrer&quot;&gt;This article&lt;/a&gt; discusses various approaches. Here are the 2 key approaches mentioned in the article:&lt;/p&gt;\n&lt;h3&gt;&lt;a href=&quot;http://commons.apache.org/proper/commons-jexl/&quot; rel=&quot;noreferrer&quot;&gt;JEXL from Apache&lt;/a&gt;&lt;/h3&gt;\n&lt;p&gt;Allows for scripts that include references to java objects.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Create or retrieve a JexlEngine&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;JexlEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jexl&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JexlEngine&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create an expression object&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jexlExp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.innerFoo.bar()&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jexl.createExpression( jexlExp );\n \n&lt;span class=&quot;hljs-comment&quot;&gt;// Create a context and add data&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;JexlContext&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jctx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapContext&lt;/span&gt;();\njctx.set(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;() );\n \n&lt;span class=&quot;hljs-comment&quot;&gt;// Now evaluate the expression, getting the result&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.evaluate(jctx);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Use the javascript engine embedded in the JDK:&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;jsEvalWithVariable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    List&amp;lt;String&amp;gt; namesList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jill&quot;&lt;/span&gt;);\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;);\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Laureen&quot;&lt;/span&gt;);\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ed&quot;&lt;/span&gt;);\n \n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mgr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jsEngine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mgr.getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;);\n \n    jsEngine.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;namesListKey&quot;&lt;/span&gt;, namesList);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Executing in script environment...&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n      jsEngine.eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;var x;&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;var names = namesListKey.toArray();&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;for(x in names) {&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;  println(names[x]);&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;namesListKey.add(\\&quot;Dana\\&quot;);&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ScriptException ex)\n    {\n        ex.printStackTrace();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if we are going to implement it then we can can use the below algorithm :--&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;While there are still tokens to be read in,&lt;/p&gt;\n\n&lt;p&gt;1.1 Get the next token.\n1.2 If the token is:&lt;/p&gt;\n\n&lt;p&gt;1.2.1 A number: push it onto the value stack.&lt;/p&gt;\n\n&lt;p&gt;1.2.2 A variable: get its value, and push onto the value stack.&lt;/p&gt;\n\n&lt;p&gt;1.2.3 A left parenthesis: push it onto the operator stack.&lt;/p&gt;\n\n&lt;p&gt;1.2.4 A right parenthesis:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; While the thing on top of the operator stack is not a \n   left parenthesis,\n     &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Pop the operator from the operator stack.\n     &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Pop the value stack twice, getting two operands.\n     &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; Apply the operator to the operands, in the correct order.\n     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Push the result onto the value stack.\n &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Pop the left parenthesis from the operator stack, and discard it.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;1.2.5 An operator (call it thisOp):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; While the operator stack is not empty, and the top thing on the\n   operator stack has the same or greater precedence as thisOp,\n   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Pop the operator from the operator stack.\n   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Pop the value stack twice, getting two operands.\n   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; Apply the operator to the operands, in the correct order.\n   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Push the result onto the value stack.\n &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Push thisOp onto the operator stack.\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;While the operator stack is not empty,\n1 Pop the operator from the operator stack.\n2 Pop the value stack twice, getting two operands.\n3 Apply the operator to the operands, in the correct order.\n4 Push the result onto the value stack.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;At this point the operator stack should be empty, and the value\nstack should have only one value in it, which is the final result.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;This is another interesting alternative \n&lt;a href=&quot;https://github.com/Shy-Ta/expression-evaluator-demo&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Shy-Ta/expression-evaluator-demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The usage is very simple and gets the job done, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;ExpressionsEvaluator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ExpressionsFactory.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2+3*4-6/2&quot;&lt;/span&gt;);  \n  assertEquals(BigDecimal.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;), evalExpr.eval()); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It seems like &lt;a href=&quot;http://sourceforge.net/projects/jep/&quot; rel=&quot;noreferrer&quot;&gt;JEP&lt;/a&gt; should do the job&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s too late to answer but I came across same situation to evaluate expression in java, it might help someone&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;MVEL&lt;/code&gt; does runtime evaluation of expressions, we can write a java code in &lt;code&gt;String&lt;/code&gt; to get it evaluated in this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;expressionStr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;x+y&quot;&lt;/span&gt;;\n    Map&amp;lt;String, Object&amp;gt; vars = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Object&amp;gt;();\n    vars.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    vars.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;ExecutableStatement&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (ExecutableStatement) MVEL.compileExpression(expressionStr);\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MVEL.executeExpression(statement, vars);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think what ever way you do this it&apos;s going to involve a lot of conditional statements. But for single operations like in your examples you could limit it to 4 if statements with something like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1+4&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (math.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;).length == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//do calculation&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (math.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;).length == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//do calculation&lt;/span&gt;\n} ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It gets a whole lot more complicated when you want to deal with multiple operations like &quot;4+5*6&quot;.&lt;/p&gt;\n\n&lt;p&gt;If you are trying to build a calculator then I&apos;d surgest passing each section of the calculation separatly (each number or operator) rather than as a single string.&lt;/p&gt;\n    ","\n&lt;p&gt;You might have a look at the &lt;a href=&quot;https://bitbucket.org/axelclk/symja_android_library/wiki/Home&quot; rel=&quot;nofollow&quot;&gt;Symja framework&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ExprEvaluator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExprEvaluator&lt;/span&gt;(); \n&lt;span class=&quot;hljs-type&quot;&gt;IExpr&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; util.evaluate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;10-40&quot;&lt;/span&gt;);\nSystem.out.println(result.toString()); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &quot;-30&quot; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Take note that definitively more complex expressions can be evaluated:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// D(...) gives the derivative of the function Sin(x)*Cos(x)&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;IAST&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; D(Times(Sin(x), Cos(x)), x);\n&lt;span class=&quot;hljs-type&quot;&gt;IExpr&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; util.evaluate(function);\n&lt;span class=&quot;hljs-comment&quot;&gt;// print: Cos(x)^2-Sin(x)^2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try the following sample code using JDK1.6&apos;s Javascript engine with code injection handling.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngine;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngineManager;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvalUtil&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;().getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        System.out.println((&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvalUtil&lt;/span&gt;()).eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(((5+5)/2) &amp;gt; 5) || 5 &amp;gt;3 &quot;&lt;/span&gt;));\n        System.out.println((&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvalUtil&lt;/span&gt;()).eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(((5+5)/2) &amp;gt; 5) || true&quot;&lt;/span&gt;));\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n        e.printStackTrace();\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String input)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(input.matches(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.*[a-zA-Z;~`#$_{}\\\\[\\\\]:\\\\\\\\;\\&quot;&apos;,\\\\.\\\\?]+.*&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid expression : &quot;&lt;/span&gt; + input );\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; engine.eval(input);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n        e.printStackTrace();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; e;\n    }\n }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is actually complementing the answer given by @Boann. It has a slight bug which causes &quot;-2 ^ 2&quot; to give an erroneous result of -4.0. The problem for that is the point at which the exponentiation is evaluated in his. Just move the exponentiation to the block of parseTerm(), and you&apos;ll be all fine. Have a look at the below, which is &lt;a href=&quot;https://stackoverflow.com/a/26227947/3126973&quot;&gt;@Boann&apos;s answer&lt;/a&gt; slightly modified. Modification is in the comments.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String str)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ch;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            ch = (++pos &amp;lt; str.length()) ? str.charAt(pos) : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; charToEat)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) nextChar();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch == charToEat) {\n                nextChar();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            nextChar();\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseExpression();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pos &amp;lt; str.length()) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Grammar:&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// expression = term | expression `+` term | expression `-` term&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// term = factor | term `*` factor | term `/` factor&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// factor = `+` factor | `-` factor | `(` expression `)`&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//        | number | functionName factor | factor `^` factor&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseTerm();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) x += parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// addition&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) x -= parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// subtraction&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseTerm&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseFactor();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;)) x *= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// multiplication&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)) x /= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// division&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^&apos;&lt;/span&gt;)) x = Math.pow(x, parseFactor()); &lt;span class=&quot;hljs-comment&quot;&gt;//exponentiation -&amp;gt; Moved in to here. So the problem is fixed&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseFactor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary plus&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary minus&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; x;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;startPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// parentheses&lt;/span&gt;\n                x = parseExpression();\n                eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// numbers&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) nextChar();\n                x = Double.parseDouble(str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos));\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// functions&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) nextChar();\n                &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos);\n                x = parseFactor();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sqrt&quot;&lt;/span&gt;)) x = Math.sqrt(x);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sin&quot;&lt;/span&gt;)) x = Math.sin(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cos&quot;&lt;/span&gt;)) x = Math.cos(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tan&quot;&lt;/span&gt;)) x = Math.tan(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unknown function: &quot;&lt;/span&gt; + func);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            }\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//if (eat(&apos;^&apos;)) x = Math.pow(x, parseFactor()); // exponentiation -&amp;gt; This is causing a bit of problem&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n    }.parse();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; ExpressionCalculator.expressioncalculator;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.DecimalFormat;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExpressionCalculator&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;addSpaces&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String exp)&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Add space padding to operands.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//https://regex101.com/r/sJ9gM7/73&lt;/span&gt;\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[\\\\/]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; / &quot;&lt;/span&gt;);\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[\\\\^]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; ^ &quot;&lt;/span&gt;);\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[\\\\*]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; * &quot;&lt;/span&gt;);\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[+]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; + &quot;&lt;/span&gt;); \n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[-]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; - &quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Keep replacing double spaces with single spaces until your string is properly formatted&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*while(exp.indexOf(&quot;  &quot;) != -1){\n        exp = exp.replace(&quot;  &quot;, &quot; &quot;);\n     }*/&lt;/span&gt;\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot; {2,}&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; exp;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Double &lt;span class=&quot;hljs-title function_&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String expr)&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-type&quot;&gt;DecimalFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DecimalFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#.####&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Format the expression properly before performing operations&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; addSpaces(expr);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//We will evaluate using rule BDMAS, i.e. brackets, division, power, multiplication, addition and&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//subtraction will be processed in following order&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;indexClose&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;indexOpen&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (indexClose != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;substring&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexClose);\n            indexOpen = substring.lastIndexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt;);\n            substring = substring.substring(indexOpen + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).trim();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(indexOpen != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexClose != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; evaluate(substring);\n                expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexOpen).trim() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + result + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + expression.substring(indexClose + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).trim();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; evaluate(expression.trim());\n            }\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; / &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;;\n        }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; ^ &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;^&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; * &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; + &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; - &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;//Avoid negative numbers&lt;/span&gt;\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Double.parseDouble(expression);\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.indexOf(operation);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            indexOpen = expression.lastIndexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, index - &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n            indexOpen = (indexOpen == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)?&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:indexOpen;\n            indexClose = expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, index + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n            indexClose = (indexClose == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)?expression.length():indexClose;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(indexOpen != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexClose != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Double.parseDouble(expression.substring(indexOpen, index));\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rhs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Double.parseDouble(expression.substring(index + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, indexClose));\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (operation){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;:\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//Prevent divide by 0 exception.&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(rhs == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                        }\n                        result = lhs / rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^&quot;&lt;/span&gt;:\n                        result = Math.pow(lhs, rhs);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;:\n                        result = lhs * rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;:\n                        result = lhs - rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;:\n                        result = lhs + rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(indexClose == expression.length()){\n                    expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexOpen) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + result + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + expression.substring(indexClose);\n                }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n                    expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexOpen) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + result + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + expression.substring(indexClose + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Double.valueOf(df.format(evaluate(expression.trim())));\n            }\n        }\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception exp){\n        exp.printStackTrace();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-type&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scanner&lt;/span&gt;(System.in);\n    System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter an Mathematical Expression to Evaluate: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; scanner.nextLine();\n    System.out.println(evaluate(input));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;check&lt;/span&gt; { \n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ans;\n   String str=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7 + 5&quot;&lt;/span&gt;;\n   StringTokenizer st=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringTokenizer&lt;/span&gt;(str);\n\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; v1=Integer.parseInt(st.nextToken());\n   String op=st.nextToken();\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; v2=Integer.parseInt(st.nextToken());\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(op.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;)) { ans= v1 + v2; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(op.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;)) { ans= v1 - v2; }\n   &lt;span class=&quot;hljs-comment&quot;&gt;//.........&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A Java class that can evaluate mathematical expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; test;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Calculator&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Double &lt;span class=&quot;hljs-title function_&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String expression)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || expression.length() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calc(expression.replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Double &lt;span class=&quot;hljs-title function_&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String expression)&lt;/span&gt; {\n        String[] containerArr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{expression};\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;leftVal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getNextOperand(containerArr);\n        expression = containerArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression.length() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal;\n        }\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.charAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt; || operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;) {\n            containerArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = expression;\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rightVal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getNextOperand(containerArr);\n            expression = containerArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;) {\n                leftVal = leftVal * rightVal;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                leftVal = leftVal / rightVal;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression.length() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                operator = expression.charAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n                expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal + calc(expression);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal - calc(expression);\n        }\n\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNextOperand&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] exp)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; res;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (open != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(i) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;) {\n                    open++;\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(i) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;) {\n                    open--;\n                }\n                i++;\n            }\n            res = calc(exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n            exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(i);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;) {\n                i++;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].length() &amp;gt; i &amp;amp;&amp;amp; isNumber((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(i))) {\n                i++;\n            }\n            res = Double.parseDouble(exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i));\n            exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(i);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isNumber&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (c &amp;gt;= zero &amp;amp;&amp;amp; c &amp;lt;= nine) || c ==&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        System.out.println(calculate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(((( -6 )))) * 9 * -1&quot;&lt;/span&gt;));\n        System.out.println(calc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(-5.2+-5*-5*((5/4+2)))&quot;&lt;/span&gt;));\n\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How about something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10+3&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;st.length();i++)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st.charAt(i)==&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)\n  {\n    result=Integer.parseInt(st.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i))+Integer.parseInt(st.substring(i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, st.length()));\n    System.out.print(result);\n  }         \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and do the similar thing for every other mathematical operator accordingly .. &lt;/p&gt;\n    ","\n&lt;p&gt;It is possible to convert any expression string in infix notation to a postfix notation using &lt;a href=&quot;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot; rel=&quot;nofollow&quot;&gt;Djikstra&apos;s shunting-yard algorithm&lt;/a&gt;. The result of the algorithm can then serve as input to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_Polish_notation&quot; rel=&quot;nofollow&quot;&gt;postfix algorithm&lt;/a&gt; with returns the result of the expression.&lt;/p&gt;\n\n&lt;p&gt;I wrote an article about it &lt;a href=&quot;http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/&quot; rel=&quot;nofollow&quot;&gt;here, with an implementation in java&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another option: &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser&quot; rel=&quot;nofollow&quot;&gt;https://github.com/stefanhaustein/expressionparser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I have implemented this to have a simple but flexible option to permit both:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Immediate processing (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/calculator/Calculator.java&quot; rel=&quot;nofollow&quot;&gt;Calculator.java&lt;/a&gt;, &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/sets/SetDemo.java&quot; rel=&quot;nofollow&quot;&gt;SetDemo.java&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Building and processing a parse tree (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/cas/TreeBuilder.java&quot; rel=&quot;nofollow&quot;&gt;TreeBuilder.java&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The TreeBuilder linked above is part of a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/cas&quot; rel=&quot;nofollow&quot;&gt;CAS demo package&lt;/a&gt; that does symbolic derivation. There is also a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/basic&quot; rel=&quot;nofollow&quot;&gt;BASIC interpreter&lt;/a&gt; example and I have started to build a &lt;a href=&quot;https://github.com/stefanhaustein/typo&quot; rel=&quot;nofollow&quot;&gt;TypeScript interpreter&lt;/a&gt; using it.&lt;/p&gt;\n    ","\n&lt;p&gt;External library like RHINO or NASHORN can be used to run javascript. And javascript can evaluate simple formula without parcing the string. No performance impact as well if code is written well.\nBelow is an example with RHINO - &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RhinoApp&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;simpleAdd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(12+13+2-2)*2+(12+13+2-2)*2&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runJavaScript&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jsCx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Context.enter();\n    Context.getCurrentContext().setOptimizationLevel(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptableObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsCx.initStandardObjects();\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsCx.evaluateString(scope, simpleAdd , &lt;span class=&quot;hljs-string&quot;&gt;&quot;formula&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    Context.exit();\n    System.out.println(result);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngine;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngineManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptException;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test2&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ScriptException {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10+2&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mn.getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;js&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; en.eval(s);\n        System.out.println(result);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":377,"title":"How to evaluate a math expression given in string form?","content":"\n                \n&lt;p&gt;I&apos;m trying to write a Java routine to evaluate math expressions from &lt;code&gt;String&lt;/code&gt; values like:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;&quot;5+3&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&quot;10-40&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&quot;(1+10)*3&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;I want to avoid a lot of if-then-else statements.\nHow can I do this?&lt;/p&gt;\n    ","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852","postType":"QUESTION","createdAt":"2022-07-09T17:29:57.000Z","updatedAt":"2022-07-09T17:29:57.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Is it safe to expose Firebase apiKey to the public?","slug":"is-it-safe-to-expose-firebase-apikey-to-the-public-1657388268111"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"Are dictionaries ordered in Python 3.6+?","slug":"are-dictionaries-ordered-in-python-3.6+-1657387834234"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"Maintain the aspect ratio of a div with CSS","slug":"maintain-the-aspect-ratio-of-a-div-with-css-1657387513615"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625"},{"title":"How can I upload files asynchronously with jQuery?","slug":"how-can-i-upload-files-asynchronously-with-jquery-1657384815389"},{"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827"},{"title":"When should static_cast, dynamic_cast, const_cast, and reinterpret_cast be used?","slug":"when-should-static_cast-dynamic_cast-const_cast-and-reinterpret_cast-be-used-1657388406205"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"Importing installed package from script raises \"AttributeError: module has no attribute\" or \"ImportError: cannot import name\"","slug":"importing-installed-package-from-script-raises-\"attributeerror:-module-has-no-attribute\"-or-\"importerror:-cannot-import-name\"-1657387790607"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"Why does a RegExp with global flag give wrong results?","slug":"why-does-a-regexp-with-global-flag-give-wrong-results-1657387788550"},{"title":"How can I iterate through two lists in parallel?","slug":"how-can-i-iterate-through-two-lists-in-parallel-1657387278930"},{"title":"How can you represent inheritance in a database?","slug":"how-can-you-represent-inheritance-in-a-database-1657388076553"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"How to check whether a string contains a substring in JavaScript?","slug":"how-to-check-whether-a-string-contains-a-substring-in-javascript-1657388080698"}]},"__N_SSG":true}