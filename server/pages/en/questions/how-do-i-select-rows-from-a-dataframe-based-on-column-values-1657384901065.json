{"pageProps":{"data":{"answer":["\n&lt;p&gt;To select rows whose column value equals a scalar, &lt;code&gt;some_value&lt;/code&gt;, use &lt;code&gt;==&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] == some_value]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To select rows whose column value is in an iterable, &lt;code&gt;some_values&lt;/code&gt;, use &lt;code&gt;isin&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;].isin(some_values)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Combine multiple conditions with &lt;code&gt;&amp;amp;&lt;/code&gt;: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] &amp;gt;= A) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] &amp;lt;= B)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the parentheses. Due to Python&apos;s &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#operator-precedence&quot; rel=&quot;noreferrer&quot;&gt;operator precedence rules&lt;/a&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; binds more tightly than &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt;. Thus, the parentheses in the last example are necessary. Without the parentheses &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] &amp;gt;= A &amp;amp; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] &amp;lt;= B\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is parsed as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] &amp;gt;= (A &amp;amp; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;]) &amp;lt;= B\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which results in a &lt;a href=&quot;https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o&quot;&gt;Truth value of a Series is ambiguous error&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;To select rows whose column value &lt;em&gt;does not equal&lt;/em&gt; &lt;code&gt;some_value&lt;/code&gt;, use &lt;code&gt;!=&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] != some_value]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;isin&lt;/code&gt; returns a boolean Series, so to select rows whose value is &lt;em&gt;not&lt;/em&gt; in &lt;code&gt;some_values&lt;/code&gt;, negate the boolean Series using &lt;code&gt;~&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[~df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;].isin(some_values)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar foo bar foo bar foo foo&apos;&lt;/span&gt;.split(),\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;one one two three two two one three&apos;&lt;/span&gt;.split(),\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: np.arange(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: np.arange(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;span class=&quot;hljs-comment&quot;&gt;#      A      B  C   D&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0  foo    one  0   0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1  bar    one  1   2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2  foo    two  2   4&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 3  bar  three  3   6&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 4  foo    two  4   8&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 5  bar    two  5  10&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 6  foo    one  6  12&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 7  foo  three  7  14&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you have multiple values you want to include, put them in a\nlist (or more generally, any iterable) and use &lt;code&gt;isin&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;])])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  bar    one  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  bar  three  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note, however, that if you wish to do this many times, it is more efficient to\nmake an index first, and then use &lt;code&gt;df.loc&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df.set_index([&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df.loc[&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;       A  C   D\nB              \none  foo  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\none  bar  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\none  foo  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or, to include multiple values from the index use &lt;code&gt;df.index.isin&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[df.index.isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;])]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;       A  C   D\nB              \none  foo  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\none  bar  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ntwo  foo  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\ntwo  foo  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\ntwo  bar  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\none  foo  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are several ways to select rows from a Pandas dataframe:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Boolean indexing (&lt;code&gt;df[df[&apos;col&apos;] == value&lt;/code&gt;] )&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Positional indexing (&lt;code&gt;df.iloc[...]&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Label indexing (&lt;code&gt;df.xs(...)&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;df.query(...)&lt;/code&gt; API&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Below I show you examples of each, with advice when to use certain techniques. Assume our criterion is column &lt;code&gt;&apos;A&apos;&lt;/code&gt; == &lt;code&gt;&apos;foo&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;(Note on performance: For each base type, we can keep things simple by using the Pandas API or we can venture outside the API, usually into NumPy, and speed things up.)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The first thing we&apos;ll need is to identify a condition that will act as our criterion for selecting rows. We&apos;ll start with the OP&apos;s case &lt;code&gt;column_name == some_value&lt;/code&gt;, and include some other common use cases.&lt;/p&gt;\n&lt;p&gt;Borrowing from @unutbu:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd, numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar foo bar foo bar foo foo&apos;&lt;/span&gt;.split(),\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;one one two three two two one three&apos;&lt;/span&gt;.split(),\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: np.arange(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: np.arange(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;&lt;strong&gt;1. Boolean indexing&lt;/strong&gt;&lt;/h1&gt;\n&lt;p&gt;... Boolean indexing requires finding the true value of each row&apos;s &lt;code&gt;&apos;A&apos;&lt;/code&gt; column being equal to &lt;code&gt;&apos;foo&apos;&lt;/code&gt;, then using those truth values to identify which rows to keep.  Typically, we&apos;d name this series, an array of truth values, &lt;code&gt;mask&lt;/code&gt;.  We&apos;ll do so here as well.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can then use this mask to slice or index the data frame&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[mask]\n\n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is one of the simplest ways to accomplish this task and if performance or intuitiveness isn&apos;t an issue, this should be your chosen method.  However, if performance is a concern, then you might want to consider an alternative way of creating the &lt;code&gt;mask&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;&lt;strong&gt;2. Positional indexing&lt;/strong&gt;&lt;/h1&gt;\n&lt;p&gt;Positional indexing (&lt;code&gt;df.iloc[...]&lt;/code&gt;) has its use cases, but this isn&apos;t one of them.  In order to identify where to slice, we first need to perform the same boolean analysis we did above.  This leaves us performing one extra step to accomplish the same task.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\npos = np.flatnonzero(mask)\ndf.iloc[pos]\n\n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;strong&gt;3. Label indexing&lt;/strong&gt;&lt;/h1&gt;\n&lt;p&gt;&lt;em&gt;Label&lt;/em&gt; indexing can be very handy, but in this case, we are again doing more work for no benefit&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, append=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, drop=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).xs(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, level=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;strong&gt;4. &lt;code&gt;df.query()&lt;/code&gt; API&lt;/strong&gt;&lt;/h1&gt;\n&lt;p&gt;&lt;em&gt;&lt;code&gt;pd.DataFrame.query&lt;/code&gt;&lt;/em&gt; is a very elegant/intuitive way to perform this task, but is often slower. &lt;strong&gt;However&lt;/strong&gt;, if you pay attention to the timings below, for large data, the query is very efficient. More so than the standard approach and of similar magnitude as my best suggestion.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A == &quot;foo&quot;&apos;&lt;/span&gt;)\n\n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;My preference is to use the &lt;code&gt;Boolean&lt;/code&gt; &lt;code&gt;mask&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Actual improvements can be made by modifying how we create our &lt;code&gt;Boolean&lt;/code&gt; &lt;code&gt;mask&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;mask&lt;/code&gt; alternative 1&lt;/strong&gt;\n&lt;em&gt;Use the underlying NumPy array and forgo the overhead of creating another &lt;code&gt;pd.Series&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;ll show more complete time tests at the end, but just take a look at the performance gains we get using the sample data frame.  First, we look at the difference in creating the &lt;code&gt;mask&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%timeit mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n%timeit mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-number&quot;&gt;5.84&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;195&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;166&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;4.45&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Evaluating the &lt;code&gt;mask&lt;/code&gt; with the NumPy array is ~ 30 times faster.  This is partly due to NumPy evaluation often being faster. It is also partly due to the lack of overhead necessary to build an index and a corresponding &lt;code&gt;pd.Series&lt;/code&gt; object.&lt;/p&gt;\n&lt;p&gt;Next, we&apos;ll look at the timing for slicing with one &lt;code&gt;mask&lt;/code&gt; versus the other.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n%timeit df[mask]\nmask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n%timeit df[mask]\n\n&lt;span class=&quot;hljs-number&quot;&gt;219&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;12.3&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;7.03&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The performance gains aren&apos;t as pronounced.  We&apos;ll see if this holds up over more robust testing.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;mask&lt;/code&gt; alternative 2&lt;/strong&gt;\nWe could have reconstructed the data frame as well.  There is a big caveat when reconstructing a dataframeyou must take care of the &lt;code&gt;dtypes&lt;/code&gt; when doing so!&lt;/p&gt;\n&lt;p&gt;Instead of &lt;code&gt;df[mask]&lt;/code&gt; we will do this&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pd.DataFrame(df.values[mask], df.index[mask], df.columns).astype(df.dtypes)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the data frame is of mixed type, which our example is, then when we get &lt;code&gt;df.values&lt;/code&gt; the resulting array is of &lt;code&gt;dtype&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; and consequently, all columns of the new data frame will be of &lt;code&gt;dtype&lt;/code&gt; &lt;code&gt;object&lt;/code&gt;.  Thus requiring the &lt;code&gt;astype(df.dtypes)&lt;/code&gt; and killing any potential performance gains.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%timeit df[m]\n%timeit pd.DataFrame(df.values[mask], df.index[mask], df.columns).astype(df.dtypes)\n\n&lt;span class=&quot;hljs-number&quot;&gt;216&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;10.4&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;1.43&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;39.6&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, if the data frame is not of mixed type, this is a very useful way to do it.&lt;/p&gt;\n&lt;p&gt;Given&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;np.random.seed([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1415&lt;/span&gt;])\nd1 = pd.DataFrame(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABCDE&apos;&lt;/span&gt;))\n\nd1\n\n   A  B  C  D  E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\nmask = d1[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\nd1[mask]\n\n&lt;span class=&quot;hljs-number&quot;&gt;179&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;8.73&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Versus&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\nmask = d1[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\npd.DataFrame(d1.values[mask], d1.index[mask], d1.columns)\n\n&lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;5.12&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We cut the time in half.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;mask&lt;/code&gt; alternative 3&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;@unutbu also shows us how to use &lt;code&gt;pd.Series.isin&lt;/code&gt; to account for each element of &lt;code&gt;df[&apos;A&apos;]&lt;/code&gt; being in a set of values.  This evaluates to the same thing if our set of values is a set of one value, namely &lt;code&gt;&apos;foo&apos;&lt;/code&gt;.  But it also generalizes to include larger sets of values if needed.  Turns out, this is still pretty fast even though it is a more general solution.  The only real loss is in intuitiveness for those not familiar with the concept.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\ndf[mask]\n\n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, as before, we can utilize NumPy to improve performance while sacrificing virtually nothing. We&apos;ll use &lt;code&gt;np.in1d&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = np.in1d(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\ndf[mask]\n\n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Timing&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I&apos;ll include other concepts mentioned in other posts as well for reference.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Code Below&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Each &lt;em&gt;column&lt;/em&gt; in this table represents a different length data frame over which we test each function. Each column shows relative time taken, with the fastest function given a base index of &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;res.div(res.&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;())\n\n                         &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;30000&lt;/span&gt;\nmask_standard         &lt;span class=&quot;hljs-number&quot;&gt;2.156872&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.850663&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.034149&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.166312&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.164541&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3.090372&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.981326&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3.131151&lt;/span&gt;\nmask_standard_loc     &lt;span class=&quot;hljs-number&quot;&gt;1.879035&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.782366&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.988823&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.338112&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.361391&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3.036131&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.998112&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.990103&lt;/span&gt;\nmask_with_values      &lt;span class=&quot;hljs-number&quot;&gt;1.010166&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.005113&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.026363&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.028698&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.293741&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.007824&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.016919&lt;/span&gt;\nmask_with_values_loc  &lt;span class=&quot;hljs-number&quot;&gt;1.196843&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.300228&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.038989&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.219233&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.037020&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;\nquery                 &lt;span class=&quot;hljs-number&quot;&gt;4.997304&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.765554&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5.934096&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.500559&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.997924&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.397013&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.680447&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.398190&lt;/span&gt;\nxs_label              &lt;span class=&quot;hljs-number&quot;&gt;4.124597&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.272363&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5.596152&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.295331&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.676591&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5.710680&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6.032809&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8.950255&lt;/span&gt;\nmask_with_isin        &lt;span class=&quot;hljs-number&quot;&gt;1.674055&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.679935&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.847972&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.724183&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.345111&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.405231&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.253554&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.264760&lt;/span&gt;\nmask_with_in1d        &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.083807&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.220493&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.101929&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.144175&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ll notice that the fastest times seem to be shared between &lt;code&gt;mask_with_values&lt;/code&gt; and &lt;code&gt;mask_with_in1d&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;res.T.plot(loglog=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ljeTd.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ljeTd.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_standard&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_standard_loc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.loc[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_with_values&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_with_values_loc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.loc[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A == &quot;foo&quot;&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;xs_label&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, append=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, drop=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).xs(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, level=-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_with_isin&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_with_in1d&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = np.in1d(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df[mask]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;res = pd.DataFrame(\n    index=[\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_standard&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_standard_loc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_with_values&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_with_values_loc&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;query&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;xs_label&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_with_isin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_with_in1d&apos;&lt;/span&gt;\n    ],\n    columns=[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30000&lt;/span&gt;],\n    dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;\n)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; res.columns:\n    d = pd.concat([df] * j, ignore_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; res.index:a\n        stmt = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{}(d)&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i)\n        setp = &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import d, {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i)\n        res.at[i, j] = timeit(stmt, setp, number=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Special Timing&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Looking at the special case when we have a single non-object &lt;code&gt;dtype&lt;/code&gt; for the entire data frame.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Code Below&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;spec.div(spec.&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;())\n\n                     &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;30000&lt;/span&gt;\nmask_with_values  &lt;span class=&quot;hljs-number&quot;&gt;1.009030&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.194276&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.236892&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.095343&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;\nmask_with_in1d    &lt;span class=&quot;hljs-number&quot;&gt;1.104638&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.094524&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.156930&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.072094&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.040043&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.027100&lt;/span&gt;\nreconstruct       &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.142838&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.000000&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.355440&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.650270&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.222181&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.294913&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3.406735&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Turns out, reconstruction isn&apos;t worth it past a few hundred rows.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;spec.T.plot(loglog=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/K1bNc.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/K1bNc.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;np.random.seed([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1415&lt;/span&gt;])\nd1 = pd.DataFrame(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABCDE&apos;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_with_values&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mask_with_in1d&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    mask = np.in1d(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df[mask]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reconstruct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    v = df.values\n    mask = np.in1d(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].values, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(v[mask], df.index[mask], df.columns)\n\nspec = pd.DataFrame(\n    index=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_with_values&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mask_with_in1d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;reconstruct&apos;&lt;/span&gt;],\n    columns=[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30000&lt;/span&gt;],\n    dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; spec.columns:\n    d = pd.concat([df] * j, ignore_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; spec.index:\n        stmt = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{}(d)&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i)\n        setp = &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import d, {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i)\n        spec.at[i, j] = timeit(stmt, setp, number=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;tl;dr&lt;/h3&gt;\n&lt;p&gt;The Pandas equivalent to&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;select * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table where column_name = some_value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;table[table.column_name == some_value]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Multiple conditions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;table[(table.column_name == some_value) | (table.column_name2 == some_value2)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;table.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name == some_value | column_name2 == some_value2&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Code example&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Create data set&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;],\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;333&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;444&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;555&lt;/span&gt;]}\ndf = pd.DataFrame(d)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Full dataframe:&lt;/span&gt;\ndf\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Shows:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    bar   foo&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0  333   100&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1  444   111&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2  555   222&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output only the row(s) in df where foo is 222:&lt;/span&gt;\ndf[df.foo == &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Shows:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    bar  foo&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2  555  222&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the above code it is the line &lt;code&gt;df[df.foo == 222]&lt;/code&gt; that gives the rows based on the column value, &lt;code&gt;222&lt;/code&gt; in this case.&lt;/p&gt;\n&lt;p&gt;Multiple conditions are also possible:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[(df.foo == &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;) | (df.bar == &lt;span class=&quot;hljs-number&quot;&gt;444&lt;/span&gt;)]\n&lt;span class=&quot;hljs-comment&quot;&gt;#    bar  foo&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1  444  111&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2  555  222&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But at that point I would recommend using the &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html&quot; rel=&quot;noreferrer&quot;&gt;query&lt;/a&gt; function, since it&apos;s less verbose and yields the same result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo == 222 | bar == 444&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I find the syntax of the previous answers to be redundant and difficult to remember. Pandas introduced the &lt;code&gt;query()&lt;/code&gt; method in v0.13 and I much prefer it. For your question, you could do &lt;code&gt;df.query(&apos;col == val&apos;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Reproduced from &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.17.0/indexing.html#indexing-query&quot;&gt;http://pandas.pydata.org/pandas-docs/version/0.17.0/indexing.html#indexing-query&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;167&lt;/span&gt;]: n = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;168&lt;/span&gt;]: df = pd.DataFrame(np.random.rand(n, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;))\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;]: df\nOut[&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;]: \n          a         b         c\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.687704&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.582314&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.281645&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.250846&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.610021&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.420121&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.624328&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.401816&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.932146&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.011763&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.022921&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.244186&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.590198&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.325680&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.890392&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.598892&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.296424&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.007312&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.634625&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.803069&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.123872&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.924168&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.325076&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.303746&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.116822&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.364564&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.454607&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.986142&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.751953&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.561512&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# pure python&lt;/span&gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;170&lt;/span&gt;]: df[(df.a &amp;lt; df.b) &amp;amp; (df.b &amp;lt; df.c)]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;170&lt;/span&gt;]: \n          a         b         c\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.011763&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.022921&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.244186&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.116822&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.364564&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.454607&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# query&lt;/span&gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;171&lt;/span&gt;]: df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(a &amp;lt; b) &amp;amp; (b &amp;lt; c)&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;171&lt;/span&gt;]: \n          a         b         c\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.011763&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.022921&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.244186&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.116822&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.364564&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.454607&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also access variables in the environment by prepending an &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;exclude = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;)\ndf.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;color not in @exclude&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;More flexibility using &lt;code&gt;.query&lt;/code&gt; with pandas &amp;gt;= 0.25.0:&lt;/h3&gt;\n&lt;p&gt;Since pandas &amp;gt;= 0.25.0 we can use the &lt;code&gt;query&lt;/code&gt; method to filter dataframes with pandas methods and even column names which have spaces. Normally the spaces in column names would give an error, but now we can solve that using a backtick (`) - see &lt;a href=&quot;https://github.com/pandas-dev/pandas/issues/6508&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Example dataframe&lt;/span&gt;\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Sender email&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ex@example.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;reply@shop.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;buy@shop.com&quot;&lt;/span&gt;]})\n\n     Sender email\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  ex@example.com\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  reply@shop.com\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    buy@shop.com\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;.query&lt;/code&gt; with method &lt;code&gt;str.endswith&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`Sender email`.str.endswith(&quot;@shop.com&quot;)&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;     Sender email\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  reply@shop.com\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    buy@shop.com\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Also we can use local variables by prefixing it with an &lt;code&gt;@&lt;/code&gt; in our query:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;domain = &lt;span class=&quot;hljs-string&quot;&gt;&apos;shop.com&apos;&lt;/span&gt;\ndf.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`Sender email`.str.endswith(@domain)&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;     Sender email\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  reply@shop.com\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    buy@shop.com\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For selecting only specific columns out of multiple columns for a given value in Pandas:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;select col_name1, col_name2 &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table where column_name = some_value.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Options &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;loc&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] == some_value, [col_name1, col_name2]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name == some_value&apos;&lt;/span&gt;)[[col_name1, col_name2]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Faster results can be achieved using &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html&quot; rel=&quot;noreferrer&quot;&gt;numpy.where&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;For example, with &lt;a href=&quot;https://stackoverflow.com/questions/17071871/select-rows-from-a-dataframe-based-on-values-in-a-column-in-pandas/17071908#17071908&quot;&gt;unubtu&apos;s setup&lt;/a&gt; -&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;]: df.iloc[np.where(df.A.values==&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;]: \n     A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Timing comparisons:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;]: %timeit df.iloc[np.where(df.A.values==&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)]  &lt;span class=&quot;hljs-comment&quot;&gt;# fastest&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;380&lt;/span&gt; µs per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;]: %timeit df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;745&lt;/span&gt; µs per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;]: %timeit df.loc[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])]\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;562&lt;/span&gt; µs per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;]: %timeit df[df.A==&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;796&lt;/span&gt; µs per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;]: %timeit df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(A==&quot;foo&quot;)&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# slowest&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.71&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In newer versions of Pandas, inspired by the documentation (&lt;em&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/user_guide/10min.html#viewing-data&quot; rel=&quot;noreferrer&quot;&gt;Viewing data&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;colume_name&quot;&lt;/span&gt;] == some_value] &lt;span class=&quot;hljs-comment&quot;&gt;#Scalar, True/False..&lt;/span&gt;\n\ndf[df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;colume_name&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;some_value&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;#String&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Combine multiple conditions by putting the clause in parentheses, &lt;code&gt;()&lt;/code&gt;, and combining them with &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; (and/or). Like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;colume_name&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;some_value1&quot;&lt;/span&gt;) &amp;amp; (pd[pd[&lt;span class=&quot;hljs-string&quot;&gt;&quot;colume_name&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;some_value2&quot;&lt;/span&gt;])]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other filters&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pandas.notna(df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;colume_name&quot;&lt;/span&gt;]) == &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Not NaN&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;colume_name&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Search for &quot;text&quot;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;colume_name&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.lower().&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Search for &quot;text&quot;, after converting  to lowercase&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a simple example  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; DataFrame\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Create data set&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Revenue&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;], \n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;Cost&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;333&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;444&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;555&lt;/span&gt;]}\ndf = DataFrame(d)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# mask = Return True when the value in column &quot;Revenue&quot; is equal to 111&lt;/span&gt;\nmask = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Revenue&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; mask\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Result:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0    False&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1     True&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2    False&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Name: Revenue, dtype: bool&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Select * FROM df WHERE Revenue = 111&lt;/span&gt;\ndf[mask]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Result:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    Cost    Revenue&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1  444     111&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To append to this famous question (though a bit too late): You can also do &lt;code&gt;df.groupby(&apos;column_name&apos;).get_group(&apos;column_desired_value&apos;).reset_index()&lt;/code&gt; to make a new data frame with specified column having a particular value. E.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar foo bar foo bar foo foo&apos;&lt;/span&gt;.split(),\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;one one two three two two one three&apos;&lt;/span&gt;.split()})\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Original dataframe:&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n\nb_is_two_dataframe = pd.DataFrame(df.groupby(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;).get_group(&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;).reset_index()).drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;index&apos;&lt;/span&gt;, axis = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) \n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; the final drop is to remove the extra index column returned by groupby object&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Sub dataframe where B is two:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b_is_two_dataframe)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Run this gives:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Original dataframe:\n     A      B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  bar    one\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  foo    two\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  bar  three\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  foo    two\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  bar    two\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three\nSub dataframe where B &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; two:\n     A    B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo  two\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  foo  two\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  bar  two\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can also use .apply:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; row: row[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;])])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It actually works row-wise (i.e., applies the function to each row).&lt;/p&gt;\n\n&lt;p&gt;The output is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A      B  C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  bar    one  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  bar  three  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  foo    one  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  foo  three  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The results is the same as using as mentioned by @unutbu&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;])]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to make query to your dataframe repeatedly and speed is important to you, the best thing is to convert your dataframe to dictionary and then by doing this you can make query thousands of times faster.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_df = df.set_index(column_name)\nmy_dict = my_df.to_dict(&lt;span class=&quot;hljs-string&quot;&gt;&apos;index&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After make my_dict dictionary you can go through:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; some_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_dict.keys():\n   my_result = my_dict[some_value]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you have duplicated values in column_name you can&apos;t make a dictionary. but you can use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_result = my_df.loc[some_value]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;SQL statements on DataFrames to select rows using DuckDB&lt;/h3&gt;\n&lt;p&gt;With &lt;a href=&quot;https://duckdb.org/docs/guides/python/sql_on_pandas&quot; rel=&quot;nofollow noreferrer&quot;&gt;duckdb&lt;/a&gt; we can query pandas DataFrames with SQL statements, in a &lt;a href=&quot;https://duckdb.org/2021/05/14/sql-on-pandas.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;highly performant way&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Since the question is &lt;em&gt;How do I select rows from a DataFrame based on column values?&lt;/em&gt;, and the example in the question is a SQL query, this answer looks logical in this topic.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; duckdb\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: con = duckdb.connect()\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;)})\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: df\nOut[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]:\n     A   B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: results = con.execute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM df where A &amp;gt; 2&quot;&lt;/span&gt;).df()\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]: results\nOut[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]:\n    A   B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Great answers. Only, when the &lt;strong&gt;size of the dataframe approaches million rows&lt;/strong&gt;, many of the methods tend to take ages when using &lt;code&gt;df[df[&apos;col&apos;]==val]&lt;/code&gt;. I wanted to have all possible values of &quot;another_column&quot; that correspond to specific values in &quot;some_column&quot; (in this case in a dictionary). This worked and fast.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=datetime.datetime.now()\n\nmy_dict={}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, my_key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;some_column&apos;&lt;/span&gt;].values): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i%&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)  &lt;span class=&quot;hljs-comment&quot;&gt;# to see the progress&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; my_key &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_dict.keys():\n        my_dict[my_key]={}\n        my_dict[my_key][&lt;span class=&quot;hljs-string&quot;&gt;&apos;values&apos;&lt;/span&gt;]=[df.iloc[i][&lt;span class=&quot;hljs-string&quot;&gt;&apos;another_column&apos;&lt;/span&gt;]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        my_dict[my_key][&lt;span class=&quot;hljs-string&quot;&gt;&apos;values&apos;&lt;/span&gt;].append(df.iloc[i][&lt;span class=&quot;hljs-string&quot;&gt;&apos;another_column&apos;&lt;/span&gt;])\n        \ne=datetime.datetime.now()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;operation took &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(e-s)+&lt;span class=&quot;hljs-string&quot;&gt;&apos; seconds&apos;&lt;/span&gt;)```\n\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":188,"title":"How do I select rows from a DataFrame based on column values?","content":"\n                \n&lt;p&gt;How can I select rows from a &lt;code&gt;DataFrame&lt;/code&gt; based on values in some column in Pandas?&lt;/p&gt;\n&lt;p&gt;In SQL, I would use:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; column_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; some_value\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"how-do-i-select-rows-from-a-dataframe-based-on-column-values-1657384901065","postType":"QUESTION","createdAt":"2022-07-09T16:41:41.000Z","updatedAt":"2022-07-09T16:41:41.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"Storing Images in DB - Yea or Nay?","slug":"storing-images-in-db-yea-or-nay-1657387248067"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"Convert columns into rows with Pandas","slug":"convert-columns-into-rows-with-pandas-1657388374964"},{"title":"C++ Singleton design pattern","slug":"c++-singleton-design-pattern-1657387830040"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"Select first row in each GROUP BY group?","slug":"select-first-row-in-each-group-by-group-1657384809388"},{"title":"How can I access and process nested objects, arrays, or JSON?","slug":"how-can-i-access-and-process-nested-objects-arrays-or-json-1657384332823"},{"title":"How do I profile a Python script?","slug":"how-do-i-profile-a-python-script-1657388346692"},{"title":"What does if __name__ == \"__main__\": do?","slug":"what-does-if-__name__-\"__main__\":-do-1657384825815"},{"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"Iterating over dictionaries using 'for' loops","slug":"iterating-over-dictionaries-using-'for'-loops-1657388334481"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003"},{"title":"How do I pass a variable by reference?","slug":"how-do-i-pass-a-variable-by-reference-1657384657232"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"}]},"__N_SSG":true}