{"pageProps":{"data":{"count":610,"rows":[{"id":105,"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345","postType":"QUESTION","createdAt":"2022-07-09T16:37:04.000Z","updatedAt":"2022-07-09T16:37:04.000Z","tags":[{"id":385,"name":"syntax","slug":"syntax","createdAt":"2022-07-09T16:37:04.000Z","updatedAt":"2022-07-09T16:37:04.000Z","Questions_Tags":{"questionId":105,"tagId":385}}]},{"id":104,"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653","postType":"QUESTION","createdAt":"2022-07-09T16:37:01.000Z","updatedAt":"2022-07-09T16:37:01.000Z","tags":[]},{"id":103,"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866","postType":"QUESTION","createdAt":"2022-07-09T16:36:58.000Z","updatedAt":"2022-07-09T16:36:58.000Z","tags":[{"id":378,"name":"jsp","slug":"jsp","createdAt":"2022-07-09T16:36:59.000Z","updatedAt":"2022-07-09T16:36:59.000Z","Questions_Tags":{"questionId":103,"tagId":378}},{"id":379,"name":"scriptlet","slug":"scriptlet","createdAt":"2022-07-09T16:36:59.000Z","updatedAt":"2022-07-09T16:36:59.000Z","Questions_Tags":{"questionId":103,"tagId":379}}]},{"id":102,"title":"SQL select only rows with max value on a column [duplicate]","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292","postType":"QUESTION","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","tags":[{"id":374,"name":"aggregate-functions","slug":"aggregate-functions","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":374}},{"id":375,"name":"greatest-n-per-group","slug":"greatest-n-per-group","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":375}},{"id":376,"name":"groupwise-maximum","slug":"groupwise-maximum","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":376}}]},{"id":101,"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065","postType":"QUESTION","createdAt":"2022-07-09T16:36:49.000Z","updatedAt":"2022-07-09T16:36:49.000Z","tags":[]}]},"answers":{"101":["\n&lt;p&gt;For syntax errors, you need to enable error display in the php.ini. By default these are turned off because you don&apos;t want a &quot;customer&quot; seeing the error messages. &lt;a href=&quot;http://php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot; rel=&quot;noreferrer&quot;&gt;Check this page&lt;/a&gt; in the PHP documentation for information on the 2 directives: &lt;code&gt;error_reporting&lt;/code&gt; and &lt;code&gt;display_errors&lt;/code&gt;. &lt;code&gt;display_errors&lt;/code&gt; is probably the one you want to change. If you can&apos;t modify the php.ini, you can also add the following lines to an .htaccess file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;php_flag  display_errors        on\nphp_value error_reporting       &lt;span class=&quot;hljs-number&quot;&gt;2039&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may want to consider using the value of E_ALL (as mentioned by Gumbo) for your version of PHP for &lt;code&gt;error_reporting&lt;/code&gt; to get all of the errors. &lt;a href=&quot;http://docs.php.net/manual/en/errorfunc.constants.php&quot; rel=&quot;noreferrer&quot;&gt;more info&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;3 other items: (1) You can check the error log file as it will have all of the errors (unless logging has been disabled). (2) Adding the following 2 lines will help you debug errors that are not syntax errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;On&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(3) Another option is to use an editor that checks for errors when you type, such as &lt;a href=&quot;http://www.nusphere.com/products/phped.htm&quot; rel=&quot;noreferrer&quot;&gt;PhpEd&lt;/a&gt;. PhpEd also comes with a debugger which can provide more detailed information. (The PhpEd debugger is very similar to xdebug and integrates directly into the editor so you use 1 program to do everything.)&lt;/p&gt;\n\n&lt;p&gt;Cartman&apos;s &lt;a href=&quot;http://www.ibm.com/developerworks/library/os-debug/&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt; is also very good: &lt;a href=&quot;http://www.ibm.com/developerworks/library/os-debug/&quot; rel=&quot;noreferrer&quot;&gt;http://www.ibm.com/developerworks/library/os-debug/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The following enables all errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_startup_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also see the following links&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/errorfunc.configuration.php#ini.display-errors&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/errorfunc.configuration.php#ini.display-errors&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/errorfunc.configuration.php#ini.display-startup-errors&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/errorfunc.configuration.php#ini.display-startup-errors&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/function.error-reporting.php&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The following code should display all errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Display Errors&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;On&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;html_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Error Reporting&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Shutdown Handler&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ShutdownHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt; = @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_get_last&lt;/span&gt;()))\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;call_user_func_array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ErrorHandler&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt;));\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;register_shutdown_function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ShutdownHandler&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Error Handler&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ErrorHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$line&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$_ERRORS&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0001&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0002&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0004&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_PARSE&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0008&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_NOTICE&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0010&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_CORE_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0020&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_CORE_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0040&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_COMPILE_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0080&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_COMPILE_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0100&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0200&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0400&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_NOTICE&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0800&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_STRICT&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x1000&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_RECOVERABLE_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x2000&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_DEPRECATED&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_DEPRECATED&apos;&lt;/span&gt;\n    );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_flip&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_ERRORS&lt;/span&gt;))))\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_UNKNOWN&apos;&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s Error in file \\xBB%s\\xAB at line %d: %s\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;basename&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$line&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt;)));\n};\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$old_error_handler&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_error_handler&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ErrorHandler&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// other php code&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only way to generate a blank page with this code is when you have a error in the shutdown handler. I copied and pasted this from my own cms without testing it, but I am sure it works.&lt;/p&gt;\n    ","\n&lt;p&gt;You can include the following lines in the file you want to debug:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This overrides the default settings in php.ini, which just make PHP report the errors to the log.&lt;/p&gt;\n    ","\n&lt;p&gt;Errors and warnings usually appear in &lt;code&gt;....\\logs\\php_error.log&lt;/code&gt; or &lt;code&gt;....\\logs\\apache_error.log&lt;/code&gt; depending on your php.ini settings.&lt;/p&gt;\n\n&lt;p&gt;Also useful errors are often directed to the browser, but as they are not valid html they are not displayed.&lt;/p&gt;\n\n&lt;p&gt;So &lt;code&gt;&quot;tail -f&lt;/code&gt;&quot; your log files and when you get a blank screen use IEs &quot;view&quot; -&amp;gt; &quot;source&quot; menu options to view the raw output.&lt;/p&gt;\n    ","\n&lt;h2&gt;PHP Configuration&lt;/h2&gt;\n\n&lt;p&gt;2 entries in &lt;a href=&quot;https://stackoverflow.com/questions/8684609/dude-wheres-my-php-ini&quot;&gt;php.ini&lt;/a&gt; dictate the output of errors:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/errorfunc.configuration.php#ini.display-errors&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;display_errors&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;error_reporting&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In &lt;strong&gt;production&lt;/strong&gt;, &lt;code&gt;display_errors&lt;/code&gt; is usually set to &lt;code&gt;Off&lt;/code&gt; (Which is a good thing, because error display in production sites is generally not desirable!).&lt;/p&gt;\n\n&lt;p&gt;However, in &lt;strong&gt;development&lt;/strong&gt;, it should be set to &lt;code&gt;On&lt;/code&gt;, so that errors get displayed. &lt;strong&gt;Check&lt;/strong&gt;!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error_reporting&lt;/code&gt; (as of PHP 5.3) is set by default to &lt;code&gt;E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_STRICT &amp;amp; ~E_DEPRECATED&lt;/code&gt; (meaning, everything is shown except for notices, strict standards and deprecation notices). When in doubt, set it to &lt;code&gt;E_ALL&lt;/code&gt; to display &lt;strong&gt;all&lt;/strong&gt; the errors. &lt;strong&gt;Check&lt;/strong&gt;!&lt;/p&gt;\n\n&lt;h2&gt;Whoa whoa! No check! I can&apos;t change my php.ini!&lt;/h2&gt;\n\n&lt;p&gt;That&apos;s a shame. Usually shared hosts do not allow the alteration of their php.ini file, and so, that option is sadly unavailable. But fear not! We have &lt;a href=&quot;https://www.php.net/manual/en/configuration.file.per-user.php&quot; rel=&quot;noreferrer&quot;&gt;other options&lt;/a&gt;!&lt;/p&gt;\n\n&lt;h2&gt;Runtime configuration&lt;/h2&gt;\n\n&lt;p&gt;In the desired script, we can alter the php.ini entries in runtime! Meaning, it&apos;ll run when the script runs! Sweet!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;error_reporting&lt;/a&gt;&lt;/strong&gt;(E_ALL);\n&lt;strong&gt;&lt;a href=&quot;http://php.net/ini_set&quot; rel=&quot;noreferrer&quot;&gt;ini_set&lt;/a&gt;&lt;/strong&gt;(&quot;display_errors&quot;, &quot;On&quot;);&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These two lines will do the same effect as altering the php.ini entries as above! Awesome!&lt;/p&gt;\n\n&lt;h2&gt;I still get a blank page/500 error!&lt;/h2&gt;\n\n&lt;p&gt;That means that the script hadn&apos;t even run! That usually happens when you have a syntax error!&lt;/p&gt;\n\n&lt;p&gt;With syntax errors, the script doesn&apos;t even get to runtime. It fails at &lt;strong&gt;compile time&lt;/strong&gt;, meaning that it&apos;ll use the values in php.ini, which if you hadn&apos;t changed, may not allow the display of errors.&lt;/p&gt;\n\n&lt;h2&gt;Error logs&lt;/h2&gt;\n\n&lt;p&gt;In addition, PHP by default logs errors. In shared hosting, it may be in a dedicated folder or on the same folder as the offending script.&lt;/p&gt;\n\n&lt;p&gt;If you have access to php.ini, you can find it under the &lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/errorfunc.configuration.php#ini.error-log&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;error_log&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; entry.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m always using this syntax at the very top of the php script.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;error_reporting&apos;&lt;/span&gt;, E_ALL);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;On&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//On or Off&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a really useful extension called &quot;&lt;a href=&quot;http://www.xdebug.org/&quot; rel=&quot;noreferrer&quot;&gt;xdebug&lt;/a&gt;&quot; that will make your reports much nicer as well.&lt;/p&gt;\n    ","\n&lt;p&gt;For quick, hands-on troubleshooting I normally suggest here on SO:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(~&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to be put at the beginning of the script that is under trouble-shooting. This is not perfect, the perfect variant is that you also enable that in the &lt;code&gt;php.ini&lt;/code&gt; and that you log the errors in PHP to catch syntax and startup errors.&lt;/p&gt;\n\n&lt;p&gt;The settings outlined here display all errors, notices and warnings, including strict ones, regardless which PHP version.&lt;/p&gt;\n\n&lt;p&gt;Next things to consider:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Install &lt;a href=&quot;http://xdebug.org/&quot; rel=&quot;noreferrer&quot;&gt;Xdebug&lt;/a&gt; and enable remote-debugging with your IDE.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;See as well:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.phptherightway.com/#error_reporting&quot; rel=&quot;noreferrer&quot;&gt;Error Reporting (PHP The Right Way.)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.php.net/errorfunc.constants.php&quot; rel=&quot;noreferrer&quot;&gt;Predefined Constants&lt;sup&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;error_reporting()&lt;/code&gt;&lt;sup&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/display_errors&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;display_errors&lt;/code&gt;&lt;sup&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;It is possible to register an hook to make the last error or warning visible.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shutdown&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_get_last&lt;/span&gt;());\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;register_shutdown_function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;shutdown&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;adding this code to the beginning of you index.php will help you debug the problems.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are super cool, you might try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$test_server&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;192&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$test_server&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL|E_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will only display errors when you are running locally. It also gives you the test_server variable to use in other places where appropriate.&lt;/p&gt;\n\n&lt;p&gt;Any errors that happen before the script runs won&apos;t be caught, but for 99% of errors that I make, that&apos;s not an issue.&lt;/p&gt;\n    ","\n&lt;p&gt;On the top of the page choose a parameter &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ERROR | E_WARNING | E_PARSE);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;This is a problem of loaded vs. runtime configuration&lt;/h1&gt;\n&lt;p&gt;It&apos;s important to recognize that a syntax error or parse error happens during the &lt;strong&gt;compile&lt;/strong&gt; or &lt;strong&gt;parsing&lt;/strong&gt; step, which means that PHP will bail before it&apos;s even had a chance to execute any of your code. So if you are modifying PHP&apos;s &lt;code&gt;display_errors&lt;/code&gt; configuration during runtime, (this includes anything from using &lt;code&gt;ini_set&lt;/code&gt; in your code to using .htaccess, which is a runtime configuration file) then only the default &lt;strong&gt;loaded configuration settings&lt;/strong&gt; are in play.&lt;/p&gt;\n&lt;h1&gt;How to always avoid WSOD in development&lt;/h1&gt;\n&lt;p&gt;To avoid a WSOD you want to make sure that your &lt;strong&gt;loaded configuration file&lt;/strong&gt; has &lt;code&gt;display_errors&lt;/code&gt; on and &lt;code&gt;error_reporting&lt;/code&gt; set to &lt;code&gt;-1&lt;/code&gt; (&lt;em&gt;this is the equivalent E_ALL because it ensures all bits are turned on regardless of which version of PHP you&apos;re running&lt;/em&gt;). Don&apos;t hardcode the constant value of E_ALL, because that value is subject to change between different versions of PHP.&lt;/p&gt;\n&lt;p&gt;Loaded configuration is either your loaded &lt;code&gt;php.ini&lt;/code&gt; file or your &lt;code&gt;apache.conf&lt;/code&gt; or &lt;code&gt;httpd.conf&lt;/code&gt; or virtualhost file. Those files are only read once during the startup stage (when you first start apache httpd or php-fpm, for example) and only overridden by runtime configuration changes. Making sure that &lt;code&gt;display_errors = 1&lt;/code&gt; and &lt;code&gt;error_reporting = -1&lt;/code&gt; in your loaded configuration file ensures that you will never see a &lt;em&gt;WSOD&lt;/em&gt; regardless of syntax or parse error that occur before a runtime change like &lt;code&gt;ini_set(&apos;display_errors&apos;, 1);&lt;/code&gt; or &lt;code&gt;error_reporting(E_ALL);&lt;/code&gt; can take place.&lt;/p&gt;\n&lt;h1&gt;How to find your (php.ini) loaded configuration files&lt;/h1&gt;\n&lt;p&gt;To locate your loaded configuration file(s) just create a new PHP file with only the following code...&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;phpinfo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then point your browser there and look at &lt;strong&gt;Loaded Configuration File&lt;/strong&gt; and &lt;strong&gt;Additional .ini files parsed&lt;/strong&gt;, which are usually at the top of your &lt;code&gt;phpinfo()&lt;/code&gt; and will include the absolute path to all your loaded configuration files.&lt;/p&gt;\n&lt;p&gt;If you see &lt;code&gt;(none)&lt;/code&gt; instead of the file, that means you don&apos;t have a php.ini in &lt;strong&gt;Configuration File (php.ini) Path&lt;/strong&gt;. So you can &lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/php.ini-development&quot; rel=&quot;noreferrer&quot;&gt;download the stock php.ini bundled with PHP from here&lt;/a&gt; and copy that to your configuration file path as php.ini then make sure your php user has sufficient permissions to read from that file. You&apos;ll need to restart httpd or php-fpm to load it in. Remember, this is the &lt;em&gt;development&lt;/em&gt; php.ini file that comes bundled with the PHP source. So please don&apos;t use it in production!&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Just don&apos;t do this in production&lt;/h1&gt;\n&lt;p&gt;This really is the best way to avoid a WSOD in development. Anyone suggesting that you put &lt;code&gt;ini_set(&apos;display_errors&apos;, 1);&lt;/code&gt; or &lt;code&gt;error_reporting(E_ALL);&lt;/code&gt; at the top of your PHP script or using .htaccess like you did here, is not going to help you avoid a WSOD when a syntax or parse error occurs (like in your case here) if your loaded configuration file has &lt;code&gt;display_errors&lt;/code&gt; turned off.&lt;/p&gt;\n&lt;p&gt;Many people (and stock installations of PHP) will use a production-ini file that has &lt;code&gt;display_errors&lt;/code&gt; turned off by default, which typically results in this same frustration you&apos;ve experienced here. Because PHP already has it turned off when it starts up, then encounters a syntax or parse error, and bails with nothing to output. You expect that your &lt;code&gt;ini_set(&apos;display_errors&apos;,1);&lt;/code&gt; at the top of your PHP script should have avoided that, but it won&apos;t matter if PHP can&apos;t parse your code because it will never have reached the runtime.&lt;/p&gt;\n    ","\n&lt;p&gt;To persist this and make it confortale, you can edit your php.ini file. It is usually stored in &lt;code&gt;/etc/php.ini&lt;/code&gt; or &lt;code&gt;/etc/php/php.ini&lt;/code&gt;, but more local &lt;code&gt;php.ini&lt;/code&gt;&apos;s may overwrite it, depending on your hosting provider&apos;s setup guidelines. Check a &lt;code&gt;phpinfo()&lt;/code&gt; file for &lt;code&gt;Loaded Configuration File&lt;/code&gt; at the top, to be sure which one gets loaded last.&lt;/p&gt;\n\n&lt;p&gt;Search for display_errors in that file. There should be only 3 instances, of which 2 are commented.&lt;/p&gt;\n\n&lt;p&gt;Change the uncommented line to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = stdout\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_startup_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t know if it will help, but here is a piece of my standard config file for php projects.  I tend not to depend too much on the apache configs even on my own server.&lt;/p&gt;\n&lt;p&gt;I never have the disappearing error problem, so perhaps something here will give you an idea.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Edited to show APPLICATON_LIVE&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\nAPPLICATION_LIVE will be used in process to tell if we are in a development or production environment.  It&apos;s generally set as early as possible (often the first code to run), before any config, url routing, etc.\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%^(www.)?livedomain.com$%&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;]) ) {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;APPLICATION_LIVE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%^(www.)?devdomain.net$%&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;]) ) {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;APPLICATION_LIVE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INVALID HOST REQUEST (&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Log or take other appropriate action.&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n--------------------------------------------------------------------\nDEFAULT ERROR HANDLING\n--------------------------------------------------------------------\nDefault error logging.  Some of these may be changed later based on APPLICATION_LIVE.\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL &amp;amp; ~E_STRICT);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_startup_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;log_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;log_errors_max_len&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;error_log&quot;&lt;/span&gt;, APPLICATION_ROOT.&lt;span class=&quot;hljs-string&quot;&gt;&quot;logs/php_error_log.txt&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_startup_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( ! APPLICATION_LIVE ) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A few changes to error handling for development.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// We will want errors to be visible during development.&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_startup_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;html_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;docref_root&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.php.net/&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;error_prepend_string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;div style=&apos;color:red; font-family:verdana; border:1px solid red; padding:5px;&apos;&amp;gt;&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;error_append_string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL | E_STRICT);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;html_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In addition, you can get more detailed information with &lt;a href=&quot;https://xdebug.org&quot; rel=&quot;noreferrer&quot;&gt;xdebug&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I recommend &lt;a href=&quot;https://tracy.nette.org/en/&quot; rel=&quot;noreferrer&quot;&gt;Nette Tracy&lt;/a&gt; for better visualization of errors and exceptions in PHP:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/B1gSC.png&quot; alt=&quot;Nette Tracy screenshot&quot;&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL | E_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And turn on display errors in php.ini&lt;/p&gt;\n    ","\n&lt;p&gt;You can register your own &lt;a href=&quot;http://de.php.net/manual/en/function.set-error-handler.php&quot; rel=&quot;noreferrer&quot;&gt;error handler&lt;/a&gt; in PHP. Dumping all errors to a file might help you in these obscure cases, for example. Note that your function will get called, no matter what your current &lt;a href=&quot;http://de.php.net/manual/en/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;error_reporting&lt;/a&gt; is set to. Very basic example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dump_error_to_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$errno&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$errstr&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_put_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/tmp/php-errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d H:i:s - &apos;&lt;/span&gt;) . &lt;span class=&quot;hljs-variable&quot;&gt;$errstr&lt;/span&gt;, FILE_APPEND);\n}\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_error_handler&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dump_error_to_file&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The two key lines you need to get useful errors out of PHP are:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As pointed out by other contributors, these are switched off by default for security reasons. As a useful tip - when you&apos;re setting up your site it&apos;s handy to do a switch for your different environments so that these errors are ON by default in your local and development environments. This can be achieved with the following code (ideally in your index.php or config file so this is active from the start):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;])\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// local&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;yourdomain.dev&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;// dev&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;dev.yourdomain.com&apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//live&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;yourdomain.com&apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;open your php.ini, \nmake sure it&apos;s set to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = On\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;restart your server.&lt;/p&gt;\n    ","\n&lt;p&gt;You might also want to try PHPStorm as your code editor.  It will find many PHP and other syntax errors right as you are typing in the editor. &lt;/p&gt;\n    ","\n&lt;p&gt;if you are a ubuntu user then goto your terminal and run this command&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;sudo tail -&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;f /&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;/log/apache2/error.log\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where it will display recent 50 errors. \nThere is a error file &lt;code&gt;error.log&lt;/code&gt; for apache2 which logs all the errors.&lt;/p&gt;\n    ","\n&lt;p&gt;To turn on full error reporting, add this to your script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This causes even minimal warnings to show up. And, just in case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will force the display of errors. This should be turned off in production servers, but not when you&apos;re developing.&lt;/p&gt;\n    ","\n&lt;p&gt;The ERRORS are the most useful things for the developers to know their mistakes and resolved them  to make the system working perfect.&lt;/p&gt;\n\n&lt;p&gt;PHP provides some of better ways to know the developers why and where their piece of code is getting the errors, so by knowing those errors developers can make their code better in many ways.&lt;/p&gt;\n\n&lt;p&gt;Best ways to write following two lines on the top of script to get all errors messages:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another way to use debugger tools like &lt;a href=&quot;http://xdebug.org&quot; rel=&quot;noreferrer&quot;&gt;xdebug&lt;/a&gt; in your IDE.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to all the wonderful answers here, I&apos;d like to throw in a special mention for the MySQLi and PDO libraries.&lt;/p&gt;\n\n&lt;p&gt;In order to...&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Always see database related errors, and&lt;/li&gt;\n&lt;li&gt;Avoid checking the return types for methods to see if something went wrong&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The best option is to configure the libraries to &lt;a href=&quot;https://secure.php.net/manual/language.exceptions.php&quot; rel=&quot;noreferrer&quot;&gt;throw exceptions&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;MySQLi&lt;/h3&gt;\n\n&lt;p&gt;Add this near the top of your script&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is best placed before you use &lt;code&gt;new mysqli()&lt;/code&gt; or &lt;code&gt;mysqli_connect()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;PDO&lt;/h3&gt;\n\n&lt;p&gt;Set the &lt;code&gt;PDO::ATTR_ERRMODE&lt;/code&gt; attribute to &lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt; on your connection instance. You can either do this in the constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;driver:host=localhost;...&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;, [\n    PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt; =&amp;gt; PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;\n]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or after creation&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can enable full error reporting (including notices and strict messages). Some people find this too verbose, but it&apos;s worth a try. Set &lt;code&gt;error_reporting&lt;/code&gt; to &lt;code&gt;E_ALL | E_STRICT&lt;/code&gt; in your php.ini.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;error_reporting = E_ALL | E_STRICT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;E_STRICT&lt;/code&gt; will notify you about deprecated functions and give you recommendations about the best methods to do certain tasks.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t want notices, but you find other message types helpful, try excluding notices:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;error_reporting = (E_ALL | E_STRICT) &amp;amp; ~E_NOTICE\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also make sure that &lt;code&gt;display_errors&lt;/code&gt; is enabled in php.ini. If your PHP version is older than 5.2.4, set it to &lt;code&gt;On&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = &lt;span class=&quot;hljs-string&quot;&gt;&quot;On&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your version is 5.2.4 or newer, use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = &lt;span class=&quot;hljs-string&quot;&gt;&quot;stderr&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Aside from error_reporting and the display_errors ini setting, you can get SYNTAX errors from your web server&apos;s log files. When I&apos;m developing PHP I load my development system&apos;s web server logs into my editor. Whenever I test a page and get a blank screen, the log file goes stale and my editor asks if I want to reload it. When I do, I jump to the bottom and there is the syntax error. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[Sun Apr &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2009&lt;/span&gt;] [error] [client &lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;] PHP Parse error:  syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting T_STRING &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; T_VARIABLE &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; T_NUM_STRING in D:\\\\webroot\\\\test\\\\test.php on line &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;This answer is brought to you by the department of redundancy department.    &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ini_set()&lt;/code&gt; / php.ini / .htaccess / .user.ini&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The settings &lt;code&gt;display_errors&lt;/code&gt; and &lt;code&gt;error_reporting&lt;/code&gt; have been covered sufficiently now. But just to recap when to use which option:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/ini_set&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ini_set()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/error_reporting&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;error_reporting()&lt;/code&gt;&lt;/a&gt; apply for runtime errors only.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/php.ini&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;php.ini&lt;/code&gt;&lt;/a&gt; should primarily be edited for development setups. (Webserver and CLI version often have different php.ini&apos;s)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/configuration.changes.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;.htaccess&lt;/code&gt;&lt;/a&gt; flags only work for dated setups (Find a new hoster! Well managed servers are cheaper.)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/configuration.file.per-user.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;.user.ini&lt;/code&gt;&lt;/a&gt; are partial php.ini&apos;s for modern setups (FCGI/FPM)&lt;br&gt;&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And as crude alternative for runtime errors you can often use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_error_handler&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;var_dump&quot;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// ignores error_reporting and `@` suppression&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/error_get_last&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;error_get_last()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Can be used to retrieve the last runtime notice/warning/error, when error_display is disabled.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/en/reserved.variables.phperrormsg.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;$php_errormsg&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Is a superlocal variable, which also contains the last PHP runtime message.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;isset()&lt;/code&gt; begone!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I know this will displease a lot of folks, but &lt;a href=&quot;http://php.net/isset&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;isset&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/empty&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; should &lt;strong&gt;not&lt;/strong&gt; be used by newcomers. You can add the notice suppression &lt;strong&gt;&lt;em&gt;after&lt;/em&gt;&lt;/strong&gt; you verified your code is working. But never before.&lt;/p&gt;\n\n&lt;p&gt;A lot of the &quot;something doesn&apos;t work&quot; questions we get lately are the result of typos like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;sumbit&apos;&lt;/span&gt;]))\n&lt;span class=&quot;hljs-comment&quot;&gt;#                  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You won&apos;t get any useful notices if your code is littered with &lt;code&gt;isset&lt;/code&gt;/&lt;code&gt;empty&lt;/code&gt;/&lt;code&gt;array_keys_exists&lt;/code&gt;. It&apos;s sometimes more &lt;a href=&quot;https://stackoverflow.com/a/4261242&quot;&gt;sensible to use &lt;code&gt;@&lt;/code&gt;&lt;/a&gt;, so notices and warnings go to the logs at least.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/en/function.assert-options.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;assert_options(ASSERT_ACTIVE|ASSERT_WARNING);&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To get warnings for &lt;code&gt;assert()&lt;/code&gt; sections. (Pretty uncommon, but more proficient code might contain some.)&lt;/p&gt;\n\n&lt;p&gt;PHP7 requires &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.zend.assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;zend.assertions=1&lt;/code&gt;&lt;/a&gt; in the php.ini as well.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;declare(strict_types=1);&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Bending PHP into a strictly typed language is not going to fix a whole lot of logic errors, but it&apos;s definitely an option for debugging purposes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;PDO / MySQLi&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;And @Phil already mentioned &lt;a href=&quot;https://stackoverflow.com/a/52324601&quot;&gt;PDO/MySQLi error reporting&lt;/a&gt; options. Similar options exist for other database APIs of course.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/json_last_error&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json_last_error()&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;http://php.net/json_last_error_msg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json_last_error_msg&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For JSON parsing.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/preg_last_error&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;preg_last_error()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For regexen.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3757071/php-debugging-curl&quot;&gt;CURLOPT_VERBOSE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To debug curl requests, you need CURLOPT_VERBOSE at the very least.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12199353/how-can-i-debug-exec-problems&quot;&gt;&lt;code&gt;shell/exec()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Likewise will shell command execution not yield errors on its own. You always need &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; and peek at the $errno.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    "],"102":["\n&lt;h2&gt;At first glance...&lt;/h2&gt;\n&lt;p&gt;All you need is a &lt;code&gt;GROUP BY&lt;/code&gt; clause with the &lt;code&gt;MAX&lt;/code&gt; aggregate function:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;It&apos;s never that simple, is it?&lt;/h2&gt;\n&lt;p&gt;I just noticed you need the &lt;code&gt;content&lt;/code&gt; column as well.&lt;/p&gt;\n&lt;p&gt;This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job&apos;s technical interview.&lt;/p&gt;\n&lt;p&gt;It is, actually, so common that Stack Overflow community has created a single tag just to deal with questions like that: &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Basically, you have two approaches to solve that problem:&lt;/p&gt;\n&lt;h2&gt;Joining with simple &lt;code&gt;group-identifier, max-value-in-group&lt;/code&gt; Sub-query&lt;/h2&gt;\n&lt;p&gt;In this approach, you first find the &lt;code&gt;group-identifier, max-value-in-group&lt;/code&gt; (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both &lt;code&gt;group-identifier&lt;/code&gt; and &lt;code&gt;max-value-in-group&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, a.contents\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable a\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) rev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n) b &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.rev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Left Joining with self, tweaking join conditions and filters&lt;/h2&gt;\n&lt;p&gt;In this approach, you left join the table with itself. Equality goes in the &lt;code&gt;group-identifier&lt;/code&gt;. Then, 2 smart moves:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The second join condition is having left side value less than right value&lt;/li&gt;\n&lt;li&gt;When you do step 1, the row(s) that actually have the max value will have &lt;code&gt;NULL&lt;/code&gt; in the right side (it&apos;s a &lt;code&gt;LEFT JOIN&lt;/code&gt;, remember?). Then, we filter the joined result, showing only the rows where the right side is &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So you end up with:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; YourTable b\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; b.rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Conclusion&lt;/h2&gt;\n&lt;p&gt;Both approaches bring the exact same result.&lt;/p&gt;\n&lt;p&gt;If you have two rows with &lt;code&gt;max-value-in-group&lt;/code&gt; for &lt;code&gt;group-identifier&lt;/code&gt;, both rows will be in the result in both approaches.&lt;/p&gt;\n&lt;p&gt;Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its &quot;flavor&quot;.&lt;/p&gt;\n&lt;p&gt;Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, &lt;em&gt;benchmark&lt;/em&gt;. And make sure you pick the one which make most of sense to you.&lt;/p&gt;\n    ","\n&lt;p&gt;My preference is to use as little code as possible...&lt;/p&gt;\n\n&lt;p&gt;You can do it using &lt;code&gt;IN&lt;/code&gt;\ntry this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; (id,rev) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; \n( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to my mind it is less complicated... easier to read and maintain.&lt;/p&gt;\n    ","\n&lt;p&gt;I am flabbergasted that no answer offered SQL window function solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, a.contents\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, rev, contents,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) ranked_order\n          &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable) a\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; a.ranked_order &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Added in SQL standard ANSI/ISO Standard SQL:2003  and later extended with ANSI/ISO Standard SQL:2008, window (or windowing) functions are available with all major vendors now. There are more types of rank functions available to deal with a tie issue: &lt;code&gt;RANK, DENSE_RANK, PERSENT_RANK&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another solution is to use a correlated subquery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; yt.id, yt.rev, yt.contents\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable yt\n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n        (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable st &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; yt.id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;st.id)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having an index on (id,rev) renders the subquery almost as a simple lookup...&lt;/p&gt;\n\n&lt;p&gt;Following are comparisons to the solutions in @AdrianCarneiro&apos;s answer (subquery, leftjoin), based on MySQL measurements with InnoDB table of ~1million records, group size being: 1-3.&lt;/p&gt;\n\n&lt;p&gt;While for full table scans subquery/leftjoin/correlated timings relate to each other as 6/8/9, when it comes to direct lookups or batch (&lt;code&gt;id in (1,2,3)&lt;/code&gt;), subquery is much slower then the others (Due to rerunning the subquery). However I couldnt differentiate between leftjoin and correlated solutions in speed.&lt;/p&gt;\n\n&lt;p&gt;One final note, as leftjoin creates n*(n+1)/2 joins in groups, its performance can be heavily affected by the size of groups...&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t vouch for the performance, but here&apos;s a trick inspired by the limitations of Microsoft Excel.  It has some good features&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;GOOD STUFF&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It should force return of only one &quot;max record&quot; even if there is a tie (sometimes useful)&lt;/li&gt;\n&lt;li&gt;It doesn&apos;t require a join&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;APPROACH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a little bit ugly and requires that you know something about the range of valid values of the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column.  Let us assume that we know the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column is a number between 0.00 and 999 including decimals but that there will only ever be two digits to the right of the decimal point (e.g. 34.17 would be a valid value).&lt;/p&gt;\n\n&lt;p&gt;The gist of the thing is that you create a single synthetic column by string concatenating/packing the primary comparison field along with the data you want.  In this way, you can force SQL&apos;s MAX() aggregate function to return all of the data (because it has been packed into a single column).  Then you have to unpack the data.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s how it looks with the above example, written in SQL&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, \n       &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(packed_col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_rev,\n       &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(packed_col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; content_for_max_rev \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, \n       &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;.001&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CHAR&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;---&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(content &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; packed_col\n       &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n      ) \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The packing begins by forcing the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column to be a number of known character length regardless of the value of &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; so that for example&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;3.2    becomes    1003.201&lt;/li&gt;\n&lt;li&gt;57     becomes    1057.001&lt;/li&gt;\n&lt;li&gt;923.88 becomes    1923.881&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you do it right, string comparison of two numbers should yield the same &quot;max&quot; as numeric comparison of the two numbers and it&apos;s easy to convert back to the original number using the substring function (which is available in one form or another pretty much everywhere).&lt;/p&gt;\n    ","\n&lt;h3&gt;Unique Identifiers?  Yes!  Unique identifiers!&lt;/h3&gt;\n&lt;p&gt;One of the best ways to develop a MySQL DB is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html&quot; rel=&quot;noreferrer&quot;&gt;to have each &lt;code&gt;id&lt;/code&gt; &lt;code&gt;AUTOINCREMENT&lt;/code&gt;&lt;/a&gt; (Source MySQL.com).  This allows a variety of advantages, too many to cover here.  The problem with the question is that its example has duplicate ids.  This disregards these tremendous advantages of unique identifiers, and at the same time, is confusing to those familiar with this already.&lt;/p&gt;\n&lt;h3&gt;Cleanest Solution&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.db-fiddle.com/f/8AmYpUxAo2z3yoR7yr9TKp/0&quot; rel=&quot;noreferrer&quot;&gt;DB Fiddle&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Newer versions of MySQL come with &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; enabled by default, and many of the solutions here will &lt;em&gt;fail&lt;/em&gt; in testing with this condition.&lt;/p&gt;\n&lt;p&gt;Even so, we can simply select &lt;code&gt;DISTINCT&lt;/code&gt; &lt;em&gt;someuniquefield&lt;/em&gt;, &lt;code&gt;MAX(&lt;/code&gt; &lt;em&gt;whateverotherfieldtoselect&lt;/em&gt; &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt; *somethirdfield &lt;code&gt;)&lt;/code&gt;, etc., and have no worries understanding the result or how the query works :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; t1.id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(t1.rev), &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(t2.content)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t2.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 t3 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t3.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SELECT DISTINCT Table1.id, max(Table1.rev), max(Table2.content)&lt;/code&gt; : Return &lt;code&gt;DISTINCT&lt;/code&gt; somefield, &lt;code&gt;MAX()&lt;/code&gt; some otherfield, the last &lt;code&gt;MAX()&lt;/code&gt; is redundant, because I know it&apos;s just one row, but it&apos;s required by the query.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FROM Employee&lt;/code&gt; : Table searched on.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JOIN Table1 AS Table2 ON Table2.rev = Table1.rev&lt;/code&gt; : Join the second table on the first, because, we need to get the max(table1.rev)&apos;s comment.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GROUP BY Table1.id&lt;/code&gt;: Force the top-sorted, Salary row of each employee to be the returned result.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Note that since &quot;content&quot; was &quot;...&quot; in OP&apos;s question, there&apos;s no way to test that this works.  So, I changed that to &quot;..a&quot;, &quot;..b&quot;, so, we can actually now see that the results are correct:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Table1.rev) &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Table2.content)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   ..d\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   ..b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Why is it clean?&lt;/em&gt;  &lt;code&gt;DISTINCT()&lt;/code&gt;, &lt;code&gt;MAX()&lt;/code&gt;, etc., all make wonderful use of MySQL indices.  This will be faster.  Or, it will be much faster, if you have indexing, and you compare it to a query that looks at all rows.&lt;/p&gt;\n&lt;h3&gt;Original Solution&lt;/h3&gt;\n&lt;p&gt;With &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; disabled, we can use still use &lt;code&gt;GROUP BY&lt;/code&gt;, but then we are only using it on the Salary, and not the id:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Salary &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; employeesub\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; employeesub.Salary;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SELECT *&lt;/code&gt; : Return all fields.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FROM Employee&lt;/code&gt; : Table searched on.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(SELECT *...)&lt;/code&gt; subquery : Return all people, sorted by Salary.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GROUP BY employeesub.Salary&lt;/code&gt;: Force the top-sorted, Salary row of each employee to be the returned result.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Unique-Row Solution&lt;/h3&gt;\n&lt;p&gt;Note the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_database&quot; rel=&quot;noreferrer&quot;&gt;Definition of a Relational Database&lt;/a&gt;: &quot;Each row in a table has its own unique key.&quot;  This would mean that, in the question&apos;s example, id would &lt;em&gt;have to be&lt;/em&gt; unique, and in that case, we can just do :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Employee.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Employee.Salary &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\nLIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hopefully this is a solution that solves the problem and helps everyone better understand what&apos;s happening in the DB.&lt;/p&gt;\n    ","\n&lt;p&gt;Something like this?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; yourtable.id, rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; maxrev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; child &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (yourtable.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; child.id) &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; (yourtable.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; maxrev)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another manner to do the job is using &lt;code&gt;MAX()&lt;/code&gt; analytic function in OVER PARTITION clause&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id\n          ,rev\n          ,contents\n          ,&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_rev\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    ) t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t.max_rev \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The other &lt;code&gt;ROW_NUMBER()&lt;/code&gt; OVER PARTITION solution already documented in this post is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id\n          ,rev\n          ,contents\n          ,&lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) rank\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    ) t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.rank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This 2 SELECT work well on Oracle 10g.&lt;/p&gt;\n\n&lt;p&gt;MAX() solution runs certainly FASTER that &lt;code&gt;ROW_NUMBER()&lt;/code&gt; solution because &lt;code&gt;MAX()&lt;/code&gt; complexity is &lt;code&gt;O(n)&lt;/code&gt; while &lt;code&gt;ROW_NUMBER()&lt;/code&gt; complexity is at minimum &lt;code&gt;O(n.log(n))&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; represent the number of records in table !&lt;/p&gt;\n    ","\n&lt;p&gt;I like to use a &lt;code&gt;NOT EXIST&lt;/code&gt;-based solution for this problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  id, \n  rev\n  &lt;span class=&quot;hljs-comment&quot;&gt;-- you can select other columns here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable t\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;EXISTS&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable t &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; t.rev\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will select all records with max value within the group and allows you to select other columns.&lt;/p&gt;\n    ","\n&lt;p&gt;I think, You want this?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docs &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; (id, rev) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docs &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id)  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;SQL Fiddle :\n&lt;a href=&quot;http://sqlfiddle.com/#!9/a6c585/82473/0&quot; rel=&quot;noreferrer&quot;&gt;Check here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Employee.Salary &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(salary) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Employee &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Employe_id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Employee.Salary\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Note: I probably wouldn&apos;t recommend this anymore in MySQL 8+ days. Haven&apos;t used it in years.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;A third solution I hardly ever see mentioned is MySQL specific and looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rev\n , &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;SUBSTRING_INDEX(GROUP_CONCAT(numeric_content &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; numeric_content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Yes it looks awful (converting to string and back etc.) but in my experience it&apos;s usually faster than the other solutions. Maybe that&apos;s just for my use cases, but I have used it on tables with millions of records and many unique ids. Maybe it&apos;s because MySQL is pretty bad at optimizing the other solutions (at least in the 5.0 days when I came up with this solution).&lt;/p&gt;\n&lt;p&gt;One important thing is that GROUP_CONCAT has a maximum length for the string it can build up. You probably want to raise this limit by setting the &lt;code&gt;group_concat_max_len&lt;/code&gt; variable. And keep in mind that this will be a limit on scaling if you have a large number of rows.&lt;/p&gt;\n&lt;p&gt;Anyway, the above doesn&apos;t directly work if your content field is already text. In that case you probably want to use a different separator, like \\0 maybe. You&apos;ll also run into the &lt;code&gt;group_concat_max_len&lt;/code&gt; limit quicker.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;NOT mySQL&lt;/strong&gt;, but for other people finding this question and using SQL, another way to resolve the &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt; problem is using &lt;a href=&quot;http://technet.microsoft.com/en-us/library/ms175156(v=sql.105).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Cross Apply&lt;/code&gt;&lt;/a&gt; in MS SQL&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; DocIds &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; docs)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; d2.id, d2.rev, d2.content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; DocIds d1\n&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Top &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; docs d\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; d.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; d1.id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n) d2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;&lt;a href=&quot;http://sqlfiddle.com/#!18/25b5c/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s an example in SqlFiddle&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;I would use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; t\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test\n    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; o\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; o.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t.rev\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Subquery SELECT is not too eficient maybe, but in JOIN clause seems to be usable. I&apos;m not an expert in optimizing queries, but I&apos;ve tried at MySQL, PostgreSQL, FireBird and it does work very good.&lt;/p&gt;\n\n&lt;p&gt;You can use this schema in multiple joins and with WHERE clause. It is my working example (solving identical to yours problem with table &quot;firmy&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; platnosci &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; firmy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; p.id_rel_firmy &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; f.id_rel\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(id_obj) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id_obj\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; firmy\n      &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id_rel) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; o\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; o.id_obj &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; f.id_obj &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; p.od &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;2014-03-01&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is asked on tables having teens thusands of records, and it takes less then 0,01 second on really not too strong machine.&lt;/p&gt;\n\n&lt;p&gt;I wouldn&apos;t use IN clause (as it is mentioned somewhere above). IN is given to use with short lists of constans, and not as to be the query filter built on subquery. It is because subquery in IN is performed for every scanned record which can made query taking very loooong time.&lt;/p&gt;\n    ","\n&lt;p&gt;Since this is most popular question with regard to this problem, I&apos;ll re-post another answer to it here as well:&lt;/p&gt;\n\n&lt;p&gt;It looks like there is simpler way to do this (but &lt;strong&gt;only in MySQL&lt;/strong&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt; ) x\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Please credit answer of user Bohemian&lt;/strong&gt; in &lt;a href=&quot;https://stackoverflow.com/questions/12102200/get-records-with-max-value-for-each-group-of-grouped-sql-results&quot;&gt;this question&lt;/a&gt; for providing such a concise and elegant answer to this problem.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; though this solution works for many people it may not be stable in the long run, since MySQL doesn&apos;t guarantee that GROUP BY statement will return meaningful values for columns not in GROUP BY list. So use this solution at your own risk!&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If you have many fields in select statement and you want latest  value for all of those fields through optimized code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id,rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) temp\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; all_fields.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;  \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; max_recs  \n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; yourtable &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; all_fields \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; max_recs.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; all_fields.id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution makes only one selection from YourTable, therefore it&apos;s faster. It works only for MySQL and SQLite(for SQLite remove DESC) according to test on sqlfiddle.com. Maybe it can be tweaked to work on other languages which I am not familiar with.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content1&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; content\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content2&apos;&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content3&apos;&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content4&apos;&lt;/span&gt;\n            ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; YourTable\n       &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; YourTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a nice way of doing that&lt;/p&gt;\n\n&lt;p&gt;Use following code :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;  ( \n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(field1) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; summ , field1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; field1 )\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; summ &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(summ) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; temp)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like to do this by ranking the records by some column. In this case, rank &lt;code&gt;rev&lt;/code&gt; values grouped by &lt;code&gt;id&lt;/code&gt;. Those with higher &lt;code&gt;rev&lt;/code&gt; will have lower rankings. So highest &lt;code&gt;rev&lt;/code&gt; will have ranking of 1.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; if(&lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id, &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; row_num,\n    id, rev, content,\n    &lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, rev, content &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YOURTABLE &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;asc&lt;/span&gt;, rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) TEMP,\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; DUAL) X,\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; DUAL) Y) TEMP\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; row_num &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not sure if introducing variables makes the whole thing slower. But at least I&apos;m not querying &lt;code&gt;YOURTABLE&lt;/code&gt; twice.&lt;/p&gt;\n    ","\n&lt;p&gt;Sorted the rev field in reverse order and then grouped by id which gave the first row of each grouping which is the one with the highest rev value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; table1 &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) X &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; X.id;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tested in &lt;a href=&quot;http://sqlfiddle.com/&quot; rel=&quot;nofollow&quot;&gt;http://sqlfiddle.com/&lt;/a&gt; with the following data&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; table1\n    (`id` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, `rev` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, `content` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table1\n    (`id`, `rev`, `content`)\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;One-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;One-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Two-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Two-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-Three&apos;&lt;/span&gt;)\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This gave the following result in MySql 5.5 and 5.6 &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id  rev content\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Two&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Three&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;here is another solution hope it will help someone    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; a.id , a.rev, a.content &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Table1 a\n&lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; \n(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) rev &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) x &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; x.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; x.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.rev\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of these answers have worked for me.&lt;/p&gt;\n\n&lt;p&gt;This is what worked for me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; score &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(score_up) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; history)\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; history.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; score, history &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; history.score_up &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; score.max\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another solution to retrieving the records only with a field that has the maximum value for that field. This works for SQL400 which is the platform I work on. In this example, the records with the maximum value in field FIELD5 will be retrieved by the following SQL statement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; A.KEYFIELD1, A.KEYFIELD2, A.FIELD3, A.FIELD4, A.FIELD5\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MYFILE A\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; RRN(A) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; RRN(B) \n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MYFILE B\n     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; B.KEYFIELD1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; A.KEYFIELD1 &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; B.KEYFIELD2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; A.KEYFIELD2\n     &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; B.FIELD5 &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ONLY&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can make the select without a join when you combine the &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; into one &lt;code&gt;maxRevId&lt;/code&gt; value for &lt;code&gt;MAX()&lt;/code&gt; and then split it back to original values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; maxRevId &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; ((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id, maxRevId &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(((rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; maxRevId\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n      &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) x;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is especially fast when there is a complex join instead of a single table. With the traditional approaches the complex join would be done twice.&lt;/p&gt;\n\n&lt;p&gt;The above combination is simple with bit functions when &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are &lt;code&gt;INT UNSIGNED&lt;/code&gt; (32 bit) and combined value fits to &lt;code&gt;BIGINT UNSIGNED&lt;/code&gt; (64 bit). When the &lt;code&gt;id&lt;/code&gt; &amp;amp; &lt;code&gt;rev&lt;/code&gt; are larger than 32-bit values or made of multiple columns, you need combine the value into e.g. a binary value with suitable padding for &lt;code&gt;MAX()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;Explanation&lt;/h1&gt;\n\n&lt;p&gt;This is not pure SQL. This will use the SQLAlchemy ORM.&lt;/p&gt;\n\n&lt;p&gt;I came here looking for SQLAlchemy help, so I will duplicate Adrian Carneiro&apos;s answer with the python/SQLAlchemy version, specifically the outer join part.&lt;/p&gt;\n\n&lt;p&gt;This query answers the question of:   &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&quot;Can you return me the records in this group of records (based on same id) that have the highest version number&quot;.&lt;/em&gt;  &lt;/p&gt;\n\n&lt;p&gt;This allows me to duplicate the record, update it, increment its version number, and have the copy of the old version in such a way that I can show change over time.&lt;/p&gt;\n\n&lt;h1&gt;Code&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;MyTableAlias &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aliased(MyTable)\nnewest_records &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; appdb.session.query(MyTable).select_from(&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt;(\n    MyTable, \n    MyTableAlias, \n    onclause&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;and_(\n        MyTable.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MyTableAlias.id,\n        MyTable.version_int &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; MyTableAlias.version_int\n    ),\n    isouter&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    )\n).&lt;span class=&quot;hljs-keyword&quot;&gt;filter&lt;/span&gt;(\n    MyTableAlias.id  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;,\n).&lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tested on a PostgreSQL database.&lt;/p&gt;\n    ","\n&lt;p&gt;I used the below to solve a problem of my own. I first created a temp table and inserted the max rev value per unique id.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; #temp1\n(\n    id &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n    , rev &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; #temp1\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(a.rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, content, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, content\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I then joined these max values (#temp1) to all of the possible id/content combinations. By doing this, I naturally filter out the non-maximum id/content combinations, and am left with the only max rev values for each.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #temp1 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, content, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, content\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id, a.rev, b.content\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;/code&gt;&lt;/pre&gt;\n    "],"103":["\n&lt;p&gt;The use of &lt;em&gt;scriptlets&lt;/em&gt; (those &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; things) in &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; is indeed highly discouraged since the birth of &lt;em&gt;taglibs&lt;/em&gt; (like &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt;, those &lt;code&gt;${}&lt;/code&gt; things) way back in 2001.&lt;/p&gt;\n&lt;p&gt;The major disadvantages of &lt;em&gt;scriptlets&lt;/em&gt; are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Reusability:&lt;/strong&gt; you can&apos;t reuse scriptlets.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Replaceability:&lt;/strong&gt; you can&apos;t make scriptlets abstract.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;OO-ability:&lt;/strong&gt; you can&apos;t make use of inheritance/composition.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Debuggability:&lt;/strong&gt; if scriptlet throws an exception halfway, all you get is a blank page.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Testability:&lt;/strong&gt; scriptlets are not unit-testable.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Maintainability:&lt;/strong&gt; per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strike&gt;Sun&lt;/strike&gt; Oracle itself also recommends in the &lt;a href=&quot;https://www.oracle.com/technical-resources/articles/javase/code-convention.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSP coding conventions&lt;/a&gt; to avoid use of &lt;em&gt;scriptlets&lt;/em&gt; whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help &lt;strong&gt;reduce the need for JSP scriptlets&lt;/strong&gt; in your pages. Pages that use JSTL are, in general, easier to read and maintain.&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n&lt;p&gt;Where possible, &lt;strong&gt;avoid JSP scriptlets&lt;/strong&gt; whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n&lt;p&gt;In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, &lt;strong&gt;JSP scriptlets should not be used&lt;/strong&gt; for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client&apos;s requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;How to replace &lt;em&gt;scriptlets&lt;/em&gt; entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke the &lt;strong&gt;same&lt;/strong&gt; Java code on &lt;em&gt;every&lt;/em&gt; request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filter&lt;/a&gt; and write code accordingly in &lt;a href=&quot;https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/filter#doFilter-jakarta.servlet.ServletRequest-jakarta.servlet.ServletResponse-jakarta.servlet.FilterChain-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;doFilter()&lt;/code&gt;&lt;/a&gt; method. E.g.:&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ServletRequest request, ServletResponse response, FilterChain chain)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (((HttpServletRequest) request).getSession().getAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n          ((HttpServletResponse) response).sendRedirect(&lt;span class=&quot;hljs-string&quot;&gt;&quot;login&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Not logged in, redirect to login page.&lt;/span&gt;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          chain.doFilter(request, response); &lt;span class=&quot;hljs-comment&quot;&gt;// Logged in, just continue request.&lt;/span&gt;\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When mapped on an appropriate &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; covering the JSP pages of interest, then you don&apos;t need to copypaste the same piece of code overall JSP pages.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke some Java code to &lt;strong&gt;process a GET request&lt;/strong&gt;, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/http/httpservlet#doGet-jakarta.servlet.http.HttpServletRequest-jakarta.servlet.http.HttpServletResponse-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;doGet()&lt;/code&gt;&lt;/a&gt; method. E.g.:&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n          List&amp;lt;Product&amp;gt; products = productService.list(); &lt;span class=&quot;hljs-comment&quot;&gt;// Obtain all products.&lt;/span&gt;\n          request.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;products&quot;&lt;/span&gt;, products); &lt;span class=&quot;hljs-comment&quot;&gt;// Store products in request scope.&lt;/span&gt;\n          request.getRequestDispatcher(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/products.jsp&quot;&lt;/span&gt;).forward(request, response); &lt;span class=&quot;hljs-comment&quot;&gt;// Forward to JSP page to display them in a HTML table.&lt;/span&gt;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ServletException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Retrieving products failed!&quot;&lt;/span&gt;, e);\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; in &lt;code&gt;web.xml&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke some Java code to &lt;strong&gt;process a POST request&lt;/strong&gt;, such as gathering data from a submitted HTML form and doing some business stuff with it (conversion, validation, saving in DB, etcetera), then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/http/httpservlet#doPost-jakarta.servlet.http.HttpServletRequest-jakarta.servlet.http.HttpServletResponse-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method. E.g.:&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; userService.find(username, password);\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (user != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n          request.getSession().setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;, user); &lt;span class=&quot;hljs-comment&quot;&gt;// Login user.&lt;/span&gt;\n          response.sendRedirect(&lt;span class=&quot;hljs-string&quot;&gt;&quot;home&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Redirect to home page.&lt;/span&gt;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          request.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Unknown username/password. Please retry.&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Store error message in request scope.&lt;/span&gt;\n          request.getRequestDispatcher(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/login.jsp&quot;&lt;/span&gt;).forward(request, response); &lt;span class=&quot;hljs-comment&quot;&gt;// Forward to JSP page to redisplay login form with error.&lt;/span&gt;\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using &lt;code&gt;${message}&lt;/code&gt; in &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt;), or just taking to the desired target page in case of success.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke some Java code to &lt;strong&gt;control&lt;/strong&gt; the execution plan and/or the destination of the request and the response, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; according to the &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVC&apos;s Front Controller Pattern&lt;/a&gt;. E.g.:&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n          &lt;span class=&quot;hljs-type&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ActionFactory.getAction(request);\n          &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; action.execute(request, response);\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (view.equals(request.getPathInfo().substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) {\n              request.getRequestDispatcher(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/&quot;&lt;/span&gt; + view + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.jsp&quot;&lt;/span&gt;).forward(request, response);\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n              response.sendRedirect(view);\n          }\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ServletException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Executing action failed.&quot;&lt;/span&gt;, e);\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or just adopt an MVC framework like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke some Java code to &lt;strong&gt;control the flow&lt;/strong&gt; inside a JSP page, then you need to grab an (existing) flow control taglib like &lt;a href=&quot;https://jakarta.ee/specifications/tags/1.2/tagdocs/c/tld-summary.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSTL core&lt;/a&gt;. E.g. displaying &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a table:&lt;/p&gt;\n  &lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&amp;gt;\n  ...\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;c:forEach&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${products}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;var&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;${product.name}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;${product.description}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;${product.price}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;c:forEach&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (&lt;em&gt;&quot;Where the heck does this closing brace belong to?&quot;&lt;/em&gt;). An easy aid is to configure your web application to throw an exception whenever &lt;em&gt;scriptlets&lt;/em&gt; are still been used by adding the following piece to &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jsp-config&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jsp-property-group&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scripting-invalid&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scripting-invalid&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jsp-property-group&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jsp-config&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt;, the successor of JSP, which is part of the Java EE provided MVC framework &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, it is already &lt;strong&gt;not&lt;/strong&gt; possible to use &lt;em&gt;scriptlets&lt;/em&gt;. This way you&apos;re automatically forced to do things &quot;the right way&quot;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke some Java code to &lt;strong&gt;access and display&lt;/strong&gt; &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those &lt;code&gt;${}&lt;/code&gt; things. E.g. redisplaying submitted input values:&lt;/p&gt;\n  &lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${param.foo}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;${param.foo}&lt;/code&gt; displays the outcome of &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to invoke some &lt;strong&gt;utility&lt;/strong&gt; Java code directly in the JSP page (typically &lt;code&gt;public static&lt;/code&gt; methods), then you need to define them as EL functions. There&apos;s a standard &lt;a href=&quot;https://jakarta.ee/specifications/tags/1.2/tagdocs/fn/tld-summary.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;functions taglib&lt;/a&gt; in JSTL, but &lt;a href=&quot;https://stackoverflow.com/questions/6395621/how-to-call-a-static-method-in-jsp-el&quot;&gt;you can also easily create functions yourself&lt;/a&gt;. Here&apos;s an example how JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; is useful to prevent &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot; rel=&quot;nofollow noreferrer&quot;&gt;XSS attacks&lt;/a&gt;.&lt;/p&gt;\n  &lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; prefix=&quot;fn&quot; %&amp;gt;\n  ...\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${fn:escapeXml(param.foo)}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in &lt;strong&gt;every&lt;/strong&gt; web application you develop. The problem of &lt;em&gt;scriptlets&lt;/em&gt; is that it provides no way of builtin preventions, at least not using the standard Java API. JSP&apos;s successor Facelets has already implicit HTML escaping, so you don&apos;t need to worry about XSS holes in Facelets.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;See also:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp/2097732#2097732&quot;&gt;What&apos;s the difference between JSP, Servlet and JSF?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables/3106909#3106909&quot;&gt;How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5003142/jsp-using-mvc-and-jdbc&quot;&gt;Basic MVC example with JSP, Servlet and JDBC&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/&quot;&gt;Design patterns in Java web applications&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://balusc.omnifaces.org/2010/01/hidden-features-of-jspservlet.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hidden features of JSP/Servlet&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;As a Safeguard: Disable Scriptlets For Good&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;another question&lt;/a&gt; is discussing, you can and always should disable scriptlets in your &lt;code&gt;web.xml&lt;/code&gt; web application descriptor.&lt;/p&gt;\n\n&lt;p&gt;I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The &lt;code&gt;web.xml&lt;/code&gt; settings look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jsp-config&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jsp-property-group&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scripting-invalid&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scripting-invalid&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jsp-property-group&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jsp-config&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://jstl.java.net/&quot; rel=&quot;noreferrer&quot;&gt;JSTL&lt;/a&gt; offers tags for conditionals, loops, sets, gets, etc. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;c:&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; test=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${someAttribute == &apos;something&apos;}&quot;&lt;/span&gt;&amp;gt;\n   ...\n&amp;lt;/c:&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JSTL works with request attributes - they are most often set in the request by a Servlet, which &lt;em&gt;forwards&lt;/em&gt; to the JSP.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-jsp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%@ page contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt; language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; %&amp;gt;\n&amp;lt;%@ taglib uri=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot;&lt;/span&gt; prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt; %&amp;gt;\n&amp;lt;%@ taglib uri=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/jsp/jstl/fmt&quot;&lt;/span&gt; prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt; %&amp;gt;\n&amp;lt;html&amp;gt;\n    &amp;lt;head&amp;gt;\n    &amp;lt;/head&amp;gt;\n    &amp;lt;body&amp;gt;\n\n        &amp;lt;c:out value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${x + 1}&quot;&lt;/span&gt; /&amp;gt;\n        &amp;lt;c:out value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${param.name}&quot;&lt;/span&gt; /&amp;gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// and so on&lt;/span&gt;\n\n    &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are also component-based frameworks, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Wicket&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wicket&lt;/a&gt;, that generate a lot of the HTML for you.&lt;/p&gt;\n&lt;p&gt;The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in. The result is almost empty-like HTML pages with typical HTML elements. The downside is that there are a lot of components in the &lt;strong&gt;Wicket&lt;/strong&gt; API to learn and some things can be difficult to achieve under those constraints.&lt;/p&gt;\n    ","\n&lt;p&gt;In the MVC architectural pattern, JSPs represent the view layer. Embedding Java code in JSPs is considered a bad practice.&lt;/p&gt;\n&lt;p&gt;You can use &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSTL&lt;/a&gt;, &lt;a href=&quot;http://freemarker.sourceforge.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;freeMarker&lt;/a&gt;, and &lt;a href=&quot;http://velocity.apache.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;velocity&lt;/a&gt; with JSP as a &quot;template engine&quot;.&lt;/p&gt;\n&lt;p&gt;The data provider to those tags &lt;strong&gt;depends on frameworks&lt;/strong&gt; that you are dealing with. &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Struts&quot; rel=&quot;nofollow noreferrer&quot;&gt;Struts&lt;/a&gt; 2 and &lt;a href=&quot;https://en.wikipedia.org/wiki/WebWork&quot; rel=&quot;nofollow noreferrer&quot;&gt;WebWork&lt;/a&gt; as an implementation for the MVC pattern uses &lt;a href=&quot;https://struts.apache.org/tag-developers/ognl&quot; rel=&quot;nofollow noreferrer&quot;&gt;OGNL&lt;/a&gt; &quot;very interesting technique to expose Beans properties to JSP&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Experience has shown that JSP&apos;s have some shortcomings, one of them being hard to avoid mixing markup with actual code.&lt;/p&gt;\n\n&lt;p&gt;If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; approach.&lt;/p&gt;\n    ","\n&lt;p&gt;If you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%@ page contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt; language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; %&amp;gt;\n&amp;lt;% &lt;span class=&quot;hljs-comment&quot;&gt;// Instantiate a JSP controller&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;MyController&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;clr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyController&lt;/span&gt;(request, response);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Process action, if any&lt;/span&gt;\nclr.process(request);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Process page forwarding, if necessary&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Do all variable assignment here&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;showMe&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; clr.getShowMe();%&amp;gt;\n\n&amp;lt;html&amp;gt;\n    &amp;lt;head&amp;gt;\n    &amp;lt;/head&amp;gt;\n    &amp;lt;body&amp;gt;\n        &amp;lt;form name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;frm1&quot;&lt;/span&gt;&amp;gt;\n            &amp;lt;p&amp;gt;&amp;lt;%= showMe %&amp;gt;\n            &amp;lt;p&amp;gt;&amp;lt;% &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String str : clr.listOfStrings()) { %&amp;gt;\n            &amp;lt;p&amp;gt;&amp;lt;%= str %&amp;gt;&amp;lt;% } %&amp;gt;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// And so on   &lt;/span&gt;\n        &amp;lt;/form&amp;gt;\n    &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Learn to customize and write your own tags using JSTL&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Note that EL is &lt;strong&gt;EviL&lt;/strong&gt; (runtime exceptions and refactoring).&lt;/p&gt;\n&lt;p&gt;Wicket may be evil too (performance and toilsome for small applications or simple view tier).&lt;/p&gt;\n&lt;h3&gt;Example from &lt;em&gt;java2s&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;This must be added to the web application&apos;s web.xml&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;taglib&amp;gt;\n    &amp;lt;taglib-uri&amp;gt;/java2s&amp;lt;/taglib-uri&amp;gt;\n    &amp;lt;taglib-location&amp;gt;/WEB-INF/java2s.tld&amp;lt;/taglib-location&amp;gt;\n&amp;lt;/taglib&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create file &lt;em&gt;java2s.tld&lt;/em&gt; in the &lt;em&gt;/WEB-INF/&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;!DOCTYPE taglib\n  PUBLIC &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN&quot;&lt;/span&gt;\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd&quot;&lt;/span&gt;&amp;gt;\n\n&amp;lt;!-- A tab library descriptor --&amp;gt;\n&amp;lt;taglib xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/JSP/TagLibraryDescriptor&quot;&lt;/span&gt;&amp;gt;\n    &amp;lt;tlib-version&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;&amp;lt;/tlib-version&amp;gt;\n    &amp;lt;jsp-version&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;&amp;lt;/jsp-version&amp;gt;\n    &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;-name&amp;gt;Java2s Simple Tags&amp;lt;/&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;-name&amp;gt;\n\n    &amp;lt;!-- This tag manipulates its body content by converting it to upper &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt;\n    --&amp;gt;\n    &amp;lt;tag&amp;gt;\n        &amp;lt;name&amp;gt;bodyContentTag&amp;lt;/name&amp;gt;\n        &amp;lt;tag-class&amp;gt;com.java2s.BodyContentTag&amp;lt;/tag-class&amp;gt;\n        &amp;lt;body-content&amp;gt;JSP&amp;lt;/body-content&amp;gt;\n        &amp;lt;attribute&amp;gt;\n          &amp;lt;name&amp;gt;howMany&amp;lt;/name&amp;gt;\n        &amp;lt;/attribute&amp;gt;\n    &amp;lt;/tag&amp;gt;\n&amp;lt;/taglib&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Compile the following code into &lt;em&gt;WEB-INF\\classes\\com\\java2s&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.java2s;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.jsp.JspWriter;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.jsp.tagext.BodyContent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.jsp.tagext.BodyTagSupport;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BodyContentTag&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BodyTagSupport&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; iterations, howMany;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setHowMany&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.howMany = i;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setBodyContent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(BodyContent bc)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.setBodyContent(bc);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BodyContent = &apos;&quot;&lt;/span&gt; + bc.getString() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doAfterBody&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n            &lt;span class=&quot;hljs-type&quot;&gt;BodyContent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bodyContent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.getBodyContent();\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bodyString&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; bodyContent.getString();\n            &lt;span class=&quot;hljs-type&quot;&gt;JspWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; bodyContent.getEnclosingWriter();\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( iterations % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; )\n                out.print(bodyString.toLowerCase());\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                out.print(bodyString.toUpperCase());\n\n            iterations++;\n            bodyContent.clear(); &lt;span class=&quot;hljs-comment&quot;&gt;// empty buffer for next evaluation&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error in BodyContentTag.doAfterBody()&quot;&lt;/span&gt; + e.getMessage());\n            e.printStackTrace();\n        } &lt;span class=&quot;hljs-comment&quot;&gt;// End of catch&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;retValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SKIP_BODY;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( iterations &amp;lt; howMany )\n            retValue = EVAL_BODY_AGAIN;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retValue;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Start the server and load the bodyContent.jsp file in the browser:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%@ taglib uri=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/java2s&quot;&lt;/span&gt; prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java2s&quot;&lt;/span&gt; %&amp;gt;\n&amp;lt;html&amp;gt;\n    &amp;lt;head&amp;gt;\n        &amp;lt;title&amp;gt;A custom tag: body content&amp;lt;/title&amp;gt;\n    &amp;lt;/head&amp;gt;\n    &amp;lt;body&amp;gt;\n        This page uses a custom tag manipulates its body content.Here is its output:\n        &amp;lt;ol&amp;gt;\n            &amp;lt;java2s:bodyContentTag howMany=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;&amp;gt;\n            &amp;lt;li&amp;gt;java2s.com&amp;lt;/li&amp;gt;\n            &amp;lt;/java2s:bodyContentTag&amp;gt;\n        &amp;lt;/ol&amp;gt;\n    &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Wicket&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wicket&lt;/a&gt; is also an alternative which completely separates Java from HTML, so a designer and programmer can work together and on different sets of code with little understanding of each other.&lt;/p&gt;\n&lt;p&gt;Look at Wicket.&lt;/p&gt;\n    ","\n&lt;p&gt;You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.&lt;/p&gt;\n\n&lt;p&gt;And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.&lt;/p&gt;\n    ","\n&lt;p&gt;In order to avoid Java code in JSP files, Java now provides tag libraries, like JSTL.&lt;/p&gt;\n&lt;p&gt;Also, Java has come up with &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaServer_Faces&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSF&lt;/a&gt; into which you can write all programming structures in the form of tags.&lt;/p&gt;\n    ","\n&lt;p&gt;No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Create a master page called base.tag under your WEB-INF/tags with the following content&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%&lt;span class=&quot;hljs-meta&quot;&gt;@tag&lt;/span&gt; description=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Overall Page template&quot;&lt;/span&gt; pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;%&amp;gt;\n\n&amp;lt;%&lt;span class=&quot;hljs-meta&quot;&gt;@attribute&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt; fragment=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; %&amp;gt;\n\n&amp;lt;html&amp;gt;\n  &amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;  \n       &amp;lt;jsp:invoke fragment=&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;&amp;gt;&amp;lt;/jsp:invoke&amp;gt;\n    &amp;lt;/title&amp;gt;\n\n  &amp;lt;/head&amp;gt;\n  &amp;lt;body&amp;gt;\n    &amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;page-header&quot;&lt;/span&gt;&amp;gt;\n       ....\n    &amp;lt;/div&amp;gt;\n    &amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;page-body&quot;&lt;/span&gt;&amp;gt;\n      &amp;lt;jsp:doBody/&amp;gt;\n    &amp;lt;/div&amp;gt;\n    &amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;page-footer&quot;&lt;/span&gt;&amp;gt;\n      .....\n    &amp;lt;/div&amp;gt;\n  &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;On this mater page, I created a fragment called &quot;title&quot;, so that in the child page, I could insert more codes into this place of the master page. Also, the tag &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; will be replaced by the content of the child page &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Create child page (child.jsp) in your WebContent folder:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  \n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%@ taglib prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;t&quot;&lt;/span&gt; tagdir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/tags&quot;&lt;/span&gt; %&amp;gt;\n\n&amp;lt;t:base&amp;gt;\n    &amp;lt;jsp:attribute name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;&amp;gt; \n        &amp;lt;bean:message key=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello.world&quot;&lt;/span&gt; /&amp;gt;\n    &amp;lt;/jsp:attribute&amp;gt;\n\n    &amp;lt;jsp:body&amp;gt;\n    [Put your content of the child here]\n    &amp;lt;/jsp:body&amp;gt;   \n&amp;lt;/t:base&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; here will replace the &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (&lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) and try to run this page, you will get a &lt;code&gt;JasperException because  Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt;. Therefore, there is no way other people can include the evil code into the jsp file&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Calling this page from your controller:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can easily call the child.jsp file from your controller. This also works nice with the struts framework&lt;/p&gt;\n    ","\n&lt;p&gt;Use JSTL tag libraries in JSP. That will work perfectly.&lt;/p&gt;\n    ","\n&lt;p&gt;Just use the JSTL tag and EL expression.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;If somebody is really against programming in more languages than one&lt;/strong&gt;, I suggest GWT. Theoretically, you can avoid all the JavaScript and HTML elements, because Google Toolkit transforms all the client and shared code to JavaScript. You won&apos;t have problem with them, so you have a webservice without coding in any other languages. You can even use some default CSS from somewhere as it is given by extensions (smartGWT or &lt;a href=&quot;https://en.wikipedia.org/wiki/Vaadin&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vaadin&lt;/a&gt;). You don&apos;t need to learn dozens of annotations.&lt;/p&gt;\n&lt;p&gt;Of course, if you want, you can hack yourself into the depths of the code and inject JavaScript and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I it&apos;s say worth a try, and the basic GWT is well-documented.&lt;/p&gt;\n&lt;p&gt;And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don&apos;t want to deal with the web part or to minimize it.&lt;/p&gt;\n    ","\n&lt;p&gt;A neat idea from the Python world is &lt;em&gt;Template attribute languages&lt;/em&gt;; TAL was introduced by Zope (therefore a.k.a. &quot;Zope Page Templates&quot;, ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one of the above examples could look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:repeat&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product products&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product/name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Example product&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product/description&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;A nice description&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product/price&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1.23&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.&lt;/p&gt;\n&lt;p&gt;There is support for macros and for &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot; rel=&quot;nofollow noreferrer&quot;&gt;internationalisation and localisation&lt;/a&gt; as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;i18n:translate&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Our special offers&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:repeat&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product products&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product/name&quot;&lt;/span&gt;\n            &lt;span class=&quot;hljs-attr&quot;&gt;i18n:translate&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Example product&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product/description&quot;&lt;/span&gt;\n            &lt;span class=&quot;hljs-attr&quot;&gt;i18n:translate&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;A nice description&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tal:content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product/price&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1.23&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If translations of the content are available, they are used.&lt;/p&gt;\n&lt;p&gt;I don&apos;t know very much about the &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java implementation&lt;/a&gt;, though.&lt;/p&gt;\n    ","\n&lt;p&gt;Using scriptlets in JSPs is not a good practice.&lt;/p&gt;\n\n&lt;p&gt;Instead, you can use:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;JSTL tags   &lt;/li&gt;\n&lt;li&gt;EL expressions&lt;/li&gt;\n&lt;li&gt;Custom Tags- you can define your own tags to use.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Please refer to: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/1.4/tutorial/doc/JSTL3.html&quot;&gt;http://docs.oracle.com/javaee/1.4/tutorial/doc/JSTL3.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/1.4/tutorial/doc/JSPIntro7.html&quot;&gt;EL&lt;/a&gt; &lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Sure, replace &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don&apos;t implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.&lt;/p&gt;\n\n&lt;p&gt;I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).&lt;/p&gt;\n\n&lt;p&gt;So I consider as procrastination the activity of defining &quot;layers&quot; or redundant data structures either early in the project or when not specifically required. &amp;nbsp;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Technically, JSP are all converted to Servlets during runtime&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP is technically all Java code during runtime.&lt;/p&gt;\n&lt;p&gt;But to answer the question, &lt;em&gt;tag libraries&lt;/em&gt; are usually used for applying logic (removing Java code) to JSP pages.&lt;/p&gt;\n    ","\n&lt;p&gt;If we use the following things in a Java web application, Java code can be eliminated from the foreground of the JSP file.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Use the MVC architecture for a web application&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use JSP Tags&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;a. Standard Tags&lt;/p&gt;\n&lt;p&gt;b. Custom Tags&lt;/p&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Expression Language&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;How can I avoid Java code in JSP files?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;You can use tab library tags like &lt;strong&gt;JSTL&lt;/strong&gt; in addition to Expression Language (&lt;strong&gt;EL&lt;/strong&gt;). But EL does not work well with JSP. So it&apos;s is probably better to drop JSP completely and use &lt;strong&gt;Facelets&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Facelets&lt;/strong&gt; is the first non JSP page declaration language designed for &lt;strong&gt;JSF (Java Server Faces)&lt;/strong&gt; which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/osqxG.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/osqxG.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://javawebaction.blogspot.fr/2012/05/difference-between-jsp-and-facelets.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using Scriptlets is a very old way and &lt;em&gt;not&lt;/em&gt; recommended. If you want directly output something in your JSP pages, just use &lt;strong&gt;Expression Language (EL)&lt;/strong&gt;  along with &lt;strong&gt;JSTL&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;There are also other options, such as using a templating engine such as Velocity, Freemarker, Thymeleaf, etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.&lt;/p&gt;\n&lt;p&gt;Also, take note that it is not a best practice to do business logic in the view layer. You should perform your business logic in the &lt;em&gt;service&lt;/em&gt; layer,\nand pass the output result to your views through a &lt;em&gt;controller&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use a Backbone.js or AngularJS-like JavaScript framework for UI design\nand fetch the data using a REST API. This will remove the Java dependency from the UI completely.&lt;/p&gt;\n    ","\n&lt;p&gt;Nothing of that is used anymore, my friend. My advice is to decouple the view (CSS, HTML, JavaScript, etc.) from the server.&lt;/p&gt;\n&lt;p&gt;In my case, I do my systems handling the view with Angular and any data needed is brought from the server using REST services.&lt;/p&gt;\n&lt;p&gt;Believe me, this will change the way you design.&lt;/p&gt;\n    ","\n&lt;p&gt;JSP 2.0 has a feature called &lt;strong&gt;&quot;Tag Files&quot;&lt;/strong&gt;, and you can write tags without external Java code and &lt;code&gt;tld&lt;/code&gt;. You need to create a &lt;code&gt;.tag&lt;/code&gt; file and put it in &lt;code&gt;WEB-INF\\tags&lt;/code&gt;. You can even create a directory structure to package your tags.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;/WEB-INF/tags/html/label.tag\n\n&amp;lt;%&lt;span class=&quot;hljs-meta&quot;&gt;@tag&lt;/span&gt; description=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rensders a label with required css class&quot;&lt;/span&gt; pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;%&amp;gt;\n&amp;lt;%&lt;span class=&quot;hljs-meta&quot;&gt;@attribute&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; required=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; description=&lt;span class=&quot;hljs-string&quot;&gt;&quot;The label&quot;&lt;/span&gt;%&amp;gt;\n\n&amp;lt;label class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;control-label control-default&quot;&lt;/span&gt;  id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${name}Label&quot;&lt;/span&gt;&amp;gt;${name}&amp;lt;/label&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use it like&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%@ taglib prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt; tagdir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/tags/html&quot;&lt;/span&gt;%&amp;gt;\n&amp;lt;h:label  name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;customer name&quot;&lt;/span&gt; /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also, you can read the tag body easily:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;/WEB-INF/tags/html/bold.tag\n&amp;lt;%&lt;span class=&quot;hljs-meta&quot;&gt;@tag&lt;/span&gt; description=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bold tag&quot;&lt;/span&gt; pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;%&amp;gt;\n&amp;lt;b&amp;gt;\n  &amp;lt;jsp:doBody/&amp;gt;\n&amp;lt;/b&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use it:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;%@ taglib prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt; tagdir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/tags/bold&quot;&lt;/span&gt;%&amp;gt;\n&amp;lt;h:bold&amp;gt;Make me bold&amp;lt;/h:bold&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The samples are very simple, but you can do lots of complicated tasks here. Please consider you can use other tags (for example: &lt;code&gt;JSTL&lt;/code&gt; which has controlling tags like &lt;code&gt;if/forEcah/chosen&lt;/code&gt; text manipulation like &lt;code&gt;format/contains/uppercase&lt;/code&gt; or even SQL tags &lt;code&gt;select/update&lt;/code&gt;), pass all kind parameters, for example &lt;code&gt;Hashmap&lt;/code&gt;, access &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, ... in your tag file too.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Tag File&lt;/strong&gt; are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.&lt;/p&gt;\n&lt;p&gt;Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.&lt;/p&gt;\n&lt;p&gt;You can use tags not only to avoid Java, but also minimize your HTML codes. I myself try to review HTML code and build tags a lot as soon as I see code duplicates start in my pages.&lt;/p&gt;\n&lt;p&gt;(Even if you end up using Java in your JSP code, which I hope not, you can encapsulate that code in a tag.)&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Make your values and parameters inside your servlet classes&lt;/li&gt;\n&lt;li&gt;Fetch those values and parameters within your JSP using JSTL/Taglib&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The good thing about this approach is that your code is also HTML like\n  code!&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;As many answers says, use JSTL or create your own custom tags. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt; is a good explanation about creating custom tags.&lt;/p&gt;\n    ","\n&lt;p&gt;A lot of the answers here go the &quot;use a framework&quot; route. There&apos;s zero wrong with that. However I don&apos;t think it really answers your question, because frameworks may or may not use JSPs, nor are they designed in any way with removing java use in JSPs as a primary goal. &lt;br&gt;&lt;br&gt;\nThe only good answer to your question &quot;how do I avoid using Java in a JSP&quot; is: you can&apos;t. &lt;br&gt; &lt;br&gt;That&apos;s what JSPs are for - using Java to render HTML with dynamic data/logic.\nThe follow up question might be, how much java should I use in my JSPs.&lt;br&gt; Before we answer that question, you should also ponder, &quot;do I need to use JSPs to build web content using Java?&quot; The answer to that last one is, no. There are many alternatives to JSPs for developing web facing applications using Java. Struts for example does not force you to use JSPs - don&apos;t get me wrong, you can use them and many implementations do, but you don&apos;t absolutely have to. Struts doesn&apos;t even force you to use any HTML. A JSP doesn&apos;t either, but let&apos;s be honest, a JSP producing no HTML is kinda weird. Servlets, famously, allow you to serve any kind of content you like over HTTP dynamically. They are &lt;em&gt;the&lt;/em&gt; primary tech behind pretty much everything java web - JSPs are just HTML templates for servlets, really. &lt;br&gt;\nSo the answer to how much java you should put in a JSP is, &quot;as little as possible&quot;. I of course have java in my JSPs, but it consists exclusively of tag library definitions, session and client variables, and beans encapsulating server side objects. The &amp;lt;%%&amp;gt; tags in my HTML are almost exclusively property calls or variable expressions. Rare exceptions include ultra-specific calculations pertaining to a single page and unlikely to ever be reused; bugfixes stemming from page-specific issues only applying to one page; last minute concatenations and arithmetic stemming from unusual requirements limited in scope to a single page; and other similar cases. In a code set of 1.5 million lines, 3000 JSPs and 5000 classes, there are maybe 100 instances of such unique snippets. It would have been quite possible to make these changes in classes or tag library definitions, but it would have been inordinately complex due to the specificity of each case, taken longer to write and debug, and taken more time as a result to get to my users. It&apos;s a judgement call. But make no mistake, you cannot write JSPs of any meaning with &quot;no java&quot; nor would you want to. The capability is there for a reason.&lt;/p&gt;\n    ","\n&lt;p&gt;Java itself is a very nice language, but heavy usage in the enterprise environment made its standard solutions extremely (ridiculously) difficult. Examples: JSTL, JSF, Wicket, etc.&lt;/p&gt;\n&lt;p&gt;Here is a super lightweight approach to creating a backend in Java:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;don&apos;t use JSP (or any other template engine) at all;&lt;/li&gt;\n&lt;li&gt;use plain HTML templates;&lt;/li&gt;\n&lt;li&gt;use JSOUP to parse HTML templates into Document object;&lt;/li&gt;\n&lt;li&gt;modify Document object using its very intuitive jQuery like methods;&lt;/li&gt;\n&lt;li&gt;return Document.toString() as response to request.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I use it for one of my side projects (hosted Digitalocean $5 droplet, Nginx, Tomcat) and it is very fast: according to Googlebot average response time is about 160 ms.&lt;/p&gt;\n    "],"104":["\n&lt;p&gt;&lt;strong&gt;It drops the students table.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The original code in the school&apos;s program probably looks something like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;q &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO Students VALUES (&apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; FNMName.Text &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;, &apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; LName.Text &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the naive way to add text input into a query, and is &lt;em&gt;very bad&lt;/em&gt;, as you will see.&lt;/p&gt;\n\n&lt;p&gt;After the values from the first name, middle name textbox &lt;em&gt;FNMName.Text&lt;/em&gt; (which is &lt;code&gt;Robert&apos;); DROP TABLE STUDENTS; --&lt;/code&gt;) and the last name textbox &lt;em&gt;LName.Text&lt;/em&gt; (let&apos;s call it &lt;code&gt;Derper&lt;/code&gt;) are concatenated with the rest of the query, the result is now actually &lt;em&gt;two queries&lt;/em&gt; separated by the &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Language_elements&quot; rel=&quot;noreferrer&quot;&gt;statement terminator&lt;/a&gt; (semicolon).  The second query has been &lt;strong&gt;injected&lt;/strong&gt; into the first.  When the code executes this query against the database, it will look like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Students &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; Students; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;, &apos;Derper&apos;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which, in plain English, roughly translates to the two queries:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Add a new record to the Students table with a Name value of &apos;Robert&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Delete the Students table&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Everything past the second query is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms181627.aspx&quot; rel=&quot;noreferrer&quot;&gt;marked as a comment&lt;/a&gt;:  &lt;code&gt;--&apos;, &apos;Derper&apos;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;&apos;&lt;/code&gt; in the student&apos;s name is not a comment, it&apos;s the closing &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms179899.aspx&quot; rel=&quot;noreferrer&quot;&gt;string delimiter&lt;/a&gt;.  Since the student&apos;s name is a string, it&apos;s needed syntactically to complete the hypothetical query.  Injection attacks only work &lt;em&gt;when the SQL query they inject results in valid SQL&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;&lt;sup&gt;Edited &lt;strong&gt;&lt;em&gt;again&lt;/em&gt;&lt;/strong&gt; as per &lt;a href=&quot;https://stackoverflow.com/users/287586/dan04&quot;&gt;dan04&lt;/a&gt;&apos;s astute comment&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s say the name was used in a variable, &lt;code&gt;$Name&lt;/code&gt;.  You then run this query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Students &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&apos;$Name&apos;&lt;/span&gt; )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The code is mistakenly placing anything the user supplied as the variable. You wanted the SQL to be:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;INSERT INTO Students VALUES ( &apos;&lt;kbd&gt;Robert Tables&lt;/kbd&gt;` )&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;But a clever user can supply whatever they want:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;INSERT INTO Students VALUES ( &apos;&lt;kbd&gt;Robert&apos;); DROP TABLE Students; --&lt;/kbd&gt;&apos; )&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;What you get is:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Students &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt; );  &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos; )&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;--&lt;/code&gt; only comments the remainder of the line.&lt;/p&gt;\n    ","\n&lt;p&gt;As everyone else has pointed out already, the &lt;code&gt;&apos;);&lt;/code&gt; closes the original statement and then a second statement follows. Most frameworks, including languages like PHP, have default security settings by now that don&apos;t allow multiple statements in one SQL string. In PHP, for example, you can only run multiple statements in one SQL string by using the &lt;code&gt;mysqli_multi_query&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;You can, however, manipulate an existing SQL statement via SQL injection without having to add a second statement. Let&apos;s say you have a login system which checks a username and a password with this simple select:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;SELECT * FROM users WHERE username=&apos;&quot; . $_REQUEST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;] . &quot;&apos; and (password=&apos;&quot;.$_REQUEST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;].&quot;&apos;)&quot;;\n$&lt;span class=&quot;hljs-keyword&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;mysql_query($query);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you provide &lt;code&gt;peter&lt;/code&gt; as the username and &lt;code&gt;secret&lt;/code&gt; as the password, the resulting SQL string would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;peter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (password&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;secret&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Everything&apos;s fine. Now imagine you provide this string as the password:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; OR &apos;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;=&apos;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the resulting SQL string would be this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;peter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (password&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That would enable you to log in to any account without knowing the password. So you don&apos;t need to be able to use two statements in order to use SQL injection, although you can do more destructive things if you are able to supply multiple statements.&lt;/p&gt;\n    ","\n&lt;p&gt;No, &lt;code&gt;&apos;&lt;/code&gt; isn&apos;t a comment in SQL, but a delimiter.&lt;/p&gt;\n\n&lt;p&gt;Mom supposed the database programmer made a request looking like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;students&apos;&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;first_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;last_name&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;$firstName&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$lastName&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(for example) to add the new student, where the &lt;code&gt;$xxx&lt;/code&gt; variable contents was taken directly out of an HTML form, without checking format nor escaping special characters.&lt;/p&gt;\n\n&lt;p&gt;So if &lt;code&gt;$firstName&lt;/code&gt; contains &lt;code&gt;Robert&apos;); DROP TABLE students; --&lt;/code&gt; the database program will execute the following request directly on the DB: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;students&apos;&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;first_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;last_name&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; students; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;, &apos;XKCD&apos;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ie. it will terminate early the insert statement, execute whatever malicious code the cracker wants, then comment out whatever remainder of code there might be.&lt;/p&gt;\n\n&lt;p&gt;Mmm, I am too slow, I see already 8 answers before mine in the orange band... :-) A popular topic, it seems.&lt;/p&gt;\n    ","\n&lt;h2&gt;TL;DR&lt;/h2&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;-- The application accepts input, in this case &apos;Nancy&apos;, without attempting to\n-- sanitize the input, such as by escaping special characters\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Nancy&apos;);\nINSERT 0 1\n\n-- SQL injection occurs when input into a database command is manipulated to\n-- cause the database server to execute arbitrary SQL\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Robert&apos;); DROP TABLE students; --&apos;);\nINSERT 0 1\nDROP TABLE\n\n-- The student records are now gone - it could have been even worse!\nschool=&amp;gt; SELECT * FROM students;\nERROR:  relation &quot;students&quot; does not exist\nLINE 1: SELECT * FROM students;\n                      ^\n&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;This drops (deletes) the student table.&lt;/h3&gt;\n&lt;p&gt;(&lt;em&gt;All code examples in this answer were run on a PostgreSQL 9.1.2 database server.&lt;/em&gt;)&lt;/p&gt;\n&lt;p&gt;To make it clear what&apos;s happening, let&apos;s try this with a simple table containing only the name field and add a single row:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;school=&amp;gt; CREATE TABLE students (name TEXT PRIMARY KEY);\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index &quot;students_pkey&quot; for table &quot;students&quot;\nCREATE TABLE\nschool=&amp;gt; INSERT INTO students VALUES (&apos;John&apos;);\nINSERT 0 1\n&lt;/pre&gt;\n&lt;p&gt;Let&apos;s assume the application uses the following SQL to insert data into the table:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;INSERT INTO students VALUES (&apos;foobar&apos;);\n&lt;/pre&gt;\n&lt;p&gt;Replace &lt;code&gt;foobar&lt;/code&gt; with the actual name of the student. A normal insert operation would look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;--                            Input:   Nancy\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Nancy&apos;);\nINSERT 0 1\n&lt;/pre&gt;\n&lt;p&gt;When we query the table, we get this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;school=&amp;gt; SELECT * FROM students;\n name\n-------\n John\n Nancy\n(2 rows)\n&lt;/pre&gt;\n&lt;p&gt;What happens when we insert Little Bobby Tables&apos;s name into the table?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;--                            Input:   Robert&apos;); DROP TABLE students; --\nschool=&amp;gt; INSERT INTO students VALUES (&apos;Robert&apos;); DROP TABLE students; --&apos;);\nINSERT 0 1\nDROP TABLE\n&lt;/pre&gt;\n&lt;p&gt;The SQL injection here is the result of the name of the student terminating the statement and including a separate &lt;code&gt;DROP TABLE&lt;/code&gt; command; the two dashes at the end of the input are intended to comment out any leftover code that would otherwise cause an error. The last line of the output confirms that the database server has dropped the table.&lt;/p&gt;\n&lt;p&gt;It&apos;s important to notice that during the &lt;code&gt;INSERT&lt;/code&gt; operation the application isn&apos;t checking the input for any special characters, and is therefore allowing arbitrary input to be entered into the SQL command. This means that a malicious user can insert, into a field normally intended for user input, special symbols such as quotes along with arbitrary SQL code to cause the database system to execute it, hence &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL&amp;nbsp;&lt;em&gt;injection&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The result?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql prettyprint-override&quot;&gt;school=&amp;gt; SELECT * FROM students;\nERROR:  relation &quot;students&quot; does not exist\nLINE 1: SELECT * FROM students;\n                      ^\n&lt;/pre&gt;\n&lt;p&gt;SQL injection is the database equivalent of a remote &lt;a href=&quot;http://en.wikipedia.org/wiki/Arbitrary_code_execution&quot; rel=&quot;nofollow noreferrer&quot;&gt;arbitrary code execution&lt;/a&gt; vulnerability in an operating system or application.  The potential impact of a successful SQL injection attack cannot be underestimated--depending on the database system and application configuration, it can be used by an attacker to cause data loss (as in this case), gain unauthorized access to data, or even execute arbitrary code on the host machine itself.&lt;/p&gt;\n&lt;p&gt;As noted by the XKCD comic, one way of protecting against SQL injection attacks is to sanitize database inputs, such as by escaping special characters, so that they cannot modify the underlying SQL command and therefore cannot cause execution of arbitrary SQL code. This can be done at the application level, and some implementations of parameterized queries operate by sanitizing input.&lt;/p&gt;\n&lt;p&gt;However, sanitizing inputs at the application level may not stop more advanced SQL injection techniques. For example, &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;there are ways to circumvent the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; PHP function&lt;/a&gt;. For added protection, many database systems support &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt;. If properly implemented in the backend, prepared statements can make SQL injection impossible by treating data inputs as semantically separate from the rest of the command.&lt;/p&gt;\n    ","\n&lt;p&gt;Say you naively wrote a student creation method like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;void createStudent(String name) {\n    database.execute(&quot;INSERT INTO students (name) VALUES (&apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;)&quot;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And someone enters the name &lt;code&gt;Robert&apos;); DROP TABLE STUDENTS; --&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;What gets run on the database is this query:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; students (name) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The semicolon ends the insert command and starts another; the -- comments out the rest of the line. The DROP TABLE command is executed...&lt;/p&gt;\n\n&lt;p&gt;This is why bind parameters are a good thing.&lt;/p&gt;\n    ","\n&lt;p&gt;A single quote is the start and end of a string. A semicolon is the end of a statement. So if they were doing a select like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; Students\n&lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt; (Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;NameGetsInsertedHere&amp;gt;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The SQL would become:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; Students\n&lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt; (Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--             ^-------------------------------^&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On some systems, the &lt;code&gt;select&lt;/code&gt; would get ran first followed by the &lt;code&gt;drop&lt;/code&gt; statement! The message is: DONT EMBED VALUES INTO YOUR SQL. Instead use parameters!&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;&apos;);&lt;/code&gt; ends the query, it doesn&apos;t start a comment. Then it drops the students table and comments the rest of the query that was supposed to be executed.&lt;/p&gt;\n    ","\n&lt;p&gt;In this case, &lt;code&gt;&apos;&lt;/code&gt; is not a comment character.  It&apos;s used to delimit string literals.  The comic artist is banking on the idea that the school in question has dynamic sql somewhere that looks something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `Students` (FirstName, LastName) VALUES (&apos;&quot; . $fname . &quot;&apos;, &apos;&quot; . $lname . &quot;&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So now the &lt;code&gt;&apos;&lt;/code&gt; character ends the string literal before the programmer was expecting it.  Combined with the &lt;code&gt;;&lt;/code&gt; character to end the statement, an attacker can now add (inject) whatever sql they want.  The &lt;code&gt;--&lt;/code&gt; comment at the end is to make sure any remaining sql in the original statement does not prevent the query from compiling on the server.&lt;/p&gt;\n&lt;p&gt;FWIW, I also think the comic in question has an important detail wrong: if you &lt;em&gt;&lt;strong&gt;sanitize&lt;/strong&gt;&lt;/em&gt; your database inputs, as the comic suggests, you&apos;re still doing it wrong. Instead, you should think in terms of &lt;em&gt;&lt;strong&gt;quarantining&lt;/strong&gt;&lt;/em&gt; your database inputs, and the correct way to do this is via parameterized queries/prepared statements.&lt;/p&gt;\n    ","\n&lt;p&gt;The writer of the database probably did a &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM STUDENTS WHERE (STUDENT_NAME = &apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; student_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;) AND other stuff&quot;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If student_name is the one given, that does the selection with the name &quot;Robert&quot; and then drops the table.  The &quot;-- &quot; part changes the rest of the given query into a comment.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;&apos;&lt;/code&gt; character in SQL is used  for string constants. In this case it is used for ending the string constant and not for comment.&lt;/p&gt;\n    ","\n&lt;p&gt;This is how it works:\nLets suppose the administrator is looking for records of student  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;Robert&lt;span class=&quot;hljs-string&quot;&gt;&apos;); DROP TABLE STUDENTS; --\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the admin account has high privileges deleting the table from this account is possible.&lt;/p&gt;\n\n&lt;p&gt;The code to retrieve user name from request is&lt;/p&gt;\n\n&lt;p&gt;Now the query would be something like this (to search the student table)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;String query&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;Select * from student where username=&apos;&quot;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;student_name&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&quot;&apos;&quot;;\n\nstatement.executeQuery(query); &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Rest &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the code follows\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The resultant query becomes&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the user input is not sanitized, The above query has is manipulated into 2 parts&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; STUDENTS; &lt;span class=&quot;hljs-comment&quot;&gt;--&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The double dash (--) will just comment out remaining part of the query. &lt;/p&gt;\n\n&lt;p&gt;This is dangerous as it can nullify password authentication, if present&lt;/p&gt;\n\n&lt;p&gt;The first one will do the normal search. &lt;/p&gt;\n\n&lt;p&gt;The second one will drop the table student if the account has sufficient privileges (Generally the school admin account will run such query and will have the privileges talked about above).&lt;/p&gt;\n    ","\n&lt;h1&gt;You don&apos;t need to input form data to make SQL injection. &lt;/h1&gt;\n\n&lt;p&gt;No one pointed this out before so through I might alert some of you. &lt;/p&gt;\n\n&lt;p&gt;Mostly we will try to patch forms input. But this is not the only place where you can get attacked with SQL injection. You can do very simple attack with URL which send data through GET request;\nConsider the fallowing example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;/show?id=1&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt; something&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your url would look \n&lt;a href=&quot;http://yoursite.com/show?id=1&quot; rel=&quot;noreferrer&quot;&gt;http://yoursite.com/show?id=1&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now someone could try something like this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;http:&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;yoursite.com&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt;?id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;TRUNCATE&lt;/span&gt; table_name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try to replace table_name with the real table name. If he get your table name right they would empty your table! &lt;strong&gt;(It is very easy to brut force this URL with simple script)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Your query would look something like this...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&quot;SELECT * FROM page WHERE id = 4;TRUNCATE page&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Example of PHP vulnerable code using PDO:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;?php\n...\n$id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n\n$pdo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PDO($database_dsn, $database_user, $database_pass);\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM page WHERE id = {$id}&quot;;\n$stmt &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $pdo&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;query($query);\n$data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt;(); \n&lt;span class=&quot;hljs-comment&quot;&gt;/************* You have lost your data!!! :( *************/&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Solution - use PDO prepare() &amp;amp; bindParam() methods:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;?php\n...\n$id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM page WHERE id = :idVal&apos;&lt;/span&gt;;\n$stmt &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $pdo&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prepare&lt;/span&gt;($query);\n$stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;bindParam(&lt;span class=&quot;hljs-string&quot;&gt;&apos;idVal&apos;&lt;/span&gt;, $id, PDO::PARAM_INT);\n$stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt;();\n$data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $stmt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;/************* Your data is safe! :) *************/&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n    "],"105":["\n&lt;p&gt;&lt;a href=&quot;https://php.net/manual/en/language.types.string.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;PHP strings&lt;/strong&gt;&lt;/a&gt; can be specified not just in &lt;em&gt;two&lt;/em&gt; ways, but in &lt;strong&gt;four&lt;/strong&gt; ways.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.single&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Single quoted strings&lt;/strong&gt;&lt;/a&gt; will display things almost completely &quot;as is.&quot; Variables and most escape sequences will not be interpreted. The exception is that to display a literal single quote, you can escape it with a back slash &lt;code&gt;\\&apos;&lt;/code&gt;, and to display a back slash, you can escape it with another backslash &lt;code&gt;\\\\&lt;/code&gt; (&lt;strong&gt;So yes, even single quoted strings are parsed&lt;/strong&gt;).&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Double quote strings&lt;/strong&gt;&lt;/a&gt; will display a host of escaped characters (including some regexes), and variables in the strings will be evaluated. An important point here is that &lt;strong&gt;you can use curly braces to isolate the name of the variable you want evaluated&lt;/strong&gt;. For example let&apos;s say you have the variable &lt;code&gt;$type&lt;/code&gt; and you want to &lt;code&gt;echo &quot;The $types are&quot;&lt;/code&gt;. That will look for the variable &lt;code&gt;$types&lt;/code&gt;. To get around this use &lt;code&gt;echo &quot;The {$type}s are&quot;&lt;/code&gt; You can put the left brace before or after the dollar sign. Take a look at &lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing&quot; rel=&quot;noreferrer&quot;&gt;string parsing&lt;/a&gt; to see how to use array variables and such.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Heredoc&lt;/strong&gt;&lt;/a&gt; string syntax works like double quoted strings. It starts with &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;. After this operator, an identifier is provided, then a newline. The string itself follows, and then the same identifier again to close the quotation. You don&apos;t need to escape quotes in this syntax. &lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Nowdoc&lt;/strong&gt;&lt;/a&gt; (since PHP 5.3.0) string syntax works essentially like single quoted strings. The difference is that not even single quotes or backslashes have to be escaped. A nowdoc is identified with the same &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; sequence used for heredocs, but the identifier which follows is enclosed in single quotes, e.g. &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&apos;EOT&apos;&lt;/code&gt;. &lt;strong&gt;No parsing is done in nowdoc.&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;\nSingle quotes inside of single quotes and double quotes inside of double quotes must be escaped:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;He said &quot;What\\&apos;s up?&quot;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;He said \\&quot;What&apos;s up?\\&quot;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Speed:&lt;/strong&gt;&lt;br&gt;\nI would not put too much weight on single quotes being faster than double quotes. They probably are faster in certain situations. Here&apos;s an article &lt;a href=&quot;https://web.archive.org/web/20170703004051/https://www.phplens.com/lens/php-book/optimizing-debugging-php.php&quot; rel=&quot;noreferrer&quot;&gt;explaining one manner in which single and double quotes are essentially equally fast since PHP 4.3&lt;/a&gt; (&lt;code&gt;Useless Optimizations&lt;/code&gt; toward the bottom, section &lt;code&gt;C&lt;/code&gt;). Also, this &lt;a href=&quot;https://www.phpbench.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;benchmarks page&lt;/strong&gt;&lt;/a&gt; has a single vs double quote comparison. Most of the comparisons are the same. There is one comparison where double quotes are slower than single quotes.&lt;/p&gt;\n    ","\n&lt;p&gt;Things get evaluated in double quotes but not in single:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$s&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;dollars&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;This costs a lot of $s.&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// This costs a lot of $s.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This costs a lot of &lt;span class=&quot;hljs-subst&quot;&gt;$s&lt;/span&gt;.&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// This costs a lot of dollars.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;&lt;code&gt;&apos;&lt;/code&gt; Single quoted&lt;/h1&gt;\n\n&lt;p&gt;The simplest way to specify a string is to enclose it in single quotes. Single quote is generally faster, and everything quoted inside treated as plain string.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Start with a simple string&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;String\\&apos;s apostrophe&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;String with a php variable&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;&lt;code&gt;&quot;&lt;/code&gt; Double quoted&lt;/h1&gt;\n\n&lt;p&gt;Use double quotes in PHP to avoid having to use the period to separate code (Note: Use curly braces &lt;code&gt;{}&lt;/code&gt; to include variables if you do not want to use concatenation (&lt;code&gt;.&lt;/code&gt;) operator) in string.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Start with a simple string&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;String&apos;s apostrophe&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;String with a php variable &lt;span class=&quot;hljs-subst&quot;&gt;{$name}&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Is there a performance benefit single quote vs double quote in PHP?&lt;/h2&gt;\n\n&lt;p&gt;Yes. It is slightly faster to use single quotes.&lt;/p&gt;\n\n&lt;p&gt;PHP won&apos;t use additional processing to interpret what is inside the single quote. when you use double quotes PHP has to parse to check if there are any variables within the string.&lt;/p&gt;\n    ","\n&lt;p&gt;A single-quoted string does not have variables within it interpreted.  A double-quoted string does.&lt;/p&gt;\n\n&lt;p&gt;Also, a double-quoted string can contain apostrophes without backslashes, while a single-quoted string can contain unescaped quotation marks.&lt;/p&gt;\n\n&lt;p&gt;The single-quoted strings are faster at runtime because they do not need to be parsed.&lt;/p&gt;\n    ","\n&lt;p&gt;In PHP, both &lt;code&gt;&apos;my name&apos;&lt;/code&gt; and &lt;code&gt;&quot;my name&quot;&lt;/code&gt; are string. You can read more about it &lt;a href=&quot;http://www.php.net/manual/en/book.strings.php&quot; rel=&quot;noreferrer&quot;&gt;at the PHP manual&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Thing you should know are&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;my &lt;span class=&quot;hljs-subst&quot;&gt;$a&lt;/span&gt;&quot;&lt;/span&gt;; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;my name&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$c&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;my $a&apos;&lt;/span&gt;; != &lt;span class=&quot;hljs-string&quot;&gt;&apos;my name&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In PHP, people use single quote to define a constant string, like &lt;code&gt;&apos;a&apos;&lt;/code&gt;, &lt;code&gt;&apos;my name&apos;&lt;/code&gt;, &lt;code&gt;&apos;abc xyz&apos;&lt;/code&gt;, while using double quote to define a string contain identifier like &lt;code&gt;&quot;a $b $c $d&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;And other thing is, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;my name&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is faster than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;my name&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;my &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is slower than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;my &lt;span class=&quot;hljs-subst&quot;&gt;$a&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is true for other used of string.&lt;/p&gt;\n    ","\n&lt;p&gt;Both kinds of enclosed characters are strings.  One type of quote is conveniently used to enclose the other type of quote.  &lt;code&gt;&quot;&apos;&quot;&lt;/code&gt;  and &lt;code&gt;&apos;&quot;&apos;&lt;/code&gt;.   The biggest difference between the types of quotes is that enclosed identifier references are substituted for inside double quotes, but not inside single quotes.&lt;/p&gt;\n    ","\n&lt;p&gt;Some might say that I&apos;m a little off-topic, but here it is anyway:&lt;/p&gt;\n&lt;p&gt;You don&apos;t necessarily have to choose because of your string&apos;s content between:&lt;br&gt;\n&lt;code&gt;echo &quot;It&apos;s \\&quot;game\\&quot; time.&quot;;&lt;/code&gt; or &lt;code&gt;echo &apos;It\\&apos;s &quot;game&quot; time.&apos;;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If you&apos;re familiar with the use of the english quotation marks, and the correct character for the apostrophe, you can use either double or single quotes, because it won&apos;t matter anymore:&lt;br&gt;\n&lt;code&gt;echo &quot;Its game time.&quot;;&lt;/code&gt; and &lt;code&gt;echo &apos;Its game time.&apos;;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Of course you can also add variables if needed. Just don&apos;t forget that they get evaluated only when in double quotes!&lt;/p&gt;\n    "]},"page":"102","randomQuestions":[{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"How do I redirect to another webpage?","slug":"how-do-i-redirect-to-another-webpage-1657384869767"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"HTTP GET with request body","slug":"http-get-with-request-body-1657387379038"},{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"},{"title":"How can I merge properties of two JavaScript objects dynamically?","slug":"how-can-i-merge-properties-of-two-javascript-objects-dynamically-1657387492535"},{"title":"Why does my function that calls an API or launches a coroutine return an empty or null value?","slug":"why-does-my-function-that-calls-an-api-or-launches-a-coroutine-return-an-empty-or-null-value-1657388483820"},{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"Secure hash and salt for PHP passwords","slug":"secure-hash-and-salt-for-php-passwords-1657387363258"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"How do I count the occurrences of a list item?","slug":"how-do-i-count-the-occurrences-of-a-list-item-1657387916234"},{"title":"\"Notice: Undefined variable\", \"Notice: Undefined index\", \"Warning: Undefined array key\", and \"Notice: Undefined offset\" using PHP","slug":"\"notice:-undefined-variable\"-\"notice:-undefined-index\"-\"warning:-undefined-array-key\"-and-\"notice:-undefined-offset\"-using-php-1657384250748"},{"title":"What is the best regular expression to check if a string is a valid URL?","slug":"what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url-1657387618306"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"My regex is matching too much. How do I make it stop? [duplicate]","slug":"my-regex-is-matching-too-much.-how-do-i-make-it-stop-duplicate-1657384845028"},{"title":"In CSS Flexbox, why are there no \"justify-items\" and \"justify-self\" properties?","slug":"in-css-flexbox-why-are-there-no-\"justify-items\"-and-\"justify-self\"-properties-1657384782711"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"How to sum a variable by group","slug":"how-to-sum-a-variable-by-group-1657384838148"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"}]},"__N_SSG":true}