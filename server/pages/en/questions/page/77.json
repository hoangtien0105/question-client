{"pageProps":{"data":{"count":610,"rows":[{"id":230,"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111","postType":"QUESTION","createdAt":"2022-07-09T17:22:26.000Z","updatedAt":"2022-07-09T17:22:26.000Z","tags":[{"id":1552,"name":"precision","slug":"precision","createdAt":"2022-07-09T17:22:26.000Z","updatedAt":"2022-07-09T17:22:26.000Z","Questions_Tags":{"questionId":230,"tagId":1552}}]},{"id":229,"title":"Why use getters and setters/accessors?","slug":"why-use-getters-and-settersaccessors-1657387343971","postType":"QUESTION","createdAt":"2022-07-09T17:22:23.000Z","updatedAt":"2022-07-09T17:22:23.000Z","tags":[{"id":1547,"name":"setter","slug":"setter","createdAt":"2022-07-09T17:22:24.000Z","updatedAt":"2022-07-09T17:22:24.000Z","Questions_Tags":{"questionId":229,"tagId":1547}},{"id":1548,"name":"getter","slug":"getter","createdAt":"2022-07-09T17:22:24.000Z","updatedAt":"2022-07-09T17:22:24.000Z","Questions_Tags":{"questionId":229,"tagId":1548}},{"id":1549,"name":"abstraction","slug":"abstraction","createdAt":"2022-07-09T17:22:24.000Z","updatedAt":"2022-07-09T17:22:24.000Z","Questions_Tags":{"questionId":229,"tagId":1549}}]},{"id":228,"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067","postType":"QUESTION","createdAt":"2022-07-09T17:22:20.000Z","updatedAt":"2022-07-09T17:22:20.000Z","tags":[{"id":1544,"name":"prototypal-inheritance","slug":"prototypal-inheritance","createdAt":"2022-07-09T17:22:20.000Z","updatedAt":"2022-07-09T17:22:20.000Z","Questions_Tags":{"questionId":228,"tagId":1544}}]},{"id":227,"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825","postType":"QUESTION","createdAt":"2022-07-09T17:22:17.000Z","updatedAt":"2022-07-09T17:22:17.000Z","tags":[{"id":1537,"name":"cross-browser","slug":"cross-browser","createdAt":"2022-07-09T17:22:17.000Z","updatedAt":"2022-07-09T17:22:17.000Z","Questions_Tags":{"questionId":227,"tagId":1537}},{"id":1539,"name":"clearfix","slug":"clearfix","createdAt":"2022-07-09T17:22:17.000Z","updatedAt":"2022-07-09T17:22:17.000Z","Questions_Tags":{"questionId":227,"tagId":1539}}]},{"id":226,"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024","postType":"QUESTION","createdAt":"2022-07-09T17:22:15.000Z","updatedAt":"2022-07-09T17:22:15.000Z","tags":[{"id":1531,"name":"angular","slug":"angular","createdAt":"2022-07-09T17:22:15.000Z","updatedAt":"2022-07-09T17:22:15.000Z","Questions_Tags":{"questionId":226,"tagId":1531}},{"id":1533,"name":"typescript","slug":"typescript","createdAt":"2022-07-09T17:22:15.000Z","updatedAt":"2022-07-09T17:22:15.000Z","Questions_Tags":{"questionId":226,"tagId":1533}},{"id":1534,"name":"observable","slug":"observable","createdAt":"2022-07-09T17:22:15.000Z","updatedAt":"2022-07-09T17:22:15.000Z","Questions_Tags":{"questionId":226,"tagId":1534}}]}]},"answers":{"226":["\n&lt;p&gt;&lt;strong&gt;Reason:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The reason that it&apos;s &lt;code&gt;undefined&lt;/code&gt; is that you are making an asynchronous operation. Meaning it&apos;ll take some time to complete the &lt;code&gt;getEventList&lt;/code&gt; method (depending mostly on your network speed).&lt;/p&gt;\n\n&lt;p&gt;So lets look at the http call.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After you actually make (&quot;fire&quot;) your http request with &lt;code&gt;subscribe&lt;/code&gt; you will be &lt;strong&gt;waiting&lt;/strong&gt; for the response. While waiting, javascript will execute the lines below this code and if it encounters synchronous assignments/operations it&apos;ll execute them immediately.&lt;/p&gt;\n\n&lt;p&gt;So after subscribing to the &lt;code&gt;getEventList()&lt;/code&gt; and waiting for the response,&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;console.log(this.myEvents);&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;line will be executed immediately. And the value of it is &lt;code&gt;undefined&lt;/code&gt; before the response arrives from the server (or to whatever that you have initialized it in the first place).&lt;/p&gt;\n\n&lt;p&gt;It is similar to doing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;\n    }, &lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//This prints undefined!&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;hr&gt;\n&lt;strong&gt;Solution:&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;So how do we overcome this problem? We will use the callback function which is the &lt;code&gt;subscribe&lt;/code&gt; method. Because when the data arrives from the server it&apos;ll be inside the &lt;code&gt;subscribe&lt;/code&gt; with the response.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So changing the code to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;-- not undefined anymore&lt;/span&gt;\n    });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will print the response.. after some time.\n&lt;/p&gt;&lt;hr&gt;\n&lt;strong&gt;What you should do:&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;There might be lots of things to do with your response other than just logging it; you should do all these operations inside the callback (inside the &lt;code&gt;subscribe&lt;/code&gt; function), when the data arrives.&lt;/p&gt;\n\n&lt;p&gt;Another thing to mention is that if you come from a &lt;code&gt;Promise&lt;/code&gt; background, the &lt;code&gt;then&lt;/code&gt; callback corresponds to &lt;code&gt;subscribe&lt;/code&gt; with observables.\n&lt;/p&gt;&lt;hr&gt;\n&lt;strong&gt;What you shouldn&apos;t do:&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;You shouldn&apos;t try to change an async operation to a sync operation (not that you can). One of the reasons that we have async operations is to not make the user wait for an operation to complete while they can do other things in that time period. Suppose that one of your async operations takes 3 minutes to complete, if we didn&apos;t have the async operations the interface would froze for 3 minutes.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Suggested Reading:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The original credit to this answer goes to: &lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call&quot;&gt;How do I return the response from an asynchronous call?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;But with the angular2 release we were introduced to typescript and observables so this answer hopefully covers the basics of handling an asynchronous request with observables.&lt;/p&gt;\n    ","\n&lt;p&gt;Making a http call in angular/javascript is asynchronous operation.\nSo when you make http call it will assign new thread to finish this call and start execution next line with another thread.\nThat is why  you are getting undefined value.\nso make below change to resolve this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()  \n      .&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{  \n       &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;  \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;-this become synchronous now  &lt;/span&gt;\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;a href=&quot;https://angular.io/api/common/AsyncPipe&quot; rel=&quot;nofollow noreferrer&quot;&gt;asyncPipe&lt;/a&gt; if you use myEvents only in template.&lt;/p&gt;\n&lt;p&gt;Here example with asyncPipe and Angular4 HttpClient &lt;a href=&quot;https://stackblitz.com/edit/angular-rhioqt?file=app%2Fevent.service.ts&quot; rel=&quot;nofollow noreferrer&quot;&gt;example&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Observables are lazy so you have to subscribe to get the value. You subscribed it properly in your code but simultaneously logged the output outside the &apos;subscribe&apos; block. That&apos;s why it is &apos;undefined&apos;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;\n    });\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Outside the subscribe block &apos;Undefined&apos;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So if you log it inside the subscribe block then it will log response properly.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Inside the subscribe block &apos;http response&apos;&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here the problem is, you are initializing &lt;code&gt;this.myEvents&lt;/code&gt; into &lt;code&gt;subscribe()&lt;/code&gt; which is an asynchronous block while you are doing &lt;code&gt;console.log()&lt;/code&gt; just out of &lt;code&gt;subscribe()&lt;/code&gt; block.\nSo &lt;code&gt;console.log()&lt;/code&gt; getting called before &lt;code&gt;this.myEvents&lt;/code&gt; gets initialized.&lt;/p&gt;\n\n&lt;p&gt;Please move your console.log() code as well inside subscribe() and you are done.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;);\n        });\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The result is undefined because angular process async .\nyou can trying as below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(res));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also make sure that you map your response to a json output. Otherwise it will return plain text. You do it this like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;(): &lt;span class=&quot;hljs-title class_&quot;&gt;Observable&lt;/span&gt;&amp;lt;any&amp;gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; headers = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt;({ &lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt; });\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RequestOptions&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: headers });\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:9999/events/get&quot;&lt;/span&gt;, options)\n            .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();}) &amp;lt;!-- add call to json here\n            .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err;})\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Undefined because the value here is logged before any data from the service is set from that above subscribe service call.  So you have to wait until the ajax call finishes and set the data from the response data. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;(): &lt;span class=&quot;hljs-title class_&quot;&gt;Observable&lt;/span&gt;&amp;lt;any&amp;gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; headers = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt;({ &lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt; });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RequestOptions&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: headers });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:9999/events/get&quot;&lt;/span&gt;, options)\n                .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;)=&amp;gt;&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())\n                .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;)=&amp;gt;&lt;/span&gt; err)\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here make the Console log inside the  subscribe method that will make the log when the data is set in myEvents variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;es&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getEventList&lt;/span&gt;()\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt; = response;\n     &lt;span class=&quot;hljs-comment&quot;&gt;// This prints the value from the response&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myEvents&lt;/span&gt;)\n        }); \n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;To do this you have 2 options:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Suppose we have a service which is returning shipping details array :&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;getShippingPrices&lt;/span&gt;(): &lt;span class=&quot;hljs-title class_&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IShippingDetails&lt;/span&gt;[]&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IShippingDetails&lt;/span&gt;[]&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/assets/shipping.json&apos;&lt;/span&gt;);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;1. Use Async pipe&lt;/strong&gt; : Easy way when you just want to show the result in template&lt;/p&gt;\n&lt;p&gt;In the component class directly assign the observable to variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShippingComponent&lt;/span&gt; implements &lt;span class=&quot;hljs-title class_&quot;&gt;OnInit&lt;/span&gt; {\n  shipOptions1 = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cartService&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getShippingPrices&lt;/span&gt;();\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;private cartService: CartService&lt;/span&gt;) {}\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and then use async pipe in template :&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div *ngFor=&lt;span class=&quot;hljs-string&quot;&gt;&quot;let s of shipOptions1 |async&quot;&lt;/span&gt;&amp;gt;\n  &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;{{s.type}}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Refer: Check the 4th point in this URL\n&lt;a href=&quot;https://angular.io/start/start-data#configuring-the-shippingcomponent-to-use-cartservice&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://angular.io/start/start-data#configuring-the-shippingcomponent-to-use-cartservice&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;2. Use Subscribe&lt;/strong&gt; : When you want to manipulate it or want do some business logic on/from response&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShippingComponent&lt;/span&gt; implements &lt;span class=&quot;hljs-title class_&quot;&gt;OnInit&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attr&quot;&gt;shipOptions2&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;IShippingDetails&lt;/span&gt;[] = [];\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;private cartService: CartService&lt;/span&gt;) {}\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cartService&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getShippingPrices&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;shipOptions2&lt;/span&gt; = response;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//console.log(this.myEvents);&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//All other code using shipOptions2&lt;/span&gt;\n    });\n  }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can simply try this method-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; headers = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Accept&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt;});\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RequestOptions&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: headers});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;http&lt;/span&gt;\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;yourSearchUrlHere&lt;/span&gt;, options) &lt;span class=&quot;hljs-comment&quot;&gt;// the URL which you have defined&lt;/span&gt;\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// using return res.json() will throw error&lt;/span&gt;\n    }\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(err) =&amp;gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    "],"227":["\n&lt;h2&gt;If you don&apos;t need to support IE9 or lower, you can use flexbox freely, and don&apos;t need to use floated layouts.&lt;/h2&gt;\n&lt;p&gt;It&apos;s worth noting that today, the use of floated elements for layout is getting more and more discouraged with the use of better alternatives.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;display: inline-block&lt;/code&gt; - Better&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_flexible_boxes&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flexbox&lt;/a&gt;&lt;/strong&gt; - Best (but limited browser support)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Flexbox is supported from Firefox 18, Chrome 21, Opera 12.10, and Internet Explorer 10, Safari 6.1 (including Mobile Safari) and Android&apos;s default browser 4.4.&lt;/p&gt;\n&lt;p&gt;For a detailed browser list see: &lt;a href=&quot;https://caniuse.com/flexbox&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://caniuse.com/flexbox&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;(Perhaps once its position is established completely, it may be the absolutely recommended way of laying out elements.)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;A clearfix is a way for an element to &lt;strong&gt;automatically clear its child elements&lt;/strong&gt;, so that you don&apos;t need to add additional markup. It&apos;s generally used in &lt;em&gt;float layouts&lt;/em&gt; where elements are floated to be stacked horizontally.&lt;/p&gt;\n&lt;p&gt;The clearfix is a way to combat the &lt;strong&gt;&lt;a href=&quot;https://complexspiral.com/publications/containing-floats/&quot; rel=&quot;nofollow noreferrer&quot;&gt;zero-height container problem&lt;/a&gt;&lt;/strong&gt; for floated elements&lt;/p&gt;\n&lt;p&gt;A clearfix is performed as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; {\n   &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* Older browser do not support empty content */&lt;/span&gt;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;visibility&lt;/span&gt;: hidden;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;: both;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, if you don&apos;t require IE&amp;lt;8 support, the following is fine too:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;: both;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Normally you would need to do something as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;float: left;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Sidebar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;clear: both;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Clear the float --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With clearfix, you only need the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;clearfix&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;float: left;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;clearfix&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Sidebar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- No Clearing div! --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Read about it in &lt;strong&gt;&lt;a href=&quot;https://css-tricks.com/all-about-floats/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this article - by Chris Coyer @ CSS-Tricks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The other answers are correct. But I want to add that it is a relic of the time when people were first learning CSS, and abused &lt;code&gt;float&lt;/code&gt; to do all their layout. &lt;code&gt;float&lt;/code&gt; is meant to do stuff like float images next to long runs of text, but lots of people used it as their primary layout mechanism. Since it wasn&apos;t really meant for that, you need hacks like &quot;clearfix&quot; to make it work.&lt;/p&gt;\n\n&lt;p&gt;These days &lt;code&gt;display: inline-block&lt;/code&gt; is a solid alternative (&lt;a href=&quot;http://www.quirksmode.org/css/display.html&quot;&gt;except for IE6 and IE7&lt;/a&gt;), although more modern browsers are coming with even more useful layout mechanisms under names like flexbox, grid layout, etc.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;clearfix&lt;/code&gt; allows a container to wrap its floated children. Without a &lt;code&gt;clearfix&lt;/code&gt; or equivalent styling, a container does not wrap around its floated children and collapses, just as if its floated children were positioned absolutely.&lt;/p&gt;\n\n&lt;p&gt;There are several versions of the clearfix, with &lt;strong&gt;&lt;a href=&quot;https://github.com/necolas&quot; rel=&quot;noreferrer&quot;&gt;Nicolas Gallagher&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://twitter.com/thierrykoblentz&quot; rel=&quot;noreferrer&quot;&gt;Thierry Koblentz&lt;/a&gt;&lt;/strong&gt; as key authors.&lt;/p&gt;\n\n&lt;p&gt;If you want support for older browsers, it&apos;s best to use this clearfix :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;: both;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt; {\n    *zoom: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In SCSS, you could use the following technique :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;%clearfix {\n    &amp;amp;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:table;\n    }\n\n    &amp;amp;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;:both;\n    }\n\n    &amp;amp; {\n        *zoom:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#clearfixedelement&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@extend&lt;/span&gt; %clearfix;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you don&apos;t care about supporting older browsers, there&apos;s a shorter version :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:table;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;:both;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;To offer an update on the situation on Q2 of 2017.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A new CSS3 display property is available in Firefox 53, &lt;a href=&quot;https://developers.google.com/web/updates/2017/04/nic58#more&quot; rel=&quot;noreferrer&quot;&gt;Chrome 58&lt;/a&gt; and Opera 45. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.clearfix {\n   display: flow-root;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Check the availability for any browser here: &lt;a href=&quot;http://caniuse.com/#feat=flow-root&quot; rel=&quot;noreferrer&quot;&gt;http://caniuse.com/#feat=flow-root&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The element (with a display property set to flow-root) generates a block container box, and lays out its contents using flow layout. It always establishes a new block formatting context for its contents.&lt;/p&gt;\n\n&lt;p&gt;Meaning that if you use a parent div containing one or several floating children, this property is going to ensure the parent encloses all of its children. Without any need for a clearfix hack. On any children, nor even a last dummy element (if you were using the clearfix variant with :before on the last children). &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flow-root;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: Gainsboro;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid Black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item1&lt;/span&gt; {  \n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;120px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;120px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item2&lt;/span&gt; {  \n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;140px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: right;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item3&lt;/span&gt; {  \n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;160px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;110px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  This container box encloses all of its floating children.\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item item1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Floating box 1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item item2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Floating box 2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; \n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item item3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Floating box 3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;  \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Simply put, &lt;strong&gt;clearfix is a hack&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;It is one of those ugly things that we all just have to live with as it is really the only reasonable way of ensuring floated child elements don&apos;t overflow their parents. There are other layout schemes out there but floating is too commonplace in web design/development today to ignore the value of the clearfix hack.&lt;/p&gt;\n\n&lt;p&gt;I personally lean towards the Micro Clearfix solution (Nicolas Gallagher)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.container:before,\n.container:after {\n  content:&quot;&quot;;\n  display:table;\n}\n.container:after {\n  clear:both;\n}\n.container {\n  zoom:1; /* For IE 6/7 (trigger hasLayout) */\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/1633170/643482&quot;&gt;&lt;em&gt;reference&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A technique commonly used in CSS float-based layouts is assigning a handful of CSS properties to an element which you know will contain floating elements. The technique, which is commonly implemented using a class definition called &lt;code&gt;clearfix&lt;/code&gt;, (usually) implements the following CSS behaviors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.clearfix:after {\n    content: &quot;.&quot;;\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n    zoom: 1\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The purpose of these combined behaviors is to create a container &lt;code&gt;:after&lt;/code&gt; the active element containing a single &apos;.&apos; marked as hidden which will clear all preexisting floats and effectively reset the the page for the next piece of content.&lt;/p&gt;\n    ","\n&lt;p&gt;I tried out the accepted answer but I still had a problem with the content alignment.  Adding a &quot;:before&quot; selector as shown below fixed the issue:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;// LESS HELPER\n.clearfix()\n{\n    &amp;amp;:after, &amp;amp;:before{\n       content: &quot; &quot;; /* Older browser do not support empty content */\n       visibility: hidden;\n       display: block;\n       height: 0;\n       clear: both;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;LESS above will compile to CSS below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;clearfix:after,\nclearfix:before {\n  content: &quot; &quot;;\n  /* Older browser do not support empty content */\n  visibility: hidden;\n  display: block;\n  height: 0;\n  clear: both;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The other (and perhaps simplest) option for acheiving a clearfix is to use &lt;code&gt;overflow:hidden;&lt;/code&gt; on the containing element. For example&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: hidden;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.segment-a&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.segment-b&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: right;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;segment-a&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Float left\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;segment-b&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Float right\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Of course this can only be used in instances where you never wish the content to overflow.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a different method same thing but a little different&lt;/p&gt;\n\n&lt;p&gt;the difference is the content dot which is replaced with a &lt;code&gt;\\00A0&lt;/code&gt; == &lt;code&gt;whitespace&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;More on this &lt;a href=&quot;http://www.jqui.net/tips-tricks/css-clearfix/&quot; rel=&quot;nofollow&quot;&gt;http://www.jqui.net/tips-tricks/css-clearfix/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.clearfix:after { content: &quot;\\00A0&quot;; display: block; clear: both; visibility: hidden; line-height: 0; height: 0;}\n.clearfix{ display: inline-block;}\nhtml[xmlns] .clearfix { display: block;}\n* html .clearfix{ height: 1%;}\n.clearfix {display: block}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is a compact version of it... &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.clearfix:after { content: &quot;\\00A0&quot;; display: block; clear: both; visibility: hidden; line-height: 0; height: 0;width:0;font-size: 0px}.clearfix{ display: inline-block;}html[xmlns] .clearfix { display: block;}* html .clearfix{ height: 1%;}.clearfix {display: block}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"228":["\n&lt;p&gt;&lt;strong&gt;Quick answer&lt;/strong&gt;: &lt;br&gt;\nA child scope normally prototypically inherits from its parent scope, but not always.  One exception to this rule is a directive with &lt;code&gt;scope: { ... }&lt;/code&gt; -- this creates an &quot;isolate&quot; scope that does not prototypically inherit.  This construct is often used when creating a &quot;reusable component&quot; directive.&lt;/p&gt;\n\n&lt;p&gt;As for the nuances, scope inheritance is normally straightfoward... until you need &lt;strong&gt;2-way data binding&lt;/strong&gt; (i.e., form elements, ng-model) in the child scope.  Ng-repeat, ng-switch, and ng-include can trip you up if you try to bind to a &lt;strong&gt;primitive&lt;/strong&gt; (e.g., number, string, boolean) in the parent scope from inside the child scope.  It doesn&apos;t work the way most people expect it should work.  The child scope gets its own property that hides/shadows the parent property of the same name.  Your workarounds are&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;define objects in the parent for your model, then reference a property of that object  in the child:  parentObj.someProp&lt;/li&gt;\n&lt;li&gt;use $parent.parentScopeProperty (not always possible, but easier than 1. where possible)&lt;/li&gt;\n&lt;li&gt;define a function on the parent scope, and call it from the child (not always possible)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;New AngularJS developers often do not realize that &lt;code&gt;ng-repeat&lt;/code&gt;, &lt;code&gt;ng-switch&lt;/code&gt;, &lt;code&gt;ng-view&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt; and &lt;code&gt;ng-if&lt;/code&gt; all create new child scopes, so the problem often shows up when these directives are involved. (See &lt;a href=&quot;http://plnkr.co/edit/zZfUQN?p=preview&quot; rel=&quot;noreferrer&quot;&gt;this example&lt;/a&gt; for a quick illustration of the problem.)&lt;/p&gt;\n\n&lt;p&gt;This issue with primitives can be easily avoided by following the &quot;best practice&quot; of &lt;a href=&quot;http://www.youtube.com/watch?v=ZhfUv0spHCY&amp;amp;feature=youtu.be&amp;amp;t=30m&quot; rel=&quot;noreferrer&quot;&gt;always have a &apos;.&apos; in your ng-models&lt;/a&gt;  watch 3 minutes worth. Misko demonstrates the primitive binding issue with &lt;code&gt;ng-switch&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Having a &apos;.&apos; in your models will ensure that prototypal inheritance is in play. So, use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;hljs-string&quot;&gt;&quot;someObj.prop1&quot;&lt;/span&gt;&amp;gt;\n\n&amp;lt;!--rather than\n&amp;lt;input type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prop1&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;`\n--&amp;gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;hr&gt;\n&lt;strong&gt;L-o-n-g answer&lt;/strong&gt;:&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;JavaScript Prototypal Inheritance&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Also placed on the AngularJS wiki:&lt;/strong&gt; &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/angular/angular.js/wiki/Understanding-Scopes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It is important to first have a solid understanding of prototypal inheritance, especially if you are coming from a server-side background and you are more familiar with class-ical inheritance.  So let&apos;s review that first.&lt;/p&gt;\n\n&lt;p&gt;Suppose parentScope has properties aString, aNumber, anArray, anObject, and aFunction.  If childScope prototypically inherits from parentScope, we have:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/aTAGg.png&quot; alt=&quot;prototypal inheritance&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;(Note that to save space, I show the &lt;code&gt;anArray&lt;/code&gt; object as a single blue object with its three values, rather than an single blue object with three separate gray literals.)&lt;/p&gt;\n\n&lt;p&gt;If we try to access a property defined on the parentScope from the child scope, JavaScript will first look in the child scope, not find the property, then look in the inherited scope, and find the property.  (If it didn&apos;t find the property in the parentScope, it would continue up the prototype chain... all the way up to the root scope). So, these are all true:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;childScope.&lt;span class=&quot;hljs-property&quot;&gt;aString&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;parent string&apos;&lt;/span&gt;\nchildScope.&lt;span class=&quot;hljs-property&quot;&gt;anArray&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] === &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\nchildScope.&lt;span class=&quot;hljs-property&quot;&gt;anObject&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;property1&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;parent prop1&apos;&lt;/span&gt;\nchildScope.&lt;span class=&quot;hljs-title function_&quot;&gt;aFunction&lt;/span&gt;() === &lt;span class=&quot;hljs-string&quot;&gt;&apos;parent output&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Suppose we then do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;childScope.&lt;span class=&quot;hljs-property&quot;&gt;aString&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;child string&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The prototype chain is not consulted, and a new aString property is added to the childScope.  &lt;strong&gt;This new property hides/shadows the parentScope property with the same name.&lt;/strong&gt;  This will become very important when we discuss ng-repeat and ng-include below.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/OyVPW.png&quot; alt=&quot;property hiding&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Suppose we then do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;childScope.&lt;span class=&quot;hljs-property&quot;&gt;anArray&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;22&apos;&lt;/span&gt;\nchildScope.&lt;span class=&quot;hljs-property&quot;&gt;anObject&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;property1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;child prop1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The prototype chain is consulted because the objects (anArray and anObject) are not found in the childScope.  The objects are found in the parentScope, and the property values are updated on the original objects.  No new properties are added to the childScope;  no new objects are created.  (Note that in JavaScript arrays and functions are also objects.)&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/2QceU.png&quot; alt=&quot;follow the prototype chain&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Suppose we then do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;childScope.&lt;span class=&quot;hljs-property&quot;&gt;anArray&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;555&lt;/span&gt;]\nchildScope.&lt;span class=&quot;hljs-property&quot;&gt;anObject&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mark&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;country&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;USA&apos;&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The prototype chain is not consulted, and child scope gets two new object properties that hide/shadow the parentScope object properties with the same names.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/hKetH.png&quot; alt=&quot;more property hiding&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Takeaways:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If we read childScope.propertyX, and childScope has propertyX, then the prototype chain is not consulted.&lt;/li&gt;\n&lt;li&gt;If we set childScope.propertyX, the prototype chain is not consulted.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;One last scenario:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; childScope.&lt;span class=&quot;hljs-property&quot;&gt;anArray&lt;/span&gt;\nchildScope.&lt;span class=&quot;hljs-property&quot;&gt;anArray&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] === &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We deleted the childScope property first, then when we try to access the property again, the prototype chain is consulted.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/56uoe.png&quot; alt=&quot;after removing a child property&quot;&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Angular Scope Inheritance&lt;/h2&gt;\n\n&lt;p&gt;The contenders:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The following create new scopes, and inherit prototypically: ng-repeat, ng-include, ng-switch, ng-controller, directive with &lt;code&gt;scope: true&lt;/code&gt;, directive with &lt;code&gt;transclude: true&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The following creates a new scope which does not inherit prototypically: directive with &lt;code&gt;scope: { ... }&lt;/code&gt;.  This creates an &quot;isolate&quot; scope instead.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note, by default, directives do not create new scope -- i.e., the default is &lt;code&gt;scope: false&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;ng-include&lt;/h3&gt;\n\n&lt;p&gt;Suppose we have in our controller:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$scope.&lt;span class=&quot;hljs-property&quot;&gt;myPrimitive&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;;\n$scope.&lt;span class=&quot;hljs-property&quot;&gt;myObject&lt;/span&gt;    = {&lt;span class=&quot;hljs-attr&quot;&gt;aNumber&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in our HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/ng-template&quot;&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/tpl1.html&quot;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPrimitive&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ng-include&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;/tpl1.html&apos;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/ng-template&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/tpl2.html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myObject.aNumber&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ng-include&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;/tpl2.html&apos;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each ng-include generates a new child scope, which prototypically inherits from the parent scope.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/ziDfx.png&quot; alt=&quot;ng-include child scopes&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Typing (say, &quot;77&quot;) into the first input textbox causes the child scope to get a new &lt;code&gt;myPrimitive&lt;/code&gt; scope property that hides/shadows the parent scope property of the same name.  This is probably not what you want/expect.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/7l8dg.png&quot; alt=&quot;ng-include with a primitive&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Typing (say, &quot;99&quot;) into the second input textbox does not result in a new child property.  Because tpl2.html binds the model to an object property, prototypal inheritance kicks in when the ngModel looks for object myObject -- it finds it in the parent scope.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZqqloMS.png&quot; alt=&quot;ng-include with an object&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;We can rewrite the first template to use $parent, if we don&apos;t want to change our model from a primitive to an object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input ng-model=&lt;span class=&quot;hljs-string&quot;&gt;&quot;$parent.myPrimitive&quot;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Typing (say, &quot;22&quot;) into this input textbox does not result in a new child property.  The model is now bound to a property of the parent scope (because $parent is a child scope property that references the parent scope).&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/kd8pj.png&quot; alt=&quot;ng-include with $parent&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail.  I normally don&apos;t show these scope properties in the diagrams.&lt;/p&gt;\n\n&lt;p&gt;For scenarios where form elements are not involved, another solution is to define a function on the parent scope to modify the primitive.  Then ensure the child always calls this function, which will be available to the child scope due to prototypal inheritance. E.g.,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// in the parent scope&lt;/span&gt;\n$scope.&lt;span class=&quot;hljs-property&quot;&gt;setMyPrimitive&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n     $scope.&lt;span class=&quot;hljs-property&quot;&gt;myPrimitive&lt;/span&gt; = value;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is a &lt;a href=&quot;http://jsfiddle.net/mrajcok/jNxyE/&quot; rel=&quot;noreferrer&quot;&gt;sample fiddle&lt;/a&gt; that uses this &quot;parent function&quot; approach.  (The fiddle was written as part of this answer: &lt;a href=&quot;https://stackoverflow.com/a/14104318/215945&quot;&gt;https://stackoverflow.com/a/14104318/215945&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angular.js/issues/1267&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/angular/angular.js/issues/1267&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;ng-switch&lt;/h3&gt;\n\n&lt;p&gt;ng-switch scope inheritance works just like ng-include.  So if you need 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object.  This will avoid child scope hiding/shadowing of parent scope properties.&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410&quot;&gt;AngularJS, bind scope of a switch-case?&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;ng-repeat&lt;/h3&gt;\n\n&lt;p&gt;Ng-repeat works a little differently.  Suppose we have in our controller:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$scope.&lt;span class=&quot;hljs-property&quot;&gt;myArrayOfPrimitives&lt;/span&gt; = [ &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; ];\n$scope.&lt;span class=&quot;hljs-property&quot;&gt;myArrayOfObjects&lt;/span&gt;    = [{&lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;202&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in our HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;ul&amp;gt;&amp;lt;li ng-repeat=&quot;num in myArrayOfPrimitives&quot;&amp;gt;\n       &amp;lt;input ng-model=&quot;num&quot;&amp;gt;\n    &amp;lt;/li&amp;gt;\n&amp;lt;ul&amp;gt;\n&amp;lt;ul&amp;gt;&amp;lt;li ng-repeat=&quot;obj in myArrayOfObjects&quot;&amp;gt;\n       &amp;lt;input ng-model=&quot;obj.num&quot;&amp;gt;\n    &amp;lt;/li&amp;gt;\n&amp;lt;ul&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For each item/iteration, ng-repeat creates a new scope, which prototypically inherits from the parent scope, &lt;strong&gt;but it also assigns the item&apos;s value to a new property on the new child scope&lt;/strong&gt;.  (The name of the new property is the loop variable&apos;s name.)  Here&apos;s what the Angular source code for ng-repeat actually is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;childScope = scope.$new();  &lt;span class=&quot;hljs-comment&quot;&gt;// child scope prototypically inherits from parent scope&lt;/span&gt;\n...\nchildScope[valueIdent] = value;  &lt;span class=&quot;hljs-comment&quot;&gt;// creates a new childScope property&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If item is a primitive (as in myArrayOfPrimitives), essentially a copy of the value is assigned to the new child scope property.  Changing the child scope property&apos;s value (i.e., using ng-model, hence child scope &lt;code&gt;num&lt;/code&gt;) does &lt;strong&gt;not&lt;/strong&gt; change the array the parent scope references.  So in the first ng-repeat above, each child scope gets a &lt;code&gt;num&lt;/code&gt; property that is independent of the myArrayOfPrimitives array:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/nLoiW.png&quot; alt=&quot;ng-repeat with primitives&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;This ng-repeat will not work (like you want/expect it to).  Typing into the textboxes changes the values in the gray boxes, which are only visible in the child scopes.  What we want is for the inputs to affect the myArrayOfPrimitives array, not a child scope primitive property.  To accomplish this, we need to change the model to be an array of objects.&lt;/p&gt;\n\n&lt;p&gt;So, if item is an object, a reference to the original object (not a copy) is assigned to the new child scope property.  Changing the child scope property&apos;s value (i.e., using ng-model, hence &lt;code&gt;obj.num&lt;/code&gt;) &lt;strong&gt;does&lt;/strong&gt; change the object the parent scope references.  So in the second ng-repeat above, we have:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/QSjTJ.png&quot; alt=&quot;ng-repeat with objects&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;(I colored one line gray just so that it is clear where it is going.)&lt;/p&gt;\n\n&lt;p&gt;This works as expected.  Typing into the textboxes changes the values in the gray boxes, which are visible to both the child and parent scopes.&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs&quot;&gt;Difficulty with ng-model, ng-repeat, and inputs&lt;/a&gt; and \n&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;ng-controller&lt;/h3&gt;\n\n&lt;p&gt;Nesting controllers using ng-controller results in normal prototypal inheritance, just like ng-include and ng-switch, so the same techniques apply.\nHowever, &quot;it is considered bad form for two controllers to share information via $scope inheritance&quot; -- &lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&quot; rel=&quot;noreferrer&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&lt;/a&gt;\nA service should be used to share data between controllers instead.&lt;/p&gt;\n\n&lt;p&gt;(If you really want to share data via controllers scope inheritance, there is nothing you need to do.  The child scope will have access to all of the parent scope properties.\nSee also &lt;a href=&quot;https://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771&quot;&gt;Controller load order differs when loading or navigating&lt;/a&gt;)&lt;/p&gt;\n\n&lt;h3&gt;directives&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;default (&lt;code&gt;scope: false&lt;/code&gt;) - the directive does not create a new scope, so there is no inheritance here.  This is easy, but also dangerous because, e.g., a directive might think it is creating a new property on the scope, when in fact it is clobbering an existing property.  This is not a good choice for writing directives that are intended as reusable components.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;scope: true&lt;/code&gt; - the directive creates a new child scope that prototypically inherits from the parent scope.  If more than one directive (on the same DOM element) requests a new scope, only one new child scope is created.  Since we have &quot;normal&quot; prototypal inheritance, this is like ng-include and ng-switch, so be wary of 2-way data binding to parent scope primitives, and child scope hiding/shadowing of parent scope properties.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;scope: { ... }&lt;/code&gt; - the directive creates a new isolate/isolated scope.  It does not prototypically inherit.  This is usually your best choice when creating reusable components, since the directive cannot accidentally read or modify the parent scope.  However, such directives often need access to a few parent scope properties.  The object hash is used to set up two-way binding (using &apos;=&apos;) or one-way binding (using &apos;@&apos;) between the parent scope and the isolate scope.  There is also &apos;&amp;amp;&apos; to bind to parent scope expressions.  So, these all create local scope properties that are derived from the parent scope.\nNote that attributes are used to help set up the binding -- you can&apos;t just reference parent scope property names in the object hash, you have to use an attribute.  E.g., this won&apos;t work if you want to bind to parent property &lt;code&gt;parentProp&lt;/code&gt; in the isolated scope: &lt;code&gt;&amp;lt;div my-directive&amp;gt;&lt;/code&gt; and &lt;code&gt;scope: { localProp: &apos;@parentProp&apos; }&lt;/code&gt;.  An attribute must be used to specify each parent property that the directive wants to bind to: &lt;code&gt;&amp;lt;div my-directive the-Parent-Prop=parentProp&amp;gt;&lt;/code&gt; and &lt;code&gt;scope: { localProp: &apos;@theParentProp&apos; }&lt;/code&gt;.\n&lt;br&gt;Isolate scope&apos;s &lt;code&gt;__proto__&lt;/code&gt; references Object.\nIsolate scope&apos;s $parent references the parent scope, so although it is isolated and doesn&apos;t inherit prototypically from the parent scope, it is still a child scope.\n&lt;br&gt;For the picture below we have\n&lt;br&gt;  &lt;code&gt;&amp;lt;my-directive interpolated=&quot;{{parentProp1}}&quot; twowayBinding=&quot;parentProp2&quot;&amp;gt;&lt;/code&gt; and\n&lt;br&gt;  &lt;code&gt;scope: { interpolatedProp: &apos;@interpolated&apos;, twowayBindingProp: &apos;=twowayBinding&apos; }&lt;/code&gt;\n&lt;br&gt;Also, assume the directive does this in its linking function: &lt;code&gt;scope.someIsolateProp = &quot;I&apos;m isolated&quot;&lt;/code&gt;\n&lt;br&gt; &lt;img src=&quot;https://i.stack.imgur.com/MUxS4.png&quot; alt=&quot;isolated scope&quot;&gt;\n&lt;br&gt;For more information on isolate scopes see &lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&quot; rel=&quot;noreferrer&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;transclude: true&lt;/code&gt; - the directive creates a new &quot;transcluded&quot; child scope, which prototypically inherits from the parent scope.  The transcluded and the isolated scope (if any) are siblings -- the $parent property of each scope references the same parent scope.  When a transcluded and an isolate scope both exist, isolate scope property $$nextSibling will reference the transcluded scope.  I&apos;m not aware of any nuances with the transcluded scope.\n&lt;br&gt;For the picture below, assume the same directive as above with this addition: &lt;code&gt;transclude: true&lt;/code&gt;\n&lt;br&gt;&lt;img src=&quot;https://i.stack.imgur.com/fkWHA.png&quot; alt=&quot;transcluded scope&quot;&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This &lt;a href=&quot;http://jsfiddle.net/mrajcok/7g3QM/&quot; rel=&quot;noreferrer&quot;&gt;fiddle&lt;/a&gt; has a &lt;code&gt;showScope()&lt;/code&gt; function that can be used to examine an isolate and transcluded scope.  See the instructions in the comments in the fiddle.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Summary&lt;/h2&gt;\n\n&lt;p&gt;There are four types of scopes:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with &lt;code&gt;scope: true&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;normal prototypal scope inheritance with a copy/assignment -- ng-repeat.  Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.&lt;/li&gt;\n&lt;li&gt;isolate scope -- directive with &lt;code&gt;scope: {...}&lt;/code&gt;.  This one is not prototypal, but &apos;=&apos;, &apos;@&apos;, and &apos;&amp;amp;&apos; provide a mechanism to access parent scope properties, via attributes.&lt;/li&gt;\n&lt;li&gt;transcluded scope -- directive with &lt;code&gt;transclude: true&lt;/code&gt;.  This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via properties $parent and $$childHead and $$childTail.&lt;/p&gt;\n\n&lt;p&gt;Diagrams were generated with &lt;a href=&quot;/questions/tagged/graphviz&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;graphviz&apos;&quot; rel=&quot;tag&quot;&gt;graphviz&lt;/a&gt; &quot;*.dot&quot; files, which are on &lt;a href=&quot;https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams&quot; rel=&quot;noreferrer&quot;&gt;github&lt;/a&gt;. Tim Caswell&apos;s &quot;&lt;a href=&quot;http://howtonode.org/object-graphs&quot; rel=&quot;noreferrer&quot;&gt;Learning JavaScript with Object Graphs&lt;/a&gt;&quot; was the inspiration for using GraphViz for the diagrams. &lt;/p&gt;\n    ","\n&lt;p&gt;I in no way want to compete with Mark&apos;s answer, but just wanted to highlight the piece that finally made everything click as someone new to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Javascript inheritance and its prototype chain&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Only property reads search the prototype chain, not writes.&lt;/strong&gt; So when you set&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myObject.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It doesn&apos;t look up the chain, but when you set &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myObject.&lt;span class=&quot;hljs-property&quot;&gt;myThing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;there&apos;s a subtle read going on within that write operation&lt;/strong&gt; that tries to look up myThing before writing to its prop. So that&apos;s why writing to object.properties from the child gets at the parent&apos;s objects.&lt;/p&gt;\n    ","\n&lt;p&gt;I would like to add an example of prototypical inheritance with javascript to @Scott Driscoll answer. We&apos;ll be using classical inheritance pattern with Object.create() which is a part of  EcmaScript 5 specification.&lt;/p&gt;\n\n&lt;p&gt;First we create &quot;Parent&quot; object function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then add a prototype to &quot;Parent&quot; object function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = {\n primitive : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n object : {\n    one : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create &quot;Child&quot; object function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Assign child prototype (Make child prototype inherit from parent prototype)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Assign proper &quot;Child&quot; prototype constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Add method &quot;changeProps&quot; to a child prototype, which will rewrite &quot;primitive&quot; property value in Child object and change &quot;object.one&quot; value  both in Child and Parent objects&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;changeProps&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;primitive&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;one&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Initiate Parent (dad) and Child (son) objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dad = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; son = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Call Child (son) changeProps method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;son.&lt;span class=&quot;hljs-title function_&quot;&gt;changeProps&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Check the results.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Parent primitive property did not change&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(dad.&lt;span class=&quot;hljs-property&quot;&gt;primitive&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* 1 */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Child primitive property changed (rewritten)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(son.&lt;span class=&quot;hljs-property&quot;&gt;primitive&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* 2 */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Parent and Child object.one properties changed&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(dad.&lt;span class=&quot;hljs-property&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;one&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* 2 */&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(son.&lt;span class=&quot;hljs-property&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;one&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* 2 */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Working example here &lt;a href=&quot;http://jsbin.com/xexurukiso/1/edit/&quot; rel=&quot;noreferrer&quot;&gt;http://jsbin.com/xexurukiso/1/edit/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;More info on Object.create here &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&lt;/a&gt;&lt;/p&gt;\n    "],"229":["\n&lt;p&gt;&lt;strong&gt;There are actually &lt;em&gt;many good reasons&lt;/em&gt; to consider using accessors&lt;/strong&gt; rather than directly exposing fields of a class - beyond just the argument of encapsulation and making future changes easier. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Here are the some of the reasons I am aware of:&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Encapsulation of behavior associated with getting or setting the property - this allows additional functionality (like validation) to be added more easily later.&lt;/li&gt;\n&lt;li&gt;Hiding the internal representation of the property while exposing a property using an alternative representation.&lt;/li&gt;\n&lt;li&gt;Insulating your public interface from change - allowing the public interface to remain constant while the implementation changes without affecting existing consumers.&lt;/li&gt;\n&lt;li&gt;Controlling the lifetime and memory management (disposal) semantics of the property - particularly important in non-managed memory environments (like C++ or Objective-C).&lt;/li&gt;\n&lt;li&gt;Providing a debugging interception point for when a property changes at runtime - debugging when and where a property changed to a particular value can be quite difficult without this in some languages.&lt;/li&gt;\n&lt;li&gt;Improved interoperability with libraries that are designed to operate against property getter/setters - Mocking, Serialization, and WPF come to mind.&lt;/li&gt;\n&lt;li&gt;Allowing inheritors to change the semantics of how the property behaves and is exposed by overriding the getter/setter methods.&lt;/li&gt;\n&lt;li&gt;Allowing the getter/setter to be passed around as lambda expressions rather than values.&lt;/li&gt;\n&lt;li&gt;Getters and setters can allow different access levels - for example the get may be public, but the set could be protected.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Because 2 weeks (months, years) from now when you realize that your setter needs to do &lt;strong&gt;more&lt;/strong&gt; than just set the value, you&apos;ll also realize that the property has been used directly in 238 other classes :-)&lt;/p&gt;\n    ","\n&lt;p&gt;A public field is not worse than a getter/setter pair that does nothing except returning the field and assigning to it. First, it&apos;s clear that (in most languages) there is no functional difference. Any difference must be in other factors, like maintainability or readability.&lt;/p&gt;\n\n&lt;p&gt;An oft-mentioned advantage of getter/setter pairs, isn&apos;t. There&apos;s this claim that you can change the implementation and your clients don&apos;t have to be recompiled. Supposedly, setters let you add functionality like validation later on and your clients don&apos;t even need to know about it. However, adding validation to a setter is a change to its preconditions, &lt;strong&gt;a violation of the previous contract&lt;/strong&gt;, which was, quite simply, &quot;you can put anything in here, and you can get that same thing later from the getter&quot;.&lt;/p&gt;\n\n&lt;p&gt;So, now that you broke the contract, changing every file in the codebase is something you should want to do, not avoid. If you avoid it you&apos;re making the assumption that all the code assumed the contract for those methods was different.&lt;/p&gt;\n\n&lt;p&gt;If that should not have been the contract, then the interface was allowing clients to put the object in invalid states. &lt;em&gt;That&apos;s the exact opposite of encapsulation&lt;/em&gt; If that field could not really be set to anything from the start, why wasn&apos;t the validation there from the start?&lt;/p&gt;\n\n&lt;p&gt;This same argument applies to other supposed advantages of these pass-through getter/setter pairs: if you later decide to change the value being set, you&apos;re breaking the contract. If you override the default functionality in a derived class, in a way beyond a few harmless modifications (like logging or other non-observable behaviour), you&apos;re breaking the contract of the base class. That is a violation of the Liskov Substitutability Principle, which is seen as one of the tenets of OO.&lt;/p&gt;\n\n&lt;p&gt;If a class has these dumb getters and setters for every field, then it is a class that has no invariants whatsoever, &lt;em&gt;no contract&lt;/em&gt;. Is that really object-oriented design? If all the class has is those getters and setters, it&apos;s just a dumb data holder, and dumb data holders should look like dumb data holders:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; DaysLeft;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ContestantNumber;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Adding pass-through getter/setter pairs to such a class adds no value. Other classes should provide meaningful operations, not just operations that fields already provide. That&apos;s how you can define and maintain useful invariants.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;: &quot;What can I do with an object of this class?&quot;&lt;br&gt;\n  &lt;strong&gt;Designer&lt;/strong&gt;: &quot;You can read and write several variables.&quot;&lt;br&gt;\n  &lt;strong&gt;Client&lt;/strong&gt;: &quot;Oh... cool, I guess?&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There are reasons to use getters and setters, but if those reasons don&apos;t exist, making getter/setter pairs in the name of false encapsulation gods is not a good thing. Valid reasons to make getters or setters include the things often mentioned as the potential changes you can make later, like validation or different internal representations. Or maybe the value should be readable by clients but not writable (for example, reading the size of a dictionary), so a simple getter is a nice choice. But those reasons should be there when you make the choice, and not just as a potential thing you may want later. This is an instance of YAGNI (&lt;em&gt;You Ain&apos;t Gonna Need It&lt;/em&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Lots of people talk about the advantages of getters and setters but I want to play devil&apos;s advocate. Right now I&apos;m debugging a very large program where the programmers decided to make everything getters and setters. That might seem nice, but its a reverse-engineering nightmare.&lt;/p&gt;\n\n&lt;p&gt;Say you&apos;re looking through hundreds of lines of code and you come across this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;person.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s a beautifully simply piece of code until you realize its a setter. Now, you follow that setter and find that it also sets person.firstName, person.lastName, person.isHuman, person.hasReallyCommonFirstName, and calls person.update(), which sends a query out to the database, etc. Oh, that&apos;s where your memory leak was occurring.&lt;/p&gt;\n\n&lt;p&gt;Understanding a local piece of code at first glance is an important property of good readability that getters and setters tend to break. That is why I try to avoid them when I can, and minimize what they do when I use them.&lt;/p&gt;\n    ","\n&lt;p&gt;In a pure object-oriented world getters and setters is a &lt;strong&gt;terrible anti-pattern&lt;/strong&gt;. Read this article: &lt;a href=&quot;http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html&quot; rel=&quot;noreferrer&quot;&gt;Getters/Setters. Evil. Period&lt;/a&gt;. In a nutshell, they encourage programmers to think about objects as of data structures, and this type of thinking is pure procedural (like in COBOL or C). In an object-oriented language there are no data structures, but only objects that expose behavior (not attributes/properties!)&lt;/p&gt;\n\n&lt;p&gt;You may find more about them in Section 3.5 of &lt;a href=&quot;https://www.yegor256.com/elegant-objects.html&quot; rel=&quot;noreferrer&quot;&gt;Elegant Objects&lt;/a&gt; (my book about object-oriented programming).&lt;/p&gt;\n    ","\n&lt;p&gt;There are many reasons. My favorite one is when you need to change the behavior or regulate what you can set on a variable. For instance, lets say you had a setSpeed(int speed) method. But you want that you can only set a maximum speed of 100. You would do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setSpeed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; speed)&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( speed &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; ) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.speed = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.speed = speed;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now what if EVERYWHERE in your code you were using the public field and then you realized you need the above requirement? Have fun hunting down every usage of the public field instead of just modifying your setter.&lt;/p&gt;\n\n&lt;p&gt;My 2 cents :)&lt;/p&gt;\n    ","\n&lt;p&gt;One advantage of accessors and mutators is that you can perform validation.&lt;/p&gt;\n\n&lt;p&gt;For example, if &lt;code&gt;foo&lt;/code&gt; was public, I could easily set it to &lt;code&gt;null&lt;/code&gt; and then someone else could try to call a method on the object. But it&apos;s not there anymore! With a &lt;code&gt;setFoo&lt;/code&gt; method, I could ensure that &lt;code&gt;foo&lt;/code&gt; was never set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Accessors and mutators also allow for encapsulation - if you aren&apos;t supposed to see the value once its set (perhaps it&apos;s set in the constructor and then used by methods, but never supposed to be changed), it will never been seen by anyone. But if you can allow other classes to see or change it, you can provide the proper accessor and/or mutator.&lt;/p&gt;\n    ","\n&lt;p&gt;Depends on your language.  You&apos;ve tagged this &quot;object-oriented&quot; rather than &quot;Java&quot;, so I&apos;d like to point out that ChssPly76&apos;s answer is language-dependent.  In Python, for instance, there is no reason to use getters and setters.  If you need to change the behavior, you can use a property, which wraps a getter and setter around basic attribute access.  Something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Simple&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n   &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_value&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self._value -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_set_value&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, new_value&lt;/span&gt;):\n       self._value = new_value + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_del_value&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n       self.old_values.append(self._value)\n       &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; self._value\n\n   value = &lt;span class=&quot;hljs-built_in&quot;&gt;property&lt;/span&gt;(_get_value, _set_value, _del_value)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Thanks, that really clarified my thinking. Now here is (almost) 10 (almost) good reasons NOT to use getters and setters:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;When you realize you need to do more than just set and get the value, you can just make the field private, which will instantly tell you where you&apos;ve directly accessed it.&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;Any validation you perform in there can only be context free, which validation rarely is in practice.&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;You can change the value being set - this is an absolute nightmare when the caller passes you a value that they [shock horror] want you to store AS IS.&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;You can hide the internal representation - fantastic, so you&apos;re making sure that all these operations are symmetrical right?&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;You&apos;ve insulated your public interface from changes under the sheets - if you were designing an interface and weren&apos;t sure whether direct access to something was OK, then you should have kept designing.&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;Some libraries expect this, but not many - reflection, serialization, mock objects all work just fine with public fields.&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;Inheriting this class, you can override default functionality - in other words you can REALLY confuse callers by not only hiding the implementation but making it inconsistent.&lt;br&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The last three I&apos;m just leaving (N/A or D/C)...&lt;/p&gt;\n    ","\n&lt;p&gt;Well i just want to add that even if sometimes they are necessary for the encapsulation and security of your variables/objects, if we want to code a real Object Oriented Program, then we need to &lt;strong&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html?page=1&quot;&gt;STOP OVERUSING THE ACCESSORS&lt;/a&gt;&lt;/strong&gt;, cause sometimes we depend a lot on them when is not really necessary and that makes almost the same as if we put the variables public.&lt;/p&gt;\n    ","\n&lt;p&gt;EDIT: I answered this question because there are a bunch of people learning programming asking this, and most of the answers are very technically competent, but they&apos;re not as easy to understand if you&apos;re a newbie. We were all newbies, so I thought I&apos;d try my hand at a more newbie friendly answer.&lt;/p&gt;\n\n&lt;p&gt;The two main ones are polymorphism, and validation. Even if it&apos;s just a stupid data structure.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s say we have this simple class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bottle&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; amountOfWaterMl;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacityMl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A very simple class that holds how much liquid is in it, and what its capacity is (in milliliters).&lt;/p&gt;\n\n&lt;p&gt;What happens when I do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Bottle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bot&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bottle&lt;/span&gt;();\nbot.amountOfWaterMl = &lt;span class=&quot;hljs-number&quot;&gt;1500&lt;/span&gt;;\nbot.capacityMl = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Well, you wouldn&apos;t expect that to work, right?\nYou want there to be some kind of sanity check. And worse, what if I never specified the maximum capacity? Oh dear, we have a problem.&lt;/p&gt;\n\n&lt;p&gt;But there&apos;s another problem too. What if bottles were just one type of container? What if we had several containers, all with capacities and amounts of liquid filled? If we could just make an interface, we could let the rest of our program accept that interface, and bottles, jerrycans and all sorts of stuff would just work interchangably. Wouldn&apos;t that be better? Since interfaces demand methods, this is also a good thing.&lt;/p&gt;\n\n&lt;p&gt;We&apos;d end up with something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LiquidContainer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAmountMl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setAmountMl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; amountMl)&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getCapacityMl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Great! And now we just change Bottle to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bottle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LiquidContainer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacityMl;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; amountFilledMl;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Bottle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacityMl, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; amountFilledMl)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.capacityMl = capacityMl;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.amountFilledMl = amountFilledMl;\n    checkNotOverFlow();\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAmountMl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; amountFilledMl;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setAmountMl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; amountMl)&lt;/span&gt; {\n     &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.amountFilled = amountMl;\n     checkNotOverFlow();\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getCapacityMl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; capacityMl;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkNotOverFlow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(amountOfWaterMl &amp;gt; capacityMl) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BottleOverflowException&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ll leave the definition of the BottleOverflowException as an exercise to the reader.&lt;/p&gt;\n\n&lt;p&gt;Now notice how much more robust this is. We can deal with any type of container in our code now by accepting LiquidContainer instead of Bottle. And how these bottles deal with this sort of stuff can all differ. You can have bottles that write their state to disk when it changes, or bottles that save on SQL databases or GNU knows what else.&lt;/p&gt;\n\n&lt;p&gt;And all these can have different ways to handle various whoopsies. The Bottle just checks and if it&apos;s overflowing it throws a RuntimeException. But that might be the wrong thing to do. \n(There is a useful discussion to be had about error handling, but I&apos;m keeping it very simple here on purpose. People in comments will likely point out the flaws of this simplistic approach. ;) )&lt;/p&gt;\n\n&lt;p&gt;And yes, it seems like we go from a very simple idea to getting much better answers quickly.&lt;/p&gt;\n\n&lt;p&gt;Please note also that you can&apos;t change the capacity of a bottle. It&apos;s now set in stone. You could do this with an int by declaring it final. But if this was a list, you could empty it, add new things to it, and so on. You can&apos;t limit the access to touching the innards.&lt;/p&gt;\n\n&lt;p&gt;There&apos;s also the third thing that not everyone has addressed: getters and setters use method calls. That means that they look like normal methods everywhere else does. Instead of having weird specific syntax for DTOs and stuff, you have the same thing everywhere.&lt;/p&gt;\n    ","\n&lt;p&gt;I know it&apos;s a bit late, but I think there are some people who are interested in performance.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve done a little performance test. I wrote a class &quot;NumberHolder&quot; which, well, holds an Integer. You can either read that Integer by using the getter method\n&lt;code&gt;anInstance.getNumber()&lt;/code&gt; or by directly accessing the number by using &lt;code&gt;anInstance.number&lt;/code&gt;. My programm reads the number 1,000,000,000 times, via both ways. That process is repeated five times and the time is printed. I&apos;ve got the following result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Time &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 953ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 741ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 655ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 743ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 656ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 634ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 637ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 629ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 633ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 625ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Time 1 is the direct way, Time 2 is the getter)&lt;/p&gt;\n\n&lt;p&gt;You see, the getter is (almost) always a bit faster. Then I tried with different numbers of cycles. Instead of 1 million, I used 10 million and 0.1 million.\nThe results:&lt;/p&gt;\n\n&lt;p&gt;10 million cycles: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Time &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 6382ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 6351ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 6363ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 6351ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 6350ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 6363ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 6353ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 6357ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 6348ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 6354ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With 10 million cycles, the times are almost the same.\nHere are 100 thousand (0.1 million) cycles:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Time &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 77ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 73ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 94ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 65ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 67ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 63ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 65ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 65ms\nTime &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 66ms, Time &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 63ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also with different amounts of cycles, the getter is a little bit faster than the regular way. I hope this helped you.&lt;/p&gt;\n    ","\n&lt;h2&gt;We use getters and setters:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for reusability&lt;/li&gt;\n&lt;li&gt;to perform validation in later stages of programming&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Getter and setter methods are public interfaces to access private class members.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Encapsulation mantra&lt;/h2&gt;\n\n&lt;p&gt;The encapsulation mantra is to make fields private and methods public.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Getter Methods:&lt;/strong&gt; &lt;em&gt;We can get access to private variables.&lt;/em&gt;&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Setter Methods:&lt;/strong&gt; &lt;em&gt;We can modify private fields.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Even though the getter and setter methods do not add new functionality, we can change our mind come back later to make that method&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;better;&lt;/li&gt;\n&lt;li&gt;safer; and&lt;/li&gt;\n&lt;li&gt;faster.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Anywhere a value can be used, a method that returns that value can be added. Instead of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; - class_name.getValue();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;In layman&apos;s terms&lt;/h2&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/2lgj0.png&quot; alt=&quot;Representation of &amp;quot;Person&amp;quot; class&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Suppose we need to store the details of this &lt;code&gt;Person&lt;/code&gt;. This &lt;code&gt;Person&lt;/code&gt; has the fields &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;sex&lt;/code&gt;. Doing this involves creating methods for &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;sex&lt;/code&gt;. Now if we need create another person, it becomes necessary to create the methods for &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;sex&lt;/code&gt; all over again.&lt;/p&gt;\n\n&lt;p&gt;Instead of doing this, we can create a bean &lt;code&gt;class(Person)&lt;/code&gt; with getter and setter methods.  So tomorrow we can just create objects of this Bean &lt;code&gt;class(Person class)&lt;/code&gt; whenever we need to add a new person (see the figure). Thus we are reusing the fields and methods of bean class, which is much better.&lt;/p&gt;\n    ","\n&lt;p&gt;I spent quite a while thinking this over for the Java case, and I believe the real reasons are:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Code to the interface, not the implementation&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Interfaces only specify methods, not fields&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In other words, the only way you can specify a field in an interface is by providing a method for writing a new value and a method for reading the current value.  &lt;/p&gt;\n\n&lt;p&gt;Those methods are the infamous getter and setter....&lt;/p&gt;\n    ","\n&lt;p&gt;Don&apos;t use getters setters unless needed for your current delivery I.e. Don&apos;t think too much about what would happen in the future, if any thing to be changed its a change request in most of the production applications, systems.&lt;/p&gt;\n\n&lt;p&gt;Think simple, easy, add complexity when needed.&lt;/p&gt;\n\n&lt;p&gt;I would not take advantage of ignorance of business owners of deep technical know how just because I think it&apos;s correct or I like the approach.&lt;/p&gt;\n\n&lt;p&gt;I have massive system written without getters setters only with access modifiers and some methods to validate n perform biz logic. If you absolutely needed the. Use anything.&lt;/p&gt;\n    ","\n&lt;p&gt;It can be useful for lazy-loading.  Say the object in question is stored in a database, and you don&apos;t want to go get it unless you need it.  If the object is retrieved by a getter, then the internal object can be null until somebody asks for it, then you can go get it on the first call to the getter.&lt;/p&gt;\n\n&lt;p&gt;I had a base page class in a project that was handed to me that was loading some data from a couple different web service calls, but the data in those web service calls wasn&apos;t always used in all child pages.  Web services, for all of the benefits, pioneer new definitions of &quot;slow&quot;, so you don&apos;t want to make a web service call if you don&apos;t have to.&lt;/p&gt;\n\n&lt;p&gt;I moved from public fields to getters, and now the getters check the cache, and if it&apos;s not there call the web service.  So with a little wrapping, a lot of web service calls were prevented.&lt;/p&gt;\n\n&lt;p&gt;So the getter saves me from trying to figure out, on each child page, what I will need.  If I need it, I call the getter, and it goes to find it for me if I don&apos;t already have it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;YourType&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;_yourName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; YourType YourName{\n      get\n      {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_yourName == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        {\n          _yourName = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;YourType&lt;/span&gt;();\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _yourName;\n        }\n      }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One aspect I missed in the answers so far, the access specification:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for members you have only one access specification for both setting and getting&lt;/li&gt;\n&lt;li&gt;for setters and getters you can fine tune it and define it separately&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;In languages which don&apos;t support &quot;properties&quot; (C++, Java) or require recompilation of clients when changing fields to properties (C#), using get/set methods is easier to modify. For example, adding validation logic to a setFoo method will not require changing the public interface of a class.&lt;/p&gt;\n\n&lt;p&gt;In languages which support &quot;real&quot; properties (Python, Ruby, maybe Smalltalk?) there is no point to get/set methods.&lt;/p&gt;\n    ","\n&lt;p&gt;One of the basic principals of OO design: &lt;strong&gt;Encapsulation!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It gives you many benefits, one of which being that you can change the implementation of the getter/setter behind the scenes but any consumer of that value will continue to work as long as the data type remains the same.&lt;/p&gt;\n    ","\n&lt;p&gt;You should use getters and setters when:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You&apos;re dealing with something that is conceptually an attribute, but:\n&lt;ul&gt;\n&lt;li&gt;Your language doesn&apos;t have properties (or some similar mechanism, like Tcl&apos;s variable traces), or&lt;/li&gt;\n&lt;li&gt;Your language&apos;s property support isn&apos;t sufficient for this use case, or&lt;/li&gt;\n&lt;li&gt;Your language&apos;s (or sometimes your framework&apos;s) idiomatic conventions encourage getters or setters for this use case.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So this is very rarely a general OO question; it&apos;s a language-specific question, with different answers for different languages (and different use cases).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;From an OO theory point of view, getters and setters are useless. The interface of your class is what it does, not what its state is. (If not, you&apos;ve written the wrong class.) In very simple cases, where what a class does is just, e.g., represent a point in rectangular coordinates,* the attributes are part of the interface; getters and setters just cloud that. But in anything but very simple cases, neither the attributes nor getters and setters are part of the interface.&lt;/p&gt;\n\n&lt;p&gt;Put another way: If you believe that consumers of your class shouldn&apos;t even know that you have a &lt;code&gt;spam&lt;/code&gt; attribute, much less be able to change it willy-nilly, then giving them a &lt;code&gt;set_spam&lt;/code&gt; method is the last thing you want to do.&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;* Even for that simple class, you may not necessarily want to allow setting the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values. If this is really a class, shouldn&apos;t it have methods like &lt;code&gt;translate&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt;, etc.? If it&apos;s only a class because your language doesn&apos;t have records/structs/named tuples, then this isn&apos;t really a question of OO&lt;/sub&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;But nobody is ever doing general OO design. They&apos;re doing design, and implementation, in a specific language. And in some languages, getters and setters are far from useless.&lt;/p&gt;\n\n&lt;p&gt;If your language doesn&apos;t have properties, then the only way to represent something that&apos;s conceptually an attribute, but is actually computed, or validated, etc., is through getters and setters.&lt;/p&gt;\n\n&lt;p&gt;Even if your language does have properties, there may be cases where they&apos;re insufficient or inappropriate. For example, if you want to allow subclasses to control the semantics of an attribute, in languages without dynamic access, a subclass can&apos;t substitute a computed property for an attribute.&lt;/p&gt;\n\n&lt;p&gt;As for the &quot;what if I want to change my implementation later?&quot; question (which is repeated multiple times in different wording in both the OP&apos;s question and the accepted answer): If it really is a pure implementation change, and you started with an attribute, you can change it to a property without affecting the interface. Unless, of course, your language doesn&apos;t support that. So this is really just the same case again.&lt;/p&gt;\n\n&lt;p&gt;Also, it&apos;s important to follow the idioms of the language (or framework) you&apos;re using. If you write beautiful Ruby-style code in C#, any experienced C# developer other than you is going to have trouble reading it, and that&apos;s bad. Some languages have stronger cultures around their conventions than others.and it may not be a coincidence that Java and Python, which are on opposite ends of the spectrum for how idiomatic getters are, happen to have two of the strongest cultures.&lt;/p&gt;\n\n&lt;p&gt;Beyond human readers, there will be libraries and tools that expect you to follow the conventions, and make your life harder if you don&apos;t. Hooking Interface Builder widgets to anything but ObjC properties, or using certain Java mocking libraries without getters, is just making your life more difficult. If the tools are important to you, don&apos;t fight them.&lt;/p&gt;\n    ","\n&lt;p&gt;From a object orientation design standpoint both alternatives can be damaging to the maintenance of the code by weakening the encapsulation of the classes. For a discussion you can look into this excellent article: &lt;a href=&quot;http://typicalprogrammer.com/?p=23&quot; rel=&quot;noreferrer&quot;&gt;http://typicalprogrammer.com/?p=23&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;Code &lt;em&gt;evolves&lt;/em&gt;.  &lt;code&gt;private&lt;/code&gt; is great for when &lt;em&gt;you need data member protection&lt;/em&gt;.  Eventually all classes should be sort of &quot;miniprograms&quot; that have a well-defined interface &lt;em&gt;that you can&apos;t just screw with the internals of&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;That said, &lt;em&gt;software development&lt;/em&gt; isn&apos;t about setting down that final version of the class as if you&apos;re pressing some cast iron statue on the first try.  While you&apos;re working with it, code is more like clay.  &lt;strong&gt;It evolves&lt;/strong&gt; as you develop it and learn more about the problem domain you are solving.  During development classes may interact with each other than they should (dependency you plan to factor out), merge together, or split apart.  So I think the debate boils down to people not wanting to religiously write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getVar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; const { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you have:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;doSomething( obj-&amp;gt;getVar() ) ;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;doSomething( obj-&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ) ;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not only is &lt;code&gt;getVar()&lt;/code&gt; visually noisy, it gives this illusion that &lt;code&gt;gettingVar()&lt;/code&gt; is somehow a more complex process than it really is.  How you (as the class writer) regard the sanctity of &lt;code&gt;var&lt;/code&gt; is particularly confusing to a user of your class if it has a passthru setter -- then it looks like you&apos;re putting up these gates to &quot;protect&quot; something you insist is valuable, (the sanctity of &lt;code&gt;var&lt;/code&gt;) but yet even you concede &lt;code&gt;var&lt;/code&gt;&apos;s protection isn&apos;t worth much by the ability for anyone to just come in and &lt;code&gt;set&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; to whatever value they want, without you even peeking at what they are doing.&lt;/p&gt;\n\n&lt;p&gt;So I program as follows (assuming an &quot;agile&quot; type approach -- ie when I write code not knowing &lt;em&gt;exactly&lt;/em&gt; what it will be doing/don&apos;t have time or experience to plan an elaborate waterfall style interface set):&lt;/p&gt;\n\n&lt;p&gt;1) Start with all public members for basic objects with data and behavior.  This is why in all my C++ &quot;example&quot; code you&apos;ll notice me using &lt;code&gt;struct&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; everywhere.&lt;/p&gt;\n\n&lt;p&gt;2) When an object&apos;s internal behavior for a data member becomes complex enough, (for example, it likes to keep an internal &lt;code&gt;std::list&lt;/code&gt; in some kind of order), accessor type functions are written.  Because I&apos;m programming by myself, I don&apos;t always set the member &lt;code&gt;private&lt;/code&gt; right away, but somewhere down the evolution of the class the member will be &quot;promoted&quot; to either &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;3) Classes that are fully fleshed out and have strict rules about their internals (ie &lt;em&gt;they&lt;/em&gt; know exactly what they are doing, and you are not to &quot;fuck&quot; (technical term) with its internals) are given the &lt;code&gt;class&lt;/code&gt; designation, default private members, and only a select few members are allowed to be &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I find this approach allows me to avoid sitting there and religiously writing getter/setters when a lot of data members get migrated out, shifted around, etc. during the early stages of a class&apos;s evolution.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a good reason to consider using accessors is there is no property inheritance. See next example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestPropertyOverride&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            i++;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getI&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            i = i + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getI&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n        System.out.println(a.i);\n        a.add();\n        System.out.println(a.i);\n        System.out.println(a.getI());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Getters&lt;/strong&gt; and &lt;strong&gt;setters&lt;/strong&gt; are used to implement two of the fundamental aspects of Object Oriented Programming which are: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Abstraction&lt;/li&gt;\n&lt;li&gt;Encapsulation&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Suppose we have an Employee class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.highmark.productConfig.types;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String firstName;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String middleName;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String lastName;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; firstName;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setFirstName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String firstName)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.firstName = firstName;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getMiddleName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; middleName;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setMiddleName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String middleName)&lt;/span&gt; {\n         &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.middleName = middleName;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lastName;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setLastName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String lastName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.lastName = lastName;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getFirstName() + &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getMiddleName() +  &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getLastName();\n    }\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the implementation details of Full Name is hidden from the user and is not accessible directly to the user, unlike a public attribute.   &lt;/p&gt;\n    ","\n&lt;p&gt;If you don&apos;t require any validations and not even need to maintain state i.e. one property depends on another so we need to maintain the state when one is change. You can keep it simple by making field public and not using getter and setters.&lt;/p&gt;\n&lt;p&gt;I think OOPs complicates things as the program grows it becomes nightmare for developer to scale.&lt;/p&gt;\n&lt;p&gt;A simple example; we generate c++ headers from xml. The header contains simple field which does not require any validations. But still as in OOPS accessor  are fashion we generates them  as following.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;const Filed&amp;amp; getfield() const\nField&amp;amp; getField() \n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setfield&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(const Field&amp;amp; field)&lt;/span&gt;{...} \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is very verbose and is not required. a simple&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;struct \n{\n   Field field;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is enough and readable.\nFunctional programming don&apos;t have the concept of data hiding they even don&apos;t require it as they do not mutate the data.&lt;/p&gt;\n    ","\n&lt;p&gt;Getter and setter methods are accessor methods, meaning that they are generally a public interface to change private class members. You use getter and setter methods to define a property. You access getter and setter methods as properties outside the class, even though you define them within the class as methods. Those properties outside the class can have a different name from the property name in the class.&lt;/p&gt;\n\n&lt;p&gt;There are some advantages to using getter and setter methods, such as the ability to let you create members with sophisticated functionality that you can access like properties. They also let you create read-only and write-only properties.&lt;/p&gt;\n\n&lt;p&gt;Even though getter and setter methods are useful, you should be careful not to overuse them because, among other issues, they can make code maintenance more difficult in certain situations. Also, they provide access to your class implementation, like public members. OOP practice discourages direct access to properties within a class.&lt;/p&gt;\n\n&lt;p&gt;When you write classes, you are always encouraged to make as many as possible of your instance variables private and add getter and setter methods accordingly. This is because there are several times when you may not want to let users change certain variables within your classes. For example, if you have a private static method that tracks the number of instances created for a specific class, you don&apos;t want a user to modify that counter using code. Only the constructor statement should increment that variable whenever it&apos;s called. In this situation, you might create a private instance variable and allow a getter method only for the counter variable, which means users are able to retrieve the current value only by using the getter method, and they won&apos;t be able to set new values using the setter method. Creating a getter without a setter is a simple way of making certain variables in your class read-only.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a difference between DataStructure and Object.&lt;/p&gt;\n&lt;p&gt;Datastructure should expose its innards and not behavior.&lt;/p&gt;\n&lt;p&gt;An Object should not expose its innards but it should expose its behavior, which is also known as the Law of Demeter&lt;/p&gt;\n&lt;p&gt;Mostly DTOs are considered more of a datastructure and not Object. They should only expose their data and not behavior. Having Setter/Getter in DataStructure will expose behavior instead of data inside it. This further increases the chance of violation of &lt;strong&gt;Law of Demeter&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Uncle Bob in his book Clean code explained the Law of Demeter.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There is a well-known heuristic called the Law of Demeter that says a\nmodule should not know about the innards of the objects it\nmanipulates. As we saw in the last section, objects hide their data\nand expose operations. This means that an object should not expose its\ninternal structure through accessors because to do so is to expose,\nrather than to hide, its internal structure.&lt;/p&gt;\n&lt;p&gt;More precisely, the Law of Demeter says that a method f of a class C\nshould only call the methods of these:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;C&lt;/li&gt;\n&lt;li&gt;An object created by f&lt;/li&gt;\n&lt;li&gt;An object passed as an argument to f&lt;/li&gt;\n&lt;li&gt;An object held in an instance variable of C&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The method should not invoke methods on objects that are returned by any of the allowed functions.\nIn other words, talk to friends, not to strangers.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So according this, example of LoD violation is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;outputDir&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ctxt.getOptions().getScratchDir().getAbsolutePath();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, the function should call the method of its immediate friend which is ctxt here, It should not call the method of its immediate friend&apos;s friend. but this rule doesn&apos;t apply to data structure. so here if ctxt, option, scratchDir are  datastructure then why to wrap their internal data with some behavior and doing a violation of LoD.&lt;/p&gt;\n&lt;p&gt;Instead, we can do something like this.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;outputDir&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ctxt.options.scratchDir.absolutePath;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This fulfills our needs and doesn&apos;t even violate LoD.&lt;/p&gt;\n&lt;p&gt;Inspired by Clean Code by Robert C. Martin(Uncle Bob)&lt;/p&gt;\n    ","\n&lt;p&gt;Additionally, this is to &quot;future-proof&quot; your class. In particular, changing from a field to a property is an ABI break, so if you do later decide that you need more logic than just &quot;set/get the field&quot;, then you need to break ABI, which of course creates problems for anything else already compiled against your class.&lt;/p&gt;\n    ","\n&lt;p&gt;One other use (in languages that support properties) is that setters and getters can imply that an operation is non-trivial.  Typically, you want to avoid doing anything that&apos;s computationally expensive in a property.&lt;/p&gt;\n    ","\n&lt;p&gt;One relatively modern advantage of getters/setters is that is makes it easier to browse code in tagged (indexed) code editors. E.g. If you want to see who sets a member, you can open the call hierarchy of the setter.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, if the member is public, the tools don&apos;t make it possible to filter read/write access to the member. So you have to trudge though all uses of the member.&lt;/p&gt;\n    "],"230":["\n&lt;p&gt;In most programming languages, floating point numbers are represented a lot like &lt;a href=&quot;http://en.wikipedia.org/wiki/Scientific_notation&quot; rel=&quot;noreferrer&quot;&gt;scientific notation&lt;/a&gt;: with an exponent and a mantissa (also called the significand). A very simple number, say &lt;code&gt;9.2&lt;/code&gt;, is actually this fraction:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;5179139571476070 * 2&lt;sup&gt; -49&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Where the exponent is &lt;code&gt;-49&lt;/code&gt; and the mantissa is &lt;code&gt;5179139571476070&lt;/code&gt;. The reason it is impossible to represent &lt;em&gt;some&lt;/em&gt; decimal numbers this way is that both the exponent and the mantissa must be integers. In other words, all floats must be an &lt;em&gt;integer&lt;/em&gt; multiplied by an &lt;em&gt;integer power of 2&lt;/em&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;9.2&lt;/code&gt; may be simply &lt;code&gt;92/10&lt;/code&gt;, but &lt;strong&gt;10&lt;/strong&gt; cannot be expressed as &lt;strong&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/strong&gt; if &lt;strong&gt;n&lt;/strong&gt; is limited to integer values.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Seeing the Data&lt;/h1&gt;\n\n&lt;p&gt;First, a few functions to &lt;em&gt;see&lt;/em&gt; the components that make a 32- and 64-bit &lt;code&gt;float&lt;/code&gt;. Gloss over these if you only care about the output (example in Python):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;float_to_bin_parts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, bits=&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bits == &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:          &lt;span class=&quot;hljs-comment&quot;&gt;# single precision&lt;/span&gt;\n        int_pack      = &lt;span class=&quot;hljs-string&quot;&gt;&apos;I&apos;&lt;/span&gt;\n        float_pack    = &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;\n        exponent_bits = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n        mantissa_bits = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;\n        exponent_bias = &lt;span class=&quot;hljs-number&quot;&gt;127&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; bits == &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;:        &lt;span class=&quot;hljs-comment&quot;&gt;# double precision. all python floats are this&lt;/span&gt;\n        int_pack      = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Q&apos;&lt;/span&gt;\n        float_pack    = &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;\n        exponent_bits = &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n        mantissa_bits = &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;\n        exponent_bias = &lt;span class=&quot;hljs-number&quot;&gt;1023&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValueError, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bits argument must be 32 or 64&apos;&lt;/span&gt;\n    bin_iter = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;(struct.unpack(int_pack, struct.pack(float_pack, number))[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:].rjust(bits, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;.join(islice(bin_iter, x)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, exponent_bits, mantissa_bits)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There&apos;s a lot of complexity behind that function, and it&apos;d be quite the tangent to explain, but if you&apos;re interested, the important resource for our purposes is the &lt;a href=&quot;http://docs.python.org/2/library/struct.html&quot; rel=&quot;noreferrer&quot;&gt;struct&lt;/a&gt; module.&lt;/p&gt;\n\n&lt;p&gt;Python&apos;s &lt;code&gt;float&lt;/code&gt; is a 64-bit, double-precision number. In other languages such as C, C++, Java and C#, double-precision has a separate type &lt;code&gt;double&lt;/code&gt;, which is often implemented as 64 bits.&lt;/p&gt;\n\n&lt;p&gt;When we call that function with our example, &lt;code&gt;9.2&lt;/code&gt;, here&apos;s what we get:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; float_to_bin_parts(9.2)\n[&apos;0&apos;, &apos;10000000010&apos;, &apos;0010011001100110011001100110011001100110011001100110&apos;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Interpreting the Data&lt;/h1&gt;\n\n&lt;p&gt;You&apos;ll see I&apos;ve split the return value into three components. These components are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sign&lt;/li&gt;\n&lt;li&gt;Exponent&lt;/li&gt;\n&lt;li&gt;Mantissa (also called Significand, or Fraction)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Sign&lt;/h2&gt;\n\n&lt;p&gt;The sign is stored in the first component as a single bit. It&apos;s easy to explain: &lt;code&gt;0&lt;/code&gt; means the float is a positive number; &lt;code&gt;1&lt;/code&gt; means it&apos;s negative. Because &lt;code&gt;9.2&lt;/code&gt; is positive, our sign value is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Exponent&lt;/h2&gt;\n\n&lt;p&gt;The exponent is stored in the middle component as 11 bits. In our case, &lt;code&gt;0b10000000010&lt;/code&gt;. In decimal, that represents the value &lt;code&gt;1026&lt;/code&gt;. A quirk of this component is that you must subtract a number equal to &lt;strong&gt;2&lt;sup&gt;(# of bits) - 1&lt;/sup&gt; - 1&lt;/strong&gt; to get the true exponent; in our case, that means subtracting  &lt;code&gt;0b1111111111&lt;/code&gt; (decimal number &lt;code&gt;1023&lt;/code&gt;) to get the true exponent, &lt;code&gt;0b00000000011&lt;/code&gt; (decimal number 3).&lt;/p&gt;\n\n&lt;h2&gt;Mantissa&lt;/h2&gt;\n\n&lt;p&gt;The mantissa is stored in the third component as 52 bits. However, there&apos;s a quirk to this component as well. To understand this quirk, consider a number in scientific notation, like this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;6.0221413x10&lt;sup&gt;23&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The mantissa would be the &lt;code&gt;6.0221413&lt;/code&gt;. Recall that the mantissa in scientific notation always begins with a single non-zero digit. The same holds true for binary, except that binary only has two digits: &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. So the binary mantissa &lt;em&gt;always&lt;/em&gt; starts with &lt;code&gt;1&lt;/code&gt;! When a float is stored, the &lt;code&gt;1&lt;/code&gt; at the front of the binary mantissa is omitted to save space; we have to place it back at the front of our third element to get the &lt;em&gt;true&lt;/em&gt; mantissa:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1.0010011001100110011001100110011001100110011001100110&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This involves more than just a simple addition, because the bits stored in our third component actually represent the &lt;em&gt;fractional&lt;/em&gt; part of the mantissa, to the right of the &lt;a href=&quot;http://en.wiktionary.org/wiki/radix_point&quot; rel=&quot;noreferrer&quot;&gt;radix point&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;When dealing with decimal numbers, we &quot;move the decimal point&quot; by multiplying or dividing by powers of 10. In binary, we can do the same thing by multiplying or dividing by powers of 2. Since our third element has 52 bits, we divide it by &lt;strong&gt;2&lt;sup&gt;52&lt;/sup&gt;&lt;/strong&gt; to move it 52 places to the right:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;0.0010011001100110011001100110011001100110011001100110&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In decimal notation, that&apos;s the same as dividing &lt;code&gt;675539944105574&lt;/code&gt; by &lt;code&gt;4503599627370496&lt;/code&gt; to get &lt;code&gt;0.1499999999999999&lt;/code&gt;. (This is one example of a ratio that can be expressed exactly in binary, but only approximately in decimal; for more detail, see: &lt;a href=&quot;http://www.wolframalpha.com/input/?i=675539944105574+%2F+4503599627370496&quot; rel=&quot;noreferrer&quot;&gt;675539944105574 / 4503599627370496&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;Now that we&apos;ve transformed the third component into a fractional number, adding &lt;code&gt;1&lt;/code&gt; gives the true mantissa.&lt;/p&gt;\n\n&lt;h2&gt;Recapping the Components&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sign (first component): &lt;code&gt;0&lt;/code&gt; for positive, &lt;code&gt;1&lt;/code&gt; for negative&lt;/li&gt;\n&lt;li&gt;Exponent (middle component): Subtract &lt;strong&gt;2&lt;sup&gt;(# of bits) - 1&lt;/sup&gt; - 1&lt;/strong&gt; to get the true exponent&lt;/li&gt;\n&lt;li&gt;Mantissa (last component): Divide by &lt;strong&gt;2&lt;sup&gt;(# of bits)&lt;/sup&gt;&lt;/strong&gt; and add &lt;code&gt;1&lt;/code&gt; to get the true mantissa&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Calculating the Number&lt;/h1&gt;\n\n&lt;p&gt;Putting all three parts together, we&apos;re given this binary number:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1.0010011001100110011001100110011001100110011001100110 x 10&lt;sup&gt;11&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Which we can then convert from binary to decimal:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1.1499999999999999 x 2&lt;sup&gt;3&lt;/sup&gt; (inexact!)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And multiply to reveal the final representation of the number we started with (&lt;code&gt;9.2&lt;/code&gt;) after being stored as a floating point value:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;9.1999999999999993&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Representing as a Fraction&lt;/h1&gt;\n\n&lt;h2&gt;9.2&lt;/h2&gt;\n\n&lt;p&gt;Now that we&apos;ve built the number, it&apos;s possible to reconstruct it into a simple fraction:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1.0010011001100110011001100110011001100110011001100110 x 10&lt;sup&gt;11&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Shift mantissa to a whole number:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;10010011001100110011001100110011001100110011001100110 x 10&lt;sup&gt;11-110100&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Convert to decimal:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;5179139571476070 x 2&lt;sup&gt;3-52&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Subtract the exponent:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;5179139571476070 x 2&lt;sup&gt;-49&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Turn negative exponent into division:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;5179139571476070 / 2&lt;sup&gt;49&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Multiply exponent:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;5179139571476070 / 562949953421312&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Which equals:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;9.1999999999999993&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;9.5&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; float_to_bin_parts(9.5)\n[&apos;0&apos;, &apos;10000000010&apos;, &apos;0011000000000000000000000000000000000000000000000000&apos;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Already you can see the mantissa is only 4 digits followed by a whole lot of zeroes. But let&apos;s go through the paces.&lt;/p&gt;\n\n&lt;p&gt;Assemble the binary scientific notation:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1.0011 x 10&lt;sup&gt;11&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Shift the decimal point:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;10011 x 10&lt;sup&gt;11-100&lt;/sup&gt;  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Subtract the exponent:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;10011 x 10&lt;sup&gt;-1&lt;/sup&gt;  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Binary to decimal:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;19 x 2&lt;sup&gt;-1&lt;/sup&gt;  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Negative exponent to division:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;19 / 2&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Multiply exponent:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;19 / 2&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Equals:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;9.5&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Further reading&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://floating-point-gui.de/&quot; rel=&quot;noreferrer&quot;&gt;The Floating-Point Guide: What Every Programmer Should Know About Floating-Point Arithmetic, or, Why dont my numbers add up?&lt;/a&gt; (floating-point-gui.de)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html&quot; rel=&quot;noreferrer&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt; (Goldberg 1991)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Double-precision_floating-point_format&quot; rel=&quot;noreferrer&quot;&gt;IEEE Double-precision floating-point format&lt;/a&gt; (Wikipedia)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.python.org/3.4/tutorial/floatingpoint.html&quot; rel=&quot;noreferrer&quot;&gt;Floating Point Arithmetic: Issues and Limitations&lt;/a&gt; (docs.python.org)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://kipirvine.com/asm/workbook/floating_tut.htm&quot; rel=&quot;noreferrer&quot;&gt;Floating Point Binary&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This isn&apos;t a full answer (&lt;a href=&quot;https://stackoverflow.com/a/21895757/1072468&quot;&gt;mhlester&lt;/a&gt; already covered a lot of good ground I won&apos;t duplicate), but I would like to stress how much the representation of a number depends on the base you are working in.&lt;/p&gt;\n&lt;h2&gt;Consider the fraction 2/3&lt;/h2&gt;\n&lt;p&gt;In good-ol&apos; base 10, we typically write it out as something like&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;0.666...&lt;/li&gt;\n&lt;li&gt;0.666&lt;/li&gt;\n&lt;li&gt;0.667&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;When we look at those representations, we tend to associate each of them with the fraction 2/3, even though only the first representation is mathematically equal to the fraction. The second and third representations/approximations have an error on the order of 0.001, which is actually much worse than the error between 9.2 and 9.1999999999999993. In fact, the second representation isn&apos;t even rounded correctly! &lt;em&gt;Nevertheless, we don&apos;t have a problem with 0.666 as an approximation of the number 2/3, &lt;strong&gt;so we shouldn&apos;t really have a problem with how 9.2 is approximated in most programs&lt;/strong&gt;.&lt;/em&gt; (Yes, in some programs it matters.)&lt;/p&gt;\n&lt;h2&gt;Number bases&lt;/h2&gt;\n&lt;p&gt;So here&apos;s where number bases are crucial. If we were trying to represent 2/3 in base 3, then&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(2/3)&lt;sub&gt;10&lt;/sub&gt; = 0.2&lt;sub&gt;3&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In other words, we have an exact, finite representation for the same number by switching bases! The take-away is that even though you can convert any number to any base, &lt;em&gt;all rational numbers have exact finite representations in some bases but not in others&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;To drive this point home, let&apos;s look at 1/2. It might surprise you that even though this perfectly simple number has an exact representation in base 10 and 2, it requires a repeating representation in base 3.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(1/2)&lt;sub&gt;10&lt;/sub&gt; = 0.5&lt;sub&gt;10&lt;/sub&gt; = 0.1&lt;sub&gt;2&lt;/sub&gt; = 0.1111...&lt;sub&gt;3&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;Why are floating point numbers inaccurate?&lt;/h2&gt;\n&lt;p&gt;Because often-times, they are approximating rationals that cannot be represented finitely in base 2 (the digits repeat), and in general they are approximating real (possibly irrational) numbers which may not be representable in finitely many digits in &lt;em&gt;any&lt;/em&gt; base.&lt;/p&gt;\n    ","\n&lt;p&gt;While all of the other answers are good there is still one thing missing:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;It is impossible to represent irrational numbers (e.g. π, &lt;code&gt;sqrt(2)&lt;/code&gt;, &lt;code&gt;log(3)&lt;/code&gt;, etc.) precisely!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;And that actually is why they are called irrational. No amount of bit storage in the world would be enough to hold even one of them. Only &lt;em&gt;symbolic&lt;/em&gt; arithmetic is able to preserve their precision.&lt;/p&gt;\n\n&lt;p&gt;Although if you would limit your math needs to rational numbers only the problem of precision becomes manageable. You would need to store a pair of (possibly very big) integers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to hold the number represented by the fraction &lt;code&gt;a/b&lt;/code&gt;. All your arithmetic would have to be done on fractions just like in highschool math (e.g. &lt;code&gt;a/b * c/d = ac/bd&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;But of course you would still run into the same kind of trouble when &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;sin&lt;/code&gt;, etc. are involved.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For hardware accelerated arithmetic only a limited amount of rational numbers can be represented. Every not-representable number is approximated. Some numbers (i.e. irrational) can never be represented no matter the system.&lt;/p&gt;\n    ","\n&lt;p&gt;There are infinitely many real numbers (so many that you can&apos;t enumerate them), and there are infinitely many rational numbers (it is possible to enumerate them).&lt;/p&gt;\n\n&lt;p&gt;The floating-point representation is a finite one (like anything in a computer) so unavoidably many many many numbers are impossible to represent. In particular, 64 bits only allow you to distinguish among only 18,446,744,073,709,551,616 different values (which is nothing compared to infinity). With the standard convention, 9.2 is not one of them. Those that can are of the form m.2^e for some integers m and e.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You might come up with a different numeration system, 10 based for instance, where 9.2 would have an exact representation. But other numbers, say 1/3, would still be impossible to represent.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Also note that double-precision floating-points numbers are &lt;em&gt;extremely&lt;/em&gt; accurate. They can represent any number in a very wide range with as much as 15 exact digits. For daily life computations, 4 or 5 digits are more than enough. You will never really need those 15, unless you want to count every millisecond of your lifetime.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Why can we not represent 9.2 in binary floating point?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Floating point numbers are (simplifying slightly) a positional numbering system with a restricted number of digits and a movable radix point.&lt;/p&gt;\n\n&lt;p&gt;A fraction can only be expressed exactly using a finite number of digits in a positional numbering system if the prime factors of the denominator (when the fraction is expressed in it&apos;s lowest terms) are factors of the base.&lt;/p&gt;\n\n&lt;p&gt;The prime factors of 10 are 5 and 2, so in base 10 we can represent any fraction of the form a/(2&lt;sup&gt;b&lt;/sup&gt;5&lt;sup&gt;c&lt;/sup&gt;). &lt;/p&gt;\n\n&lt;p&gt;On the other hand the only prime factor of 2 is 2, so in base 2 we can only represent fractions of the form a/(2&lt;sup&gt;b&lt;/sup&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Why do computers use this representation?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Because it&apos;s a simple format to work with and it is sufficiently accurate for most purposes. Basically the same reason scientists use &quot;scientific notation&quot; and round their results to a reasonable number of digits at each step.&lt;/p&gt;\n\n&lt;p&gt;It would certainly be possible to define a fraction format, with (for example) a 32-bit numerator and a 32-bit denominator. It would be able to represent numbers that IEEE double precision floating point could not, but equally there would be many numbers that can be represented in double precision floating point that could not be represented in such a fixed-size fraction format. &lt;/p&gt;\n\n&lt;p&gt;However the big problem is that such a format is a pain to do calculations on. For two reasons.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If you want to have exactly one representation of each number then after each calculation you need to reduce the fraction to it&apos;s lowest terms. That means that for every operation you basically need to do a greatest common divisor calculation.&lt;/li&gt;\n&lt;li&gt;If after your calculation you end up with an unrepresentable result because the numerator or denominator you need to find the closest representable result. This is non-trivil.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Some Languages do offer fraction types, but usually they do it in combination with arbitary precision, this avoids needing to worry about approximating fractions but it creates it&apos;s own problem, when a number passes through a large number of calculation steps the size of the denominator and hence the storage needed for the fraction can explode.&lt;/p&gt;\n\n&lt;p&gt;Some languages also offer decimal floating point types, these are mainly used in scenarios where it is imporant that the results the computer gets match pre-existing rounding rules that were written with humans in mind (chiefly financial calculations). These are slightly more difficult to work with than binary floating point, but the biggest problem is that most computers don&apos;t offer hardware support for them.&lt;/p&gt;\n    "]},"page":"77","randomQuestions":[{"title":"What is a stack trace, and how can I use it to debug my application errors?","slug":"what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors-1657384750732"},{"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"Is there a \"previous sibling\" selector?","slug":"is-there-a-\"previous-sibling\"-selector-1657384771067"},{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"},{"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"SQL select only rows with max value on a column [duplicate]","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292"},{"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658"},{"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983"},{"title":"Sending Email in Android using JavaMail API without using the default/built-in app","slug":"sending-email-in-android-using-javamail-api-without-using-the-defaultbuilt-in-app-1657387883400"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"String.equals versus == [duplicate]","slug":"string.equals-versus-duplicate-1657387599972"}]},"__N_SSG":true}