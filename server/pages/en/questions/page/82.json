{"pageProps":{"data":{"count":610,"rows":[{"id":205,"title":"Why is processing a sorted array faster than processing an unsorted array?","slug":"why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array-1657385497444","postType":"QUESTION","createdAt":"2022-07-09T16:51:37.000Z","updatedAt":"2022-07-09T16:51:37.000Z","tags":[{"id":1454,"name":"performance","slug":"performance","createdAt":"2022-07-09T16:51:37.000Z","updatedAt":"2022-07-09T16:51:37.000Z","Questions_Tags":{"questionId":205,"tagId":1454}},{"id":1455,"name":"cpu-architecture","slug":"cpu-architecture","createdAt":"2022-07-09T16:51:37.000Z","updatedAt":"2022-07-09T16:51:37.000Z","Questions_Tags":{"questionId":205,"tagId":1455}},{"id":1456,"name":"branch-prediction","slug":"branch-prediction","createdAt":"2022-07-09T16:51:37.000Z","updatedAt":"2022-07-09T16:51:37.000Z","Questions_Tags":{"questionId":205,"tagId":1456}}]},{"id":204,"title":"How should I use servlets and Ajax?","slug":"how-should-i-use-servlets-and-ajax-1657385492684","postType":"QUESTION","createdAt":"2022-07-09T16:51:32.000Z","updatedAt":"2022-07-09T16:51:32.000Z","tags":[]},{"id":203,"title":"The 3 different equals","slug":"the-3-different-equals-1657385490242","postType":"QUESTION","createdAt":"2022-07-09T16:51:30.000Z","updatedAt":"2022-07-09T16:51:30.000Z","tags":[]},{"id":202,"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425","postType":"QUESTION","createdAt":"2022-07-09T16:51:28.000Z","updatedAt":"2022-07-09T16:51:28.000Z","tags":[{"id":1443,"name":"vertical-alignment","slug":"vertical-alignment","createdAt":"2022-07-09T16:51:28.000Z","updatedAt":"2022-07-09T16:51:28.000Z","Questions_Tags":{"questionId":202,"tagId":1443}}]},{"id":201,"title":"How do I sort a dictionary by value?","slug":"how-do-i-sort-a-dictionary-by-value-1657385485049","postType":"QUESTION","createdAt":"2022-07-09T16:51:25.000Z","updatedAt":"2022-07-09T16:51:25.000Z","tags":[{"id":1439,"name":"dictionary","slug":"dictionary","createdAt":"2022-07-09T16:51:25.000Z","updatedAt":"2022-07-09T16:51:25.000Z","Questions_Tags":{"questionId":201,"tagId":1439}}]}]},"answers":{"201":["\n&lt;h3&gt;Python 3.7+ or CPython 3.6&lt;/h3&gt;\n&lt;p&gt;Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but &lt;a href=&quot;https://stackoverflow.com/q/39980323/4518341&quot;&gt;it&apos;s an implementation detail&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{k: v &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; item: item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])}\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; item: item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Older Python&lt;/h3&gt;\n&lt;p&gt;It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listprobably a list of tuples.&lt;/p&gt;\n&lt;p&gt;For instance,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;sorted_x&lt;/code&gt; will be a list of tuples sorted by the second element in each tuple. &lt;code&gt;dict(sorted_x) == x&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;And for those wishing to sort on keys instead of values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Python3 since &lt;a href=&quot;https://stackoverflow.com/a/15712231/4293057&quot;&gt;unpacking is not allowed&lt;/a&gt; we can use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; kv: kv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want the output as a dict, you can use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;As simple as: &lt;code&gt;sorted(dict1, key=dict1.get)&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Well, it is actually possible to do a &quot;sort by dictionary values&quot;. Recently I had to do that in a Code Golf (Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549&quot;&gt;Code golf: Word frequency chart&lt;/a&gt;&lt;/em&gt;). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. &lt;/p&gt;\n\n&lt;p&gt;If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\nd = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; text.split():\n    d[w] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then you can get a list of the words, ordered by frequency of use with &lt;a href=&quot;https://docs.python.org/library/functions.html#sorted&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sorted(d, key=d.get)&lt;/code&gt;&lt;/a&gt; - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d, key=d.get, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(w, d[w])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am writing this detailed explanation to illustrate what people often mean by &quot;I can easily sort a dictionary by key, but how do I sort by value&quot; - and I think the original post was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.&lt;/p&gt;\n\n&lt;p&gt;To sort it in descending order just add &lt;code&gt;reverse=True&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;five&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\na = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;five&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Dicts can&apos;t be sorted, but you can build a sorted list from them.&lt;/p&gt;\n\n&lt;p&gt;A sorted list of dict values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.values())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A list of (key, value) pairs, sorted by value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itemgetter\n&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In recent Python 2.7, we have the new &lt;a href=&quot;http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt; type, which remembers the order in which the items were added.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;fourth&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (k, v)\n...\nsecond: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nfourth: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nthird: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nfirst: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fourth&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To make a new ordered dictionary from the original, sorting by the values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d_sorted_by_value = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The OrderedDict behaves like a normal dict:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d_sorted_by_value.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (k, v)\n...\nfirst: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nsecond: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nthird: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nfourth: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d_sorted_by_value\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;fourth&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;UPDATE: 5 DECEMBER 2015 using Python 3.5&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Whilst I found the accepted answer useful, I was also surprised that it hasn&apos;t been updated to reference &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt;&lt;/strong&gt; from the standard library &lt;strong&gt;collections&lt;/strong&gt; module as a viable, modern alternative - designed to solve exactly this type of problem.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itemgetter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The official &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt;&lt;/strong&gt; documentation offers a very similar example too, but using a lambda for the sort function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# regular unsorted dictionary&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by value&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;span class=&quot;hljs-comment&quot;&gt;# OrderedDict([(&apos;pear&apos;, 1), (&apos;orange&apos;, 2), (&apos;banana&apos;, 3), (&apos;apple&apos;, 4)])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Pretty much the same as &lt;a href=&quot;https://stackoverflow.com/a/613207/11044033&quot;&gt;Hank Gay&apos;s answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(value,key) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key,value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mydict.items()])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or optimized slightly as suggested by John Fouhy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;((value,key) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key,value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mydict.items())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;As of &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;Python 3.6&lt;/a&gt; the built-in dict will be ordered&lt;/h1&gt;\n\n&lt;p&gt;Good news, so the OP&apos;s original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order.&lt;/p&gt;\n\n&lt;p&gt;If say the resulting two column table expressions from a database query like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;SELECT a_key, a_value FROM a_table ORDER BY a_value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would be stored in two Python tuples, k_seq and v_seq (aligned by numerical index and with the same length of course), then:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;k_seq = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\nv_seq = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;)\nordered_map = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(k_seq, v_seq))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Allow to output later as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ordered_map.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(k, v)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yielding in this case (for the new Python 3.6+ built-in dict!):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;foo &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nbar &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nbaz &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in the same ordering per value of v.&lt;/p&gt;\n\n&lt;p&gt;Where in the Python 3.5 install on my machine it currently yields:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;bar &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nfoo &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nbaz &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Details:&lt;/h2&gt;\n\n&lt;p&gt;As proposed in 2012 by Raymond Hettinger (cf. mail on python-dev with subject &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2012-December/123028.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;More compact dictionaries with faster iteration&quot;&lt;/a&gt;) and now (in 2016) announced in a mail by Victor Stinner to python-dev with subject &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2016-September/146327.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;Python 3.6 dict becomes compact and gets a private version; and keywords become ordered&quot;&lt;/a&gt; due to the fix/implementation of issue 27350 &lt;a href=&quot;http://bugs.python.org/issue27350&quot; rel=&quot;noreferrer&quot;&gt;&quot;Compact and ordered dict&quot;&lt;/a&gt; in Python 3.6 we will now be able, to use a built-in dict to maintain insert order!!&lt;/p&gt;\n\n&lt;p&gt;Hopefully this will lead to a thin layer OrderedDict implementation as a first step. As @JimFasarakis-Hilliard indicated, some see use cases for the OrderedDict type also in the future. I think the Python community at large will carefully inspect, if this will stand the test of time, and what the next steps will be.&lt;/p&gt;\n\n&lt;p&gt;Time to rethink our coding habits to not miss the possibilities opened by stable ordering of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Keyword arguments and&lt;/li&gt;\n&lt;li&gt;(intermediate) dict storage&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The first because it eases dispatch in the implementation of functions and methods in some cases.&lt;/p&gt;\n\n&lt;p&gt;The second as it encourages to more easily use &lt;code&gt;dict&lt;/code&gt;s as intermediate storage in processing pipelines.&lt;/p&gt;\n\n&lt;p&gt;Raymond Hettinger kindly provided documentation explaining &quot;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/3967849/sfmu2/_build/html/goal.html&quot; rel=&quot;noreferrer&quot; title=&quot;The Tech Behind Python 3.6 Dictionaries&quot;&gt;The Tech Behind Python 3.6 Dictionaries&lt;/a&gt;&quot; - from his San Francisco Python Meetup Group presentation 2016-DEC-08.&lt;/p&gt;\n\n&lt;p&gt;And maybe quite some Stack Overflow high decorated question and answer pages will receive variants of this information and many high quality answers will require a per version update too.&lt;/p&gt;\n\n&lt;h3&gt;Caveat Emptor (but also see below update 2017-12-15):&lt;/h3&gt;\n\n&lt;p&gt;As @ajcr rightfully notes: &quot;The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon.&quot; (from the &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;whatsnew36&lt;/a&gt;) not nit picking, &lt;strong&gt;but&lt;/strong&gt; the citation was cut a bit pessimistic ;-). It continues as &quot; (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).&quot;&lt;/p&gt;\n\n&lt;p&gt;So as in some human languages (e.g. German), usage shapes the language, and the will now has been declared ... in &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;whatsnew36&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Update 2017-12-15:&lt;/h3&gt;\n\n&lt;p&gt;In a &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot; rel=&quot;noreferrer&quot;&gt;mail to the python-dev list&lt;/a&gt;, Guido van Rossum declared:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks! &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, the version 3.6 CPython side-effect of dict insertion ordering is now becoming part of the language spec (and not anymore only an implementation detail). That mail thread also surfaced some distinguishing design goals for &lt;code&gt;collections.OrderedDict&lt;/code&gt; as reminded by Raymond Hettinger during discussion.&lt;/p&gt;\n    ","\n&lt;p&gt;It can often be very handy to use &lt;b&gt;&lt;a href=&quot;http://docs.python.org/library/collections.html#collections.namedtuple&quot; rel=&quot;noreferrer&quot;&gt;namedtuple&lt;/a&gt;&lt;/b&gt;. For example, you have a dictionary of &apos;name&apos; as keys and &apos;score&apos; as values and you want to sort on &apos;score&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\nPlayer = collections.namedtuple(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Player&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;score name&apos;&lt;/span&gt;)\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Alex&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Richard&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sorting with lowest score first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;worst = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(Player(v,k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sorting with highest score first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;best = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([Player(v,k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can get the name and score of, let&apos;s say the second-best player (index=1) very Pythonically like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;player = best[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nplayer.name\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Richard&apos;&lt;/span&gt;\nplayer.score\n    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had the same problem, and I solved it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;WantedOutput = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(MyDict, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x : MyDict[x]) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(People who answer &quot;It is not possible to sort a dict&quot; did not read the question! In fact, &quot;I can sort on the keys, but how can I sort based on the values?&quot; clearly means that he wants a list of the keys sorted according to the value of their values.)&lt;/p&gt;\n\n&lt;p&gt;Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list).&lt;/p&gt;\n    ","\n&lt;p&gt;If values are numeric you may also use &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;https://docs.python.org/library/collections.html&quot; rel=&quot;noreferrer&quot;&gt;collections&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\nx = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nc = Counter(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(c.most_common())\n\n&amp;gt;&amp;gt; [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.7, simply do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-comment&quot;&gt;# regular unsorted dictionary&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by key&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by value&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;copy-paste from : &lt;a href=&quot;http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes&quot;&gt;http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Enjoy ;-)&lt;/p&gt;\n    ","\n&lt;p&gt;This is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\norigin_list = [\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Silly&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Baa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zoo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Penguin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&amp;gt; Original &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; origin_list:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&amp;gt;&amp;gt; Rofl sort &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(origin_list, key=operator.itemgetter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&amp;gt;&amp;gt; Rank sort &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(origin_list, key=operator.itemgetter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here are the results:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Rofl&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Rank&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try the following approach. Let us define a dictionary called mydict with the following data:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mydict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;carl&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;alan&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;danny&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If one wanted to sort the dictionary by keys, one could do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(mydict.iterkeys()):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (key, mydict[key])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should return the following output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;alan: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nbob: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncarl: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;\ndanny: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(mydict.iteritems(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; (k,v): (v,k)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (key, value)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result of this command (sorting the dictionary by value) should return the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;bob: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nalan: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ndanny: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncarl: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Starting from Python 3.6, &lt;code&gt;dict&lt;/code&gt; objects are now ordered by insertion order. It&apos;s officially in the specs of Python 3.7.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;python&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;blah&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;alice&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(words.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alice&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Before that, you had to use &lt;code&gt;OrderedDict&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3.7/library/stdtypes.html#typesmapping&quot; rel=&quot;noreferrer&quot;&gt;Python 3.7 documentation&lt;/a&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Changed in version 3.7: Dictionary order is guaranteed to be insertion\n  order. This behavior was implementation detail of CPython from 3.6. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You can create an &quot;inverted index&quot;, also&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\ninverse= defaultdict( &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; originalDict.items():\n    inverse[v].append( k )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now your inverse has the values; each value has a list of applicable keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(inverse):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; k, inverse[k]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the &lt;a href=&quot;http://docs.python.org/2/library/collections.html#collections.Counter&quot;&gt;collections.Counter&lt;/a&gt;. Note, this will work for both numeric and non-numeric values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in reverse order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(x).most_common()\n[(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(x).most_common()[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To get a dictionary sorted by values&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;OrderedDict(Counter(x).most_common()[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nOrderedDict([(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a &lt;a href=&quot;https://pypi.python.org/pypi/skipdict/1.0&quot;&gt;skip dict&lt;/a&gt; which is a dictionary that&apos;s permanently sorted by value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;SkipDict(data)\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you use &lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;items()&lt;/code&gt; then you&apos;ll iterate in sorted order by value.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s implemented using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Skip_list&quot;&gt;skip list&lt;/a&gt; datastructure.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use custom function that can be passed to key.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dict_val&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=dict_val)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Of course, remember, you need to use &lt;code&gt;OrderedDict&lt;/code&gt; because regular Python dictionaries don&apos;t keep the original order. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\na = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(originalDict.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an &lt;code&gt;OrderedDict&lt;/code&gt; for 2.4 and 2.6  &lt;a href=&quot;https://pypi.python.org/pypi/ordereddict&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;, but &lt;/p&gt;\n\n&lt;p&gt;a) I don&apos;t know about how well it works &lt;/p&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;p&gt;b) You have to download and install it of course. If you do not have administrative access, then I&apos;m afraid the option&apos;s out.)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;gen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;originalDict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(originalDict.keys(), originalDict.values()), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; z: z[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (x, y)\n    &lt;span class=&quot;hljs-comment&quot;&gt;#Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bleh, meh &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; gen(myDict):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bleh == &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myDict[bleh])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You can also print out every value&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bleh, meh &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; gen(myDict):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(bleh, meh)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please remember to remove the parentheses after print if not using Python 3.0 or above&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; django.utils.datastructures &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SortedDict\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortedDictByKey&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,data&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Sorted dictionary order by key&quot;&quot;&quot;&lt;/span&gt;\n    sortedDict = SortedDict()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; data:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(data, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n            sortedKey = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(data.keys())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sortedKey:\n                sortedDict[k] = data[k]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortedDict\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The collections solution mentioned in another answer is absolutely superb, because you retain a connection between the key and value which in the case of dictionaries is extremely important.&lt;/p&gt;\n&lt;p&gt;I don&apos;t agree with the number one choice presented in another answer, because it throws away the keys.&lt;/p&gt;\n&lt;p&gt;I used the solution mentioned above (code shown below) and retained access to both keys and values and in my case the ordering was on the values, but the importance was the ordering of the keys after ordering the values.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\nx = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nc=Counter(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( c.most_common() )\n\n\n&amp;gt;&amp;gt; [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a solution using zip on &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;d.values()&lt;/code&gt; and &lt;code&gt;d.keys()&lt;/code&gt;&lt;/a&gt;.  A few lines down this link (on Dictionary view objects) is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So we can do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;key1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;874.7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key2&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key3&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.1&lt;/span&gt;}\n\nd_sorted = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(d.values(), d.keys()))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d_sorted \n&lt;span class=&quot;hljs-comment&quot;&gt;# prints: [(5, &apos;key2&apos;), (8.1, &apos;key3&apos;), (874.7, &apos;key1&apos;)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39424969/1150683&quot;&gt;As pointed out by Dilettant&lt;/a&gt;, Python 3.6 will now &lt;em&gt;keep the order&lt;/em&gt;! I thought I&apos;d share a function I wrote that eases the sorting of an iterable (tuple, list, dict). In the latter case, you can sort either on keys or values, and it can take numeric comparison into account. &lt;strong&gt;Only for &amp;gt;= 3.6!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you try using sorted on an iterable that holds e.g. strings as well as ints, sorted() will fail. Of course you can force string comparison with str(). However, in some cases you want to do &lt;em&gt;actual&lt;/em&gt; numeric comparison where &lt;code&gt;12&lt;/code&gt; is smaller than &lt;code&gt;20&lt;/code&gt; (which is not the case in string comparison). So I came up with the following. When you want explicit numeric comparison you can use the flag &lt;code&gt;num_as_num&lt;/code&gt; which will try to do explicit numeric sorting by trying to convert all values to floats. If that succeeds, it will do numeric sorting, otherwise it&apos;ll resort to string comparison.&lt;/p&gt;\n&lt;p&gt;Comments for improvement welcome.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort_iterable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, sort_on=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, num_as_num=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_sort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n      &lt;span class=&quot;hljs-comment&quot;&gt;# sort by 0 = keys, 1 values, None for lists and tuples&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; num_as_num:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(v), reverse=reverse)\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(v[i]), reverse=reverse))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError\n      &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; (TypeError, ValueError):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n          _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(v), reverse=reverse)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n          _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(v[i]), reverse=reverse))\n      \n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;\n      \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n      sorted_list = _sort(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_list\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n      sorted_list = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(_sort(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;))\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_list\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; sort_on == &lt;span class=&quot;hljs-string&quot;&gt;&apos;keys&apos;&lt;/span&gt;:\n        sorted_dict = _sort(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_dict\n      &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; sort_on == &lt;span class=&quot;hljs-string&quot;&gt;&apos;values&apos;&lt;/span&gt;:\n        sorted_dict = _sort(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_dict\n      &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; sort_on &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValueError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Unexpected value &lt;span class=&quot;hljs-subst&quot;&gt;{sort_on}&lt;/span&gt; for sort_on. When sorting a dict, use key or values&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Unexpected type &lt;span class=&quot;hljs-subst&quot;&gt;{&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(iterable)}&lt;/span&gt; for iterable. Expected a list, tuple, or dict&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just learned relevant skill from &lt;a href=&quot;https://www.coursera.org/learn/python-data/lecture/0ou0N/10-tuples&quot; rel=&quot;noreferrer&quot;&gt;Python for Everybody&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You may use a temporary list to help you to sort the dictionary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Assume dictionary to be:&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# create a temporary list&lt;/span&gt;\ntmp = []\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# iterate through the dictionary and append each tuple into the temporary list &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    tmptuple = (value, key)\n    tmp.append(tmptuple)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# sort the list in ascending order&lt;/span&gt;\ntmp = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(tmp)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (tmp)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to sort the list in descending order, simply change the original sorting line to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;tmp = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(tmp, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using list comprehension, the one liner would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Assuming the dictionary looks like&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;}\n&lt;span class=&quot;hljs-comment&quot;&gt;#One liner for sorting in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(v, k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()]))\n&lt;span class=&quot;hljs-comment&quot;&gt;#One liner for sorting in descending order&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(v, k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Asending order&lt;/span&gt;\n[(&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;)]\n&lt;span class=&quot;hljs-comment&quot;&gt;#Descending order&lt;/span&gt;\n[(&lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;strong&gt;ValueSortedDict&lt;/strong&gt; from &lt;a href=&quot;http://pypi.python.org/pypi/dicts&quot; rel=&quot;noreferrer&quot;&gt;dicts&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dicts.sorteddict &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ValueSortedDict\nd = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_dict = ValueSortedDict(d)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; sorted_dict.items() \n\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Iterate through a dict and sort it by its values in descending order:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python --version\nPython &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;\n\n$ cat sort_dict_by_val_desc.py \ndictionary = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(siis = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, sana = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, joka = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, tuli = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, aina = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; word &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(dictionary, key=dictionary.get, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(word, dictionary[word])\n\n$ python sort_dict_by_val_desc.py \naina &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\ntuli &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\njoka &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nsana &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nsiis &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If your values are integers, and you use Python 2.7 or newer, you can use &lt;a href=&quot;http://docs.python.org/py3k/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;collections.Counter&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;dict&lt;/code&gt;. The &lt;code&gt;most_common&lt;/code&gt; method will give you all items, sorted by the value.&lt;/p&gt;\n    ","\n&lt;p&gt;This works in 3.1.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nslovar_sorted=&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(slovar.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(slovar_sorted)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For the sake of completeness, I am posting a solution using &lt;a href=&quot;http://docs.python.org/2/library/heapq.html&quot; rel=&quot;noreferrer&quot;&gt;heapq&lt;/a&gt;. Note, this method will work for both numeric and non-numeric values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x_items = x.items()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.heapify(x_items)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in reverse order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.nlargest(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x_items),x_items, operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.nsmallest(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x_items),x_items, operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"202":["\n&lt;p&gt;Below is the best all-around solution I could build to vertically and horizontally center a fixed-width, &lt;strong&gt;flexible height&lt;/strong&gt; content box. It was tested and worked for recent versions of Firefox, Opera, Chrome, and Safari.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.middle&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table-cell;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.inner&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* Whatever width you want */&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;middle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;The Content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Once upon a midnight dreary...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://emergentweb.com/test/valign.html&quot; rel=&quot;noreferrer&quot;&gt;View A Working Example With Dynamic Content&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I built in some dynamic content to test the flexibility and would love to know if anyone sees any problems with it. It should work well for centered overlays also -- lightbox, pop-up, etc.&lt;/p&gt;\n    ","\n&lt;p&gt;The simplest way would be the following &lt;strong&gt;three lines&lt;/strong&gt; of CSS:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1) position: relative;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;2) top: 50%;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;3) transform: translateY(-50%);&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Following is an &lt;strong&gt;example&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer-div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;170px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: lightgray;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.middle-div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translateY&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;);\n  -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translateY&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translateY&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;outer-div&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;middle-div&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Test text\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;One more I can&apos;t see on the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.Center-Container {\n  position: relative;\n  height: 100%;\n}\n\n.Absolute-Center {\n  width: 50%;\n  height: 50%;\n  overflow: auto;\n  margin: auto;\n  position: absolute;\n  top: 0; left: 0; bottom: 0; right: 0;\n  border: solid black;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Cross-browser (including Internet&amp;nbsp;Explorer&amp;nbsp;8 - Internet&amp;nbsp;Explorer&amp;nbsp;10 without hacks!)&lt;/li&gt;\n&lt;li&gt;Responsive with percentages and min-/max-&lt;/li&gt;\n&lt;li&gt;Centered regardless of padding (without box-sizing!)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;height&lt;/code&gt; must be declared (see &lt;a href=&quot;https://www.smashingmagazine.com/2013/08/absolute-horizontal-vertical-centering-css/#Height&quot; rel=&quot;noreferrer&quot;&gt;Variable Height&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Recommended setting &lt;code&gt;overflow: auto&lt;/code&gt; to prevent content spillover (see Overflow)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;sub&gt;Source: &lt;a href=&quot;https://www.smashingmagazine.com/2013/08/absolute-horizontal-vertical-centering-css&quot; rel=&quot;noreferrer&quot;&gt;Absolute Horizontal And Vertical Centering In CSS&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Now the &lt;a href=&quot;https://en.wikipedia.org/wiki/CSS_Flexible_Box_Layout&quot; rel=&quot;noreferrer&quot;&gt;Flexbox&lt;/a&gt; solution is a very easy way for modern browsers, so I recommend this for you:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: green;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Div to be aligned vertically&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Actually, you need two div&apos;s for vertical centering. The div containing the content must have a width and height.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* Half of #content height */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;624px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;395px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#000000&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Centered div&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Here is &lt;a href=&quot;http://jsfiddle.net/ssPDD/&quot; rel=&quot;noreferrer&quot;&gt;the result&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Edit 2020: only use this if you need to support old browsers like &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_8&quot; rel=&quot;nofollow noreferrer&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; (which you should refuse to do ). If not, use &lt;a href=&quot;https://en.wikipedia.org/wiki/CSS_Flexible_Box_Layout&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flexbox&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;This is the simplest method I found and I use it all the time\n(&lt;a href=&quot;http://jsfiddle.net/Nhs6j/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsFiddle demo here&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;Thank Chris Coyier from CSS Tricks for &lt;a href=&quot;http://css-tricks.com/centering-in-the-unknown/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.v-wrap&lt;/span&gt;{\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.v-wrap&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt;{\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* adjust for white space between pseudo element and next sibling */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: -.&lt;span class=&quot;hljs-number&quot;&gt;25em&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* stretch line height */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.v-box&lt;/span&gt;{\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;white-space&lt;/span&gt;: normal;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;v-wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;v-box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is how I&apos;ve been doing it for some time&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Support starts with Internet&amp;nbsp;Explorer&amp;nbsp;8.&lt;/p&gt;\n    ","\n&lt;p&gt;After a lot of research I finally found the ultimate solution. It works even for floated elements. &lt;a href=&quot;http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css&quot; rel=&quot;noreferrer&quot;&gt;View Source&lt;/a&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.element {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%); /* or try 50% */\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox&quot; rel=&quot;noreferrer&quot;&gt;CSS Flexbox&lt;/a&gt; &lt;code&gt;align-items&lt;/code&gt; property to achieve this.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;This is centered vertically&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To center the div on a page, &lt;a href=&quot;http://jsfiddle.net/xKH7w/&quot; rel=&quot;noreferrer&quot;&gt;check the fiddle link&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#vh&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;{\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;);\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;25px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: white;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;vh&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Div to be aligned vertically&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Another option is to use flex box, &lt;a href=&quot;http://jsfiddle.net/abbasmhd/56mc4e2u/&quot; rel=&quot;noreferrer&quot;&gt;check the fiddle link&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.vh&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ddd&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.vh&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;vh&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Div to be aligned vertically&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Another option is to use a CSS 3 transform:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#vh&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*transform: translateX(-50%) translateY(-50%);*/&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translate&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;{\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;);\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;25px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: white;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;vh&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Div to be aligned vertically&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The easiest solution is below:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer-div&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.inner-div&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid red;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer-div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner-div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Hey there!\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Unfortunately  but not surprisingly  the solution is more complicated than one would wish it to be. Also unfortunately, you&apos;ll need to use additional divs around the div you want vertically centered.&lt;/p&gt;\n&lt;p&gt;For standards-compliant browsers like Mozilla, Opera, Safari, etc. you need to set the outer div to be displayed as a &lt;em&gt;table&lt;/em&gt; and the inner div to be displayed as a &lt;em&gt;table-cell&lt;/em&gt;  which can then be vertically centered. For Internet Explorer, you need to &lt;em&gt;position&lt;/em&gt; the inner div &lt;em&gt;absolutely&lt;/em&gt; within the outer div and then specify the &lt;em&gt;top&lt;/em&gt; as &lt;em&gt;50%&lt;/em&gt;. The following pages explain this technique well and provide some code samples too:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.jakpsatweb.cz/css/css-vertical-center-solution.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vertical Centering in CSS&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20101107022613/http://www.laboratoriocaffeina.it/design/2007/05/11/vertical-centering-in-css-with-unknown-height-ie7-compatible.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vertical Centering in CSS with Unknown Height (Internet&amp;nbsp;Explorer&amp;nbsp;7 compatible)&lt;/a&gt; (Archived article courtesy of the Wayback Machine)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;There is also a technique to do the vertical centering using JavaScript. &lt;a href=&quot;http://www.alistapart.com/d/footers/footer_variation1.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vertical alignment of content with JavaScript &amp;amp; CSS&lt;/a&gt; demonstrates it.&lt;/p&gt;\n    ","\n&lt;p&gt;If someone cares for Internet&amp;nbsp;Explorer&amp;nbsp;10 (and later) only, use &lt;a href=&quot;https://en.wikipedia.org/wiki/CSS_Flexible_Box_Layout&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flexbox&lt;/a&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: -webkit-flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: -ms-flexbox;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n\n    -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n    -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;-pack: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n\n    -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n    -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;-align: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.centered&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;centered&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Flexbox support: &lt;a href=&quot;http://caniuse.com/flexbox&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://caniuse.com/flexbox&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A modern way to center an element vertically would be to use &lt;a href=&quot;http://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;flexbox&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;You need a parent to decide the height and a child to center.&lt;/p&gt;\n&lt;p&gt;The example below will center a div to the center within your browser. What&apos;s important (in my example) is to set &lt;code&gt;height: 100%&lt;/code&gt; to &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt; and then &lt;code&gt;min-height: 100%&lt;/code&gt; to your container.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#F5F5F5&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#center_container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#center&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;center_container&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;center&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;I am center.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Centering only vertically&lt;/h1&gt;\n&lt;p&gt;If you don&apos;t care about Internet Explorer 6 and 7, you can use a technique that involves two containers.&lt;/p&gt;\n&lt;h2&gt;The outer container:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;should have &lt;code&gt;display: table;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;The inner container:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;should have &lt;code&gt;display: table-cell;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;should have &lt;code&gt;vertical-align: middle;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;The content box:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;should have &lt;code&gt;display: inline-block;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You can add any content you want to the content box without caring about its width or height!&lt;/p&gt;\n&lt;h2&gt;&lt;strong&gt;Demo:&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer-container&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* This could be ANY width */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* This could be ANY height */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ccc&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.inner-container&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table-cell;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.centered-content&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#fff&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;centered-content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Malcolm in the Middle\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;See also &lt;a href=&quot;https://jsfiddle.net/Lr4eay5e/1/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Centering horizontally and vertically&lt;/h1&gt;\n&lt;p&gt;If you want to center both horizontally and vertically, you also need the following.&lt;/p&gt;\n&lt;h2&gt;The inner container:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;should have &lt;code&gt;text-align: center;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;The content box:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;should re-adjust the horizontal text-alignment to for example &lt;code&gt;text-align: left;&lt;/code&gt; or &lt;code&gt;text-align: right;&lt;/code&gt;, unless you want text to be centered&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;&lt;strong&gt;Demo:&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer-container&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* This could be ANY width */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* This could be ANY height */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ccc&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.inner-container&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table-cell;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.centered-content&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: left;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#fff&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;centered-content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n         Malcolm in the Middle\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;See also &lt;a href=&quot;https://jsfiddle.net/Lr4eay5e/4/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Using flex property of CSS.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Solution #1&lt;/strong&gt;\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;75px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;75px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;or by &lt;strong&gt;using &lt;code&gt;display: flex;&lt;/code&gt; and &lt;code&gt;margin: auto;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Solution #2&lt;/strong&gt;\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;75px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;75px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:auto;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;show text center&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Solution #3\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Using percentage(%) height and width.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Solution #4\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;75px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;75px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.center&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translate&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* (x, y)  =&amp;gt; position */&lt;/span&gt;\n  -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translate&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* IE 9 */&lt;/span&gt;\n  -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translate&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;    \n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.vertical&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  //&lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translate&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* (x, y) =&amp;gt; position */&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.horizontal&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  //&lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translate&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* (x, y)  =&amp;gt; position */&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: grey; \n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n}  &lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertical&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Vertically left&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;horizontal&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Horizontal top&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Vertically Horizontal&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;  \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Related: &lt;a href=&quot;https://stackoverflow.com/questions/16702881/center-image-vertical-and-horizontal/46375063#46375063&quot;&gt;Center a Image&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is always where I go when I have to come back to &lt;a href=&quot;http://phrogz.net/css/vertical-align/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For those who don&apos;t want to make the jump:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Specify the parent container as &lt;code&gt;position:relative&lt;/code&gt; or &lt;code&gt;position:absolute&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Specify a fixed height on the child container.&lt;/li&gt;\n&lt;li&gt;Set &lt;code&gt;position:absolute&lt;/code&gt; and &lt;code&gt;top:50%&lt;/code&gt; on the child container to move the top down to the middle of the parent.&lt;/li&gt;\n&lt;li&gt;Set margin-top:-yy where yy is half the height of the child container to offset the item up. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;An example of this in code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n    &lt;span class=&quot;hljs-selector-id&quot;&gt;#myoutercontainer&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:relative}\n    &lt;span class=&quot;hljs-selector-id&quot;&gt;#myinnercontainer&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:absolute; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10em&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;5em&lt;/span&gt;}\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myoutercontainer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myinnercontainer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hey look! I&apos;m vertically centered!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;How sweet is this?!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It can be done in two ways&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;body{\nleft: 50%; \ntop:50%; \ntransform: translate(-50%, -50%); \nheight: 100%; \nwidth: 100%; \n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OR&lt;/p&gt;\n&lt;p&gt;Using flex&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;body {\n    height:100%\n    width:100%\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;align-items:center;&lt;/code&gt; makes the content vertically center&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;justify-content: center;&lt;/code&gt;makes the content horizontally center&lt;/p&gt;\n    ","\n&lt;p&gt;I just wrote this CSS and to know more, please go through: &lt;a href=&quot;http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/&quot; rel=&quot;nofollow noreferrer&quot;&gt;This article with vertical align anything with just 3 lines of CSS&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.element {\n    position: relative;\n    top: 50%;\n    transform: perspective(1px) translateY(-50%);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For newcomers, please try:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;display: flex;\nalign-items: center;\njustify-content: center;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The three lines of code using &lt;code&gt;transform&lt;/code&gt; works practically on modern browsers and Internet&amp;nbsp;Explorer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.element{\n     position: relative;\n     top: 50%;\n     transform: translateY(-50%);\n     -moz-transform: translateY(-50%);\n     -webkit-transform: translateY(-50%);\n     -ms-transform: translateY(-50%);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am adding this answer since I found some incompleteness in the previous version of this answer (and Stack Overflow won&apos;t allow me to simply comment).&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&apos;position&apos; relative messes up the styling if the current div is in the body and has no container div. However &apos;fixed&apos; seems to work, but it obviously fixes the content in the center of the viewport\n&lt;img src=&quot;https://i.imgur.com/mY9GPYA.png&quot; alt=&quot;position: relative&quot;&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Also I used this styling for centering some overlay divs and found that in Mozilla all elements inside this transformed div had lost their bottom borders. Possibly a rendering issue. But adding just the minimal padding to some of them rendered it correctly. Chrome and Internet&amp;nbsp;Explorer (surprisingly) rendered the boxes without any need for padding\n&lt;img src=&quot;https://i.imgur.com/Ac2HSUM.png&quot; alt=&quot;mozilla without inner paddings&quot;&gt;\n&lt;img src=&quot;https://i.imgur.com/wVrNn64.png&quot; alt=&quot;mozilla with paddings&quot;&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;CSS Grid&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: grid;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Div to be aligned vertically&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The answer from Billbad only works with a fixed width of the &lt;code&gt;.inner&lt;/code&gt; div.\nThis solution works for a dynamic width by adding the attribute &lt;code&gt;text-align: center&lt;/code&gt; to the &lt;code&gt;.outer&lt;/code&gt; div.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.middle&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table-cell;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.inner&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: auto;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;middle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      Content\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just do it: Add the class at your &lt;code&gt;div&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.modal {\n  margin: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  height: 240px;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And read &lt;a href=&quot;http://www.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this article&lt;/a&gt; for an explanation. Note: &lt;code&gt;Height&lt;/code&gt; is necessary.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.center{\n    display: grid;\n    place-items: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Not answering for browser compatibility but to also mention the new Grid and the not so new Flexbox feature.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Grid&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;From: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Center_an_item_in_the_area&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;Mozilla Grid Docs&quot;&gt;Mozilla - Grid Documentation - Align Div Vertically&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Browser Support: &lt;a href=&quot;https://caniuse.com/#search=grid&quot; rel=&quot;nofollow noreferrer&quot;&gt;Grid Browser Support&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;CSS:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.wrapper {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 10px;\n  grid-auto-rows: 200px;\n  grid-template-areas: \n    &quot;. a a .&quot;\n    &quot;. a a .&quot;;\n}\n.item1 {\n  grid-area: a;\n  align-self: center;\n  justify-self: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Flexbox&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Browser Support: &lt;a href=&quot;https://caniuse.com/#search=flexbox&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flexbox Browser Support&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;CSS:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;display: -webkit-box;\ndisplay: -moz-box;\ndisplay: -ms-flexbox;\ndisplay: -webkit-flex;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I did it with this (change width, height, margin-top and margin-left accordingly):&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.wrapper&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;960px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;590px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;295px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;480px&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; -- Content -- &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think a solid solution for all browsers without using Flexbox - &quot;align-items: center;&quot; is a combination of display: table and vertical-align: middle;.&lt;/p&gt;\n&lt;h3&gt;CSS&lt;/h3&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.vertically-center\n{\n    display: table;\n\n    width: 100%;  /* Optional */\n    height: 100%; /* Optional */\n}\n\n.vertically-center &amp;gt; div\n{\n    display: table-cell;\n    vertical-align: middle;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;HTML&lt;/h3&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertically-center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;border: 1px solid black;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;some text&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Demo: &lt;a href=&quot;https://jsfiddle.net/6m640rpp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/6m640rpp/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Especially for parent divs with relative (unknown) height, the &lt;a href=&quot;http://css-tricks.com/centering-in-the-unknown/&quot; rel=&quot;nofollow noreferrer&quot;&gt;centering in the unknown&lt;/a&gt; solution works great for me. There are some really nice code examples in the article.&lt;/p&gt;\n\n&lt;p&gt;It was tested in Chrome, Firefox, Opera, and Internet&amp;nbsp;Explorer.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* This parent can be any width and height */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.block&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* The ghost, nudged to maintain perfect centering */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.block&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;0.25em&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* Adjusts for spacing */&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* The element to be centered, can\n   also be of any width and height */&lt;/span&gt; \n&lt;span class=&quot;hljs-selector-class&quot;&gt;.centered&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width: 400px; height: 200px;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;block&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;height: 90%; width: 100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;centered&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\t &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Some text&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\t &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Any other text...&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; \n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif22&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The contents can be easily centered by using Flexbox. The following code shows the CSS for the container inside which the contents needs to be centered:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.absolute-center {\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n\n    -ms-flex-align: center;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n\n    align-items: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"203":["\n&lt;p&gt;You have &lt;code&gt;=&lt;/code&gt; the &lt;strong&gt;assignment operator&lt;/strong&gt;, &lt;code&gt;==&lt;/code&gt; the &lt;strong&gt;&apos;equal&apos; comparison operator&lt;/strong&gt; and &lt;code&gt;===&lt;/code&gt; the &lt;strong&gt;&apos;identical&apos; comparison operator&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$a = $b     Assign      Sets $a to be equal to $b.\n$a == $b    Equal       TRUE if $a is equal to $b.\n$a === $b   Identical   TRUE if $a is equal to $b, and they are of the same type. (introduced in PHP 4)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more info on the need for &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;, and situations to use each, look at &lt;a href=&quot;http://il.php.net/manual/en/language.operators.comparison.php&quot; rel=&quot;noreferrer&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;=&lt;/code&gt; is the assignment operator &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;==&lt;/code&gt;\nis the comparison operator (checks if\ntwo variables have equal values)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;===&lt;/code&gt; is the identical comparison\noperator (checks if two variables\nhave equal values and are of the same\ntype).&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;=   assignment operator&lt;/p&gt;\n\n&lt;p&gt;==  checks if two variables have the same value&lt;/p&gt;\n\n&lt;p&gt;=== checks if two variables have the same value AND if their types are the same&lt;/p&gt;\n    ","\n&lt;p&gt;The = operator assigns the value to a variable\n$six = 6; value 6 is assigned to variable $six&lt;/p&gt;\n\n&lt;p&gt;== operator check if the value of both variables is equal and mostly used in conditions like if statements&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; both variables have the same value; \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;=== operator similar to == (check if the value equals) and also check if both of same data type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; === &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;both variable have same value and of same data type&quot;&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;both variable is either not equal or not of same data type&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;// here $a is of type int whereas $b is of type string. So here the output&lt;/p&gt;\n    ","\n&lt;p&gt;For advanced PHP users, knowing the difference between &lt;code&gt;==&lt;/code&gt;and &lt;code&gt;===&lt;/code&gt; and asking themselves &quot;is it faster to compare with &lt;code&gt;==&lt;/code&gt; or with &lt;code&gt;===&lt;/code&gt; when I&apos;m sure that both the operands are the same type?&quot;&lt;/p&gt;\n\n&lt;p&gt;The short and general answer is: &lt;strong&gt;There is no performance gain in using &lt;code&gt;===&lt;/code&gt; in this cases, so you should probably use &lt;code&gt;==&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For the ones interested in benchmarking it themselves, you can use the following code I wrote ad-hoc and try different values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// CONFIGURATION&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random string 1&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random string 2&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// FUNCTIONS&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; === &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// EXECUTION&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_two_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_three_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_two_b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_three_b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RESULTS PRINTING&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE == (FIRST TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_two_a&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE == (SECOND TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_two_b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE === (FIRST TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_three_a&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE === (SECOND TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_three_b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NOTE: The comparison is valid only when each &quot;FIRST TRY&quot; is very close to its &quot;SECOND TRY&quot;. If they are significantly different, it means that the processor was busy doing something else while executing the comparisons and so the results are unreliable and the benchmark should be run again.&lt;/p&gt;\n    "],"204":["\n&lt;p&gt;Indeed, the keyword is &quot;Ajax&quot;: &lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt;. However, last years it&apos;s more than often &lt;em&gt;Asynchronous JavaScript and JSON&lt;/em&gt;. Basically, you let JavaScript execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.&lt;/p&gt;\n&lt;p&gt;Since it&apos;s pretty &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; rel=&quot;nofollow noreferrer&quot;&gt;tedious work to make it to work&lt;/a&gt; across all browsers (especially Internet Explorer versus others), there are plenty of JavaScript libraries out which simplifies this in single functions and covers as many as possible browser-specific bugs/quirks under the hoods, such as &lt;a href=&quot;https://jquery.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;https://mootools.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mootools&lt;/a&gt;. Since jQuery is most popular these days, I&apos;ll use it in the below examples.&lt;/p&gt;\n&lt;h1&gt;Kickoff example returning &lt;code&gt;String&lt;/code&gt; as plain text&lt;/h1&gt;\n&lt;p&gt;Create a &lt;code&gt;/some.jsp&lt;/code&gt; like below (note: the code snippets in this answer doesn&apos;t expect the JSP file being placed in a subfolder, if you do so, alter servlet URL accordingly from &lt;code&gt;&quot;someservlet&quot;&lt;/code&gt; to &lt;code&gt;&quot;${pageContext.request.contextPath}/someservlet&quot;&lt;/code&gt;; it&apos;s merely omitted from the code snippets for brevity):&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;SO question 4112686&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://code.jquery.com/jquery-latest.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n            $(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#somebutton&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...&lt;/span&gt;\n                $.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;responseText&lt;/span&gt;) {   &lt;span class=&quot;hljs-comment&quot;&gt;// Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response text...&lt;/span&gt;\n                    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#somediv&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(responseText);           &lt;span class=&quot;hljs-comment&quot;&gt;// Locate HTML DOM element with ID &quot;somediv&quot; and set its text content with the response text.&lt;/span&gt;\n                });\n            });\n        &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;somebutton&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;press here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;somediv&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create a servlet with a &lt;code&gt;doGet()&lt;/code&gt; method which look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;some text&quot;&lt;/span&gt;;\n\n    response.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Set content type of the response so that jQuery knows what it can expect.&lt;/span&gt;\n    response.setCharacterEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// You want world domination, huh?&lt;/span&gt;\n    response.getWriter().write(text);       &lt;span class=&quot;hljs-comment&quot;&gt;// Write response body.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Map this servlet on an URL pattern of &lt;code&gt;/someservlet&lt;/code&gt; or &lt;code&gt;/someservlet/*&lt;/code&gt; as below (obviously, the URL pattern is free to your choice, but you&apos;d need to alter the &lt;code&gt;someservlet&lt;/code&gt; URL in JS code examples over all place accordingly):&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.example;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@WebServlet(&quot;/someservlet/*&quot;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeServlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HttpServlet&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, when you&apos;re not on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Jakarta_Servlet&quot; rel=&quot;nofollow noreferrer&quot;&gt;Servlet&lt;/a&gt; 3.0 compatible container yet (&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Tomcat&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tomcat&lt;/a&gt; 7, &lt;a href=&quot;https://en.wikipedia.org/wiki/GlassFish&quot; rel=&quot;nofollow noreferrer&quot;&gt;GlassFish&lt;/a&gt; 3, &lt;a href=&quot;https://en.wikipedia.org/wiki/JBoss&quot; rel=&quot;nofollow noreferrer&quot;&gt;JBoss&lt;/a&gt; AS 6, etc. or newer), then map it in &lt;code&gt;web.xml&lt;/code&gt; the old fashioned way (see also &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;our Servlets wiki page&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;someservlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;com.example.SomeServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;someservlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/someservlet/*&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now open the http://localhost:8080/context/test.jsp in the browser and press the button. You&apos;ll see that the content of the div get updated with the servlet response.&lt;/p&gt;\n&lt;h1&gt;Returning &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as JSON&lt;/h1&gt;\n&lt;p&gt;With &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSON&lt;/a&gt; instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you&apos;d like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of &lt;a href=&quot;https://json.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this page&lt;/a&gt; for an overview). My personal favourite is &lt;a href=&quot;https://github.com/google/gson&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google Gson&lt;/a&gt;. Download and put its JAR file in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; folder of your web application.&lt;/p&gt;\n&lt;p&gt;Here&apos;s an example which displays &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;. The servlet:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n    List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n    list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;item1&quot;&lt;/span&gt;);\n    list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;item2&quot;&lt;/span&gt;);\n    list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;item3&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;().toJson(list);\n\n    response.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);\n    response.setCharacterEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);\n    response.getWriter().write(json);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The JavaScript code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#somebutton&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;responseJson&lt;/span&gt;) {    &lt;span class=&quot;hljs-comment&quot;&gt;// Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response JSON...&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $ul = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;ul&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#somediv&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;ul&amp;gt; element and append it to HTML DOM element with ID &quot;somediv&quot;.&lt;/span&gt;\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(responseJson, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index, item&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Iterate over the JSON array.&lt;/span&gt;\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;li&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(item).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;($ul);      &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;li&amp;gt; element, set its text content with currently iterated item and append it to the &amp;lt;ul&amp;gt;.&lt;/span&gt;\n        });\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (&lt;code&gt;responseJson&lt;/code&gt;) as function argument when you set the response content type to &lt;code&gt;application/json&lt;/code&gt;. If you forget to set it or rely on a default of &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;, then the &lt;code&gt;responseJson&lt;/code&gt; argument wouldn&apos;t give you a JSON object, but a plain vanilla string and you&apos;d need to manually fiddle around with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; afterwards, which is thus totally unnecessary if you set the content type right in first place.&lt;/p&gt;\n&lt;h1&gt;Returning &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as JSON&lt;/h1&gt;\n&lt;p&gt;Here&apos;s another example which displays &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n    Map&amp;lt;String, String&amp;gt; options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n    options.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;label1&quot;&lt;/span&gt;);\n    options.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;label2&quot;&lt;/span&gt;);\n    options.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;label3&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;().toJson(options);\n\n    response.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);\n    response.setCharacterEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);\n    response.getWriter().write(json);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And the JSP:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#somebutton&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {               &lt;span class=&quot;hljs-comment&quot;&gt;// When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;responseJson&lt;/span&gt;) {                 &lt;span class=&quot;hljs-comment&quot;&gt;// Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response JSON...&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $select = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#someselect&quot;&lt;/span&gt;);                           &lt;span class=&quot;hljs-comment&quot;&gt;// Locate HTML DOM element with ID &quot;someselect&quot;.&lt;/span&gt;\n        $select.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;option&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();                          &lt;span class=&quot;hljs-comment&quot;&gt;// Find all child elements with tag name &quot;option&quot; and remove them (just to prevent duplicate options when button is pressed again).&lt;/span&gt;\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(responseJson, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) {               &lt;span class=&quot;hljs-comment&quot;&gt;// Iterate over the JSON object.&lt;/span&gt;\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;option&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(key).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(value).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;($select); &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;option&amp;gt; element, set its value with currently iterated key and its text content with currently iterated item and finally append it to the &amp;lt;select&amp;gt;.&lt;/span&gt;\n        });\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;someselect&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as JSON&lt;/h1&gt;\n&lt;p&gt;Here&apos;s an example which displays &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; where the &lt;code&gt;Product&lt;/code&gt; class has the properties &lt;code&gt;Long id&lt;/code&gt;, &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;BigDecimal price&lt;/code&gt;. The servlet:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n    List&amp;lt;Product&amp;gt; products = someProductService.list();\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;().toJson(products);\n\n    response.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);\n    response.setCharacterEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);\n    response.getWriter().write(json);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The JS code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#somebutton&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {        &lt;span class=&quot;hljs-comment&quot;&gt;// When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;responseJson&lt;/span&gt;) {          &lt;span class=&quot;hljs-comment&quot;&gt;// Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response JSON...&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $table = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;table&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#somediv&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;table&amp;gt; element and append it to HTML DOM element with ID &quot;somediv&quot;.&lt;/span&gt;\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(responseJson, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index, product&lt;/span&gt;) {    &lt;span class=&quot;hljs-comment&quot;&gt;// Iterate over the JSON array.&lt;/span&gt;\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;tr&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;($table)                     &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;tr&amp;gt; element, set its text content with currently iterated item and append it to the &amp;lt;table&amp;gt;.&lt;/span&gt;\n                .&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;td&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(product.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;))        &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;td&amp;gt; element, set its text content with id of currently iterated product and append it to the &amp;lt;tr&amp;gt;.&lt;/span&gt;\n                .&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;td&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(product.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;))      &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;td&amp;gt; element, set its text content with name of currently iterated product and append it to the &amp;lt;tr&amp;gt;.&lt;/span&gt;\n                .&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;td&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(product.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));    &lt;span class=&quot;hljs-comment&quot;&gt;// Create HTML &amp;lt;td&amp;gt; element, set its text content with price of currently iterated product and append it to the &amp;lt;tr&amp;gt;.&lt;/span&gt;\n        });\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as XML&lt;/h1&gt;\n&lt;p&gt;Here&apos;s an example which does effectively the same as previous example, but then with XML instead of JSON. When using JSP as XML output generator you&apos;ll see that it&apos;s less tedious to code the table and all. JSTL is this way much more helpful as you can actually use it to iterate over the results and perform server side data formatting. The servlet:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n    List&amp;lt;Product&amp;gt; products = someProductService.list();\n\n    request.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;products&quot;&lt;/span&gt;, products);\n    request.getRequestDispatcher(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/xml/products.jsp&quot;&lt;/span&gt;).forward(request, response);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The JSP code (note: if you put the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt;, it may be reusable elsewhere in a non-Ajax response):&lt;/p&gt;\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n&amp;lt;%@page contentType=&quot;application/xml&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;\n&amp;lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&amp;gt;\n&amp;lt;%@taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&amp;gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;c:forEach&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${products}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;var&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;${product.id}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;c:out&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${product.name}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;fmt:formatNumber&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${product.price}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;currency&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;currencyCode&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;c:forEach&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The JavaScript code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#somebutton&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {             &lt;span class=&quot;hljs-comment&quot;&gt;// When HTML DOM &quot;click&quot; event is invoked on element with ID &quot;somebutton&quot;, execute the following function...&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;responseXml&lt;/span&gt;) {                &lt;span class=&quot;hljs-comment&quot;&gt;// Execute Ajax GET request on URL of &quot;someservlet&quot; and execute the following function with Ajax response XML...&lt;/span&gt;\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#somediv&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;($(responseXml).&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Parse XML, find &amp;lt;data&amp;gt; element and append its HTML to HTML DOM element with ID &quot;somediv&quot;.&lt;/span&gt;\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ll by now probably realize why XML is so much more powerful than JSON for the particular purpose of updating a HTML document using Ajax. JSON is funny, but after all generally only useful for so-called &quot;public web services&quot;. MVC frameworks like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; use XML under the covers for their ajax magic.&lt;/p&gt;\n&lt;h1&gt;Ajaxifying an existing form&lt;/h1&gt;\n&lt;p&gt;You can use jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;$.serialize()&lt;/code&gt;&lt;/a&gt; to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery (and thus degrades gracefully when the end user has JavaScript disabled):&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;someform&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can progressively enhance it with Ajax as below:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#someform&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $form = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;post&lt;/span&gt;($form.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;action&quot;&lt;/span&gt;), $form.&lt;span class=&quot;hljs-title function_&quot;&gt;serialize&lt;/span&gt;(), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    });\n\n    event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Important! Prevents submitting the form.&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can in the servlet distinguish between normal requests and Ajax requests as below:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ajax&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;XMLHttpRequest&quot;&lt;/span&gt;.equals(request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ajax) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Ajax (JSON or XML) response.&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle regular (JSP) response.&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;a href=&quot;https://malsup.com/jquery/form/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery Form plugin&lt;/a&gt; does less or more the same as above jQuery example, but it has additional transparent support for &lt;code&gt;multipart/form-data&lt;/code&gt; forms as required by file uploads.&lt;/p&gt;\n&lt;h1&gt;Manually sending request parameters to servlet&lt;/h1&gt;\n&lt;p&gt;If you don&apos;t have a form at all, but just wanted to interact with the servlet &quot;in the background&quot; whereby you&apos;d like to POST some data, then you can use jQuery &lt;a href=&quot;https://api.jquery.com/jquery.param/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;$.param()&lt;/code&gt;&lt;/a&gt; to easily convert a JSON object to an URL-encoded query string.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;fooValue&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;barValue&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bazValue&quot;&lt;/span&gt;\n};\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;, $.&lt;span class=&quot;hljs-title function_&quot;&gt;param&lt;/span&gt;(params), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The same &lt;code&gt;doPost()&lt;/code&gt; method as shown here above can be reused. Do note that above syntax also works with &lt;code&gt;$.get()&lt;/code&gt; in jQuery and &lt;code&gt;doGet()&lt;/code&gt; in servlet.&lt;/p&gt;\n&lt;h1&gt;Manually sending JSON object to servlet&lt;/h1&gt;\n&lt;p&gt;If you however intend to send the JSON object as a whole instead of as individual request parameters for some reason, then you&apos;d need to serialize it to a string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; (not part of jQuery) and instruct jQuery to set request content type to &lt;code&gt;application/json&lt;/code&gt; instead of (default) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. This can&apos;t be done via &lt;code&gt;$.post()&lt;/code&gt; convenience function, but needs to be done via &lt;code&gt;$.ajax()&lt;/code&gt; as below.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;fooValue&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;barValue&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bazValue&quot;&lt;/span&gt;\n};\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;someservlet&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// NOT dataType!&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(data),\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do note that a lot of starters mix &lt;code&gt;contentType&lt;/code&gt; with &lt;code&gt;dataType&lt;/code&gt;. The &lt;code&gt;contentType&lt;/code&gt; represents the type of the &lt;strong&gt;request&lt;/strong&gt; body. The &lt;code&gt;dataType&lt;/code&gt; represents the (expected) type of the &lt;strong&gt;response&lt;/strong&gt; body, which is usually unnecessary as jQuery already autodetects it based on response&apos;s &lt;code&gt;Content-Type&lt;/code&gt; header.&lt;/p&gt;\n&lt;p&gt;Then, in order to process the JSON object in the servlet which isn&apos;t being sent as individual request parameters but as a whole JSON string the above way, you only need to manually parse the request body using a JSON tool instead of using &lt;code&gt;getParameter()&lt;/code&gt; the usual way. Namely, servlets don&apos;t support &lt;code&gt;application/json&lt;/code&gt; formatted requests, but only &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; formatted requests. Gson also supports parsing a JSON string into a JSON object.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;().fromJson(request.getReader(), JsonObject.class);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).getAsString();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;).getAsString();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;).getAsString();\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do note that this all is more clumsy than just using &lt;code&gt;$.param()&lt;/code&gt;. Normally, you want to use &lt;code&gt;JSON.stringify()&lt;/code&gt; only if the target service is e.g. a JAX-RS (RESTful) service which is for some reason only capable of consuming JSON strings and not regular request parameters.&lt;/p&gt;\n&lt;h1&gt;Sending a redirect from servlet&lt;/h1&gt;\n&lt;p&gt;Important to realize and understand is that any &lt;code&gt;sendRedirect()&lt;/code&gt; and &lt;code&gt;forward()&lt;/code&gt; call by the servlet on an ajax request would only forward or redirect &lt;em&gt;the Ajax request itself&lt;/em&gt; and not the main document/window where the Ajax request originated. JavaScript/jQuery would in such case only retrieve the redirected/forwarded response as &lt;code&gt;responseText&lt;/code&gt; variable in the callback function. If it represents a whole HTML page and not an Ajax-specific XML or JSON response, then all you could do is to replace the current document with it.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;document.open();\ndocument.write(responseText);\ndocument.close();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that this doesn&apos;t change the URL as end user sees in browser&apos;s address bar. So there are issues with bookmarkability. Therefore, it&apos;s much better to just return an &quot;instruction&quot; for JavaScript/jQuery to perform a redirect instead of returning the whole content of the redirected page. E.g., by returning a boolean, or a URL.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;redirectURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://example.com&quot;&lt;/span&gt;;\n\nMap&amp;lt;String, String&amp;gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\ndata.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;redirect&quot;&lt;/span&gt;, redirectURL);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;().toJson(data);\n\nresponse.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);\nresponse.setCharacterEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);\nresponse.getWriter().write(json);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;function(responseJson) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (responseJson.redirect) {\n        window.location = responseJson.redirect;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;See also:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2132242/need-to-call-servlet-from-javascript-along-with-parameters&quot;&gt;Call Servlet and invoke Java code from JavaScript along with parameters&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3832792/access-java-servlet-jsp-jstl-el-variables-in-javascript&quot;&gt;Access Java / Servlet / JSP / JSTL / EL variables in JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2600582/how-to-switch-easily-between-ajax-based-website-and-basic-html-website/&quot;&gt;How can I switch easily between an Ajax-based website and a basic HTML website?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6914152/how-to-upload-files-to-server-using-jsp-servlet-and-ajax&quot;&gt;How can I upload files to a server using JSP/Servlet and Ajax?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The right way to update the page currently displayed in the user&apos;s browser (without reloading it) is to have some code executing in the browser update the page&apos;s DOM.&lt;/p&gt;\n&lt;p&gt;That code is typically JavaScript that is embedded in or linked from the HTML page, hence the Ajax suggestion.  (In fact, if we assume that the updated text comes from the server via an HTTP request, this is classic Ajax.)&lt;/p&gt;\n&lt;p&gt;It is also possible to implement this kind of thing using some browser plugin or add-on, though it may be tricky for a plugin to reach into the browser&apos;s data structures to update the DOM.  (Native code plugins normally write to some graphics frame that is embedded in the page.)&lt;/p&gt;\n    ","\n&lt;p&gt;I will show you a whole example of a servlet and how do an Ajax call.&lt;/p&gt;\n&lt;p&gt;Here, we are going to create the simple example to create the login form using a servlet.&lt;/p&gt;\n&lt;h3&gt;File &lt;em&gt;index.html&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   Name:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n   Password:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userpass&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;login&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;An Ajax sample&lt;/h3&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.ajax\n({\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;LoginServlet=&apos;&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;amp;name=&apos;&lt;/span&gt; + type + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;amp;pass=&apos;&lt;/span&gt; + password,\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: url,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;content&lt;/span&gt;)\n    {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#center&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(content);\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;LoginServlet servlet code:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; abc.servlet;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AuthenticationServlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HttpServlet&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException\n    {\n        doPost(request, response);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request,\n                          HttpServletResponse response)&lt;/span&gt;\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n            &lt;span class=&quot;hljs-type&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getSession();\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pass&quot;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;/// Your Code&lt;/span&gt;\n            out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sucess / failer&quot;&lt;/span&gt;)\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// System.err.println(&quot;Initial SessionFactory creation failed.&quot;);&lt;/span&gt;\n            ex.printStackTrace();\n            System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;URL to hit on servelet&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(json),\n    &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;json&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// We have the response&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(response.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;){\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#info&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Info  has been added to the list successfully.&amp;lt;br&amp;gt;&quot;&lt;/span&gt; +\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;The details are as follws: &amp;lt;br&amp;gt; Name: &quot;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#info&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorry, there is some thing wrong with the data provided.&quot;&lt;/span&gt;);\n        }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Error: &apos;&lt;/span&gt; + e);\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Ajax (also AJAX), an acronym for Asynchronous JavaScript and XML, is a group of interrelated web development techniques used on the client-side to create asynchronous web applications. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously.&lt;/p&gt;\n&lt;p&gt;Below is the example code:&lt;/p&gt;\n&lt;p&gt;A JSP page JavaScript function to submit data to a servlet with two variables, firstName and lastName:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;function &lt;span class=&quot;hljs-title function_&quot;&gt;onChangeSubmitCallWebServiceAJAX&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    createXmlHttpRequest();\n    &lt;span class=&quot;hljs-type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstName&quot;&lt;/span&gt;).value;\n    &lt;span class=&quot;hljs-type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;lastName&quot;&lt;/span&gt;).value;\n    xmlHttp.open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/AJAXServletCallSample/AjaxServlet?firstName=&quot;&lt;/span&gt;\n    + firstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;lastName=&quot;&lt;/span&gt; + lastName, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    xmlHttp.onreadystatechange = handleStateChange;\n    xmlHttp.send(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Servlet to read data send back to JSP in XML format (you could use text as well. You just need to change the response content to text and render data on JavaScript function.)&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstName&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;lastName&quot;&lt;/span&gt;);\n\n    response.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/xml&quot;&lt;/span&gt;);\n    response.setHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;);\n    response.getWriter().write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;details&amp;gt;&quot;&lt;/span&gt;);\n    response.getWriter().write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;firstName&amp;gt;&quot;&lt;/span&gt; + firstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/firstName&amp;gt;&quot;&lt;/span&gt;);\n    response.getWriter().write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;lastName&amp;gt;&quot;&lt;/span&gt; + lastName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/lastName&amp;gt;&quot;&lt;/span&gt;);\n    response.getWriter().write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/details&amp;gt;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Normally you cant update a page from a servlet. The client (browser) has to request an update. Either the  client loads a whole new page or it requests an update to a part of an existing page. This technique is called Ajax.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;a href=&quot;https://en.wikipedia.org/wiki/Bootstrap_%28front-end_framework%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bootstrap&lt;/a&gt; multi select:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Ajax&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;function() { $.ajax({\n    type: &lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;,\n    url: &lt;span class=&quot;hljs-string&quot;&gt;&quot;OperatorController&quot;&lt;/span&gt;,\n    data: &lt;span class=&quot;hljs-string&quot;&gt;&quot;input=&quot;&lt;/span&gt; + $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#province&apos;&lt;/span&gt;).val(),\n    success: function(msg) {\n    &lt;span class=&quot;hljs-type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;arrayOfObjects&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; eval(msg);\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#operators&quot;&lt;/span&gt;).multiselect(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dataprovider&apos;&lt;/span&gt;,\n    arrayOfObjects);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// $(&apos;#output&apos;).append(obj);&lt;/span&gt;\n    },\n    dataType: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;\n    });}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;In Servlet&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"205":["\n&lt;p&gt;&lt;strong&gt;You are a victim of &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot; rel=&quot;noreferrer&quot;&gt;branch prediction&lt;/a&gt; fail.&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;what-is-branch-prediction-vn8w&quot;&gt;What is Branch Prediction?&lt;/h2&gt;\n&lt;p&gt;Consider a railroad junction:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/muxnt.jpg&quot; alt=&quot;Image showing a railroad junction&quot;&gt;&lt;/a&gt;\n&lt;sub&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG&quot; rel=&quot;noreferrer&quot;&gt;Image&lt;/a&gt; by Mecanismo, via Wikimedia Commons. Used under the &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.en&quot; rel=&quot;noreferrer&quot;&gt;CC-By-SA 3.0&lt;/a&gt; license.&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;Now for the sake of argument, suppose this is back in the 1800s - before long-distance or radio communication.&lt;/p&gt;\n&lt;p&gt;You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Trains are heavy and have a lot of inertia, so they take forever to start up and slow down.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Is there a better way? You guess which direction the train will go!&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you guessed right, it continues on.&lt;/li&gt;\n&lt;li&gt;If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;If you guess right every time&lt;/strong&gt;, the train will never have to stop.&lt;br&gt;\n&lt;strong&gt;If you guess wrong too often&lt;/strong&gt;, the train will spend a lot of time stopping, backing up, and restarting.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Consider an if-statement:&lt;/strong&gt; At the processor level, it is a branch instruction:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/pyfwC.png&quot; alt=&quot;Screenshot of compiled code containing an if statement&quot;&gt;&lt;/p&gt;\n&lt;p&gt;You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Modern processors are complicated and have long pipelines. This means they take forever to &quot;warm up&quot; and &quot;slow down&quot;.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Is there a better way? You guess which direction the branch will go!&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you guessed right, you continue executing.&lt;/li&gt;\n&lt;li&gt;If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;If you guess right every time&lt;/strong&gt;, the execution will never have to stop.&lt;br&gt;\n&lt;strong&gt;If you guess wrong too often&lt;/strong&gt;, you spend a lot of time stalling, rolling back, and restarting.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;This is branch prediction. I admit it&apos;s not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn&apos;t know which direction a branch will go until the last moment.&lt;/p&gt;\n&lt;p&gt;How would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;In other words, you try to identify a pattern and follow it.&lt;/strong&gt;&lt;/em&gt; This is more or less how branch predictors work.&lt;/p&gt;\n&lt;p&gt;Most applications have well-behaved branches. Therefore, modern branch predictors will typically achieve &amp;gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.&lt;/p&gt;\n&lt;p&gt;Further reading: &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot; rel=&quot;noreferrer&quot;&gt;&quot;Branch predictor&quot; article on Wikipedia&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;as-hinted-from-above-the-culprit-is-this-if-statement-jykx&quot;&gt;As hinted from above, the culprit is this if-statement:&lt;/h2&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;gt;= 128)&lt;/span&gt;\n    sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.&lt;/p&gt;\n&lt;p&gt;This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Quick visualization:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, when the data is completely random, the branch predictor is rendered useless, because it can&apos;t predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T  ...\n\n       = TTNTTTTNTNNTTT ...   (completely random - impossible to predict)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;What can be done?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If the compiler isn&apos;t able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.&lt;/p&gt;\n&lt;p&gt;Replace:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;gt;= 128)&lt;/span&gt;\n    sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt; t = (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] - 128) &amp;gt;&amp;gt; 31;&lt;/span&gt;\n&lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt; += ~t &amp;amp; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This eliminates the branch and replaces it with some bitwise operations.&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it&apos;s valid for all the input values of &lt;code&gt;data[]&lt;/code&gt;.)&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Benchmarks: Core i7 920 @ 3.5 GHz&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;C++ - Visual Studio 2010 - x64 Release&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Scenario&lt;/th&gt;\n&lt;th&gt;Time (seconds)&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Random data&lt;/td&gt;\n&lt;td&gt;11.777&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Sorted data&lt;/td&gt;\n&lt;td&gt;2.352&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Random data&lt;/td&gt;\n&lt;td&gt;2.564&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Sorted data&lt;/td&gt;\n&lt;td&gt;2.587&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;Java - NetBeans 7.1.1 JDK 7 - x64&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Scenario&lt;/th&gt;\n&lt;th&gt;Time (seconds)&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Random data&lt;/td&gt;\n&lt;td&gt;10.93293813&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Sorted data&lt;/td&gt;\n&lt;td&gt;5.643797077&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Random data&lt;/td&gt;\n&lt;td&gt;3.113581453&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Sorted data&lt;/td&gt;\n&lt;td&gt;3.186068823&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;Observations:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;With the Branch:&lt;/strong&gt; There is a huge difference between the sorted and unsorted data.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;With the Hack:&lt;/strong&gt; There is no difference between sorted and unsorted data.&lt;/li&gt;\n&lt;li&gt;In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;GCC 4.6.1 with &lt;code&gt;-O3&lt;/code&gt; or &lt;code&gt;-ftree-vectorize&lt;/code&gt; on x64 is able to generate a conditional move, so there is no difference between the sorted and unsorted data - both are fast.&lt;/p&gt;\n&lt;p&gt;(Or somewhat fast: for the already-sorted case, &lt;code&gt;cmov&lt;/code&gt; can be slower especially if GCC puts it on the critical path instead of just &lt;code&gt;add&lt;/code&gt;, especially on Intel before Broadwell where &lt;code&gt;cmov&lt;/code&gt; has 2 cycle latency: &lt;a href=&quot;https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2&quot;&gt;gcc optimization flag -O3 makes code slower than -O2&lt;/a&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;VC++ 2010 is unable to generate conditional moves for this branch even under &lt;code&gt;/Ox&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_C++_Compiler&quot; rel=&quot;noreferrer&quot;&gt;Intel C++ Compiler&lt;/a&gt; (ICC) 11 does something miraculous. It &lt;a href=&quot;https://en.wikipedia.org/wiki/Loop_interchange&quot; rel=&quot;noreferrer&quot;&gt;interchanges the two loops&lt;/a&gt;, thereby hoisting the unpredictable branch to the outer loop. Not only is it immune to the mispredictions, it&apos;s also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you give the Intel compiler the branchless code, it just outright vectorizes it... and is just as fast as with the branch (with the loop interchange).&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Branch prediction.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;With a sorted array, the condition &lt;code&gt;data[c] &amp;gt;= 128&lt;/code&gt; is first &lt;code&gt;false&lt;/code&gt; for a streak of values, then becomes &lt;code&gt;true&lt;/code&gt; for all later values. That&apos;s easy to predict. With an unsorted array, you pay for the branching cost.&lt;/p&gt;\n    ","\n&lt;p&gt;The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in &lt;a href=&quot;//stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array/11227902#11227902&quot;&gt;Mysticial&apos;s answer&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Now, if we look at the code&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;gt;= 128)&lt;/span&gt;\n    sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;we can find that the meaning of this particular &lt;code&gt;if... else...&lt;/code&gt; branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a &lt;strong&gt;conditional move&lt;/strong&gt; statement, which would be compiled into a conditional move instruction: &lt;code&gt;cmovl&lt;/code&gt;, in an &lt;code&gt;x86&lt;/code&gt; system. The branch and thus the potential branch prediction penalty is removed.&lt;/p&gt;\n&lt;p&gt;In &lt;code&gt;C&lt;/code&gt;, thus &lt;code&gt;C++&lt;/code&gt;, the statement, which would compile directly (without any optimization) into the conditional move instruction in &lt;code&gt;x86&lt;/code&gt;, is the ternary operator &lt;code&gt;... ? ... : ...&lt;/code&gt;. So we rewrite the above statement into an equivalent one:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt; += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;gt;=128 ? &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] : 0;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While maintaining readability, we can check the speedup factor.&lt;/p&gt;\n&lt;p&gt;On an Intel &lt;a href=&quot;//en.wikipedia.org/wiki/Intel_Core#Core_i7&quot; rel=&quot;noreferrer&quot;&gt;Core i7&lt;/a&gt;-2600K @ 3.4&amp;nbsp;GHz and Visual Studio 2010 Release Mode, the benchmark is:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;x86&lt;/strong&gt;&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Scenario&lt;/th&gt;\n&lt;th&gt;Time (seconds)&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Random data&lt;/td&gt;\n&lt;td&gt;8.885&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Sorted data&lt;/td&gt;\n&lt;td&gt;1.528&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Random data&lt;/td&gt;\n&lt;td&gt;3.716&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Sorted data&lt;/td&gt;\n&lt;td&gt;3.71&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;strong&gt;x64&lt;/strong&gt;&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Scenario&lt;/th&gt;\n&lt;th&gt;Time (seconds)&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Random data&lt;/td&gt;\n&lt;td&gt;11.302&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branching - Sorted data&lt;/td&gt;\n&lt;td&gt;1.830&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Random data&lt;/td&gt;\n&lt;td&gt;2.736&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Branchless - Sorted data&lt;/td&gt;\n&lt;td&gt;2.737&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;The result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s look more closely by investigating the &lt;code&gt;x86&lt;/code&gt; assembly they generate. For simplicity, we use two functions &lt;code&gt;max1&lt;/code&gt; and &lt;code&gt;max2&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;max1&lt;/code&gt; uses the conditional branch &lt;code&gt;if... else ...&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;max1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &amp;gt; b)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;max2&lt;/code&gt; uses the ternary operator &lt;code&gt;... ? ... : ...&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;int max2(int &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;, int &lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt;) {\n    return &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt; ? &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; : b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On an x86-64 machine, &lt;code&gt;GCC -S&lt;/code&gt; generates the assembly below.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;:max1\n    movl    %edi, -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;(%rbp)\n    movl    %esi, -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;(%rbp)\n    movl    -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;(%rbp), %eax\n    cmpl    -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;(%rbp), %eax\n    jle     .L2\n    movl    -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;(%rbp), %eax\n    movl    %eax, -&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;(%rbp)\n    jmp     .L4\n.L2:\n    movl    -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;(%rbp), %eax\n    movl    %eax, -&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;(%rbp)\n.L4:\n    movl    -&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;(%rbp), %eax\n    leave\n    ret\n\n:max2\n    movl    %edi, -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;(%rbp)\n    movl    %esi, -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;(%rbp)\n    movl    -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;(%rbp), %eax\n    cmpl    %eax, -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;(%rbp)\n    cmovge  -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;(%rbp), %eax\n    leave\n    ret\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;max2&lt;/code&gt; uses much less code due to the usage of instruction &lt;code&gt;cmovge&lt;/code&gt;. But the real gain is that &lt;code&gt;max2&lt;/code&gt; does not involve branch jumps, &lt;code&gt;jmp&lt;/code&gt;, which would have a significant performance penalty if the predicted result is not right.&lt;/p&gt;\n&lt;p&gt;So why does a conditional move perform better?&lt;/p&gt;\n&lt;p&gt;In a typical &lt;code&gt;x86&lt;/code&gt; processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called &lt;strong&gt;&lt;a href=&quot;//en.wikipedia.org/wiki/Pipeline_(computing)&quot; rel=&quot;noreferrer&quot;&gt;pipelining&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;In a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.&lt;/p&gt;\n&lt;p&gt;In a conditional move case, the execution of conditional move instruction is divided into several stages, but the earlier stages like &lt;code&gt;Fetch&lt;/code&gt; and &lt;code&gt;Decode&lt;/code&gt; do not depend on the result of the previous instruction; only the latter stages need the result. Thus, we wait a fraction of one instruction&apos;s execution time. This is why the conditional move version is slower than the branch when the prediction is easy.&lt;/p&gt;\n&lt;p&gt;The book &lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0136108040&quot; rel=&quot;noreferrer&quot;&gt;Computer Systems: A Programmer&apos;s Perspective, second edition&lt;/a&gt;&lt;/em&gt; explains this in detail. You can check Section 3.6.6 for &lt;em&gt;Conditional Move Instructions&lt;/em&gt;, entire Chapter 4 for &lt;em&gt;Processor Architecture&lt;/em&gt;, and Section 5.11.2 for special treatment for &lt;em&gt;Branch Prediction and Misprediction Penalties&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Sometimes, some modern compilers can optimize our code to assembly with better performance, and sometimes some compilers can&apos;t (the code in question is using Visual Studio&apos;s native compiler). Knowing the performance difference between a branch and a conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are curious about even more optimizations that can be done to this code, consider this:&lt;/p&gt;\n\n&lt;p&gt;Starting with the original loop:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; (unsigned i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i)\n{\n    for (unsigned j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; arraySize; ++j)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j] &amp;gt;= 128)&lt;/span&gt;\n            sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j];&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With loop interchange, we can safely change this loop to:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; (unsigned j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; arraySize; ++j)\n{\n    for (unsigned i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j] &amp;gt;= 128)&lt;/span&gt;\n            sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j];&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, you can see that the &lt;code&gt;if&lt;/code&gt; conditional is constant throughout the execution of the &lt;code&gt;i&lt;/code&gt; loop, so you can hoist the &lt;code&gt;if&lt;/code&gt; out:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; (unsigned j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; arraySize; ++j)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j] &amp;gt;= 128)&lt;/span&gt;\n    {\n        for (unsigned i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i)\n        {\n            sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j];&lt;/span&gt;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (&lt;code&gt;/fp:fast&lt;/code&gt; is thrown, for example)&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; (unsigned j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; arraySize; ++j)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j] &amp;gt;= 128)&lt;/span&gt;\n    {\n        sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j] * 100000;&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That one is 100,000 times faster than before.&lt;/p&gt;\n    ","\n&lt;p&gt;No doubt some of us would be interested in ways of identifying code that is problematic for the CPU&apos;s branch-predictor. The Valgrind tool &lt;code&gt;cachegrind&lt;/code&gt; has a branch-predictor simulator, enabled by using the &lt;code&gt;--branch-sim=yes&lt;/code&gt; flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with &lt;code&gt;g++&lt;/code&gt;, gives these results:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorted:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;==32551==&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;Branches:&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;656&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,645,130&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;656&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,609,208&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,922&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ind)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;==32551==&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;Mispredicts:&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,556&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,095&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;461&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ind)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;==32551==&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;Mispred rate:&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt;     &lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt;   &lt;span class=&quot;hljs-string&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Unsorted:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;==32555==&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;Branches:&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;655&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,996,082&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;655&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,960,160&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,922&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ind)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;==32555==&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;Mispredicts:&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;164&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,073,152&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;164&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;,072,692&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;460&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ind)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;==32555==&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;Mispred rate:&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;25.0&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;25.0&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt;     &lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt;   &lt;span class=&quot;hljs-string&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Drilling down into the line-by-line output produced by &lt;code&gt;cg_annotate&lt;/code&gt; we see for the loop in question:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorted:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;          Bc    Bcm Bi Bim\n      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;001&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;unsigned i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n           .      .  .   .      &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n           .      .  .   .          &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; primary loop\n &lt;span class=&quot;hljs-number&quot;&gt;327&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;690&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;016&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;unsigned &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; arraySize; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n           .      .  .   .          &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;327&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;680&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;006&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n           &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;                  &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;;\n           .      .  .   .          &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n           .      .  .   .      &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Unsorted:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;          Bc         Bcm Bi Bim\n      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;001&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;unsigned i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n           .           .  .   .      &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n           .           .  .   .          &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; primary loop\n &lt;span class=&quot;hljs-number&quot;&gt;327&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;690&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;unsigned &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; arraySize; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n           .           .  .   .          &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;327&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;680&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;164&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;050&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;007&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n           &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;                  &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;;\n           .           .  .   .          &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n           .           .  .   .      &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This lets you easily identify the problematic line - in the unsorted version the &lt;code&gt;if (data[c] &amp;gt;= 128)&lt;/code&gt; line is causing 164,050,007 mispredicted conditional branches (&lt;code&gt;Bcm&lt;/code&gt;) under cachegrind&apos;s branch-predictor model, whereas it&apos;s only causing 10,006 in the sorted version.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Alternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;perf &lt;span class=&quot;hljs-built_in&quot;&gt;stat&lt;/span&gt; ./sumtest_sorted\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorted:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt; Performance counter stats &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;./sumtest_sorted&apos;&lt;/span&gt;:\n\n  &lt;span class=&quot;hljs-number&quot;&gt;11808.095776&lt;/span&gt; task-clock                &lt;span class=&quot;hljs-comment&quot;&gt;#    0.998 CPUs utilized          &lt;/span&gt;\n         &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;062&lt;/span&gt; context-switches          &lt;span class=&quot;hljs-comment&quot;&gt;#    0.090 K/sec                  &lt;/span&gt;\n            &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; CPU-migrations            &lt;span class=&quot;hljs-comment&quot;&gt;#    0.001 K/sec                  &lt;/span&gt;\n           &lt;span class=&quot;hljs-number&quot;&gt;337&lt;/span&gt; page-faults               &lt;span class=&quot;hljs-comment&quot;&gt;#    0.029 K/sec                  &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;487&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;882&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;764&lt;/span&gt; cycles                    &lt;span class=&quot;hljs-comment&quot;&gt;#    2.243 GHz                    &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;025&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;654&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;322&lt;/span&gt; instructions              &lt;span class=&quot;hljs-comment&quot;&gt;#    1.55  insns per cycle        &lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;558&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;871&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;379&lt;/span&gt; branches                  &lt;span class=&quot;hljs-comment&quot;&gt;#  555.455 M/sec                  &lt;/span&gt;\n       &lt;span class=&quot;hljs-number&quot;&gt;567&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt; branch-misses             &lt;span class=&quot;hljs-comment&quot;&gt;#    0.01% of all branches        &lt;/span&gt;\n\n  &lt;span class=&quot;hljs-number&quot;&gt;11.827228330&lt;/span&gt; seconds &lt;span class=&quot;hljs-keyword&quot;&gt;time&lt;/span&gt; elapsed\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Unsorted:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt; Performance counter stats &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;./sumtest_unsorted&apos;&lt;/span&gt;:\n\n  &lt;span class=&quot;hljs-number&quot;&gt;28877.954344&lt;/span&gt; task-clock                &lt;span class=&quot;hljs-comment&quot;&gt;#    0.998 CPUs utilized          &lt;/span&gt;\n         &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;584&lt;/span&gt; context-switches          &lt;span class=&quot;hljs-comment&quot;&gt;#    0.089 K/sec                  &lt;/span&gt;\n            &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; CPU-migrations            &lt;span class=&quot;hljs-comment&quot;&gt;#    0.001 K/sec                  &lt;/span&gt;\n           &lt;span class=&quot;hljs-number&quot;&gt;335&lt;/span&gt; page-faults               &lt;span class=&quot;hljs-comment&quot;&gt;#    0.012 K/sec                  &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;076&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;127&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;595&lt;/span&gt; cycles                    &lt;span class=&quot;hljs-comment&quot;&gt;#    2.253 GHz                    &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;032&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;528&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;741&lt;/span&gt; instructions              &lt;span class=&quot;hljs-comment&quot;&gt;#    0.63  insns per cycle        &lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;560&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;579&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;013&lt;/span&gt; branches                  &lt;span class=&quot;hljs-comment&quot;&gt;#  227.183 M/sec                  &lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;646&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;394&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;749&lt;/span&gt; branch-misses             &lt;span class=&quot;hljs-comment&quot;&gt;#   25.10% of all branches        &lt;/span&gt;\n\n  &lt;span class=&quot;hljs-number&quot;&gt;28.935500947&lt;/span&gt; seconds &lt;span class=&quot;hljs-keyword&quot;&gt;time&lt;/span&gt; elapsed\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can also do source code annotation with dissassembly.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;perf record -e branch-misses ./sumtest_unsorted\nperf annotate -d sumtest_unsorted\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt; Percent |      Source code &amp;amp; Disassembly of sumtest_unsorted\n------------------------------------------------\n...\n         :                      sum += data[c];\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; :        &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;a1a:       mov    -&lt;span class=&quot;hljs-number&quot;&gt;0x14&lt;/span&gt;(%rbp),%eax\n   &lt;span class=&quot;hljs-number&quot;&gt;39.97&lt;/span&gt; :        &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;a1d:       mov    %eax,%eax\n    &lt;span class=&quot;hljs-number&quot;&gt;5.31&lt;/span&gt; :        &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;a1f:       mov    -&lt;span class=&quot;hljs-number&quot;&gt;0x20040&lt;/span&gt;(%rbp,%rax,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),%eax\n    &lt;span class=&quot;hljs-number&quot;&gt;4.60&lt;/span&gt; :        &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;a26:       cltq   \n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; :        &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;a28:       add    %rax,-&lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;(%rbp)\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Tutorial&quot; rel=&quot;noreferrer&quot;&gt;the performance tutorial&lt;/a&gt; for more details.&lt;/p&gt;\n    ","\n&lt;p&gt;I just read up on this question and its answers, and I feel an answer is missing.&lt;/p&gt;\n\n&lt;p&gt;A common way to eliminate branch prediction that I&apos;ve found to work particularly good in managed languages is a table lookup instead of using a branch (although I haven&apos;t tested it in this case).&lt;/p&gt;\n\n&lt;p&gt;This approach works in general if:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;it&apos;s a small table and is likely to be cached in the processor, and&lt;/li&gt;\n&lt;li&gt;you are running things in a quite tight loop and/or the processor can preload the data.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;Background and why&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;From a processor perspective, your memory is slow. To compensate for the difference in speed, a couple of caches are built into your processor (L1/L2 cache). So imagine that you&apos;re doing your nice calculations and figure out that you need a piece of memory. The processor will get its &apos;load&apos; operation and loads the piece of memory into cache -- and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this &apos;load&apos; will slow down your program.&lt;/p&gt;\n\n&lt;p&gt;Like branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we&apos;ve already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (&lt;strong&gt;in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;p&gt;Fortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.&lt;/p&gt;\n\n&lt;p&gt;The first thing we need to know is what is &lt;em&gt;small&lt;/em&gt;? While smaller is generally better, a rule of thumb is to stick to lookup tables that are &amp;lt;= 4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it&apos;s probably worth reconsidering.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Constructing a table&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So we&apos;ve figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps multiply). You want to have your input translated by the lookup function to some kind of &apos;unique key&apos; in your table, which then simply gives you the answer of all the work you wanted it to do.&lt;/p&gt;\n\n&lt;p&gt;In this case: &amp;gt;= 128 means we can keep the value, &amp;lt; 128 means we get rid of it. The easiest way to do that is by using an &apos;AND&apos;: if we keep it, we AND it with 7FFFFFFF; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF&apos;s.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Managed languages&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don&apos;t mess up...&lt;/p&gt;\n\n&lt;p&gt;Well, not exactly... :-)&lt;/p&gt;\n\n&lt;p&gt;There has been quite some work on eliminating this branch for managed languages. For example:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.Length; ++i)\n{\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Use array[i]&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, it&apos;s obvious to the compiler that the boundary condition will never be hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check altogether. WOW, that means no branch. Similarly, it will deal with other obvious cases.&lt;/p&gt;\n\n&lt;p&gt;If you run into trouble with lookups in managed languages -- the key is to add a &lt;code&gt;&amp;amp; 0x[something]FFF&lt;/code&gt; to your lookup function to make the boundary check predictable -- and watch it going faster.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The result of this case&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Generate data&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; arraySize = &lt;span class=&quot;hljs-number&quot;&gt;32768&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[arraySize];\n\nRandom random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; arraySize; ++c)\n{\n    data[c] = random.Next(&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*To keep the spirit of the code intact, I&apos;ll make a separate lookup table\n(I assume we cannot modify &apos;data&apos; or the number of loops)*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] lookup = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; ++c)\n{\n    lookup[c] = (c &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;) ? c : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Test&lt;/span&gt;\nDateTime startTime = System.DateTime.Now;\n&lt;span class=&quot;hljs-built_in&quot;&gt;long&lt;/span&gt; sum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Primary loop&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; arraySize; ++j)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* Here you basically want to use simple operations - so no\n        random branches, but things like &amp;amp;, |, *, -, +, etc. are fine. */&lt;/span&gt;\n        sum += lookup[data[j]];\n    }\n}\n\nDateTime endTime = System.DateTime.Now;\nConsole.WriteLine(endTime - startTime);\nConsole.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sum = &quot;&lt;/span&gt; + sum);\nConsole.ReadLine();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As data is distributed between 0 and 255 when the array is sorted, around the first half of the iterations will not enter the &lt;code&gt;if&lt;/code&gt;-statement (the &lt;code&gt;if&lt;/code&gt; statement is shared below).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;gt;= 128)&lt;/span&gt;\n    sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The question is: What makes the above statement not execute in certain cases as in case of sorted data? Here comes the &quot;branch predictor&quot;. A branch predictor is a digital circuit that tries to guess which way a branch (e.g. an &lt;code&gt;if-then-else&lt;/code&gt; structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Let&apos;s do some bench marking to understand it better&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The performance of an &lt;code&gt;if&lt;/code&gt;-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the &lt;code&gt;if&lt;/code&gt;-statement will be much more expensive.&lt;/p&gt;\n\n&lt;p&gt;Lets measure the performance of this loop with different conditions:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;; i++)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;++;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here are the timings of the loop with different true-false patterns:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;Condition                Pattern             Time &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;×&lt;span class=&quot;hljs-number&quot;&gt;80000000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt; repeated          &lt;span class=&quot;hljs-number&quot;&gt;322&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;F&lt;/span&gt; repeated          &lt;span class=&quot;hljs-number&quot;&gt;276&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;             TF alternating      &lt;span class=&quot;hljs-number&quot;&gt;760&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;             TFFFTFFF           &lt;span class=&quot;hljs-number&quot;&gt;513&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;             TTFFTTFF           &lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;             TTTTFFFFTTTTFFFF   &lt;span class=&quot;hljs-number&quot;&gt;1275&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;F&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;752&lt;/span&gt;\n\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;F&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;490&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A &lt;strong&gt;bad&lt;/strong&gt; true-false pattern can make an &lt;code&gt;if&lt;/code&gt;-statement up to six times slower than a &lt;strong&gt;good&lt;/strong&gt; pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.&lt;/p&gt;\n\n&lt;p&gt;So there is no doubt about the impact of branch prediction on performance!&lt;/p&gt;\n    ","\n&lt;p&gt;One way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.&lt;/p&gt;\n&lt;p&gt;But in this case, we know values are in the range [0, 255] and we only care about values &amp;gt;= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let&apos;s call this bit the &quot;decision bit&quot;.&lt;/p&gt;\n&lt;p&gt;By using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don&apos;t care about.  Here&apos;s the code:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Test&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;clock_t&lt;/span&gt; start = &lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; a[] = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; sum;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Primary loop&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; arraySize; ++c)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = (data[c] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n        a[j] += data[c];\n    }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; elapsedTime = &lt;span class=&quot;hljs-built_in&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;() - start) / CLOCKS_PER_SEC;\nsum = a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code wastes half of the adds but never has a branch prediction failure.  It&apos;s tremendously faster on random data than the version with an actual if statement.&lt;/p&gt;\n&lt;p&gt;But in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called &lt;code&gt;lut&lt;/code&gt; for &quot;LookUp Table&quot; in the code).  Here&apos;s the C++ code:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Declare and then fill in the lookup table&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lut[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; ++c)\n    lut[c] = (c &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;) ? c : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Use the lookup table after it is built&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Primary loop&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; arraySize; ++c)\n    {\n        sum += lut[data[c]];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this case, the lookup table was only 256 bytes, so it fits nicely in a cache and all was fast.  This technique wouldn&apos;t work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.&lt;/p&gt;\n&lt;p&gt;The technique of indexing into an array, instead of using an &lt;code&gt;if&lt;/code&gt; statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (&lt;code&gt;pLeft&lt;/code&gt; and &lt;code&gt;pRight&lt;/code&gt; or whatever) had a length-2 array of pointers and used the &quot;decision bit&quot; technique to decide which one to follow.  For example, instead of:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;if&lt;/span&gt; (x &amp;lt; node&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;value)\n    node = node&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;pLeft;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    node = node&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;pRight;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this library would do something like:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;i&lt;/span&gt; = (x &amp;lt; node-&amp;gt;value)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;node&lt;/span&gt; = node-&amp;gt;link[i]&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s a link to this code: &lt;a href=&quot;https://web.archive.org/web/20190207151651/https://www.eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx&quot; rel=&quot;noreferrer&quot;&gt;Red Black Trees&lt;/a&gt;, &lt;em&gt;Eternally Confuzzled&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.&lt;/p&gt;\n\n&lt;p&gt;Indeed, the array is partitioned in a contiguous zone with &lt;code&gt;data &amp;lt; 128&lt;/code&gt; and another with &lt;code&gt;data &amp;gt;= 128&lt;/code&gt;. So you should find the partition point with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Dichotomic_search&quot; rel=&quot;noreferrer&quot;&gt;dichotomic search&lt;/a&gt; (using &lt;code&gt;Lg(arraySize) = 15&lt;/code&gt; comparisons), then do a straight accumulation from that point.&lt;/p&gt;\n\n&lt;p&gt;Something like (unchecked)&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, j, k= arraySize;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; k)\n{\n  j= (i + k) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data[j] &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;)\n    k= j;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    i= j;\n}\n&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; i &amp;lt; arraySize; i++)\n  &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;+= data[i];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or, slightly more obfuscated&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt; i, k, j= (i + k) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; (i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, k= arraySize; i &amp;lt; k; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[j] &amp;gt;= 128 ? k : i)= j)&lt;/span&gt;\n  j= (i + k) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; (sum= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arraySize; i++)\n  sum+= &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[i];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A yet faster approach, that gives an &lt;strong&gt;approximate&lt;/strong&gt; solution for both sorted or unsorted is: &lt;code&gt;sum= 3137536;&lt;/code&gt; (assuming a truly uniform distribution, 16384 samples with expected value 191.5) &lt;strong&gt;:-)&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The above behavior is happening because of Branch prediction.&lt;/p&gt;\n&lt;p&gt;To understand branch prediction one must first understand an &lt;strong&gt;Instruction Pipeline.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The the steps of running an instruction can be overlapped with the sequence of steps of running the previous and next instruction, so that different steps can be executed concurrently in parallel. This technique is known as instruction pipelining and is used to increase throughput in modern processors. To understand this better please see this &lt;a href=&quot;https://en.wikipedia.org/wiki/Pipeline_(computing)#Concept_and_motivation&quot; rel=&quot;noreferrer&quot;&gt;example on Wikipedia&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Generally, modern processors have quite long (and wide) pipelines, so many instruction can be in flight.  See &lt;a href=&quot;https://www.lighterra.com/papers/modernmicroprocessors/&quot; rel=&quot;noreferrer&quot;&gt;Modern Microprocessors\nA 90-Minute Guide!&lt;/a&gt; which starts by introducing basic in-order pipelining and goes from there.&lt;/p&gt;\n&lt;p&gt;But for ease &lt;strong&gt;let&apos;s consider a simple in-order pipeline with these 4 steps only.&lt;/strong&gt;&lt;br&gt;\n(Like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Classic_RISC_pipeline&quot; rel=&quot;noreferrer&quot;&gt;classic 5-stage RISC&lt;/a&gt;, but omitting a separate MEM stage.)&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;IF -- Fetch the instruction from memory&lt;/li&gt;\n&lt;li&gt;ID -- Decode the instruction&lt;/li&gt;\n&lt;li&gt;EX -- Execute the instruction&lt;/li&gt;\n&lt;li&gt;WB -- Write back to CPU register&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;4-stage pipeline in general for 2 instructions.&lt;/strong&gt;&lt;br&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/PqBBR.png&quot; alt=&quot;4-stage pipeline in general&quot;&gt;&lt;/p&gt;\n&lt;p&gt;Moving back to the above question let&apos;s consider the following instructions:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;                        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;gt;= 128)&lt;/span&gt;\n                                /\\\n                               /  \\\n                              /    \\\n                        true /      \\ false\n                            /        \\\n                           /          \\\n                          /            \\\n                         /              \\\n              &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt;) sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];          &lt;span class=&quot;hljs-type&quot;&gt;C&lt;/span&gt;) for loop or print().&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Without branch prediction, the following would occur:&lt;/p&gt;\n&lt;p&gt;To execute instruction B or instruction C the processor will have to wait (&lt;em&gt;stall&lt;/em&gt;) till the instruction A leaves the EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A.  (i.e. where to fetch from next.) So the pipeline will look like this:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Without prediction: when &lt;code&gt;if&lt;/code&gt; condition is true:&lt;/strong&gt;&lt;/em&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/0H4gP.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Without prediction: When &lt;code&gt;if&lt;/code&gt; condition is false:&lt;/strong&gt;&lt;/em&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/APpca.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;p&gt;As a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;So what is branch prediction?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Branch predictor will try to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go to that instruction (B or C in case of our example).&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;In case of a correct guess, the pipeline looks something like this:&lt;/strong&gt;&lt;/em&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/ZYUbs.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;p&gt;If it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay.\nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot; rel=&quot;noreferrer&quot;&gt;branch predictor&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;In the OP&apos;s code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so the first time it will randomly choose the next instruction. (Or fall back to &lt;em&gt;static&lt;/em&gt; prediction, typically forward not-taken, backward taken).  Later in the for loop, it can base the prediction on the history.\nFor an array sorted in ascending order, there are three possibilities:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt; All the elements are less than 128\n&lt;/li&gt;&lt;li&gt; All the elements are greater than 128\n&lt;/li&gt;&lt;li&gt; Some starting new elements are less than 128 and later it become greater than 128\n&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;Let us assume that the predictor will always assume the true branch on the first run.&lt;/p&gt;\n&lt;p&gt;So in the first case, it will always take the true branch since historically all its predictions are correct.\nIn the 2nd case, initially it will predict wrong, but after a few iterations, it will predict correctly.\nIn the 3rd case, it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it sees branch prediction failure in history.&lt;/p&gt;\n&lt;p&gt;In all these cases the failure will be too less in number and as a result, only a few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in fewer CPU cycles.&lt;/p&gt;\n&lt;p&gt;But in case of a random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Further reading:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.lighterra.com/papers/modernmicroprocessors/&quot; rel=&quot;noreferrer&quot;&gt;Modern Microprocessors\nA 90-Minute Guide!&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://danluu.com/branch-prediction/&quot; rel=&quot;noreferrer&quot;&gt;Dan Luu&apos;s article on branch prediction&lt;/a&gt; (which covers older branch predictors, not modern IT-TAGE or Perceptron)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot; rel=&quot;noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Branch_predictor&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://hal.inria.fr/hal-01100647/document&quot; rel=&quot;noreferrer&quot;&gt;Branch Prediction and the Performance of Interpreters -\nDont Trust Folklore&lt;/a&gt; - 2015 paper showing how well Intel&apos;s Haswell does at predicting the indirect branch of a Python interpreter&apos;s main loop (historically problematic due to a non-simple pattern), vs. earlier CPUs which didn&apos;t use IT-TAGE.  (They don&apos;t help with this fully random case, though.  Still 50% mispredict rate for the if inside the loop on a Skylake CPU when the source is compiled to branch asm.)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://xania.org/201602/bpu-part-one&quot; rel=&quot;noreferrer&quot;&gt;Static branch prediction on newer Intel processors&lt;/a&gt; - what CPUs actually do when running a branch instruction that doesn&apos;t have a dynamic prediction available.  Historically, forward not-taken (like an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt;), backward taken (like a loop) has been used because it&apos;s better than nothing.  Laying out code so the fast path / common case minimizes taken branches is good for I-cache density as well as static prediction, so compilers already do that.  (That&apos;s the &lt;a href=&quot;https://stackoverflow.com/questions/1851299/is-it-possible-to-tell-the-branch-predictor-how-likely-it-is-to-follow-the-branc&quot;&gt;real effect&lt;/a&gt; of &lt;code&gt;likely&lt;/code&gt; / &lt;code&gt;unlikely&lt;/code&gt; hints in C source, not actually hinting the hardware branch prediction in most CPU, except maybe via static prediction.)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;An official answer would be from&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/avoiding-the-cost-of-branch-misprediction&quot; rel=&quot;noreferrer&quot;&gt;Intel - Avoiding the Cost of Branch Misprediction&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts&quot; rel=&quot;noreferrer&quot;&gt;Intel - Branch and Loop Reorganization to Prevent Mispredicts&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://scholar.google.com/scholar?q=branch%20prediction%20computer%20architecture&amp;amp;hl=da&amp;amp;as_sdt=0&amp;amp;as_vis=1&amp;amp;oi=scholart&quot; rel=&quot;noreferrer&quot;&gt;Scientific papers - branch prediction computer architecture&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Books: J.L. Hennessy, D.A. Patterson: Computer architecture: a quantitative approach&lt;/li&gt;\n&lt;li&gt;Articles in scientific publications: T.Y. Yeh, Y.N. Patt made a lot of these on branch predictions.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can also see from this lovely &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor#/media/File:Branch_prediction_2bit_saturating_counter-dia.svg&quot; rel=&quot;noreferrer&quot;&gt;diagram&lt;/a&gt; why the branch predictor gets confused.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/pBMV2.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/pBMV2.png&quot; alt=&quot;2-bit state diagram&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Each element in the original code is a random value&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] = std::rand() % 256;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so the predictor will change sides as the &lt;code&gt;std::rand()&lt;/code&gt; blow.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, once it&apos;s sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.&lt;/p&gt;\n\n&lt;hr&gt;\n    ","\n&lt;p&gt;In the same line (I think this was not highlighted by any answer) it&apos;s good to mention that sometimes (specially in software where the performance matterslike in the Linux kernel) you can find some if statements like the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;if (likely( everything_is_ok ))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* Do something */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or similarly:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;if (unlikely(very_improbable_condition))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* Do something */&lt;/span&gt;    \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both &lt;code&gt;likely()&lt;/code&gt; and &lt;code&gt;unlikely()&lt;/code&gt; are in fact macros that are defined by using something like the GCC&apos;s &lt;code&gt;__builtin_expect&lt;/code&gt; to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. See &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html&quot; rel=&quot;noreferrer&quot;&gt;this documentation&lt;/a&gt; that goes through the available GCC&apos;s builtins.&lt;/p&gt;\n\n&lt;p&gt;Normally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it&apos;s critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? This way, by default, the branch prediction would assume that the condition is false.&lt;/p&gt;\n    ","\n&lt;p&gt;Frequently used Boolean operations in C++ produce many branches in the compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Boolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;, but operators that have Booleans as output can produce no other value than &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. This makes operations with Boolean variables as input less efficient than necessary.\nConsider example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;bool a, b, c, d;\nc = a &amp;amp;&amp;amp; b;\nd = a || b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is typically implemented by the compiler in the following way:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; a, b, c, d;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CFALSE&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CFALSE&lt;/span&gt;:\n    c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        d = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;goto&lt;/span&gt; DTRUE;\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    DTRUE:\n    d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; has been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;char a = 0, b = 1, c, d;\nc = a &amp;amp; b;\nd = a | b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;char&lt;/code&gt; is used instead of &lt;code&gt;bool&lt;/code&gt; in order to make it possible to use the bitwise operators (&lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;) instead of the Boolean operators (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;). The bitwise operators are single instructions that take only one clock cycle. The OR operator (&lt;code&gt;|&lt;/code&gt;) works even if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have other values than &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. The AND operator (&lt;code&gt;&amp;amp;&lt;/code&gt;) and the EXCLUSIVE OR operator (&lt;code&gt;^&lt;/code&gt;) may give inconsistent results if the operands have other values than &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;~&lt;/code&gt; can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; by XOR&apos;ing it with &lt;code&gt;1&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; a, b;\nb = !a;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can be optimized to:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, b;\nb = a ^ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;a &amp;amp;&amp;amp; b&lt;/code&gt; cannot be replaced with &lt;code&gt;a &amp;amp; b&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; is an expression that should not be evaluated if &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; ( &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; will not evaluate &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; will). Likewise, &lt;code&gt;a || b&lt;/code&gt; can not be replaced with &lt;code&gt;a | b&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; is an expression that should not be evaluated if &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Using bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; a; &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; x, y, z;\na = x &amp;gt; y &amp;amp;&amp;amp; z &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is optimal in most cases (unless you expect the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; expression to generate many branch mispredictions).&lt;/p&gt;\n    ","\n&lt;p&gt;That&apos;s for sure!...&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Branch prediction&lt;/strong&gt; makes the logic run slower, because of the switching which happens in your code! It&apos;s like you are going a straight street or a street with a lot of turnings, for sure the straight one is going to be done quicker!...&lt;/p&gt;\n&lt;p&gt;If the array is sorted, your condition is false at the first step: &lt;code&gt;data[c] &amp;gt;= 128&lt;/code&gt;, then becomes a true value for the whole way to the end of the street. That&apos;s how you get to the end of the logic faster. On the other hand, using an unsorted array, you need a lot of turning and processing which make your code run slower for sure...&lt;/p&gt;\n&lt;p&gt;Look at the image I created for you below. Which street is going to be finished faster?&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/cSmCa.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cSmCa.jpg&quot; alt=&quot;Branch Prediction&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;So programmatically, &lt;strong&gt;branch prediction&lt;/strong&gt; causes the process to be slower...&lt;/p&gt;\n&lt;p&gt;Also at the end, it&apos;s good to know we have two kinds of branch predictions that each is going to affect your code differently:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1. Static&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;2. Dynamic&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZfhDu.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZfhDu.jpg&quot; alt=&quot;Branch Prediction&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Static branch prediction is used by the microprocessor the first time\na conditional branch is encountered, and dynamic branch prediction is\nused for succeeding executions of the conditional branch code.&lt;/p&gt;\n&lt;p&gt;In order to effectively write your code to take advantage of these\nrules, when writing &lt;strong&gt;if-else&lt;/strong&gt; or &lt;strong&gt;switch&lt;/strong&gt; statements, check the most\ncommon cases first and work progressively down to the least common.\nLoops do not necessarily require any special ordering of code for\nstatic branch prediction, as only the condition of the loop iterator\nis normally used.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;This question has already been answered excellently many times over. Still I&apos;d like to draw the group&apos;s attention to yet another interesting analysis.&lt;/p&gt;\n&lt;p&gt;Recently this example (modified very slightly) was also used as a way to demonstrate how a piece of code can be profiled within the program itself on Windows. Along the way, the author also shows how to use the results to determine where the code is spending most of its time in both the sorted &amp;amp; unsorted case. Finally the piece also shows how to use a little known feature of the HAL (Hardware Abstraction Layer) to determine just how much branch misprediction is happening in the unsorted case.&lt;/p&gt;\n&lt;p&gt;The link is here:\n&lt;a href=&quot;//www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;A Demonstration of Self-Profiling&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As what has already been mentioned by others, what behind the mystery is &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot; rel=&quot;noreferrer&quot;&gt;Branch Predictor&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;I&apos;m not trying to add something but explaining the concept in another way. \nThere is a concise introduction on the wiki which contains text and diagram.\nI do like the explanation below which uses a diagram to elaborate the Branch Predictor intuitively.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In computer architecture, a branch predictor is a\n  digital circuit that tries to guess which way a branch (e.g. an\n  if-then-else structure) will go before this is known for sure. The\n  purpose of the branch predictor is to improve the flow in the\n  instruction pipeline. Branch predictors play a critical role in\n  achieving high effective performance in many modern pipelined\n  microprocessor architectures such as x86.&lt;/p&gt;\n  \n  &lt;p&gt;Two-way branching is usually implemented with a conditional jump\n  instruction. A conditional jump can either be &quot;not taken&quot; and continue\n  execution with the first branch of code which follows immediately\n  after the conditional jump, or it can be &quot;taken&quot; and jump to a\n  different place in program memory where the second branch of code is\n  stored. It is not known for certain whether a conditional jump will be\n  taken or not taken until the condition has been calculated and the\n  conditional jump has passed the execution stage in the instruction\n  pipeline (see fig. 1).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/unxnb.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/unxnb.png&quot; alt=&quot;figure 1&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Based on the described scenario, I have written an animation demo to show how instructions are executed in a pipeline in different situations.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Without the Branch Predictor. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Without branch prediction, the processor would have to wait until the\n  conditional jump instruction has passed the execute stage before the\n  next instruction can enter the fetch stage in the pipeline.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GMFQ6.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GMFQ6.gif&quot; alt=&quot;without branch predictor&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It will take 9 clock cycles for 3 instructions to be completed.&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Use Branch Predictor and don&apos;t take a conditional jump. Let&apos;s assume that the predict is &lt;strong&gt;not&lt;/strong&gt; taking the conditional jump.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Ms5p1.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ms5p1.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It will take 7 clock cycles for 3 instructions to be completed.&lt;/p&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Use Branch Predictor and take a conditional jump. Let&apos;s assume that the predict is &lt;strong&gt;not&lt;/strong&gt; taking the conditional jump.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/HIpG3.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HIpG3.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It will take 9 clock cycles for 3 instructions to be completed.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The time that is wasted in case of a branch misprediction is equal to\n  the number of stages in the pipeline from the fetch stage to the\n  execute stage. Modern microprocessors tend to have quite long\n  pipelines so that the misprediction delay is between 10 and 20 clock\n  cycles. As a result, making a pipeline longer increases the need for a\n  more advanced branch predictor.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As you can see, it seems we don&apos;t have a reason not to use Branch Predictor.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the live demo source code from &lt;a href=&quot;https://github.com/Eugene-Mark/BranchPredictorDemo&quot; rel=&quot;noreferrer&quot;&gt;BranchPredictorDemo&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Branch-prediction gain!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It is important to understand that branch misprediction doesn&apos;t slow down programs. The cost of a missed prediction is just as if branch prediction didn&apos;t exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Run 1&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Run 2&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Whenever there&apos;s an &lt;code&gt;if-else&lt;/code&gt; \\ &lt;code&gt;switch&lt;/code&gt; statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;branch&lt;/a&gt; instructions are inserted.&lt;/p&gt;\n&lt;p&gt;A branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the &lt;code&gt;if&lt;/code&gt; block) depending on some condition, which is the expression evaluation in our case.&lt;/p&gt;\n&lt;p&gt;That being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the &lt;code&gt;if&lt;/code&gt; block, and if the expression turns out to be true, then wonderful! We gained the time it took to evaluate it and made progress in the code; if not then we are running the wrong code, the pipeline is flushed, and the correct block is run.&lt;/p&gt;\n&lt;h3&gt;Visualization:&lt;/h3&gt;\n&lt;p&gt;Let&apos;s say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn&apos;t have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back.&lt;/p&gt;\n&lt;p&gt;While flushing pipelines is super fast, nowadays taking this gamble is worth it. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lua&quot;&gt; O      Route &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  /&lt;span class=&quot;hljs-comment&quot;&gt;-------------------------------&lt;/span&gt;\n/|\\             /\n |  &lt;span class=&quot;hljs-comment&quot;&gt;---------##/&lt;/span&gt;\n/ \\            \\\n                \\\n        Route &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  \\&lt;span class=&quot;hljs-comment&quot;&gt;--------------------------------&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;On ARM, there is no branch needed, because every instruction has a 4-bit condition field, which tests (at zero cost) any of &lt;a href=&quot;https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/condition-codes-1-condition-flags-and-codes&quot; rel=&quot;noreferrer&quot;&gt;16 different different conditions&lt;/a&gt; that may arise in the Processor Status Register, and if the condition on an instruction is false, the instruction is skipped. This eliminates the need for short branches, and there would be no branch prediction hit for this algorithm. &lt;b&gt;Therefore, the sorted version of this algorithm would run slower than the unsorted version on ARM, because of the extra overhead of sorting.&lt;/b&gt;&lt;/p&gt;\n&lt;p&gt;The inner loop for this algorithm would look something like the following in ARM assembly language:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;MOV&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R0&lt;/span&gt;, #&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// R0 = sum = 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable constant_&quot;&gt;MOV&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R1&lt;/span&gt;, #&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// R1 = c = 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable constant_&quot;&gt;ADR&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R2&lt;/span&gt;, data &lt;span class=&quot;hljs-comment&quot;&gt;// R2 = addr of data array (put this instruction outside outer loop)&lt;/span&gt;\n.&lt;span class=&quot;hljs-property&quot;&gt;inner_loop&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Inner loop branch label&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;LDRB&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R3&lt;/span&gt;, [&lt;span class=&quot;hljs-variable constant_&quot;&gt;R2&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;R1&lt;/span&gt;]   &lt;span class=&quot;hljs-comment&quot;&gt;// R3 = data[c]&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;CMP&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R3&lt;/span&gt;, #&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// compare R3 to 128&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;ADDGE&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R0&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;R0&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;R3&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// if R3 &amp;gt;= 128, then sum += data[c] -- no branch needed!&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;R1&lt;/span&gt;, #&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;// c++&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;CMP&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;R1&lt;/span&gt;, #arraySize  &lt;span class=&quot;hljs-comment&quot;&gt;// compare c to arraySize&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;BLT&lt;/span&gt; inner_loop      &lt;span class=&quot;hljs-comment&quot;&gt;// Branch to inner_loop if c &amp;lt; arraySize&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;But this is actually part of a bigger picture:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;CMP&lt;/code&gt; opcodes always update the status bits in the Processor Status Register (PSR), because that is their purpose, but most other instructions do not touch the PSR unless you add an optional &lt;code&gt;S&lt;/code&gt; suffix to the instruction, specifying that the PSR should be updated based on the result of the instruction. &lt;strong&gt;Just like the 4-bit condition suffix, being able to execute instructions without affecting the PSR is a mechanism that reduces the need for branches on ARM, and also facilitates out of order dispatch at the hardware level&lt;/strong&gt;, because after performing some operation X that updates the status bits, subsequently (or in parallel) you can do a bunch of other work that explicitly should not affect (or be affected by) the status bits, then you can test the state of the status bits set earlier by X.&lt;/p&gt;\n&lt;p&gt;The condition testing field and the optional &quot;set status bit&quot; field can be combined, for example:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;ADD R1, R2, R3&lt;/code&gt; performs &lt;code&gt;R1 = R2 + R3&lt;/code&gt; without updating any status bits.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ADDGE R1, R2, R3&lt;/code&gt; performs the same operation only if a previous instruction that affected the status bits resulted in a Greater than or Equal condition.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ADDS R1, R2, R3&lt;/code&gt; performs the addition and then updates the &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; flags in the Processor Status Register based on whether the result was Negative, Zero, Carried (for unsigned addition), or oVerflowed (for signed addition).&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ADDSGE R1, R2, R3&lt;/code&gt; performs the addition only if the &lt;code&gt;GE&lt;/code&gt; test is true, and then subsequently updates the status bits based on the result of the addition.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Most processor architectures do not have this ability to specify whether or not the status bits should be updated for a given operation, which can necessitate writing additional code to save and later restore status bits, or may require additional branches, or may limit the processor&apos;s out of order execution efficiency: one of the side effects of most CPU instruction set architectures forcibly updating status bits after most instructions is that it is much harder to tease apart which instructions can be run in parallel without interfering with each other. Updating status bits has side effects, therefore has a linearizing effect on code. &lt;strong&gt;ARM&apos;s ability to mix and match branch-free condition testing on any instruction with the option to either update or not update the status bits after any instruction is extremely powerful, for both assembly language programmers and compilers, and produces very efficient code.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you don&apos;t have to branch, you can avoid the time cost of flushing the pipeline for what would otherwise be short branches, and you can avoid the design complexity of many forms of speculative evalution. The performance impact of the initial naive imlementations of the mitigations for many recently discovered processor vulnerabilities (Spectre etc.) shows you just how much the performance of modern processors depends upon complex speculative evaluation logic. With a short pipeline and the dramatically reduced need for branching, ARM just doesn&apos;t need to rely on speculative evaluation as much as CISC processors. (Of course high-end ARM implementations do include speculative evaluation, but it&apos;s a smaller part of the performance story.)&lt;/p&gt;\n&lt;p&gt;If you have ever wondered why ARM has been so phenomenally successful, the brilliant effectiveness and interplay of these two mechanisms (combined with another mechanism that lets you &quot;barrel shift&quot; left or right one of the two arguments of any arithmetic operator or offset memory access operator at zero additional cost) are a big part of the story, because they are some of the greatest sources of the ARM architecture&apos;s efficiency. The brilliance of the original designers of the ARM ISA back in 1983, Steve Furber and Roger (now Sophie) Wilson, cannot be overstated.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s about branch prediction. What is it?&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A branch predictor is one of the ancient performance-improving techniques which still finds relevance in modern architectures. While the simple prediction techniques provide fast lookup and power efficiency they suffer from a high misprediction rate.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;On the other hand, complex branch predictions either neural-based or variants of two-level branch prediction provide better prediction accuracy, but they consume more power and complexity increases exponentially.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In addition to this, in complex prediction techniques, the time taken to predict the branches is itself very high ranging from 2 to 5 cycles which is comparable to the execution time of actual branches.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Branch prediction is essentially an optimization (minimization) problem where the emphasis is on to achieve lowest possible miss rate, low power consumption, and low complexity with minimum resources.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;There really are three different kinds of branches:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Forward conditional branches&lt;/strong&gt; - based on a run-time condition, the PC (program counter) is changed to point to an address forward in the instruction stream.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Backward conditional branches&lt;/strong&gt; - the PC is changed to point backward in the instruction stream. The branch is based on some condition, such as branching backwards to the beginning of a program loop when a test at the end of the loop states the loop should be executed again.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Unconditional branches&lt;/strong&gt; - this includes jumps, procedure calls, and returns that have no specific condition. For example, an unconditional jump instruction might be coded in assembly language as simply &quot;jmp&quot;, and the instruction stream must immediately be directed to the target location pointed to by the jump instruction, whereas a conditional jump that might be coded as &quot;jmpne&quot; would redirect the instruction stream only if the result of a comparison of two values in a previous &quot;compare&quot; instructions shows the values to not be equal. (The segmented addressing scheme used by the x86 architecture adds extra complexity since jumps can be either &quot;near&quot; (within a segment) or &quot;far&quot; (outside the segment). Each type has different effects on branch prediction algorithms.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Static/dynamic Branch Prediction&lt;/strong&gt;: Static branch prediction is used by the microprocessor the first time a conditional branch is encountered, and dynamic branch prediction is used for succeeding executions of the conditional branch code.&lt;/p&gt;\n&lt;p&gt;References:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;//en.wikipedia.org/wiki/Branch_predictor&quot; rel=&quot;noreferrer&quot;&gt;Branch predictor&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;//www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm&quot; rel=&quot;noreferrer&quot;&gt;A Demonstration of Self-Profiling&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;//courses.cs.washington.edu/courses/csep548/06au/lectures/branchPred.pdf&quot; rel=&quot;noreferrer&quot;&gt;Branch Prediction Review&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://web.archive.org/web/20190601170841/https://web.njit.edu/%7Erlopes/Mod5.3.pdf&quot; rel=&quot;noreferrer&quot;&gt;Branch Prediction&lt;/a&gt; (Using wayback machine)&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Besides the fact that the branch prediction may slow you down, a sorted array has another advantage:   &lt;/p&gt;\n\n&lt;p&gt;You can have a stop condition instead of just checking the value, this way you only loop over the relevant data, and ignore the rest.&lt;br&gt;\nThe branch prediction will miss only once.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt; // sort backwards (higher values first), may be &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; some other part &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the code\n std::sort(&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; + arraySize, std::greater&amp;lt;int&amp;gt;());&lt;/span&gt;\n\n for (unsigned c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; arraySize; ++c) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c] &amp;lt; 128) {\n              &lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;;\n       }&lt;/span&gt;\n       sum += &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;[c];               &lt;/span&gt;\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Sorted arrays are processed faster than an unsorted array, due to a phenomena called branch prediction.&lt;/p&gt;\n&lt;p&gt;The branch predictor is a digital circuit (in computer architecture) trying to predict which way a branch will go, improving the flow in the instruction pipeline. The circuit/computer predicts the next step and executes it.&lt;/p&gt;\n&lt;p&gt;Making a wrong prediction leads to going back to the previous step, and executing with another prediction. Assuming the prediction is correct, the code will continue to the next step. A wrong prediction results in repeating the same step, until a correct prediction occurs.&lt;/p&gt;\n&lt;p&gt;The answer to your question is very simple.&lt;/p&gt;\n&lt;p&gt;In an unsorted array, the computer makes multiple predictions, leading to an increased chance of errors.\nWhereas, in a sorted array, the computer makes fewer predictions, reducing the chance of errors.\nMaking more predictions requires more time.&lt;/p&gt;\n&lt;p&gt;Sorted Array: Straight Road&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;____________________________________________________________________________________\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unsorted Array: Curved Road&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;__   __&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;__\n|     |__&lt;/span&gt;|\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Branch prediction: Guessing/predicting which road is straight and following it without checking&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;__&lt;span class=&quot;hljs-emphasis&quot;&gt;_ Straight road\n |_&lt;/span&gt;__&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;hljs-strong&quot;&gt;__|Longer road\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although both the roads reach the same destination, the straight road is shorter, and the other is longer. If then you choose the other by mistake, there is no turning back, and so you will waste some extra time if you choose the longer road. This is similar to what happens in the computer, and I hope this helped you understand better.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Also I want to cite &lt;a href=&quot;/u/16940&quot;&gt;@Simon_Weaver&lt;/a&gt; from the comments:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It doesnt make fewer predictions - it makes fewer incorrect predictions. It still has to predict for each time through the loop...&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I tried the same code with MATLAB 2011b with my MacBook Pro (Intel i7, 64 bit, 2.4 GHz) for the following MATLAB code:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-matlab&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;% Processing time with Sorted data vs unsorted data&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;%==========================================================================&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;% Generate data&lt;/span&gt;\narraySize = &lt;span class=&quot;hljs-number&quot;&gt;32768&lt;/span&gt;\nsum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;% Generate random integer data from range 0 to 255&lt;/span&gt;\ndata = randi(&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;, arraySize, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;%Sort the data&lt;/span&gt;\ndata1= &lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(data); &lt;span class=&quot;hljs-comment&quot;&gt;% data1= data  when no sorting done&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;%Start a stopwatch timer to measure the execution time&lt;/span&gt;\ntic;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;j&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:arraySize\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; data1(&lt;span class=&quot;hljs-built_in&quot;&gt;j&lt;/span&gt;)&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;\n            sum=sum + data1(&lt;span class=&quot;hljs-built_in&quot;&gt;j&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n\ntoc;\n\nExeTimeWithSorting = toc - tic;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The results for the above MATLAB code are as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  a: Elapsed &lt;span class=&quot;hljs-type&quot;&gt;time&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;without&lt;/span&gt; sorting) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3479.880861&lt;/span&gt; seconds.\n  b: Elapsed &lt;span class=&quot;hljs-type&quot;&gt;time&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; sorting ) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2377.873098&lt;/span&gt; seconds.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The results of the C code as in @GManNickG I get:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  a: Elapsed &lt;span class=&quot;hljs-type&quot;&gt;time&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;without&lt;/span&gt; sorting) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19.8761&lt;/span&gt; sec.\n  b: Elapsed &lt;span class=&quot;hljs-type&quot;&gt;time&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; sorting ) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7.37778&lt;/span&gt; sec.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Based on this, it looks MATLAB is almost &lt;em&gt;175 times&lt;/em&gt; slower than the C implementation without sorting and &lt;em&gt;350 times&lt;/em&gt; slower with sorting. In other words, the effect (of branch prediction) is &lt;em&gt;1.46x&lt;/em&gt; for MATLAB implementation and &lt;em&gt;2.7x&lt;/em&gt; for the C implementation.&lt;/p&gt;\n    ","\n&lt;p&gt;The assumption by other answers that one needs to sort the data is not correct.&lt;/p&gt;\n\n&lt;p&gt;The following code does not sort the entire array, but only 200-element segments of it, and thereby runs the fastest.&lt;/p&gt;\n\n&lt;p&gt;Sorting only k-element sections completes the pre-processing in linear time, &lt;code&gt;O(n)&lt;/code&gt;, rather than the &lt;code&gt;O(n.log(n))&lt;/code&gt; time needed to sort the entire array.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; data[&lt;span class=&quot;hljs-number&quot;&gt;32768&lt;/span&gt;]; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; data / &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; data[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; l; ++c)\n        data[c] = std::&lt;span class=&quot;hljs-built_in&quot;&gt;rand&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// sort 200-element segments, not the whole array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c + &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &amp;lt;= l; c += &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(&amp;amp;data[c], &amp;amp;data[c + &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;]);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;clock_t&lt;/span&gt; start = &lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; sum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; data / &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;); ++c) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data[c] &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;)\n                sum += data[c];\n        }\n    }\n\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;() - start) / CLOCKS_PER_SEC &amp;lt;&amp;lt; std::endl;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sum = &quot;&lt;/span&gt; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This also &quot;proves&quot; that it has nothing to do with any algorithmic issue such as sort order, and it is indeed branch prediction.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;//stackoverflow.blog/2019/10/11/c-creator-bjarne-stroustrup-answers-our-top-five-c-questions/&quot;&gt;Bjarne Stroustrup&apos;s Answer&lt;/a&gt; to this question:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;That sounds like an interview question. Is it true? How would you know? It is a bad idea to answer questions about efficiency without first doing some measurements, so it is important to know how to measure.&lt;/p&gt;\n&lt;p&gt;So, I tried with a vector of a million integers and got:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Already sorted    32995 milliseconds\nShuffled          125944 milliseconds\n\nAlready sorted    18610 milliseconds\nShuffled          133304 milliseconds\n\nAlready sorted    17942 milliseconds\nShuffled          107858 milliseconds\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I ran that a few times to be sure. Yes, the phenomenon is real. My key code was:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; v, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; label)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; t0 = system_clock::&lt;span class=&quot;hljs-built_in&quot;&gt;now&lt;/span&gt;();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(v.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), v.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; t1 = system_clock::&lt;span class=&quot;hljs-built_in&quot;&gt;now&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; label\n         &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;duration_cast&lt;/span&gt;&amp;lt;microseconds&amp;gt;(t1  t0).&lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;()\n         &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; milliseconds\\n&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tst&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&apos;000&apos;000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;iota&lt;/span&gt;(v.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), v.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;run&lt;/span&gt;(v, &lt;span class=&quot;hljs-string&quot;&gt;&quot;already sorted &quot;&lt;/span&gt;);\n    std::&lt;span class=&quot;hljs-built_in&quot;&gt;shuffle&lt;/span&gt;(v.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), v.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), std::mt19937{ std::random_device{}() });\n    &lt;span class=&quot;hljs-built_in&quot;&gt;run&lt;/span&gt;(v, &lt;span class=&quot;hljs-string&quot;&gt;&quot;shuffled    &quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;At least the phenomenon is real with this compiler, standard library, and optimizer settings. Different implementations can and do give different answers. In fact, someone did do a more systematic study (a quick web search will find it) and most implementations show that effect.&lt;/p&gt;\n&lt;p&gt;One reason is branch prediction: the key operation in the sort algorithm is &lt;code&gt;if(v[i] &amp;lt; pivot]) &lt;/code&gt; or equivalent. For a sorted sequence that test is always true whereas, for a random sequence, the branch chosen varies randomly.&lt;/p&gt;\n&lt;p&gt;Another reason is that when the vector is already sorted, we never need to move elements to their correct position. The effect of these little details is the factor of five or six that we saw.&lt;/p&gt;\n&lt;p&gt;Quicksort (and sorting in general) is a complex study that has attracted some of the greatest minds of computer science. A good sort function is a result of both choosing a good algorithm and paying attention to hardware performance in its implementation.&lt;/p&gt;\n&lt;p&gt;If you want to write efficient code, you need to know a bit about machine architecture.&lt;/p&gt;\n    ","\n&lt;p&gt;This question is rooted in &lt;em&gt;branch prediction models&lt;/em&gt; on CPUs. I&apos;d recommend reading this paper:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://pdfs.semanticscholar.org/5634/4be375cfed0f79cb9d009ac838682e1bace3.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Increasing the Instruction Fetch Rate via Multiple Branch Prediction and a Branch Address Cache&lt;/strong&gt;&lt;/a&gt;  (But real CPUs these days still don&apos;t make multiple taken branch-predictions per clock cycle, except for Haswell and later &lt;a href=&quot;https://%20in%20tight%20loops%20using%20a%20loop%20buffer.&quot; rel=&quot;nofollow noreferrer&quot;&gt;effectively unrolling tiny loops in its loop buffer&lt;/a&gt;.  Modern CPUs can predict multiple branches not-taken to make use of their fetches in large contiguous blocks.)&lt;/p&gt;\n&lt;p&gt;When you have sorted elements, branch prediction easily predicts correctly except right at the boundary, letting instructions flow through the CPU pipeline efficiently, without having to rewind and take the correct path on mispredictions.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;An answer for quick and simple understanding (read the others for more details)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;This concept is called &lt;strong&gt;branch prediction&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Branch prediction is an optimization technique that predicts the path the code will take before it is known with certainty. This is important because during the code execution, the machine prefetches several code statements and stores them in the pipeline.&lt;/p&gt;\n&lt;p&gt;The problem arises in conditional branching, where there are two possible paths or parts of the code that can be executed.&lt;/p&gt;\n&lt;p&gt;When the prediction was true, the optimization technique worked out.&lt;/p&gt;\n&lt;p&gt;When the prediction was false, to explain it in a simple way, the code statement stored in the pipeline gets proved wrong and the actual code has to be completely reloaded, which takes up a lot of time.&lt;/p&gt;\n&lt;p&gt;As common sense suggests, predictions of something sorted are way more accurate than predictions of something unsorted.&lt;/p&gt;\n&lt;p&gt;branch prediction visualisation:&lt;/p&gt;\n&lt;p&gt;sorted&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/BhphM.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BhphM.png&quot; alt=&quot;sorted&quot;&gt;&lt;/a&gt;\nunsorted\n&lt;a href=&quot;https://i.stack.imgur.com/2Z7Ct.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/2Z7Ct.png&quot; alt=&quot;unsorted&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;Why is processing a sorted array faster than processing an unsorted array?&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Example from the code:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// CPP program to demonstrate processing&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// time of sorted and unsorted array&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;hljs-number&quot;&gt;100001&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[N];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Assign random values to array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;N; i++)\n        arr[i] = &lt;span class=&quot;hljs-built_in&quot;&gt;rand&lt;/span&gt;()%N;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// for loop for unsorted array&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; start = &lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;N; i++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; N/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n            count++;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; end = &lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Time for unsorted array :: &quot;&lt;/span&gt;\n        &amp;lt;&amp;lt; ((end - start)/CLOCKS_PER_SEC)\n        &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(arr, arr+N);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// for loop for sorted array&lt;/span&gt;\n    count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    start = &lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;N; i++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; N/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n            count++;\n\n    end = &lt;span class=&quot;hljs-built_in&quot;&gt;clock&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Time for sorted array :: &quot;&lt;/span&gt;\n        &amp;lt;&amp;lt; ((end - start)/CLOCKS_PER_SEC)\n        &amp;lt;&amp;lt; endl;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Execution Timing:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/9kOtq.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/9kOtq.png&quot; alt=&quot;timing of execution&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Observe that time taken for processing a sorted array is less as compared to an unsorted array. The reason for this optimization for the sorted arrays is branch prediction.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;What is branch prediction?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Branch prediction in computer architecture focuses on determining whether a conditional branch (jump) in a program&apos;s instructions pipeline is likely to be taken or not. Because they must guess the address field to fetch before the current instruction is executed, all pipelined processors do branch prediction in some manner.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;How is branch prediction inapplicable on the above case ?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The if condition checks that arr[i] &amp;lt; 5000, but if you observe in case of a sorted array, after passing the number 5000 the condition is always false, and before that, it is always true. The CPU will recognize that pattern and be able to predict correctly which instruction to execute next after the conditional branch, instead of sometimes having to rewind after guessing wrong.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Working Of Branch Prediction Algorithm:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Branch prediction works on the pattern the algorithm is following or basically the history, how it got executed in previous steps. If the guess is correct, then CPU continues executing and if it goes wrong, then the CPU needs to flush the pipeline and roll back to the branch and restart from the beginning.&lt;/p&gt;\n    "]},"page":"82","randomQuestions":[{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"How can I make an AJAX call without jQuery?","slug":"how-can-i-make-an-ajax-call-without-jquery-1657388448955"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"},{"title":"Why does jQuery or a DOM method such as getElementById not find the element?","slug":"why-does-jquery-or-a-dom-method-such-as-getelementbyid-not-find-the-element-1657384326458"},{"title":"Are dictionaries ordered in Python 3.6+?","slug":"are-dictionaries-ordered-in-python-3.6+-1657387834234"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244"},{"title":"Tkinter: AttributeError: NoneType object has no attribute <attribute name>","slug":"tkinter:-attributeerror:-nonetype-object-has-no-attribute-lessattribute-namegreater-1657385472410"},{"title":"What is the best regular expression to check if a string is a valid URL?","slug":"what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url-1657387618306"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"}]},"__N_SSG":true}