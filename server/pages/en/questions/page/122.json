{"pageProps":{"data":{"count":610,"rows":[{"id":5,"title":"RegEx match open tags except XHTML self-contained tags","slug":"regex-match-open-tags-except-xhtml-self-contained-tags-1657384228245","postType":"QUESTION","createdAt":"2022-07-09T16:30:28.000Z","updatedAt":"2022-07-09T16:30:28.000Z","tags":[{"id":13,"name":"regex","slug":"regex","createdAt":"2022-07-09T16:30:28.000Z","updatedAt":"2022-07-09T16:30:28.000Z","Questions_Tags":{"questionId":5,"tagId":13}},{"id":14,"name":"xhtml","slug":"xhtml","createdAt":"2022-07-09T16:30:28.000Z","updatedAt":"2022-07-09T16:30:28.000Z","Questions_Tags":{"questionId":5,"tagId":14}},{"id":15,"name":"html","slug":"html","createdAt":"2022-07-09T16:30:28.000Z","updatedAt":"2022-07-09T16:30:28.000Z","Questions_Tags":{"questionId":5,"tagId":15}}]},{"id":4,"title":"How can I prevent SQL injection in PHP?","slug":"how-can-i-prevent-sql-injection-in-php-1657384220094","postType":"QUESTION","createdAt":"2022-07-09T16:30:20.000Z","updatedAt":"2022-07-09T16:30:20.000Z","tags":[{"id":8,"name":"php","slug":"php","createdAt":"2022-07-09T16:30:20.000Z","updatedAt":"2022-07-09T16:30:20.000Z","Questions_Tags":{"questionId":4,"tagId":8}},{"id":9,"name":"mysql","slug":"mysql","createdAt":"2022-07-09T16:30:20.000Z","updatedAt":"2022-07-09T16:30:20.000Z","Questions_Tags":{"questionId":4,"tagId":9}},{"id":10,"name":"sql","slug":"sql","createdAt":"2022-07-09T16:30:20.000Z","updatedAt":"2022-07-09T16:30:20.000Z","Questions_Tags":{"questionId":4,"tagId":10}},{"id":11,"name":"security","slug":"security","createdAt":"2022-07-09T16:30:20.000Z","updatedAt":"2022-07-09T16:30:20.000Z","Questions_Tags":{"questionId":4,"tagId":11}},{"id":12,"name":"sql-injection","slug":"sql-injection","createdAt":"2022-07-09T16:30:20.000Z","updatedAt":"2022-07-09T16:30:20.000Z","Questions_Tags":{"questionId":4,"tagId":12}}]},{"id":3,"title":"How do I return the response from an asynchronous call?","slug":"how-do-i-return-the-response-from-an-asynchronous-call-1657384208012","postType":"QUESTION","createdAt":"2022-07-09T16:30:08.000Z","updatedAt":"2022-07-09T16:30:08.000Z","tags":[{"id":5,"name":"javascript","slug":"javascript","createdAt":"2022-07-09T16:30:14.000Z","updatedAt":"2022-07-09T16:30:14.000Z","Questions_Tags":{"questionId":3,"tagId":5}},{"id":6,"name":"ajax","slug":"ajax","createdAt":"2022-07-09T16:30:14.000Z","updatedAt":"2022-07-09T16:30:14.000Z","Questions_Tags":{"questionId":3,"tagId":6}},{"id":7,"name":"asynchronous","slug":"asynchronous","createdAt":"2022-07-09T16:30:14.000Z","updatedAt":"2022-07-09T16:30:14.000Z","Questions_Tags":{"questionId":3,"tagId":7}}]},{"id":2,"title":"What is a NullPointerException, and how do I fix it?","slug":"what-is-a-nullpointerexception-and-how-do-i-fix-it-1657384201768","postType":"QUESTION","createdAt":"2022-07-09T16:30:01.000Z","updatedAt":"2022-07-09T16:30:01.000Z","tags":[{"id":3,"name":"java","slug":"java","createdAt":"2022-07-09T16:30:02.000Z","updatedAt":"2022-07-09T16:30:02.000Z","Questions_Tags":{"questionId":2,"tagId":3}},{"id":4,"name":"nullpointerexception","slug":"nullpointerexception","createdAt":"2022-07-09T16:30:02.000Z","updatedAt":"2022-07-09T16:30:02.000Z","Questions_Tags":{"questionId":2,"tagId":4}}]},{"id":1,"title":"How to make a great R reproducible example","slug":"how-to-make-a-great-r-reproducible-example-1657384198173","postType":"QUESTION","createdAt":"2022-07-09T16:29:58.000Z","updatedAt":"2022-07-09T16:29:58.000Z","tags":[{"id":1,"name":"r","slug":"r","createdAt":"2022-07-09T16:29:58.000Z","updatedAt":"2022-07-09T16:29:58.000Z","Questions_Tags":{"questionId":1,"tagId":1}},{"id":2,"name":"r-faq","slug":"r-faq","createdAt":"2022-07-09T16:29:58.000Z","updatedAt":"2022-07-09T16:29:58.000Z","Questions_Tags":{"questionId":1,"tagId":2}}]}]},"answers":{"1":["\n&lt;p&gt;Basically, a &lt;a href=&quot;https://stackoverflow.com/help/minimal-reproducible-example&quot;&gt;&lt;strong&gt;minimal reproducible example (MRE)&lt;/strong&gt;&lt;/a&gt; should enable others to &lt;em&gt;exactly&lt;/em&gt; reproduce your issue on their machines.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Please do not post images of your data, code, or console output!&lt;/strong&gt;&lt;/p&gt;\n&lt;h1&gt;tl;dr&lt;/h1&gt;\n&lt;p&gt;A MRE consists of the following items:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;a &lt;strong&gt;minimal dataset&lt;/strong&gt;, necessary to demonstrate the problem&lt;/li&gt;\n&lt;li&gt;the &lt;strong&gt;minimal &lt;em&gt;runnable&lt;/em&gt; code&lt;/strong&gt; necessary to reproduce the issue, which can be run on the given dataset&lt;/li&gt;\n&lt;li&gt;all &lt;strong&gt;necessary information&lt;/strong&gt; on the used &lt;code&gt;library&lt;/code&gt;s, the R version, and the OS it is run on, perhaps a &lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;in the case of random processes, a &lt;strong&gt;seed&lt;/strong&gt; (set by &lt;code&gt;set.seed()&lt;/code&gt;) to enable others to replicate exactly the same results as you do&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For examples of good MREs, see section &quot;Examples&quot; at the bottom of help pages on the function you are using. Simply type e.g. &lt;code&gt;help(mean)&lt;/code&gt;, or short &lt;code&gt;?mean&lt;/code&gt; into your R console.&lt;/p&gt;\n&lt;h1&gt;Providing a minimal dataset&lt;/h1&gt;\n&lt;p&gt;Usually, sharing huge data sets is not necessary and may rather discourage others from reading your question. Therefore, it is better to use built-in datasets or create a small &quot;toy&quot; example that resembles your original data, which is actually what is meant by &lt;em&gt;minimal&lt;/em&gt;. If for some reason you really need to share your original data, you should use a method, such as &lt;code&gt;dput()&lt;/code&gt;, that allows others to get an exact copy of your data.&lt;/p&gt;\n&lt;h3&gt;Built-in datasets&lt;/h3&gt;\n&lt;p&gt;You can use one of the built-in datasets. A comprehensive list of built-in datasets can be seen with &lt;code&gt;data()&lt;/code&gt;. There is a short description of every data set, and more information can be obtained, e.g. with &lt;code&gt;?iris&lt;/code&gt;, for the &apos;iris&apos; data set that comes with R. Installed packages might contain additional datasets.&lt;/p&gt;\n&lt;h3&gt;Creating example data sets&lt;/h3&gt;\n&lt;p&gt;&lt;em&gt;Preliminary note:&lt;/em&gt; Sometimes you may need special formats (i.e. classes), such as factors, dates, or time series. For these, make use of functions like: &lt;code&gt;as.factor&lt;/code&gt;, &lt;code&gt;as.Date&lt;/code&gt;, &lt;code&gt;as.xts&lt;/code&gt;, ... &lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;d &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; as.Date&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-12-30&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1] &quot;Date&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Vectors&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;x &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; rnorm&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;## random vector normal distributed&lt;/span&gt;\nx &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; runif&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;## random vector uniformly distributed    &lt;/span&gt;\nx &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;## 10 random draws out of 1, 2, ..., 100    &lt;/span&gt;\nx &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;LETTERS&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;## 10 random draws out of built-in latin alphabet&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Matrices&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;m &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dimnames&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;LETTERS&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;LETTERS&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nm\n&lt;span class=&quot;hljs-comment&quot;&gt;#   A B C  D&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# A 1 4 7 10&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# B 2 5 8 11&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# C 3 6 9 12&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Data frames&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;set.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;## for sake of reproducibility&lt;/span&gt;\nn &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; 6\ndat &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;n&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n                  date&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;seq.Date&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;as.Date&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-12-26&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; as.Date&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-12-31&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;day&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                  group&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;LETTERS&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                  age&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                  type&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;factor&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;paste&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                  x&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;rnorm&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndat\n&lt;span class=&quot;hljs-comment&quot;&gt;#   id       date group age   type         x&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1  1 2020-12-26     A  27 type 1 0.0356312&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2  2 2020-12-27     B  19 type 2 1.3149588&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 3  3 2020-12-28     A  20 type 3 0.9781675&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 4  4 2020-12-29     B  26 type 4 0.8817912&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 5  5 2020-12-30     A  26 type 5 0.4822047&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 6  6 2020-12-31     B  28 type 6 0.9657529&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although it is widely used, better do not name your data frame &lt;code&gt;df&lt;/code&gt;, because &lt;code&gt;df()&lt;/code&gt; is an R function for the density (i.e. height of the curve at point &lt;code&gt;x&lt;/code&gt;) of the F distribution and you might get a clash with it.&lt;/sup&gt;&lt;/p&gt;\n&lt;h3&gt;Copying original data&lt;/h3&gt;\n&lt;p&gt;If you have a specific reason, or data that would be too difficult to construct an example from, you could provide a small subset of your original data, best by using &lt;code&gt;dput&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Why use &lt;code&gt;dput()&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;dput&lt;/code&gt; throws all information needed to exactly reproduce your data on your console. You may simply copy the output and paste it into your question.&lt;/p&gt;\n&lt;p&gt;Calling &lt;code&gt;dat&lt;/code&gt; (from above) produces output that still lacks information about variable classes and other features if you share it in your question. Furthermore, the spaces in the &lt;code&gt;type&lt;/code&gt; column make it difficult to do anything with it. Even when we set out to use the data, we won&apos;t manage to get important features of your data right.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;  id       date group age   type         x\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;     A  &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt; type &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0356312&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;     B  &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; type &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.3149588&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;     A  &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; type &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9781675&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Subset your data&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;To share a subset, use &lt;code&gt;head()&lt;/code&gt;, &lt;code&gt;subset()&lt;/code&gt; or the indices &lt;code&gt;iris[1:4, ]&lt;/code&gt;. Then wrap it into &lt;code&gt;dput()&lt;/code&gt; to give others something that can be put in R immediately. &lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dput&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;iris&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# first four rows of the iris data set&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Console output to share in your question:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;structure&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;Sepal.Length &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4.7&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4.6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Sepal.Width &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Petal.Length &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Petal.Width &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Species &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; structure&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; .Label &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;setosa&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n&lt;span class=&quot;hljs-string&quot;&gt;&quot;versicolor&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;virginica&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;factor&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; row.names &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;NA&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;4L&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;data.frame&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When using &lt;code&gt;dput&lt;/code&gt;, you may also want to include only relevant columns, e.g. dput(mtcars[1:3, c(2, 5, 6)])&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your data frame has a factor with many levels, the &lt;code&gt;dput&lt;/code&gt; output can be unwieldy because it will still list all the possible factor levels even if they aren&apos;t present in the subset of your data. To solve this issue, you can use the &lt;code&gt;droplevels()&lt;/code&gt; function. Notice below how species is a factor with only one level, e.g. &lt;code&gt;dput(droplevels(iris[1:4, ]))&lt;/code&gt;. One other caveat for &lt;code&gt;dput&lt;/code&gt; is that it will not work for keyed &lt;code&gt;data.table&lt;/code&gt; objects or for grouped &lt;code&gt;tbl_df&lt;/code&gt; (class &lt;code&gt;grouped_df&lt;/code&gt;) from the &lt;code&gt;tidyverse&lt;/code&gt;. In these cases you can convert back to a regular data frame before sharing, &lt;code&gt;dput(as.data.frame(my_data))&lt;/code&gt;.&lt;/sub&gt;&lt;/p&gt;\n&lt;h1&gt;Producing minimal code&lt;/h1&gt;\n&lt;p&gt;Combined with the minimal data (see above), your code should exactly reproduce the problem on another machine by simply copying and pasting it.&lt;/p&gt;\n&lt;p&gt;This should be the easy part but often isn&apos;t. What you should not do:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;showing all kinds of data conversions; make sure the provided data is already in the correct format (unless that is the problem, of course)&lt;/li&gt;\n&lt;li&gt;copy-paste a whole script that gives an error somewhere. Try to locate which lines exactly result in the error. More often than not, you&apos;ll find out what the problem is yourself.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;What you should do:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;add which packages you use if you use any (using &lt;code&gt;library()&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;test run your code in a fresh R session to ensure the code is runnable. People should be able to copy-paste your data and your code in the console and get the same as you have.&lt;/li&gt;\n&lt;li&gt;if you open connections or create files, add some code to close them or delete the files (using &lt;code&gt;unlink()&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;if you change options, make sure the code contains a statement to revert them back to the original ones. (eg &lt;code&gt;op &amp;lt;- par(mfrow=c(1,2)) ...some code... par(op)&lt;/code&gt; )&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Providing necessary information&lt;/h1&gt;\n&lt;p&gt;In most cases, just the R version and the operating system will suffice. When conflicts arise with packages, giving the output of &lt;code&gt;sessionInfo()&lt;/code&gt; can really help. When talking about connections to other applications (be it through ODBC or anything else), one should also provide version numbers for those, and if possible, also the necessary information on the setup.&lt;/p&gt;\n&lt;p&gt;If you are running R in &lt;em&gt;R Studio&lt;/em&gt;, using &lt;code&gt;rstudioapi::versionInfo()&lt;/code&gt; can help report your RStudio version.&lt;/p&gt;\n&lt;p&gt;If you have a problem with a specific package, you may want to provide the package version by giving the output of &lt;code&gt;packageVersion(&quot;name of the package&quot;)&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;Seed&lt;/h1&gt;\n&lt;p&gt;Using &lt;code&gt;set.seed()&lt;/code&gt; you may specify a seed&lt;sup&gt;1&lt;/sup&gt;, i.e. the specific state, R&apos;s random number generator is fixed. This makes it possible for random functions, such as &lt;code&gt;sample()&lt;/code&gt;, &lt;code&gt;rnorm()&lt;/code&gt;, &lt;code&gt;runif()&lt;/code&gt; and lots of others, to always return the same result, &lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;set.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nrnorm&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1]  1.3709584 -0.5646982  0.3631284&lt;/span&gt;\n\nset.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nrnorm&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1]  1.3709584 -0.5646982  0.3631284&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;sub&gt; &lt;strong&gt;Note:&lt;/strong&gt; The output of &lt;code&gt;set.seed()&lt;/code&gt; differs between R &amp;gt;3.6.0 and previous versions. Specify which R version you used for the random process, and don&apos;t be surprised if you get slightly different results when following old questions. To get the same result in such cases, you can use the &lt;code&gt;RNGversion()&lt;/code&gt;-function before &lt;code&gt;set.seed()&lt;/code&gt; (e.g.: &lt;code&gt;RNGversion(&quot;3.5.2&quot;)&lt;/code&gt;).&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;(Here&apos;s my advice from &lt;a href=&quot;http://adv-r.had.co.nz/Reproducibility.html&quot; rel=&quot;noreferrer&quot;&gt;How to write a reproducible example&lt;/a&gt;. I&apos;ve tried to make it short but sweet).&lt;/p&gt;\n&lt;h1&gt;How to write a reproducible example&lt;/h1&gt;\n&lt;p&gt;You are most likely to get good help with your R problem if you provide a reproducible example. A reproducible example allows someone else to recreate your problem by just copying and pasting R code.&lt;/p&gt;\n&lt;p&gt;You need to include four things to make your example reproducible: required packages, data, code, and a description of your R environment.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Packages&lt;/strong&gt; should be loaded at the top of the script, so it&apos;s easy to\nsee which ones the example needs.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The easiest way to include &lt;strong&gt;data&lt;/strong&gt; in an email or Stack Overflow question is to use &lt;code&gt;dput()&lt;/code&gt; to generate the R code to recreate it. For example, to recreate the &lt;code&gt;mtcars&lt;/code&gt; dataset in R,\nI&apos;d perform the following steps:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Run &lt;code&gt;dput(mtcars)&lt;/code&gt; in R&lt;/li&gt;\n&lt;li&gt;Copy the output&lt;/li&gt;\n&lt;li&gt;In my reproducible script, type &lt;code&gt;mtcars &amp;lt;- &lt;/code&gt; then paste.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Spend a little bit of time ensuring that your &lt;strong&gt;code&lt;/strong&gt; is easy for others to\nread:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Make sure you&apos;ve used spaces and your variable names are concise, but\ninformative&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use comments to indicate where your problem lies&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Do your best to remove everything that is not related to the problem.&lt;br&gt;\nThe shorter your code is, the easier it is to understand.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Include the output of &lt;code&gt;sessionInfo()&lt;/code&gt; in a comment in your code. This summarises your &lt;strong&gt;R\nenvironment&lt;/strong&gt; and makes it easy to check if you&apos;re using an out-of-date\npackage.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You can check you have actually made a reproducible example by starting up a fresh R session and pasting your script in.&lt;/p&gt;\n&lt;p&gt;Before putting all of your code in an email, consider putting it on &lt;a href=&quot;http://gist.github.com/&quot; rel=&quot;noreferrer&quot;&gt;Gist github&lt;/a&gt;.  It will give your code nice syntax highlighting, and you don&apos;t have to worry about anything getting mangled by the email system.&lt;/p&gt;\n    ","\n&lt;p&gt;Personally, I prefer &quot;one&quot; liners. Something along the lines:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;my.df &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;col1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        col2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; as.factor&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; col3 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        col4 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmy.list &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;list1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; my.df&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; list2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; my.df&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; list3 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The data structure should mimic the idea of the writer&apos;s problem and not the exact verbatim structure. I really appreciate it when variables don&apos;t overwrite my own variables or god forbid, functions (like &lt;code&gt;df&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;Alternatively, one could cut a few corners and point to a pre-existing data set, something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;vegan&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndata&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;varespec&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nord &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; metaMDS&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;varespec&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Don&apos;t forget to mention any special packages you might be using.&lt;/p&gt;\n&lt;p&gt;If you&apos;re trying to demonstrate something on larger objects, you can try&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;my.df2 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10e6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10e6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you&apos;re working with spatial data via the &lt;code&gt;raster&lt;/code&gt; package, you can generate some random data. A lot of examples can be found in the package vignette, but here&apos;s a small nugget.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;raster&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nr1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; r2 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; r3 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; raster&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;nrow&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ncol&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nvalues&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; runif&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;ncell&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nvalues&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r2&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; runif&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;ncell&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r2&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nvalues&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r3&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; runif&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;ncell&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r3&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ns &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; stack&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;r1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; r2&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; r3&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need some spatial object as implemented in &lt;code&gt;sp&lt;/code&gt;, you can get some datasets via external files (like ESRI shapefile) in &quot;spatial&quot; packages (see the Spatial view in Task Views).&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rgdal&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nogrDrivers&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndsn &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; system.file&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vectors&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; package &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;rgdal&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\nogrListLayers&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dsn&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nogrInfo&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dsn&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;dsn&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; layer&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;cities&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ncities &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; readOGR&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dsn&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;dsn&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; layer&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;cities&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Inspired by this very post, I now use a handy function,\n&lt;code&gt;reproduce(&amp;lt;mydata&amp;gt;)&lt;/code&gt; when I need to post to Stack&amp;nbsp;Overflow.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1 id=&quot;quick-instructions-qiop&quot;&gt;Quick instructions&lt;/h1&gt;\n&lt;p&gt;If &lt;code&gt;myData&lt;/code&gt; is the name of your object to reproduce, run the following in R:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;install.packages&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;devtools&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;devtools&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nsource_url&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://raw.github.com/rsaporta/pubR/gitbranch/reproduce.R&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\nreproduce&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;myData&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;details-3ypt&quot;&gt;Details:&lt;/h2&gt;\n&lt;p&gt;This function is an intelligent wrapper to &lt;code&gt;dput&lt;/code&gt; and does the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Automatically samples a large data set (based on size and class. Sample size can be adjusted)&lt;/li&gt;\n&lt;li&gt;Creates a &lt;code&gt;dput&lt;/code&gt; output&lt;/li&gt;\n&lt;li&gt;Allows you to specify &lt;em&gt;which&lt;/em&gt; columns to export&lt;/li&gt;\n&lt;li&gt;Appends to the front of it &lt;code&gt;objName &amp;lt;- ...&lt;/code&gt;, so that it can be easily copy+pasted, but...&lt;/li&gt;\n&lt;li&gt;If working on a Mac, the output is automagically copied to the clipboard, so that you can simply run it and then paste it to your question.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2 id=&quot;the-source-is-available-here-kk26&quot;&gt;The source is available here:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/rsaporta/pubR/blob/gitbranch/reproduce.R&quot; rel=&quot;noreferrer&quot;&gt;GitHub - pubR/reproduce.R&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;example-bdbi&quot;&gt;Example:&lt;/h2&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# sample data&lt;/span&gt;\nDF &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;LETTERS&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; each&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replicate&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Class&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yes&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;No&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;DF is about 100 x 102.  I want to sample 10 rows and a few specific columns&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;reproduce&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;DF&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; cols&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;X1&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;X73&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Class&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# I could also specify the column number.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;gives-the-following-output-2iwe&quot;&gt;Gives the following output:&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;This is what the sample looks like:\n\n    id  X1 X73 Class\n1    A 266 960   Yes\n2    A 373 315    No            Notice the selection split\n3    A 573 208    No           (which can be turned off)\n4    A 907 850   Yes\n5    B 202  46   Yes\n6    B 895 969   Yes   &amp;lt;~~~ 70 % of selection is from the top rows\n7    B 940 928    No\n98   Y 371 171   Yes\n99   Y 733 364   Yes   &amp;lt;~~~ 30 % of selection is from the bottom rows.\n100  Y 546 641    No\n\n\n    ==X==============================================================X==\n         Copy+Paste this part. (If on a Mac, it is already copied!)\n    ==X==============================================================X==\n\n DF &amp;lt;- structure(list(id = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 25L, 25L, 25L), .Label = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;), class = &quot;factor&quot;), X1 = c(266L, 373L, 573L, 907L, 202L, 895L, 940L, 371L, 733L, 546L), X73 = c(960L, 315L, 208L, 850L, 46L, 969L, 928L, 171L, 364L, 641L), Class = structure(c(2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 1L), .Label = c(&quot;No&quot;, &quot;Yes&quot;), class = &quot;factor&quot;)), .Names = c(&quot;id&quot;, &quot;X1&quot;, &quot;X73&quot;, &quot;Class&quot;), class = &quot;data.frame&quot;, row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 98L, 99L, 100L))\n\n    ==X==============================================================X==\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice also that the entirety of the output is in a nice single, long line, not a tall paragraph of chopped up lines.\nThis makes it easier to read on Stack&amp;nbsp;Overflow questions posts and also easier to copy+paste.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;update-oct-2013-rn7r&quot;&gt;Update Oct 2013:&lt;/h2&gt;\n&lt;p&gt;You can now specify how many lines of text output will take up (i.e., what you will paste into Stack&amp;nbsp;Overflow). Use the &lt;code&gt;lines.out=n&lt;/code&gt; argument for this. Example:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;reproduce(DF, cols=c(1:3, 17, 23), lines.out=7)&lt;/code&gt; yields:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;    ==X==============================================================X==\n         Copy+Paste this part. (If on a Mac, it is already copied!)\n    ==X==============================================================X==\n\n DF &amp;lt;- structure(list(id = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 25L,25L, 25L), .Label\n      = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;,&quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;,&quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;), class = &quot;factor&quot;),\n      X1 = c(809L, 81L, 862L,747L, 224L, 721L, 310L, 53L, 853L, 642L),\n      X2 = c(926L, 409L,825L, 702L, 803L, 63L, 319L, 941L, 598L, 830L),\n      X16 = c(447L,164L, 8L, 775L, 471L, 196L, 30L, 420L, 47L, 327L),\n      X22 = c(335L,164L, 503L, 407L, 662L, 139L, 111L, 721L, 340L, 178L)), .Names = c(&quot;id&quot;,&quot;X1&quot;,\n      &quot;X2&quot;, &quot;X16&quot;, &quot;X22&quot;), class = &quot;data.frame&quot;, row.names = c(1L,2L, 3L, 4L, 5L, 6L, 7L, 98L, 99L, 100L))\n\n    ==X==============================================================X==\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a good &lt;a href=&quot;http://www.r-bloggers.com/three-tips-for-posting-good-questions-to-r-help-and-stack-overflow/&quot; rel=&quot;noreferrer&quot;&gt;guide&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The most important point is: &lt;strong&gt;Make a small piece of code that we can run to see what the problem is&lt;/strong&gt;. A useful function for this is &lt;code&gt;dput()&lt;/code&gt;, but if you have very large data, then you might want to make a small sample dataset or only use the first 10 lines or so.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Also, make sure that you identified where the problem is yourself. The example should not be an entire R script with &quot;On line 200 there is an error&quot;. If you use the debugging tools in R (I love &lt;code&gt;browser()&lt;/code&gt;) and Google, then you should be able to really identify where the problem is and reproduce a trivial example in which the same thing goes wrong.&lt;/p&gt;\n    ","\n&lt;p&gt;The R-help mailing list has a &lt;a href=&quot;http://www.r-project.org/posting-guide.html&quot; rel=&quot;noreferrer&quot;&gt;posting guide&lt;/a&gt; which covers both asking and answering questions, including an example of generating data:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Examples: Sometimes it helps to\n  provide a small example that someone\n  can actually run. For example:&lt;/p&gt;\n  \n  &lt;p&gt;If I have a matrix x as follows:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; nrow&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ncol&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;dimnames&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x\n    x y\n  A &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n  B &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n  C &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n  D &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;how can I turn it into a dataframe\n  with 8 rows, and three   columns named\n  &apos;row&apos;, &apos;col&apos;, and &apos;value&apos;, which have\n  the dimension names as the values of &apos;row&apos; and &apos;col&apos;, like this:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x.df\n     row col value\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   x      &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;...&lt;br&gt;\n  (To which the answer might be:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x.df &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; reshape&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;rownames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; direction&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                    varying&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;colnames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;colnames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                    v.names&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; timevar&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;col&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; idvar&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The word &lt;strong&gt;small&lt;/strong&gt; is especially important.  You should be aiming for a &lt;strong&gt;minimal&lt;/strong&gt; reproducible example, which means that the data and the code should be as simple as possible to explain the problem.&lt;/p&gt;\n\n&lt;p&gt;EDIT: Pretty code is easier to read than ugly code.  Use a &lt;a href=&quot;http://4dpiecharts.com/r-code-style-guide/&quot; rel=&quot;noreferrer&quot;&gt;style guide&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Since R.2.14 (I guess) you can feed your data text representation directly to &lt;code&gt;read.table&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt; df &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;header&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  text&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Sometimes the problem really isn&apos;t reproducible with a smaller piece of data, no matter how hard you try, and doesn&apos;t happen with synthetic data (although it&apos;s useful to show how you produced synthetic data sets that did &lt;strong&gt;not&lt;/strong&gt; reproduce the problem, because it rules out some hypotheses).  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Posting the data to the web somewhere and providing a URL may be necessary. &lt;/li&gt;\n&lt;li&gt;If the data can&apos;t be released to the public at large but could be shared at all, then you may be able to offer to e-mail it to interested parties (although this will cut down the number of people who will bother to work on it).&lt;/li&gt;\n&lt;li&gt;I haven&apos;t actually seen this done, because people who can&apos;t release their data are sensitive about releasing it any form, but it would seem plausible that in some cases one could still post data if it were sufficiently anonymized/scrambled/corrupted slightly in some way.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you can&apos;t do either of these then you probably need to hire a consultant to solve your problem ...&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;: Two useful SO questions for anonymization/scrambling:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10454973/how-to-create-example-data-set-from-private-data-replacing-variable-names-and-l&quot;&gt;How to create example data set from private data (replacing variable names and levels with uninformative place holders)?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2661402/given-a-set-of-random-numbers-drawn-from-a-continuous-univariate-distribution&quot;&gt;Given a set of random numbers drawn from a continuous univariate distribution, find the distribution&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The answers so far are obviously great for the reproducibility part.  This is merely to clarify that a reproducible example cannot and should not be the sole component of a question.  Don&apos;t forget to explain what you want it to look like and the contours of your problem, not just how you have attempted to get there so far.  Code is not enough; you need words also.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a reproducible example of what to avoid doing (drawn from a real example, names changed to protect the innocent):&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The following is sample data and part of function I have trouble with.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;code\ncode\ncode\ncode\ncode &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; or so lines of it&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How can I achieve this ?&lt;/p&gt;\n\n&lt;hr&gt;\n    ","\n&lt;p&gt;I have a very easy and efficient way to make a R example that has not been mentioned above.\nYou can define your structure firstly. For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;mydata &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;character&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;numeric&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;numeric&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;numeric&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;fix&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydata&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/JgFWQ.png&quot; alt=&quot;When you execute &apos;fix&apos; command, you will get this pop-up box&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Then you can input your data manually. This is efficient for smaller examples rather than big ones.&lt;/p&gt;\n    ","\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;Your main objective in crafting your questions should be to make it as easy as possible for readers to understand and reproduce your problem on their systems.  To do so:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Provide input data&lt;/li&gt;\n&lt;li&gt;Provide expected output&lt;/li&gt;\n&lt;li&gt;Explain your problem succinctly\n&lt;ul&gt;\n&lt;li&gt;if you have over 20 lines of text + code, you can probably go back and simplify&lt;/li&gt;\n&lt;li&gt;simplify your code as much as possible while preserving the problem/error&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;This does take some work, but it seems like a fair trade-off since you ask others to do work for you.&lt;/p&gt;\n&lt;h2&gt;Providing Data:&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h3&gt;Built-in Data Sets&lt;/h3&gt;\n&lt;p&gt;The best option &lt;strong&gt;by far&lt;/strong&gt; is to rely on built-in datasets.  This makes it very easy for others to work on your problem.  Type &lt;code&gt;data()&lt;/code&gt; at the R prompt to see what data is available to you.  Some classic examples:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;iris&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;mtcars&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ggplot2::diamonds&lt;/code&gt; (external package, but almost everyone has it)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28863686/how-can-i-quickly-inspect-built-in-data-sets-psa&quot;&gt;Inspect the built-in datasets to find one suitable for your problem.&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you can rephrase your problem to use the built-in datasets, you are much more likely to get good answers (and upvotes).&lt;/p&gt;\n&lt;h3&gt;Self Generated Data&lt;/h3&gt;\n&lt;p&gt;If your problem is specific to a type of data that is not represented in the existing data sets, then provide the R code that generates the &lt;strong&gt;smallest&lt;/strong&gt; possible dataset that your problem manifests itself on.  For example&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;set.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# important to make random data reproducible&lt;/span&gt;\nmyData &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;runif&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Someone trying to answer my question can copy/paste those two lines and start working on the problem immediately.&lt;/p&gt;\n&lt;h3&gt;dput&lt;/h3&gt;\n&lt;p&gt;As a &lt;strong&gt;last resort&lt;/strong&gt;, you can use &lt;code&gt;dput&lt;/code&gt; to transform a data object to R code (e.g. &lt;code&gt;dput(myData)&lt;/code&gt;).  I say as a &quot;last resort&quot; because the output of &lt;code&gt;dput&lt;/code&gt; is often fairly unwieldy, annoying to copy-paste, and obscures the rest of your question.&lt;/p&gt;\n&lt;h2&gt;Provide Expected Output:&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;Someone once said:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;A picture of expected output is worth 1000 words&lt;/p&gt;\n&lt;p&gt;-- a sage person&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If you can add something like &quot;I expected to get this result&quot;:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;   cyl   mean.hp\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;122.28571&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;82.63636&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;209.21429&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;to your question, people are much more likely to understand what you are trying to do quickly.  If your expected result is large and unwieldy, then you probably haven&apos;t thought enough about how to simplify your problem (see next).&lt;/p&gt;\n&lt;h2&gt;Explain Your Problem Succinctly&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;The main thing to do is simplify your problem as much as possible before you ask your question.  Re-framing the problem to work with the built-in datasets will help a lot in this regard.  You will also often find that just by going through the process of simplification, you will answer your own problem.&lt;/p&gt;\n&lt;p&gt;Here are some examples of good questions:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;with &lt;a href=&quot;https://stackoverflow.com/questions/8484664/how-do-you-code-an-r-function-so-that-it-knows-to-look-in-data-for-the-varia&quot;&gt;built in data set&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;with &lt;a href=&quot;https://stackoverflow.com/questions/24351451/how-to-concatenate-strings-in-a-specified-order&quot;&gt;user generated data&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In both cases, the user&apos;s problems are almost certainly not with the simple examples they provide.  Rather they abstracted the nature of their problem and applied it to a simple data set to ask their question.&lt;/p&gt;\n&lt;h2&gt;Why Yet Another Answer To This Question?&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;This answer focuses on what I think is the best practice: use built-in data sets and provide what you expect as a result in a minimal form.  The most prominent answers focus on other aspects.  I don&apos;t expect this answer to rising to any prominence; this is here solely so that I can link to it in comments to newbie questions.&lt;/p&gt;\n    ","\n&lt;p&gt;To quickly create a &lt;code&gt;dput&lt;/code&gt; of your data you can just copy (a piece of) the data to your clipboard and run the following in R:&lt;/p&gt;\n&lt;p&gt;For data in Excel:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dput&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;read.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;clipboard&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; header&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For data in a &lt;em&gt;.txt&lt;/em&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dput&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;read.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;clipboard&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; header&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can change the &lt;code&gt;sep&lt;/code&gt; in the latter if necessary.\nThis will only work if your data is in the clipboard of course.&lt;/p&gt;\n    ","\n&lt;p&gt;Reproducible code is the key to get help. However, there are many users that might be sceptical of pasting even a chunk of their data. For instance, they could be working with sensitive data or on original data collected to use in a research paper.&lt;/p&gt;\n&lt;p&gt;For any reason, I thought it would be nice to have a handy function for &quot;deforming&quot; my data before pasting it publicly. The &lt;code&gt;anonymize&lt;/code&gt; function from the package &lt;code&gt;SciencesPo&lt;/code&gt; is very silly, but for me it works nicely with the &lt;code&gt;dput&lt;/code&gt; function.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;install.packages&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;SciencesPo&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\ndt &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n    Z &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;LETTERS&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    X &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    Y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;&amp;gt; dt\n   Z  X   Y\n1  D  8  no\n2  T  1 yes\n3  J  7  no\n4  K  6  no\n5  U  2  no\n6  A 10 yes\n7  Y  5  no\n8  M  9 yes\n9  X  4 yes\n10 Z  3  no\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then I anonymize it:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;&amp;gt; anonymize(dt)\n     Z    X  Y\n1   b2  2.5 c1\n2   b6 -4.5 c2\n3   b3  1.5 c1\n4   b4  0.5 c1\n5   b7 -3.5 c1\n6   b1  4.5 c2\n7   b9 -0.5 c1\n8   b5  3.5 c2\n9   b8 -1.5 c2\n10 b10 -2.5 c1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One may also want to sample a few variables instead of the whole data before applying the anonymization and dput command.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;# Sample two variables without replacement&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; anonymize&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sample.df&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dt&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;vars&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;X&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;   Y    X\n1 a1 -0.4\n2 a1  0.6\n3 a2 -2.4\n4 a1 -1.4\n5 a2  3.6\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Often you need some data for an example, however, you don&apos;t want to post your exact data. To use some existing data.frame in established library, use data command to import it.&lt;/p&gt;\n\n&lt;p&gt;e.g.,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mtcars&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then do the problem&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mtcars&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nyour problem demostrated on the mtcars data set\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you have a large dataset which cannot be easily put to the script using &lt;code&gt;dput()&lt;/code&gt;, post your data to &lt;a href=&quot;http://pastebin.com/&quot; rel=&quot;noreferrer&quot;&gt;pastebin&lt;/a&gt; and load them using &lt;code&gt;read.table&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;d &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://pastebin.com/raw.php?i=m1ZJuKLH&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Inspired &lt;a href=&quot;https://stackoverflow.com/q/20910313/684229&quot;&gt;by Henrik&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I am developing the &lt;a href=&quot;https://github.com/trinker/wakefield&quot;&gt;&lt;strong&gt;&lt;em&gt;wakefield&lt;/em&gt;&lt;/strong&gt; package&lt;/a&gt; to address this need to quickly share reproducible data, sometimes &lt;code&gt;dput&lt;/code&gt; works fine for smaller data sets but many of the problems we deal with are much larger, sharing such a large data set via &lt;code&gt;dput&lt;/code&gt; is impractical.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/trinker/wakefield&quot;&gt;&lt;strong&gt;&lt;em&gt;wakefield&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; allows the user to share minimal code to reproduce data.  The user sets &lt;code&gt;n&lt;/code&gt; (number of rows) and specifies any number of preset variable functions (there are currently 70) that mimic real if data (things like gender, age, income etc.)  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Currently (2015-06-11), &lt;a href=&quot;https://github.com/trinker/wakefield&quot;&gt;&lt;strong&gt;&lt;em&gt;wakefield&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; is a GitHub package but will go to CRAN eventually after unit tests are written.  To install quickly, use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;require&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;pacman&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; install.packages&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;pacman&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\npacman&lt;span class=&quot;hljs-operator&quot;&gt;::&lt;/span&gt;p_load_gh&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;trinker/wakefield&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;r_data_frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n    n &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    id&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    race&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    age&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    sex&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    hour&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    iq&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    height&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    died\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This produces:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;    ID  Race Age    Sex     Hour  IQ Height  Died\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;001&lt;/span&gt; White  &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;   Male &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;104&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;002&lt;/span&gt; White  &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;   Male &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;003&lt;/span&gt; Asian  &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; Female &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;113&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;004&lt;/span&gt; White  &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;   Male &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;124&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;73&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;005&lt;/span&gt; White  &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt; Female &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;006&lt;/span&gt; White  &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt; Female &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;104&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;007&lt;/span&gt; Black  &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; Female &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;008&lt;/span&gt; Black  &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt; Female &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;009&lt;/span&gt; Asian  &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;   Male &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;106&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;010&lt;/span&gt; White  &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;   Male &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;121&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;\n.. ...   ... ...    ...      ... ...    ...   ...\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you have one or more &lt;code&gt;factor&lt;/code&gt; variable(s) in your data that you want to make reproducible with &lt;code&gt;dput(head(mydata))&lt;/code&gt;, consider adding &lt;code&gt;droplevels&lt;/code&gt; to it, so that levels of factors that are not present in the minimized data set are not included in your &lt;code&gt;dput&lt;/code&gt; output, in order to make the example &lt;em&gt;minimal&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dput&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;droplevels&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;head&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydata&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wonder if an &lt;a href=&quot;http://old.r-fiddle.org/&quot; rel=&quot;noreferrer&quot;&gt;http://old.r-fiddle.org/&lt;/a&gt; link could be a very neat way of sharing a problem. It receives a unique ID like and one could even think about embedding it in SO.&lt;/p&gt;\n    ","\n&lt;p&gt;Please do not paste your console outputs like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;If I have a matrix x as follows&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; nrow&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ncol&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;dimnames&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x\n  x y\nA &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\nB &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\nC &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\nD &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n\nHow can I turn it into a dataframe with &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; rows&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; and three\ncolumns named `row`&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; `col`&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; and `value`&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; which have the\ndimension &lt;span class=&quot;hljs-built_in&quot;&gt;names&lt;/span&gt; as the values of `row` and `col`&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; like this&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x.df\n    row col value\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   x      &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;To which the answer might be&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; x.df &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; reshape&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;rownames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; direction&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;                varying&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;colnames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;colnames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;                v.names&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; timevar&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;col&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; idvar&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can not copy-paste it directly.&lt;/p&gt;\n\n&lt;p&gt;To make questions and answers properly reproducible, try to remove &lt;code&gt;+&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;gt;&lt;/code&gt; before posting it and put &lt;code&gt;#&lt;/code&gt; for outputs and comments like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#If I have a matrix x as follows:&lt;/span&gt;\nx &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; nrow&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ncol&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;dimnames&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nx\n&lt;span class=&quot;hljs-comment&quot;&gt;#  x y&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#A 1 5&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#B 2 6&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#C 3 7&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#D 4 8&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# How can I turn it into a dataframe with 8 rows, and three&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# columns named `row`, `col`, and `value`, which have the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# dimension names as the values of `row` and `col`, like this:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#x.df&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    row col value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#1    A   x      1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#...&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#To which the answer might be:&lt;/span&gt;\n\nx.df &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; reshape&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;rownames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; direction&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                varying&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;colnames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;colnames&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                v.names&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; timevar&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;col&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; idvar&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One more thing, if you have used any function from certain package, mention that library.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this using &lt;a href=&quot;https://github.com/tidyverse/reprex&quot; rel=&quot;noreferrer&quot;&gt;reprex&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;As &lt;a href=&quot;https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example/45763480#comment75607334_5965451&quot;&gt;mt1022 noted&lt;/a&gt;, &quot;... good package for producing minimal, reproducible example is &lt;strong&gt;&quot;reprex&quot;&lt;/strong&gt; from &lt;a href=&quot;https://www.tidyverse.org&quot; rel=&quot;noreferrer&quot;&gt;tidyverse&lt;/a&gt;&quot;.&lt;/p&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;https://www.tidyverse.org&quot; rel=&quot;noreferrer&quot;&gt;Tidyverse&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The goal of &quot;reprex&quot; is to package your problematic code in such a way that other people can run it and feel your pain.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;An example is given on &lt;a href=&quot;http://www.tidyverse.org/help/#reprex&quot; rel=&quot;noreferrer&quot;&gt;tidyverse&lt;/a&gt; web site.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;reprex&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ny &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; 1&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nmean&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nreprex&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I think this is the &lt;strong&gt;simplest way&lt;/strong&gt; to create a reproducible example.&lt;/p&gt;\n    ","\n&lt;p&gt;Apart from all the above answers which I found very interesting, it could sometimes be very easy as it is discussed here: &lt;a href=&quot;http://www.dummies.com/how-to/content/how-to-make-a-minimal-reproducible-example-to-get-.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to make a minimal reproducible example to get help with R&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;There are many ways to make a random vector &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17772505/create-a-100-number-vector-with-random-values-in-r-rounded-to-2-decimals&quot;&gt;Create a 100 number vector with random values in R rounded to 2 decimals&lt;/a&gt;&lt;/em&gt; or a random matrix in R:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;mydf1&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rnorm&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;nrow&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;ncol&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that sometimes it is very difficult to share a given data because of various reasons such as dimension, etc. However, all the above answers are great, and they are very important to think about and use when one wants to make a reproducible data example. But note that in order to make data as representative as the original (in case the OP cannot share the original data), it is good to add some information with the data example as (if we call the data mydf1)&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydf1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# this shows the type of the data you have&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydf1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# this shows the dimension of your data&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Moreover, one should know the type, length and attributes of a data which can be &lt;a href=&quot;http://adv-r.had.co.nz/Data-structures.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Data structures&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#found based on the following&lt;/span&gt;\ntypeof&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydf1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; what it is.\n&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydf1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; how many elements it contains.\n&lt;span class=&quot;hljs-built_in&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydf1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; additional arbitrary metadata.\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#If you cannot share your original data, you can str it and give an idea about the structure of your data&lt;/span&gt;\nhead&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mydf1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are some of my suggestions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Try to use default R datasets&lt;/li&gt;\n&lt;li&gt;If you have your own dataset, include them with &lt;code&gt;dput&lt;/code&gt;, so others can help you more easily&lt;/li&gt;\n&lt;li&gt;Do not use &lt;code&gt;install.package()&lt;/code&gt; unless it is really necessary, people will understand if you just use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;library&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Try to be concise, &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Have some dataset&lt;/li&gt;\n&lt;li&gt;Try to describe the output you need as simply as possible&lt;/li&gt;\n&lt;li&gt;Do it yourself before you ask the question&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;It is easy to upload an image, so upload plots if you have&lt;/li&gt;\n&lt;li&gt;Also include any errors you may have&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;All these are part of a reproducible example. &lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a good idea to use functions from the &lt;code&gt;testthat&lt;/code&gt; package to show what you expect to occur. Thus, other people can alter your code until it runs without error. This eases the burden of those who would like to help you, because it means they don&apos;t have to decode your textual description. For example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;testthat&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# code defining x and y&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;y &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    expect_equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    expect_equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3.21&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is clearer than &quot;I think x would come out to be 1.23 for y equal to or exceeding 10, and 3.21 otherwise, but I got neither result&quot;. Even in this silly example, I think the code is clearer than the words. Using &lt;code&gt;testthat&lt;/code&gt; lets your helper focus on the code, which saves time, and it provides a way for them to know they have solved your problem, before they post it&lt;/p&gt;\n    "],"2":["\n&lt;p&gt;There are two overarching types of variables in Java:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Primitives&lt;/em&gt;: variables that contain data. If you want to manipulate the data in a primitive variable you can manipulate that variable directly. By convention primitive types start with a lowercase letter. For example variables of type &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;char&lt;/code&gt; are primitives.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;References&lt;/em&gt;: variables that contain the memory address of an &lt;code&gt;Object&lt;/code&gt; i.e. variables that &lt;em&gt;refer&lt;/em&gt; to an &lt;code&gt;Object&lt;/code&gt;. If you want to manipulate the &lt;code&gt;Object&lt;/code&gt; that a reference variable refers to you must &lt;em&gt;dereference&lt;/em&gt; it. Dereferencing usually entails using &lt;code&gt;.&lt;/code&gt; to access a method or field, or using &lt;code&gt;[&lt;/code&gt; to index an array. By convention reference types are usually denoted with a type that starts in uppercase. For example variables of type &lt;code&gt;Object&lt;/code&gt; are references.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Consider the following code where you declare a variable of &lt;em&gt;primitive&lt;/em&gt; type &lt;code&gt;int&lt;/code&gt; and don&apos;t initialize it:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x+x;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These two lines will crash the program because no value is specified for &lt;code&gt;x&lt;/code&gt; and we are trying to use &lt;code&gt;x&lt;/code&gt;&apos;s value to specify &lt;code&gt;y&lt;/code&gt;. All primitives have to be initialized to a usable value before they are manipulated.&lt;/p&gt;\n&lt;p&gt;Now here is where things get interesting. &lt;em&gt;Reference&lt;/em&gt; variables can be set to &lt;code&gt;null&lt;/code&gt; which means &quot;&lt;strong&gt;I am referencing &lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt;&quot;. You can get a &lt;code&gt;null&lt;/code&gt; value in a reference variable if you explicitly set it that way, or a reference variable is uninitialized and the compiler does not catch it (Java will automatically set the variable to &lt;code&gt;null&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;If a reference variable is set to null either explicitly by you or through Java automatically, and you attempt to &lt;em&gt;dereference&lt;/em&gt; it you get a &lt;code&gt;NullPointerException&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;NullPointerException&lt;/code&gt; (NPE) typically occurs when you declare a variable but did not create an object and assign it to the variable before trying to use the contents of the variable. So you have a reference to something that does not actually exist.&lt;/p&gt;\n&lt;p&gt;Take the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Integer num;\nnum = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The first line declares a variable named &lt;code&gt;num&lt;/code&gt;, but it does not actually contain a reference value yet. Since you have not yet said what to point to, Java sets it to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In the second line, the &lt;code&gt;new&lt;/code&gt; keyword is used to instantiate (or create) an object of type &lt;code&gt;Integer&lt;/code&gt;, and the reference variable &lt;code&gt;num&lt;/code&gt; is assigned to that &lt;code&gt;Integer&lt;/code&gt; object.&lt;/p&gt;\n&lt;p&gt;If you attempt to dereference &lt;code&gt;num&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; creating the object you get a &lt;code&gt;NullPointerException&lt;/code&gt;. In the most trivial cases, the compiler will catch the problem and let you know that &quot;&lt;code&gt;num may not have been initialized&lt;/code&gt;,&quot; but sometimes you may write code that does not directly create the object.&lt;/p&gt;\n&lt;p&gt;For instance, you may have a method as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(SomeObject obj)&lt;/span&gt; {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Do something to obj, assumes obj is not null&lt;/span&gt;\n   obj.myMethod();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In which case, you are not creating the object &lt;code&gt;obj&lt;/code&gt;, but rather assuming that it was created before the &lt;code&gt;doSomething()&lt;/code&gt; method was called. Note, it is possible to call the method like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;doSomething(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In which case, &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, and the statement &lt;code&gt;obj.myMethod()&lt;/code&gt; will throw a &lt;code&gt;NullPointerException&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If the method is intended to do something to the passed-in object as the above method does, it is appropriate to throw the &lt;code&gt;NullPointerException&lt;/code&gt; because it&apos;s a programmer error and the programmer will need that information for debugging purposes.&lt;/p&gt;\n&lt;p&gt;In addition to &lt;code&gt;NullPointerException&lt;/code&gt;s thrown as a result of the method&apos;s logic, you can also check the method arguments for &lt;code&gt;null&lt;/code&gt; values and throw NPEs explicitly by adding something like the following near the beginning of a method:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Throws an NPE with a custom error message if obj is null&lt;/span&gt;\nObjects.requireNonNull(obj, &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj must not be null&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that it&apos;s helpful to say in your error message clearly &lt;em&gt;which&lt;/em&gt; object cannot be &lt;code&gt;null&lt;/code&gt;. The advantage of validating this is that 1) you can return your own clearer error messages and 2) for the rest of the method you know that unless &lt;code&gt;obj&lt;/code&gt; is reassigned, it is not null and can be dereferenced safely.&lt;/p&gt;\n&lt;p&gt;Alternatively, there may be cases where the purpose of the method is not solely to operate on the passed in object, and therefore a null parameter may be acceptable. In this case, you would need to check for a &lt;strong&gt;null parameter&lt;/strong&gt; and behave differently. You should also explain this in the documentation. For example, &lt;code&gt;doSomething()&lt;/code&gt; could be written as:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n  * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; obj An optional foo for ____. May be null, in which case\n  *  the result will be ____.\n  */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(SomeObject obj)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-comment&quot;&gt;// Do something&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n       &lt;span class=&quot;hljs-comment&quot;&gt;// Do something else&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, &lt;a href=&quot;https://stackoverflow.com/q/3988788/2775450&quot;&gt;How to pinpoint the exception &amp;amp; cause using Stack Trace&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;What methods/tools can be used to determine the cause so that you stop\nthe exception from causing the program to terminate prematurely?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Sonar with find bugs can detect NPE.\n&lt;a href=&quot;https://stackoverflow.com/questions/20899931/can-sonar-catch-null-pointer-exceptions-caused-by-jvm-dynamically&quot;&gt;Can sonar catch null pointer exceptions caused by JVM Dynamically&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Now Java 14 has added a new language feature to show the root cause of NullPointerException. This language feature has been part of SAP commercial JVM since 2006.&lt;/p&gt;\n&lt;p&gt;In Java 14, the following is a sample NullPointerException Exception message:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;java.util.List.size()&quot; because &quot;list&quot; is null&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;code&gt;NullPointerException&lt;/code&gt;s are exceptions that occur when you try to use a reference that points to no location in memory (null) as though it were referencing an object.  Calling a method on a null reference or trying to access a field of a null reference will trigger a &lt;code&gt;NullPointerException&lt;/code&gt;.  These are the most common, but other ways are listed on the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt; javadoc page.&lt;/p&gt;\n&lt;p&gt;Probably the quickest example code I could come up with to illustrate a &lt;code&gt;NullPointerException&lt;/code&gt; would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        obj.hashCode();\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On the first line inside &lt;code&gt;main&lt;/code&gt;, I&apos;m explicitly setting the &lt;code&gt;Object&lt;/code&gt; reference &lt;code&gt;obj&lt;/code&gt; equal to &lt;code&gt;null&lt;/code&gt;.  This means I have a reference, but it isn&apos;t pointing to any object.  After that, I try to treat the reference as though it points to an object by calling a method on it.  This results in a &lt;code&gt;NullPointerException&lt;/code&gt; because there is no code to execute in the location that the reference is pointing.&lt;/p&gt;\n&lt;p&gt;(This is a technicality, but I think it bears mentioning: A reference that points to null isn&apos;t the same as a C pointer that points to an invalid memory location.  A null pointer is literally not pointing &lt;em&gt;anywhere&lt;/em&gt;, which is subtly different than pointing to a location that happens to be invalid.)&lt;/p&gt;\n    ","\n&lt;h1&gt;What is a NullPointerException?&lt;/h1&gt;\n\n&lt;p&gt;A good place to start is the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot; rel=&quot;noreferrer&quot;&gt;JavaDocs&lt;/a&gt;. They have this covered:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Thrown when an application attempts to use null in a case where an\n  object is required. These include:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Calling the instance method of a null object.&lt;/li&gt;\n  &lt;li&gt;Accessing or modifying the field of a null object.&lt;/li&gt;\n  &lt;li&gt;Taking the length of null as if it were an array.&lt;/li&gt;\n  &lt;li&gt;Accessing or modifying the slots of null as if it were an array.&lt;/li&gt;\n  &lt;li&gt;Throwing null as if it were a Throwable value.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;Applications should throw instances of this class to indicate other\n  illegal uses of the null object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It is also the case that if you attempt to use a null reference with &lt;code&gt;synchronized&lt;/code&gt;, that will also throw this exception, &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.19&quot; rel=&quot;noreferrer&quot;&gt;per the JLS&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;SynchronizedStatement:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; ( Expression ) Block\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Otherwise, if the value of the Expression is null, a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;How do I fix it?&lt;/h1&gt;\n\n&lt;p&gt;So you have a &lt;code&gt;NullPointerException&lt;/code&gt;. How do you fix it? Let&apos;s take a simple example which throws a &lt;code&gt;NullPointerException&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Printer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        printString(name);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s)&lt;/span&gt; {\n        System.out.println(s + &lt;span class=&quot;hljs-string&quot;&gt;&quot; (&quot;&lt;/span&gt; + s.length() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Printer&lt;/span&gt;();\n        printer.print();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Identify the null values&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The first step is identifying exactly &lt;em&gt;which values are causing the exception&lt;/em&gt;. For this, we need to do some debugging. It&apos;s important to learn to read a &lt;em&gt;stacktrace&lt;/em&gt;. This will show you where the exception was thrown:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException\n    at Printer.printString(Printer.java:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;)\n    at Printer.print(Printer.java:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\n    at Printer.main(Printer.java:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, we see that the exception is thrown on line 13 (in the &lt;code&gt;printString&lt;/code&gt; method). Look at the line and check which values are null by\nadding &lt;em&gt;logging statements&lt;/em&gt; or using a &lt;em&gt;debugger&lt;/em&gt;. We find out that &lt;code&gt;s&lt;/code&gt; is null, and calling the &lt;code&gt;length&lt;/code&gt; method on it throws the exception. We can see that the program stops throwing the exception when &lt;code&gt;s.length()&lt;/code&gt; is removed from the method.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Trace where these values come from&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Next check where this value comes from. By following the callers of the method, we see that &lt;code&gt;s&lt;/code&gt; is passed in with &lt;code&gt;printString(name)&lt;/code&gt; in the &lt;code&gt;print()&lt;/code&gt; method, and &lt;code&gt;this.name&lt;/code&gt; is null.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Trace where these values should be set&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Where is &lt;code&gt;this.name&lt;/code&gt; set? In the &lt;code&gt;setName(String)&lt;/code&gt; method. With some more debugging, we can see that this method isn&apos;t called at all. If the method was called, make sure to check the &lt;em&gt;order&lt;/em&gt; that these methods are called, and the set method isn&apos;t called &lt;em&gt;after&lt;/em&gt; the print method.&lt;/p&gt;\n\n&lt;p&gt;This is enough to give us a solution: add a call to &lt;code&gt;printer.setName()&lt;/code&gt; before calling &lt;code&gt;printer.print()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Other fixes&lt;/h1&gt;\n\n&lt;p&gt;The variable can have a &lt;em&gt;default value&lt;/em&gt; (and &lt;code&gt;setName&lt;/code&gt; can prevent it being set to null):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Either the &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;printString&lt;/code&gt; method can &lt;em&gt;check for null&lt;/em&gt;, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;printString((name == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; : name);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can design the class so that &lt;code&gt;name&lt;/code&gt; &lt;em&gt;always has a non-null value&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Printer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String name;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = Objects.requireNonNull(name);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        printString(name);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s)&lt;/span&gt; {\n        System.out.println(s + &lt;span class=&quot;hljs-string&quot;&gt;&quot; (&quot;&lt;/span&gt; + s.length() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Printer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;123&quot;&lt;/span&gt;);\n        printer.print();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/271526/avoiding-null-statements-in-java&quot;&gt;Avoiding != null statements in Java?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;I still can&apos;t find the problem&lt;/h1&gt;\n\n&lt;p&gt;If you tried to debug the problem and still don&apos;t have a solution, you can post a question for more help, but make sure to include what you&apos;ve tried so far. At a minimum, &lt;strong&gt;include the stacktrace&lt;/strong&gt; in the question, and &lt;strong&gt;mark the important line numbers&lt;/strong&gt; in the code. Also, try simplifying the code first (see &lt;a href=&quot;http://sscce.org/&quot; rel=&quot;noreferrer&quot;&gt;SSCCE&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;h2&gt;Question: What causes a &lt;code&gt;NullPointerException&lt;/code&gt; (NPE)?&lt;/h2&gt;\n&lt;p&gt;As you should know, Java types are divided into &lt;em&gt;primitive types&lt;/em&gt; (&lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, etc.) and &lt;em&gt;reference types&lt;/em&gt;. Reference types in Java allow you to use the special value &lt;code&gt;null&lt;/code&gt; which is the Java way of saying &quot;no object&quot;.&lt;/p&gt;\n&lt;p&gt;A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown at runtime whenever your program attempts to use a &lt;code&gt;null&lt;/code&gt; as if it was a real reference. For example, if you write this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.length();   &lt;span class=&quot;hljs-comment&quot;&gt;// HERE&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the statement labeled &quot;HERE&quot; is going to attempt to run the &lt;code&gt;length()&lt;/code&gt; method on a &lt;code&gt;null&lt;/code&gt; reference, and this will throw a &lt;code&gt;NullPointerException&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;There are many ways that you could use a &lt;code&gt;null&lt;/code&gt; value that will result in a &lt;code&gt;NullPointerException&lt;/code&gt;. In fact, the only things that you &lt;em&gt;can&lt;/em&gt; do with a &lt;code&gt;null&lt;/code&gt; without causing an NPE are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;assign it to a reference variable or read it from a reference variable,&lt;/li&gt;\n&lt;li&gt;assign it to an array element or read it from an array element (provided that array reference itself is non-null!),&lt;/li&gt;\n&lt;li&gt;pass it as a parameter or return it as a result, or&lt;/li&gt;\n&lt;li&gt;test it using the &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operators, or &lt;code&gt;instanceof&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Question: How do I read the NPE stacktrace?&lt;/h2&gt;\n&lt;p&gt;Suppose that I compile and run the program above:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;$ javac Test.java \n$ java Test\nException in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException\n    at Test.main(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n$\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First observation: the compilation succeeds! The problem in the program is NOT a compilation error. It is a &lt;em&gt;runtime&lt;/em&gt; error. (Some IDEs may warn your program will always throw an exception ... but the standard &lt;code&gt;javac&lt;/code&gt; compiler doesn&apos;t.)&lt;/p&gt;\n&lt;p&gt;Second observation: when I run the program, it outputs two lines of &quot;gobbledy-gook&quot;. &lt;strong&gt;WRONG!!&lt;/strong&gt; That&apos;s not gobbledy-gook. It is a stacktrace ... and it provides &lt;em&gt;vital information&lt;/em&gt; that will help you track down the error in your code if you take the time to read it carefully.&lt;/p&gt;\n&lt;p&gt;So let&apos;s look at what it says:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The first line of the stack trace tells you a number of things:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It tells you the name of the Java thread in which the exception was thrown.  For a simple program with one thread (like this one), it will be &quot;main&quot;. Let&apos;s move on ...&lt;/li&gt;\n&lt;li&gt;It tells you the full name of the exception that was thrown; i.e. &lt;code&gt;java.lang.NullPointerException&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If the exception has an associated error message, that will be output after the exception name. &lt;code&gt;NullPointerException&lt;/code&gt; is unusual in this respect, because it rarely has an error message.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The second line is the most important one in diagnosing an NPE.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;at Test.main(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This tells us a number of things:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&quot;at Test.main&quot; says that we were in the &lt;code&gt;main&lt;/code&gt; method of the &lt;code&gt;Test&lt;/code&gt; class.&lt;/li&gt;\n&lt;li&gt;&quot;Test.java:4&quot; gives the source filename of the class, AND it tells us that the statement where this occurred is in line 4 of the file.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you count the lines in the file above, line 4 is the one that I labeled with the &quot;HERE&quot; comment.&lt;/p&gt;\n&lt;p&gt;Note that in a more complicated example, there will be lots of lines in the NPE stack trace. But you can be sure that the second line (the first &quot;at&quot; line) will tell you where the NPE was thrown&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;\n&lt;p&gt;In short, the stack trace will tell us unambiguously which statement of the program has thrown the NPE.&lt;/p&gt;\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/q/3988788/2775450&quot;&gt;What is a stack trace, and how can I use it to debug my application errors?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;1 - Not quite true. There are things called nested exceptions...&lt;/sup&gt;&lt;/p&gt;\n&lt;h2&gt;Question: How do I track down the cause of the NPE exception in my code?&lt;/h2&gt;\n&lt;p&gt;This is the hard part. The short answer is to apply logical inference to the evidence provided by the stack trace, the source code, and the relevant API documentation.&lt;/p&gt;\n&lt;p&gt;Let&apos;s illustrate with the simple example (above) first. We start by looking at the line that the stack trace has told us is where the NPE happened:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.length(); &lt;span class=&quot;hljs-comment&quot;&gt;// HERE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How can that throw an NPE?&lt;/p&gt;\n&lt;p&gt;In fact, there is only one way: it can only happen if &lt;code&gt;foo&lt;/code&gt; has the value &lt;code&gt;null&lt;/code&gt;.  We then try to run the &lt;code&gt;length()&lt;/code&gt; method on &lt;code&gt;null&lt;/code&gt; and... BANG!&lt;/p&gt;\n&lt;p&gt;But (I hear you say) what if the NPE was thrown inside the &lt;code&gt;length()&lt;/code&gt; method call?&lt;/p&gt;\n&lt;p&gt;Well, if that happened, the stack trace would look different. The first &quot;at&quot; line would say that the exception was thrown in some line in the &lt;code&gt;java.lang.String&lt;/code&gt; class and line 4 of &lt;code&gt;Test.java&lt;/code&gt; would be the second &quot;at&quot; line.&lt;/p&gt;\n&lt;p&gt;So where did that &lt;code&gt;null&lt;/code&gt; come from? In this case, it is obvious, and it is obvious what we need to do to fix it. (Assign a non-null value to &lt;code&gt;foo&lt;/code&gt;.)&lt;/p&gt;\n&lt;p&gt;OK, so let&apos;s try a slightly more tricky example. This will require some &lt;em&gt;logical deduction&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String[] foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] bar, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bar[pos].length();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; test(foo, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n}\n\n$ javac Test.java \n$ java Test\nException in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException\n    at Test.test(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n    at Test.main(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n$ \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So now we have two &quot;at&quot; lines. The first one is for this line:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; args[pos].length();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and the second one is for this line:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; test(foo, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Looking at the first line, how could that throw an NPE?  There are two ways:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If the value of &lt;code&gt;bar&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; then &lt;code&gt;bar[pos]&lt;/code&gt; will throw an NPE.&lt;/li&gt;\n&lt;li&gt;If the value of &lt;code&gt;bar[pos]&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; then calling &lt;code&gt;length()&lt;/code&gt; on it will throw an NPE.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Next, we need to figure out which of those scenarios explains what is actually happening. We will start by exploring the first one:&lt;/p&gt;\n&lt;p&gt;Where does &lt;code&gt;bar&lt;/code&gt; come from? It is a parameter to the &lt;code&gt;test&lt;/code&gt; method call, and if we look at how &lt;code&gt;test&lt;/code&gt; was called, we can see that it comes from the &lt;code&gt;foo&lt;/code&gt; static variable. In addition, we can see clearly that we initialized &lt;code&gt;foo&lt;/code&gt; to a non-null value.  That is sufficient to tentatively dismiss this explanation. (In theory, something else could &lt;em&gt;change&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; ... but that is not happening here.)&lt;/p&gt;\n&lt;p&gt;So what about our second scenario? Well, we can see that &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, so that means that &lt;code&gt;foo[1]&lt;/code&gt; must be &lt;code&gt;null&lt;/code&gt;. Is this possible?&lt;/p&gt;\n&lt;p&gt;Indeed it is! And that is the problem. When we initialize like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String[] foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;we allocate a &lt;code&gt;String[]&lt;/code&gt; with two elements &lt;em&gt;that are initialized to &lt;code&gt;null&lt;/code&gt;&lt;/em&gt;. After that, we have not changed the contents of &lt;code&gt;foo&lt;/code&gt; ... so &lt;code&gt;foo[1]&lt;/code&gt; will still be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;What about on Android?&lt;/h2&gt;\n&lt;p&gt;On Android, tracking down the immediate cause of an NPE is a bit simpler.  The exception message will typically tell you the (compile time) type of the null reference you are using &lt;em&gt;and&lt;/em&gt; the method you were attempting to call when the NPE was thrown.  This simplifies the process of pinpointing the immediate cause.&lt;/p&gt;\n&lt;p&gt;But on the flipside, Android has some common platform-specific causes for NPEs.  A very common is when &lt;code&gt;getViewById&lt;/code&gt; unexpectedly returns a &lt;code&gt;null&lt;/code&gt;.  My advice would be to search for Q&amp;amp;As about the cause of the unexpected &lt;code&gt;null&lt;/code&gt; return value.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s like you are trying to access an object which is &lt;code&gt;null&lt;/code&gt;. Consider below example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;TypeA objA;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At this time you have just &lt;strong&gt;declared&lt;/strong&gt; this object but not &lt;strong&gt;initialized or instantiated&lt;/strong&gt;. And whenever you try to access any property or method in it, it will throw  &lt;code&gt;NullPointerException&lt;/code&gt; which makes sense.&lt;/p&gt;\n\n&lt;p&gt;See this below example as well:                                        &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\nSystem.out.println(a.toString()); &lt;span class=&quot;hljs-comment&quot;&gt;// NullPointerException will be thrown&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A null pointer exception is thrown when an application attempts to use null in a case where an object is required. These include:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Calling the instance method of a &lt;code&gt;null&lt;/code&gt; object.&lt;/li&gt;\n&lt;li&gt;Accessing or modifying the field of a &lt;code&gt;null&lt;/code&gt; object.&lt;/li&gt;\n&lt;li&gt;Taking the length of &lt;code&gt;null&lt;/code&gt; as if it were an array.&lt;/li&gt;\n&lt;li&gt;Accessing or modifying the slots of &lt;code&gt;null&lt;/code&gt; as if it were an array.&lt;/li&gt;\n&lt;li&gt;Throwing &lt;code&gt;null&lt;/code&gt; as if it were a Throwable value. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Applications should throw instances of this class to indicate other illegal uses of the &lt;code&gt;null&lt;/code&gt; object. &lt;/p&gt;\n\n&lt;p&gt;Reference: &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A &lt;code&gt;null&lt;/code&gt; pointer is one that points to nowhere.  When you dereference a pointer &lt;code&gt;p&lt;/code&gt;, you say &quot;give me the data at the location stored in &quot;p&quot;.  When &lt;code&gt;p&lt;/code&gt; is a &lt;code&gt;null&lt;/code&gt; pointer, the location stored in &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;nowhere&lt;/code&gt;, you&apos;re saying &quot;give me the data at the location &apos;nowhere&apos;&quot;.  Obviously, it can&apos;t do this, so it throws a &lt;code&gt;null pointer exception&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In general, it&apos;s because something hasn&apos;t been initialized properly.&lt;/p&gt;\n    ","\n&lt;p&gt;A lot of explanations are already present to explain how it happens and how to fix it, but you should also follow &lt;strong&gt;best practices&lt;/strong&gt; to avoid &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt;s at all.&lt;/p&gt;\n\n&lt;p&gt;See also:\n&lt;a href=&quot;http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html&quot; rel=&quot;noreferrer&quot;&gt;A good list of best practices&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I would add, very important, make a good use of the &lt;code&gt;final&lt;/code&gt; modifier.\n&lt;a href=&quot;https://stackoverflow.com/questions/137868/using-final-modifier-whenever-applicable-in-java&quot;&gt;Using the &quot;final&quot; modifier whenever applicable in Java&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use the &lt;code&gt;final&lt;/code&gt; modifier to enforce good initialization.&lt;/li&gt;\n&lt;li&gt;Avoid returning null in methods, for example returning empty collections when applicable.&lt;/li&gt;\n&lt;li&gt;Use annotations &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/NotNull.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@NotNull&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://javadoc.io/static/com.github.spotbugs/spotbugs-annotations/3.1.12/edu/umd/cs/findbugs/annotations/Nullable.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@Nullable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Fail fast and use asserts to avoid propagation of null objects through the whole application when they shouldn&apos;t be null.&lt;/li&gt;\n&lt;li&gt;Use equals with a known object first: &lt;code&gt;if(&quot;knownObject&quot;.equals(unknownObject)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Prefer &lt;code&gt;valueOf()&lt;/code&gt; over &lt;code&gt;toString()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Use null safe &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;StringUtils&lt;/code&gt;&lt;/a&gt; methods &lt;code&gt;StringUtils.isEmpty(null)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Use Java 8 Optional as return value in methods, Optional class provide a solution for representing optional values instead of null references.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;A null pointer exception is an indicator that you are using an object without initializing it.&lt;/p&gt;\n\n&lt;p&gt;For example, below is a student class which will use it in our code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; newId)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = newId;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The below code gives you a null pointer exception.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;School&lt;/span&gt; {\n\n    Student student;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;School&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            student.getId();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception e) {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Null pointer exception&quot;&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because you are using &lt;code&gt;student&lt;/code&gt;, but you forgot to initialize it like in the\ncorrect code shown below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;School&lt;/span&gt; {\n\n    Student student;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;School&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            student = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;();\n            student.setId(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;);\n            student.getId();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception e) {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Null pointer exception&quot;&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Java, everything (excluding primitive types) is in the form of a class.&lt;/p&gt;\n\n&lt;p&gt;If you want to use any object then you have two phases:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Declare&lt;/li&gt;\n&lt;li&gt;Initialization&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Declaration: &lt;code&gt;Object object;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Initialization: &lt;code&gt;object = new Object();&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Same for the array concept:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Declaration: &lt;code&gt;Item item[] = new Item[5];&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Initialization: &lt;code&gt;item[0] = new Item();&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you are not giving the initialization section then the &lt;code&gt;NullPointerException&lt;/code&gt; arise.&lt;/p&gt;\n    ","\n&lt;p&gt;In &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; all the variables you declare are actually &quot;references&quot; to the objects (or primitives) and not the objects themselves.&lt;/p&gt;\n\n&lt;p&gt;When you attempt to execute one object method, the reference asks the living object to execute that method. But if the reference is referencing NULL (nothing, zero, void, nada)  then there is no way the method gets executed. Then the runtime let you know this by throwing a NullPointerException.&lt;/p&gt;\n\n&lt;p&gt;Your reference is &quot;pointing&quot; to null, thus &quot;Null -&amp;gt; Pointer&quot;.&lt;/p&gt;\n\n&lt;p&gt;The object lives in the VM memory space and the only way to access it is using &lt;code&gt;this&lt;/code&gt; references. Take this example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Some&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; newId )&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = newId;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And on another place in your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;reference&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Some&lt;/span&gt;();    &lt;span class=&quot;hljs-comment&quot;&gt;// Point to a new object of type Some()&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;otherReference&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// Initiallly this points to NULL&lt;/span&gt;\n\nreference.setId( &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; );           &lt;span class=&quot;hljs-comment&quot;&gt;// Execute setId method, now private var id is 1&lt;/span&gt;\n\nSystem.out.println( reference.getId() ); &lt;span class=&quot;hljs-comment&quot;&gt;// Prints 1 to the console&lt;/span&gt;\n\notherReference = reference      &lt;span class=&quot;hljs-comment&quot;&gt;// Now they both point to the only object.&lt;/span&gt;\n\nreference = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;               &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;reference&quot; now point to null.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// But &quot;otherReference&quot; still point to the &quot;real&quot; object so this print 1 too...&lt;/span&gt;\nSystem.out.println( otherReference.getId() );\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Guess what will happen&lt;/span&gt;\nSystem.out.println( reference.getId() ); &lt;span class=&quot;hljs-comment&quot;&gt;// :S Throws NullPointerException because &quot;reference&quot; is pointing to NULL remember...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This an important thing to know - when there are no more references to an object (in the example above when &lt;code&gt;reference&lt;/code&gt; and &lt;code&gt;otherReference&lt;/code&gt; both point to null) then the object is &quot;unreachable&quot;. There is no way we can work with it, so this object is ready to be garbage collected, and at some point, the VM will free the memory used by this object and will allocate another.&lt;/p&gt;\n    ","\n&lt;p&gt;Another occurrence of a &lt;code&gt;NullPointerException&lt;/code&gt; occurs when one declares an object array, then immediately tries to dereference elements inside of it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] phrases = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;keyPhrase&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bird&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String phrase : phrases) {\n    System.out.println(phrase.equals(keyPhrase));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;sup&gt;This particular NPE can be avoided if the comparison order is reversed; namely, use &lt;code&gt;.equals&lt;/code&gt; on a guaranteed non-null object.&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;All elements inside of an array &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5&quot; rel=&quot;noreferrer&quot;&gt;are initialized to their common initial value&lt;/a&gt;; for any type of object array, that means that all elements are &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You &lt;em&gt;must&lt;/em&gt; initialize the elements in the array &lt;em&gt;before&lt;/em&gt; accessing or dereferencing them.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] phrases = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;The bird&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A bird&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;My bird&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bird&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;keyPhrase&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bird&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String phrase : phrases) {\n    System.out.println(phrase.equals(keyPhrase));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"3":["\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt; For a more general explanation of asynchronous behaviour with different examples, see&lt;/em&gt; &lt;a href=&quot;https://stackoverflow.com/q/23667086/218196&quot;&gt;Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt; If you already understand the problem, skip to the possible solutions below.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h1&gt;The problem&lt;/h1&gt;\n&lt;p&gt;The &lt;strong&gt;A&lt;/strong&gt; in &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_(programming)&quot; rel=&quot;noreferrer&quot;&gt;Ajax&lt;/a&gt; stands for &lt;a href=&quot;https://www.merriam-webster.com/dictionary/asynchronous&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;asynchronous&lt;/strong&gt;&lt;/a&gt;. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, &lt;code&gt;$.ajax&lt;/code&gt; returns immediately and the next statement, &lt;code&gt;return result;&lt;/code&gt;, is executed before the function you passed as &lt;code&gt;success&lt;/code&gt; callback was even called.&lt;/p&gt;\n&lt;p&gt;Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer:&lt;/p&gt;\n&lt;h2&gt;Synchronous&lt;/h2&gt;\n&lt;p&gt;Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.&lt;/p&gt;\n&lt;p&gt;The same is happening when you make a function call containing &quot;normal&quot; code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;findItem&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(item_not_found) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// search&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item = &lt;span class=&quot;hljs-title function_&quot;&gt;findItem&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Do something with item&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingElse&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Even though &lt;code&gt;findItem&lt;/code&gt; might take a long time to execute, any code coming after &lt;code&gt;var item = findItem();&lt;/code&gt; has to &lt;em&gt;wait&lt;/em&gt; until the function returns the result.&lt;/p&gt;\n&lt;h2&gt;Asynchronous&lt;/h2&gt;\n&lt;p&gt;You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should &lt;em&gt;call you back&lt;/em&gt; on your mobile phone. You hang up, leave the house, and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.&lt;/p&gt;\n&lt;p&gt;That&apos;s exactly what&apos;s happening when you do an Ajax request.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;findItem&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with the item&lt;/span&gt;\n});\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingElse&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a &lt;em&gt;callback&lt;/em&gt; (notice something? &lt;em&gt;call back&lt;/em&gt; ?). Any statement coming after that call is executed before the callback is called.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Solution(s)&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;Embrace the asynchronous nature of JavaScript!&lt;/strong&gt; While certain asynchronous operations provide synchronous counterparts (so does &quot;Ajax&quot;), it&apos;s generally discouraged to use them, especially in a browser context.&lt;/p&gt;\n&lt;p&gt;Why is it bad do you ask?&lt;/p&gt;\n&lt;p&gt;JavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.&lt;/p&gt;\n&lt;p&gt;All of this results in a really bad user experience. The user won&apos;t be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.&lt;/p&gt;\n&lt;p&gt;In the following we will look at three different solutions that are all building on top of each other:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Promises with &lt;code&gt;async/await&lt;/code&gt;&lt;/strong&gt; (ES2017+, available in older browsers if you use a transpiler or regenerator)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Callbacks&lt;/strong&gt; (popular in node)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Promises with &lt;code&gt;then()&lt;/code&gt;&lt;/strong&gt; (ES2015+, available in older browsers if you use one of the many promise libraries)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;All three are available in current browsers, and node 7+.&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;ES2017+: Promises with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;async/await&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n&lt;p&gt;The ECMAScript version released in 2017 introduced &lt;em&gt;syntax-level support&lt;/em&gt; for asynchronous functions. With the help of &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, you can write asynchronous in a &quot;synchronous style&quot;. The code is still asynchronous, but it&apos;s easier to read/understand.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;async/await&lt;/code&gt; builds on top of promises: an &lt;code&gt;async&lt;/code&gt; function always returns a promise. &lt;code&gt;await&lt;/code&gt; &quot;unwraps&quot; a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You can only use &lt;code&gt;await&lt;/code&gt; inside an &lt;code&gt;async&lt;/code&gt; function or in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot; rel=&quot;noreferrer&quot;&gt;JavaScript module&lt;/a&gt;. Top-level &lt;code&gt;await&lt;/code&gt; is not supported outside of modules, so you might have to make an async IIFE (&lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately_invoked_function_expression&quot; rel=&quot;noreferrer&quot;&gt;Immediately Invoked Function Expression&lt;/a&gt;) to start an &lt;code&gt;async&lt;/code&gt; context if not using a module.&lt;/p&gt;\n&lt;p&gt;You can read more about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; on MDN.&lt;/p&gt;\n&lt;p&gt;Here is an example that elaborates the &lt;em&gt;delay&lt;/em&gt; function &lt;code&gt;findItem()&lt;/code&gt; above:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Using &apos;superagent&apos; which will return a promise.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; superagent = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;superagent&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is isn&apos;t declared as `async` because it already returns a promise&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// `delay` returns a promise&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Only `delay` is able to resolve or reject the promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// After 3 seconds, resolve the promise with value 42&lt;/span&gt;\n    }, &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;);\n  });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAllBooks&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// GET a list of book IDs of the current user&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bookIDs = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; superagent.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/user/books&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// wait for 3 seconds (just for the sake of this example)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// GET information about each book&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; superagent.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/books/ids=&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(bookIDs));\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If any of the awaited promises was rejected, this catch block&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// would catch the rejection reason&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Start an IIFE to use `await` at the top level&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; books = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAllBooks&lt;/span&gt;();\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(books);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Current &lt;a href=&quot;https://kangax.github.io/compat-table/es2016plus/#test-async_functions&quot; rel=&quot;noreferrer&quot;&gt;browser&lt;/a&gt; and &lt;a href=&quot;http://node.green/#ES2017-features-async-functions&quot; rel=&quot;noreferrer&quot;&gt;node&lt;/a&gt; versions support &lt;code&gt;async/await&lt;/code&gt;. You can also support older environments by transforming your code to ES5 with the help of &lt;a href=&quot;https://github.com/facebook/regenerator&quot; rel=&quot;noreferrer&quot;&gt;regenerator&lt;/a&gt; (or tools that use regenerator, such as &lt;a href=&quot;https://babeljs.io/&quot; rel=&quot;noreferrer&quot;&gt;Babel&lt;/a&gt;).&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Let functions accept &lt;em&gt;callbacks&lt;/em&gt;&lt;/h2&gt;\n&lt;p&gt;A callback is when function 1 is passed to function 2. Function 2 can call function 1 whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.&lt;/p&gt;\n&lt;p&gt;In the example of the question, you can make &lt;code&gt;foo&lt;/code&gt; accept a callback and use it as &lt;code&gt;success&lt;/code&gt; callback. So this&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Code that depends on &apos;result&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;becomes&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code that depends on &apos;result&apos;&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here we defined the function &quot;inline&quot; but you can pass any function reference:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code that depends on &apos;result&apos;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(myCallback);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; itself is defined as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: callback\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; will refer to the function we pass to &lt;code&gt;foo&lt;/code&gt; when we call it and we pass it on to &lt;code&gt;success&lt;/code&gt;. I.e. once the Ajax request is successful, &lt;code&gt;$.ajax&lt;/code&gt; will call &lt;code&gt;callback&lt;/code&gt; and pass the response to the callback (which can be referred to with &lt;code&gt;result&lt;/code&gt;, since this is how we defined the callback).&lt;/p&gt;\n&lt;p&gt;You can also process the response before passing it to the callback:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// For example, filter the response&lt;/span&gt;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(filtered_response);\n        }\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event-driven (DOM events). Receiving the Ajax response is nothing else but an event.\nDifficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;ES2015+: Promises with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;then()&lt;/a&gt;&lt;/h2&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise API&lt;/a&gt; is a new feature of ECMAScript 6 (ES2015), but it has good &lt;a href=&quot;http://caniuse.com/#feat=promises&quot; rel=&quot;noreferrer&quot; title=&quot;caniuse&quot;&gt;browser support&lt;/a&gt; already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g., &lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot; rel=&quot;noreferrer&quot;&gt;bluebird&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;Promises are containers for &lt;em&gt;future&lt;/em&gt; values. When the promise receives the value (it is &lt;em&gt;resolved&lt;/em&gt;) or when it is canceled (&lt;em&gt;rejected&lt;/em&gt;), it notifies all of its &quot;listeners&quot; who want to access this value.&lt;/p&gt;\n&lt;p&gt;The advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.&lt;/p&gt;\n&lt;p&gt;Here is an example of using a promise:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// `delay` returns a promise&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Only `delay` is able to resolve or reject the promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// After 3 seconds, resolve the promise with value 42&lt;/span&gt;\n    }, &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;);\n  });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;()\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// `delay` returns a promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v); &lt;span class=&quot;hljs-comment&quot;&gt;// Log the value once it is resolved&lt;/span&gt;\n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Or do something else if it is rejected&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// (it would not happen in this example, since `reject` is not called).&lt;/span&gt;\n  });&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Applied to our Ajax call we could use promises like this:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    xhr.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n    };\n    xhr.&lt;span class=&quot;hljs-property&quot;&gt;onerror&lt;/span&gt; = reject;\n    xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, url);\n    xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n  });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/1&quot;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result); &lt;span class=&quot;hljs-comment&quot;&gt;// Code depending on result&lt;/span&gt;\n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// An error occurred&lt;/span&gt;\n  });&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.&lt;/p&gt;\n&lt;p&gt;More information about promises: &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot; rel=&quot;noreferrer&quot;&gt;HTML5 rocks - JavaScript Promises&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;Side note: jQuery&apos;s deferred objects&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4866721/what-are-deferred-objects&quot;&gt;Deferred objects&lt;/a&gt; are jQuery&apos;s custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.&lt;/p&gt;\n&lt;p&gt;Every Ajax method of jQuery already returns a &quot;deferred object&quot; (actually a promise of a deferred object) which you can just return from your function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(...);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code depending on result&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;fail&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// An error occurred&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Side note: Promise gotchas&lt;/h3&gt;\n&lt;p&gt;Keep in mind that promises and deferred objects are just &lt;em&gt;containers&lt;/em&gt; for a future value, they are not the value itself. For example, suppose you had the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkPassword&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/password&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;username&lt;/span&gt;: $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#username&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(),\n            &lt;span class=&quot;hljs-attr&quot;&gt;password&lt;/span&gt;: $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#password&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;()\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;json&apos;&lt;/span&gt;\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;checkPassword&lt;/span&gt;()) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Tell the user they&apos;re logged in&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code misunderstands the above asynchronous issues. Specifically, &lt;code&gt;$.ajax()&lt;/code&gt; doesn&apos;t freeze the code while it checks the &apos;/password&apos; page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the &lt;code&gt;if&lt;/code&gt; statement is going to always get this Deferred object, treat it as &lt;code&gt;true&lt;/code&gt;, and proceed as though the user is logged in. Not good.&lt;/p&gt;\n&lt;p&gt;But the fix is easy:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;checkPassword&lt;/span&gt;()\n.&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (r) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Tell the user they&apos;re logged in&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Tell the user their password was bad&lt;/span&gt;\n    }\n})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;fail&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Tell the user something bad happened&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Not recommended: Synchronous &quot;Ajax&quot; calls&lt;/h2&gt;\n&lt;p&gt;As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don&apos;t advocate their use, but for completeness&apos; sake, here is how you would perform a synchronous call:&lt;/p&gt;\n&lt;h3&gt;Without jQuery&lt;/h3&gt;\n&lt;p&gt;If you directly use a &lt;a href=&quot;https://xhr.spec.whatwg.org/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; object, pass &lt;code&gt;false&lt;/code&gt; as third argument to &lt;a href=&quot;https://xhr.spec.whatwg.org/#the-open()-method&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.open&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;jQuery&lt;/h3&gt;\n&lt;p&gt;If you use &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot; rel=&quot;noreferrer&quot;&gt;jQuery&lt;/a&gt;, you can set the &lt;code&gt;async&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. Note that this option is &lt;em&gt;deprecated&lt;/em&gt; since jQuery 1.8.\nYou can then either still use a &lt;code&gt;success&lt;/code&gt; callback or access the &lt;code&gt;responseText&lt;/code&gt; property of the &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/#jqXHR&quot; rel=&quot;noreferrer&quot;&gt;jqXHR object&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jqXHR = $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jqXHR.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you use any other jQuery Ajax method, such as &lt;code&gt;$.get&lt;/code&gt;, &lt;code&gt;$.getJSON&lt;/code&gt;, etc., you have to change it to &lt;code&gt;$.ajax&lt;/code&gt; (since you can only pass configuration parameters to &lt;code&gt;$.ajax&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Heads up!&lt;/strong&gt; It is not possible to make a synchronous &lt;a href=&quot;https://stackoverflow.com/questions/2067472/please-explain-jsonp&quot;&gt;JSONP&lt;/a&gt; request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).&lt;/p&gt;\n    ","\n&lt;h1&gt;If you&apos;re &lt;em&gt;not&lt;/em&gt; using jQuery in your code, this answer is for you&lt;/h1&gt;\n&lt;p&gt;Your code should be something along the lines of this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; httpRequest = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    httpRequest.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;);\n    httpRequest.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; httpRequest.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Always ends up being &apos;undefined&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/14220323#14220323&quot;&gt;Felix Kling did a fine job&lt;/a&gt; writing an answer for people using jQuery for AJAX, but I&apos;ve decided to provide an alternative for people who aren&apos;t.&lt;/p&gt;\n&lt;p&gt;(&lt;a href=&quot;https://stackoverflow.com/a/30180679/1348195&quot;&gt;Note, for those using the new &lt;code&gt;fetch&lt;/code&gt; API, Angular or promises I&apos;ve added another answer below&lt;/a&gt;)&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;What you&apos;re facing&lt;/h1&gt;\n&lt;p&gt;This is a short summary of &quot;Explanation of the problem&quot; from the other answer, if you&apos;re not sure after reading this, read that.&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;A&lt;/strong&gt; in AJAX stands for &lt;strong&gt;asynchronous&lt;/strong&gt;. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send%28%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.send&lt;/code&gt;&lt;/a&gt; returns immediately and the next statement, &lt;code&gt;return result;&lt;/code&gt;, is executed before the function you passed as &lt;code&gt;success&lt;/code&gt; callback was even called.&lt;/p&gt;\n&lt;p&gt;This means when you&apos;re returning, the listener you&apos;ve defined did not execute yet, which means the value you&apos;re returning has not been defined.&lt;/p&gt;\n&lt;p&gt;Here is a simple analogy:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n         a=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    },&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/7RK3k/&quot; rel=&quot;noreferrer&quot;&gt;(Fiddle)&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The value of &lt;code&gt;a&lt;/code&gt; returned is &lt;code&gt;undefined&lt;/code&gt; since the &lt;code&gt;a=5&lt;/code&gt; part has not executed yet. AJAX acts like this, you&apos;re returning the value before the server got the chance to tell your browser what that value is.&lt;/p&gt;\n&lt;p&gt;One possible solution to this problem is to code &lt;em&gt;re-actively&lt;/em&gt; , telling your program what to do when the calculation completed.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onComplete&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// When the code completes, do this&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(a);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;whenDone&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n         a=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n         &lt;span class=&quot;hljs-title function_&quot;&gt;whenDone&lt;/span&gt;(a);\n    },&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot; rel=&quot;noreferrer&quot;&gt;CPS&lt;/a&gt;. Basically, we&apos;re passing &lt;code&gt;getFive&lt;/code&gt; an action to perform when it completes, we&apos;re telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).&lt;/p&gt;\n&lt;p&gt;Usage would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;(onComplete);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which should alert &quot;5&quot; to the screen. &lt;a href=&quot;http://jsfiddle.net/PAjZR/&quot; rel=&quot;noreferrer&quot;&gt;(Fiddle)&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;Possible solutions&lt;/h1&gt;\n&lt;p&gt;There are basically two ways how to solve this:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Make the AJAX call synchronous (lets call it SJAX).&lt;/li&gt;\n&lt;li&gt;Restructure your code to work properly with callbacks.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;1. Synchronous AJAX - Don&apos;t do it!!&lt;/h2&gt;\n&lt;p&gt;As for synchronous AJAX, &lt;strong&gt;don&apos;t do it!&lt;/strong&gt; Felix&apos;s answer raises some compelling arguments about why it&apos;s a bad idea. To sum it up, it&apos;ll freeze the user&apos;s browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.&lt;/p&gt;\n&lt;p&gt;In short, synchronous requests block the execution of code... ...this can cause serious issues...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If you &lt;em&gt;have&lt;/em&gt; to do it, you can pass a flag. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests#Synchronous_request&quot; rel=&quot;noreferrer&quot;&gt;Here is how&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\nrequest.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yourURL&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// `false` makes the request synchronous&lt;/span&gt;\nrequest.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {&lt;span class=&quot;hljs-comment&quot;&gt;// That&apos;s HTTP for &apos;ok&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(request.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2. Restructure code&lt;/h2&gt;\n&lt;p&gt;Let your function accept a callback. In the example code &lt;code&gt;foo&lt;/code&gt; can be made to accept a callback. We&apos;ll be telling our code how to &lt;em&gt;react&lt;/em&gt; when &lt;code&gt;foo&lt;/code&gt; completes.&lt;/p&gt;\n&lt;p&gt;So:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Code that depends on `result` goes here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Becomes:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code that depends on `result`&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code that depends on `result`&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(myHandler);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more details on how this sort of callback design is done, check Felix&apos;s answer.&lt;/p&gt;\n&lt;p&gt;Now, let&apos;s define foo itself to act accordingly&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; httpRequest = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    httpRequest.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// When the request is loaded&lt;/span&gt;\n       &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(httpRequest.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;// We&apos;re calling our method&lt;/span&gt;\n    };\n    httpRequest.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;);\n    httpRequest.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/DAcWT/&quot; rel=&quot;noreferrer&quot;&gt;(fiddle)&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;We have now made our &lt;em&gt;foo&lt;/em&gt; function accept an action to run when the AJAX completes successfully. We can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively it is solving our issue.&lt;/p&gt;\n&lt;p&gt;If you&apos;re still having a hard time understanding this, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; rel=&quot;noreferrer&quot;&gt;read the AJAX getting started guide&lt;/a&gt; at MDN.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest&lt;/a&gt; 2&lt;/strong&gt; (first of all, read the answers from &lt;a href=&quot;https://stackoverflow.com/a/16825593/19068&quot;&gt;Benjamin Gruenbaum&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/14220323/19068&quot;&gt;Felix Kling&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;If you don&apos;t use jQuery and want a nice short XMLHttpRequest 2 which works in the modern browsers and also in the mobile browsers, I suggest to use it this way:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, c&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// URL, callback, just a placeholder&lt;/span&gt;\n  c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, a);\n  c.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = b;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;It&apos;s shorter than all other functions Listed.&lt;/li&gt;\n&lt;li&gt;The callback is set directly (so no extra unnecessary closures).&lt;/li&gt;\n&lt;li&gt;It uses the new onload (so you don&apos;t have to check for readystate &amp;amp;&amp;amp; status)&lt;/li&gt;\n&lt;li&gt;There are some other situations, which I don&apos;t remember, that make the XMLHttpRequest 1 annoying.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;There are two ways to get the response of this Ajax call (three using the XMLHttpRequest var name):&lt;/p&gt;\n&lt;p&gt;The simplest:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or if for some reason you &lt;code&gt;bind()&lt;/code&gt; the callback to a class:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL&apos;&lt;/span&gt;, callback);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or (the above one is better anonymous functions are always a problem):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt;)});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Nothing easier.&lt;/p&gt;\n&lt;p&gt;Now some people will probably say that it&apos;s better to use onreadystatechange or the even the XMLHttpRequest variable name. That&apos;s wrong.&lt;/p&gt;\n&lt;p&gt;Check out &lt;a href=&quot;http://caniuse.com/xhr2&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest advanced features&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;It supported all *modern browsers. And I can confirm as I have been using this approach since XMLHttpRequest 2 was created. I never had any type of problem in any browsers I used.&lt;/p&gt;\n&lt;p&gt;onreadystatechange is only useful if you want to get the headers on state 2.&lt;/p&gt;\n&lt;p&gt;Using the &lt;code&gt;XMLHttpRequest&lt;/code&gt; variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures, or else you lost it.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Now if you want something more complex using &lt;a href=&quot;https://en.wikipedia.org/wiki/POST_%28HTTP%29&quot; rel=&quot;noreferrer&quot;&gt;POST&lt;/a&gt; and FormData you can easily extend this function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, e, d, c&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// URL, callback, method, formdata or {key:val},placeholder&lt;/span&gt;\n  c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(e||&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;, a);\n  c.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = b;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(d||&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again ... it&apos;s a very short function, but it does &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot; rel=&quot;noreferrer&quot;&gt;GET&lt;/a&gt; and POST.&lt;/p&gt;\n&lt;p&gt;Examples of usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(url, callback); &lt;span class=&quot;hljs-comment&quot;&gt;// By default it&apos;s GET so no need to set&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(url, callback, &lt;span class=&quot;hljs-string&quot;&gt;&apos;post&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;}); &lt;span class=&quot;hljs-comment&quot;&gt;// No need to set POST data&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or pass a full form element (&lt;code&gt;document.getElementsByTagName(&apos;form&apos;)[0]&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;(form);\n&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(url, callback, &lt;span class=&quot;hljs-string&quot;&gt;&apos;post&apos;&lt;/span&gt;, fd);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or set some custom values:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\nfd.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(url, callback, &lt;span class=&quot;hljs-string&quot;&gt;&apos;post&apos;&lt;/span&gt;, fd);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, I didn&apos;t implement sync... it&apos;s a bad thing.&lt;/p&gt;\n&lt;p&gt;Having said that ... why don&apos;t we do it the easy way?&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;As mentioned in the comment, the use of error &amp;amp;&amp;amp; synchronous does completely break the point of the answer. Which is a nice short way to use Ajax in the proper way?&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Error handler&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, e, d, c&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// URL, callback, method, formdata or {key:val}, placeholder&lt;/span&gt;\n  c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(e||&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;, a);\n  c.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = b;\n  c.&lt;span class=&quot;hljs-property&quot;&gt;onerror&lt;/span&gt; = error;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(d||&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;--Error--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;this: &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Event: &apos;&lt;/span&gt;, e)\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;displayAjax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;WRONGURL&apos;&lt;/span&gt;, displayAjax);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the above script, you have an error handler which is statically defined, so it does not compromise the function. The error handler can be used for other functions too.&lt;/p&gt;\n&lt;p&gt;But to really get out an error, the &lt;strong&gt;only&lt;/strong&gt; way is to write a wrong URL in which case every browser throws an error.&lt;/p&gt;\n&lt;p&gt;Error handlers are maybe useful if you set custom headers, set the responseType to blob array buffer, or whatever...&lt;/p&gt;\n&lt;p&gt;Even if you pass &apos;POSTAPAPAP&apos; as the method it won&apos;t throw an error.&lt;/p&gt;\n&lt;p&gt;Even if you pass &apos;fdggdgilfdghfldj&apos; as formdata it won&apos;t throw an error.&lt;/p&gt;\n&lt;p&gt;In the first case the error is inside the &lt;code&gt;displayAjax()&lt;/code&gt; under &lt;code&gt;this.statusText&lt;/code&gt; as &lt;code&gt;Method not Allowed&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In the second case, it simply works. You have to check at the server side if you passed the right post data.&lt;/p&gt;\n&lt;p&gt;Cross-domain not allowed throws an error automatically.&lt;/p&gt;\n&lt;p&gt;In the error response, there aren&apos;t any error codes.&lt;/p&gt;\n&lt;p&gt;There is only the &lt;code&gt;this.type&lt;/code&gt; which is set to &lt;em&gt;error&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Why add an error handler if you totally don&apos;t have any control over errors?\nMost of the errors are returned inside this in the callback function &lt;code&gt;displayAjax()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So: There isn&apos;t any need for error checks if you&apos;re able to copy and paste the URL properly. ;)&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;PS: As the first test I wrote x(&apos;x&apos;, displayAjax)..., and it totally got a response...??? So I checked the folder where the HTML is located, and there was a file called &apos;x.xml&apos;. So even if you forget the extension of your file XMLHttpRequest 2 WILL FIND IT&lt;/em&gt;. I LOL&apos;d&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Read a file synchronous&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Don&apos;t do that.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you want to block the browser for a while load a nice big &lt;code&gt;.txt&lt;/code&gt; file synchronous.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;omg&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, c&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// URL&lt;/span&gt;\n  c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;;\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, a, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n  c.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c; &lt;span class=&quot;hljs-comment&quot;&gt;// Or c.response&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now you can do&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = &lt;span class=&quot;hljs-title function_&quot;&gt;omg&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;thisIsGonnaBlockThePage.txt&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is no other way to do this in a non-asynchronous way. (Yeah, with setTimeout loop... but seriously?)&lt;/p&gt;\n&lt;p&gt;Another point is... if you work with APIs or just your own list&apos;s files or whatever you always use different functions for each request...&lt;/p&gt;\n&lt;p&gt;Only if you have a page where you load always the same XML/JSON or whatever you need only one function. In that case, modify a little the Ajax function and replace b with your special function.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The functions above are for basic use.&lt;/p&gt;\n&lt;p&gt;If you want to &lt;em&gt;extend&lt;/em&gt; the function...&lt;/p&gt;\n&lt;p&gt;Yes, you can.&lt;/p&gt;\n&lt;p&gt;I&apos;m using a lot of APIs and one of the first functions I integrate into every HTML page is the first Ajax function in this answer, with GET only...&lt;/p&gt;\n&lt;p&gt;But you can do a lot of stuff with XMLHttpRequest 2:&lt;/p&gt;\n&lt;p&gt;I made a download manager (using ranges on both sides with resume, filereader, and filesystem), various image resizers converters using canvas, populate web SQL databases with base64images and much more...&lt;/p&gt;\n&lt;p&gt;But in these cases you should create a function only for that purpose... sometimes you need a blob, array buffers, you can set headers, override mimetype and there is a lot more...&lt;/p&gt;\n&lt;p&gt;But the question here is how to return an Ajax response... (I added an easy way.)&lt;/p&gt;\n    ","\n&lt;h2&gt;If you&apos;re using promises, this answer is for you.&lt;/h2&gt;\n&lt;p&gt;This means AngularJS, jQuery (with deferred), native &lt;a href=&quot;https://en.wikipedia.org/wiki/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XHR&lt;/a&gt;&apos;s replacement (fetch), &lt;a href=&quot;https://en.wikipedia.org/wiki/Ember.js&quot; rel=&quot;noreferrer&quot;&gt;Ember.js&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Backbone.js&quot; rel=&quot;noreferrer&quot;&gt;Backbone.js&lt;/a&gt;&apos;s save or any &lt;a href=&quot;https://en.wikipedia.org/wiki/Node.js&quot; rel=&quot;noreferrer&quot;&gt;Node.js&lt;/a&gt; library that returns promises.&lt;/p&gt;\n&lt;p&gt;Your code should be something along the lines of this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Or $.get(...).then, or request(...).then, or query(...).then&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n        data = response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;result&apos; is always undefined no matter what.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/14220323#14220323&quot;&gt;Felix Kling did a fine job&lt;/a&gt; writing an answer for people using jQuery with callbacks for Ajax. I have an answer for native XHR. This answer is for generic usage of promises either on the frontend or backend.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;The core issue&lt;/h2&gt;\n&lt;p&gt;The JavaScript concurrency model in the browser and on the server with Node.js/io.js is &lt;em&gt;asynchronous&lt;/em&gt; and &lt;em&gt;reactive&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Whenever you call a method that returns a promise, the &lt;code&gt;then&lt;/code&gt; handlers are &lt;em&gt;always&lt;/em&gt; executed asynchronously - that is, &lt;strong&gt;after&lt;/strong&gt; the code below them that is not in a &lt;code&gt;.then&lt;/code&gt; handler.&lt;/p&gt;\n&lt;p&gt;This means when you&apos;re returning &lt;code&gt;data&lt;/code&gt; the &lt;code&gt;then&lt;/code&gt; handler you&apos;ve defined did not execute yet. This in turn means that the value you&apos;re returning has not been set to the correct value in time.&lt;/p&gt;\n&lt;p&gt;Here is a simple analogy for the issue:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// Set a timer for one second in the future&lt;/span&gt;\n           data = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// After a second, do this&lt;/span&gt;\n        }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data;\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// `undefined` here and not 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The value of &lt;code&gt;data&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; since the &lt;code&gt;data = 5&lt;/code&gt; part has not executed yet. It will likely execute in a second, but by that time it is irrelevant to the returned value.&lt;/p&gt;\n&lt;p&gt;Since the operation did not happen yet (Ajax, server call, I/O, and timer) you&apos;re returning the value before the request got the chance to tell your code what that value is.&lt;/p&gt;\n&lt;p&gt;One possible solution to this problem is to code &lt;em&gt;re-actively&lt;/em&gt;, telling your program what to do when the calculation completed. Promises actively enable this by being temporal (time-sensitive) in nature.&lt;/p&gt;\n&lt;h3&gt;Quick recap on promises&lt;/h3&gt;\n&lt;p&gt;A Promise is a &lt;em&gt;value over time&lt;/em&gt;. Promises have state. They start as pending with no value and can settle to:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;fulfilled&lt;/strong&gt; meaning that the computation completed successfully.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;rejected&lt;/strong&gt; meaning that the computation failed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;A promise can only change states &lt;em&gt;once&lt;/em&gt; after which it will always stay at the same state forever. You can attach &lt;code&gt;then&lt;/code&gt; handlers to promises to extract their value and handle errors. &lt;code&gt;then&lt;/code&gt; handlers allow &lt;a href=&quot;https://stackoverflow.com/questions/22539815/arent-promises-just-callbacks&quot;&gt;chaining&lt;/a&gt; of calls. Promises are created by &lt;a href=&quot;https://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises&quot;&gt;using APIs that return them&lt;/a&gt;. For example, the more modern Ajax replacement &lt;code&gt;fetch&lt;/code&gt; or jQuery&apos;s &lt;code&gt;$.get&lt;/code&gt; return promises.&lt;/p&gt;\n&lt;p&gt;When we call &lt;code&gt;.then&lt;/code&gt; on a promise and &lt;em&gt;return&lt;/em&gt; something from it - we get a promise for &lt;em&gt;the processed value&lt;/em&gt;. If we return another promise we&apos;ll get amazing things, but let&apos;s hold our horses.&lt;/p&gt;\n&lt;h3&gt;With promises&lt;/h3&gt;\n&lt;p&gt;Let&apos;s see how we can solve the above issue with promises. First, let&apos;s demonstrate our understanding of promise states from above by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise constructor&lt;/a&gt; for creating a delay function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ms&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// Takes amount of milliseconds&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Returns a new promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;){\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// When the time is up,&lt;/span&gt;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// change the promise to the fulfilled state&lt;/span&gt;\n        }, ms);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, after we &lt;a href=&quot;http://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises&quot;&gt;converted setTimeout&lt;/a&gt; to use promises, we can use &lt;code&gt;then&lt;/code&gt; to make it count:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ms&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// Takes amount of milliseconds&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Returns a new promise&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;){\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// When the time is up,&lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// change the promise to the fulfilled state&lt;/span&gt;\n    }, ms);\n  });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// We&apos;re RETURNING the promise. Remember, a promise is a wrapper over our value&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// When the promise is ready,&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// return the value 5. Promises are all about return values&lt;/span&gt;\n  })\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// We _have_ to wrap it like this in the call site, and we can&apos;t access the plain value&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getFive&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;five&lt;/span&gt;){\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = five;\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Basically, instead of returning a &lt;em&gt;value&lt;/em&gt; which we can&apos;t do because of the concurrency model - we&apos;re returning a &lt;em&gt;wrapper&lt;/em&gt; for a value that we can &lt;em&gt;unwrap&lt;/em&gt; with &lt;code&gt;then&lt;/code&gt;. It&apos;s like a box you can open with &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;\n&lt;h3&gt;Applying this&lt;/h3&gt;\n&lt;p&gt;This stands the same for your original API call, you can:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RETURN the promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Process it inside the `then`&lt;/span&gt;\n    });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Access the value inside the `then`&lt;/span&gt;\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So this works just as well. We&apos;ve learned we can&apos;t return values from already asynchronous calls, but we can use promises and chain them to perform processing. We now know how to return the response from an asynchronous call.&lt;/p&gt;\n&lt;h2&gt;ES2015 (ES6)&lt;/h2&gt;\n&lt;p&gt;ES6 introduces &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot; rel=&quot;noreferrer&quot;&gt;generators&lt;/a&gt; which are functions that can return in the middle and then resume the point they were at. This is typically useful for sequences, for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// Notice the star. This is ES6, so new browsers, Nodes.js, and io.js only&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is a function that returns an &lt;em&gt;iterator&lt;/em&gt; over the sequence &lt;code&gt;1,2,3,3,3,3,....&lt;/code&gt; which can be iterated. While this is interesting on its own and opens room for a lot of possibility, there is one particular interesting case.&lt;/p&gt;\n&lt;p&gt;If the sequence we&apos;re producing is a sequence of actions rather than numbers - we can pause the function whenever an action is yielded and wait for it before we resume the function. So instead of a sequence of numbers, we need a sequence of &lt;em&gt;future&lt;/em&gt; values - that is: promises.&lt;/p&gt;\n&lt;p&gt;This somewhat a tricky, but very powerful trick lets us write asynchronous code in a synchronous manner. There are several &quot;runners&quot; that do this for you. Writing one is a short few lines of code, but it is beyond the scope of this answer. I&apos;ll be using Bluebird&apos;s &lt;code&gt;Promise.coroutine&lt;/code&gt; here, but there are other wrappers like &lt;code&gt;co&lt;/code&gt; or &lt;code&gt;Q.async&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-title function_&quot;&gt;coroutine&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;*(){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Notice the yield&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The code here only executes _after_ the request is done&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;data&apos; is defined&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method returns a promise itself, which we can consume from other coroutines. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; main = &lt;span class=&quot;hljs-title function_&quot;&gt;coroutine&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;*(){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Wait our earlier coroutine. It returns a promise&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// The server call is done here, and the code below executes when done&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; baz = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/users/&quot;&lt;/span&gt; + bar.&lt;span class=&quot;hljs-property&quot;&gt;userid&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Depends on foo&apos;s result&lt;/span&gt;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(baz); &lt;span class=&quot;hljs-comment&quot;&gt;// Runs after both requests are done&lt;/span&gt;\n});\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;ES2016 (ES7)&lt;/h2&gt;\n&lt;p&gt;In ES7, this is further standardized. There are several proposals right now, but in all of them you can &lt;code&gt;await&lt;/code&gt; promise. This is just &quot;sugar&quot; (nicer syntax) for the ES6 proposal above by adding the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords. Making the above example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Notice the await&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code here only executes _after_ the request is done&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;data&apos; is defined&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It still returns a promise just the same :)&lt;/p&gt;\n    ","\n&lt;p&gt;You are using Ajax incorrectly. The idea is not to have it return anything, but instead hand off the data to something called a callback function, which handles the data.&lt;/p&gt;\n\n&lt;p&gt;That is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; responseData &lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do what you want with the data&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(responseData);\n}\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi.php&quot;&lt;/span&gt;,\n    ...\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt; data, status, XHR &lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;handleData&lt;/span&gt;(data);\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returning anything in the submit handler will not do anything. You must instead either hand off the data, or do what you want with it directly inside the success function.&lt;/p&gt;\n    ","\n&lt;p&gt;I will answer with a horrible-looking, hand-drawn comic. The second image is the reason why &lt;code&gt;result&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; in your code example.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/v5ksbBC.jpg&quot;&gt;&lt;img src=&quot;https://i.imgur.com/v5ksbBC.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The simplest solution is to create a JavaScript function and call it for the Ajax &lt;code&gt;success&lt;/code&gt; callback.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callServerAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n\n            &lt;span class=&quot;hljs-title function_&quot;&gt;successCallback&lt;/span&gt;(response);\n        }\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;successCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;responseObj&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something like read the response and show data&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(responseObj)); &lt;span class=&quot;hljs-comment&quot;&gt;// Only applicable to a JSON response&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, response);\n        }\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;){\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!err)\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Angular 1&lt;/h2&gt;\n&lt;p&gt;People who are using &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot; rel=&quot;noreferrer&quot;&gt;AngularJS&lt;/a&gt;, can handle this situation using &lt;em&gt;promises&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://liamkaufman.com/blog/2013/09/09/using-angularjs-promises/&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt; it says,&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Promises can be used to unnest asynchronous functions and allows one to chain multiple functions together.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;You can find a nice explanation &lt;a href=&quot;http://andyshora.com/promises-angularjs-explained-as-cartoon.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; also.&lt;/p&gt;\n&lt;p&gt;An example found in &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$q&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; mentioned below.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  promiseB = promiseA.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSuccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    ,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onError&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Handle error&lt;/span&gt;\n    }\n  );\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// promiseB will be resolved immediately after promiseA is resolved&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;// and its value will be the result of promiseA incremented by 1.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Angular 2 and later&lt;/h2&gt;\n&lt;p&gt;In Angular 2 with look at the following example, but its &lt;a href=&quot;https://angular-2-training-book.rangle.io/handout/observables/observables_vs_promises.html&quot; rel=&quot;noreferrer&quot;&gt;recommended&lt;/a&gt; to use &lt;em&gt;observables&lt;/em&gt; with Angular 2.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;search&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;term: string&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;http&lt;/span&gt;\n       .&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`https://api.spotify.com/v1/search?q=&lt;span class=&quot;hljs-subst&quot;&gt;${term}&lt;/span&gt;&amp;amp;type=artist`&lt;/span&gt;)\n       .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())\n       .&lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can consume that in this way,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;search&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;searchService&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;search&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;searchField&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;)\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;result&lt;/span&gt; = result.&lt;span class=&quot;hljs-property&quot;&gt;artists&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;;\n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(error));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See the &lt;a href=&quot;https://angular-2-training-book.rangle.io/handout/http/requests_as_promises.html&quot; rel=&quot;noreferrer&quot;&gt;original&lt;/a&gt; post here. But TypeScript does not support &lt;a href=&quot;http://www.datchley.name/es6-promises/&quot; rel=&quot;noreferrer&quot;&gt;native ES6 Promises&lt;/a&gt;, if you want to use it, you might need plugin for that.&lt;/p&gt;\n&lt;p&gt;Additionally, here is the &lt;a href=&quot;https://github.com/promises-aplus/promises-spec&quot; rel=&quot;noreferrer&quot;&gt;promises specification&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Most of the answers here give useful suggestions for when you have a single async operation, but sometimes, this comes up when you need to do an asynchronous operation for &lt;em&gt;each&lt;/em&gt; entry in an array or other list-like structure. The temptation is to do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\ntheArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n    });\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(results); &lt;span class=&quot;hljs-comment&quot;&gt;// E.g., using them, returning them, etc.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; theArray = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\ntheArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n    });\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results); &lt;span class=&quot;hljs-comment&quot;&gt;// E.g., using them, returning them, etc.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The reason that doesn&apos;t work is that the callbacks from &lt;code&gt;doSomethingAsync&lt;/code&gt; haven&apos;t run yet by the time you&apos;re trying to use the results.&lt;/p&gt;\n&lt;p&gt;So, if you have an array (or list of some kind) and want to do async operations for each entry, you have two options: Do the operations in parallel (overlapping), or in series (one after another in sequence).&lt;/p&gt;\n&lt;h3&gt;Parallel&lt;/h3&gt;\n&lt;p&gt;You can start all of them and keep track of how many callbacks you&apos;re expecting, and then use the results when you&apos;ve gotten that many callbacks:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expecting = theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\ntheArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry, index&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        results[index] = result;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--expecting === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results); &lt;span class=&quot;hljs-comment&quot;&gt;// E.g., using the results&lt;/span&gt;\n        }\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; theArray = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expecting = theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\ntheArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry, index&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        results[index] = result;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--expecting === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results)); &lt;span class=&quot;hljs-comment&quot;&gt;// E.g., using the results&lt;/span&gt;\n        }\n    });\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(We could do away with &lt;code&gt;expecting&lt;/code&gt; and just use &lt;code&gt;results.length === theArray.length&lt;/code&gt;, but that leaves us open to the possibility that &lt;code&gt;theArray&lt;/code&gt; is changed while the calls are outstanding...)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Notice how we use the &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;forEach&lt;/code&gt; to save the result in &lt;code&gt;results&lt;/code&gt; in the same position as the entry it relates to, even if the results arrive out of order (since async calls don&apos;t necessarily complete in the order in which they were started).&lt;/p&gt;\n&lt;p&gt;But what if you need to &lt;em&gt;return&lt;/em&gt; those results from a function? As the other answers have pointed out, you can&apos;t; you have to have your function accept and call a callback (or return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise&lt;/a&gt;). Here&apos;s a callback version:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expecting = theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry, index&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n            results[index] = result;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--expecting === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(results);\n            }\n        });\n    });\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expecting = theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry, index&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n            results[index] = result;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--expecting === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(results);\n            }\n        });\n    });\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Or here&apos;s a version returning a &lt;code&gt;Promise&lt;/code&gt; instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expecting = theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n        theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry, index&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n                results[index] = result;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--expecting === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(results);\n                }\n            });\n        });\n    });\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Of course, if &lt;code&gt;doSomethingAsync&lt;/code&gt; passed us errors, we&apos;d use &lt;code&gt;reject&lt;/code&gt; to reject the promise when we got an error.)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expecting = theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n        theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry, index&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n                results[index] = result;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--expecting === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(results);\n                }\n            });\n        });\n    });\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(Or alternately, you could make a wrapper for &lt;code&gt;doSomethingAsync&lt;/code&gt; that returns a promise, and then do the below...)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;doSomethingAsync&lt;/code&gt; gives you a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise&lt;/a&gt;, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entry&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry);\n    }));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you know that &lt;code&gt;doSomethingAsync&lt;/code&gt; will ignore a second and third argument, you can just pass it directly to &lt;code&gt;map&lt;/code&gt; (&lt;code&gt;map&lt;/code&gt; calls its callback with three arguments, but most people only use the first most of the time):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(doSomethingAsync));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(doSomethingAsync));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n    });\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Note that &lt;code&gt;Promise.all&lt;/code&gt; resolves its promise with an array of the results of all of the promises you give it when they are all resolved, or rejects its promise when the &lt;em&gt;first&lt;/em&gt; of the promises you give it rejects.&lt;/p&gt;\n&lt;h3&gt;Series&lt;/h3&gt;\n&lt;p&gt;Suppose you don&apos;t want the operations to be in parallel? If you want to run them one after another, you need to wait for each operation to complete before you start the next. Here&apos;s an example of a function that does that and calls a callback with the result:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doOne&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doOne&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(theArray[index], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n                results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;doOne&lt;/span&gt;(index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            });\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(results);\n        }\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;(Since we&apos;re doing the work in series, we can just use &lt;code&gt;results.push(result)&lt;/code&gt; since we know we won&apos;t get results out of order. In the above we could have used &lt;code&gt;results[index] = result;&lt;/code&gt;, but in some of the following examples we don&apos;t have an index to use.)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doOne&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doOne&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; theArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(theArray[index], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n                results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;doOne&lt;/span&gt;(index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            });\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Done!&lt;/span&gt;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(results);\n        }\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(Or, again, build a wrapper for &lt;code&gt;doSomethingAsync&lt;/code&gt; that gives you a promise and do the below...)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;doSomethingAsync&lt;/code&gt; gives you a Promise, if you can use ES2017+ syntax (perhaps with a transpiler like &lt;a href=&quot;http://babeljs.io&quot; rel=&quot;noreferrer&quot;&gt;Babel&lt;/a&gt;), you can use an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;async&lt;/code&gt; function&lt;/a&gt; with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;for-of&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; results = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; theArray) {\n        results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; results = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; theArray) {\n        results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n    });\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If you can&apos;t use ES2017+ syntax (yet), you can use a variation on the &lt;a href=&quot;https://stackoverflow.com/questions/43433643/javascript-how-do-i-reduce-multiple-promise-all&quot;&gt;&quot;Promise reduce&quot; pattern&lt;/a&gt; (this is more complex than the usual Promise reduce because we&apos;re not passing the result from one into the next, but instead gathering up their results in an array):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, entry&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n                results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n            });\n        });\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([]));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, entry&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n                results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n            });\n        });\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([]));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n    });\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;...which is less cumbersome with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;ES2015+ arrow functions&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, entry&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n    })), &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([]));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(theArray).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, results);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;theArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; theArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, entry&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(entry).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(result);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n    })), &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([]));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingWith&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Results:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results));\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting async operation for &quot;&lt;/span&gt; + value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completing async operation for &quot;&lt;/span&gt; + value);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(value * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n    });\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Have a look at this example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = angular.&lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;plunker&apos;&lt;/span&gt;, []);\n\napp.&lt;span class=&quot;hljs-title function_&quot;&gt;controller&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MainCtrl&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;$scope,$http&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getJoke = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $http.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://api.icndb.com/jokes/random&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;;  \n        });\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getJoke&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(res.&lt;span class=&quot;hljs-property&quot;&gt;joke&lt;/span&gt;);\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see &lt;code&gt;getJoke&lt;/code&gt; is &lt;strong&gt;returning a&lt;/strong&gt; resolved &lt;strong&gt;promise&lt;/strong&gt; (it is resolved when returning &lt;code&gt;res.data.value&lt;/code&gt;). So you wait until the &lt;strong&gt;$http.get&lt;/strong&gt; request is completed and then &lt;strong&gt;console.log(res.joke)&lt;/strong&gt; is executed (as a normal asynchronous flow).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;This is the plnkr:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://embed.plnkr.co/XlNR7HpCaIhJxskMJfSg/&quot; rel=&quot;noreferrer&quot;&gt;http://embed.plnkr.co/XlNR7HpCaIhJxskMJfSg/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;ES6 way (async - await)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getJoke&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://api.icndb.com/jokes/random&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;getJoke&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;joke&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(joke);\n  });\n})();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is one of the places which &lt;strong&gt;two-way data binding&lt;/strong&gt; or &lt;strong&gt;store concept&lt;/strong&gt; that&apos;s used in many new JavaScript frameworks will work great for you...&lt;/p&gt;\n&lt;p&gt;So if you are using &lt;a href=&quot;https://en.wikipedia.org/wiki/Angular_(web_framework)&quot; rel=&quot;noreferrer&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/React_(web_framework)&quot; rel=&quot;noreferrer&quot;&gt;React&lt;/a&gt;, or any other frameworks which do two-way data binding or store concept, this issue is simply fixed for you, so in easy words, your result is &lt;code&gt;undefined&lt;/code&gt; at the first stage, so you have got &lt;code&gt;result = undefined&lt;/code&gt; before you receive the data, then as soon as you get the result, it will be updated and get assigned to the new value which response of your Ajax call...&lt;/p&gt;\n&lt;p&gt;But how you can do it in pure JavaScript or jQuery for example as you asked in this question?&lt;/p&gt;\n&lt;p&gt;You can use a callback, promise and recently observable to handle it for you. For example, in promises we have some function like &lt;code&gt;success()&lt;/code&gt; or &lt;code&gt;then()&lt;/code&gt; which will be executed when your data is ready for you. The same with callback or the &lt;em&gt;subscribe&lt;/em&gt; function on an observable.&lt;/p&gt;\n&lt;p&gt;For example, in your case which you are using jQuery, you can do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;api/data&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n            &lt;span class=&quot;hljs-title function_&quot;&gt;fooDone&lt;/span&gt;(data); &lt;span class=&quot;hljs-comment&quot;&gt;// After we have data, we pass it to fooDone&lt;/span&gt;\n        }});\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fooDone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data); &lt;span class=&quot;hljs-comment&quot;&gt;// fooDone has the data and console.log it&lt;/span&gt;\n    };\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// The call happens here&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more information, study promises and observables which are newer ways to do this async stuff.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a very common issue we face while struggling with the &apos;mysteries&apos; of JavaScript. Let me try demystifying this mystery today.&lt;/p&gt;\n&lt;p&gt;Let&apos;s start with a simple JavaScript function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;wohoo&apos;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bar = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;bar&apos; is &apos;wohoo&apos; here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s a simple synchronous function call (where each line of code is &apos;finished with its job&apos; before the next one in sequence), and the result is same as expected.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s add a bit of twist, by introducing a little delay in our function, so that all lines of code are not &apos;finished&apos; in sequence. Thus, it will emulate the asynchronous behavior of the function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;wohoo&apos;&lt;/span&gt;;\n   }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bar = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;bar&apos; is undefined here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So there you go; that delay just broke the functionality we expected! But what exactly happened? Well, it&apos;s actually pretty logical if you look at the code.&lt;/p&gt;\n&lt;p&gt;The function &lt;code&gt;foo()&lt;/code&gt;, upon execution, returns nothing (thus returned value is &lt;code&gt;undefined&lt;/code&gt;), but it does start a timer, which executes a function after 1 second to return &apos;wohoo&apos;. But as you can see, the value that&apos;s assigned to bar is the immediately returned stuff from foo(), which is nothing, i.e., just &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;So, how do we tackle this issue?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s ask our function for a &lt;em&gt;promise&lt;/em&gt;.\nPromise is really about what it means: it means that the function guarantees you to provide with any output it gets in future. So let&apos;s see it in action for our little problem above:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// I want foo() to PROMISE me something&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Promise is RESOLVED, when the execution reaches this line of code&lt;/span&gt;\n       &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;wohoo&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// After 1 second, RESOLVE the promise with value &apos;wohoo&apos;&lt;/span&gt;\n    }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; )\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bar;\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    bar = res;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(bar) &lt;span class=&quot;hljs-comment&quot;&gt;// Will print &apos;wohoo&apos;&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Thus, the summary is - to tackle the asynchronous functions like Ajax-based calls, etc., you can use a promise to &lt;code&gt;resolve&lt;/code&gt; the value (which you intend to return). Thus, in short you &lt;strong&gt;resolve&lt;/strong&gt; value instead of &lt;strong&gt;returning&lt;/strong&gt;, in asynchronous functions.&lt;/p&gt;\n&lt;h2&gt;UPDATE (Promises with async/await)&lt;/h2&gt;\n&lt;p&gt;Apart from using &lt;code&gt;then/catch&lt;/code&gt; to work with promises, there exists one more approach. The idea is to &lt;em&gt;recognize an asynchronous function&lt;/em&gt; and then &lt;em&gt;wait for the promises&lt;/em&gt; to resolve, before moving to the next line of code. It&apos;s still just the &lt;code&gt;promises&lt;/code&gt; under the hood, but with a different syntactical approach. To make things clearer, you can find a comparison below:&lt;/p&gt;\n&lt;h3&gt;then/catch version:&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;saveUsers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n     &lt;span class=&quot;hljs-title function_&quot;&gt;getUsers&lt;/span&gt;()\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;users&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n         &lt;span class=&quot;hljs-title function_&quot;&gt;saveSomewhere&lt;/span&gt;(users);\n      })\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n          &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err);\n       })\n }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;async/await version:&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;saveUsers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n     &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; users = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUsers&lt;/span&gt;()\n        &lt;span class=&quot;hljs-title function_&quot;&gt;saveSomewhere&lt;/span&gt;(users);\n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(err){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err);\n     }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another approach to return a value from an asynchronous function, is to pass in an object that will store the result from the asynchronous function.&lt;/p&gt;\n\n&lt;p&gt;Here is an example of the same:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;async&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This wires up result back to the caller&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; asyncTasks = [];\nasyncTasks.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_callback&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some asynchronous operation&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n            result.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt; = response;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;_callback&lt;/span&gt;();\n        }\n    });\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parallel&lt;/span&gt;(asyncTasks, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// result is available after performing asynchronous operation&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Done&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am using the &lt;code&gt;result&lt;/code&gt; object to store the value during the asynchronous operation. This allows the result be available even after the asynchronous job.&lt;/p&gt;\n\n&lt;p&gt;I use this approach a lot. I would be interested to know how well this approach works where wiring the result back through consecutive modules is involved.&lt;/p&gt;\n    ","\n&lt;p&gt;While promises and callbacks work fine in many situations, it is a pain in the rear to express something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!name) {\n  name = &lt;span class=&quot;hljs-title function_&quot;&gt;async1&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;async2&lt;/span&gt;(name);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;d end up going through &lt;code&gt;async1&lt;/code&gt;; check if &lt;code&gt;name&lt;/code&gt; is undefined or not and call the callback accordingly.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;async1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, callback&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(name)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;(callback)\n  }\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;async1&lt;/span&gt;(name, async2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While it is &lt;em&gt;okay&lt;/em&gt; in small examples it gets annoying when you have a lot of similar cases and error handling involved.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Fibers&lt;/code&gt; helps in solving the issue.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fiber&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fibers&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;async1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;container&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; current = &lt;span class=&quot;hljs-title class_&quot;&gt;Fiber&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result\n  &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    result = name\n    fiber.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;()\n  })\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Fiber&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;yield&lt;/span&gt;()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Fiber&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!name) {\n    name = &lt;span class=&quot;hljs-title function_&quot;&gt;async1&lt;/span&gt;()\n  }\n  &lt;span class=&quot;hljs-title function_&quot;&gt;async2&lt;/span&gt;(name)\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Make any number of async calls from here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can checkout the project &lt;a href=&quot;https://github.com/laverdet/node-fibers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The following example I have written shows how to&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Handle asynchronous HTTP calls;&lt;/li&gt;\n&lt;li&gt;Wait for response from each API call;&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot; rel=&quot;noreferrer&quot;&gt;Promise&lt;/a&gt; pattern;&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot; rel=&quot;noreferrer&quot;&gt;Promise.all&lt;/a&gt; pattern to join multiple HTTP calls;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This working example is self-contained. It will define a simple request object that uses the window &lt;code&gt;XMLHttpRequest&lt;/code&gt; object to make calls. It will define a simple function to wait for a bunch of promises to be completed.&lt;/p&gt;\n\n&lt;p&gt;Context. The example is querying the &lt;a href=&quot;https://developer.spotify.com/web-api/endpoint-reference/&quot; rel=&quot;noreferrer&quot;&gt;Spotify Web API&lt;/a&gt; endpoint in order to search for &lt;code&gt;playlist&lt;/code&gt; objects for a given set of query strings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[\n &lt;span class=&quot;hljs-string&quot;&gt;&quot;search?type=playlist&amp;amp;q=%22doom%20metal%22&quot;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&quot;search?type=playlist&amp;amp;q=Adele&quot;&lt;/span&gt;\n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For each item, a new Promise will fire a block - &lt;code&gt;ExecutionBlock&lt;/code&gt;, parse the result, schedule a new set of promises based on the result array, that is a list of Spotify &lt;code&gt;user&lt;/code&gt; objects and execute the new HTTP call within the &lt;code&gt;ExecutionProfileBlock&lt;/code&gt; asynchronously.&lt;/p&gt;\n\n&lt;p&gt;You can then see a nested Promise structure, that lets you spawn multiple and completely asynchronous nested HTTP calls, and join the results from each subset of calls through &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;\nRecent Spotify &lt;code&gt;search&lt;/code&gt; APIs will require an access token to be specified in the request headers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;-H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer {your access token}&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, you to run the following example you need to put your access token in the request headers:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; spotifyAccessToken = &lt;span class=&quot;hljs-string&quot;&gt;&quot;YourSpotifyAccessToken&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;console&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += s + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Simple XMLHttpRequest&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// based on https://davidwalsh.name/xmlhttprequest&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;SimpleRequest&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;call&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;what, response&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;XMLHttpRequest&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Mozilla, Safari, ...&lt;/span&gt;\n            request = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ActiveXObject&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Internet Explorer&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                request = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActiveXObject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Msxml2.XMLHTTP&apos;&lt;/span&gt;);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                  request = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActiveXObject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Microsoft.XMLHTTP&apos;&lt;/span&gt;);\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {}\n            }\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// State changes&lt;/span&gt;\n        request.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Done&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Complete&lt;/span&gt;\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;response&lt;/span&gt;(request.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;)\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;response&lt;/span&gt;();\n            }\n        }\n        request.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, what, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        request.&lt;span class=&quot;hljs-title function_&quot;&gt;setRequestHeader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bearer &quot;&lt;/span&gt; + spotifyAccessToken);\n        request.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//PromiseAll&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; promiseAll = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items, block, done, fail&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; promises = [],\n                   index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    items.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n        promises.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, i&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (block) {\n                    block.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, [item, index, resolve, reject]);\n                }\n            });\n        }(item, ++index))\n    });\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(promises).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AcceptHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (done) &lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(results);\n    }, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ErrorHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fail) &lt;span class=&quot;hljs-title function_&quot;&gt;fail&lt;/span&gt;(error);\n    });\n}; &lt;span class=&quot;hljs-comment&quot;&gt;//promiseAll&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// LP: deferred execution block&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExecutionBlock&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index, resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://api.spotify.com/v1/&quot;&lt;/span&gt;\n    url += item;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( url )\n    &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleRequest&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result) {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; profileUrls = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(result).&lt;span class=&quot;hljs-property&quot;&gt;playlists&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;;\n            })\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(profileUrls);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;call error&quot;&lt;/span&gt;));\n        }\n    })\n}\n\narr = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;search?type=playlist&amp;amp;q=%22doom%20metal%22&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;search?type=playlist&amp;amp;q=Adele&quot;&lt;/span&gt;\n]\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;promiseAll&lt;/span&gt;(arr, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index, resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Making request [&quot;&lt;/span&gt; + index + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title class_&quot;&gt;ExecutionBlock&lt;/span&gt;(item, index, resolve, reject);\n}, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Aggregated results&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;All profiles received &quot;&lt;/span&gt; + results.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//console.log(JSON.stringify(results[0], null, 2));&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;///// promiseall again&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExecutionProfileBlock&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index, resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleRequest&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(item, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(result);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: obj.&lt;span class=&quot;hljs-property&quot;&gt;display_name&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;followers&lt;/span&gt;: obj.&lt;span class=&quot;hljs-property&quot;&gt;followers&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;total&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: obj.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;\n                });\n            } &lt;span class=&quot;hljs-comment&quot;&gt;//result&lt;/span&gt;\n        })\n    } &lt;span class=&quot;hljs-comment&quot;&gt;//ExecutionProfileBlock&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;promiseAll&lt;/span&gt;(results[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index, resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//console.log(&quot;Making request [&quot; + index + &quot;] &quot; + item)&lt;/span&gt;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;ExecutionProfileBlock&lt;/span&gt;(item, index, resolve, reject);\n    }, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// aggregated results&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;All response received &quot;&lt;/span&gt; + results.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(results, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n    }\n\n    , &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error);\n    })\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/////&lt;/span&gt;\n\n  },\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error);\n  });&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;console&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;I have extensively discussed this solution &lt;a href=&quot;https://stackoverflow.com/questions/36536245/how-to-search-for-a-user-by-name-using-spotify-web-api/36537774#36537774&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The short answer is, &lt;strong&gt;you have to implement a callback like this:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Here you can do what ever you want with the response object.&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response);\n}\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: callback\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;JavaScript is single threaded.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The browser can be divided into three parts:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Event Loop&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Web API&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Event Queue&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The event loop runs for forever, i.e., kind of an infinite loop. The event queue is where all your functions are pushed on some event (example: click).&lt;/p&gt;\n&lt;p&gt;This is one by one carried out of queue and put into the event loop which executes this function and prepares itself for the next one after the first one is executed. This means execution of one function doesn&apos;t start until the function before it in the queue is executed in the event loop.&lt;/p&gt;\n&lt;p&gt;Now let us think we pushed two functions in a queue. One is for getting a data from the server and another utilises that data. We pushed the serverRequest() function in the queue first and then the utiliseData() function. The serverRequest function goes in the event loop and makes a call to server as we never know how much time it will take to get data from server, so this process is expected to take time and so we busy our event loop thus hanging our page.&lt;/p&gt;\n&lt;p&gt;That&apos;s where Web API come into the role. It takes this function from the event loop and deals with the server making the event loop free, so that we can execute the next function from the queue.&lt;/p&gt;\n&lt;p&gt;The next function in the queue is utiliseData() which goes in the loop, but because of no data available, it goes to waste and execution of the next function continues until the end of the queue. (This is called Async calling, i.e., we can do something else until we get data.)&lt;/p&gt;\n&lt;p&gt;Let us suppose our serverRequest() function had a return statement in code. When we get back data from the server Web API, it will push it in the queue at the end of queue.&lt;/p&gt;\n&lt;p&gt;As it gets pushed at the end of the queue, we cannot utilise its data as there isn&apos;t any function left in our queue to utilise this data. &lt;strong&gt;Thus it is not possible to return something from the async call.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Thus the &lt;em&gt;solution&lt;/em&gt; to this is &lt;em&gt;callback&lt;/em&gt; or &lt;em&gt;promise&lt;/em&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;An &lt;em&gt;image&lt;/em&gt; from &lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/38898933#38898933&quot;&gt;one of the answers here&lt;/a&gt; correctly explains callback use...*&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;We give our function (function utilising data returned from the server) to a function calling the server.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/UCJgN.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/UCJgN.png&quot; alt=&quot;Callback&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doAjax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callbackFunc, method, url&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xmlHttpReq = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    xmlHttpReq.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(method, url);\n    xmlHttpReq.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xmlHttpReq.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; xmlHttpReq.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;callbackFunc&lt;/span&gt;(xmlHttpReq.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n        }\n    }\n    xmlHttpReq.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In my &lt;em&gt;code&lt;/em&gt; it is called as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadMyJson&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;categoryValue&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(categoryValue === &lt;span class=&quot;hljs-string&quot;&gt;&quot;veg&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-title function_&quot;&gt;doAjax&lt;/span&gt;(print, &lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:3004/vegetables&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(categoryValue === &lt;span class=&quot;hljs-string&quot;&gt;&quot;fruits&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-title function_&quot;&gt;doAjax&lt;/span&gt;(print, &lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:3004/fruits&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Data not found&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://javascript.info/callbacks&quot; rel=&quot;noreferrer&quot;&gt;JavaScript.info callback&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;2017 answer: you can now do exactly what you want in every current browser and &lt;a href=&quot;https://en.wikipedia.org/wiki/Node.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Node.js&lt;/a&gt;&lt;/h1&gt;\n&lt;p&gt;This is quite simple:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Return a Promise&lt;/li&gt;\n&lt;li&gt;Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot; rel=&quot;nofollow noreferrer&quot;&gt;&apos;await&apos;&lt;/a&gt;, which will tell JavaScript to await the promise to be resolved into a value (like the HTTP response)&lt;/li&gt;\n&lt;li&gt;Add the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; rel=&quot;nofollow noreferrer&quot;&gt;&apos;async&apos;&lt;/a&gt; keyword to the parent function&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Here&apos;s a working version of your code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; superagent.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response)\n\n})()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://caniuse.com/#search=await&quot; rel=&quot;nofollow noreferrer&quot;&gt;await is supported in all current browsers and Node.js 8&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use this custom library (written using Promise) to make a remote call.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;$http&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;apiConfig&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; client = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n        client.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(apiConfig.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt;, apiConfig.&lt;span class=&quot;hljs-property&quot;&gt;url&lt;/span&gt;);\n        client.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n        client.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Performs the function &quot;resolve&quot; when this.status is equal to 2xx.&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Your logic here.&lt;/span&gt;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt;);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Performs the function &quot;reject&quot; when this.status is different than 2xx.&lt;/span&gt;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;statusText&lt;/span&gt;);\n            }\n        };\n        client.&lt;span class=&quot;hljs-property&quot;&gt;onerror&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;statusText&lt;/span&gt;);\n        };\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple usage example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$http({\n    &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;google.com&apos;&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response);\n}, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error)\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another solution is to execute code via the sequential executor &lt;a href=&quot;https://github.com/amaksr/nsynjs&quot; rel=&quot;nofollow noreferrer&quot;&gt;nsynjs&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;If the underlying function is promisified&lt;/h2&gt;\n&lt;p&gt;nsynjs will evaluate all promises sequentially, and put the promise result into the &lt;code&gt;data&lt;/code&gt; property:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;synchronousCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getURL = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(url).&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n    };\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;received bytes:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_&quot;&gt;getURL&lt;/span&gt;(url).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n    \n};\n\nnsynjs.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(synchronousCode,{},&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;synchronousCode done&apos;&lt;/span&gt;);\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://rawgit.com/amaksr/nsynjs/master/nsynjs.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;If the underlying function is not promisified&lt;/h2&gt;\n&lt;p&gt;Step 1. Wrap the function with a callback into the nsynjs-aware wrapper (if it has a promisified version, you can skip this step):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ajaxGet = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;ctx,url&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ex;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(url)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        res.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    })\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;fail&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n        ex = e;\n    })\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;always&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        ctx.&lt;span class=&quot;hljs-title function_&quot;&gt;resume&lt;/span&gt;(ex);\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n};\najaxGet.&lt;span class=&quot;hljs-property&quot;&gt;nsynjsHasCallback&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Step 2. Put synchronous logic into function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got data:&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;ajaxGet&lt;/span&gt;(nsynjsCtx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;data/file1.json&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Step 3. Run function in synchronous manner via nsynjs:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;nsynjs.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(process,&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;synchronous function finished&quot;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Nsynjs will evaluate all operators and expressions step-by-step, pausing execution in case if the result of some slow function is not ready.&lt;/p&gt;\n&lt;p&gt;More examples are &lt;a href=&quot;https://github.com/amaksr/nsynjs/tree/master/examples&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;ECMAScript 6 has &apos;generators&apos; which allow you to easily program in an asynchronous style.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;myGenerator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; callback = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [response] = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://stackoverflow.com&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;complete&lt;/span&gt;: callback});\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;response is:&quot;&lt;/span&gt;, response);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// examples of other things you can do&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(callback, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;it delayed for 1000ms&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (response.&lt;span class=&quot;hljs-property&quot;&gt;statusText&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;error&quot;&lt;/span&gt;) {\n        [response] = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;anotherGenerator&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To run the above code you do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; gen = &lt;span class=&quot;hljs-title function_&quot;&gt;myGenerator&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Create generator&lt;/span&gt;\ngen.&lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Start it&lt;/span&gt;\ngen.&lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; gen.&lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;([...args])); &lt;span class=&quot;hljs-comment&quot;&gt;// Set its callback function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you need to target browsers that don&apos;t support ES6 you can run the code through Babel or closure-compiler to generate ECMAScript 5.&lt;/p&gt;\n\n&lt;p&gt;The callback &lt;code&gt;...args&lt;/code&gt; are wrapped in an array and destructured when you read them so that the pattern can cope with callbacks that have multiple arguments. For example with &lt;a href=&quot;https://nodejs.org/api/fs.html&quot; rel=&quot;noreferrer&quot;&gt;node fs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [err, data] = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(filePath, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;, callback);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;We find ourselves in a universe which appears to progress along a dimension we call &quot;time&quot;. We don&apos;t really understand what time is, but we have developed abstractions and vocabulary that let us reason and talk about it: &quot;past&quot;, &quot;present&quot;, &quot;future&quot;, &quot;before&quot;, &quot;after&quot;.&lt;/p&gt;\n&lt;p&gt;The computer systems we build--more and more--have time as an important dimension. Certain things are set up to happen in the future. Then other things need to happen after those first things eventually occur. This is the basic notion called &quot;asynchronicity&quot;. In our increasingly networked world, the most common case of asynchronicity is waiting for some remote system to respond to some request.&lt;/p&gt;\n&lt;p&gt;Consider an example. You call the milkman and order some milk. When it comes, you want to put it in your coffee. You can&apos;t put the milk in your coffee right now, because it is not here yet. You have to wait for it to come before putting it in your coffee. In other words, the following won&apos;t work:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; milk = &lt;span class=&quot;hljs-title function_&quot;&gt;order_milk&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;put_in_coffee&lt;/span&gt;(milk);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because JavaScript has no way to know that it needs to &lt;strong&gt;wait&lt;/strong&gt; for &lt;code&gt;order_milk&lt;/code&gt; to finish before it executes &lt;code&gt;put_in_coffee&lt;/code&gt;. In other words, it does not know that &lt;code&gt;order_milk&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt;--is something that is not going to result in milk until some future time. JavaScript, and other declarative languages execute one statement after another without waiting.&lt;/p&gt;\n&lt;p&gt;The classic JavaScript approach to this problem, taking advantage of the fact that JavaScript supports functions as first-class objects which can be passed around, is to pass a function as a parameter to the asynchronous request, which it will then invoke when it has completed its task sometime in the future. That is the &quot;callback&quot; approach. It looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;order_milk&lt;/span&gt;(put_in_coffee);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;order_milk&lt;/code&gt; kicks off, orders the milk, then, when and only when it arrives, it invokes &lt;code&gt;put_in_coffee&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The problem with this callback approach is that it pollutes the normal semantics of a function reporting its result with &lt;code&gt;return&lt;/code&gt;; instead, functions must not reports their results by calling a callback given as a parameter. Also, this approach can rapidly become unwieldy when dealing with longer sequences of events. For example, let&apos;s say that I want to wait for the milk to be put in the coffee, and then and only then perform a third step, namely drinking the coffee. I end up needing to write something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;order_milk&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;milk&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;put_in_coffee&lt;/span&gt;(milk, drink_coffee); }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where I am passing to &lt;code&gt;put_in_coffee&lt;/code&gt; both the milk to put in it, and also the action (&lt;code&gt;drink_coffee&lt;/code&gt;) to execute once the milk has been put in. Such code becomes hard to write, and read, and debug.&lt;/p&gt;\n&lt;p&gt;In this case, we could rewrite the code in the question as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; answer;\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo.json&apos;&lt;/span&gt;) . &lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(response.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Enter promises&lt;/h3&gt;\n&lt;p&gt;This was the motivation for the notion of a &quot;promise&quot;, which is a particular type of value which represents a &lt;strong&gt;future&lt;/strong&gt; or &lt;strong&gt;asynchronous&lt;/strong&gt; outcome of some sort. It can represent something that already happened, or that is going to happen in the future, or might never happen at all. Promises have a single method, named &lt;code&gt;then&lt;/code&gt;, to which you pass an action to be executed when the outcome the promise represents has been realized.&lt;/p&gt;\n&lt;p&gt;In the case of our milk and coffee, we design &lt;code&gt;order_milk&lt;/code&gt; to return a promise for the milk arriving, then specify &lt;code&gt;put_in_coffee&lt;/code&gt; as a &lt;code&gt;then&lt;/code&gt; action, as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;order_milk&lt;/span&gt;() . &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(put_in_coffee)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One advantage of this is that we can string these together to create sequences of future occurrences (&quot;chaining&quot;):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;order_milk&lt;/span&gt;() . &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(put_in_coffee) . &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(drink_coffee)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s apply promises to your particular problem. We will wrap our request logic inside a function, which returns a promise:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_data&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo.json&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Actually, all we&apos;ve done is added a &lt;code&gt;return&lt;/code&gt; to the call to &lt;code&gt;$.ajax&lt;/code&gt;. This works because jQuery&apos;s &lt;code&gt;$.ajax&lt;/code&gt; already returns a kind of promise-like thing. (In practice, without getting into details, we would prefer to wrap this call so as for return a real promise, or use some alternative to &lt;code&gt;$.ajax&lt;/code&gt; that does so.) Now, if we want to load the file and wait for it to finish and then do something, we can simply say&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;get_data&lt;/span&gt;() . &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(do_something)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for instance,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;get_data&lt;/span&gt;() .\n  &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data); });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When using promises, we end up passing lots of functions into &lt;code&gt;then&lt;/code&gt;, so it&apos;s often helpful to use the more compact ES6-style arrow functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;get_data&lt;/span&gt;() .\n  &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;The &lt;code&gt;async&lt;/code&gt; keyword&lt;/h3&gt;\n&lt;p&gt;But there&apos;s still something vaguely dissatisfying about having to write code one way if synchronous and a quite different way if asynchronous. For synchronous, we write&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but if &lt;code&gt;a&lt;/code&gt; is asynchronous, with promises we have to write&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;() . &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(b);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Above, we said, &quot;JavaScript has no way to know that it needs to &lt;strong&gt;wait&lt;/strong&gt; for the first call to finish before it executes the second&quot;. Wouldn&apos;t it be nice if there &lt;strong&gt;was&lt;/strong&gt; some way to tell JavaScript that? It turns out that there is--the &lt;code&gt;await&lt;/code&gt; keyword, used inside a special type of function called an &quot;async&quot; function. This feature is part of the upcoming version of ECMAScript (ES), but it is already available in transpilers such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Babel_(transcompiler)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Babel&lt;/a&gt; given the right presets. This allows us to simply write&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;morning_routine&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; milk   = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;order_milk&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; coffee = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;put_in_coffee&lt;/span&gt;(milk);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;drink&lt;/span&gt;(coffee);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In your case, you would be able to write something like&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  data = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_data&lt;/span&gt;();\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Short answer&lt;/strong&gt;: Your &lt;code&gt;foo()&lt;/code&gt; method returns immediately, while the &lt;code&gt;$ajax()&lt;/code&gt; call executes asynchronously &lt;em&gt;after the function returns&lt;/em&gt;. The problem is then how or where to store the results retrieved by the async call once it returns.&lt;/p&gt;\n\n&lt;p&gt;Several solutions have been given in this thread. Perhaps the easiest way is to pass an object to the &lt;code&gt;foo()&lt;/code&gt; method, and to store the results in a member of that object after the async call completes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n            result.&lt;span class=&quot;hljs-property&quot;&gt;response&lt;/span&gt; = response;   &lt;span class=&quot;hljs-comment&quot;&gt;// Store the async result&lt;/span&gt;\n        }\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = { &lt;span class=&quot;hljs-attr&quot;&gt;response&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; };   &lt;span class=&quot;hljs-comment&quot;&gt;// Object to hold the async result&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(result);                       &lt;span class=&quot;hljs-comment&quot;&gt;// Returns before the async completes&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the call to &lt;code&gt;foo()&lt;/code&gt; will still return nothing useful. However, the result of the async call will now be stored in &lt;code&gt;result.response&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Here are some approaches to work with asynchronous requests:&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Browser Promise object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/kriskowal/q&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt; - A promise library for JavaScript&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.promisejs.org/&quot; rel=&quot;noreferrer&quot;&gt;A+ Promises.js&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://api.jquery.com/jquery.deferred/&quot; rel=&quot;noreferrer&quot;&gt;jQuery deferred&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest API&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Using callback concept - As implementation in first answer&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;Example: jQuery deferred implementation to work with multiple requests&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; || {};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;getDataFromServer&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,\n                 deferred = $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;(),\n                 requests = [];\n\n      requests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;($.&lt;span class=&quot;hljs-title function_&quot;&gt;getJSON&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request/ajax/url/1&apos;&lt;/span&gt;));\n      requests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;($.&lt;span class=&quot;hljs-title function_&quot;&gt;getJSON&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request/ajax/url/2&apos;&lt;/span&gt;));\n\n      $.when.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(jQuery, requests).&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xhrResponse&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; deferred.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(xhrResponse.&lt;span class=&quot;hljs-property&quot;&gt;result&lt;/span&gt;);\n      });\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; deferred;\n    },\n\n    &lt;span class=&quot;hljs-attr&quot;&gt;init&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getDataFromServer&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(_.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resp1, resp2&lt;/span&gt;) {\n\n           &lt;span class=&quot;hljs-comment&quot;&gt;// Do the operations which you wanted to do when you&lt;/span&gt;\n           &lt;span class=&quot;hljs-comment&quot;&gt;// get a response from Ajax, for example, log response.&lt;/span&gt;\n        }, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n    }\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Use a &lt;code&gt;callback()&lt;/code&gt; function inside the &lt;code&gt;foo()&lt;/code&gt; success.\nTry it in this way. It is simple and easy to understand.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lon = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n    lat = data.&lt;span class=&quot;hljs-property&quot;&gt;lat&lt;/span&gt;;\n    lon = data.&lt;span class=&quot;hljs-property&quot;&gt;lon&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLoc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://ip-api.com/json&quot;&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;getJSON&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(data);\n    });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getLoc&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;1. A first stumbling step&lt;/h3&gt;\n&lt;p&gt;As for many others, my encounter with asynchronous calls was puzzling at\nfirst.&lt;br&gt;\nI don&apos;t remember the details, but I may have tried something like:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result;\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/todos/1&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\nInside $.ajax:&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response);\n    result = response;\n  }\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Finally, the result: &apos;&lt;/span&gt; + result);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Whoops!&lt;/em&gt; The output of the line\n&lt;code&gt;console.log(&apos;Finally, the result: &apos; + result);&lt;/code&gt;\nwhich I thought would be printed &lt;em&gt;last&lt;/em&gt;, is actually printed &lt;em&gt;before&lt;/em&gt; the\nother output!  And it doesn&apos;t contain the result: it just prints &lt;code&gt;undefined&lt;/code&gt;.\n&lt;sup&gt;1&lt;/sup&gt;\nHow come?&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A helpful insight&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I distinctly remember my first &lt;em&gt;aha!&lt;/em&gt; moment on how to understand asynchronous\ncalls.&lt;br&gt;\nIt was &lt;a href=&quot;https://stackoverflow.com/q/44298196#comment75602602_44298196&quot;&gt;this comment&lt;/a&gt; saying:&lt;br&gt;\n&lt;em&gt;you actually don&apos;t want to get the data &lt;strong&gt;out&lt;/strong&gt; of a callback;&lt;br&gt;\nyou want to get your data-needing action &lt;strong&gt;into&lt;/strong&gt; the callback!&lt;/em&gt;\n&lt;sup&gt;2&lt;/sup&gt;&lt;br&gt;\nThis is obvious in the example above.&lt;br&gt;\nBut is it still possible to write code &lt;em&gt;after&lt;/em&gt; the asynchronous call that\ndeals with the response once it has completed?&lt;/p&gt;\n&lt;h3&gt;2. Plain JavaScript and a callback function&lt;/h3&gt;\n&lt;p&gt;The answer is &lt;em&gt;yes!&lt;/em&gt;  It is possible.&lt;br&gt;\nOne alternative is the use of a &lt;em&gt;callback&lt;/em&gt; function in a continuation-passing\nstyle:\n&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; url = &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/todos/2&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asynchronousCall&lt;/span&gt; (callback) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; request = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n  request.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, url);\n  request.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n  request.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === request.&lt;span class=&quot;hljs-property&quot;&gt;DONE&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;The request is done. Now calling back.&apos;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(request.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n    }\n  };\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;asynchronousCall&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is the start of the callback function. Result:&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;The callback function finishes on this line. THE END!&apos;&lt;/span&gt;);\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;LAST in the code, but executed FIRST!&apos;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Note how the function &lt;code&gt;asynchronousCall&lt;/code&gt; is &lt;code&gt;void&lt;/code&gt;. It returns nothing.\nInstead, by calling &lt;code&gt;asynchronousCall&lt;/code&gt; with an anonymous callback function\n(&lt;code&gt;asynchronousCall(function (result) {...&lt;/code&gt;), this function executes the\ndesired actions on the result, but only &lt;em&gt;after&lt;/em&gt; the request has completed \nwhen the &lt;code&gt;responseText&lt;/code&gt; is available.&lt;/p&gt;\n&lt;p&gt;Running the above snippet shows how I will probably not want to write any code\n&lt;em&gt;after&lt;/em&gt; the asyncronous call (such as the line\n&lt;code&gt;LAST in the code, but executed FIRST!&lt;/code&gt;).&lt;br&gt;\n&lt;em&gt;Why?&lt;/em&gt;  Because such code will\nhappen &lt;em&gt;before&lt;/em&gt; the asyncronous call delivers any response data.&lt;br&gt;\nDoing so is bound to cause confusion when comparing the &lt;em&gt;code&lt;/em&gt; with the &lt;em&gt;output&lt;/em&gt;.&lt;/p&gt;\n&lt;h3&gt;3. Promise with &lt;code&gt;.then()&lt;/code&gt;  or &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;The &lt;code&gt;.then()&lt;/code&gt; construct was introduced in the &lt;em&gt;ECMA-262 6th Edition in June\n2015&lt;/em&gt;, and the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; construct was introduced in the &lt;em&gt;ECMA-262\n8th Edition in June 2017&lt;/em&gt;.&lt;br&gt;\nThe code below is still plain JavaScript, replacing the old-school\n&lt;em&gt;XMLHttpRequest&lt;/em&gt; with &lt;em&gt;Fetch&lt;/em&gt;.\n&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://api.icndb.com/jokes/random&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;responseBody&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.then() - the response body:&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(responseBody) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n\\n&apos;&lt;/span&gt;);\n  });\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;receiveAndAwaitPromise&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; responseBody =\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://api.icndb.com/jokes/random&apos;&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;async/await:&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; responseBody) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n\\n&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;receiveAndAwaitPromise&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;A word of warning is warranted if you decide to go with the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;\nconstruct. Note in the above snippet how &lt;code&gt;await&lt;/code&gt; is needed in &lt;em&gt;two&lt;/em&gt; places.\nIf forgotten in the first place, there will be no output. If forgotten in the\nsecond place, the only output will be the empty object, &lt;code&gt;{}&lt;/code&gt;\n(or &lt;code&gt;[object Object]&lt;/code&gt; or &lt;code&gt;[object Promise]&lt;/code&gt;).&lt;br&gt;\nForgetting the &lt;code&gt;async&lt;/code&gt; prefix of the function is maybe the worst of all  the\noutput will be &lt;code&gt;&quot;SyntaxError: missing ) in parenthetical&quot;&lt;/code&gt;  no mentioning of\nthe &lt;em&gt;missing&lt;/em&gt; &lt;code&gt;async&lt;/code&gt; keyword.&lt;/p&gt;\n&lt;h3&gt;4. Promise.all  array of URLs &lt;sup&gt;5&lt;/sup&gt;&lt;/h3&gt;\n&lt;p&gt;Suppose we need to request a whole bunch of URLs.\nI could send one request, wait till it responds, then send the next request,\nwait till &lt;em&gt;it&lt;/em&gt; responds, and so on ...&lt;br&gt;\nAargh!  That could take a loong time. Wouldn&apos;t it be better if I could send\nthem &lt;em&gt;all&lt;/em&gt; at once, and then wait no longer than it takes for the slowest\nresponse to arrive?&lt;/p&gt;\n&lt;p&gt;As a simplified example, I will use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;urls = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/todos/2&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/todos/3&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The JSONs of the two URLs:&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;quis ut nam facilis et officia qui&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n &lt;span class=&quot;hljs-attr&quot;&gt;&quot;completed&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fugiat veniam minus&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;completed&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The goal is to get an array of objects, where each object contains the &lt;code&gt;title&lt;/code&gt;\nvalue from the corresponding URL.&lt;/p&gt;\n&lt;p&gt;To make it a little more interesting, I will assume that there is already an\narray of &lt;em&gt;names&lt;/em&gt; that I want the array of URL results (the &lt;em&gt;titles&lt;/em&gt;) to be\nmerged with:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;namesonly = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The desired output is a mashup combining &lt;code&gt;namesonly&lt;/code&gt; and &lt;code&gt;urls&lt;/code&gt; into an\n&lt;em&gt;array of objects&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;loremipsum&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;quis ut nam facilis et officia qui&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;loremipsum&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;fugiat veniam minus&quot;&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where I have changed the name of &lt;code&gt;title&lt;/code&gt; to &lt;code&gt;loremipsum&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; namesonly = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; urls = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/todos/2&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/todos/3&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(urls.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(url)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;responseBody&lt;/span&gt; =&amp;gt;&lt;/span&gt; responseBody.&lt;span class=&quot;hljs-property&quot;&gt;title&lt;/span&gt;)))\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;titles&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; names = namesonly.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: value }));\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;names: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(names));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; latins = titles.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-attr&quot;&gt;loremipsum&lt;/span&gt;: value }));\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;latins:\\n&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(latins));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result =\n      names.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, item, latins[i]));\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;result:\\n&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(result));\n  });&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;All the above examples are short and succinctly convey how asynchronous calls\nmay be used on toyish APIs.\nUsing small APIs works well to explain concepts and working code, but the\nexamples might be a bit of dry runs.&lt;/p&gt;\n&lt;p&gt;The next section will show a more realistic example on how APIs may be\ncombined to create a more interesting output.&lt;/p&gt;\n&lt;h3&gt;5. How to visualize a mashup in Postman &lt;sup&gt;6&lt;/sup&gt;&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2&quot; rel=&quot;noreferrer&quot;&gt;The MusicBrainz API&lt;/a&gt;\nhas information about artists and music bands.&lt;br&gt;\nAn example  a request for the British rock band &lt;em&gt;Coldplay&lt;/em&gt; is:&lt;br&gt;\n&lt;a href=&quot;http://musicbrainz.org/ws/2/artist/cc197bad-dc9c-440d-a5b5-d52ba2e14234?&amp;amp;fmt=json&amp;amp;inc=url-rels+release-groups&quot; rel=&quot;noreferrer&quot;&gt;http://musicbrainz.org/ws/2/artist/cc197bad-dc9c-440d-a5b5-d52ba2e14234?&amp;amp;fmt=json&amp;amp;inc=url-rels+release-groups&lt;/a&gt;.&lt;br&gt;\nThe JSON response contains  among other things  the 25 earliest album titles\nby the band.\nThis information is in the &lt;code&gt;release-groups&lt;/code&gt; array.\nThe start of this array, including its first object is:&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;...\n  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;release-groups&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1dc4c347-a1db-32aa-b14f-bc9cc507b843&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;secondary-type-ids&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;first-release-date&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;2000-07-10&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;primary-type-id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;f529b476-6e62-324f-b0aa-1f3e33d313fc&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;disambiguation&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;secondary-types&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Parachutes&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;primary-type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Album&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This JSON snippet shows that the first album by Coldplay is &lt;em&gt;Parachutes&lt;/em&gt;.\nIt also gives an &lt;code&gt;id&lt;/code&gt;, in this case &lt;code&gt;1dc4c347-a1db-32aa-b14f-bc9cc507b843&lt;/code&gt;,\nwhich is a unique identifier of the album.&lt;/p&gt;\n&lt;p&gt;This identifier can be used to make a lookup in &lt;a href=&quot;https://wiki.musicbrainz.org/Cover_Art_Archive/API&quot; rel=&quot;noreferrer&quot;&gt;the Cover Art Archive API&lt;/a&gt;:&lt;br&gt;\n&lt;a href=&quot;http://coverartarchive.org/release-group/1dc4c347-a1db-32aa-b14f-bc9cc507b843&quot; rel=&quot;noreferrer&quot;&gt;http://coverartarchive.org/release-group/1dc4c347-a1db-32aa-b14f-bc9cc507b843&lt;/a&gt;.\n&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;For each album, the JSON response contains some images, one of which is the\nfront cover of the album.\nThe first few lines of the response to the above request:&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;images&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;approved&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;back&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;comment&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;edit&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;22132705&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;front&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4086974851&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851.jpg&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;thumbnails&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;250&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-250.jpg&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-500.jpg&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;1200&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-1200.jpg&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;large&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-500.jpg&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n= = &amp;gt;   &lt;span class=&quot;hljs-attr&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-250.jpg&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of interest here is the line\n&lt;code&gt;&quot;small&quot;: &quot;http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-250.jpg&quot;&lt;/code&gt;.&lt;br&gt;\nThat URL is a direct link to the front cover of the &lt;em&gt;Parachutes&lt;/em&gt; album.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The code to create and visualize the mashup&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The overall task is to use Postman to visualize all the album titles and front\ncovers of a music band.\nHow to write code to achieve this has already been described in quite some\ndetail in  &lt;a href=&quot;https://stackoverflow.com/a/67824483&quot;&gt;an answer&lt;/a&gt; to the question\n&lt;em&gt;How can I visualize an API mashup in Postman?&lt;/em&gt;  Therefore I will avoid\nlengthy discussions here and just present the code and a screenshot of the\nresult:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; lock = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {}, &lt;span class=&quot;hljs-number&quot;&gt;43210&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; albumsArray = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; urlsArray = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; urlOuter = &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://musicbrainz.org/ws/2/artist/&apos;&lt;/span&gt; +\n  pm.&lt;span class=&quot;hljs-property&quot;&gt;collectionVariables&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MBID&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;?fmt=json&amp;amp;inc=url-rels+release-groups&apos;&lt;/span&gt;;\npm.&lt;span class=&quot;hljs-title function_&quot;&gt;sendRequest&lt;/span&gt;(urlOuter, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, responseO&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bandName = responseO.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; albums = responseO.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;release-groups&apos;&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; albums) {\n    albumsArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(item.&lt;span class=&quot;hljs-property&quot;&gt;title&lt;/span&gt;);\n    urlsArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://coverartarchive.org/release-group/&apos;&lt;/span&gt; + item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;);\n  }\n  albumsArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = urlsArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; images = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; countDown = urlsArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n  urlsArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;asynchronousCall&lt;/span&gt;(url, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;imageURL&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n      images[index] = imageURL;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--countDown === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Callback for ALL starts on next line.&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(lock); &lt;span class=&quot;hljs-comment&quot;&gt;// Unlock the timeout.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; albumTitles = albumsArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: value }));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; albumImages = images.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-attr&quot;&gt;image&lt;/span&gt;: value }));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; albumsAndImages = albumTitles.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(\n          &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, item, albumImages[i]));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; template = &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;table&amp;gt;\n          &amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;`&lt;/span&gt; + bandName + &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;\n          {{#each responseI}}\n          &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;{{title}}&amp;lt;br&amp;gt;&amp;lt;img src=&quot;{{image}}&quot;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\n          {{/each}}\n        &amp;lt;/table&amp;gt;`&lt;/span&gt;;\n        pm.&lt;span class=&quot;hljs-property&quot;&gt;visualizer&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(template, { &lt;span class=&quot;hljs-attr&quot;&gt;responseI&lt;/span&gt;: albumsAndImages });\n      }\n    });\n  });\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asynchronousCall&lt;/span&gt; (url, callback) {\n    pm.&lt;span class=&quot;hljs-title function_&quot;&gt;sendRequest&lt;/span&gt;(url, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, responseI&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(responseI.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;images&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;front&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        .&lt;span class=&quot;hljs-property&quot;&gt;thumbnails&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;small&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Individual callback.&lt;/span&gt;\n    });\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;br&gt;&lt;strong&gt;The result and documentation&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/NtwLtvM.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.imgur.com/NtwLtvM.png&quot; alt=&quot;Result and documentation in Postman&quot; title=&quot;Result and documentation in Postman&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;br&gt;&lt;strong&gt;How to download and run the Postman Collection&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Running the Postman Collection should be straightforward.&lt;br&gt;\nAssuming you are using &lt;a href=&quot;https://www.postman.com/downloads/&quot; rel=&quot;noreferrer&quot;&gt;the desktop version of Postman&lt;/a&gt;, do as follows:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Download and save&lt;br&gt;\n&lt;a href=&quot;http://henke.atwebpages.com/postman/mbid/MusicBands.pm_coll.json&quot; rel=&quot;noreferrer&quot;&gt;http://henke.atwebpages.com/postman/mbid/MusicBands.pm_coll.json&lt;/a&gt;&lt;br&gt;\nin a suitable place on your hard drive.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In Postman, &lt;em&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;O&lt;/kbd&gt; &amp;gt; Upload Files &amp;gt;\n&lt;code&gt;MusicBands.pm_coll.json&lt;/code&gt; &amp;gt; Import&lt;/em&gt;.&lt;br&gt;\nYou should now see &lt;code&gt;MusicBands&lt;/code&gt; among your collections in Postman.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Collections &amp;gt; &lt;code&gt;MusicBands&lt;/code&gt; &amp;gt; &lt;code&gt;DummyRequest&lt;/code&gt; &amp;gt; &lt;strong&gt;Send&lt;/strong&gt;&lt;/em&gt;.\n&lt;sup&gt;8&lt;/sup&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In the Postman Response Body, click &lt;em&gt;Visualize&lt;/em&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You should now be able to scroll 15 albums as indicated by the\nscreenshot above.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;References&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/14220321&quot;&gt;How do I return the response from an asynchronous call?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/67662000&quot;&gt;Some questions and answers about asynchronous calls&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/16825593&quot;&gt;Using plain JavaScript and a callback function&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot; rel=&quot;noreferrer&quot;&gt;Continuation-passing style&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/19247992&quot;&gt;XMLHttpRequest: onload vs. onreadystatechange&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest.responseText&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/48415961&quot;&gt;An example demonstrating &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.github.io/fetch/&quot; rel=&quot;noreferrer&quot;&gt;Fetch&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://xhr.spec.whatwg.org/&quot; rel=&quot;noreferrer&quot;&gt;The XMLHttpRequest Standard&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; rel=&quot;noreferrer&quot;&gt;The Fetch Standard&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://whatwg.org/news/start&quot; rel=&quot;noreferrer&quot;&gt;The Web Hypertext Application Technology Working Group (WHATWG)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot; rel=&quot;noreferrer&quot;&gt;Links to ECMA specifications&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/49602789&quot;&gt;Convert an array of values to an array of objects&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/67671337&quot;&gt;How can I fetch an array of URLs with Promise.all?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2&quot; rel=&quot;noreferrer&quot;&gt;Documentation of the MusicBrainz API&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://wiki.musicbrainz.org/Cover_Art_Archive/API&quot; rel=&quot;noreferrer&quot;&gt;Documentation of the Cover Art Archive API&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/67824483&quot;&gt;How can I visualize an API mashup in Postman?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Expressed by the original poster as: &lt;em&gt;they all return\n&lt;code&gt;undefined&lt;/code&gt;&lt;/em&gt;.&lt;br&gt;\n&lt;sup&gt;2&lt;/sup&gt; If you think asynchronous calls are confusing, consider having a\nlook at &lt;a href=&quot;https://stackoverflow.com/a/67662000&quot;&gt;some questions and answers about asynchronous calls&lt;/a&gt; to see if that helps.&lt;br&gt;\n&lt;sup&gt;3&lt;/sup&gt; The name &lt;code&gt;XMLHttpRequest&lt;/code&gt; is as misleading as the &lt;em&gt;X&lt;/em&gt; in\n&lt;em&gt;AJAX&lt;/em&gt;  these days the data format of Web APIs is ubiquitously JSON, not XML.&lt;br&gt;\n&lt;sup&gt;4&lt;/sup&gt; &lt;a href=&quot;https://github.github.io/fetch/&quot; rel=&quot;noreferrer&quot;&gt;Fetch&lt;/a&gt;\nreturns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise&lt;/a&gt;.\nI was surprised to learn that neither &lt;em&gt;XMLHttpRequest&lt;/em&gt; nor &lt;em&gt;Fetch&lt;/em&gt; are part of\nthe &lt;em&gt;ECMAScript&lt;/em&gt; standard.\nThe reason JavaScript can access them here is because the web browser provides\nthem.\n&lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; rel=&quot;noreferrer&quot;&gt;The Fetch Standard&lt;/a&gt; and\n&lt;a href=&quot;https://xhr.spec.whatwg.org/&quot; rel=&quot;noreferrer&quot;&gt;the XMLHttpRequest Standard&lt;/a&gt; are both upheld by\n&lt;a href=&quot;https://whatwg.org/news/start&quot; rel=&quot;noreferrer&quot;&gt;the Web Hypertext Application Technology Working Group (WHATWG)&lt;/a&gt; that was formed in June 2004.&lt;br&gt;\n&lt;sup&gt;5&lt;/sup&gt; This section borrows a lot from\n&lt;a href=&quot;https://stackoverflow.com/a/67671337&quot;&gt;How can I fetch an array of URLs with Promise.all?&lt;/a&gt;.&lt;br&gt;\n&lt;sup&gt;6&lt;/sup&gt; This section relies heavily on\n&lt;a href=&quot;https://stackoverflow.com/a/67824483&quot;&gt;How can I visualize an API mashup in Postman?&lt;/a&gt;.&lt;br&gt;\n&lt;sup&gt;7&lt;/sup&gt; This URL is automatically redirected to:\n&lt;a href=&quot;https://ia800503.us.archive.org/29/items/mbid-435fc965-9121-461e-b8da-d9b505c9dc9b/index.json&quot; rel=&quot;noreferrer&quot;&gt;https://ia800503.us.archive.org/29/items/mbid-435fc965-9121-461e-b8da-d9b505c9dc9b/index.json&lt;/a&gt;.&lt;br&gt;\n&lt;sup&gt;8&lt;/sup&gt; If you get an error,\n&lt;em&gt;Something went wrong while running your scripts&lt;/em&gt;,\ntry hitting &lt;strong&gt;Send&lt;/strong&gt; again.&lt;/p&gt;\n    ","\n&lt;h1&gt;Using Promise&lt;/h1&gt;\n&lt;p&gt;The most perfect answer to this question is using &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;method, url, params&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    xhr.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n    };\n    xhr.&lt;span class=&quot;hljs-property&quot;&gt;onerror&lt;/span&gt; = reject;\n    xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(method, url);\n    xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(params);\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Usage&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/test&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;acrive=1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code depending on result&lt;/span&gt;\n})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// An error occurred&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;But wait...!&lt;/h1&gt;\n&lt;p&gt;There is a problem with using promises!&lt;/p&gt;\n&lt;h2&gt;Why should we use our own custom Promise?&lt;/h2&gt;\n&lt;p&gt;I was using this solution for a while until I figured out there is an error in old browsers:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Uncaught ReferenceError: Promise is not defined&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So I decided to implement my own Promise class for &lt;strong&gt;ES3 to below&lt;/strong&gt; JavaScript compilers if it&apos;s not defined. Just add this code before your main code and then safely use Promise!&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_classCallCheck&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;instance, Constructor&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(instance &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Constructor&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cannot call a class as a function&quot;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;main&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _this = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;_classCallCheck&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;callbacks&lt;/span&gt; = [];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resolve = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolveValue&lt;/span&gt;) {\n                _this.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = resolveValue;\n                _this.&lt;span class=&quot;hljs-title function_&quot;&gt;triggerCallbacks&lt;/span&gt;();\n            };\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reject = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;rejectValue&lt;/span&gt;) {\n                _this.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = rejectValue;\n                _this.&lt;span class=&quot;hljs-title function_&quot;&gt;triggerCallbacks&lt;/span&gt;();\n            };\n            &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;(resolve, reject);\n        }\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _this2 = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; next = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n                _this2.&lt;span class=&quot;hljs-property&quot;&gt;callbacks&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(x));\n                });\n            });\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; next;\n        };\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;catch&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;catch_&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _this2 = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; next = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;reject&lt;/span&gt;) {\n                _this2.&lt;span class=&quot;hljs-property&quot;&gt;callbacks&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(x));\n                });\n            });\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; next;\n        };\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;triggerCallbacks&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;triggerCallbacks&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _this3 = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;callbacks&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(_this3.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n            });\n        };\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;;\n    }();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Of course there are many approaches like synchronous request, promise, but from my experience I think you should use the callback approach. It&apos;s natural to asynchronous behavior of JavaScript.&lt;/p&gt;\n&lt;p&gt;So, your code snippet can be rewritten to be a little different:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result;\n\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;myCallback&lt;/span&gt;(response);\n        }\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Does something.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The question was:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;How do I return the response from an asynchronous call?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;which &lt;em&gt;can&lt;/em&gt; be interpreted as:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;How to make &lt;strong&gt;asynchronous&lt;/strong&gt; code look &lt;strong&gt;synchronous&lt;/strong&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The solution will be to avoid callbacks, and use a combination of &lt;strong&gt;Promises&lt;/strong&gt; and &lt;strong&gt;async/await&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;I would like to give an example for an Ajax request.&lt;/p&gt;\n&lt;p&gt;(Although it can be written in JavaScript, I prefer to write it in Python, and compile it to JavaScript using &lt;a href=&quot;https://github.com/QQuick/Transcrypt&quot; rel=&quot;nofollow noreferrer&quot;&gt;Transcrypt&lt;/a&gt;. It will be clear enough.)&lt;/p&gt;\n&lt;p&gt;Lets first enable jQuery usage, to have &lt;code&gt;$&lt;/code&gt; available as &lt;code&gt;S&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;__pragma__ (&lt;span class=&quot;hljs-string&quot;&gt;&apos;alias&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;S&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Define a function which returns a &lt;strong&gt;Promise&lt;/strong&gt;, in this case an Ajax call:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;def &lt;span class=&quot;hljs-title function_&quot;&gt;read&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: str):\n    deferred = S.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;()\n    S.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;url&apos;&lt;/span&gt;: url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;: { },\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;success&apos;&lt;/span&gt;: lambda &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: deferred.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(d),\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt;: lambda &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: deferred.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(e)\n    })\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; deferred.&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use the &lt;strong&gt;asynchronous&lt;/strong&gt; code as if it were &lt;strong&gt;synchronous&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; def &lt;span class=&quot;hljs-title function_&quot;&gt;readALot&lt;/span&gt;():\n    &lt;span class=&quot;hljs-attr&quot;&gt;try&lt;/span&gt;:\n        result1 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;read&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;url_1&quot;&lt;/span&gt;)\n        result2 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;read&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;url_2&quot;&lt;/span&gt;)\n    except &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;:\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Reading a lot failed&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Rather than throwing code at you, there are two concepts that are key to understanding how JavaScript handles callbacks and asynchronicity (is that even a word?)&lt;/p&gt;\n&lt;h2&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Event Loop and Concurrency Model&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;There are three things you need to be aware of; &lt;strong&gt;The queue; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Event_loop&quot; rel=&quot;nofollow noreferrer&quot;&gt;the event loop&lt;/a&gt; and the stack&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In broad, simplistic terms, the event loop is like the project manager, it is constantly listening for any functions that want to run and communicates between the queue and the stack.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (queue.&lt;span class=&quot;hljs-title function_&quot;&gt;waitForMessage&lt;/span&gt;()) {\n  queue.&lt;span class=&quot;hljs-title function_&quot;&gt;processNextMessage&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Once it receives a message to run something it adds it to the queue. The queue is the list of things that are waiting to execute (like your AJAX request). imagine it like this:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;call foo.com/api/bar using foobarFunc&lt;/li&gt;\n&lt;li&gt;Go perform an infinite loop\n... and so on&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;When one of these messages is going to execute it pops the message from the queue and creates a stack, the stack is everything JavaScript needs to execute to perform the instruction in the message. So in our example it&apos;s being told to call &lt;code&gt;foobarFunc&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobarFunc&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;anotherFunction&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So anything that foobarFunc needs to execute (in our case &lt;code&gt;anotherFunction&lt;/code&gt;) will get pushed onto the stack. executed, and then forgotten about - the event loop will then move onto the next thing in the queue (or listen for messages)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The key thing here is the order of execution. That is&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;&lt;strong&gt;WHEN is something going to run&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;When you make a call using AJAX to an external party or run any asynchronous code (a setTimeout for example), JavaScript is dependant upon a response before it can proceed.&lt;/p&gt;\n&lt;p&gt;The big question is when will it get the response? The answer is we don&apos;t know - so the event loop is waiting for that message to say &quot;hey run me&quot;. If JavaScript just waited around for that message synchronously your app would freeze and it will suck. So JavaScript carries on executing the next item in the queue whilst waiting for the message to get added back to the queue.&lt;/p&gt;\n&lt;p&gt;That&apos;s why with asynchronous functionality we use things called &lt;strong&gt;callbacks&lt;/strong&gt;. - A function or handler that, when passed into another function, will be executed at a later date. A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;nofollow noreferrer&quot;&gt;promise&lt;/a&gt; uses callbacks (functions passed to &lt;code&gt;.then()&lt;/code&gt; for example) as a way to reason about this asynchronous behaviour in a more linear way. The promise is a way of saying &quot;I &lt;em&gt;promise to return something at some point&lt;/em&gt;&quot; and the callback is how we handle that value that is eventually returned. jQuery uses specific callbacks called &lt;code&gt;deffered.done&lt;/code&gt; &lt;code&gt;deffered.fail&lt;/code&gt; and &lt;code&gt;deffered.always&lt;/code&gt; (amongst others). You can see them all &lt;a href=&quot;https://api.jquery.com/category/deferred-object/&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;So what you need to do is pass a function that is promised to execute at some point with data that is passed to it.&lt;/p&gt;\n&lt;p&gt;Because a callback is not executed immediately but at a later time it&apos;s important to pass the reference to the function not it executed. so&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;bla&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(bla)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;so most of the time (but not always) you&apos;ll pass &lt;code&gt;foo&lt;/code&gt; not &lt;code&gt;foo()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Hopefully that will make some sense. When you encounter things like this that seem confusing - i highly recommend reading the documentation fully to at least get an understanding of it. It will make you a much better developer.&lt;/p&gt;\n    "],"4":["\n&lt;p&gt;The &lt;em&gt;correct&lt;/em&gt; way to avoid SQL injection attacks, no matter which database you use, is to &lt;strong&gt;separate the data from SQL&lt;/strong&gt;, so that data stays data and will &lt;strong&gt;never be interpreted&lt;/strong&gt; as commands by the SQL parser. It is possible to create an SQL statement with correctly formatted data parts, but if you don&apos;t &lt;em&gt;fully&lt;/em&gt; understand the details, you should always &lt;strong&gt;use prepared statements and parameterized queries.&lt;/strong&gt; These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL.&lt;/p&gt;\n&lt;p&gt;You basically have two options to achieve this:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Using &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;PDO&lt;/strong&gt;&lt;/a&gt; (for any supported database driver):&lt;/p&gt;\n &lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM employees WHERE name = :name&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;([ &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; ]);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with $row&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;MySQLi&lt;/strong&gt;&lt;/a&gt; (for MySQL):&lt;/p&gt;\n &lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM employees WHERE name = ?&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bind_param&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;s&apos; specifies the variable type =&amp;gt; &apos;string&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_result&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch_assoc&lt;/span&gt;()) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with $row&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If you&apos;re connecting to a database other than MySQL, there is a driver-specific second option that you can refer to (for example, &lt;code&gt;pg_prepare()&lt;/code&gt; and &lt;code&gt;pg_execute()&lt;/code&gt; for PostgreSQL). PDO is the universal option.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Correctly setting up the connection&lt;/h2&gt;\n&lt;h4&gt;PDO&lt;/h4&gt;\n&lt;p&gt;Note that when using &lt;strong&gt;PDO&lt;/strong&gt; to access a MySQL database &lt;em&gt;real&lt;/em&gt; prepared statements are &lt;strong&gt;not used by default&lt;/strong&gt;. To fix this you have to disable the emulation of prepared statements. An example of creating a connection using &lt;strong&gt;PDO&lt;/strong&gt; is:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:dbname=dbtest;host=127.0.0.1;charset=utf8mb4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_EMULATE_PREPARES&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the above example, the error mode isn&apos;t strictly necessary, &lt;strong&gt;but it is advised to add it&lt;/strong&gt;. This way PDO will inform you of all MySQL errors by means of throwing the &lt;code&gt;PDOException&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;What is &lt;strong&gt;mandatory&lt;/strong&gt;, however, is the first &lt;code&gt;setAttribute()&lt;/code&gt; line, which tells PDO to disable emulated prepared statements and use &lt;em&gt;real&lt;/em&gt; prepared statements. This makes sure the statement and the values aren&apos;t parsed by PHP before sending it to the MySQL server (giving a possible attacker no chance to inject malicious SQL).&lt;/p&gt;\n&lt;p&gt;Although you can set the &lt;code&gt;charset&lt;/code&gt; in the options of the constructor, it&apos;s important to note that &apos;older&apos; versions of PHP (before 5.3.6) &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot; rel=&quot;noreferrer&quot;&gt;silently ignored the charset parameter&lt;/a&gt; in the DSN.&lt;/p&gt;\n&lt;h4&gt;Mysqli&lt;/h4&gt;\n&lt;p&gt;For mysqli we have to follow the same routine:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT); &lt;span class=&quot;hljs-comment&quot;&gt;// error reporting&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;127.0.0.1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8mb4&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// charset&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Explanation&lt;/h2&gt;\n&lt;p&gt;The SQL statement you pass to &lt;code&gt;prepare&lt;/code&gt; is parsed and compiled by the database server. By specifying parameters (either a &lt;code&gt;?&lt;/code&gt; or a named parameter like &lt;code&gt;:name&lt;/code&gt; in the example above) you tell the database engine where you want to filter on. Then when you call &lt;code&gt;execute&lt;/code&gt;, the prepared statement is combined with the parameter values you specify.&lt;/p&gt;\n&lt;p&gt;The important thing here is that the parameter values are combined with the compiled statement, not an SQL string. SQL injection works by tricking the script into including malicious strings when it creates SQL to send to the database. So by sending the actual SQL separately from the parameters, you limit the risk of ending up with something you didn&apos;t intend.&lt;/p&gt;\n&lt;p&gt;Any parameters you send when using a prepared statement will just be treated as strings (although the database engine may do some optimization so parameters may end up as numbers too, of course). In the example above, if the &lt;code&gt;$name&lt;/code&gt; variable contains &lt;code&gt;&apos;Sarah&apos;; DELETE FROM employees&lt;/code&gt; the result would simply be a search for the string &lt;code&gt;&quot;&apos;Sarah&apos;; DELETE FROM employees&quot;&lt;/code&gt;, and you will not end up with &lt;a href=&quot;http://xkcd.com/327/&quot; rel=&quot;noreferrer&quot;&gt;an empty table&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Another benefit of using prepared statements is that if you execute the same statement many times in the same session it will only be parsed and compiled once, giving you some speed gains.&lt;/p&gt;\n&lt;p&gt;Oh, and since you asked about how to do it for an insert, here&apos;s an example (using PDO):&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$preparedStatement&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;INSERT INTO table (column) VALUES (:column)&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$preparedStatement&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;([ &lt;span class=&quot;hljs-string&quot;&gt;&apos;column&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$unsafeValue&lt;/span&gt; ]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Can prepared statements be used for dynamic queries?&lt;/h2&gt;\n&lt;p&gt;While you can still use prepared statements for the query parameters, the structure of the dynamic query itself cannot be parametrized and certain query features cannot be parametrized.&lt;/p&gt;\n&lt;p&gt;For these specific scenarios, the best thing to do is use a whitelist filter that restricts the possible values.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Value whitelist&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// $dir can only be &apos;DESC&apos;, otherwise it will be &apos;ASC&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dir&lt;/span&gt;) || &lt;span class=&quot;hljs-variable&quot;&gt;$dir&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;DESC&apos;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-variable&quot;&gt;$dir&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;ASC&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To use the parameterized query, you need to use either Mysqli or PDO. To rewrite your example with mysqli, we would need something like the following.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;server&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;database_name&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;user-input&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table (column) VALUES (?)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;s&quot; means the database expects a string&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bind_param&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The key function you&apos;ll want to read up on there would be &lt;a href=&quot;http://php.net/mysqli.prepare&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysqli::prepare&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Also, as others have suggested, you may find it useful/easier to step up a layer of abstraction with something like &lt;a href=&quot;http://php.net/pdo&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Please note that the case you asked about is a fairly simple one and that more complex cases may require more complex approaches. In particular:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you want to alter the structure of the SQL based on user input, parameterized queries are not going to help, and the escaping required is not covered by &lt;code&gt;mysql_real_escape_string&lt;/code&gt;. In this kind of case, you would be better off passing the user&apos;s input through a whitelist to ensure only &apos;safe&apos; values are allowed through.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Every answer here covers only part of the problem.\nIn fact, there are &lt;strong&gt;four&lt;/strong&gt; different query parts which we can add to SQL dynamically: -&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;a string&lt;/li&gt;\n&lt;li&gt;a number&lt;/li&gt;\n&lt;li&gt;an identifier&lt;/li&gt;\n&lt;li&gt;a syntax keyword&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;And prepared statements cover only two of them.&lt;/p&gt;\n&lt;p&gt;But sometimes we have to make our query even more dynamic, adding operators or identifiers as well.\nSo, we will need different protection techniques.&lt;/p&gt;\n&lt;p&gt;In general, such a protection approach is based on &lt;em&gt;whitelisting&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;In this case, every dynamic parameter should be hardcoded in your script and chosen from that set.\nFor example, to do dynamic ordering:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$orders&lt;/span&gt;  = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;qty&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Field names&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;sort&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$orders&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// if we have such a name&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$orderby&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$orders&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// If not, first one will be set automatically. &lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM `table` ORDER BY &lt;span class=&quot;hljs-subst&quot;&gt;$orderby&lt;/span&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Value is safe&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To ease the process I wrote a &lt;a href=&quot;https://phpdelusions.net/pdo_examples/order_by&quot; rel=&quot;noreferrer&quot;&gt;whitelist helper function&lt;/a&gt; that does all the job in one line:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$orderby&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;white_list&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;orderby&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;qty&quot;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid field name&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;  = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM `table` ORDER BY `&lt;span class=&quot;hljs-subst&quot;&gt;$orderby&lt;/span&gt;`&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// sound and safe&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is another way to secure identifiers - escaping but I rather stick to whitelisting as a more robust and explicit approach. Yet as long as you have an identifier quoted, you can escape the quote character to make it safe. For example, by default for mysql you have to &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/identifiers.html&quot; rel=&quot;noreferrer&quot;&gt;double the quote character to escape it&lt;/a&gt;. For other other DBMS escaping rules would be different.&lt;/p&gt;\n&lt;p&gt;Still, there is an issue with SQL syntax keywords (such as &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;DESC&lt;/code&gt; and such), but white-listing seems the only approach in this case.&lt;/p&gt;\n&lt;p&gt;So, a general recommendation may be phrased as&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;Any variable that represents an SQL data literal, (or, to put it simply - an SQL string, or a number) must be added through a prepared statement. No Exceptions.&lt;/li&gt;\n&lt;li&gt;Any other query part, such as an SQL keyword, a table or a field name, or an operator - must be filtered through a white list.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;Update&lt;/h3&gt;\n&lt;p&gt;Although there is a general agreement on the best practices regarding SQL injection protection, there are &lt;strong&gt;still many bad practices as well.&lt;/strong&gt; And some of them too deeply rooted in the minds of PHP users. For instance, on this very page there are (although invisible to most visitors) &lt;strong&gt;more than 80 deleted answers&lt;/strong&gt; - all removed by the community due to bad quality or promoting bad and outdated practices. Worse yet, some of the bad answers aren&apos;t deleted, but rather prospering.&lt;/p&gt;\n&lt;p&gt;For example, &lt;a href=&quot;https://stackoverflow.com/a/11802479&quot;&gt;there(1)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/6381189&quot;&gt;are(2)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/60195/&quot;&gt;still(3)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/12426697/&quot;&gt;many(4)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/21179234&quot;&gt;answers(5)&lt;/a&gt;, including the &lt;a href=&quot;https://stackoverflow.com/a/60442&quot;&gt;second most upvoted answer&lt;/a&gt; suggesting you manual string escaping - an outdated approach that is proven to be insecure.&lt;/p&gt;\n&lt;p&gt;Or there is a slightly better answer that suggests just &lt;a href=&quot;https://stackoverflow.com/a/12710285&quot;&gt;another method of string formatting&lt;/a&gt; and even boasts it as the ultimate panacea. While of course, it is not. This method is no better than regular string formatting, yet it keeps all its drawbacks: it is applicable to strings only and, like any other manual formatting, it&apos;s essentially optional, non-obligatory measure, prone to human error of any sort.&lt;/p&gt;\n&lt;p&gt;I think that all this because of one very old superstition, supported by such authorities like &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_4:_Escaping_All_User_Supplied_Input&quot; rel=&quot;noreferrer&quot;&gt;OWASP&lt;/a&gt; or &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php#refsect1-function.mysql-real-escape-string-description&quot; rel=&quot;noreferrer&quot;&gt;the PHP manual&lt;/a&gt;, which proclaims equality between whatever &quot;escaping&quot; and protection from SQL injections.&lt;/p&gt;\n&lt;p&gt;Regardless of what PHP manual said for ages, &lt;strong&gt;&lt;code&gt;*_escape_string&lt;/code&gt; by no means makes data safe&lt;/strong&gt; and never has been intended to. Besides being useless for any SQL part other than string, manual escaping is wrong, because it is manual as opposite to automated.&lt;/p&gt;\n&lt;p&gt;And OWASP makes it even worse, stressing on escaping &lt;em&gt;user input&lt;/em&gt; which is an utter nonsense: there should be no such words in the context of injection protection. Every variable is potentially dangerous - no matter the source! Or, in other words - every variable has to be properly formatted to be put into a query - no matter the source again. It&apos;s the destination that matters. The moment a developer starts to separate the sheep from the goats (thinking whether some particular variable is &quot;safe&quot; or not) he/she takes his/her first step towards disaster. Not to mention that even the wording suggests bulk escaping at the entry point, resembling the very magic quotes feature - already despised, deprecated and removed.&lt;/p&gt;\n&lt;p&gt;So, unlike whatever &quot;escaping&quot;, prepared statements &lt;em&gt;is&lt;/em&gt; the measure that indeed protects from SQL injection (when applicable).&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d recommend using &lt;a href=&quot;http://ca3.php.net/manual/en/book.pdo.php&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; (PHP Data Objects) to run parameterized SQL queries. &lt;/p&gt;\n\n&lt;p&gt;Not only does this protect against SQL injection, but it also speeds up queries. &lt;/p&gt;\n\n&lt;p&gt;And by using PDO rather than &lt;code&gt;mysql_&lt;/code&gt;, &lt;code&gt;mysqli_&lt;/code&gt;, and &lt;code&gt;pgsql_&lt;/code&gt; functions, you make your application a little more abstracted from the database, in the rare occurrence that you have to switch database providers.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;PDO&lt;/code&gt; and prepared queries.&lt;/p&gt;\n&lt;p&gt;(&lt;code&gt;$conn&lt;/code&gt; is a &lt;code&gt;PDO&lt;/code&gt; object)&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tbl VALUES(:id, :name)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bindValue(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:id&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bindValue(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;execute();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As you can see, people suggest you use prepared statements at the most. It&apos;s not wrong, but when your query is executed &lt;strong&gt;just once&lt;/strong&gt; per process, there would be a slight performance penalty. &lt;/p&gt;\n\n&lt;p&gt;I was facing this issue, but I think I solved it in &lt;em&gt;very&lt;/em&gt; sophisticated way - the way hackers use to avoid using quotes. I used this in conjunction with emulated prepared statements. I use it to prevent &lt;em&gt;all&lt;/em&gt; kinds of possible SQL injection attacks.&lt;/p&gt;\n\n&lt;h2&gt;My approach:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you expect input to be integer make sure it&apos;s &lt;strong&gt;&lt;em&gt;really&lt;/em&gt;&lt;/strong&gt; integer. In a variable-type language like PHP it is this &lt;em&gt;very&lt;/em&gt; important. You can use for example this very simple but powerful solution: &lt;code&gt;sprintf(&quot;SELECT 1,2,3 FROM table WHERE 4 = %u&quot;, $input);&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you expect anything else from integer &lt;strong&gt;hex it&lt;/strong&gt;. If you hex it, you will perfectly escape all input. In C/C++ there&apos;s a function called &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/mysql-hex-string.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_hex_string()&lt;/code&gt;&lt;/a&gt;, in PHP you can use &lt;a href=&quot;http://www.php.net/manual/en/function.bin2hex.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;bin2hex()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t worry about that the escaped string will have a 2x size of its original length because even if you use &lt;code&gt;mysql_real_escape_string&lt;/code&gt;, PHP has to allocate same capacity &lt;code&gt;((2*input_length)+1)&lt;/code&gt;, which is the same.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;This hex method is often used when you transfer binary data, but I see no reason why not use it on all data to prevent SQL injection attacks. Note that you have to prepend data with &lt;code&gt;0x&lt;/code&gt; or use the MySQL function &lt;code&gt;UNHEX&lt;/code&gt; instead.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So, for example, the query:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; password &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;root&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will become:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; password &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x726f6f74&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; password &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UNHEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;726f6f74&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hex is the perfect escape. No way to inject.&lt;/p&gt;\n\n&lt;h2&gt;Difference between UNHEX function and 0x prefix&lt;/h2&gt;\n\n&lt;p&gt;There was some discussion in comments, so I finally want to make it clear. These two approaches are very similar, but they are a little different in some ways:&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;0x&lt;/code&gt; prefix can only be used for data columns such as &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;varchar&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;binary&lt;/code&gt;, etc.&lt;br&gt;\nAlso, its use is a little complicated if you are about to insert an empty string. You&apos;ll have to entirely replace it with &lt;code&gt;&apos;&apos;&lt;/code&gt;, or you&apos;ll get an error.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;UNHEX()&lt;/code&gt; works on &lt;strong&gt;any&lt;/strong&gt; column; you do not have to worry about the empty string.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Hex methods are often used as attacks&lt;/h2&gt;\n\n&lt;p&gt;Note that this hex method is often used as an SQL injection attack where integers are just like strings and escaped just with &lt;code&gt;mysql_real_escape_string&lt;/code&gt;. Then you can avoid the use of quotes.&lt;/p&gt;\n\n&lt;p&gt;For example, if you just do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT title FROM article WHERE id = &quot;&lt;/span&gt; . mysql_real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;an attack can inject you very &lt;em&gt;easily&lt;/em&gt;. Consider the following injected code returned from your script:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ... &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; table_name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; information_schema.tables;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and now just extract table structure:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ... &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; column_name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; information_schema.column &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; table_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; __0x61727469636c65__;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then just select whatever data ones want. Isn&apos;t it cool?&lt;/p&gt;\n\n&lt;p&gt;But if the coder of an injectable site would hex it, no injection would be possible because the query would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ... &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UNHEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2d312075...3635&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Deprecated Warning:&lt;/strong&gt;\n  This answer&apos;s sample code (like the question&apos;s sample code) uses PHP&apos;s &lt;code&gt;MySQL&lt;/code&gt; extension, which was deprecated in PHP 5.5.0 and removed entirely in PHP 7.0.0.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk. (Also, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; was removed in PHP 7.)&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The best way to prevent SQL Injection is to use &lt;strong&gt;Prepared Statements&lt;/strong&gt; &lt;em&gt;instead of escaping&lt;/em&gt;, as &lt;a href=&quot;https://stackoverflow.com/a/60496/2224584&quot;&gt;the accepted answer&lt;/a&gt; demonstrates. &lt;/p&gt;\n  \n  &lt;p&gt;There are libraries such as &lt;a href=&quot;https://github.com/auraphp/Aura.Sql&quot; rel=&quot;noreferrer&quot;&gt;Aura.Sql&lt;/a&gt; and &lt;a href=&quot;https://github.com/paragonie/easydb&quot; rel=&quot;noreferrer&quot;&gt;EasyDB&lt;/a&gt; that allow developers to use prepared statements easier. To learn more about why prepared statements are better at &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;noreferrer&quot;&gt;stopping SQL injection&lt;/a&gt;, refer to &lt;a href=&quot;https://stackoverflow.com/a/12118602/2224584&quot;&gt;this &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; bypass&lt;/a&gt; and &lt;a href=&quot;https://kraft.im/2015/05/how-emoji-saved-your-sites-hide/&quot; rel=&quot;noreferrer&quot;&gt;recently fixed Unicode SQL Injection vulnerabilities in WordPress&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Injection prevention - &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot; rel=&quot;noreferrer&quot;&gt;mysql_real_escape_string()&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PHP has a specially-made function to prevent these attacks. All you need to do is use the mouthful of a function, &lt;code&gt;mysql_real_escape_string&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;mysql_real_escape_string&lt;/code&gt; takes a string that is going to be used in a MySQL query and return the same string with all SQL injection attempts safely escaped. Basically, it will replace those troublesome quotes(&apos;) a user might enter with a MySQL-safe substitute, an escaped quote \\&apos;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; you must be connected to the database to use this function!&lt;/p&gt;\n\n&lt;p&gt;// Connect to MySQL&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$name_bad&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; OR 1&apos;&quot;&lt;/span&gt;; \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$name_bad&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$name_bad&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$query_bad&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM customers WHERE username = &apos;&lt;span class=&quot;hljs-variable&quot;&gt;$name_bad&lt;/span&gt;&apos;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Escaped Bad Injection: &amp;lt;br /&amp;gt;&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$query_bad&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$name_evil&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;; DELETE FROM customers WHERE 1 or username = &apos;&quot;&lt;/span&gt;; \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$name_evil&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$name_evil&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$query_evil&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM customers WHERE username = &apos;&lt;span class=&quot;hljs-variable&quot;&gt;$name_evil&lt;/span&gt;&apos;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Escaped Evil Injection: &amp;lt;br /&amp;gt;&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$query_evil&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can find more details in &lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot; rel=&quot;noreferrer&quot;&gt;MySQL - SQL Injection Prevention&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;nofollow noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;You could do something basic like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$safe_variable&lt;/span&gt; = mysqli_real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;user-input&quot;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt;);\nmysqli_query(&lt;span class=&quot;hljs-variable&quot;&gt;$dbConnection&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table (column) VALUES (&apos;&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$safe_variable&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This won&apos;t solve every problem, but it&apos;s a very good stepping stone. I left out obvious items such as checking the variable&apos;s existence, format (numbers, letters, etc.).&lt;/p&gt;\n    ","\n&lt;p&gt;Whatever you do end up using, make sure that you check your input hasn&apos;t already been mangled by &lt;code&gt;magic_quotes&lt;/code&gt; or some other well-meaning rubbish, and if necessary, run it through &lt;code&gt;stripslashes&lt;/code&gt; or whatever to sanitize it.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Deprecated Warning:&lt;/strong&gt;\n  This answer&apos;s sample code (like the question&apos;s sample code) uses PHP&apos;s &lt;code&gt;MySQL&lt;/code&gt; extension, which was deprecated in PHP 5.5.0 and removed entirely in PHP 7.0.0.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk. (Also, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; was removed in PHP 7.)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Parameterized query AND input validation is the way to go. There are many scenarios under which SQL injection may occur, even though &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; has been used.&lt;/p&gt;\n\n&lt;p&gt;Those examples are vulnerable to SQL injection:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;] : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;RunQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT userid, username FROM sql_injection_test LIMIT &lt;span class=&quot;hljs-subst&quot;&gt;$offset&lt;/span&gt;, 10&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$order&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;] : &lt;span class=&quot;hljs-string&quot;&gt;&apos;userid&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$order&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$order&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;RunQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT userid, username FROM sql_injection_test ORDER BY `&lt;span class=&quot;hljs-subst&quot;&gt;$order&lt;/span&gt;`&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In both cases, you can&apos;t use &lt;code&gt;&apos;&lt;/code&gt; to protect the encapsulation.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.webappsec.org/projects/articles/091007.txt&quot; rel=&quot;noreferrer&quot;&gt;Source&lt;/a&gt;: &lt;em&gt;The Unexpected SQL Injection (When Escaping Is Not Enough)&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In my opinion, the best way to generally prevent SQL injection in your PHP application (or any web application, for that matter) is to think about your application&apos;s architecture. If the only way to protect against SQL injection is to remember to use a special method or function that does The Right Thing every time you talk to the database, you are doing it wrong. That way, it&apos;s just a matter of time until you forget to correctly format your query at some point in your code.&lt;/p&gt;\n\n&lt;p&gt;Adopting the MVC pattern and a framework like &lt;a href=&quot;http://cakephp.org/&quot; rel=&quot;noreferrer&quot;&gt;CakePHP&lt;/a&gt; or &lt;a href=&quot;http://codeigniter.com/&quot; rel=&quot;noreferrer&quot;&gt;CodeIgniter&lt;/a&gt; is probably the right way to go: Common tasks like creating secure database queries have been solved and centrally implemented in such frameworks. They help you to organize your web application in a sensible way and make you think more about loading and saving objects than about securely constructing single SQL queries. &lt;/p&gt;\n    ","\n&lt;p&gt;There are many ways of preventing SQL injections and other SQL hacks. You can easily find it on the Internet (Google Search). Of course &lt;strong&gt;PDO is one of the good solutions.&lt;/strong&gt; But I would like to suggest you some good links prevention from SQL injection.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot; rel=&quot;noreferrer&quot;&gt;What is SQL injection and how to prevent&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://php.net/manual/en/security.database.sql-injection.php&quot; rel=&quot;noreferrer&quot;&gt;PHP manual for SQL injection&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://docs.microsoft.com/en-gb/archive/blogs/brian_swan/whats-the-right-way-to-prevent-sql-injection-in-php-scripts&quot; rel=&quot;noreferrer&quot;&gt;Microsoft explanation of SQL injection and prevention in PHP&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;And some other like &lt;em&gt;&lt;a href=&quot;https://web.archive.org/web/20190221025712/http://www.digifuzz.net/archives/2007/07/preventing-sql-injection-with-php/&quot; rel=&quot;noreferrer&quot;&gt;Preventing SQL injection with MySQL and PHP&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now, &lt;strong&gt;why you do you need to prevent your query from SQL injection?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I would like to let you know: Why do we try for preventing SQL injection with a short example below:&lt;/p&gt;\n\n&lt;p&gt;Query for login authentication match:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select * from users where email=&apos;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; and password=&apos;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; &quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if someone (a hacker) puts&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;$_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;]= admin@emali.com&lt;span class=&quot;hljs-string&quot;&gt;&apos; OR &apos;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and password anything....&lt;/p&gt;\n\n&lt;p&gt;The query will be parsed into the system only up to:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;$query=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select * from users where email=&apos;admin@emali.com&apos; OR &apos;1=1&apos;;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The other part will be discarded. So, what will happen? A non-authorized user (hacker) will be able to log in as administrator without having his/her password. Now, he/she can do anything that the administrator/email person can do. See, it&apos;s very dangerous if SQL injection is not prevented.&lt;/p&gt;\n    ","\n&lt;p&gt;I favor &lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot; rel=&quot;noreferrer&quot;&gt;stored procedures&lt;/a&gt; (&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/stored-routines-syntax.html&quot; rel=&quot;noreferrer&quot;&gt;MySQL has had stored procedures support since 5.0&lt;/a&gt;) from a security point of view - the advantages are -&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Most databases (including &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/stored-routines-privileges.html&quot; rel=&quot;noreferrer&quot;&gt;MySQL&lt;/a&gt;) enable user access to be restricted to executing stored procedures. The fine-grained security access control is useful to prevent escalation of privileges attacks. This prevents compromised applications from being able to run SQL directly against the database.&lt;/li&gt;\n&lt;li&gt;They abstract the raw SQL query from the application so less information of the database structure is available to the application. This makes it harder for people to understand the underlying structure of the database and design suitable attacks.&lt;/li&gt;\n&lt;li&gt;They accept only parameters, so the advantages of parameterized queries are there. Of course - IMO you still need to sanitize your input - especially if you are using dynamic SQL inside the stored procedure.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The disadvantages are -&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;They (stored procedures) are tough to maintain and tend to multiply very quickly. This makes managing them an issue.&lt;/li&gt;\n&lt;li&gt;They are not very suitable for dynamic queries - if they are built to accept dynamic code as parameters then a lot of the advantages are negated.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I think if someone wants to use PHP and MySQL or some other dataBase server:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Think about learning &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDO&lt;/a&gt; (PHP Data Objects)  it is a database access layer providing a uniform method of access to multiple databases.&lt;/li&gt;\n&lt;li&gt;Think about learning &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQLi&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Libraries examples:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;---- &lt;strong&gt;PDO&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;----- No placeholders - ripe for SQL injection! &lt;strong&gt;It&apos;s bad&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdoConnection&lt;/span&gt;-&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO parents (name, addr, city) values (&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$addr&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$city&lt;/span&gt;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;----- Unnamed placeholders&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdoConnection&lt;/span&gt;-&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO parents (name, addr, city) values (?, ?, ?);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;----- Named placeholders&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$request&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdoConnection&lt;/span&gt;-&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO parents (name, addr, city) value (:name, :addr, :city)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;--- &lt;strong&gt;MySQLi&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;$request = $mysqliConnection-&amp;gt;prepare(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\n       SELECT * FROM trainers\n       WHERE name = ?\n       AND email = ?\n       AND last_login &amp;gt; ?&apos;&lt;/span&gt;);\n\n    $query-&amp;gt;bind_param(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first_param&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;second_param&apos;&lt;/span&gt;, $mail, &lt;span class=&quot;hljs-keyword&quot;&gt;time&lt;/span&gt;() - &lt;span class=&quot;hljs-number&quot;&gt;3600&lt;/span&gt;);\n    $query-&amp;gt;execute();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;PDO wins this battle with ease. With support for twelve\ndifferent database drivers and named parameters, we can get used to its API. From a security standpoint, both of them are safe as long as the developer uses them the way they are supposed to be used&lt;/p&gt;\n    ","\n&lt;p&gt;If possible, cast the types of your parameters. But it&apos;s only working on simple types like int, bool, and float.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$unsafe_variable&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user_id&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$safe_variable&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$unsafe_variable&lt;/span&gt; ;\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table (column) VALUES (&apos;&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$safe_variable&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to take advantage of cache engines, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Redis_%28data_store%29&quot; rel=&quot;noreferrer&quot;&gt;Redis&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Memcached&quot; rel=&quot;noreferrer&quot;&gt;Memcached&lt;/a&gt;, maybe DALMP could be a choice. It uses pure &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot; rel=&quot;noreferrer&quot;&gt;MySQLi&lt;/a&gt;. Check this: &lt;a href=&quot;http://dalmp.readthedocs.org/en/latest/database/PExecute.html&quot; rel=&quot;noreferrer&quot;&gt;DALMP Database Abstraction Layer for MySQL using PHP.&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;Also, you can &apos;prepare&apos; your arguments before preparing your query so that you can build dynamic queries and at the end have a fully prepared statements query. &lt;a href=&quot;http://dalmp.readthedocs.org/en/latest/database/Prepare.html&quot; rel=&quot;noreferrer&quot;&gt;DALMP Database Abstraction Layer for MySQL using PHP.&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;For those unsure of how to use PDO (coming from the &lt;code&gt;mysql_&lt;/code&gt; functions), I made a &lt;a href=&quot;https://github.com/Xeoncross/DByte/blob/master/DByte/DB.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;very, very simple PDO wrapper&lt;/a&gt; that is a single file. It exists to show how easy it is to do all the common things applications need to be done. Works with PostgreSQL, MySQL, and SQLite.&lt;/p&gt;\n&lt;p&gt;Basically, read it &lt;a href=&quot;http://php.net/pdo&quot; rel=&quot;nofollow noreferrer&quot;&gt;while you read the manual&lt;/a&gt; to see how to put the PDO functions to use in real life to make it simple to store and retrieve values in the format &lt;strong&gt;you&lt;/strong&gt; want.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;I want a single column&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt; = &lt;span class=&quot;hljs-variable constant_&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:column&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT COUNT(*) FROM `user`&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;I want an array(key =&amp;gt; value) results (i.e. for making a selectbox)&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pairs&lt;/span&gt; = DB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pairs&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT `id`, `username` FROM `user`&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;I want a single row result&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = DB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;row&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM `user` WHERE `id` = ?&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$user_id&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;I want an array of results&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$banned_users&lt;/span&gt; = DB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM `user` WHERE `banned` = ?&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;TRUE&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;nofollow noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;A few guidelines for escaping special characters in SQL statements.&lt;/p&gt;\n&lt;p&gt;Don&apos;t use &lt;a href=&quot;http://www.php.net/manual/en/intro.mysql.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQL&lt;/a&gt;. This extension is deprecated. Use &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQLi&lt;/a&gt; or &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDO&lt;/a&gt; instead.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;MySQLi&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;For manually escaping special characters in a string you can use the &lt;a href=&quot;http://www.php.net/manual/en/mysqli.real-escape-string.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;mysqli_real_escape_string&lt;/a&gt; function. The function will not work properly unless the correct character set is set with &lt;a href=&quot;http://www.php.net/manual/en/mysqli.set-charset.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;mysqli_set_charset&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;host&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;database&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;charset&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table (column) VALUES (&apos;&lt;span class=&quot;hljs-subst&quot;&gt;$string&lt;/span&gt;&apos;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For automatic escaping of values with prepared statements, use &lt;a href=&quot;http://www.php.net/manual/en/mysqli.prepare.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;mysqli_prepare&lt;/a&gt;, and &lt;a href=&quot;http://www.php.net/manual/en/mysqli-stmt.bind-param.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;mysqli_stmt_bind_param&lt;/a&gt; where types for the corresponding bind variables must be provided for an appropriate conversion:&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table (column1, column2) VALUES (?,?)&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bind_param(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$integer&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;execute();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;No matter if you use prepared statements or &lt;code&gt;mysqli_real_escape_string&lt;/code&gt;, you always have to know the type of input data you&apos;re working with.&lt;/p&gt;\n&lt;p&gt;So if you use a prepared statement, you must specify the types of the variables for &lt;code&gt;mysqli_stmt_bind_param&lt;/code&gt; function.&lt;/p&gt;\n&lt;p&gt;And the use of &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; is for, as the name says, escaping special characters in a string, so it will not make integers safe. The purpose of this function is to prevent breaking the strings in SQL statements, and the damage to the database that it could cause. &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; is a useful function when used properly, especially when combined with &lt;code&gt;sprintf&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&apos; OR name LIKE &apos;%John%&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$integer&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;5 OR id != 0&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = sprintf( &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT id, email, pass, name FROM members WHERE email =&apos;%s&apos; AND id = %d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$integer&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;;\n// SELECT &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, email, pass, name FROM members WHERE email =&lt;span class=&quot;hljs-string&quot;&gt;&apos;x\\&apos;&lt;/span&gt; OR name LIKE \\&lt;span class=&quot;hljs-string&quot;&gt;&apos;%John%&apos;&lt;/span&gt; AND &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt; = 5\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$integer&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;99999999999999999999&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = sprintf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT id, email, pass, name FROM members WHERE email =&apos;%s&apos; AND id = %d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$integer&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;;\n// SELECT &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, email, pass, name FROM members WHERE email =&lt;span class=&quot;hljs-string&quot;&gt;&apos;x\\&apos;&lt;/span&gt; OR name LIKE \\&lt;span class=&quot;hljs-string&quot;&gt;&apos;%John%&apos;&lt;/span&gt; AND &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt; = 2147483647\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;nofollow noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk. (Also, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; was removed in PHP 7.)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: The mysql extension is removed at this time. we recommend using the &lt;em&gt;PDO extension&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Using this PHP function &lt;code&gt;mysql_escape_string()&lt;/code&gt; you can get a good prevention in a fast way.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;.mysql_escape_string($name_from_html_form).&quot;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;mysql_escape_string&lt;/code&gt;  Escapes a string for use in a mysql_query&lt;/p&gt;\n&lt;p&gt;For more prevention, you can add at the end ...&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;wHERE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt;  LIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally you get:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;.mysql_escape_string($name_from_html_form).&quot;&apos;&lt;/span&gt; LIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The simple alternative to this problem could be solved by granting appropriate permissions in the database itself.\nFor example: if you are using a MySQL database then enter into the database through terminal or the UI provided and just follow this command:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; database &lt;span class=&quot;hljs-keyword&quot;&gt;TO&lt;/span&gt; username@&lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt; IDENTIFIED &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will restrict the user to only get confined with the specified query&apos;s only. Remove the delete permission and so the data would never get deleted from the query fired from the PHP page.\nThe second thing to do is to flush the privileges so that the MySQL refreshes the permissions and updates.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;FLUSH PRIVILEGES; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;more information about &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/flush.html&quot; rel=&quot;noreferrer&quot;&gt;flush&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;To see the current privileges for the user fire the following query.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mysql.user &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Learn more about &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/grant.html&quot; rel=&quot;noreferrer&quot;&gt;GRANT&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Regarding many useful answers, I hope to add some value to this thread.&lt;/p&gt;\n\n&lt;p&gt;SQL injection is an attack that can be done through user inputs (inputs that filled by a user and then used inside queries). The SQL injection patterns are correct query syntax while we can call it: bad queries for bad reasons, and we assume that there might be a bad person that try to get secret information (bypassing access control) that affect the three principles of security (confidentiality, integrity, and availability).&lt;/p&gt;\n\n&lt;p&gt;Now, our point is to prevent security threats such as SQL injection attacks, the question asking (how to prevent an SQL injection attack using PHP), be more realistic, data filtering or clearing input data is the case when using user-input data inside such query, using PHP or any other programming language is not the case, or as recommended by more people to use modern technology such as prepared statement or any other tools that currently supporting SQL injection prevention, consider that these tools not available anymore? How do you secure your application?&lt;/p&gt;\n\n&lt;p&gt;My approach against SQL injection is: clearing user-input data before sending it to the database (before using it inside any query).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Data filtering for (converting unsafe data to safe data)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Consider that &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP#History&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot; rel=&quot;noreferrer&quot;&gt;MySQLi&lt;/a&gt; are not available. How can you secure your application? Do you force me to use them? What about other languages other than PHP? I prefer to provide general ideas as it can be used for wider border, not just for a specific language.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;SQL user (limiting user privilege): most common SQL operations are (SELECT, UPDATE, INSERT), then, why give the UPDATE privilege to a user that does not require it? For example, &lt;strong&gt;login, and search pages&lt;/strong&gt; are only using SELECT, then, why use DB users in these pages with high privileges?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;RULE: do not create one database user for all privileges. For all SQL operations, you can create your scheme like (deluser, selectuser, updateuser) as usernames for easy usage.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_privilege&quot; rel=&quot;noreferrer&quot;&gt;principle of least privilege&lt;/a&gt;.&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;p&gt;Data filtering: before building any query user input, it should be validated and filtered. For programmers, it&apos;s important to define some properties for each user-input variables:\n&lt;strong&gt;data type, data pattern, and data length&lt;/strong&gt;. A field that is a number between (x and y) must be exactly validated using the exact rule, and for a field that is a string (text): pattern is the case, for example, a username must contain only some characters, lets say [a-zA-Z0-9_-.]. The length varies between (x and n) where x and n (integers, x &amp;lt;=n).\n&lt;strong&gt;Rule: creating exact filters and validation rules are best practices for me.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use other tools: Here, I will also agree with you that a prepared statement (parametrized query) and stored procedures. The disadvantages here is these ways require advanced skills which do not exist for most users. The basic idea here is to distinguish between the SQL query and the data that is used inside. Both approaches can be used even with unsafe data, because the user-input data here does not add anything to the original query, such as (any or x=x).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For more information, please read &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;OWASP SQL Injection Prevention Cheat Sheet&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now, if you are an advanced user, start using this defense as you like, but, for beginners, if they can&apos;t quickly implement a stored procedure and prepared the statement, it&apos;s better to filter input data as much they can.&lt;/p&gt;\n\n&lt;p&gt;Finally, let&apos;s consider that a user sends this text below instead of entering his/her username:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; IF(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(Password,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;,BENCHMARK(&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;,SHA1(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)),&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;,Password &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; mysql.user &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;root&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This input can be checked early without any prepared statement and stored procedures, but to be on the safe side, using them starts after user-data filtering and validation.&lt;/p&gt;\n\n&lt;p&gt;The last point is detecting unexpected behavior which requires more effort and complexity; it&apos;s not recommended for normal web applications.&lt;/p&gt;\n\n&lt;p&gt;Unexpected behavior in the above user input is SELECT, UNION, IF, SUBSTRING, BENCHMARK, SHA, and root. Once these words detected, you can avoid the input.&lt;/p&gt;\n\n&lt;h2&gt;UPDATE 1:&lt;/h2&gt;\n\n&lt;p&gt;A user commented that this post is useless, OK! Here is what &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_3:_Escaping_All_User_Supplied_Input&quot; rel=&quot;noreferrer&quot;&gt;OWASP.ORG provided&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Primary defenses: &lt;br&gt;\n   &lt;br&gt;\n      Option #1: Use of Prepared Statements (Parameterized Queries) &lt;br&gt;\n      Option #2: Use of Stored Procedures &lt;br&gt;\n      Option #3: Escaping all User Supplied Input  &lt;br&gt;\n   &lt;br&gt;\n  Additional defenses: &lt;br&gt;\n   &lt;br&gt;\n      Also Enforce: Least Privilege &lt;br&gt;\n      Also Perform: White List Input Validation &lt;br&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As you may know, claiming an article should be supported by a valid argument, at least by one reference! Otherwise, it&apos;s considered as an attack and a bad claim!&lt;/p&gt;\n\n&lt;h2&gt;Update 2:&lt;/h2&gt;\n\n&lt;p&gt;From the PHP manual, &lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot; rel=&quot;noreferrer&quot;&gt;PHP: Prepared Statements - Manual&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Escaping and SQL injection &lt;br&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Bound variables will be escaped automatically by the server. The\n  server inserts their escaped values at the appropriate places into the\n  statement template before execution. A hint must be provided to the\n  server for the type of bound variable, to create an appropriate\n  conversion. See the mysqli_stmt_bind_param() function for more\n  information. &lt;br&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The automatic escaping of values within the server is sometimes\n  considered a security feature to prevent SQL injection. The same\n  degree of security can be achieved with non-prepared statements if\n  input values are escaped correctly. &lt;br&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Update 3:&lt;/h2&gt;\n\n&lt;p&gt;I created test cases for knowing how PDO and MySQLi send the query to the MySQL server when using a prepared statement:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;PDO:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&apos;1&apos;&apos;&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Malicious keyword&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM awa_user WHERE userame =:username&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sth&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_CURSOR&lt;/span&gt; =&amp;gt; PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;CURSOR_FWDONLY&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$sth&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:username&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Query Log:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-number&quot;&gt;189&lt;/span&gt; Query &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; awa_user &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; userame &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\\&lt;span class=&quot;hljs-string&quot;&gt;&apos;1\\&apos;&lt;/span&gt;\\&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-number&quot;&gt;189&lt;/span&gt; Quit\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;MySQLi:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM awa_user WHERE username =?&quot;&lt;/span&gt;)) {\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bind_param(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&apos;1&apos;&apos;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;execute();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Query Log:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Prepare&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; awa_user &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;?\n    &lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Execute&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; awa_user &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\\&lt;span class=&quot;hljs-string&quot;&gt;&apos;1\\&apos;&lt;/span&gt;\\&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; Quit\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;h3&gt;It&apos;s clear that a prepared statement is also escaping the data, nothing else.&lt;/h3&gt;\n\n&lt;p&gt;As also mentioned in the above statement,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The automatic escaping of values within the server is sometimes considered a security feature to prevent SQL injection. The same degree of security can be achieved with non-prepared statements, if input values are escaped correctly&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Therefore, this proves that data validation such as &lt;code&gt;intval()&lt;/code&gt; is a good idea for integer values before sending any query. In addition, preventing malicious user data before sending the query is &lt;strong&gt;a correct and valid approach&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Please see this question for more detail: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18026088/pdo-sends-raw-query-to-mysql-while-mysqli-sends-prepared-query-both-produce-the&quot;&gt;PDO sends raw query to MySQL while Mysqli sends prepared query, both produce the same result&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;References:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/#UnionInjections&quot; rel=&quot;noreferrer&quot;&gt;SQL Injection Cheat Sheet&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection&quot; rel=&quot;noreferrer&quot;&gt;SQL Injection&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Information_security&quot; rel=&quot;noreferrer&quot;&gt;Information security&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/security-principles.html&quot; rel=&quot;noreferrer&quot;&gt;Security Principles&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Data_validation&quot; rel=&quot;noreferrer&quot;&gt;Data validation&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk. (Also, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; was removed in PHP 7.)&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Deprecated Warning&lt;/strong&gt;: The mysql extension is deprecated at this time. we recommend using the &lt;em&gt;PDO extension&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I use three different ways to prevent my web application from being vulnerable to SQL injection.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use of &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;, which is a pre-defined function in &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot; rel=&quot;noreferrer&quot;&gt;PHP&lt;/a&gt;, and this code add backslashes to the following characters: &lt;code&gt;\\x00&lt;/code&gt;, &lt;code&gt;\\n&lt;/code&gt;, &lt;code&gt;\\r&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt;, &lt;code&gt;&apos;&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;\\x1a&lt;/code&gt;. Pass the input values as parameters to minimize the chance of SQL injection.&lt;/li&gt;\n&lt;li&gt;The most advanced way is to use PDOs.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I hope this will help you.&lt;/p&gt;\n\n&lt;p&gt;Consider the following query:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$iId = mysql_real_escape_string(&quot;1 OR 1=1&quot;);\n $sSql = &quot;SELECT * FROM table WHERE id = $iId&quot;;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;mysql_real_escape_string() will not protect here. If you use single quotes (&apos; &apos;) around your variables inside your query is what protects you against this. Here is an solution below for this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$iId = (int) mysql_real_escape_string(&quot;1 OR 1=1&quot;);\n $sSql = &quot;SELECT * FROM table WHERE id = $iId&quot;;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;question&lt;/a&gt; has some good answers about this.&lt;/p&gt;\n\n&lt;p&gt;I suggest, using PDO is the best option.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;mysql_real_escape_string()&lt;/code&gt; is deprecated as of PHP 5.5.0. Use either mysqli or PDO.&lt;/p&gt;\n\n&lt;p&gt;An alternative to mysql_real_escape_string() is &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt; ( mysqli &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; , &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$escapestr&lt;/span&gt; )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$iId&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;real_escape_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 OR 1=1&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table WHERE id = &lt;span class=&quot;hljs-variable&quot;&gt;$iId&lt;/span&gt;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simple way would be to use a PHP framework like &lt;a href=&quot;http://en.wikipedia.org/wiki/Codeigniter#CodeIgniter&quot; rel=&quot;noreferrer&quot;&gt;CodeIgniter&lt;/a&gt; or &lt;a href=&quot;https://laravel.com/&quot; rel=&quot;noreferrer&quot;&gt;Laravel&lt;/a&gt; which have inbuilt features like filtering and active-record so that you don&apos;t have to worry about these nuances.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Warning: the approach described in this answer only applies to very specific scenarios and isn&apos;t secure since SQL injection attacks do not only rely on being able to inject &lt;code&gt;X=Y&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If the attackers are trying to hack into the form via PHP&apos;s &lt;code&gt;$_GET&lt;/code&gt; variable or with the URL&apos;s query string, you would be able to catch them if they&apos;re not secure.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;RewriteCond %{QUERY_STRING} ([0-9]+)=([0-9]+)\nRewriteRule ^(.*) ^/track.php\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because &lt;code&gt;1=1&lt;/code&gt;, &lt;code&gt;2=2&lt;/code&gt;, &lt;code&gt;1=2&lt;/code&gt;, &lt;code&gt;2=1&lt;/code&gt;, &lt;code&gt;1+1=2&lt;/code&gt;, etc... are the common questions to an SQL database of an attacker. Maybe also it&apos;s used by many hacking applications.&lt;/p&gt;\n\n&lt;p&gt;But you must be careful, that you must not rewrite a safe query from your site. The code above is giving you a tip, to rewrite or redirect &lt;em&gt;(it depends on you)&lt;/em&gt; that hacking-specific dynamic query string into a page that will store the attacker&apos;s &lt;a href=&quot;http://en.wikipedia.org/wiki/IP_address&quot; rel=&quot;noreferrer&quot;&gt;IP address&lt;/a&gt;, or EVEN THEIR COOKIES, history, browser, or any other sensitive information, so you can deal with them later by banning their account or contacting authorities.&lt;/p&gt;\n    ","\n&lt;p&gt;A good idea is to use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot; rel=&quot;noreferrer&quot;&gt;object-relational mapper&lt;/a&gt; like &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot; rel=&quot;noreferrer&quot;&gt;Idiorm&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;$user = ORM::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;for_table&lt;/span&gt;(&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;user&lt;/span&gt;&apos;)\n&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;where_equal&lt;/span&gt;(&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;username&lt;/span&gt;&apos;, &lt;span class=&quot;hljs-symbol&quot;&gt;&apos;j4mie&lt;/span&gt;&apos;)\n&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;find_one&lt;/span&gt;();\n\n$user&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;first_name = &lt;span class=&quot;hljs-symbol&quot;&gt;&apos;Jamie&lt;/span&gt;&apos;;\n$user&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;save&lt;/span&gt;();\n\n$tweets = ORM::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;for_table&lt;/span&gt;(&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;tweet&lt;/span&gt;&apos;)\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;select&lt;/span&gt;(&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;tweet&lt;/span&gt;.*&apos;)\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;user&lt;/span&gt;&apos;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-symbol&quot;&gt;&apos;user&lt;/span&gt;.id&apos;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-symbol&quot;&gt;&apos;tweet&lt;/span&gt;.user_id&apos;\n    ))\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;where_equal&lt;/span&gt;(&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;user&lt;/span&gt;.username&apos;, &lt;span class=&quot;hljs-symbol&quot;&gt;&apos;j4mie&lt;/span&gt;&apos;)\n    &lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;find_many&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;foreach&lt;/span&gt; ($tweets &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; $tweet) {\n    echo $tweet&lt;span class=&quot;hljs-punctuation&quot;&gt;-&amp;gt;&lt;/span&gt;text;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It not only saves you from SQL injections, but from syntax errors too! It also supports collections of models with method chaining to filter or apply actions to multiple results at once and multiple connections.&lt;/p&gt;\n    ","\n&lt;p&gt;There are so many answers for &lt;strong&gt;PHP and MySQL&lt;/strong&gt;, but here is code for &lt;strong&gt;PHP and Oracle&lt;/strong&gt; for preventing SQL injection as well as regular use of oci8 drivers:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt; = oci_connect(&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$connection_string&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = oci_parse(&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UPDATE table SET field = :xx WHERE ID = 123&apos;&lt;/span&gt;);\noci_bind_by_name(&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:xx&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$fieldval&lt;/span&gt;);\noci_execute(&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Deprecated Warning:&lt;/strong&gt;\n  This answer&apos;s sample code (like the question&apos;s sample code) uses PHP&apos;s &lt;code&gt;MySQL&lt;/code&gt; extension, which was deprecated in PHP 5.5.0 and removed entirely in PHP 7.0.0.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot; rel=&quot;noreferrer&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk. (Also, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; was removed in PHP 7.)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Using &lt;a href=&quot;http://in3.php.net/pdo&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; and &lt;a href=&quot;http://in3.php.net/mysqli&quot; rel=&quot;noreferrer&quot;&gt;MYSQLi&lt;/a&gt; is a good practice to prevent SQL injections, but if you really want to work with MySQL functions and queries, it would be better to use&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot; rel=&quot;noreferrer&quot;&gt;mysql_real_escape_string&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$unsafe_variable&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user_input&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are more abilities to prevent this: like identify - if the input is a string, number, char or array, there are so many inbuilt functions to detect this. Also, it would be better to use these functions to check input data.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://in3.php.net/is_string&quot; rel=&quot;noreferrer&quot;&gt;is_string&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$unsafe_variable&lt;/span&gt; = (is_string(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user_input&apos;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user_input&apos;&lt;/span&gt;] : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://in3.php.net/manual/en/function.is-numeric.php&quot; rel=&quot;noreferrer&quot;&gt;is_numeric&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$unsafe_variable&lt;/span&gt; = (is_numeric(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user_input&apos;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user_input&apos;&lt;/span&gt;] : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it is so much better to use those functions to check input data with &lt;code&gt;mysql_real_escape_string&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve written this little function several years ago:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sqlvprintf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$DB_LINK&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$ctr&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ensureConnection&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Connect to database if not connected already.&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$values&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$DB_LINK&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_null&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;NULL&apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_int&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_float&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Only numeric, string, array and NULL arguments allowed in a query. Argument &apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$ctr&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; is not a basic type, it\\&apos;s type is &apos;&lt;/span&gt;. &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;gettype&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;). &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$values&lt;/span&gt;[] = &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$ctr&lt;/span&gt;++;\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_replace_callback&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;/{(\\\\d+)}/&apos;&lt;/span&gt;, \n        function(&lt;span class=&quot;hljs-variable&quot;&gt;$match&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; ($&lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title&quot;&gt;isset&lt;/span&gt;($&lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;[$&lt;span class=&quot;hljs-title&quot;&gt;match&lt;/span&gt;[1]]))\n            {\n                &lt;span class=&quot;hljs-title&quot;&gt;return&lt;/span&gt; $&lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;[$&lt;span class=&quot;hljs-title&quot;&gt;match&lt;/span&gt;[1]];\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$match&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n            }\n        },\n        &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;\n    );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;runEscapedQuery&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$preparedQuery&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/*, ...*/&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_slice&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;func_get_args&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$results&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;runQuery&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sqlvprintf&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$preparedQuery&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// Run query and fetch results.   &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$results&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This allows running statements in an one-liner C#-ish String.Format like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;runEscapedQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO Whatever (id, foo, bar) VALUES ({0}, {1}, {2})&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$numericVar&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$stringVar1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$stringVar2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It escapes considering the variable type. If you try to parameterize table, column names, it would fail as it puts every string in quotes which is an invalid syntax.&lt;/p&gt;\n\n&lt;p&gt;SECURITY UPDATE: The previous &lt;code&gt;str_replace&lt;/code&gt; version allowed injections by adding {#} tokens into user data. This &lt;code&gt;preg_replace_callback&lt;/code&gt; version doesn&apos;t cause problems if the replacement contains these tokens.&lt;/p&gt;\n    "],"5":["\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Locked&lt;/b&gt;. There are &lt;a href=&quot;/help/locked-posts&quot;&gt;disputes about this answers content&lt;/a&gt; being resolved at this time. It is not currently accepting new interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;You can&apos;t parse [X]HTML with regex. Because HTML can&apos;t be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &amp;lt;center&amp;gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the nerves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow &lt;i&gt;it is too late it is too late we cannot be saved&lt;/i&gt; the transgression of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) &lt;i&gt;dear lord help us how can anyone survive this scourge&lt;/i&gt; using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes &lt;i&gt;using rege&lt;/i&gt;x as a tool to process HTML establishes a brea&lt;i&gt;ch between this world&lt;/i&gt; and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but &lt;i&gt;more corrupt) a mere glimp&lt;/i&gt;se of the world of reg&lt;b&gt;ex parsers for HTML will ins&lt;/b&gt;tantly transport a p&lt;i&gt;rogrammer&apos;s consciousness i&lt;/i&gt;nto a w&lt;i&gt;orl&lt;/i&gt;d of ceaseless screaming, he comes&lt;strike&gt;, the pestilent sl&lt;/strike&gt;ithy regex-infection wil&lt;b&gt;l devour your HT&lt;/b&gt;ML parser, application and existence for all time like Visual Basic only worse &lt;i&gt;he comes he com&lt;/i&gt;es &lt;i&gt;do not fi&lt;/i&gt;ght h&lt;b&gt;e com̡e̶s, ̕h̵i&lt;/b&gt;s un̨ho͞ly radiańcé de&lt;i&gt;stro҉ying all enli̍̈́̂̈́ghtenment, HTML tags &lt;b&gt;lea͠ki̧n͘g fr̶ǫm ̡yo͟ur eye͢s̸ ̛l̕ik͏e liq&lt;/b&gt;uid p&lt;/i&gt;ain, the song of re̸gular expre&lt;strike&gt;ssion parsing &lt;/strike&gt;will exti&lt;i&gt;nguish the voices of mor&lt;b&gt;tal man from the sp&lt;/b&gt;here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t&lt;/i&gt;he f&lt;code&gt;inal snuf&lt;/code&gt;fing o&lt;i&gt;f the lie&lt;b&gt;s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T A&lt;/b&gt;&lt;/i&gt;&lt;b&gt;LL IS L&lt;/b&gt;OST th&lt;i&gt;e pon̷y he come&lt;/i&gt;s he c̶̮om&lt;strike&gt;es he co&lt;/strike&gt;&lt;b&gt;&lt;strike&gt;me&lt;/strike&gt;s t&lt;i&gt;he&lt;/i&gt; ich&lt;/b&gt;or permeat&lt;i&gt;es al&lt;/i&gt;l MY FAC&lt;i&gt;E MY FACE h god n&lt;b&gt;o NO NOO̼&lt;/b&gt;&lt;/i&gt;&lt;b&gt;OO N&lt;/b&gt;Θ stop t&lt;i&gt;he an*̶͑̾̾̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨ&lt;/i&gt;e̠̅s&lt;code&gt; ͎a̧͈͖r̽̾̈́͒͑e&lt;/code&gt; n&lt;b&gt;ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ T&lt;/b&gt;O͇̹̺ͅƝ̴ȳ̳ TH̘&lt;b&gt;Ë͖́̉ ͠P̯͍̭O̚N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝&lt;/b&gt;S̨̥̫͎̭ͯ̿̔̀ͅ&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Have you tried using an XML parser instead?&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Moderator&apos;s Note&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This post is locked to prevent inappropriate edits to its content. The post looks exactly as it is supposed to look - there are no problems with its content. Please do not flag it for our attention.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;While &lt;em&gt;arbitrary&lt;/em&gt; HTML with only a regex is impossible, it&apos;s sometimes appropriate to use them for parsing a &lt;em&gt;limited, known&lt;/em&gt; set of HTML.  &lt;/p&gt;\n\n&lt;p&gt;If you have a small set of HTML pages that you want to scrape data from and then stuff into a database, regexes might work fine.  For example, I recently wanted to get the names, parties, and districts of Australian federal Representatives, which I got off of the Parliament&apos;s web site.  This was a limited, one-time job.  &lt;/p&gt;\n\n&lt;p&gt;Regexes worked just fine for me, and were very fast to set up.&lt;/p&gt;\n    ","\n&lt;p&gt;I think the flaw here is that HTML is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Context-free_grammar&quot; rel=&quot;noreferrer&quot;&gt;Chomsky Type 2 grammar (context free grammar)&lt;/a&gt; and a regular expression is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_grammar&quot; rel=&quot;noreferrer&quot;&gt;Chomsky Type 3 grammar (regular grammar)&lt;/a&gt;. Since a Type 2 grammar is fundamentally more complex than a Type 3 grammar (see the &lt;a href=&quot;http://en.wikipedia.org/wiki/Chomsky_hierarchy&quot; rel=&quot;noreferrer&quot;&gt;Chomsky hierarchy&lt;/a&gt;), it is &lt;em&gt;mathematically impossible&lt;/em&gt; to parse XML with a regular expression.&lt;/p&gt;\n&lt;p&gt;But many will try, and some will even claim success - but until others find the fault and totally mess you up.&lt;/p&gt;\n    ","\n&lt;p&gt;Don&apos;t listen to these guys. You totally &lt;strong&gt;can&lt;/strong&gt; parse context-free grammars with regex if you break the task into smaller pieces. You can generate the correct pattern with a script that does each of these in order: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Solve the Halting Problem.&lt;/li&gt;\n&lt;li&gt;Square a circle.&lt;/li&gt;\n&lt;li&gt;Work out the Traveling Salesman Problem in O(log n) or less. If it&apos;s any more than that, you&apos;ll run out of RAM and the engine will hang.&lt;/li&gt;\n&lt;li&gt;The pattern will be pretty big, so make sure you have an algorithm that losslessly compresses random data.&lt;/li&gt;\n&lt;li&gt;Almost there - just divide the whole thing by zero. Easy-peasy.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I haven&apos;t quite finished the last part myself, but I know I&apos;m getting close. It keeps throwing &lt;code&gt;CthulhuRlyehWgahnaglFhtagnException&lt;/code&gt;s for some reason, so I&apos;m going to port it to VB 6 and use &lt;code&gt;On Error Resume Next&lt;/code&gt;. I&apos;ll update with the code once I investigate this strange door that just opened in the wall. Hmm.&lt;/p&gt;\n\n&lt;p&gt;P.S. Pierre de Fermat also figured out how to do it, but the margin he was writing in wasn&apos;t big enough for the code.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: use a parser if you have the option. That said...&lt;/p&gt;\n\n&lt;p&gt;This is the regex I use (!) to match HTML tags:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;(?:&quot;[^&quot;]*&quot;[&apos;&quot;]*|&apos;[^&apos;]*&apos;[&apos;&quot;]*|[^&apos;&quot;&amp;gt;])+&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It may not be perfect, but I ran this code through a &lt;em&gt;lot&lt;/em&gt; of HTML. Note that it even catches strange things like &lt;code&gt;&amp;lt;a name=&quot;badgenerator&quot;&quot;&amp;gt;&lt;/code&gt;, which show up on the web.&lt;/p&gt;\n\n&lt;p&gt;I guess to make it not match self contained tags, you&apos;d either want to use &lt;a href=&quot;https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732395#1732395&quot;&gt;Kobi&lt;/a&gt;&apos;s negative look-behind:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;(?:&quot;[^&quot;]*&quot;[&apos;&quot;]*|&apos;[^&apos;]*&apos;[&apos;&quot;]*|[^&apos;&quot;&amp;gt;])+(?&amp;lt;!/\\s*)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or just combine if and if not.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To downvoters:&lt;/strong&gt; This is working code from an actual product. I doubt anyone reading this page will get the impression that it is socially acceptable to use regexes on HTML. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: I should note that this regex still breaks down in the presence of CDATA blocks, comments, and script and style elements. Good news is, you can get rid of those using a regex...  &lt;/p&gt;\n    ","\n&lt;p&gt;There are people that will tell you that the Earth is round (or perhaps that the Earth is an oblate spheroid if they want to use strange words). They are lying.&lt;/p&gt;\n&lt;p&gt;There are people that will tell you that Regular Expressions shouldn&apos;t be recursive. They are limiting you. They need to subjugate you, and they do it by keeping you in ignorance.&lt;/p&gt;\n&lt;p&gt;You can live in their reality or take the red pill.&lt;/p&gt;\n&lt;p&gt;Like Lord Marshal (is he a relative of the Marshal .NET class?), I have seen the &lt;strike&gt;Underverse&lt;/strike&gt; Stack Based Regex-Verse and returned with &lt;strike&gt;powers&lt;/strike&gt; knowledge you can&apos;t imagine. Yes, I think there were an Old One or two protecting them, but they were watching football on the TV, so it wasn&apos;t difficult.&lt;/p&gt;\n&lt;p&gt;I think the XML case is quite simple. The RegEx (in the .NET syntax), deflated and coded in base64 to make it easier to comprehend by your feeble mind, should be something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;7L0HYBxJliUmL23Ke39K9UrX4HShCIBgEyTYkEAQ7MGIzeaS7B1pRyMpqyqBymVWZV1mFkDM7Z28\n995777333nvvvfe6O51OJ/ff/z9cZmQBbPbOStrJniGAqsgfP358Hz8itn6Po9/3eIue3+Px7/3F\n86enJ8+/fHn64ujx7/t7vFuUd/Dx65fHJ6dHW9/7fd/t7fy+73Ye0v+f0v+Pv//JnTvureM3b169\nOP7i9Ogyr5uiWt746u+BBqc/8dXx86PP7tzU9mfQ9tWrL18d3UGnW/z7nZ9htH/y9NXrsy9fvPjq\ni5/46ss3p4z+x3e8b452f9/x93a2HxIkH44PpgeFyPD6lMAEHUdbcn8ffTP9fdTrz/8rBPCe05Iv\np9WsWF788Obl9MXJl0/PXnwONLozY747+t7x9k9l2z/4vv4kqo1//993+/vf2kC5HtwNcxXH4aOf\nLRw2z9/v8WEz2LTZcpaV1TL/4c3h66ex2Xv95vjF0+PnX744PbrOm59ZVhso5UHYME/dfj768H7e\nYy5uQUydDAH9+/4eR11wHbqdfPnFF6cv3ogq/V23t++4z4620A13cSzd7O1s/77rpw+ePft916c7\nO/jj2bNnT7e/t/397//M9+ibA/7s6ZNnz76PP0/kT2rz/Ts/s/0NArvziYxVEZWxbm93xsrUfnlm\nrASN7Hf93u/97vvf+2Lx/e89L7+/FSXiz4Bkd/hF5mVq9Yik7fcncft9350QCu+efkr/P6BfntEv\nz+iX9c4eBrFz7wEwpB9P+d9n9MfuM3yzt7Nzss0/nuJfbra3e4BvZFR7z07pj3s7O7uWJM8eCkme\nnuCPp88MfW6kDeH7+26PSTX8vu+ePAAiO4LVp4zIPWC1t7O/8/+pMX3rzo2KhL7+8s23T1/RhP0e\nvyvm8HbsdmPXYDVhtpdnAzJ1k1jeufOtUAM8ffP06Zcnb36fl6dPXh2f/F6nRvruyHfMd9rgJp0Y\ngvsRx/6/ZUzfCtX4e5hTndGzp5jQo9e/z+s3p1/czAUMlts+P3tz+uo4tISd745uJxvb3/v4ZlWs\nmrjfd9SG/swGPD/6+nh+9MF4brTBRmh1Tl5+9eT52ckt5oR0xldPzp7GR8pfuXf5PWJv4nJIwvbH\nW3c+GY3vPvrs9zj8Xb/147/n7/b7/+52DD2gsSH8zGDvH9+i9/fu/PftTfTXYf5hB+9H7P1BeG52\nMTtu4S2cTAjDizevv3ry+vSNb8N+3+/1po2anj4/hZsGt3TY4GmjYbEKDJ62/pHB+3/LmL62wdsU\n1J18+eINzTJr3dMvXr75fX7m+MXvY9XxF2e/9+nTgPu2bgwh5U0f7u/74y9Pnh6/OX4PlA2UlwTn\nxenJG8L996VhbP3++PCrV68QkrjveITxr2TIt+lL+f3k22fPn/6I6f/fMqZvqXN/K4Xps6sazUGZ\nGeQlar49xEvajzI35VRevDl78/sc/b7f6jkG8Va/x52N4L9lBe/kZSh1hr9fPj19+ebbR4AifyuY\n12efv5CgGh9TroR6Pj2l748iYxYgN8Z7pr0HzRLg66FnRvcjUft/45i+pRP08vTV6TOe2N/9jv37\nR9P0/5YxbXQDeK5E9R12XdDA/4zop+/9Ht/65PtsDVlBBUqko986WsDoWqvbPD2gH/T01DAC1NVn\n3/uZ0feZ+T77fd/GVMkA4KjeMcg6RcvQLRl8HyPaWVStdv17PwHV0bOB9xUh7rfMp5Zu3icBJp25\nD6f0NhayHyfI3HXHY6YYCw7Pz17fEFhQKzS6ZWChrX+kUf7fMqavHViEPPKjCf1/y5hukcyPTvjP\nmHQCppRDN4nbVFPaT8+ekpV5/TP8g/79mVPo77PT1/LL7/MzL7548+XvdfritflFY00fxIsvSQPS\nmvctdYZpbt7vxKRfj3018OvC/hEf/79lTBvM3debWj+b8KO0wP+3OeM2aYHumuCAGonmCrxw9cVX\nX1C2d4P+uSU7eoBUMzI3/f9udjbYl/el04dI7s8fan8dWRjm6gFx+NrKeFP+WX0CxBdPT58df/X8\nDaWLX53+xFdnr06f/szv++NnX7x8fnb6NAhIwsbPkPS7iSUQAFETvP2Tx8+/Og0Xt/yBvDn9vd/c\netno8S+81QKXptq/ffzKZFZ+4e/743e8zxino+8RX37/k595h5/H28+y7fPv490hQdJ349E+txB3\nzPZ5J/jsR8bs/y1j2hh/2fkayOqEmYcej0cXUWMN7QrqBwjDrVZRfyQM3xjj/EgYvo4wfLTZrnVS\nebdKq0XSZJvzajKQDUv1/P3NwbEP7cN5+Odivv9/ysPfhHfkOP6b9Fl+91v7LD9aCvp/+Zi+7lLQ\nj0zwNzYFP+/Y6r1NcFeDbfBIo8rug3zS3/3WPumPlN3/y8f0I2X3cz4FP+/Y6htSdr2I42fEuSPX\n/ewpL4e9/n1evzn94hb+Plpw2+dnbyh79zx0CsPvbq0lb+UQ/h7xvqPq/Gc24PnR18fzVrp8I57d\nmehj7ebk5VdPnp+d3GJOSP189eTsaXyk/JV7l98j4SAZgRxtf7x155PR+O6jz36Pw9/1Wz/+e/5u\nv//vbsfQAxobws8M9v7xLXp/785/395ED4nO1wx5fsTeH4LnRva+eYY8rpZUBFb/j/jfm8XAvfEj\n4/b/ljF1F9B/jx5PhAkp1nu/+y3n+kdZp/93jWmjJ/M11TG++VEG6puZn593PPejoOyHMQU/79jq\nGwrKfpSB+tmcwZ93XPkjZffDmIKfd2z1DSm7bmCoPPmjBNT74XkrVf71I/Sf6wTU7XJA4RB+lIC6\nmW1+xN5GWw1/683C5rnj/m364cmr45Pf6/SN9H4Us4LISn355vjN2ZcvtDGT6fHvapJcMISmxc0K\nMAD4IyP6/5Yx/SwkP360FvD1VTH191mURr/HUY+2P3I9boPnz7Ju/pHrcWPnP3I9/r/L3sN0v52z\n0fEgNrgbL8/Evfh9fw/q5Xf93u/97vvf+2Lx/e89L7+/Fe3iZ37f34P5h178kTfx/5YxfUs8vY26\n7/d4/OWbb5++ogn7PX5XzOHtOP3GrsHmqobOVO/8Hh1Gk/TPl198QS6w+rLb23fcZ0fMaTfjsv29\n7Zul7me2v0FgRoYVURnf9nZEkDD+H2VDf8hjeq8xff1s6GbButNLacEtefHm9VdPXp++CRTw7/v9\nr6vW8b9eJ0+/PIHzs1HHdyKE/x9L4Y+s2f+PJPX/1dbsJn3wrY6wiqv85vjVm9Pnp+DgN8efM5va\nj794+eb36Xz3mAf5+58+f3r68s230dRvJcxKn/l//oh3f+7H9K2O0r05PXf85s2rH83f/1vGdAvd\nw+qBFqsoWvzspozD77EpXYeZ7yzdfxy0ec+l+8e/8FbR84+Wd78xbvn/qQQMz/J7L++GPB7N0MQa\n2vTMBwjDrVI0PxKGb4xxfiQMX0cYPuq/Fbx2C1sU8yEF+F34iNsx1xOGa9t6l/yX70uqmxu+qBGm\nAxlxWwVS11O97ULqlsFIUvUnT4/fHIuL//3f9/t9J39Y9m8W/Tuc296yUeX/b0PiHwUeP1801Y8C\nj/9vz9+PAo8f+Vq35Jb/n0rAz7Kv9aPA40fC8P+RMf3sC8PP08DjR1L3DXHoj6SuIz/CCghZNZb8\nfb/Hf/2+37tjvuBY9vu3jmRvxNeGgQAuaAF6Pwj8/+e66M8/7rwpRNj6uVwXZRl52k0n3FVl95Q+\n+fz0KSu73/dtkGDYdvZgSP5uskadrtViRKyal2IKAiQfiW+FI+tET/9/Txj9SFf8SFf8rOuKzagx\n+r/vD34mUADO1P4/AQAA//8=\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The options to set is &lt;code&gt;RegexOptions.ExplicitCapture&lt;/code&gt;. The capture group you are looking for is &lt;code&gt;ELEMENTNAME&lt;/code&gt;. If the capture group &lt;code&gt;ERROR&lt;/code&gt; is not empty then there was a parsing error and the Regex stopped.&lt;/p&gt;\n&lt;p&gt;If you have problems reconverting it to a human-readable regex, this should help:&lt;/p&gt;\n&lt;pre class=&quot;lang-csharp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FromBase64&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; str&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] byteArray = Convert.FromBase64String(str);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; msIn = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream(byteArray))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; msOut = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream()) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ds = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeflateStream(msIn, CompressionMode.Decompress)) {\n            ds.CopyTo(msOut);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Encoding.UTF8.GetString(msOut.ToArray());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are unsure, no, I&apos;m NOT kidding (but perhaps I&apos;m lying). It WILL work. I&apos;ve built tons of unit tests to test it, and I have even used (part of) the &lt;a href=&quot;http://www.w3.org/XML/Test/&quot; rel=&quot;noreferrer&quot;&gt;conformance tests&lt;/a&gt;. It&apos;s a tokenizer, not a full-blown parser, so it will only split the XML into its component tokens. It won&apos;t parse/integrate DTDs.&lt;/p&gt;\n&lt;p&gt;Oh... if you want the source code of the regex, with some auxiliary methods:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://pastebin.com/hzYazFVb&quot; rel=&quot;noreferrer&quot;&gt;regex to tokenize an xml&lt;/a&gt; or &lt;a href=&quot;https://topaz.github.io/paste/#XQAAAQD5hQAAAAAAAAAUD8Q6Ijb26igjgaUO/S4VLr/Od1fatGY8ycZ79EV23K5OCMWdbg2gH+s7o5uxCPlMSN1JtgtVM2MKR6CqK1eEDhtb5JZyw5spb/FtqvAc3ed4JkSFjzVZF7RTA0u9sRtmbSyVgOdqUpqnibi1CDqHGXGOzOlBKLxSopincGbR0sbzm+mA3nrgLtwe1kqAj3MWoPyOrU8e7ipjvkI+e0LALD6uam6dq+hXtGQJ8LYSeoUpKjGW3LDV7Oh3mE3OBu9AaQF7PiSsUTC2b/AqI1rEOqBWwwkUevXnMnpPYZ+FlYhJ4zgvOyR3YStbExN6Q8h79n9w8lEqI1rr4B2xDaqTgsFd+rg0Iu3S3aaRhII9wdUaipKiEKuDujWemedqT6P+ohRi9CC/lGr8Kz5+QlErsB/97LiffPcTizNflkF8TnInJba8R0w9nhL70OX9IijnRbrHYLnEK62mliz7JFFmSWu9KqzbyrC+OkAQIi0hdmLzITt7lz8OCUKWocUyBeP3JSgXOGX/P8sw3WF6q6QBu0XmN4EgtHfcBb130ewOQ34MhCEw8q79ycePiduoP7MlbzbG5Iw8202AlrfjFp96dawcaALWOIMDGEaM7X1ZC5RFAfcpHNLu/KxctKOoyhIzYWS+LTMMPBx13L4IYXiDysJuG4acbJiDiKfla4i8Z0QGrPLvF7/1A5ufy7yLck9adE1aXZUD7yxX6qXICx+Ue6Fq+PHDslFeU6Q74LWjj/tu8CGM55EMItBrpz5EcTgeoBxNuA/vrYi/Ybm7hMscw/pYGL9RG5H+ok3OzKrWdjintjxvVV+cGNWsN/LNWC3bGp5OJaArP5OCehsMwcAQMQkNi8cpSX+cP6nRaV5nO/5borKcXufMdw8g1zmgTqul+0qISwn3MNK/Y0Qd+KgBIumvIUQT1HzLpbehbjAkYFg+PBUr4BPDAGiEN+lvtSsn3R3yFMyX0TcYe0a5dSBSMpq4P/ZCRJy+2pFLvtIMYJwph34zhLPJOoFK0LiiT+Vgt4yjHLQwGfzSug2oT5TaUAFwOWY2SeTxb5SfaxTB+DX8B+jhlX2DvEVV/EUWcoEkImMx1v9u+yuIshY69ikFaZfcrcCFPRLu6RVog+sLNgXuk/Q+OnoUuoeok367pwuiw26/byFpSFogS2DIRIG2J3agwqa0XPtcHY2j3H2niOigKaOX1oeansYqIjvGykcysm43IhAR2QEcoPKZOhi1bwSwpP98hpin+dkVJDD8f0w/ipDIMpIDRTv45VQWAzdK4yLqaauZRR76QeiAi618bOSiO0LnUYcbyRsU32v9UJ5LMZjzKo/trYrBgY/F4rZG6X+GSl03MbbQM3CHqo1iNc9voknMrNfmuSb7eGB2sNN/B5l0fk57pspZsJ2EuE1v5NtBjwrS9qMQzehoE7sh5YxbNyj9x44FSZDbV/2PXhAgkVZ63td5m8AfPngjAReF4bTvL/rlIWMCbJL6IQKAt2jH4l4wpfFm0qssBl2vdsfNXPhTzRWbB+UPJmxUBGv8YF0rd4Ol3SpuF8fF368DUP96pt96T8W56LIhPULh6yECYWX83QwMyoEvkcgeEJIEm08InYo7UWKRiQml0BTb+YOcy+V20V+k+YAZM2hEjbTNNnXqCvtmVytw1fA6OESzlpcOWzmFwKqwhRAtRJ+Z/YhQLhC7J1xdbFc3cG9hihArqtMRXCCFLcf24zl5rhtV9NJRZdn56s2qspoMtk8m+vGXaLFKdt3j8O5KEaPCILeUbXLS6gtm+ByiGuIF4GWAWcstCh0IQ5j+0J/+5SRp27y/Q0kvZNhD/HrqNmONDE6h7qaE6fKrhrmCLo8XcM59eiEeJuO/KWSDVbpwaDhrx+DS0ngI5TeWmAliRXYUISI/B+hhjFwawuXlK1FAm0Ohyf6XBo4dwoU/SYOHva8wB2qiPlVCvRvs7vK9FkWQjzNw0v/sDHy+nd49LiIdJkvBPsYS72H/E7kLt7P7WVJgpENY4AqXXGtZ6/L5lcByXgFxDgZbiWMKf1GCfb5QNLauPHZBjxI45JvZsDlG3sUaHwnRyYLiDE+ly+w53l2GgVX4wpPQ1JPjCIvLJ8fmKy4B5HOC5uJYTfUyjAeKP5aIloVVGESb8SGbXRfcme11BZmPyBvjivWZ8kABDh6aKGZdUZCvMnlbZnwKYUWl1ZSFi5AMlw0nEu9pFy5h/AIE+yRTioJ9VYn7ZC4njk5p7V7g+ynr8xGDRAcwLQPVUuCVCDVDSx1eGfWa6IT9G6aVHA1+SHx+sPvHNmWCMYpYWPY5b6l5DYXlTPqChQBwMxcGQnusdNEsEvQYV4FBJhYjgLMxfjBoLPPvysNmpg+qItxnBaDZgMEFa4I3Ek1e7f412UaMloHzTKuzotNQE3quvOH0/9zORWQ=&quot; rel=&quot;noreferrer&quot;&gt;the full plain regex&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In shell, you can parse &lt;a href=&quot;https://en.wikipedia.org/wiki/HTML&quot; rel=&quot;noreferrer&quot;&gt;HTML&lt;/a&gt; using &lt;a href=&quot;https://en.wikipedia.org/wiki/Sed&quot; rel=&quot;noreferrer&quot;&gt;sed&lt;/a&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://sed.sourceforge.net/grabbag/scripts/turing.sed&quot; rel=&quot;noreferrer&quot;&gt;Turing.sed&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Write HTML parser (homework)&lt;/li&gt;\n&lt;li&gt;???&lt;/li&gt;\n&lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Related (why you shouldn&apos;t use regex match):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/if-you-like-regular-expressions-so-much-why-dont-you-marry-them/&quot; rel=&quot;noreferrer&quot;&gt;If You Like Regular Expressions So Much, Why Don&apos;t You Marry Them?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&quot; rel=&quot;noreferrer&quot;&gt;Regular Expressions: Now You Have Two Problems&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://danlec.com/blog/hacking-stackoverflow-com-s-html-sanitizer&quot; rel=&quot;noreferrer&quot;&gt;Hacking stackoverflow.com&apos;s HTML sanitizer&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I agree that the right tool to parse XML and &lt;em&gt;especially HTML&lt;/em&gt; is a parser and not a regular expression engine. However, like others have pointed out, sometimes using a regex is quicker, easier, and gets the job done if you know the data format.&lt;/p&gt;\n\n&lt;p&gt;Microsoft actually has a section of &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/best-practices&quot; rel=&quot;noreferrer&quot;&gt;Best Practices for Regular Expressions in the .NET Framework&lt;/a&gt; and specifically talks about &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/best-practices#consider-the-input-source&quot; rel=&quot;noreferrer&quot;&gt;Consider[ing] the Input Source&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Regular Expressions do have limitations, but have you considered the following?&lt;/p&gt;\n\n&lt;p&gt;The .NET framework is unique when it comes to regular expressions in that it supports &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing_group_definition&quot; rel=&quot;noreferrer&quot;&gt;Balancing Group Definitions&lt;/a&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;See &lt;a href=&quot;https://weblogs.asp.net/whaggard/377025&quot; rel=&quot;noreferrer&quot;&gt;Matching Balanced Constructs with .NET Regular Expressions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;See &lt;a href=&quot;https://docs.microsoft.com/archive/blogs/bclteam/net-regular-expressions-regex-and-balanced-matching-ryan-byington&quot; rel=&quot;noreferrer&quot;&gt;.NET Regular Expressions: Regex and Balanced Matching&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;See Microsoft&apos;s docs on &lt;a href=&quot;https://docs.microsoft.com/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing_group_definition&quot; rel=&quot;noreferrer&quot;&gt;Balancing Group Definitions&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For this reason, I believe you CAN parse XML using regular expressions. Note however, that it &lt;strong&gt;must be valid XML&lt;/strong&gt; (&lt;em&gt;browsers are very forgiving of HTML and allow bad XML syntax inside HTML&lt;/em&gt;). This is possible since the &quot;Balancing Group Definition&quot; will allow the regular expression engine to act as a PDA.&lt;/p&gt;\n\n&lt;p&gt;Quote from article 1 cited above:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;.NET Regular Expression Engine&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;As described above properly balanced constructs cannot be described by\n  a regular expression. However, the .NET regular expression engine\n  provides a few constructs that allow balanced constructs to be\n  recognized. &lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;code&gt;(?&amp;lt;group&amp;gt;)&lt;/code&gt; - pushes the captured result on the capture stack with\n  the name group.&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;(?&amp;lt;-group&amp;gt;)&lt;/code&gt; - pops the top most capture with the name group off the\n  capture stack.&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;(?(group)yes|no)&lt;/code&gt; - matches the yes part if there exists a group\n  with the name group otherwise matches no part.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;These constructs allow for a .NET regular expression to emulate a\n  restricted PDA by essentially allowing simple versions of the stack\n  operations: push, pop and empty. The simple operations are pretty much\n  equivalent to increment, decrement and compare to zero respectively.\n  This allows for the .NET regular expression engine to recognize a\n  subset of the context-free languages, in particular the ones that only\n  require a simple counter. This in turn allows for the non-traditional\n  .NET regular expressions to recognize individual properly balanced\n  constructs.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Consider the following regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?=&amp;lt;ul\\s+id=&quot;matchMe&quot;\\s+type=&quot;square&quot;\\s*&amp;gt;)\n(?&amp;gt;\n   &amp;lt;!-- .*? --&amp;gt;                  |\n   &amp;lt;[^&amp;gt;]*/&amp;gt;                      |\n   (?&amp;lt;opentag&amp;gt;&amp;lt;(?!/)[^&amp;gt;]*[^/]&amp;gt;)  |\n   (?&amp;lt;-opentag&amp;gt;&amp;lt;/[^&amp;gt;]*[^/]&amp;gt;)     |\n   [^&amp;lt;&amp;gt;]*\n)*\n(?(opentag)(?!))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use the flags:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Singleline&lt;/li&gt;\n&lt;li&gt;IgnorePatternWhitespace (not necessary if you collapse regex and remove all whitespace)&lt;/li&gt;\n&lt;li&gt;IgnoreCase (not necessary)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Regular Expression Explained (inline)&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?=&amp;lt;ul\\s+id=&quot;matchMe&quot;\\s+type=&quot;square&quot;\\s*&amp;gt;) # match start with &amp;lt;ul id=&quot;matchMe&quot;...\n(?&amp;gt;                                        # atomic group / don&apos;t backtrack (faster)\n   &amp;lt;!-- .*? --&amp;gt;                 |          # match xml / html comment\n   &amp;lt;[^&amp;gt;]*/&amp;gt;                     |          # self closing tag\n   (?&amp;lt;opentag&amp;gt;&amp;lt;(?!/)[^&amp;gt;]*[^/]&amp;gt;) |          # push opening xml tag\n   (?&amp;lt;-opentag&amp;gt;&amp;lt;/[^&amp;gt;]*[^/]&amp;gt;)    |          # pop closing xml tag\n   [^&amp;lt;&amp;gt;]*                                  # something between tags\n)*                                         # match as many xml tags as possible\n(?(opentag)(?!))                           # ensure no &apos;opentag&apos; groups are on stack\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can try this at &lt;a href=&quot;http://derekslager.com/blog/posts/2007/09/a-better-dotnet-regular-expression-tester.ashx&quot; rel=&quot;noreferrer&quot;&gt;A Better .NET Regular Expression Tester&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I used the sample source of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;matchMe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;square&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;stuff...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;more stuff&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;still more&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Another &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;ul&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;, oh my!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This found the match:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;matchMe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;square&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;stuff...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;more stuff&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;still more&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Another &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;ul&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;, oh my!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;although it actually came out like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;matchMe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;square&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;stuff...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;more stuff&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;still more&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;                         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Another &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;ul&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;, oh my!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;                         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lastly, I really enjoyed Jeff Atwood&apos;s article:  &lt;a href=&quot;https://blog.codinghorror.com/parsing-html-the-cthulhu-way/&quot; rel=&quot;noreferrer&quot;&gt;Parsing Html The Cthulhu Way&lt;/a&gt;. Funny enough, it cites the answer to this question that currently has over 4k votes.&lt;/p&gt;\n    ","\n&lt;p&gt;I suggest using &lt;a href=&quot;http://querypath.org/&quot; rel=&quot;noreferrer&quot;&gt;QueryPath&lt;/a&gt; for parsing XML and HTML in PHP.  It&apos;s basically much the same syntax as jQuery, only it&apos;s on the server side.&lt;/p&gt;\n    ","\n&lt;p&gt;While the answers that you can&apos;t parse HTML with regexes are correct, they don&apos;t apply here. The OP just wants to parse one HTML tag with regexes, and that is something that can be done with a regular expression.&lt;/p&gt;\n\n&lt;p&gt;The suggested regex is wrong, though:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-z]+) *[^/]*?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you add something to the regex, by backtracking it can be forced to match silly things like &lt;code&gt;&amp;lt;a &amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;[^/]&lt;/code&gt; is too permissive. Also note that &lt;code&gt;&amp;lt;space&amp;gt;*[^/]*&lt;/code&gt; is redundant, because the &lt;code&gt;[^/]*&lt;/code&gt; can also match spaces.&lt;/p&gt;\n\n&lt;p&gt;My suggestion would be&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-z]+)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;(?&amp;lt;! ... )&lt;/code&gt; is (in Perl regexes) the negative look-behind. It reads &quot;a &amp;lt;, then a word, then anything that&apos;s not a &amp;gt;, the last of which may not be a /, followed by &amp;gt;&quot;.&lt;/p&gt;\n\n&lt;p&gt;Note that this allows things like &lt;code&gt;&amp;lt;a/ &amp;gt;&lt;/code&gt; (just like the original regex), so if you want something more restrictive, you need to build a regex to match attribute pairs separated by spaces.&lt;/p&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([^\\s]+)(\\s[^&amp;gt;]*?)?(?&amp;lt;!/)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is similar to yours, but the last &lt;code&gt;&amp;gt;&lt;/code&gt; must not be after a slash, and also accepts &lt;code&gt;h1&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Sun Tzu, an ancient Chinese strategist, general, and philosopher, said:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It is said that if you know your enemies and know yourself, you can win a hundred battles without a single loss.\n  If you only know yourself, but not your opponent, you may win or may lose.\n  If you know neither yourself nor your enemy, you will always endanger yourself.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In this case your enemy is HTML and you are either yourself or regex.  You might even be Perl with irregular regex. Know HTML.  Know yourself.&lt;/p&gt;\n\n&lt;p&gt;I have composed a haiku describing the nature of HTML.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;HTML has\ncomplexity exceeding\nregular language.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have also composed a haiku describing the nature of regex in Perl.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;The regex you seek\nis defined within the phrase\n&amp;lt;([a-zA-Z]+)(?:[^&amp;gt;]*[^/]*)?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php\n$selfClosing = explode(&apos;,&apos;, &apos;area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed&apos;);\n\n$html = &apos;\n&amp;lt;p&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;foo&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;hr/&amp;gt;\n&amp;lt;br/&amp;gt;\n&amp;lt;div&amp;gt;name&amp;lt;/div&amp;gt;&apos;;\n\n$dom = new DOMDocument();\n$dom-&amp;gt;loadHTML($html);\n$els = $dom-&amp;gt;getElementsByTagName(&apos;*&apos;);\nforeach ( $els as $el ) {\n    $nodeName = strtolower($el-&amp;gt;nodeName);\n    if ( !in_array( $nodeName, $selfClosing ) ) {\n        var_dump( $nodeName );\n    }\n}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;string(4) &quot;html&quot;\nstring(4) &quot;body&quot;\nstring(1) &quot;p&quot;\nstring(1) &quot;a&quot;\nstring(3) &quot;div&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically just define the element node names that are self closing, load the whole html string into a DOM library, grab all elements, loop through and filter out ones which aren&apos;t self closing and operate on them.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m sure you already know by now that you shouldn&apos;t use regex for this purpose.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know your exact need for this, but if you are also using .NET, couldn&apos;t you use &lt;a href=&quot;http://www.codeplex.com/htmlagilitypack&quot; rel=&quot;noreferrer&quot;&gt;Html Agility Pack&lt;/a&gt;?&lt;/p&gt;\n\n&lt;p&gt;Excerpt:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;It is a .NET code library that allows\n  you to parse &quot;out of the web&quot; HTML\n  files. The parser is very tolerant\n  with &quot;real world&quot; malformed HTML.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You want the first &lt;code&gt;&amp;gt;&lt;/code&gt; not preceded by a &lt;code&gt;/&lt;/code&gt;.  Look &lt;a href=&quot;http://www.regular-expressions.info/lookaround.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; for details on how to do that.  It&apos;s referred to as negative lookbehind.&lt;/p&gt;\n\n&lt;p&gt;However, a naïve implementation of that will end up matching &lt;code&gt;&amp;lt;bar/&amp;gt;&amp;lt;/foo&amp;gt;&lt;/code&gt; in this example document&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bar&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can you provide a little more information on the problem you&apos;re trying to solve?  Are you iterating through tags programatically?&lt;/p&gt;\n    ","\n&lt;p&gt;The W3C explains parsing in a pseudo regexp form:&lt;br&gt;\n&lt;a href=&quot;http://www.w3.org/TR/REC-xml-names/#ns-using&quot; rel=&quot;noreferrer&quot;&gt;W3C Link&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Follow the var links for &lt;code&gt;QName&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, and &lt;code&gt;Attribute&lt;/code&gt; to get a clearer picture.&lt;br&gt;\nBased on that you can create a pretty good regexp to handle things like stripping tags.&lt;/p&gt;\n    ","\n&lt;p&gt;If you need this for PHP:&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://www.php.net/manual/en/function.dom-import-simplexml.php&quot; rel=&quot;noreferrer&quot;&gt;PHP DOM&lt;/a&gt; &lt;a href=&quot;http://php.net/manual/en/class.domdocument.php&quot; rel=&quot;noreferrer&quot;&gt;functions&lt;/a&gt; won&apos;t work properly unless it is properly formatted XML. No matter how much better their use is for the rest of mankind.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://simplehtmldom.sourceforge.net/&quot; rel=&quot;noreferrer&quot;&gt;simplehtmldom&lt;/a&gt; is good, but I found it a bit buggy, and it is is quite memory heavy [Will crash on large pages.]&lt;/p&gt;\n\n&lt;p&gt;I have never used &lt;a href=&quot;http://querypath.org/&quot; rel=&quot;noreferrer&quot;&gt;querypath&lt;/a&gt;, so can&apos;t comment on its usefulness. &lt;/p&gt;\n\n&lt;p&gt;Another one to try is my &lt;a href=&quot;http://github.com/siteroller/domparser&quot; rel=&quot;noreferrer&quot;&gt;DOMParser&lt;/a&gt; which is very light on resources and I&apos;ve been using happily for a while. Simple to learn &amp;amp; powerful.&lt;/p&gt;\n\n&lt;p&gt;For Python and Java, similar links were posted.&lt;/p&gt;\n\n&lt;p&gt;For the downvoters - I only wrote my class when the XML parsers proved unable to withstand real use. Religious downvoting just prevents useful answers from being posted - keep things within perspective of the question, please.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s the solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php\n// here&apos;s the pattern:\n$pattern = &apos;/&amp;lt;(\\w+)(\\s+(\\w+)\\s*\\=\\s*(\\&apos;|&quot;)(.*?)\\\\4\\s*)*\\s*(\\/&amp;gt;|&amp;gt;)/&apos;;\n\n// a string to parse:\n$string = &apos;Hello, try clicking &amp;lt;a href=&quot;#paragraph&quot;&amp;gt;here&amp;lt;/a&amp;gt;\n    &amp;lt;br/&amp;gt;and check out.&amp;lt;hr /&amp;gt;\n    &amp;lt;h2&amp;gt;title&amp;lt;/h2&amp;gt;\n    &amp;lt;a name =&quot;paragraph&quot; rel= &quot;I\\&apos;m an anchor&quot;&amp;gt;&amp;lt;/a&amp;gt;\n    Fine, &amp;lt;span title=\\&apos;highlight the &quot;punch&quot;\\&apos;&amp;gt;thanks&amp;lt;span&amp;gt;.\n    &amp;lt;div class = &quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;\n    &amp;lt;br&amp;gt;&apos;;\n\n// let&apos;s get the occurrences:\npreg_match_all($pattern, $string, $matches, PREG_PATTERN_ORDER);\n\n// print the result:\nprint_r($matches[0]);\n?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To test it deeply, I entered in the string auto-closing tags like:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&amp;lt;hr /&amp;gt;&lt;/li&gt;\n&lt;li&gt;&amp;lt;br/&amp;gt;&lt;/li&gt;\n&lt;li&gt;&amp;lt;br&amp;gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I also entered tags with:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;one attribute&lt;/li&gt;\n&lt;li&gt;more than one attribute&lt;/li&gt;\n&lt;li&gt;attributes which value is bound either into &lt;strong&gt;single quotes&lt;/strong&gt; or into &lt;strong&gt;double quotes&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;attributes containing single quotes when the delimiter is a double quote and vice versa&lt;/li&gt;\n&lt;li&gt;&quot;unpretty&quot; attributes with a space before the &quot;=&quot; symbol, after it and both before and after it.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Should you find something which does not work in the proof of concept above, I am available in analyzing the code to improve my skills.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&amp;lt;EDIT&amp;gt;&lt;/strong&gt;\nI forgot that the question from the user was to avoid the parsing of self-closing tags.\nIn this case the pattern is simpler, turning into this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$pattern = &apos;/&amp;lt;(\\w+)(\\s+(\\w+)\\s*\\=\\s*(\\&apos;|&quot;)(.*?)\\\\4\\s*)*\\s*&amp;gt;/&apos;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The user @ridgerunner noticed that the pattern does not allow &lt;strong&gt;unquoted attributes&lt;/strong&gt; or &lt;strong&gt;attributes with no value&lt;/strong&gt;. In this case a fine tuning brings us the following pattern:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$pattern = &apos;/&amp;lt;(\\w+)(\\s+(\\w+)(\\s*\\=\\s*(\\&apos;|&quot;|)(.*?)\\\\5\\s*)?)*\\s*&amp;gt;/&apos;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&amp;lt;/EDIT&amp;gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h1&gt;Understanding the pattern&lt;/h1&gt;\n\n&lt;p&gt;If someone is interested in learning more about the pattern, I provide some line:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;the first sub-expression (\\w+) matches the tag name&lt;/li&gt;\n&lt;li&gt;the second sub-expression contains the pattern of an attribute. It is composed by:\n\n&lt;ol&gt;\n&lt;li&gt;one or more whitespaces \\s+&lt;/li&gt;\n&lt;li&gt;the name of the attribute (\\w+)&lt;/li&gt;\n&lt;li&gt;zero or more whitespaces \\s* (it is possible or not, leaving blanks here)&lt;/li&gt;\n&lt;li&gt;the &quot;=&quot; symbol&lt;/li&gt;\n&lt;li&gt;again, zero or more whitespaces&lt;/li&gt;\n&lt;li&gt;the delimiter of the attribute value, a single or double quote (&apos;|&quot;). In the pattern, the single quote is escaped because it coincides with the PHP string delimiter. This sub-expression is captured with the parentheses so it can be referenced again to parse the closure of the attribute, that&apos;s why it is very important.&lt;/li&gt;\n&lt;li&gt;the value of the attribute, matched by &lt;em&gt;almost&lt;/em&gt; anything: (.*?); in this specific syntax, using the &lt;strong&gt;greedy match&lt;/strong&gt; (the question mark after the asterisk) the RegExp engine enables a &quot;look-ahead&quot;-like operator, which matches anything but what follows this sub-expression&lt;/li&gt;\n&lt;li&gt;here comes the fun: the \\4 part is a &lt;strong&gt;backreference operator&lt;/strong&gt;, which refers to a sub-expression defined before in the pattern, in this case, I am referring to the fourth sub-expression, which is the first attribute delimiter found&lt;/li&gt;\n&lt;li&gt;zero or more whitespaces \\s*&lt;/li&gt;\n&lt;li&gt;the attribute sub-expression ends here, with the specification of zero or more possible occurrences, given by the asterisk.&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;Then, since a tag may end with a whitespace before the &quot;&amp;gt;&quot; symbol, zero or more whitespaces are matched with the \\s* subpattern.&lt;/li&gt;\n&lt;li&gt;The tag to match may end with a simple &quot;&amp;gt;&quot; symbol, or a possible XHTML closure, which makes use of the slash before it: (/&amp;gt;|&amp;gt;). The slash is, of course, escaped since it coincides with the regular expression delimiter.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Small tip: to better analyze this code it is necessary looking at the source code generated since I did not provide any HTML special characters escaping.&lt;/p&gt;\n    ","\n&lt;p&gt;Whenever I need to quickly extract something from an HTML document, I use Tidy to convert it to XML and then use XPath or XSLT to get what I need.\nIn your case, something like this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;//p/a[@href=&apos;foo&apos;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I used a open source tool called &lt;a href=&quot;http://htmlparser.sourceforge.net/&quot;&gt;HTMLParser&lt;/a&gt; before. It&apos;s designed to parse HTML in various ways and serves the purpose quite well. It can parse HTML as different treenode and you can easily use its API to get attributes out of the node. Check it out and see if this can help you.&lt;/p&gt;\n    ","\n&lt;p&gt;I like to parse HTML with regular expressions. I don&apos;t attempt to parse idiot HTML that is deliberately broken. This code is my main parser (Perl edition):&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$_ = join &quot;&quot;,&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;STDIN&lt;/span&gt;&amp;gt;&lt;/span&gt;; tr/\\n\\r \\t/ /s; s/&amp;lt;/\\n&amp;lt;/g; s/&amp;gt;/&amp;gt;\\n/g; s/\\n ?\\n/\\n/g;\ns/^ ?\\n//s; s/ $//s; print\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s called &lt;em&gt;htmlsplit&lt;/em&gt;, splits the HTML into lines, with one tag or chunk of text on each line. The lines can then be processed further with other text tools and scripts, such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot; rel=&quot;noreferrer&quot;&gt;grep&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Sed&quot; rel=&quot;noreferrer&quot;&gt;sed&lt;/a&gt;, Perl, etc. I&apos;m not even joking :) Enjoy.&lt;/p&gt;\n&lt;p&gt;It is simple enough to rejig my slurp-everything-first Perl script into a nice streaming thing, if you wish to process enormous web pages. But it&apos;s not really necessary.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://sam.nipl.net/code/nipl-tools/bin/htmlsplit&quot; rel=&quot;noreferrer&quot;&gt;HTML Split&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Some better regular expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;/(&amp;lt;.*?&amp;gt;|[^&amp;lt;]+)\\s*/g    # Get tags and text\n/(\\w+)=&quot;(.*?)&quot;/g       # Get attibutes\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;They are good for XML / XHTML.&lt;/p&gt;\n&lt;p&gt;With minor variations, it can cope with messy HTML... or convert the HTML -&amp;gt; XHTML first.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The best way to write regular expressions is in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Lex_%28software%29&quot; rel=&quot;noreferrer&quot;&gt;Lex&lt;/a&gt; / &lt;a href=&quot;http://en.wikipedia.org/wiki/Yacc&quot; rel=&quot;noreferrer&quot;&gt;Yacc&lt;/a&gt; style, not as opaque one-liners or commented multi-line monstrosities. I didn&apos;t do that here, yet; these ones barely need it.&lt;/p&gt;\n    ","\n&lt;p&gt;There are some nice regexes for replacing HTML with BBCode &lt;a href=&quot;http://www.garyshood.com/htmltobb/source.txt&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;. For all you nay-sayers, note that he&apos;s not trying to fully parse HTML, just to sanitize it. He can probably afford to kill off tags that his simple &quot;parser&quot; can&apos;t understand.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$store =~ s/http:/http:\\/\\//gi;\n$store =~ s/https:/https:\\/\\//gi;\n$baseurl = $store;\n\nif (!$query-&amp;gt;param(&quot;ascii&quot;)) {\n    $html =~ s/\\s\\s+/\\n/gi;\n    $html =~ s/&amp;lt;pre(.*?)&amp;gt;(.*?)&amp;lt;\\/pre&amp;gt;/\\[code]$2\\[\\/code]/sgmi;\n}\n\n$html =~ s/\\n//gi;\n$html =~ s/\\r\\r//gi;\n$html =~ s/$baseurl//gi;\n$html =~ s/&amp;lt;h[1-7](.*?)&amp;gt;(.*?)&amp;lt;\\/h[1-7]&amp;gt;/\\n\\[b]$2\\[\\/b]\\n/sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;/\\n\\n/gi;\n$html =~ s/&amp;lt;br(.*?)&amp;gt;/\\n/gi;\n$html =~ s/&amp;lt;textarea(.*?)&amp;gt;(.*?)&amp;lt;\\/textarea&amp;gt;/\\[code]$2\\[\\/code]/sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/b&amp;gt;/\\[b]$1\\[\\/b]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/i&amp;gt;/\\[i]$1\\[\\/i]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/u&amp;gt;/\\[u]$1\\[\\/u]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/em&amp;gt;/\\[i]$1\\[\\/i]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/strong&amp;gt;/\\[b]$1\\[\\/b]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cite&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/cite&amp;gt;/\\[i]$1\\[\\/i]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;(.*?)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/font&amp;gt;/\\[color=$1]$2\\[\\/color]/sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;(.*?)&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/font&amp;gt;/\\[color=$1]$2\\[\\/color]/sgmi;\n$html =~ s/&amp;lt;link(.*?)&amp;gt;//gi;\n$html =~ s/&amp;lt;li(.*?)&amp;gt;(.*?)&amp;lt;\\/li&amp;gt;/\\[\\*]$2/gi;\n$html =~ s/&amp;lt;ul(.*?)&amp;gt;/\\[list]/gi;\n$html =~ s/&amp;lt;\\/ul&amp;gt;/\\[\\/list]/gi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;/\\n/gi;\n$html =~ s/&amp;lt;\\/div&amp;gt;/\\n/gi;\n$html =~ s/&amp;lt;td(.*?)&amp;gt;/ /gi;\n$html =~ s/&amp;lt;tr(.*?)&amp;gt;/\\n/gi;\n\n$html =~ s/&amp;lt;img(.*?)src=&quot;(.*?)&quot;(.*?)&amp;gt;/\\[img]$baseurl\\/$2\\[\\/img]/gi;\n$html =~ s/&amp;lt;a(.*?)href=&quot;(.*?)&quot;(.*?)&amp;gt;(.*?)&amp;lt;\\/a&amp;gt;/\\[url=$baseurl\\/$2]$4\\[\\/url]/gi;\n$html =~ s/\\[url=$baseurl\\/http:\\/\\/(.*?)](.*?)\\[\\/url]/\\[url=http:\\/\\/$1]$2\\[\\/url]/gi;\n$html =~ s/\\[img]$baseurl\\/http:\\/\\/(.*?)\\[\\/img]/\\[img]http:\\/\\/$1\\[\\/img]/gi;\n\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/head&amp;gt;//sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;object&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/object&amp;gt;//sgmi;\n$html =~ s/&amp;lt;script(.*?)&amp;gt;(.*?)&amp;lt;\\/script&amp;gt;//sgmi;\n$html =~ s/&amp;lt;style(.*?)&amp;gt;(.*?)&amp;lt;\\/style&amp;gt;//sgmi;\n$html =~ s/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;(.*?)&amp;lt;\\/title&amp;gt;//sgmi;\n$html =~ s/&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--(.*?)--&amp;gt;&lt;/span&gt;/\\n/sgmi;\n\n$html =~ s/\\/\\//\\//gi;\n$html =~ s/http:\\//http:\\/\\//gi;\n$html =~ s/https:\\//https:\\/\\//gi;\n\n$html =~ s/&amp;lt;(?:[^&amp;gt;&apos;&quot;]*|([&apos;&quot;]).*?\\1)*&amp;gt;//gsi;\n$html =~ s/\\r\\r//gi;\n$html =~ s/\\[img]\\//\\[img]/gi;\n$html =~ s/\\[url=\\//\\[url=/gi;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;About the question of the regular expression methods to parse (x)HTML, the answer to all of the ones who spoke about some limits is: you have not been trained enough to rule the force of this powerful weapon, since &lt;strong&gt;nobody&lt;/strong&gt; here spoke about &lt;strong&gt;recursion&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;A regular expression-agnostic colleague notified me this discussion, which is not certainly the first on the web about this old and hot topic.&lt;/p&gt;\n&lt;p&gt;After reading some posts, the first thing I did was looking for the &quot;?R&quot; string in this thread. The second was to search about &quot;recursion&quot;.&lt;/p&gt;\n&lt;p&gt;No, holy cow, no match found. Since nobody mentioned the main mechanism a parser is built onto, I was soon aware that nobody got the point.&lt;/p&gt;\n&lt;p&gt;If an (x)HTML parser needs recursion, a regular expression parser without recursion is not enough for the purpose. It&apos;s a simple construct.&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;black art of regular expressions is hard to master&lt;/strong&gt;, so maybe there are further possibilities we left out while trying and testing our personal solution to capture the whole web in one hand... Well, I am sure about it :)&lt;/p&gt;\n&lt;p&gt;Here&apos;s the magic pattern:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$pattern = &quot;/&amp;lt;([\\w]+)([^&amp;gt;]*?)(([\\s]*\\/&amp;gt;)|(&amp;gt;((([^&amp;lt;]*?|&amp;lt;\\!\\-\\-.*?\\-\\-&amp;gt;)|(?R))*)&amp;lt;\\/\\\\1[\\s]*&amp;gt;))/s&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Just try it. It&apos;s written as a PHP string, so the &quot;s&quot; modifier makes classes include newlines.&lt;/p&gt;\n&lt;p&gt;Here&apos;s a &lt;strong&gt;sample note on the PHP manual&lt;/strong&gt; I wrote in January: &lt;a href=&quot;http://php.net/manual/en/regexp.reference.recursive.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;(Take care. In that note I wrongly used the &quot;m&quot; modifier; it should be erased, notwithstanding it is discarded by the regular expression engine, since no &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; anchoring was used).&lt;/p&gt;\n&lt;p&gt;Now, we could speak about the limits of this method from a more informed point of view:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;according to the specific implementation of the regular expression engine, recursion may have a limit in the &lt;strong&gt;number of nested patterns parsed&lt;/strong&gt;, but it depends on the language used&lt;/li&gt;\n&lt;li&gt;although corrupted, (x)HTML does not drive into severe errors. It is not &lt;em&gt;sanitized&lt;/em&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Anyhow, it is only a regular expression pattern, but it discloses the possibility to develop of a lot of powerful implementations.&lt;/p&gt;\n&lt;p&gt;I wrote this pattern to power the &lt;em&gt;recursive descent parser&lt;/em&gt; of a template engine I built in my framework, and performances are really great, both in execution times or in memory usage (nothing to do with other template engines which use the same syntax).&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;\\s*(\\w+)[^/&amp;gt;]*&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The parts explained:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;: Starting character&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;\\s*&lt;/code&gt;: It may have whitespaces before the tag name (ugly, but possible).&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;(\\w+)&lt;/code&gt;: tags can contain letters and numbers (h1). Well, &lt;code&gt;\\w&lt;/code&gt; also matches &apos;_&apos;, but it does not hurt I guess. If curious, use ([a-zA-Z0-9]+) instead.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;[^/&amp;gt;]*&lt;/code&gt;: Anything except &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; until closing &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;: Closing &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;UNRELATED&lt;/h3&gt;\n&lt;p&gt;And to the fellows, who underestimate regular expressions, saying they are only as powerful as regular languages:&lt;/p&gt;\n&lt;p&gt;a&lt;sup&gt;n&lt;/sup&gt;ba&lt;sup&gt;n&lt;/sup&gt;ba&lt;sup&gt;n&lt;/sup&gt; which is not regular and not even context free, can be matched with &lt;code&gt;^(a+)b\\1b\\1$&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Backreferencing &lt;a href=&quot;http://en.wiktionary.org/wiki/FTW&quot; rel=&quot;noreferrer&quot;&gt;FTW&lt;/a&gt;!&lt;/p&gt;\n    ","\n&lt;p&gt;As many people have already pointed out, HTML is not a regular language which can make it very difficult to parse. My solution to this is to turn it into a regular language using a tidy program and then to use an XML parser to consume the results. There are a lot of good options for this. My program is written using Java with the &lt;a href=&quot;http://jtidy.sourceforge.net/&quot; rel=&quot;noreferrer&quot;&gt;jtidy&lt;/a&gt; library to turn the HTML into XML and then Jaxen to xpath into the result.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re simply trying to find those tags (without ambitions of parsing) try this regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;/&amp;lt;[^/]*?&amp;gt;/g\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wrote it in 30 seconds, and tested here:\n&lt;a href=&quot;http://gskinner.com/RegExr/&quot;&gt;http://gskinner.com/RegExr/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It matches the types of tags you mentioned, while ignoring the types you said you wanted to ignore.&lt;/p&gt;\n    ","\n&lt;p&gt;It seems to me you&apos;re trying to match tags without a &quot;/&quot; at the end. Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-zA-Z][a-zA-Z0-9]*)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s true that when programming it&apos;s usually best to use dedicated parsers and APIs instead of regular expressions when dealing with HTML, especially if accuracy is paramount (e.g., if your processing might have security implications). However, I dont ascribe to a dogmatic view that XML-style markup should never be processed with regular expressions. There are cases when regular expressions are a great tool for the job, such as when making one-time edits in a text editor, fixing broken XML files, or dealing with file formats that look like but arent quite XML. There are some issues to be aware of, but they&apos;re not insurmountable or even necessarily relevant.&lt;/p&gt;\n\n&lt;p&gt;A simple regex like &lt;code&gt;&amp;lt;([^&amp;gt;&quot;&apos;]|&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;)*&amp;gt;&lt;/code&gt; is usually good enough, in cases such as those I just mentioned. It&apos;s a naive solution, all things considered, but it does correctly allow unencoded &lt;code&gt;&amp;gt;&lt;/code&gt; symbols in attribute values. If you&apos;re looking for, e.g., a &lt;code&gt;table&lt;/code&gt; tag, you could adapt it as &lt;code&gt;&amp;lt;/?table\\b([^&amp;gt;&quot;&apos;]|&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;)*&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just to give a sense of what a more &quot;advanced&quot; HTML regex would look like, the following does a fairly respectable job of emulating real-world browser behavior and the HTML5 parsing algorithm:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;/?([A-Za-z][^\\s&amp;gt;/]*)(?:=\\s*(?:&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|[^\\s&amp;gt;]+)|[^&amp;gt;])*(?:&amp;gt;|$)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following matches a fairly strict definition of XML tags (although it doesn&apos;t account for the full set of Unicode characters allowed in XML names):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;(?:([_:A-Z][-.:\\w]*)(?:\\s+[_:A-Z][-.:\\w]*\\s*=\\s*(?:&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;))*\\s*/?|/([_:A-Z][-.:\\w]*)\\s*)&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Granted, these don&apos;t account for surrounding context and a few edge cases, but even such things could be dealt with if you really wanted to (e.g., by searching between the matches of another regex).&lt;/p&gt;\n\n&lt;p&gt;At the end of the day, use the most appropriate tool for the job, even in the cases when that tool happens to be a regex.&lt;/p&gt;\n    ","\n&lt;p&gt;Although it&apos;s not suitable and effective to use regular expressions for that purpose sometimes regular expressions provide quick solutions for simple match problems and in my view it&apos;s not that horrbile to use regular expressions for trivial works. &lt;/p&gt;\n\n&lt;p&gt;There is a &lt;a href=&quot;http://blog.stevenlevithan.com/archives/match-innermost-html-element&quot; rel=&quot;noreferrer&quot;&gt;definitive blog post&lt;/a&gt; about matching innermost HTML elements written by Steven Levithan.&lt;/p&gt;\n    ","\n&lt;p&gt;If you only want the tag names, it should be possible to do this via a regular expression.&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&amp;lt;([a-zA-Z]+)(?:[^&amp;gt;]*[^/] *)?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;should do what you need. But I think the solution of &quot;moritz&quot; is already fine. I didn&apos;t see it in the beginning.&lt;/p&gt;\n&lt;p&gt;For all downvoters: In some cases it just makes sense to use a regular expression, because it can be the easiest and quickest solution. I agree that in general you should not parse HTML with regular expressions.&lt;/p&gt;\n&lt;p&gt;But regular expressions can be a very powerful tool when you have a subset of HTML where you know the format and you just want to extract some values. I did that hundreds of times and almost always achieved what I wanted.&lt;/p&gt;\n    "]},"page":"122","randomQuestions":[{"title":"What is DOM Event delegation?","slug":"what-is-dom-event-delegation-1657387625599"},{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"What is the purpose of the var keyword and when should I use it (or omit it)?","slug":"what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-(or-omit-it)-1657387525538"},{"title":"How to use PHP's password_hash to hash and verify passwords","slug":"how-to-use-php's-password_hash-to-hash-and-verify-passwords-1657387808784"},{"title":"How to close/hide the Android soft keyboard programmatically?","slug":"how-to-closehide-the-android-soft-keyboard-programmatically-1657388217420"},{"title":"Selenium - wait until element is present, visible and interactable","slug":"selenium-wait-until-element-is-present-visible-and-interactable-1657384820071"},{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"Javascript infamous Loop issue? [duplicate]","slug":"javascript-infamous-loop-issue-duplicate-1657387498530"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"Error in finding last used cell in Excel with VBA","slug":"error-in-finding-last-used-cell-in-excel-with-vba-1657384584748"},{"title":"Reshaping data.frame from wide to long format","slug":"reshaping-data.frame-from-wide-to-long-format-1657384678522"},{"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"Command not found error in Bash variable assignment","slug":"command-not-found-error-in-bash-variable-assignment-1657388326347"},{"title":"Is List<Dog> a subclass of List<Animal>? Why are Java generics not implicitly polymorphic?","slug":"is-listlessdoggreater-a-subclass-of-listlessanimalgreater-why-are-java-generics-not-implicitly-polymorphic-1657384766724"},{"title":"Learning Regular Expressions [closed]","slug":"learning-regular-expressions-closed-1657384719460"},{"title":"Is it safe to expose Firebase apiKey to the public?","slug":"is-it-safe-to-expose-firebase-apikey-to-the-public-1657388268111"}]},"__N_SSG":true}