{"pageProps":{"data":{"count":610,"rows":[{"id":145,"title":"Why does std::getline() skip input after a formatted extraction?","slug":"why-does-std::getline()-skip-input-after-a-formatted-extraction-1657384756118","postType":"QUESTION","createdAt":"2022-07-09T16:39:16.000Z","updatedAt":"2022-07-09T16:39:16.000Z","tags":[{"id":528,"name":"istream","slug":"istream","createdAt":"2022-07-09T16:39:16.000Z","updatedAt":"2022-07-09T16:39:16.000Z","Questions_Tags":{"questionId":145,"tagId":528}}]},{"id":144,"title":"How do I profile C++ code running on Linux?","slug":"how-do-i-profile-c++-code-running-on-linux-1657384754272","postType":"QUESTION","createdAt":"2022-07-09T16:39:14.000Z","updatedAt":"2022-07-09T16:39:14.000Z","tags":[{"id":524,"name":"profiling","slug":"profiling","createdAt":"2022-07-09T16:39:14.000Z","updatedAt":"2022-07-09T16:39:14.000Z","Questions_Tags":{"questionId":144,"tagId":524}}]},{"id":143,"title":"What is a stack trace, and how can I use it to debug my application errors?","slug":"what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors-1657384750732","postType":"QUESTION","createdAt":"2022-07-09T16:39:10.000Z","updatedAt":"2022-07-09T16:39:10.000Z","tags":[{"id":521,"name":"stack-trace","slug":"stack-trace","createdAt":"2022-07-09T16:39:10.000Z","updatedAt":"2022-07-09T16:39:10.000Z","Questions_Tags":{"questionId":143,"tagId":521}}]},{"id":142,"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653","postType":"QUESTION","createdAt":"2022-07-09T16:39:07.000Z","updatedAt":"2022-07-09T16:39:07.000Z","tags":[]},{"id":141,"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630","postType":"QUESTION","createdAt":"2022-07-09T16:39:05.000Z","updatedAt":"2022-07-09T16:39:05.000Z","tags":[{"id":515,"name":"return-value","slug":"return-value","createdAt":"2022-07-09T16:39:05.000Z","updatedAt":"2022-07-09T16:39:05.000Z","Questions_Tags":{"questionId":141,"tagId":515}},{"id":516,"name":"main","slug":"main","createdAt":"2022-07-09T16:39:05.000Z","updatedAt":"2022-07-09T16:39:05.000Z","Questions_Tags":{"questionId":141,"tagId":516}},{"id":517,"name":"return-type","slug":"return-type","createdAt":"2022-07-09T16:39:05.000Z","updatedAt":"2022-07-09T16:39:05.000Z","Questions_Tags":{"questionId":141,"tagId":517}}]}]},"answers":{"141":["\n&lt;p&gt;The return value for &lt;code&gt;main&lt;/code&gt; indicates how the program exited. Normal exit is represented by a 0 return value from &lt;code&gt;main&lt;/code&gt;. Abnormal exit is signaled by a non-zero return, but there is no standard for how non-zero codes are interpreted. As noted by others, &lt;code&gt;void main()&lt;/code&gt; is prohibited by the C++ standard and should not be used. The valid C++ &lt;code&gt;main&lt;/code&gt; signatures are:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;()\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is equivalent to&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is also worth noting that in C++, &lt;code&gt;int main()&lt;/code&gt; can be left without a return-statement, at which point it defaults to returning 0. This is also true with a C99 program. Whether &lt;code&gt;return 0;&lt;/code&gt; should be omitted or not is open to debate. The range of valid C program main signatures is much greater.  &lt;/p&gt;\n\n&lt;p&gt;Efficiency is not an issue with the &lt;code&gt;main&lt;/code&gt; function. It can only be entered and left once (marking the program&apos;s start and termination) according to the C++ standard. For C, re-entering &lt;code&gt;main()&lt;/code&gt; is allowed, but should be avoided.&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted answer appears to be targetted for C++, so I thought I&apos;d add an answer that pertains to C, and this differs in a few ways. There were also some changes made between ISO/IEC 9899:1989 (C90) and ISO/IEC 9899:1999 (C99).&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; should be declared as either:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or equivalent. For example, &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt; is equivalent to the second one. In C90, the &lt;code&gt;int&lt;/code&gt; return type can be omitted as it is a default, but in C99 and newer, the &lt;code&gt;int&lt;/code&gt; return type may not be omitted.&lt;/p&gt;\n&lt;p&gt;If an implementation permits it, &lt;code&gt;main()&lt;/code&gt; can be declared in other ways (e.g., &lt;code&gt;int main(int argc, char *argv[], char *envp[])&lt;/code&gt;), but this makes the program implementation defined, and no longer strictly conforming.&lt;/p&gt;\n&lt;p&gt;The standard defines 3 values for returning that are strictly conforming (that is, does not rely on implementation defined behaviour): &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; for a successful termination, and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; for an unsuccessful termination. Any other values are non-standard and implementation defined. In C90, &lt;code&gt;main()&lt;/code&gt; must have an explicit &lt;code&gt;return&lt;/code&gt; statement at the end to avoid undefined behaviour. In C99 and newer, you may omit the return statement from &lt;code&gt;main()&lt;/code&gt;. If you do, and &lt;code&gt;main()&lt;/code&gt; finished, there is an implicit &lt;code&gt;return 0&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Finally, there is nothing wrong from a standards point of view with calling &lt;code&gt;main()&lt;/code&gt; &lt;em&gt;recursively&lt;/em&gt; from a C program.&lt;/p&gt;\n    ","\n&lt;h2&gt;Standard C  Hosted Environment&lt;/h2&gt;\n\n&lt;p&gt;For a hosted environment (that&apos;s the normal one), the C11 standard (ISO/IEC 9899:2011) says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;5.1.2.2.1 Program startup&lt;/h3&gt;\n  \n  &lt;p&gt;The function called at program startup is named &lt;code&gt;main&lt;/code&gt;. The implementation declares no\n  prototype for this function. It shall be defined with a return type of &lt;code&gt;int&lt;/code&gt; and with no\n  parameters:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;or with two parameters (referred to here as &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt;, though any names may be\n  used, as they are local to the function in which they are declared):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; *argv[]&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;or equivalent;&lt;sup&gt;10)&lt;/sup&gt; or in some other implementation-defined manner.&lt;/p&gt;\n  \n  &lt;p&gt;If they are declared, the parameters to the main function shall obey the following\n  constraints:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;The value of &lt;code&gt;argc&lt;/code&gt; shall be nonnegative.&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;argv[argc]&lt;/code&gt; shall be a null pointer.&lt;/li&gt;\n  &lt;li&gt;If the value of &lt;code&gt;argc&lt;/code&gt; is greater than zero, the array members &lt;code&gt;argv[0]&lt;/code&gt; through\n  &lt;code&gt;argv[argc-1]&lt;/code&gt; inclusive shall contain pointers to strings, which are given\n  implementation-defined values by the host environment prior to program startup. The\n  intent is to supply to the program information determined prior to program startup\n  from elsewhere in the hosted environment. If the host environment is not capable of\n  supplying strings with letters in both uppercase and lowercase, the implementation\n  shall ensure that the strings are received in lowercase.&lt;/li&gt;\n  &lt;li&gt;If the value of &lt;code&gt;argc&lt;/code&gt; is greater than zero, the string pointed to by &lt;code&gt;argv[0]&lt;/code&gt;\n  represents the program name; &lt;code&gt;argv[0][0]&lt;/code&gt; shall be the null character if the\n  program name is not available from the host environment. If the value of &lt;code&gt;argc&lt;/code&gt; is\n  greater than one, the strings pointed to by &lt;code&gt;argv[1]&lt;/code&gt; through &lt;code&gt;argv[argc-1]&lt;/code&gt;\n  represent the program parameters.&lt;/li&gt;\n  &lt;li&gt;The parameters &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; and the strings pointed to by the &lt;code&gt;argv&lt;/code&gt; array shall\n  be modifiable by the program, and retain their last-stored values between program\n  startup and program termination.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;&lt;sup&gt;10)&lt;/sup&gt; Thus, &lt;code&gt;int&lt;/code&gt; can be replaced by a typedef name defined as &lt;code&gt;int&lt;/code&gt;, or the type of &lt;code&gt;argv&lt;/code&gt; can be written as\n  &lt;code&gt;char **argv&lt;/code&gt;, and so on.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h3&gt;Program termination in C99 or C11&lt;/h3&gt;\n\n&lt;p&gt;The value returned from &lt;code&gt;main()&lt;/code&gt; is transmitted to the &apos;environment&apos; in an implementation-defined way.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;5.1.2.2.3 Program termination&lt;/h3&gt;\n  \n  &lt;p&gt;1 If the return type of the &lt;code&gt;main&lt;/code&gt; function is a type compatible with &lt;code&gt;int&lt;/code&gt;, a return from the\n  initial call to the &lt;code&gt;main&lt;/code&gt; function is equivalent to calling the &lt;code&gt;exit&lt;/code&gt; function with the value\n  returned by the &lt;code&gt;main&lt;/code&gt; function as its argument;&lt;sup&gt;11)&lt;/sup&gt; reaching the &lt;code&gt;}&lt;/code&gt; that terminates the\n  &lt;code&gt;main&lt;/code&gt; function returns a value of 0. If the return type is not compatible with &lt;code&gt;int&lt;/code&gt;, the\n  termination status returned to the host environment is unspecified.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;11)&lt;/sup&gt; In accordance with 6.2.4, the lifetimes of objects with automatic storage duration declared in &lt;code&gt;main&lt;/code&gt;\n  will have ended in the former case, even where they would not have in the latter.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Note that &lt;code&gt;0&lt;/code&gt; is mandated as &apos;success&apos;. You can use &lt;code&gt;EXIT_FAILURE&lt;/code&gt; and &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; from &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; if you prefer, but 0 is well established, and so is 1. See also &lt;a href=&quot;https://stackoverflow.com/questions/179565/exitcodes-bigger-than-255-possible/&quot;&gt;Exit codes greater than 255  possible?&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In C89 (and hence in Microsoft C), there is no statement about what happens if the &lt;code&gt;main()&lt;/code&gt; function returns but does not specify a return value; it therefore leads to undefined behaviour.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;7.22.4.4 The &lt;code&gt;exit&lt;/code&gt; function&lt;/h3&gt;\n  \n  &lt;p&gt;¶5 Finally, control is returned to the host environment. If the value of &lt;code&gt;status&lt;/code&gt; is zero or &lt;code&gt;EXIT_SUCCESS&lt;/code&gt;, an implementation-defined form of the status &lt;em&gt;successful termination&lt;/em&gt; is returned. If the value of &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;EXIT_FAILURE&lt;/code&gt;, an implementation-defined form of the status &lt;em&gt;unsuccessful termination&lt;/em&gt; is returned. Otherwise the status returned is implementation-defined.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Standard C++  Hosted Environment&lt;/h2&gt;\n\n&lt;p&gt;The C++11 standard (ISO/IEC 14882:2011) says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;3.6.1 Main function [basic.start.main]&lt;/h3&gt;\n  \n  &lt;p&gt;¶1 A program shall contain a global function called main, which is the designated start of the program. [...]&lt;/p&gt;\n  \n  &lt;p&gt;¶2 An implementation shall not predefine the main function. This function shall not be overloaded. It shall\n  have a return type of type int, but otherwise its type is implementation defined.\n  All implementations\n  shall allow both of the following definitions of main:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;()&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* argv[]&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;In the latter form &lt;code&gt;argc&lt;/code&gt; shall be the number of arguments passed to the program from the environment\n  in which the program is run. If &lt;code&gt;argc&lt;/code&gt; is nonzero these arguments shall be supplied in &lt;code&gt;argv[0]&lt;/code&gt;\n  through &lt;code&gt;argv[argc-1]&lt;/code&gt; as pointers to the initial characters of null-terminated multibyte strings (NTMBSs) (17.5.2.1.4.2) and &lt;code&gt;argv[0]&lt;/code&gt; shall be the pointer to the initial character of a NTMBS that represents the\n  name used to invoke the program or &lt;code&gt;&quot;&quot;&lt;/code&gt;. The value of &lt;code&gt;argc&lt;/code&gt; shall be non-negative. The value of &lt;code&gt;argv[argc]&lt;/code&gt;\n  shall be 0. [ Note: It is recommended that any further (optional) parameters be added after &lt;code&gt;argv&lt;/code&gt;. end\n  note ]&lt;/p&gt;\n  \n  &lt;p&gt;¶3 The function &lt;code&gt;main&lt;/code&gt; shall not be used within a program. The linkage (3.5) of &lt;code&gt;main&lt;/code&gt; is implementation-defined. [...]&lt;/p&gt;\n  \n  &lt;p&gt;¶5 A return statement in main has the effect of leaving the main function (destroying any objects with automatic\n  storage duration) and calling &lt;code&gt;std::exit&lt;/code&gt; with the return value as the argument. If control reaches the end\n  of main without encountering a return statement, the effect is that of executing&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The C++ standard explicitly says &quot;It [the main function] shall have a return type of type &lt;code&gt;int&lt;/code&gt;, but otherwise its type is implementation defined&quot;, and requires the same two signatures as the C standard to be supported as options. So a &apos;void main()&apos; is directly not allowed by the C++ standard, though there&apos;s nothing it can do to stop a non-standard implementation allowing alternatives.  Note that C++ forbids the user from calling &lt;code&gt;main&lt;/code&gt; (but the C standard does not).&lt;/p&gt;\n\n&lt;p&gt;There&apos;s a paragraph of §18.5 &lt;strong&gt;Start and termination&lt;/strong&gt; in the C++11 standard that is identical to the paragraph from §7.22.4.4 &lt;strong&gt;The &lt;code&gt;exit&lt;/code&gt; function&lt;/strong&gt; in the C11 standard (quoted above), apart from a footnote (which simply documents that &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; are defined in &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;).&lt;/p&gt;\n\n&lt;h2&gt;Standard C  Common Extension&lt;/h2&gt;\n\n&lt;p&gt;Classically, Unix systems support a third variant:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; **argv, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; **envp&lt;/span&gt;)&lt;/span&gt; { ... }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The third argument is a null-terminated list of pointers to strings, each of which is an environment variable which has a name, an equals sign, and a value (possibly empty).  If you do not use this, you can still get at the environment via &apos;&lt;code&gt;extern char **environ;&lt;/code&gt;&apos;.  This global variable is unique among those in POSIX in that it does not have a header that declares it.&lt;/p&gt;\n\n&lt;p&gt;This is recognized by the C standard as a common extension, documented in Annex J:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;J.5.1 Environment arguments&lt;/h3&gt;\n  \n  &lt;p&gt;¶1 In a hosted environment, the main function receives a third argument, &lt;code&gt;char *envp[]&lt;/code&gt;,\n  that points to a null-terminated array of pointers to &lt;code&gt;char&lt;/code&gt;, each of which points to a string\n  that provides information about the environment for this execution of the program (5.1.2.2.1).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Microsoft C&lt;/h2&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.100%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;Microsoft VS 2010&lt;/a&gt; compiler is interesting. The web site says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The declaration syntax for main is&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;()&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;or, optionally,&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; *argv[], &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; *envp[]&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Alternatively, the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;wmain&lt;/code&gt; functions can be declared as returning &lt;code&gt;void&lt;/code&gt; (no return value). If you declare &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;wmain&lt;/code&gt; as returning void, you cannot return an exit code to the parent process or operating system by using a return statement. To return an exit code when &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;wmain&lt;/code&gt; is declared as &lt;code&gt;void&lt;/code&gt;, you must use the &lt;code&gt;exit&lt;/code&gt; function.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It is not clear to me what happens (what exit code is returned to the parent or OS) when a program with &lt;code&gt;void main()&lt;/code&gt; does exit  and the MS web site is silent too.&lt;/p&gt;\n\n&lt;p&gt;Interestingly, MS does not prescribe the two-argument version of &lt;code&gt;main()&lt;/code&gt; that the C and C++ standards require. It only prescribes a three argument form where the third argument is &lt;code&gt;char **envp&lt;/code&gt;, a pointer to a list of environment variables.&lt;/p&gt;\n\n&lt;p&gt;The Microsoft page also lists some other alternatives  &lt;code&gt;wmain()&lt;/code&gt; which takes wide character strings, and some more.&lt;/p&gt;\n\n&lt;p&gt;The Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2005&quot; rel=&quot;noreferrer&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2005&lt;/a&gt; version of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.80%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;this page&lt;/a&gt; does not list &lt;code&gt;void main()&lt;/code&gt; as an alternative.  The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.90%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;versions&lt;/a&gt; from Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2008&quot; rel=&quot;noreferrer&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2008&lt;/a&gt; onwards do.&lt;/p&gt;\n\n&lt;h2&gt;Standard C  Freestanding Environment&lt;/h2&gt;\n\n&lt;p&gt;As noted early on, the requirements above apply to hosted environments. If you are working with a freestanding environment (which is the alternative to a hosted environment), then the standard has much less to say. For a freestanding environment, the function called at program startup need not be called &lt;code&gt;main&lt;/code&gt; and there are no constraints on its return type.  The standard says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;5.1.2 Execution environments&lt;/h3&gt;\n  \n  &lt;p&gt;Two execution environments are defined: freestanding and hosted. In both cases,\n  program startup occurs when a designated C function is called by the execution\n  environment. All objects with static storage duration shall be initialized (set to their initial values) before program startup. The manner and timing of such initialization are otherwise unspecified. Program termination returns control to the execution environment.&lt;/p&gt;\n  \n  &lt;h3&gt;5.1.2.1 Freestanding environment&lt;/h3&gt;\n  \n  &lt;p&gt;In a freestanding environment (in which C program execution may take place without any benefit of an operating system), the name and type of the function called at program startup are implementation-defined. Any library facilities available to a freestanding program, other than the minimal set required by clause 4, are implementation-defined.&lt;/p&gt;\n  \n  &lt;p&gt;The effect of program termination in a freestanding environment is implementation-defined.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The cross-reference to clause 4 Conformance refers to this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;¶5 A &lt;em&gt;strictly conforming program&lt;/em&gt; shall use only those features of the language and library specified in this International Standard.&lt;sup&gt;3)&lt;/sup&gt; It shall not produce output dependent on any unspecified, undefined, or implementation-defined behavior, and shall not exceed any minimum implementation limit.&lt;/p&gt;\n  \n  &lt;p&gt;¶6 The two forms of conforming implementation are &lt;em&gt;hosted&lt;/em&gt; and &lt;em&gt;freestanding&lt;/em&gt;. A &lt;em&gt;conforming hosted implementation&lt;/em&gt; shall accept any strictly conforming program. A &lt;em&gt;conforming freestanding implementation&lt;/em&gt; shall accept any strictly conforming program in which the use of the features specified in the library clause (clause 7) is confined to the contents of the standard headers &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt;,\n  &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;, and\n  &lt;code&gt;&amp;lt;stdnoreturn.h&amp;gt;&lt;/code&gt;. A conforming implementation may have extensions (including\n  additional library functions), provided they do not alter the behavior of any strictly conforming program.&lt;sup&gt;4)&lt;/sup&gt;&lt;/p&gt;\n  \n  &lt;p&gt;¶7 A &lt;em&gt;conforming program&lt;/em&gt; is one that is acceptable to a conforming implementation.&lt;sup&gt;5)&lt;/sup&gt;&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;3)&lt;/sup&gt; A strictly conforming program can use conditional features (see 6.10.8.3) provided the use is guarded by an appropriate conditional inclusion preprocessing directive using the related macro. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; __STDC_IEC_559__ &lt;span class=&quot;hljs-comment&quot;&gt;/* FE_UPWARD defined */&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;fesetround&lt;/span&gt;(FE_UPWARD);\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&lt;sup&gt;4)&lt;/sup&gt; This implies that a conforming implementation reserves no identifiers other than those explicitly reserved in this International Standard.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;5)&lt;/sup&gt; Strictly conforming programs are intended to be maximally portable among conforming implementations. Conforming programs may depend upon non-portable features of a conforming implementation.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It is noticeable that the only header required of a freestanding environment that actually defines any functions is &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; (and even those may be  and often are  just macros).&lt;/p&gt;\n\n&lt;h2&gt;Standard C++  Freestanding Environment&lt;/h2&gt;\n\n&lt;p&gt;Just as the C standard recognizes both hosted and freestanding environment, so too does the C++ standard. (Quotes from ISO/IEC 14882:2011.)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;1.4 Implementation compliance [intro.compliance]&lt;/h3&gt;\n  \n  &lt;p&gt;¶7 Two kinds of implementations are defined: a &lt;em&gt;hosted implementation&lt;/em&gt; and a &lt;em&gt;freestanding implementation&lt;/em&gt;. For a hosted implementation, this International Standard defines the set of available libraries. A freestanding\n  implementation is one in which execution may take place without the benefit of an operating system, and has an implementation-defined set of libraries that includes certain language-support libraries (17.6.1.3).&lt;/p&gt;\n  \n  &lt;p&gt;¶8 A conforming implementation may have extensions (including additional library functions), provided they do not alter the behavior of any well-formed program. Implementations are required to diagnose programs that\n  use such extensions that are ill-formed according to this International Standard. Having done so, however, they can compile and execute such programs.&lt;/p&gt;\n  \n  &lt;p&gt;¶9 Each implementation shall include documentation that identifies all conditionally-supported constructs that it does not support and defines all locale-specific characteristics.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;3)&lt;/sup&gt; This documentation also defines implementation-defined behavior; see 1.9.&lt;/p&gt;\n  \n  &lt;h3&gt;17.6.1.3 Freestanding implementations [compliance]&lt;/h3&gt;\n  \n  &lt;p&gt;Two kinds of implementations are defined: hosted and freestanding (1.4). For a hosted implementation, this International Standard describes the set of available headers.&lt;/p&gt;\n  \n  &lt;p&gt;A freestanding implementation has an implementation-defined set of headers. This set shall include at least the headers shown in Table 16.&lt;/p&gt;\n  \n  &lt;p&gt;The supplied version of the header &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; shall declare at least the functions &lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, and &lt;code&gt;quick_exit&lt;/code&gt; (18.5). The other headers listed in this table shall meet the same requirements as for a hosted implementation.&lt;/p&gt;\n  \n  &lt;p&gt;Table 16  C++ headers for freestanding implementations&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;Subclause                           Header(s)\n                                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ciso646&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.2  Types                         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cstddef&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.3  Implementation properties     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cfloat&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;limits&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;climits&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.4  Integer types                 &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cstdint&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.5  Start and termination         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cstdlib&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.6  Dynamic memory management     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;new&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.7  Type identification           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;typeinfo&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.8  Exception handling            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;exception&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.9  Initializer lists             &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;initializer_list&lt;/span&gt;&amp;gt;&lt;/span&gt;\n18.10 Other runtime support         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cstdalign&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cstdarg&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;cstdbool&lt;/span&gt;&amp;gt;&lt;/span&gt;\n20.9  Type traits                   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;type_traits&lt;/span&gt;&amp;gt;&lt;/span&gt;\n29    Atomics                       &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;atomic&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;What about using &lt;code&gt;int main()&lt;/code&gt; in C?&lt;/h2&gt;\n\n&lt;p&gt;The standard §5.1.2.2.1 of the C11 standard shows the preferred notation &amp;nbsp;&lt;code&gt;int main(void)&lt;/code&gt;  but there are also two examples in the standard which show &lt;code&gt;int main()&lt;/code&gt;: &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.5.3.4p8&quot; rel=&quot;noreferrer&quot;&gt;§6.5.3.4 ¶8&lt;/a&gt; and &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.7.6.3p20&quot; rel=&quot;noreferrer&quot;&gt;§6.7.6.3 ¶20&lt;/a&gt;.  Now, it is important to note that examples are not &apos;normative&apos;; they are only illustrative.  If there are bugs in the examples, they do not directly affect the main text of the standard.  That said, they are strongly indicative of expected behaviour, so if the standard includes &lt;code&gt;int main()&lt;/code&gt; in an example, it suggests that &lt;code&gt;int main()&lt;/code&gt; is not forbidden, even if it is not the preferred notation.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;6.5.3.4 The &lt;code&gt;sizeof&lt;/code&gt; and &lt;code&gt;_Alignof&lt;/code&gt; operators&lt;/h3&gt;\n  \n  &lt;p&gt;&lt;/p&gt;\n  \n  &lt;p&gt;¶8 EXAMPLE 3 In this example, the size of a variable length array is computed and returned from a function:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fsize3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; b[n+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// variable length array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; b; &lt;span class=&quot;hljs-comment&quot;&gt;// execution time sizeof&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size;\n    size = &lt;span class=&quot;hljs-built_in&quot;&gt;fsize3&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// fsize3 returns 13&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I believe that &lt;code&gt;main()&lt;/code&gt; should return either &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; or &lt;code&gt;EXIT_FAILURE&lt;/code&gt;. They are defined in &lt;code&gt;stdlib.h&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Note that the C and C++ standards define two kinds of implementations: freestanding and hosted.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C90 hosted environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Allowed forms &lt;sup&gt;1&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n\nmain (&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;)\nmain (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])\n&lt;span class=&quot;hljs-comment&quot;&gt;/*... etc, similar forms with implicit int */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Comments:&lt;/p&gt;\n&lt;p&gt;The former two are explicitly stated as the allowed forms, the others are implicitly allowed because C90 allowed &quot;implicit int&quot; for return type and function parameters. No other form is allowed.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C90 freestanding environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Any form or name of main is allowed &lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C99 hosted environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Allowed forms &lt;sup&gt;3&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* or in some other implementation-defined manner. */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Comments:&lt;/p&gt;\n&lt;p&gt;C99 removed &quot;implicit int&quot; so &lt;code&gt;main()&lt;/code&gt; is no longer valid.&lt;/p&gt;\n&lt;p&gt;A strange, ambiguous sentence &quot;or in some other implementation-defined manner&quot; has been introduced. This can either be interpreted as &quot;the parameters to &lt;code&gt;int main()&lt;/code&gt; may vary&quot; or as &quot;main can have any implementation-defined form&quot;.&lt;/p&gt;\n&lt;p&gt;Some compilers have chosen to interpret the standard in the latter way. Arguably, one cannot easily state that they are not conforming by citing the standard in itself, since it is is ambiguous.&lt;/p&gt;\n&lt;p&gt;However, to allow completely wild forms of &lt;code&gt;main()&lt;/code&gt; was probably(?) not the intention of this new sentence. The C99 rationale (not normative) implies that the sentence refers to additional parameters to &lt;code&gt;int main&lt;/code&gt; &lt;sup&gt;4&lt;/sup&gt;.&lt;/p&gt;\n&lt;p&gt;Yet the section for hosted environment program termination then goes on arguing about the case where main does not return int &lt;sup&gt;5&lt;/sup&gt;. Although that section is not normative for how main should be declared, it definitely implies that main might be declared in a completely implementation-defined way even on hosted systems.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C99 freestanding environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Any form or name of main is allowed &lt;sup&gt;6&lt;/sup&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C11 hosted environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Allowed forms &lt;sup&gt;7&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* or in some other implementation-defined manner. */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C11 freestanding environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Any form or name of main is allowed &lt;sup&gt;8&lt;/sup&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Note that &lt;code&gt;int main()&lt;/code&gt; was never listed as a valid form for any hosted implementation of C in any of the above versions. In C, unlike C++, &lt;code&gt;()&lt;/code&gt; and &lt;code&gt;(void)&lt;/code&gt; have different meanings. The former is an obsolescent feature which may be removed from the language. See C11 future language directions:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;6.11.6 Function declarators&lt;/p&gt;\n&lt;p&gt;The use of function declarators with empty parentheses (not prototype-format parameter type declarators) is an obsolescent feature.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C++03 hosted environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Allowed forms &lt;sup&gt;9&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Comments:&lt;/p&gt;\n&lt;p&gt;Note the empty parenthesis in the first form. C++ and C are different in this case, because in C++ this means that the function takes no parameters. But in C it means that it may take any parameter.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C++03 freestanding environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The name of the function called at startup is implementation-defined. If it is named &lt;code&gt;main()&lt;/code&gt; it must follow the stated forms &lt;sup&gt;10&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// implementation-defined name, or &lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C++11 hosted environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Allowed forms &lt;sup&gt;11&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Comments:&lt;/p&gt;\n&lt;p&gt;The text of the standard has been changed but it has the same meaning.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;C++11 freestanding environment&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The name of the function called at startup is implementation-defined. If it is named &lt;code&gt;main()&lt;/code&gt; it must follow the stated forms &lt;sup&gt;12&lt;/sup&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// implementation-defined name, or &lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;ANSI X3.159-1989 2.1.2.2 Hosted environment. &quot;Program startup&quot;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The function called at program startup is named main. The\nimplementation declares no prototype for this function. It shall be\ndefined with a return type of int and with no parameters:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; } \n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;or with two parameters (referred to here as\nargc and argv, though any names may be used, as they are local to the\nfunction in which they are declared):&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; *argv[]&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;ANSI X3.159-1989 2.1.2.1 Freestanding environment:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In a freestanding environment (in which C program execution may take\nplace without any benefit of an operating system), the name and type\nof the function called at program startup are implementation-defined.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;ISO 9899:1999 5.1.2.2 Hosted environment -&amp;gt; 5.1.2.2.1 Program startup&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The function called at program startup is named main. The\nimplementation declares no prototype for this function. It shall be\ndefined with a return type of int and with no parameters:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; } \n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;or with two parameters (referred to here as\nargc and argv, though any names may be used, as they are local to the\nfunction in which they are declared):&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; *argv[]&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;or equivalent;9) or in some other implementation-defined\nmanner.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;Rationale for International Standard  Programming Languages  C, Revision 5.10. 5.1.2.2 Hosted environment --&amp;gt; 5.1.2.2.1 Program startup&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The behavior of the arguments to main, and of the interaction of exit, main and atexit\n(see §7.20.4.2) has been codified to curb some unwanted variety in the representation of argv\nstrings, and in the meaning of values returned by main.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The specification of argc and argv as arguments to main recognizes extensive prior practice.\nargv[argc] is required to be a null pointer to provide a redundant check for the end of the list, also on the basis of common practice.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;main is the only function that may portably be declared either with zero or two arguments. (The number of other functions arguments must match exactly between invocation and definition.)\nThis special case simply recognizes the widespread practice of leaving off the arguments to main when the program does not access the program argument strings. While many implementations support more than two arguments to main, such practice is neither blessed nor forbidden by the Standard; a program that defines main with three arguments is not strictly conforming (see §J.5.1.).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;ISO 9899:1999 5.1.2.2 Hosted environment --&amp;gt; 5.1.2.2.3 Program termination&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If the return type of the main function is a type compatible with int, a return from the initial call to the main function is equivalent to calling the exit function with the value returned by the main function as its argument;11) reaching the &lt;code&gt;}&lt;/code&gt; that terminates the main function returns a value of 0. If the return type is not compatible with int, the termination status returned to the host environment is unspecified.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;6&quot;&gt;\n&lt;li&gt;ISO 9899:1999 5.1.2.1 Freestanding environment&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In a freestanding environment (in which C program execution may take place without any benefit of an operating system), the name and type of the function called at program startup are implementation-defined.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;7&quot;&gt;\n&lt;li&gt;ISO 9899:2011 5.1.2.2 Hosted environment -&amp;gt; 5.1.2.2.1 Program startup&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;This section is identical to the C99 one cited above.&lt;/p&gt;\n&lt;ol start=&quot;8&quot;&gt;\n&lt;li&gt;ISO 9899:1999 5.1.2.1 Freestanding environment&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;This section is identical to the C99 one cited above.&lt;/p&gt;\n&lt;ol start=&quot;9&quot;&gt;\n&lt;li&gt;ISO 14882:2003 3.6.1 Main function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall allow both of the following definitions of main:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;()&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* argv[]&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;10&quot;&gt;\n&lt;li&gt;ISO 14882:2003 3.6.1 Main function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It is implementation-defined whether a program in a freestanding environment is required to define a main function.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;11&quot;&gt;\n&lt;li&gt;ISO 14882:2011 3.6.1 Main function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall\nallow both&lt;/p&gt;\n&lt;p&gt; a function of () returning int and&lt;/p&gt;\n&lt;p&gt; a function of (int, pointer to pointer to char) returning int&lt;/p&gt;\n&lt;p&gt;as the type of main (8.3.5).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;12&quot;&gt;\n&lt;li&gt;ISO 14882:2011 3.6.1 Main function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;This section is identical to the C++03 one cited above.&lt;/p&gt;\n    ","\n&lt;p&gt;Return 0 on success and non-zero for error. This is the standard used by UNIX and DOS scripting to find out what happened with your program.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; in C89 and K&amp;amp;R C unspecified return types default to int`.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;? &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol&gt;\n&lt;li&gt;If you do not write a return statement in &lt;code&gt;int main()&lt;/code&gt;, the closing &lt;code&gt;}&lt;/code&gt; will return 0 by default.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;(In c++ and c99 onwards only, for c90 you must write return statement. Please see &lt;a href=&quot;https://stackoverflow.com/questions/8677672/why-main-does-not-return-0-here&quot;&gt;Why main does not return 0 here?&lt;/a&gt;)&lt;/p&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;code&gt;return 0&lt;/code&gt; or &lt;code&gt;return 1&lt;/code&gt; will be received by the parent process. In a shell it goes into a shell variable, and if you are running your program form a shell and not using that variable then you need not worry about the return value of &lt;code&gt;main()&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/q/8626109/775964&quot;&gt;How can I get what my main function has returned?&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;./a.out&lt;/span&gt;\n&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; $?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This way you can see that it is the variable &lt;code&gt;$?&lt;/code&gt; which receives the least significant byte of the return value of &lt;code&gt;main()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In Unix and DOS scripting, &lt;code&gt;return 0&lt;/code&gt; on success and non-zero for error are usually returned. This is the standard used by Unix and DOS scripting to find out what happened with your program and controlling the whole flow.&lt;/p&gt;\n    ","\n&lt;p&gt;Keep in mind that,even though you&apos;re returning an int, some OSes (Windows) truncate the returned value to a single byte (0-255).&lt;/p&gt;\n    ","\n&lt;p&gt;The return value can be used by the operating system to check how the program was closed.&lt;/p&gt;\n\n&lt;p&gt;Return value 0 usually means OK in most operating systems (the ones I can think of anyway).&lt;/p&gt;\n\n&lt;p&gt;It also can be checked when you call a process yourself, and see if the program exited and finished properly.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s &lt;strong&gt;NOT&lt;/strong&gt; just a programming convention.&lt;/p&gt;\n    ","\n&lt;p&gt;The return value of &lt;code&gt;main()&lt;/code&gt; shows how the program exited. If the return value is &lt;code&gt;zero&lt;/code&gt; it means that the execution was successful while any non-zero value will represent that something went bad in the execution.&lt;/p&gt;\n    ","\n&lt;p&gt;Returning 0 should tell the programmer that the program has successfully finished the job.&lt;/p&gt;\n    ","\n&lt;h2&gt;Omit &lt;code&gt;return 0&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;When a C or C++ program reaches the end of &lt;code&gt;main&lt;/code&gt; the compiler will automatically generate code to return 0, so there is no need to put &lt;code&gt;return 0;&lt;/code&gt; explicitly at the end of &lt;code&gt;main&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when I make this suggestion, it&apos;s almost invariably followed by one of two kinds of comments:  &quot;I didn&apos;t know that.&quot; or &quot;That&apos;s bad advice!&quot;  My rationale is that it&apos;s safe and useful to rely on compiler behavior explicitly supported by the standard.  For C, since C99; see ISO/IEC 9899:1999 section 5.1.2.2.3:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[...] a return from the initial call to the &lt;code&gt;main&lt;/code&gt; function is equivalent to calling the &lt;code&gt;exit&lt;/code&gt; function with the value returned by the &lt;code&gt;main&lt;/code&gt; function as its argument; reaching the &lt;code&gt;}&lt;/code&gt; that terminates the &lt;code&gt;main&lt;/code&gt; function returns a value of 0.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;For C++, since the first standard in 1998; see ISO/IEC 14882:1998 section 3.6.1:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;All versions of both standards since then (C99 and C++98) have maintained the same idea.  We rely on automatically generated member functions in C++, and few people write explicit &lt;code&gt;return;&lt;/code&gt; statements at the end of a &lt;code&gt;void&lt;/code&gt; function.  Reasons against omitting seem to boil down to &lt;a href=&quot;https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015&quot;&gt;&quot;it looks weird&quot;&lt;/a&gt;.  If, like me, you&apos;re curious about the rationale for the change to the C standard &lt;a href=&quot;https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional&quot;&gt;read this question&lt;/a&gt;.  Also note that in the early 1990s this was considered &quot;sloppy practice&quot; because it was undefined behavior (although widely supported) at the time.  &lt;/p&gt;\n\n&lt;p&gt;Additionally, the &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ Core Guidelines&lt;/a&gt; contains multiple instances of omitting &lt;code&gt;return 0;&lt;/code&gt; at the end of &lt;code&gt;main&lt;/code&gt; and no instances in which an explicit return is written.  Although there is not yet a specific guideline on this particular topic in that document, that seems at least a tacit endorsement of the practice.&lt;/p&gt;\n\n&lt;p&gt;So I advocate omitting it; others disagree (often vehemently!)  In any case, if you encounter code that omits it, you&apos;ll know that it&apos;s explicitly supported by the standard and you&apos;ll know what it means.&lt;/p&gt;\n    ","\n&lt;p&gt;What to return depends on what you want to do with the executable. For example if you are using your program with a command line shell, then you need to return 0 for a success and a non zero for failure. Then you would be able to use the program in shells with conditional processing depending on the outcome of your code. Also you can assign any nonzero value as per your interpretation, for example for critical errors different program exit points could terminate a program with different exit values , and which is available to the calling shell which can decide what to do by inspecting the value returned.\nIf the code is not intended for use with shells and the returned value does not bother anybody then it might be omitted. I personally use the signature &lt;code&gt;int main (void) { .. return 0; .. }&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you really have issues related to efficiency of returning an integer from a process, you should probably avoid to call that process so many times that this return value becomes an issue.&lt;/p&gt;\n\n&lt;p&gt;If you are doing this (call a process so many times), you should find a way to put your logic directly inside the caller, or in a DLL file, without allocate a specific process for each call; the multiple process allocations bring you the relevant efficiency problem in this case.&lt;/p&gt;\n\n&lt;p&gt;In detail, if you only want to know if returning 0 is more or less efficient than returning 1, it could depend from the compiler in some cases, but generically, assuming they are read from the same source (local, field, constant, embedded in the code, function result, etc.) it requires exactly the same number of clock cycles.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a small demonstration of the usage of return codes...&lt;/p&gt;\n\n&lt;p&gt;When using the various tools that the Linux terminal provides one can use the return code for example for error handling after the process has been completed. Imagine that the following text file myfile is present:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This is some example in order to check how grep works.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When you execute the grep command a process is created. Once it is through (and didn&apos;t break) it returns some code between 0 and 255. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;$ &lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; order myfile\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you do&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;echo &lt;span class=&quot;hljs-variable&quot;&gt;$?&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you will get a 0. Why? Because &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot; rel=&quot;nofollow&quot;&gt;grep&lt;/a&gt; found a match and returned an exit code 0, which is the usual value for exiting with a success. Let&apos;s check it out again but with something that is not inside our text file and thus no match will be found:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;grep foo myfile\n&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;echo &lt;span class=&quot;hljs-variable&quot;&gt;$?&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since grep failed to match the token &quot;foo&quot; with the content of our file the return code is 1 (this is the usual case when a failure occurs but as stated above you have plenty of values to choose from).&lt;/p&gt;\n\n&lt;p&gt;Now the following bash script (simply type it in a Linux terminal) although very basic should give some idea of error handling:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;grep foo myfile&lt;/span&gt;\n&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;CHECK=$?&lt;/span&gt;\n&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;[ &lt;span class=&quot;hljs-variable&quot;&gt;$CHECK&lt;/span&gt; -eq 0] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Match found&apos;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;[ &lt;span class=&quot;hljs-variable&quot;&gt;$CHECK&lt;/span&gt; -ne 0] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;No match was found&apos;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;No match was found&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After the second line nothing is printed to the terminal since &quot;foo&quot; made grep return 1 and we check if the return code of grep was equal to 0. The second conditional statement echoes its message in the last line since it is true due to CHECK == 1.&lt;/p&gt;\n\n&lt;p&gt;As you can see if you are calling this and that process it is sometimes essential to see what it has returned (by the return value of main()).&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;What is the correct (most efficient) way to define the main() function in C and C++  int main() or void main()  and why?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Those words &quot;(most efficient)&quot; don&apos;t change the question.  Unless you&apos;re in a freestanding environment, there is one universally correct way to declare &lt;code&gt;main()&lt;/code&gt;, and that&apos;s as returning int.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;What should &lt;code&gt;main()&lt;/code&gt; return in C and C++?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s not what &lt;em&gt;should&lt;/em&gt; &lt;code&gt;main()&lt;/code&gt; return, it&apos;s what &lt;em&gt;does&lt;/em&gt; &lt;code&gt;main()&lt;/code&gt; return.  &lt;code&gt;main()&lt;/code&gt; is, of course, a function that someone else calls.  You don&apos;t have any control over the code that calls &lt;code&gt;main()&lt;/code&gt;.  Therefore, you must declare &lt;code&gt;main()&lt;/code&gt; with a type-correct signature to match its caller.  You simply don&apos;t have any choice in the matter.  You don&apos;t have to ask yourself what&apos;s more or less efficient, or what&apos;s better or worse style, or anything like that, because the answer is already perfectly well defined, for you, by the C and C+ standards.  Just follow them.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If int main() then return 1 or return 0?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;0 for success, nonzero for failure.  Again, not something you need to (or get to) pick: it&apos;s defined by the interface you&apos;re supposed to be conforming to.&lt;/p&gt;\n    ","\n&lt;p&gt;In C, the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;Section 5.1.2.2.1 of the C11 standard&lt;/a&gt; (emphasis mine):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It shall be defined with a &lt;strong&gt;return type of &lt;code&gt;int&lt;/code&gt;&lt;/strong&gt; and with no\nparameters:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or with two parameters (referred to here as &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt;, though\nany names may be used, as they are local to the function in which they\nare declared):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; *argv[]&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;However for some beginners like me, an abstract example would allow me to get a grasp on it:&lt;/p&gt;\n&lt;p&gt;When you write a method in your program, e.g. &lt;code&gt;int read_file(char filename[LEN]);&lt;/code&gt;, then you want, as the caller of this method to know if everything went well (because failures can happen, e.g. file could not be found). By checking the return value of the method you can know if everything went well or not, it&apos;s a mechanism for the method to signal you about its successful execution (or not), and let the caller (you, e.g. in your main method) decide how to handle an unexpected failure.&lt;/p&gt;\n&lt;p&gt;So now imagine I write a C program for a micro-mechanism which is used in a more complex system. When the system calls the micro-mechanism, it wants to know if everything went as expected, so that it can handle any potential error. If the C program&apos;s main method would return void, then how would the calling-system know about the execution of its subsystem (the micro-mechanism)? It cannot, that&apos;s why main() returns int, in order to communicate to its caller a successful (or not) execution.&lt;/p&gt;\n&lt;p&gt;In other words:&lt;/p&gt;\n&lt;p&gt;The rational is that the host environment (i.e. Operating System (OS)) needs to know if the program finished correctly. Without an int-compatible type as a return type (eg. void), the &quot;status returned to the host environment is unspecified&quot; (i.e. undefined behavior on most OS).&lt;/p&gt;\n    ","\n&lt;p&gt;On Windows, if a program crashes due to an access violation, the exit code will be &lt;code&gt;STATUS_ACCESS_VIOLATION (0xC0000005)&lt;/code&gt;.  Similar for other kinds of crashes from an x86 exception as well.&lt;/p&gt;\n&lt;p&gt;So there are things other than what you return from &lt;code&gt;main&lt;/code&gt; or pass to &lt;code&gt;exit&lt;/code&gt; that can cause an exit code to be seen.&lt;/p&gt;\n    "],"142":["\n\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/em&gt;!&lt;/p&gt;\n&lt;p&gt;This is a list of random books of diverse quality. In the view of some people (with some justification), it is no longer a list of recommended books. Some of the listed books contain blatantly incorrect statements or teach wrong/harmful practices.  People who are aware of such books can edit this answer to help improve it.\nSee &lt;a href=&quot;https://meta.stackoverflow.com/questions/355588/the-c-book-list-has-gone-haywire-what-to-do-with-it&quot;&gt;The C book list has gone haywire. What to do with it?&lt;/a&gt;, and also &lt;a href=&quot;https://meta.stackoverflow.com/questions/378437/deleted-question-audit-2018&quot;&gt;Deleted question audit 2018&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;Reference (All Levels)&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131103628&quot; rel=&quot;noreferrer&quot;&gt;The C Programming Language (2nd Edition)&lt;/a&gt; - Brian W. Kernighan and Dennis M. Ritchie (1988). Still a good, short but complete introduction to C (C90, not C99 or later versions), written by the inventor of C.  However, the language has changed and good C style has developed in the last 25 years, and there are parts of the book that show its age.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/013089592X&quot; rel=&quot;noreferrer&quot;&gt;C: A Reference Manual (5th Edition)&lt;/a&gt; - Samuel P. Harbison and Guy R. Steele (2002).  An excellent reference book on C, up to and including C99. It is not a tutorial, and probably unfit for beginners. It&apos;s great if you need to write a compiler for C, as the authors had to do when they started.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0596004362&quot; rel=&quot;noreferrer&quot;&gt;C Pocket Reference (O&apos;Reilly)&lt;/a&gt; - Peter Prinz and Ulla Kirch-Prinz (2002).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://c-faq.com/&quot; rel=&quot;noreferrer&quot;&gt;The comp.lang.c FAQ&lt;/a&gt; - Steve Summit. Web site with answers to many questions about C.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Various versions of the C language standards can be found &lt;a href=&quot;http://www.iso-9899.info/wiki/The_Standard&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.  There is an online version of the &lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html&quot; rel=&quot;noreferrer&quot;&gt;draft C11 standard&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.knosof.co.uk/cbook/cbook.html&quot; rel=&quot;noreferrer&quot;&gt;The new C standard - an annotated reference&lt;/a&gt; (Free PDF) - Derek M. Jones (2009).  The &quot;new standard&quot; referred to is the old C99 standard rather than C11.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG14/www/C99RationaleV5.10.pdf&quot; rel=&quot;noreferrer&quot;&gt;Rationale for C99 Standard&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;Beginner&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://knking.com/books/c2/index.html&quot; rel=&quot;noreferrer&quot;&gt;C Programming: A Modern Approach (2nd Edition)&lt;/a&gt; - K. N. King (2008).  A good book for learning C.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321776410&quot; rel=&quot;noreferrer&quot;&gt;Programming in C (4th Edition)&lt;/a&gt; - Stephen Kochan (2014). A good general introduction and tutorial.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0672326965&quot; rel=&quot;noreferrer&quot;&gt;C Primer Plus (5th Edition)&lt;/a&gt; - Stephen Prata (2004)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201183994&quot; rel=&quot;noreferrer&quot;&gt;A Book on C&lt;/a&gt; - Al Kelley/Ira Pohl (1998).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://publications.gbdirect.co.uk/c_book/&quot; rel=&quot;noreferrer&quot;&gt;The C Book&lt;/a&gt; (Free Online) - Mike Banahan, Declan Brady, and Mark Doran (1991).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.amazon.com//dp/0133976890&quot; rel=&quot;noreferrer&quot;&gt;C: How to Program (8th Edition)&lt;/a&gt; - Paul Deitel and Harvey M. Deitel (2015). Lots of good tips and best practices for beginners. The index is very good and serves as a decent reference (just not fully comprehensive, and very shallow).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1449399916&quot; rel=&quot;noreferrer&quot;&gt;Head First C&lt;/a&gt; - David Griffiths and Dawn Griffiths (2012).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.apress.com/book/9781430248811&quot; rel=&quot;noreferrer&quot;&gt;Beginning C (5th Edition)&lt;/a&gt; - Ivor Horton (2013). Very good explanation of pointers, using lots of small but complete programs.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0672324482&quot; rel=&quot;noreferrer&quot;&gt;Sams Teach Yourself C in 21 Days&lt;/a&gt; - Bradley L. Jones and Peter Aitken (2002). Very good introductory stuff.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/Programming-easy-steps-5th-Compiler/dp/1840788402/&quot; rel=&quot;noreferrer&quot;&gt;C In Easy Steps (5th Edition)&lt;/a&gt; - Mike McGrath (2018). It is a good book for learning and referencing C.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/dp/1718501048&quot; rel=&quot;noreferrer&quot;&gt;Effective C&lt;/a&gt; - Robert C Seacord (2020).  A good introduction to modern C, including chapters on dynamic memory allocation, on program structure, and on debugging, testing and analysis.  It has some pointers toward probable C2x features.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Intermediate&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://modernc.gforge.inria.fr/&quot; rel=&quot;noreferrer&quot;&gt;Modern C&lt;/a&gt;  Jens Gustedt (2017 1st Edn; 2020 2nd Edn).  Covers C in 5 levels (encounter, acquaintance, cognition, experience, ambition) from beginning C to advanced C.  It covers C11 and C17, including threads and atomic access, which few other books do. Not all compilers recognize these features in all environments.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.princeton.edu/software/cii/&quot; rel=&quot;noreferrer&quot;&gt;C Interfaces and Implementations&lt;/a&gt; - David R. Hanson (1997). Provides information on how to define a boundary between an interface and implementation in C in a generic and reusable fashion. It also demonstrates this principle by applying it to the implementation of common mechanisms and data structures in C, such as lists, sets, exceptions, string manipulation, memory allocators, and more. Basically, Hanson took all the code he&apos;d written as part of building &lt;a href=&quot;http://www.cs.arizona.edu/icon&quot; rel=&quot;noreferrer&quot;&gt;Icon&lt;/a&gt; and &lt;a href=&quot;http://www.cs.princeton.edu/software/lcc/&quot; rel=&quot;noreferrer&quot;&gt;lcc&lt;/a&gt; and pulled out the best bits in a form that other people could reuse for their own projects. It&apos;s a model of good C programming using modern design techniques (including Liskov&apos;s data abstraction), showing how to organize a big C project as a bunch of useful libraries.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201604612&quot; rel=&quot;noreferrer&quot;&gt;The C Puzzle Book&lt;/a&gt; - Alan R. Feuer (1998)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131315099&quot; rel=&quot;noreferrer&quot;&gt;The Standard C Library&lt;/a&gt; - P.J. Plauger (1992). It contains the complete source code to an implementation of the C89 standard library, along with extensive discussions about the design and why the code is designed as shown.&lt;/p&gt;\n\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1449327141&quot; rel=&quot;noreferrer&quot;&gt;21st Century C: C Tips from the New School&lt;/a&gt; - Ben Klemens (2012). In addition to the C language, the book explains gdb, valgrind, autotools, and git. The comments on style are found in the last part (Chapter 6 and beyond).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201314525&quot; rel=&quot;noreferrer&quot;&gt;Algorithms in C&lt;/a&gt; - Robert Sedgewick (1997). Gives you a real grasp of implementing algorithms in C. Very lucid and clear; will probably make you want to throw away all of your other algorithms books and keep this one.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0673999866&quot; rel=&quot;noreferrer&quot;&gt;Pointers on C&lt;/a&gt; - Kenneth Reek (1997).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321535421&quot; rel=&quot;noreferrer&quot;&gt;Problem Solving and Program Design in C (6th Edition)&lt;/a&gt; - Jeri R. Hanly and Elliot B. Koffman (2009).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B00101Y58Q&quot; rel=&quot;noreferrer&quot;&gt;Data Structures - An Advanced Approach Using C&lt;/a&gt; - Jeffrey Esakov and Tom Weiss (1989).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0672318962&quot; rel=&quot;noreferrer&quot;&gt;C Unleashed&lt;/a&gt; - Richard Heathfield, Lawrence Kirby, et al. (2000). Not ideal, but it is worth intermediate programmers practicing problems written in this book. This is a good cookbook-like approach suggested by comp.lang.c contributors.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.planetpdf.com/codecuts/pdfs/ooc.pdf&quot; rel=&quot;noreferrer&quot;&gt;Object-oriented Programming with ANSI-C&lt;/a&gt; (Free PDF) - Axel-Tobias Schreiner (1993).\nThe code gets a bit convoluted.  If you want C++, use C++.  It only uses C90, of course.&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;h1&gt;Expert&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131774298&quot; rel=&quot;noreferrer&quot;&gt;Expert C Programming: Deep C Secrets&lt;/a&gt; - Peter van der Linden (1994). Lots of interesting information and war stories from the Sun compiler team, but a little dated in places.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0534951406&quot; rel=&quot;noreferrer&quot;&gt;Advanced C Programming by Example&lt;/a&gt; - John W. Perry (1998).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321637739&quot; rel=&quot;noreferrer&quot;&gt;Advanced Programming in the UNIX Environment&lt;/a&gt; - Richard W. Stevens and Stephen A. Rago (2013).  Comprehensive description of how to use the Unix APIs from C code, but not so much about the mechanics of C coding.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;hr&gt;\n&lt;h1&gt;Uncategorized&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://cslibrary.stanford.edu/101/EssentialC.pdf&quot; rel=&quot;noreferrer&quot;&gt;Essential C&lt;/a&gt; (Free PDF) - Nick Parlante (2003). Note that this describes the C90 language at several points (&lt;em&gt;e.g.&lt;/em&gt;, in discussing &lt;code&gt;//&lt;/code&gt; comments and placement of variable declarations at arbitrary points in the code), so it should be treated with some caution.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201845199&quot; rel=&quot;noreferrer&quot;&gt;C Programming FAQs: Frequently Asked Questions&lt;/a&gt; - Steve Summit (1995).  This is the book of the web site listed earlier.  It doesn&apos;t cover C99 or the later standards.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0596006977&quot; rel=&quot;noreferrer&quot;&gt;C in a Nutshell&lt;/a&gt; - Peter Prinz and Tony Crawford (2005). Excellent book if you need a reference for C99.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201419505&quot; rel=&quot;noreferrer&quot;&gt;Functional C&lt;/a&gt; - Pieter Hartel and Henk Muller (1997). Teaches modern practices that are invaluable for low-level programming, with concurrency and modularity in mind.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020161586X&quot; rel=&quot;noreferrer&quot;&gt;The Practice of Programming&lt;/a&gt; - Brian W. Kernighan and Rob Pike (1999). A very good book to accompany K&amp;amp;R. It uses C++ and Java too.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201179288&quot; rel=&quot;noreferrer&quot;&gt;C Traps and Pitfalls&lt;/a&gt; by A. Koenig (1989). Very good, but the C style pre-dates standard C, which makes it less recommendable these days.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;Some have argued for the removal of &apos;Traps and Pitfalls&apos; from this list because it has trapped some people into making mistakes; others continue to argue for its inclusion.  Perhaps it should be regarded as an &apos;expert&apos; book because it requires moderately extensive knowledge of C to understand what&apos;s changed since it was published.&lt;/sup&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.misra-c.com/Activities/MISRAC/tabid/160/Default.aspx&quot; rel=&quot;noreferrer&quot;&gt;MISRA-C&lt;/a&gt; - industry standard published and maintained by the Motor Industry Software Reliability Association. Covers C89 and C99.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;Although this isn&apos;t a book as such, many programmers recommend reading and implementing as much of it as possible. MISRA-C was originally intended as guidelines for safety-critical applications in particular, but it applies to any area of application where stable, bug-free C code is desired (who doesn&apos;t want fewer bugs?). MISRA-C is becoming the de facto standard in the whole embedded industry and is getting increasingly popular even in other programming branches. There are (at least) three publications of the standard (1998, 2004, and the current version from 2012). There is also a MISRA Compliance Guidelines document from 2016, and MISRA C:2012 Amendment 1  Additional Security Guidelines for MISRA C:2012 (published in April 2016).&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;Note that some of the strictures in the MISRA rules are not appropriate to every context. For example, directive 4.12 states &quot;Dynamic memory allocation shall not be used&quot;. This is appropriate in the embedded systems for which the MISRA rules are designed; it is not appropriate everywhere. (Compilers, for instance, generally use dynamic memory allocation for things like symbol tables, and to do without dynamic memory allocation would be difficult, if not preposterous.)&lt;/sup&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Archived lists of ACCU-reviewed books on &lt;a href=&quot;https://web.archive.org/web/20071105015557/http://www.accu.informika.ru/bookreviews/public/reviews/0sb/beginner_s_c.htm&quot; rel=&quot;noreferrer&quot;&gt;Beginner&apos;s C&lt;/a&gt; (116 titles) from 2007 and &lt;a href=&quot;https://web.archive.org/web/20081020081215/http://www.accu.informika.ru/bookreviews/public/reviews/0sb/advanced_c.htm&quot; rel=&quot;noreferrer&quot;&gt;Advanced C&lt;/a&gt; (76 titles) from 2008. Most of these don&apos;t look to be on the main site anymore, and you can&apos;t browse that by subject anyway.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;Warnings&lt;/h1&gt;\n&lt;p&gt;There is a list of books and tutorials to be cautious about at the &lt;a href=&quot;http://iso-9899.info/wiki/Main_Page#Stuff_that_should_be_avoided&quot; rel=&quot;noreferrer&quot;&gt;ISO 9899 Wiki&lt;/a&gt;, which is not itself formally associated with ISO or the C standard, but contains information about the C standard (though it hails the release of ISO 9899:2011 and does not mention the release of ISO 9899:2018).&lt;/p&gt;\n&lt;p&gt;Be wary of books written by &lt;a href=&quot;http://catb.org/%7Eesr/jargon/html/B/bullschildt.html&quot; rel=&quot;noreferrer&quot;&gt;Herbert Schildt&lt;/a&gt;. In particular, you should stay away from &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0072121246&quot; rel=&quot;noreferrer&quot;&gt;C: The Complete Reference&lt;/a&gt; (4th Edition, 2000), known in some circles as C: The Complete Nonsense.&lt;/p&gt;\n&lt;p&gt;Also do not use the book &lt;a href=&quot;https://smile.amazon.com/dp/9387284492/&quot; rel=&quot;noreferrer&quot;&gt;Let Us C&lt;/a&gt; (16&lt;sup&gt;th&lt;/sup&gt; Edition, 2017) by Yashwant Kanetkar. Many people view it as an outdated book that teaches Turbo C and has lots of obsolete, misleading and incorrect material. For example, page 137 discusses the expected output from &lt;code&gt;printf(&quot;%d %d %d\\n&quot;, a, ++a, a++)&lt;/code&gt; and does not categorize it as &lt;a href=&quot;https://stackoverflow.com/questions/949433/why-are-these-constructs-using-pre-and-post-increment-undefined-behavior&quot;&gt;undefined behaviour&lt;/a&gt; as it should. It also consistently promotes unportable and buggy coding practices, such as using &lt;code&gt;gets&lt;/code&gt;, &lt;code&gt;%[\\n]s&lt;/code&gt; in &lt;code&gt;scanf&lt;/code&gt;, storing return value of &lt;code&gt;getchar&lt;/code&gt; in a variable of type &lt;code&gt;char&lt;/code&gt; or using &lt;code&gt;fflush&lt;/code&gt; on &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://learncodethehardway.org/c/&quot; rel=&quot;noreferrer&quot;&gt;Learn C The Hard Way&lt;/a&gt; (2015) by Zed Shaw. A book with mixed reviews.\n&lt;a href=&quot;http://hentenaar.com/dont-learn-c-the-wrong-way&quot; rel=&quot;noreferrer&quot;&gt;A critique of this book&lt;/a&gt; by Tim Hentenaar:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To summarize my views, which are laid out below, the author presents the material in a greatly oversimplified and misleading way, the whole corpus is a bundled mess, and some of the opinions and analyses he offers are just plain wrong. I&apos;ve tried to view this book through the eyes of a novice, but unfortunately I am biased by years of experience writing code in C. It&apos;s obvious to me that either the author has a flawed understanding of C, or he&apos;s deliberately oversimplifying to the point where he&apos;s actually misleading the reader (intentionally or otherwise).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&quot;Learn C The Hard Way&quot; is not a book that I could recommend to someone who is both learning to program and learning C.  If you&apos;re already a competent programmer in some other related language, then it represents an interesting and unusual exposition on C, though I have reservations about parts of the book.  &lt;sub&gt;&lt;em&gt;Jonathan Leffler&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Outdated&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1565923065&quot; rel=&quot;noreferrer&quot;&gt;Practical C Programming (3rd Edition)&lt;/a&gt; - Steve Oualline (1997)(Beginner)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sub&gt;&lt;strong&gt;Other contributors&lt;/strong&gt;, not necessarily credited in the revision history, include:&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/users/844882/alex-lockwood&quot;&gt;Alex Lockwood&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/479989/ben-jackson&quot;&gt;Ben Jackson&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/631423/bubbles&quot;&gt;Bubbles&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/193653/claws&quot;&gt;claws&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/14463/coledot&quot;&gt;coledot&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/3161/dana-robinson&quot;&gt;Dana Robinson&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/1322636/daniel-holden&quot;&gt;Daniel Holden&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/337306/desbest&quot;&gt;desbest&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/50305/dervin-thunk&quot;&gt;Dervin Thunk&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/57301/dwc&quot;&gt;dwc&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/2226524/eric-hou&quot;&gt;Erci Hou&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/102600/garen&quot;&gt;Garen&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/714232/haziz&quot;&gt;haziz&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/1029106/johan-bezem&quot;&gt;Johan Bezem&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/15168/jonathan-leffler&quot;&gt;Jonathan Leffler&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/141186/joshua-partogi&quot;&gt;Joshua Partogi&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/74660/lucas&quot;&gt;Lucas&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/584518/lundin&quot;&gt;Lundin&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/52734/mattk&quot;&gt;Matt K.&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/487623/mossplix&quot;&gt;mossplix&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/147192/matthieu-m&quot;&gt;Matthieu M.&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/3991400/midor&quot;&gt;midor&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/39892/nietzche-jou&quot;&gt;Nietzche-jou&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/41661/norman-ramsey&quot;&gt;Norman Ramsey&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/416623/r3st0r3&quot;&gt;r3st0r3&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/2395058/ridthyself&quot;&gt;ridthyself&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/71074/robert-s-barnes&quot;&gt;Robert S. Barnes&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/5688267/smalinux&quot;&gt;smalinux&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/3923896/steve-summit&quot;&gt;Steve Summit&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/3685/tim-ring&quot;&gt;Tim Ring&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/207003/tony-bai&quot;&gt;Tony Bai&lt;/a&gt;,\n&lt;a href=&quot;https://stackoverflow.com/users/213550/vmatm&quot;&gt;VMAtm&lt;/a&gt;\n&lt;/sub&gt;&lt;/p&gt;\n    "],"143":["\n&lt;p&gt;In simple terms, a &lt;strong&gt;stack trace&lt;/strong&gt; is a list of the method calls that the application was in the middle of when an Exception was thrown.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Simple Example&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;With the example given in the question, we can determine exactly where the exception was thrown in the application. Let&apos;s have a look at the stack trace:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException\n        at com.example.myproject.Book.getTitle(Book.java:&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n        at com.example.myproject.Author.getBookTitles(Author.java:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;)\n        at com.example.myproject.Bootstrap.main(Bootstrap.java:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a very simple stack trace. If we start at the beginning of the list of &quot;at ...&quot;, we can tell where our error happened. What we&apos;re looking for is the &lt;strong&gt;topmost&lt;/strong&gt; method call that is part of our application. In this case, it&apos;s:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;at com.example.myproject.Book.getTitle(Book.java:&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To debug this, we can open up &lt;code&gt;Book.java&lt;/code&gt; and look at line &lt;code&gt;16&lt;/code&gt;, which is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;      System.out.println(title.toString());\n&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; title;\n&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;   }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This would indicate that something (probably &lt;code&gt;title&lt;/code&gt;) is &lt;code&gt;null&lt;/code&gt; in the above code.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example with a chain of exceptions&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Sometimes applications will catch an Exception and re-throw it as the cause of another Exception.  This typically looks like:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getBookIds&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; {\n&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;         book.getId(id);    &lt;span class=&quot;hljs-comment&quot;&gt;// this method it throws a NullPointerException on line 22&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (NullPointerException e) {\n&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;         &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A book has a null property&quot;&lt;/span&gt;, e)\n&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;      }\n&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;   }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This might give you a stack trace that looks like:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.IllegalStateException: A book has a &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; property\n        at com.example.myproject.Author.getBookIds(Author.java:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;)\n        at com.example.myproject.Bootstrap.main(Bootstrap.java:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)\nCaused by: java.lang.NullPointerException\n        at com.example.myproject.Book.getId(Book.java:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;)\n        at com.example.myproject.Author.getBookIds(Author.java:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)\n        ... &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; more\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What&apos;s different about this one is the &quot;Caused by&quot;. Sometimes exceptions will have multiple &quot;Caused by&quot; sections. For these, you typically want to find the &quot;root cause&quot;, which will be one of the lowest &quot;Caused by&quot; sections in the stack trace. In our case, it&apos;s:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Caused by: java.lang.NullPointerException &amp;lt;-- root cause\n        at com.example.myproject.Book.getId(Book.java:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;) &amp;lt;-- important line\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, with this exception we&apos;d want to look at line &lt;code&gt;22&lt;/code&gt; of &lt;code&gt;Book.java&lt;/code&gt; to see what might cause the &lt;code&gt;NullPointerException&lt;/code&gt; here.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;More daunting example with library code&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Usually stack traces are much more complex than the two examples above. Here&apos;s an example (it&apos;s a long one, but demonstrates several levels of chained exceptions):&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;javax.servlet.ServletException: Something bad happened\n    at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;1157&lt;/span&gt;)\n    at com.example.myproject.ExceptionHandlerFilter.doFilter(ExceptionHandlerFilter.java:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;1157&lt;/span&gt;)\n    at com.example.myproject.OutputBufferFilter.doFilter(OutputBufferFilter.java:&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;1157&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;388&lt;/span&gt;)\n    at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;216&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;182&lt;/span&gt;)\n    at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;765&lt;/span&gt;)\n    at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:&lt;span class=&quot;hljs-number&quot;&gt;418&lt;/span&gt;)\n    at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:&lt;span class=&quot;hljs-number&quot;&gt;152&lt;/span&gt;)\n    at org.mortbay.jetty.Server.handle(Server.java:&lt;span class=&quot;hljs-number&quot;&gt;326&lt;/span&gt;)\n    at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:&lt;span class=&quot;hljs-number&quot;&gt;542&lt;/span&gt;)\n    at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:&lt;span class=&quot;hljs-number&quot;&gt;943&lt;/span&gt;)\n    at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:&lt;span class=&quot;hljs-number&quot;&gt;756&lt;/span&gt;)\n    at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:&lt;span class=&quot;hljs-number&quot;&gt;218&lt;/span&gt;)\n    at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:&lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;)\n    at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:&lt;span class=&quot;hljs-number&quot;&gt;228&lt;/span&gt;)\n    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:&lt;span class=&quot;hljs-number&quot;&gt;582&lt;/span&gt;)\nCaused by: com.example.myproject.MyProjectServletException\n    at com.example.myproject.MyServlet.doPost(MyServlet.java:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:&lt;span class=&quot;hljs-number&quot;&gt;727&lt;/span&gt;)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:&lt;span class=&quot;hljs-number&quot;&gt;820&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:&lt;span class=&quot;hljs-number&quot;&gt;511&lt;/span&gt;)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:&lt;span class=&quot;hljs-number&quot;&gt;1166&lt;/span&gt;)\n    at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)\n    ... &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt; more\nCaused by: org.hibernate.exception.ConstraintViolationException: could not insert: [com.example.myproject.MyEntity]\n    at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:&lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;)\n    at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:&lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;)\n    at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;)\n    at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:&lt;span class=&quot;hljs-number&quot;&gt;2329&lt;/span&gt;)\n    at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:&lt;span class=&quot;hljs-number&quot;&gt;2822&lt;/span&gt;)\n    at org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:&lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;)\n    at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:&lt;span class=&quot;hljs-number&quot;&gt;268&lt;/span&gt;)\n    at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;321&lt;/span&gt;)\n    at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;)\n    at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;130&lt;/span&gt;)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;210&lt;/span&gt;)\n    at org.hibernate.event.def.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;195&lt;/span&gt;)\n    at org.hibernate.event.def.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:&lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;)\n    at org.hibernate.impl.SessionImpl.fireSave(SessionImpl.java:&lt;span class=&quot;hljs-number&quot;&gt;705&lt;/span&gt;)\n    at org.hibernate.impl.SessionImpl.save(SessionImpl.java:&lt;span class=&quot;hljs-number&quot;&gt;693&lt;/span&gt;)\n    at org.hibernate.impl.SessionImpl.save(SessionImpl.java:&lt;span class=&quot;hljs-number&quot;&gt;689&lt;/span&gt;)\n    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;)\n    at java.lang.reflect.Method.invoke(Method.java:&lt;span class=&quot;hljs-number&quot;&gt;597&lt;/span&gt;)\n    at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:&lt;span class=&quot;hljs-number&quot;&gt;344&lt;/span&gt;)\n    at $Proxy19.save(Unknown Source)\n    at com.example.myproject.MyEntityService.save(MyEntityService.java:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;) &amp;lt;-- relevant &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(see notes below)&lt;/span&gt;\n    at com.example.myproject.MyServlet.doPost(MyServlet.java:&lt;span class=&quot;hljs-number&quot;&gt;164&lt;/span&gt;)\n    ... &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; more\nCaused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate &lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt; MY_COLUMN in statement [...]\n    at org.hsqldb.jdbc.Util.throwError(Unknown Source)\n    at org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown Source)\n    at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;)\n    at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:&lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;)\n    ... &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt; more\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this example, there&apos;s a lot more. What we&apos;re mostly concerned about is looking for methods that are from &lt;em&gt;our code&lt;/em&gt;, which would be anything in the &lt;code&gt;com.example.myproject&lt;/code&gt; package. From the second example (above), we&apos;d first want to look down for the root cause, which is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Caused by: java.sql.SQLException\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, all the method calls under that are library code. So we&apos;ll &lt;strong&gt;move up&lt;/strong&gt; to the &lt;strong&gt;&quot;Caused by&quot; above&lt;/strong&gt; it, and in that &quot;Caused by&quot; block, look for the &lt;strong&gt;first method call originating from our code&lt;/strong&gt;, which is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;at com.example.myproject.MyEntityService.save(MyEntityService.java:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Like in previous examples, we should look at &lt;code&gt;MyEntityService.java&lt;/code&gt; on line &lt;code&gt;59&lt;/code&gt;, because that&apos;s where this error originated (this one&apos;s a bit obvious what went wrong, since the SQLException states the error, but the debugging procedure is what we&apos;re after).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;What is a Stacktrace?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A stacktrace is a very helpful debugging tool. It shows the call stack (meaning, the stack of functions that were called up to that point) at the time an uncaught exception was thrown (or the time the stacktrace was generated manually). This is very useful because it doesn&apos;t only show you where the error happened, but also how the program ended up in that place of the code.\nThis leads over to the next question:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;What is an Exception?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;An Exception is what the runtime environment uses to tell you that an error occurred. Popular examples are NullPointerException, IndexOutOfBoundsException or ArithmeticException. Each of these are caused when you try to do something that is not possible. For example, a NullPointerException will be thrown when you try to dereference a Null-object:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\na.toString();                 &lt;span class=&quot;hljs-comment&quot;&gt;//this line throws a NullPointerException&lt;/span&gt;\n\nObject[] b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\nSystem.out.println(b[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]);    &lt;span class=&quot;hljs-comment&quot;&gt;//this line throws an IndexOutOfBoundsException,&lt;/span&gt;\n                              &lt;span class=&quot;hljs-comment&quot;&gt;//because b is only 5 elements long&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ia&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ib&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\nia = ia/ib;                   &lt;span class=&quot;hljs-comment&quot;&gt;//this line throws an  ArithmeticException with the &lt;/span&gt;\n                              &lt;span class=&quot;hljs-comment&quot;&gt;//message &quot;/ by 0&quot;, because you are trying to&lt;/span&gt;\n                              &lt;span class=&quot;hljs-comment&quot;&gt;//divide by 0, which is not possible.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;How should I deal with Stacktraces/Exceptions?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;At first, find out what is causing the Exception. Try googling the name of the exception to find out what the cause of that exception is. Most of the time it will be caused by incorrect code. In the given examples above, all of the exceptions are caused by incorrect code. So for the NullPointerException example you could make sure that &lt;code&gt;a&lt;/code&gt; is never null at that time. You could, for example, initialise &lt;code&gt;a&lt;/code&gt; or include a check like this one:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    a.toString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This way, the offending line is not executed if &lt;code&gt;a==null&lt;/code&gt;. Same goes for the other examples.&lt;/p&gt;\n&lt;p&gt;Sometimes you can&apos;t make sure that you don&apos;t get an exception. For example, if you are using a network connection in your program, you cannot stop the computer from loosing it&apos;s internet connection (e.g. you can&apos;t stop the user from disconnecting the computer&apos;s network connection). In this case the network library will probably throw an exception. Now you should catch the exception and &lt;strong&gt;handle&lt;/strong&gt; it. This means, in the example with the network connection, you should try to reopen the connection or notify the user or something like that. Also, whenever you use catch, always catch only the exception you want to catch, &lt;strong&gt;do not use broad catch statements like &lt;code&gt;catch (Exception e)&lt;/code&gt;&lt;/strong&gt; that would catch all exceptions. This is very important, because otherwise you might accidentally catch the wrong exception and react in the wrong way.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Socket&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Socket&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.1.1.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6789&lt;/span&gt;);\n    x.getInputStream().read()\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {\n    System.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connection could not be established, please try again later!&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Why should I not use &lt;code&gt;catch (Exception e)&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s use a small example to show why you should not just catch all exceptions:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mult&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer a,Integer b)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a/b\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n        System.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: Division by zero!&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What this code is trying to do is to catch the &lt;code&gt;ArithmeticException&lt;/code&gt; caused by a possible division by 0. But it also catches a possible &lt;code&gt;NullPointerException&lt;/code&gt; that is thrown if &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;. This means, you might get a &lt;code&gt;NullPointerException&lt;/code&gt; but you&apos;ll treat it as an ArithmeticException and probably do the wrong thing. In the best case you still miss that there was a NullPointerException. Stuff like that makes debugging much harder, so don&apos;t do that.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Figure out what is the cause of the exception and fix it, so that it doesn&apos;t throw the exception at all.&lt;/li&gt;\n&lt;li&gt;If 1. is not possible, catch the specific exception and handle it.\n&lt;ul&gt;\n&lt;li&gt;Never just add a try/catch and then just ignore the exception! Don&apos;t do that!&lt;/li&gt;\n&lt;li&gt;Never use &lt;code&gt;catch (Exception e)&lt;/code&gt;, always catch specific Exceptions. That will save you a lot of headaches.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;To add on to what Rob has mentioned.  Setting break points in your application allows for the step-by-step processing of the stack.  This enables the developer to use the debugger to see at what exact point the method is doing something that was unanticipated.&lt;/p&gt;\n\n&lt;p&gt;Since Rob has used the &lt;code&gt;NullPointerException&lt;/code&gt; (NPE) to illustrate something common, we can help to remove this issue in the following manner:  &lt;/p&gt;\n\n&lt;p&gt;if we have a method that takes parameters such as:  &lt;code&gt;void (String firstName)&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;In our code we would want to evaluate that &lt;code&gt;firstName&lt;/code&gt; contains a value, we would do this like so: &lt;code&gt;if(firstName == null || firstName.equals(&quot;&quot;))  return;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The above prevents us from using &lt;code&gt;firstName&lt;/code&gt; as an unsafe parameter.  Therefore  by doing null checks before processing we can help to ensure that our code will run properly.  To expand on an example that utilizes an object with methods we can look here:  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if(dog == null || dog.firstName == null)  return;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The above is the proper order to check for nulls, we start with the base object, dog in this case, and then begin walking down the tree of possibilities to make sure everything is valid before processing.  If the order were reversed a NPE could potentially be thrown and our program would crash.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;To understand the name&lt;/strong&gt;: A stack trace is a a list of Exceptions( or you can say a list of &quot;Cause by&quot;), from the most surface Exception(e.g. Service Layer Exception) to the deepest one (e.g. Database Exception). Just like the reason we call it &apos;stack&apos; is because stack is First in Last out (FILO), the deepest exception was happened in the very beginning, then a chain of exception was generated a series of consequences, the surface Exception was the last one happened in time, but we see it in the first place.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Key 1&lt;/strong&gt;:A tricky and important thing here need to be understand is : the deepest cause may not be the &quot;root cause&quot;, because if you write some &quot;bad code&quot;, it may cause some exception underneath which is deeper than its layer. For example, a bad sql query may cause SQLServerException connection reset in the bottem instead of syndax error, which may just in the middle of the stack.&lt;/p&gt;\n\n&lt;p&gt;-&amp;gt; &lt;strong&gt;Locate the root cause in the middle is your job.&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/jmGB4.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/jmGB4.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Key 2&lt;/strong&gt;:Another tricky but important thing is inside each &quot;Cause by&quot; block, the first line was the deepest layer and happen first place for this block. For instance,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException\n        at com.example.myproject.Book.getTitle(Book.java:&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n           at com.example.myproject.Author.getBookTitles(Author.java:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;)\n               at com.example.myproject.Bootstrap.main(Bootstrap.java:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Book.java:16 was called by Auther.java:25 which was called by Bootstrap.java:14, Book.java:16 was the root cause.\nHere attach a diagram sort the trace stack in chronological order.\n&lt;a href=&quot;https://i.stack.imgur.com/R7vUD.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/R7vUD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There is one more stacktrace feature offered by Throwable family - the possibility to &lt;strong&gt;manipulate&lt;/strong&gt; stack trace information.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Standard behavior:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; test.stack.trace;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;methodA&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        methodB();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;methodB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        methodC();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;methodC&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;().methodA();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Stack trace:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.RuntimeException\n    at test.stack.trace.SomeClass.methodC(SomeClass.java:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;)\n    at test.stack.trace.SomeClass.methodB(SomeClass.java:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;)\n    at test.stack.trace.SomeClass.methodA(SomeClass.java:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\n    at test.stack.trace.SomeClass.main(SomeClass.java:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Manipulated stack trace:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; test.stack.trace;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt; {\n\n    ...\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;methodC&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;();\n        e.setStackTrace(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StackTraceElement&lt;/span&gt;[]{\n                &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StackTraceElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OtherClass&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;methodX&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;String.java&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;),\n                &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StackTraceElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OtherClass&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;methodY&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;String.java&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;)\n        });\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; e;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;().methodA();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Stack trace:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.RuntimeException\n    at OtherClass.methodX(String.java:&lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;)\n    at OtherClass.methodY(String.java:&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just to add to the other examples, there are &lt;strong&gt;inner(nested) classes&lt;/strong&gt; that appear with the &lt;code&gt;$&lt;/code&gt; sign. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;privateMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception {\n        &lt;span class=&quot;hljs-type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                privateMethod();\n            }\n        };\n        runnable.run();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will result in this stack trace:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.RuntimeException\n        at Test.privateMethod(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n        at Test.access$&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt;(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        at Test$&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;run(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n        at Test.main(Test.java:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The other posts describe what a stack trace is, but it can still be hard to work with.&lt;/p&gt;\n\n&lt;p&gt;If you get a stack trace and want to trace the cause of the exception, a good start point in understanding it is to use the &lt;em&gt;Java Stack Trace Console&lt;/em&gt; in &lt;strong&gt;Eclipse&lt;/strong&gt;. If you use another IDE there may be a similar feature, but this answer is about Eclipse.&lt;/p&gt;\n\n&lt;p&gt;First, ensure that you have all of your Java sources accessible in an Eclipse project.&lt;/p&gt;\n\n&lt;p&gt;Then in the &lt;em&gt;Java&lt;/em&gt; perspective, click on the &lt;em&gt;Console&lt;/em&gt; tab (usually at the bottom). If the Console view is not visible, go to the menu option &lt;em&gt;Window -&amp;gt; Show View&lt;/em&gt; and select &lt;em&gt;Console&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Then in the console window, click on the following button (on the right)&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/B57aS.gif&quot; alt=&quot;Consoles button&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;and then select &lt;strong&gt;Java Stack Trace Console&lt;/strong&gt; from the drop-down list.&lt;/p&gt;\n\n&lt;p&gt;Paste your stack trace into the console. It will then provide a list of links into your source code and any other source code available.&lt;/p&gt;\n\n&lt;p&gt;This is what you might see (image from the Eclipse documentation):&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/E5hFw.png&quot; alt=&quot;Diagram from Eclipse documentation&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;The most recent method call made will be the &lt;em&gt;top&lt;/em&gt; of the stack, which is the top line (excluding the message text). Going down the stack goes back in time. The second line is the method that calls the first line, etc.&lt;/p&gt;\n\n&lt;p&gt;If you are using open-source software, you might need to download and attach to your project the sources if you want to examine. Download the source jars, in your project, open the &lt;em&gt;Referenced Libraries&lt;/em&gt; folder to find your jar for your open-source module (the one with the class files) then right click, select &lt;em&gt;Properties&lt;/em&gt; and attach the source jar.&lt;/p&gt;\n    "],"144":["\n&lt;p&gt;If your goal is to use a profiler, use one of the suggested ones.&lt;/p&gt;\n\n&lt;p&gt;However, if you&apos;re in a hurry and you can manually interrupt your program under the debugger while it&apos;s being subjectively slow, there&apos;s a simple way to find performance problems.&lt;/p&gt;\n\n&lt;p&gt;Just halt it several times, and each time look at the call stack. If there is some code that is wasting some percentage of the time, 20% or 50% or whatever, that is the probability that you will catch it in the act on each sample. So, that is roughly the percentage of samples on which you will see it. There is no educated guesswork required. If you do have a guess as to what the problem is, this will prove or disprove it.&lt;/p&gt;\n\n&lt;p&gt;You may have multiple performance problems of different sizes. If you clean out any one of them, the remaining ones will take a larger percentage, and be easier to spot, on subsequent passes. This &lt;em&gt;magnification effect&lt;/em&gt;, when compounded over multiple problems, can lead to truly massive speedup factors.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: Programmers tend to be skeptical of this technique unless they&apos;ve used it themselves. They will say that profilers give you this information, but that is only true if they sample the entire call stack, and then let you examine a random set of samples. (The summaries are where the insight is lost.) Call graphs don&apos;t give you the same information, because &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;They don&apos;t summarize at the instruction level, and&lt;/li&gt;\n&lt;li&gt;They give confusing summaries in the presence of recursion.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;They will also say it only works on toy programs, when actually it works on any program, and it seems to work better on bigger programs, because they tend to have more problems to find. They will say it sometimes finds things that aren&apos;t problems, but that is only true if you see something &lt;em&gt;once&lt;/em&gt;. If you see a problem on more than one sample, it is real.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; This can also be done on multi-thread programs if there is a way to collect call-stack samples of the thread pool at a point in time, as there is in Java.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;P.P.S&lt;/strong&gt; As a rough generality, the more layers of abstraction you have in your software, the more likely you are to find that that is the cause of performance problems (and the opportunity to get speedup).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Added&lt;/strong&gt;: It might not be obvious, but the stack sampling technique works equally well in the presence of recursion. The reason is that the time that would be saved by removal of an instruction is approximated by the fraction of samples containing it, regardless of the number of times it may occur within a sample.&lt;/p&gt;\n\n&lt;p&gt;Another objection I often hear is: &quot;&lt;em&gt;It will stop someplace random, and it will miss the real problem&lt;/em&gt;&quot;.\nThis comes from having a prior concept of what the real problem is.\nA key property of performance problems is that they defy expectations.\nSampling tells you something is a problem, and your first reaction is disbelief.\nThat is natural, but you can be sure if it finds a problem it is real, and vice-versa.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Added&lt;/strong&gt;: Let me make a Bayesian explanation of how it works.  Suppose there is some instruction &lt;code&gt;I&lt;/code&gt; (call or otherwise) which is on the call stack some fraction &lt;code&gt;f&lt;/code&gt; of the time (and thus costs that much). For simplicity, suppose we don&apos;t know what &lt;code&gt;f&lt;/code&gt; is, but assume it is either 0.1, 0.2, 0.3, ... 0.9, 1.0, and the prior probability of each of these possibilities is 0.1, so all of these costs are equally likely a-priori.&lt;/p&gt;\n\n&lt;p&gt;Then suppose we take just 2 stack samples, and we see instruction &lt;code&gt;I&lt;/code&gt; on both samples, designated observation &lt;code&gt;o=2/2&lt;/code&gt;. This gives us new estimates of the frequency &lt;code&gt;f&lt;/code&gt; of &lt;code&gt;I&lt;/code&gt;, according to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Prior                                    \n&lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f=x)&lt;/span&gt; x  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;|f=x)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;amp;&amp;amp;f=x)&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;amp;&amp;amp;f &amp;gt;= x)&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f &amp;gt;= x | o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;\n\n0.1    1     1             0.1          0.1            0.25974026\n0.1    0.9   0.81          0.081        0.181          0.47012987\n0.1    0.8   0.64          0.064        0.245          0.636363636\n0.1    0.7   0.49          0.049        0.294          0.763636364\n0.1    0.6   0.36          0.036        0.33           0.857142857\n0.1    0.5   0.25          0.025        0.355          0.922077922\n0.1    0.4   0.16          0.016        0.371          0.963636364\n0.1    0.3   0.09          0.009        0.38           0.987012987\n0.1    0.2   0.04          0.004        0.384          0.997402597\n0.1    0.1   0.01          0.001        0.385          1\n\n                  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt; 0.385                \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The last column says that, for example, the probability that &lt;code&gt;f&lt;/code&gt; &amp;gt;= 0.5 is 92%, up from the prior assumption of 60%.&lt;/p&gt;\n\n&lt;p&gt;Suppose the prior assumptions are different. Suppose we assume &lt;code&gt;P(f=0.1)&lt;/code&gt; is .991 (nearly certain), and all the other possibilities are almost impossible (0.001). In other words, our prior certainty is that &lt;code&gt;I&lt;/code&gt; is cheap. Then we get:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Prior                                    \n&lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f=x)&lt;/span&gt; x  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;|f=x)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;amp;&amp;amp; f=x)&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;amp;&amp;amp;f &amp;gt;= x)&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f &amp;gt;= x | o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;\n\n0.001  1    1              0.001        0.001          0.072727273\n0.001  0.9  0.81           0.00081      0.00181        0.131636364\n0.001  0.8  0.64           0.00064      0.00245        0.178181818\n0.001  0.7  0.49           0.00049      0.00294        0.213818182\n0.001  0.6  0.36           0.00036      0.0033         0.24\n0.001  0.5  0.25           0.00025      0.00355        0.258181818\n0.001  0.4  0.16           0.00016      0.00371        0.269818182\n0.001  0.3  0.09           0.00009      0.0038         0.276363636\n0.001  0.2  0.04           0.00004      0.00384        0.279272727\n0.991  0.1  0.01           0.00991      0.01375        1\n\n                  &lt;span class=&quot;hljs-title&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(o=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt; 0.01375                \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now it says &lt;code&gt;P(f &amp;gt;= 0.5)&lt;/code&gt; is 26%, up from the prior assumption of 0.6%. So Bayes allows us to update our estimate of the probable cost of &lt;code&gt;I&lt;/code&gt;. If the amount of data is small, it doesn&apos;t tell us accurately what the cost is, only that it is big enough to be worth fixing.&lt;/p&gt;\n\n&lt;p&gt;Yet another way to look at it is called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Rule_of_succession&quot; rel=&quot;noreferrer&quot;&gt;Rule Of Succession&lt;/a&gt;.\nIf you flip a coin 2 times, and it comes up heads both times, what does that tell you about the probable weighting of the coin?\nThe respected way to answer is to say that it&apos;s a Beta distribution, with average value &lt;code&gt;(number of hits + 1) / (number of tries + 2) = (2+1)/(2+2) = 75%&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;(The key is that we see &lt;code&gt;I&lt;/code&gt; more than once. If we only see it once, that doesn&apos;t tell us much except that &lt;code&gt;f&lt;/code&gt; &amp;gt; 0.)&lt;/p&gt;\n\n&lt;p&gt;So, even a very small number of samples can tell us a lot about the cost of instructions that it sees. (And it will see them with a frequency, on average, proportional to their cost. If &lt;code&gt;n&lt;/code&gt; samples are taken, and &lt;code&gt;f&lt;/code&gt; is the cost, then &lt;code&gt;I&lt;/code&gt; will appear on &lt;code&gt;nf+/-sqrt(nf(1-f))&lt;/code&gt; samples. Example, &lt;code&gt;n=10&lt;/code&gt;, &lt;code&gt;f=0.3&lt;/code&gt;, that is &lt;code&gt;3+/-1.4&lt;/code&gt; samples.)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Added&lt;/strong&gt;: To give an intuitive feel for the difference between measuring and random stack sampling:&lt;br&gt;\nThere are profilers now that sample the stack, even on wall-clock time, but &lt;em&gt;what comes out&lt;/em&gt; is measurements (or hot path, or hot spot, from which a &quot;bottleneck&quot; can easily hide). What they don&apos;t show you (and they easily could) is the actual samples themselves. And if your goal is to &lt;em&gt;find&lt;/em&gt; the bottleneck, the number of them you need to see is, &lt;em&gt;on average&lt;/em&gt;, 2 divided by the fraction of time it takes.\nSo if it takes 30% of time, 2/.3 = 6.7 samples, on average, will show it, and the chance that 20 samples will show it is 99.2%.&lt;/p&gt;\n\n&lt;p&gt;Here is an off-the-cuff illustration of the difference between examining measurements and examining stack samples.\nThe bottleneck could be one big blob like this, or numerous small ones, it makes no difference.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/FpWuS.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/FpWuS.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Measurement is horizontal; it tells you what fraction of time specific routines take.\nSampling is vertical.\nIf there is any way to avoid what the whole program is doing at that moment, &lt;em&gt;and if you see it on a second sample&lt;/em&gt;, you&apos;ve found the bottleneck.\nThat&apos;s what makes the difference - seeing the whole reason for the time being spent, not just how much.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;http://en.wikipedia.org/wiki/Valgrind&quot; rel=&quot;nofollow noreferrer&quot;&gt;Valgrind&lt;/a&gt; with the following options:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;valgrind --tool=callgrind ./(Your binary)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This generates a file called &lt;code&gt;callgrind.out.x&lt;/code&gt;. Use the &lt;code&gt;kcachegrind&lt;/code&gt; tool to read this file. It will give you a graphical analysis of things with results like which lines cost how much.&lt;/p&gt;\n    ","\n&lt;p&gt;I assume you&apos;re using GCC. The standard solution would be to profile with &lt;a href=&quot;http://www.math.utah.edu/docs/info/gprof_toc.html&quot; rel=&quot;noreferrer&quot;&gt;gprof&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Be sure to add &lt;code&gt;-pg&lt;/code&gt; to compilation before profiling:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;cc -o myprog myprog.c utils.c -g -pg\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I haven&apos;t tried it yet but I&apos;ve heard good things about &lt;a href=&quot;https://github.com/gperftools/gperftools&quot; rel=&quot;noreferrer&quot;&gt;google-perftools&lt;/a&gt;. It is definitely worth a try.&lt;/p&gt;\n\n&lt;p&gt;Related question &lt;a href=&quot;https://stackoverflow.com/questions/56672/how-do-you-profile-your-code&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A few other buzzwords if &lt;code&gt;gprof&lt;/code&gt; does not do the job for you: &lt;a href=&quot;http://en.wikipedia.org/wiki/Valgrind&quot; rel=&quot;noreferrer&quot;&gt;Valgrind&lt;/a&gt;, Intel &lt;a href=&quot;http://en.wikipedia.org/wiki/VTune&quot; rel=&quot;noreferrer&quot;&gt;VTune&lt;/a&gt;, Sun &lt;a href=&quot;http://en.wikipedia.org/wiki/DTrace&quot; rel=&quot;noreferrer&quot;&gt;DTrace&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Newer kernels (e.g. the latest Ubuntu kernels) come with the new &apos;perf&apos; tools (&lt;code&gt;apt-get install linux-tools&lt;/code&gt;) AKA &lt;a href=&quot;https://en.wikipedia.org/wiki/Perf_(Linux)&quot; rel=&quot;noreferrer&quot;&gt;perf_events&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;These come with classic sampling profilers (&lt;a href=&quot;http://manpages.ubuntu.com/manpages/trusty/man1/perf.1.html&quot; rel=&quot;noreferrer&quot;&gt;man-page&lt;/a&gt;) as well as the awesome &lt;a href=&quot;http://web.archive.org/web/20090922171904/http://blog.fenrus.org/?p=5&quot; rel=&quot;noreferrer&quot;&gt;timechart&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;The important thing is that these tools can be &lt;strong&gt;system profiling&lt;/strong&gt; and not just process profiling - they can show the interaction between threads, processes and the kernel and let you understand the scheduling and I/O dependencies between processes.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/FMYp4.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The answer to run &lt;code&gt;valgrind --tool=callgrind&lt;/code&gt; is not quite complete without some options. We usually do not want to profile 10 minutes of slow startup time under Valgrind and want to profile our program when it is doing some task.&lt;/p&gt;\n\n&lt;p&gt;So this is what I recommend. Run program first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;valgrind --tool=callgrind --dump-instr=yes -v --instr-atstart=no ./binary &amp;gt; tmp\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now when it works and we want to start profiling we should run in another window:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;callgrind_control -i on\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This turns profiling on. To turn it off and stop whole task we might use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;callgrind_control -k\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we have some files named callgrind.out.* in current directory. To see profiling results use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;kcachegrind callgrind.out.*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I recommend in next window to click on &quot;Self&quot; column header, otherwise it shows that &quot;main()&quot; is most time consuming task. &quot;Self&quot; shows how much each function itself took time, not together with dependents. &lt;/p&gt;\n    ","\n&lt;p&gt;I would use Valgrind and Callgrind as a base for my profiling tool suite. What is important to know is that Valgrind is basically a Virtual Machine:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;(wikipedia) Valgrind is in essence a virtual\n  machine using just-in-time (JIT)\n  compilation techniques, including\n  dynamic recompilation. Nothing from\n  the original program ever gets run\n  directly on the host processor.\n  Instead, Valgrind first translates the\n  program into a temporary, simpler form\n  called Intermediate Representation\n  (IR), which is a processor-neutral,\n  SSA-based form. After the conversion,\n  a tool (see below) is free to do\n  whatever transformations it would like\n  on the IR, before Valgrind translates\n  the IR back into machine code and lets\n  the host processor run it. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Callgrind is a profiler build upon that. Main benefit is that you don&apos;t have to run your aplication for hours to get reliable result. Even one second run is sufficient to get rock-solid, reliable results, because Callgrind is a &lt;strong&gt;non-probing&lt;/strong&gt; profiler. &lt;/p&gt;\n\n&lt;p&gt;Another tool build upon Valgrind is Massif. I use it to profile heap memory usage. It works great. What it does is that it gives you snapshots of memory usage -- detailed information WHAT holds WHAT percentage of memory, and WHO had put it there. Such information is available at different points of time of application run.&lt;/p&gt;\n    ","\n&lt;p&gt;This is a response to &lt;a href=&quot;https://stackoverflow.com/a/375930/321731&quot;&gt;Nazgob&apos;s Gprof answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve been using Gprof the last couple of days and have already found three significant limitations, one of which I&apos;ve not seen documented anywhere else (yet):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It doesn&apos;t work properly on multi-threaded code, unless you use a &lt;a href=&quot;http://sam.zoy.org/writings/programming/gprof.html&quot; rel=&quot;noreferrer&quot;&gt;workaround&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The call graph gets confused by function pointers. Example: I have a function called &lt;code&gt;multithread()&lt;/code&gt; which enables me to multi-thread a specified function over a specified array (both passed as arguments). Gprof however, views all calls to &lt;code&gt;multithread()&lt;/code&gt; as equivalent for the purposes of computing time spent in children. Since some functions I pass to &lt;code&gt;multithread()&lt;/code&gt; take much longer than others my call graphs are mostly useless. (To those wondering if threading is the issue here: no, &lt;code&gt;multithread()&lt;/code&gt; can optionally, and did in this case, run everything sequentially on the calling thread only).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It says &lt;a href=&quot;http://www.cs.utah.edu/dept/old/texinfo/as/gprof.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; that &quot;... the number-of-calls figures are derived by counting, not sampling. They are completely accurate...&quot;. Yet I find my call graph giving me 5345859132+784984078 as call stats to my most-called function, where the first number is supposed to be direct calls, and the second recursive calls (which are all from itself). Since this implied I had a bug, I put in long (64-bit) counters into the code and did the same run again. My counts: 5345859132 direct, and 78094395406 self-recursive calls.  There are a lot of digits there, so I&apos;ll point out the recursive calls I measure are 78bn, versus 784m from Gprof: a factor of 100 different. Both runs were single threaded and unoptimised code, one compiled &lt;code&gt;-g&lt;/code&gt; and the other &lt;code&gt;-pg&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This was GNU &lt;a href=&quot;https://en.wikipedia.org/wiki/Gprof&quot; rel=&quot;noreferrer&quot;&gt;Gprof&lt;/a&gt; (GNU Binutils for Debian) 2.18.0.20080103 running under 64-bit Debian Lenny, if that helps anyone.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Survey of C++ profiling techniques: gprof vs valgrind vs perf vs gperftools&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In this answer, I will use several different tools to a analyze a few very simple test programs, in order to concretely compare how those tools work.&lt;/p&gt;\n&lt;p&gt;The following test program is very simple and does the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; calls &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;maybe_slow&lt;/code&gt; 3 times, one of the &lt;code&gt;maybe_slow&lt;/code&gt; calls being slow&lt;/p&gt;\n&lt;p&gt;The slow call of &lt;code&gt;maybe_slow&lt;/code&gt; is 10x longer, and dominates runtime if we consider calls to the child function &lt;code&gt;common&lt;/code&gt;. Ideally, the profiling tool will be able to point us to the specific slow call.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;both &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;maybe_slow&lt;/code&gt; call &lt;code&gt;common&lt;/code&gt;, which accounts for the bulk of the program execution&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The program interface is:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;./main.out [n [seed]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and the program does &lt;code&gt;O(n^2)&lt;/code&gt; loops in total. &lt;code&gt;seed&lt;/code&gt; is just to get different output without affecting runtime.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;main.c&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;inttypes.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; __attribute__ ((noinline)) &lt;span class=&quot;hljs-built_in&quot;&gt;common&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; seed) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i) {\n        seed = (seed * seed) - (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * seed) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seed;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; __attribute__ ((noinline)) &lt;span class=&quot;hljs-built_in&quot;&gt;fast&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; seed) {\n    &lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; max = (n / &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; max; ++i) {\n        seed = &lt;span class=&quot;hljs-built_in&quot;&gt;common&lt;/span&gt;(n, (seed * seed) - (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * seed) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seed;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; __attribute__ ((noinline)) &lt;span class=&quot;hljs-built_in&quot;&gt;maybe_slow&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; seed, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; is_slow) {\n    &lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; max = n;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_slow) {\n        max *= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; max; ++i) {\n        seed = &lt;span class=&quot;hljs-built_in&quot;&gt;common&lt;/span&gt;(n, (seed * seed) - (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * seed) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seed;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;uint64_t&lt;/span&gt; n, seed;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (argc &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        n = &lt;span class=&quot;hljs-built_in&quot;&gt;strtoll&lt;/span&gt;(argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        n = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (argc &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n        seed = &lt;span class=&quot;hljs-built_in&quot;&gt;strtoll&lt;/span&gt;(argv[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        seed = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n    seed += &lt;span class=&quot;hljs-built_in&quot;&gt;maybe_slow&lt;/span&gt;(n, seed, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    seed += &lt;span class=&quot;hljs-built_in&quot;&gt;fast&lt;/span&gt;(n, seed);\n    seed += &lt;span class=&quot;hljs-built_in&quot;&gt;maybe_slow&lt;/span&gt;(n, seed, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    seed += &lt;span class=&quot;hljs-built_in&quot;&gt;fast&lt;/span&gt;(n, seed);\n    seed += &lt;span class=&quot;hljs-built_in&quot;&gt;maybe_slow&lt;/span&gt;(n, seed, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    seed += &lt;span class=&quot;hljs-built_in&quot;&gt;fast&lt;/span&gt;(n, seed);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; PRIX64 &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;, seed);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;gprof&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;gprof requires recompiling the software with instrumentation, and it also uses a sampling approach together with that instrumentation. It therefore strikes a balance between accuracy (sampling is not always fully accurate and can skip functions) and execution slowdown (instrumentation and sampling are relatively fast techniques that don&apos;t slow down execution very much).&lt;/p&gt;\n&lt;p&gt;gprof is built-into GCC/binutils, so all we have to do is to compile with the &lt;code&gt;-pg&lt;/code&gt; option to enable gprof. We then run the program normally with a size CLI parameter that produces a run of reasonable duration of a few seconds (&lt;code&gt;10000&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;gcc -pg -ggdb3 -O3 -std=c99 -Wall -Wextra -pedantic -o main.out main.c\ntime ./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For educational reasons, we will also do a run without optimizations enabled. Note that this is useless in practice, as you normally only care about optimizing the performance of the optimized program:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;gcc -pg -ggdb3 -O0 -std=c99 -Wall -Wextra -pedantic -o main.out main.c\n./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First, &lt;code&gt;time&lt;/code&gt; tells us that the execution time with and without &lt;code&gt;-pg&lt;/code&gt; were the same, which is great: no slowdown! I have however seen accounts of 2x - 3x slowdowns on complex software, e.g. as &lt;a href=&quot;https://gem5.atlassian.net/browse/GEM5-337&quot; rel=&quot;nofollow noreferrer&quot;&gt;shown in this ticket&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Because we compiled with &lt;code&gt;-pg&lt;/code&gt;, running the program produces a file &lt;code&gt;gmon.out&lt;/code&gt; file containing the profiling data.&lt;/p&gt;\n&lt;p&gt;We can observe that file graphically with &lt;code&gt;gprof2dot&lt;/code&gt; as asked at: &lt;a href=&quot;https://stackoverflow.com/questions/2439060/is-it-possible-to-get-a-graphical-representation-of-gprof-results&quot;&gt;Is it possible to get a graphical representation of gprof results?&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;sudo apt install graphviz\npython3 -m pip install --user gprof2dot\ngprof main.out &amp;gt; main.gprof\ngprof2dot &amp;lt; main.gprof | dot -Tsvg -o output.svg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, the &lt;code&gt;gprof&lt;/code&gt; tool reads the &lt;code&gt;gmon.out&lt;/code&gt; trace information, and generates a human readable report in &lt;code&gt;main.gprof&lt;/code&gt;, which &lt;code&gt;gprof2dot&lt;/code&gt; then reads to generate a graph.&lt;/p&gt;\n&lt;p&gt;The source for gprof2dot is at: &lt;a href=&quot;https://github.com/jrfonseca/gprof2dot&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/jrfonseca/gprof2dot&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;We observe the following for the &lt;code&gt;-O0&lt;/code&gt; run:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/mM8NQ.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/mM8NQ.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;and for the &lt;code&gt;-O3&lt;/code&gt; run:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/31VNy.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/31VNy.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;-O0&lt;/code&gt; output is pretty much self-explanatory. For example, it shows that the 3 &lt;code&gt;maybe_slow&lt;/code&gt; calls and their child calls take up 97.56% of the total runtime, although execution of &lt;code&gt;maybe_slow&lt;/code&gt; itself without children accounts for 0.00% of the total execution time, i.e. almost all the time spent in that function was spent on child calls.&lt;/p&gt;\n&lt;p&gt;TODO: why is &lt;code&gt;main&lt;/code&gt; missing from the &lt;code&gt;-O3&lt;/code&gt; output, even though I can see it on a &lt;code&gt;bt&lt;/code&gt; in GDB? &lt;a href=&quot;https://stackoverflow.com/questions/39041871/missing-function-from-gprof-output&quot;&gt;Missing function from GProf output&lt;/a&gt; I think it is because gprof is also sampling based in addition to its compiled instrumentation, and the &lt;code&gt;-O3&lt;/code&gt; &lt;code&gt;main&lt;/code&gt; is just too fast and got no samples.&lt;/p&gt;\n&lt;p&gt;I choose SVG output instead of PNG because the SVG is searchable with &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;F&lt;/kbd&gt; and the file size can be about 10x smaller. Also, the width and height of the generated image can be humoungous with tens of thousands of pixels for complex software, and GNOME &lt;code&gt;eog&lt;/code&gt; 3.28.1 bugs out in that case for PNGs, while SVGs get opened by my browser automatically. gimp 2.8 worked well though, see also:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/1112641/how-to-view-extremely-large-images&quot;&gt;https://askubuntu.com/questions/1112641/how-to-view-extremely-large-images&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/77968/viewing-large-image-on-linux&quot;&gt;https://unix.stackexchange.com/questions/77968/viewing-large-image-on-linux&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://superuser.com/questions/356038/viewer-for-huge-images-under-linux-100-mp-color-images&quot;&gt;https://superuser.com/questions/356038/viewer-for-huge-images-under-linux-100-mp-color-images&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;but even then, you will be dragging the image around a lot to find what you want, see e.g. this image from a &quot;real&quot; software example taken from &lt;a href=&quot;https://gem5.atlassian.net/browse/GEM5-337&quot; rel=&quot;nofollow noreferrer&quot;&gt;this ticket&lt;/a&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Nvg9G.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Nvg9G.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Can you find the most critical call stack easily with all those tiny unsorted spaghetti lines going over one another? There might be better &lt;code&gt;dot&lt;/code&gt; options I&apos;m sure, but I don&apos;t want to go there now. What we really need is a proper dedicated viewer for it, but I haven&apos;t found one yet:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7274095/view-gprof-output-in-kcachegrind&quot;&gt;View gprof output in kcachegrind&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1576666/which-is-the-best-replacement-for-kprof&quot;&gt;Which is the best replacement for KProf?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You can however use the color map to mitigate those problems a bit. For example, on the previous huge image, I finally managed to find the critical path on the left when I made the brilliant deduction that green comes after red, followed finally by darker and darker blue.&lt;/p&gt;\n&lt;p&gt;Alternatively, we can also observe the text output of the &lt;code&gt;gprof&lt;/code&gt; built-in binutils tool which we previously saved at:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;cat main.gprof\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;By default, this produces an extremely verbose output that explains what the output data means. Since I can&apos;t explain better than that, I&apos;ll let you read it yourself.&lt;/p&gt;\n&lt;p&gt;Once you have understood the data output format, you can reduce verbosity to show just the data without the tutorial with the &lt;code&gt;-b&lt;/code&gt; option:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;gprof -b main.out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In our example, outputs were for &lt;code&gt;-O0&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Flat profile:\n\nEach sample counts as &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; seconds.\n  %   cumulative   self              self     total           \n time   seconds   seconds    calls   s/call   s/call  name    \n&lt;span class=&quot;hljs-number&quot;&gt;100.35&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  common\n  &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;  fast\n  &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.19&lt;/span&gt;  maybe_slow\n\n            Call graph\n\n\ngranularity: each sample hit covers &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.27&lt;/span&gt;% of &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt; seconds\n\nindex % time    self  children    called     name\n                &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3003&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      fast [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;120000&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      maybe_slow [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;         common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n-----------------------------------------------\n                                                 &amp;lt;spontaneous&amp;gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]    &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.67&lt;/span&gt;                 main [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           maybe_slow [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           fast [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n-----------------------------------------------\n                &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           main [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]     &lt;span class=&quot;hljs-number&quot;&gt;97.6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         maybe_slow [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;120000&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n-----------------------------------------------\n                &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           main [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]      &lt;span class=&quot;hljs-number&quot;&gt;2.4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         fast [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3003&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n-----------------------------------------------\n\nIndex by function name\n\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] common                  [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] fast                    [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] maybe_slow\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and for &lt;code&gt;-O3&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Flat profile:\n\nEach sample counts as &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; seconds.\n  %   cumulative   self              self     total           \n time   seconds   seconds    calls  us/call  us/call  name    \n&lt;span class=&quot;hljs-number&quot;&gt;100.52&lt;/span&gt;      &lt;span class=&quot;hljs-number&quot;&gt;1.84&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.84&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;14.96&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;14.96&lt;/span&gt;  common\n\n            Call graph\n\n\ngranularity: each sample hit covers &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.54&lt;/span&gt;% of &lt;span class=&quot;hljs-number&quot;&gt;1.84&lt;/span&gt; seconds\n\nindex % time    self  children    called     name\n                &lt;span class=&quot;hljs-number&quot;&gt;0.04&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3003&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      fast [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;1.79&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;120000&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      maybe_slow [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.84&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;         common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n-----------------------------------------------\n                                                 &amp;lt;spontaneous&amp;gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]     &lt;span class=&quot;hljs-number&quot;&gt;97.6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.79&lt;/span&gt;                 maybe_slow [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;1.79&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;120000&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n-----------------------------------------------\n                                                 &amp;lt;spontaneous&amp;gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]      &lt;span class=&quot;hljs-number&quot;&gt;2.4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.04&lt;/span&gt;                 fast [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;0.04&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3003&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n-----------------------------------------------\n\nIndex by function name\n\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] common\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As a very quick summary for each section e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;                &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           main [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]     &lt;span class=&quot;hljs-number&quot;&gt;97.6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         maybe_slow [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n                &lt;span class=&quot;hljs-number&quot;&gt;3.58&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;120000&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;123003&lt;/span&gt;      common [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;centers around the function that is left indented (&lt;code&gt;maybe_flow&lt;/code&gt;). &lt;code&gt;[3]&lt;/code&gt; is the ID of that function. Above the function, are its callers, and below it the callees.&lt;/p&gt;\n&lt;p&gt;For &lt;code&gt;-O3&lt;/code&gt;, see here like in the graphical output that &lt;code&gt;maybe_slow&lt;/code&gt; and &lt;code&gt;fast&lt;/code&gt; don&apos;t have a known parent, which is what the documentation says that &lt;code&gt;&amp;lt;spontaneous&amp;gt;&lt;/code&gt; means.&lt;/p&gt;\n&lt;p&gt;I&apos;m not sure if there is a nice way to do line-by-line profiling with gprof: &lt;a href=&quot;https://stackoverflow.com/questions/9608949/gprof-time-spent-in-particular-lines-of-code&quot;&gt;`gprof` time spent in particular lines of code&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;valgrind callgrind&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;valgrind runs the program through the valgrind virtual machine. This makes the profiling very accurate, but it also produces a very large slowdown of the program. I have also mentioned kcachegrind previously at: &lt;a href=&quot;https://stackoverflow.com/questions/517589/tools-to-get-a-pictorial-function-call-graph-of-code/31190167#31190167&quot;&gt;Tools to get a pictorial function call graph of code&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;callgrind is the valgrind&apos;s tool to profile code and kcachegrind is a KDE program that can visualize cachegrind output.&lt;/p&gt;\n&lt;p&gt;First we have to remove the &lt;code&gt;-pg&lt;/code&gt; flag to go back to normal compilation, otherwise the run actually fails with &lt;a href=&quot;https://stackoverflow.com/questions/2146082/valgrind-profiling-timer-expired&quot;&gt;&lt;code&gt;Profiling timer expired&lt;/code&gt;&lt;/a&gt;, and yes, this is so common that I did and there was a Stack Overflow question for it.&lt;/p&gt;\n&lt;p&gt;So we compile and run as:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;sudo apt install kcachegrind valgrind\ngcc -ggdb3 -O3 -std=c99 -Wall -Wextra -pedantic -o main.out main.c\ntime valgrind --tool=callgrind valgrind --dump-instr=yes \\\n  --collect-jumps=yes ./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I enable &lt;code&gt;--dump-instr=yes --collect-jumps=yes&lt;/code&gt; because this also dumps information that enables us to view a per assembly line breakdown of performance, at a relatively small added overhead cost.&lt;/p&gt;\n&lt;p&gt;Off the bat, &lt;code&gt;time&lt;/code&gt; tells us that the program took 29.5 seconds to execute, so we had a slowdown of about 15x on this example. Clearly, this slowdown is going to be a serious limitation for larger workloads. On the &quot;real world software example&quot; &lt;a href=&quot;https://gem5.atlassian.net/browse/GEM5-337&quot; rel=&quot;nofollow noreferrer&quot;&gt;mentioned here&lt;/a&gt;, I observed a slowdown of 80x.&lt;/p&gt;\n&lt;p&gt;The run generates a profile data file named &lt;code&gt;callgrind.out.&amp;lt;pid&amp;gt;&lt;/code&gt; e.g. &lt;code&gt;callgrind.out.8554&lt;/code&gt; in my case. We view that file with:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;kcachegrind callgrind.out&lt;span class=&quot;hljs-number&quot;&gt;.8554&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which shows a GUI that contains data similar to the textual gprof output:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/v1kfK.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/v1kfK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Also, if we go on the bottom right &quot;Call Graph&quot; tab, we see a call graph which we can export by right clicking it to obtain the following image with unreasonable amounts of white border :-)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZTdAJ.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZTdAJ.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I think &lt;code&gt;fast&lt;/code&gt; is not showing on that graph because kcachegrind must have simplified the visualization because that call takes up too little time, this will likely be the behavior you want on a real program. The right click menu has some settings to control when to cull such nodes, but I couldn&apos;t get it to show such a short call after a quick attempt. If I click on &lt;code&gt;fast&lt;/code&gt; on the left window, it does show a call graph with &lt;code&gt;fast&lt;/code&gt;, so that stack was actually captured. No one had yet found a way to show the complete graph call graph: &lt;a href=&quot;https://stackoverflow.com/questions/33769323/make-callgrind-show-all-function-calls-in-the-kcachegrind-callgraph&quot;&gt;Make callgrind show all function calls in the kcachegrind callgraph&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;TODO on complex C++ software, I see some entries of type &lt;code&gt;&amp;lt;cycle N&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;&amp;lt;cycle 11&amp;gt;&lt;/code&gt; where I&apos;d expect function names, what does that mean? I noticed there is a &quot;Cycle Detection&quot; button to toggle that on and off, but what does it mean?&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;perf&lt;/code&gt; from &lt;code&gt;linux-tools&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;perf&lt;/code&gt; seems to use exclusively Linux kernel sampling mechanisms. This makes it very simple to setup, but also not fully accurate.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;sudo apt install linux-tools\ntime perf record -g ./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This added 0.2s to execution, so we are fine time-wise, but I still don&apos;t see much of interest, after expanding the &lt;code&gt;common&lt;/code&gt; node with the keyboard right arrow:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Samples: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;K of event &lt;span class=&quot;hljs-string&quot;&gt;&apos;cycles:uppp&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;Event &lt;span class=&quot;hljs-title&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(approx.)&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6228527608&lt;/span&gt;     \n  Children      Self  Command   Shared Object     Symbol                  \n-   &lt;span class=&quot;hljs-number&quot;&gt;99.98&lt;/span&gt;%    &lt;span class=&quot;hljs-number&quot;&gt;99.88&lt;/span&gt;%  main.out  main.out          [.] common              \n     common                                                               \n     &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;%  main.out  [kernel]          [k] &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff8a6009e7&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%  main.out  [kernel]          [k] &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff8a600158&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [k] &lt;span class=&quot;hljs-number&quot;&gt;0x0000000000000040&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _dl_sysdep_start    \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] dl_main             \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] mprotect            \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _dl_map_object      \n     &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _xstat              \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] __GI___tunables_init\n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [.] &lt;span class=&quot;hljs-number&quot;&gt;0x2f3d4f4944555453&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [.] &lt;span class=&quot;hljs-number&quot;&gt;0x00007fff3cfc57ac&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _start              \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So then I try to benchmark the &lt;code&gt;-O0&lt;/code&gt; program to see if that shows anything, and only now, at last, do I see a call graph:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Samples: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;K of event &lt;span class=&quot;hljs-string&quot;&gt;&apos;cycles:uppp&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;Event &lt;span class=&quot;hljs-title&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(approx.)&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12438962281&lt;/span&gt;   \n  Children      Self  Command   Shared Object     Symbol                  \n+   &lt;span class=&quot;hljs-number&quot;&gt;99.99&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [.] &lt;span class=&quot;hljs-number&quot;&gt;0x04be258d4c544155&lt;/span&gt;  \n+   &lt;span class=&quot;hljs-number&quot;&gt;99.99&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  libc&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so      [.] __libc_start_main   \n-   &lt;span class=&quot;hljs-number&quot;&gt;99.99&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  main.out          [.] main                \n   - main                                                                 \n      - &lt;span class=&quot;hljs-number&quot;&gt;97.54&lt;/span&gt;% maybe_slow                                                 \n           common                                                         \n      - &lt;span class=&quot;hljs-number&quot;&gt;2.45&lt;/span&gt;% fast                                                        \n           common                                                         \n+   &lt;span class=&quot;hljs-number&quot;&gt;99.96&lt;/span&gt;%    &lt;span class=&quot;hljs-number&quot;&gt;99.85&lt;/span&gt;%  main.out  main.out          [.] common              \n+   &lt;span class=&quot;hljs-number&quot;&gt;97.54&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;%  main.out  main.out          [.] maybe_slow          \n+    &lt;span class=&quot;hljs-number&quot;&gt;2.45&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  main.out          [.] fast                \n     &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;%  main.out  [kernel]          [k] &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff8a6009e7&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [k] &lt;span class=&quot;hljs-number&quot;&gt;0x0000000000000040&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _dl_sysdep_start    \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] dl_main             \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _dl_lookup_symbol_x \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [kernel]          [k] &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff8a600158&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] mmap64              \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _dl_map_object      \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] __GI___tunables_init\n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [.] &lt;span class=&quot;hljs-number&quot;&gt;0x552e53555f6e653d&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  [unknown]         [.] &lt;span class=&quot;hljs-number&quot;&gt;0x00007ffe1cf20fdb&lt;/span&gt;  \n     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%     &lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;%  main.out  ld&lt;span class=&quot;hljs-number&quot;&gt;-2.27&lt;/span&gt;.so        [.] _start              \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;TODO: what happened on the &lt;code&gt;-O3&lt;/code&gt; execution? Is it simply that &lt;code&gt;maybe_slow&lt;/code&gt; and &lt;code&gt;fast&lt;/code&gt; were too fast and did not get any samples? Does it work well with &lt;code&gt;-O3&lt;/code&gt; on larger programs that take longer to execute? Did I miss some CLI option? I found out about &lt;code&gt;-F&lt;/code&gt; to control the sample frequency in Hertz, but I turned it up to the max allowed by default of &lt;code&gt;-F 39500&lt;/code&gt; (could be increased with &lt;code&gt;sudo&lt;/code&gt;) and I still don&apos;t see clear calls.&lt;/p&gt;\n&lt;p&gt;One cool thing about &lt;code&gt;perf&lt;/code&gt; is the FlameGraph tool from Brendan Gregg which displays the call stack timings in a very neat way that allows you to quickly see the big calls. The tool is available at: &lt;a href=&quot;https://github.com/brendangregg/FlameGraph&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/brendangregg/FlameGraph&lt;/a&gt; and is also mentioned on his perf tutorial at: &lt;a href=&quot;http://www.brendangregg.com/perf.html#FlameGraphs&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.brendangregg.com/perf.html#FlameGraphs&lt;/a&gt; When I ran &lt;code&gt;perf&lt;/code&gt; without &lt;code&gt;sudo&lt;/code&gt; I got &lt;a href=&quot;https://github.com/brendangregg/FlameGraph/issues/132&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ERROR: No stack counts found&lt;/code&gt;&lt;/a&gt; so for now I&apos;ll be doing it with &lt;code&gt;sudo&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;git clone https:&lt;span class=&quot;hljs-comment&quot;&gt;//github.com/brendangregg/FlameGraph&lt;/span&gt;\nsudo perf record -F &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt; -g -o perf_with_stack.data ./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\nsudo perf script -i perf_with_stack.data | FlameGraph/stackcollapse-perf.pl | FlameGraph/flamegraph.pl &amp;gt; flamegraph.svg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but in such a simple program the output is not very easy to understand, since we can&apos;t easily see neither &lt;code&gt;maybe_slow&lt;/code&gt; nor &lt;code&gt;fast&lt;/code&gt; on that graph:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/QFKSS.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/QFKSS.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;On the a more complex example it becomes clear what the graph means:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/4Ufpd.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/4Ufpd.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;TODO there are a log of &lt;code&gt;[unknown]&lt;/code&gt; functions in that example, why is that?&lt;/p&gt;\n&lt;p&gt;Another perf GUI interfaces which might be worth it include:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Eclipse Trace Compass plugin: &lt;a href=&quot;https://www.eclipse.org/tracecompass/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.eclipse.org/tracecompass/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;But this has the downside that you have to first convert the data to the Common Trace Format, which can be done with &lt;code&gt;perf data --to-ctf&lt;/code&gt;, but it needs to be enabled at build time/have &lt;code&gt;perf&lt;/code&gt; new enough, either of which is not the case for the perf in Ubuntu 18.04&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/KDAB/hotspot&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/KDAB/hotspot&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The downside of this is that there seems to be no Ubuntu package, and building it requires Qt 5.10 while Ubuntu 18.04 is at Qt 5.9.&lt;/p&gt;\n&lt;p&gt;But &lt;a href=&quot;https://stackoverflow.com/users/758288/david-faure&quot;&gt;David Faure&lt;/a&gt; mentions in the comments that there is no an AppImage package which might be a convenient way to use it.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;gperftools&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Previously called &quot;Google Performance Tools&quot;, source: &lt;a href=&quot;https://github.com/gperftools/gperftools&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/gperftools/gperftools&lt;/a&gt; Sample based.&lt;/p&gt;\n&lt;p&gt;First install gperftools with:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;sudo apt install google-perftools\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, we can enable the gperftools CPU profiler in two ways: at runtime, or at build time.&lt;/p&gt;\n&lt;p&gt;At runtime, we have to pass set the &lt;code&gt;LD_PRELOAD&lt;/code&gt; to point to &lt;code&gt;libprofiler.so&lt;/code&gt;, which you can find with &lt;code&gt;locate libprofiler.so&lt;/code&gt;, e.g. on my system:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;gcc -ggdb3 -O3 -std=c99 -Wall -Wextra -pedantic -o main.out main.c\nLD_PRELOAD=/usr/lib/x86_64-linux-gnu/libprofiler.so \\\n  CPUPROFILE=prof.out ./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, we can build the library in at link time, dispensing passing &lt;code&gt;LD_PRELOAD&lt;/code&gt; at runtime:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;gcc -Wl,--no-as-needed,-lprofiler,--as-needed -ggdb3 -O3 -std=c99 -Wall -Wextra -pedantic -o main.out main.c\nCPUPROFILE=prof.out ./main.out &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/46949407/gperftools-profile-file-not-dumped&quot;&gt;gperftools - profile file not dumped&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The nicest way to view this data I&apos;ve found so far is to make pprof output the same format that kcachegrind takes as input (yes, the Valgrind-project-viewer-tool) and use kcachegrind to view that:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;google-pprof --callgrind main.out prof.out  &amp;gt; callgrind.out\nkcachegrind callgrind.out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After running with either of those methods, we get a &lt;code&gt;prof.out&lt;/code&gt; profile data file as output. We can view that file graphically as an SVG with:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;google-pprof --web main.out prof.out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SiISF.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SiISF.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;which gives as a familiar call graph like other tools, but with the clunky unit of number of samples rather than seconds.&lt;/p&gt;\n&lt;p&gt;Alternatively, we can also get some textual data with:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;google-pprof --text main.out prof.out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which gives:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Using local file main.out.\nUsing local file prof.out.\nTotal: &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; samples\n     &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;% &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;%      &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;% common\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;% &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;%      &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;% __libc_start_main\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;% &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;%      &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;% _start\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;% &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;%        &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2.1&lt;/span&gt;% fast\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;% &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;%      &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;% main\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;% &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt;%      &lt;span class=&quot;hljs-number&quot;&gt;183&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;97.9&lt;/span&gt;% maybe_slow\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/10874308/how-to-use-google-perf-tools&quot;&gt;How to use google perf tools&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Instrument your code with raw &lt;code&gt;perf_event_open&lt;/code&gt; syscalls&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I think this is the same underlying subsystem that &lt;code&gt;perf&lt;/code&gt; uses, but you could of course attain even greater control by explicitly instrumenting your program at compile time with events of interest.&lt;/p&gt;\n&lt;p&gt;This is likely too hardcore for most people, but it&apos;s kind of fun. Minimal runnable example at: &lt;a href=&quot;https://stackoverflow.com/questions/13313510/quick-way-to-count-number-of-instructions-executed-in-a-c-program/64863392#64863392&quot;&gt;Quick way to count number of instructions executed in a C program&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Intel VTune&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/VTune&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.wikipedia.org/wiki/VTune&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This seems to be closed source and x86-only, but it is likely to be amazing from what I&apos;ve heard. I&apos;m not sure how free it is to use, but it seems to be free to download. TODO evaluate.&lt;/p&gt;\n&lt;p&gt;Tested in Ubuntu 18.04, gprof2dot 2019.11.30, valgrind 3.13.0, perf 4.15.18, Linux kernel 4.15.0, FLameGraph 1a0dc6985aad06e76857cf2a354bd5ba0c9ce96b, gperftools 2.5-2.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Use Valgrind, callgrind and kcachegrind:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;valgrind --tool=callgrind ./(Your binary)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;generates callgrind.out.x. Read it using kcachegrind.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Use gprof (add -pg):&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;cc -o myprog myprog.c utils.c -g -pg \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(not so good for multi-threads, function pointers)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Use google-perftools:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;Uses time sampling, I/O and CPU bottlenecks are revealed.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Intel VTune is the best (free for educational purposes).&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Others:&lt;/strong&gt; AMD Codeanalyst (since replaced with AMD CodeXL), OProfile, &apos;perf&apos; tools (apt-get install linux-tools)&lt;/p&gt;\n    ","\n&lt;p&gt;For single-threaded programs you can use &lt;strong&gt;igprof&lt;/strong&gt;, The Ignominous Profiler: &lt;a href=&quot;https://igprof.org/&quot; rel=&quot;noreferrer&quot;&gt;https://igprof.org/&lt;/a&gt; .&lt;/p&gt;\n\n&lt;p&gt;It is a sampling profiler, along the lines of the... long... answer by Mike Dunlavey, which will gift wrap the results in a browsable call stack tree, annotated with the time or memory spent in each function, either cumulative or per-function.&lt;/p&gt;\n    ","\n&lt;p&gt;Also worth mentioning are&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;HPCToolkit (&lt;a href=&quot;http://hpctoolkit.org/&quot; rel=&quot;noreferrer&quot;&gt;http://hpctoolkit.org/&lt;/a&gt;) - Open-source, works for parallel programs and has a GUI with which to look at the results multiple ways&lt;/li&gt;\n&lt;li&gt;Intel VTune (&lt;a href=&quot;https://software.intel.com/en-us/vtune&quot; rel=&quot;noreferrer&quot;&gt;https://software.intel.com/en-us/vtune&lt;/a&gt;) - If you have intel compilers this is very good &lt;/li&gt;\n&lt;li&gt;TAU (&lt;a href=&quot;http://www.cs.uoregon.edu/research/tau/home.php&quot; rel=&quot;noreferrer&quot;&gt;http://www.cs.uoregon.edu/research/tau/home.php&lt;/a&gt;) &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I have used HPCToolkit and VTune and they are very effective at finding the long pole in the tent and do not need your code to be recompiled (except that you have to use -g -O or RelWithDebInfo type build in CMake to get meaningful output). I have heard TAU is similar in capabilities.&lt;/p&gt;\n    ","\n&lt;p&gt;Actually a bit surprised not many mentioned about &lt;a href=&quot;https://github.com/google/benchmark&quot; rel=&quot;nofollow noreferrer&quot;&gt;google/benchmark&lt;/a&gt; , while it is a bit cumbersome to pin the specific area of code, specially if the code base is a little big one, however I found this really helpful when used in combination with &lt;code&gt;callgrind&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;IMHO identifying the piece that is causing bottleneck is the key here. I&apos;d however try and answer the following questions first and choose tool based on that&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;is my algorithm correct ?&lt;/li&gt;\n&lt;li&gt;are there locks that are proving to be bottle necks ?&lt;/li&gt;\n&lt;li&gt;is there a specific section of code that&apos;s proving to be a culprit ?&lt;/li&gt;\n&lt;li&gt;how about IO, handled and optimized ?&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;code&gt;valgrind&lt;/code&gt; with the combination of &lt;code&gt;callgrind&lt;/code&gt; and &lt;code&gt;kcachegrind&lt;/code&gt; should provide a decent estimation on the points above, and once it&apos;s established that there are issues with some section of code, I&apos;d suggest to do a micro bench mark - &lt;code&gt;google benchmark&lt;/code&gt; is a good place to start.&lt;/p&gt;\n    ","\n&lt;p&gt;These are the two methods I use for speeding up my code:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;For CPU bound applications:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use a profiler in DEBUG mode to identify questionable parts of your code&lt;/li&gt;\n&lt;li&gt;Then switch to RELEASE mode and comment out the questionable sections of your code (stub it with nothing) until you see changes in performance.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;For I/O bound applications:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use a profiler in RELEASE mode to identify questionable parts of your code.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;N.B.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t have a profiler, use the poor man&apos;s profiler. Hit pause while debugging your application. Most developer suites will break into assembly with commented line numbers. You&apos;re statistically likely to land in a region that is eating most of your CPU cycles.&lt;/p&gt;\n\n&lt;p&gt;For CPU, the reason for profiling in &lt;strong&gt;DEBUG&lt;/strong&gt; mode is because if your tried profiling in &lt;strong&gt;RELEASE&lt;/strong&gt; mode, the compiler is going to reduce math, vectorize loops, and inline functions which tends to glob your code into an un-mappable mess when it&apos;s assembled. &lt;strong&gt;An un-mappable mess means your profiler will not be able to clearly identify what is taking so long because the assembly may not correspond to the source code under optimization&lt;/strong&gt;. If you need the performance (e.g. timing sensitive) of &lt;strong&gt;RELEASE&lt;/strong&gt; mode, disable debugger features as needed to keep a usable performance.&lt;/p&gt;\n\n&lt;p&gt;For I/O-bound, the profiler can still identify I/O operations in &lt;strong&gt;RELEASE&lt;/strong&gt; mode because I/O operations are either externally linked to a shared library (most of the time) or in the worst case, will result in a sys-call interrupt vector (which is also easily identifiable by the profiler).&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the iprof library:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://gitlab.com/Neurochrom/iprof&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://gitlab.com/Neurochrom/iprof&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/Neurochrom/iprof&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/Neurochrom/iprof&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s cross-platform and allows you not to measure performance of your application also in real-time. You can even couple it with a live graph.\nFull disclaimer: I am the author.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use a logging framework like &lt;a href=&quot;https://github.com/emilk/loguru&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;loguru&lt;/code&gt;&lt;/a&gt; since it includes timestamps and total uptime which can be used nicely for profiling:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/eHqdn.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/eHqdn.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;At work we have a really nice tool that helps us monitoring what we want in terms of scheduling. This has been useful numerous times.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s in C++ and must be customized to your needs. Unfortunately I can&apos;t share code, just concepts.\nYou use a &quot;large&quot; &lt;code&gt;volatile&lt;/code&gt; buffer containing timestamps and event ID that you can dump post mortem or after stopping the logging system (and dump this into a file for example).&lt;/p&gt;\n\n&lt;p&gt;You retrieve the so-called large buffer with all the data and a small interface parses it and shows events with name (up/down + value) like an oscilloscope does with colors (configured in &lt;code&gt;.hpp&lt;/code&gt; file).&lt;/p&gt;\n\n&lt;p&gt;You customize the amount of events generated to focus solely on what you desire. It helped us a lot for scheduling issues while consuming the amount of CPU we wanted based on the amount of logged events per second. &lt;/p&gt;\n\n&lt;p&gt;You need 3 files : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;toolname.hpp &lt;span class=&quot;hljs-comment&quot;&gt;// interface&lt;/span&gt;\ntoolname.cpp &lt;span class=&quot;hljs-comment&quot;&gt;// code&lt;/span&gt;\ntool_events_id.hpp &lt;span class=&quot;hljs-comment&quot;&gt;// Events ID&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The concept is to define events in &lt;code&gt;tool_events_id.hpp&lt;/code&gt; like that :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// EVENT_NAME                         ID      BEGIN_END BG_COLOR NAME&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SOCK_PDU_RECV_D               0x0301  &lt;span class=&quot;hljs-comment&quot;&gt;//@D00301 BGEEAAAA # TX_PDU_Recv&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SOCK_PDU_RECV_F               0x0302  &lt;span class=&quot;hljs-comment&quot;&gt;//@F00301 BGEEAAAA # TX_PDU_Recv&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You also define a few functions in &lt;code&gt;toolname.hpp&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; LOG_LEVEL_ERROR 0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; LOG_LEVEL_WARN 1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;probe&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id,payload)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// etc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Wherever in you code you can use :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;toolname&amp;lt;LOG_LEVEL&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;log&lt;/span&gt;(EVENT_NAME,VALUE);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;probe&lt;/code&gt; function uses a few assembly lines to retrieve the clock timestamp ASAP and then sets an entry in the buffer. We also have an atomic increment to safely find an index where to store the log event.\nOf course buffer is circular.&lt;/p&gt;\n\n&lt;p&gt;Hope the idea is not obfuscated by the lack of sample code.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;use a debugging software&lt;/strong&gt; \nhow to identify where the code is running slowly ?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;just think you have a obstacle while you are in motion then it will decrease your speed&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;like that unwanted reallocation&apos;s looping,buffer overflows,searching,memory leakages etc operations consumes more execution power it will effect adversely over performance of the code,\nBe sure to add -pg to compilation before profiling:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;g++ your_prg.cpp -pg&lt;/code&gt; or &lt;code&gt;cc my_program.cpp -g -pg&lt;/code&gt; as per your compiler&lt;/p&gt;\n\n&lt;p&gt;haven&apos;t tried it yet but I&apos;ve heard good things about google-perftools. It is definitely worth a try.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;valgrind --tool=callgrind ./(Your binary)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;It will generate a file called gmon.out or callgrind.out.x. You can then use kcachegrind or debugger tool to read this file. It will give you a graphical analysis of things with results like which lines cost how much. &lt;/p&gt;\n\n&lt;p&gt;i think so&lt;/p&gt;\n    ","\n&lt;p&gt;As no one mentioned Arm MAP, I&apos;d add it as personally I have successfully used Map to profile a C++ scientific program. &lt;/p&gt;\n\n&lt;p&gt;Arm MAP is the profiler for parallel, multithreaded or single threaded C, C++, Fortran and F90 codes.  It provides in-depth analysis and bottleneck pinpointing to the source line.  Unlike most profilers, it&apos;s designed to be able to profile pthreads, OpenMP or MPI for parallel and threaded code.&lt;/p&gt;\n\n&lt;p&gt;MAP is commercial software. &lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;-pg&lt;/code&gt; flag when compiling and linking the code and run the executable file. While this program is executed, profiling data is collected in the file a.out.&lt;br&gt;\nThere is two different type of profiling&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;1- Flat profiling: &lt;br&gt;\n by running the command &lt;code&gt;gprog --flat-profile a.out&lt;/code&gt; you got the following data&lt;br&gt;\n - what percentage of the overall time was spent for the function,&lt;br&gt;\n - how many seconds were spent in a functionincluding and excluding calls to sub-functions,&lt;br&gt;\n - the number of calls,&lt;br&gt;\n - the average time per call.&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;2- graph profiling&lt;br&gt;\nus the command &lt;code&gt;gprof --graph a.out&lt;/code&gt; to get the following data for each function which includes&lt;br&gt;\n - In each section, one function is marked with an index number.&lt;br&gt;\n - Above function , there is a list of functions that call the function .&lt;br&gt;\n - Below function , there is a list of functions that are called by the function .&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;To get more info you can look in &lt;a href=&quot;https://sourceware.org/binutils/docs-2.32/gprof/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://sourceware.org/binutils/docs-2.32/gprof/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;\n    "],"145":["\n&lt;h1&gt;Why does this happen?&lt;/h1&gt;\n&lt;p&gt;This has little to do with the input you provided yourself but rather with the default behavior &lt;code&gt;std::getline()&lt;/code&gt; has. When you provided your input for the age (&lt;code&gt;std::cin &amp;gt;&amp;gt; age&lt;/code&gt;), you not only submitted the following characters, but also an implicit newline was appended to the stream when you typed &lt;kbd&gt;Enter&lt;/kbd&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;10\\n&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;A newline is always appended to your input when you select &lt;kbd&gt;Enter&lt;/kbd&gt; or &lt;kbd&gt;Return&lt;/kbd&gt; when submitting from a terminal. It is also used in files for moving toward the next line. The newline is left in the buffer after the extraction into &lt;code&gt;age&lt;/code&gt; until the next I/O operation where it is either discarded or read. When the flow of control reaches &lt;code&gt;std::getline()&lt;/code&gt;, it will see &lt;code&gt;&quot;\\nMr. Whiskers&quot;&lt;/code&gt; and the newline at the beginning will be discarded, but the input operation will stop immediately. The reason this happens is because the job of &lt;code&gt;std::getline()&lt;/code&gt; is to attempt to read characters and stop when it finds a newline. So the rest of your input is left in the buffer unread.&lt;/p&gt;\n&lt;h1&gt;Solution&lt;/h1&gt;\n&lt;h2&gt;&lt;code&gt;cin.ignore()&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;To fix this, one option is to skip over the newline before doing &lt;code&gt;std::getline()&lt;/code&gt;. You can do this by calling &lt;code&gt;std::cin.ignore()&lt;/code&gt; after the first input operation. It will discard the next character (the newline character) so that it is no longer in the way.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cin &amp;gt;&amp;gt; age;\nstd::cin.&lt;span class=&quot;hljs-built_in&quot;&gt;ignore&lt;/span&gt;();\nstd::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, name);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;assert&lt;/span&gt;(std::cin); \n&lt;span class=&quot;hljs-comment&quot;&gt;// Success!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;std::ws&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;Another way to discard the whitespace is to use the &lt;code&gt;std::ws&lt;/code&gt; function which is a manipulator designed to extract and discard leading whitespace from the beginning of an input stream:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cin &amp;gt;&amp;gt; age;\nstd::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin &amp;gt;&amp;gt; std::ws, name);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;assert&lt;/span&gt;(std::cin);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Success!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;std::cin &amp;gt;&amp;gt; std::ws&lt;/code&gt; expression is executed before the &lt;code&gt;std::getline()&lt;/code&gt; call (and after the &lt;code&gt;std::cin &amp;gt;&amp;gt; age&lt;/code&gt; call) so that the newline character is removed.&lt;/p&gt;\n&lt;p&gt;The difference is that &lt;code&gt;ignore()&lt;/code&gt; discards only 1 character (or N characters when given a parameter), and &lt;code&gt;std::ws&lt;/code&gt; continues to ignore whitespace until it finds a non-whitespace character. So if you don&apos;t know how much whitespace will precede the next token you should consider using this.&lt;/p&gt;\n&lt;h2&gt;Match the operations&lt;/h2&gt;\n&lt;p&gt;When you run into an issue like this it&apos;s usually because you&apos;re combining formatted input operations with unformatted input operations. A formatted input operation is when you take input and format it for a certain type. That&apos;s what &lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt; is for. Unformatted input operations are anything other than that, like &lt;code&gt;std::getline()&lt;/code&gt;, &lt;code&gt;std::cin.read()&lt;/code&gt;, &lt;code&gt;std::cin.get()&lt;/code&gt;, etc. Those functions don&apos;t care about the format of the input and only process raw text.&lt;/p&gt;\n&lt;p&gt;If you stick to using a single type of formatting then you can avoid this annoying issue:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Unformatted I/O&lt;/span&gt;\nstd::string age, name;\nstd::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, age);\nstd::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, name);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Formatted I/O&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age;\nstd::string firstName, lastName;\nstd::cin &amp;gt;&amp;gt; age &amp;gt;&amp;gt; firstName &amp;gt;&amp;gt; lastName;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you choose to read everything as strings using the unformatted operations you can convert them into the appropriate types afterwards.&lt;/p&gt;\n    ","\n&lt;p&gt;Everything will be OK if you change your initial code in the following way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((cin &amp;gt;&amp;gt; name).&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;() &amp;amp;&amp;amp; std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(cin, state))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This happens because an implicit line feed also known as newline character &lt;code&gt;\\n&lt;/code&gt; is appended to all user input from a terminal as it&apos;s telling the stream to start a new line. You can safely account for this by using &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/getline&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;std::getline&lt;/code&gt;&lt;/a&gt; when checking for multiple lines of user input. The default behavior of &lt;code&gt;std::getline&lt;/code&gt; will read everything up to and including the newline character &lt;code&gt;\\n&lt;/code&gt; from the input stream object which is &lt;code&gt;std::cin&lt;/code&gt; in this case.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::string name;\n    std::string state;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, name) &amp;amp;&amp;amp; std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, state))\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Your name is &quot;&lt;/span&gt; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; and you live in &quot;&lt;/span&gt; &amp;lt;&amp;lt; state;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Input:\n\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;New Hampshire&quot;&lt;/span&gt;\n\nOutput:\n\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;Your name is John and you live in New Hampshire&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Since everyone above has answered the problem for input &lt;code&gt;10\\nMr Whisker\\n&lt;/code&gt;, I would like to answer a different approach. all the solution above published the code for if the buffer is like &lt;code&gt;10\\nMr Whisker\\n&lt;/code&gt;. but what if we don&apos;t know how user will behave giving input. the user might type &lt;code&gt;10\\n\\nMr. Whisker\\n&lt;/code&gt; or &lt;code&gt;10 \\n\\n Mr. whisker\\n&lt;/code&gt; by mistake. in that case, codes above may not work. so, I use the function below to take string input to address the problem.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;StringInput&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;//returns null-terminated string&lt;/span&gt;\n&lt;/span&gt;{\n    string input;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(cin, input);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(input.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;()==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;//keep taking input until valid string is taken&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(cin, input);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; input.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, the answer would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age;\n    std::string name;\n\n    std::cin &amp;gt;&amp;gt; age;\n    name = &lt;span class=&quot;hljs-built_in&quot;&gt;StringInput&lt;/span&gt;();\n    \n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My cat is &quot;&lt;/span&gt; &amp;lt;&amp;lt; age &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; years old and their name is &quot;&lt;/span&gt; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; std::endl;\n    \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Extra:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If user inputs &lt;code&gt;a \\n10\\n \\nmr. whiskey&lt;/code&gt;;\nTo check whether &lt;code&gt;int&lt;/code&gt; input is valid or not, this function can be used to check &lt;code&gt;int&lt;/code&gt; input (program will have undefined behavior if &lt;code&gt;char&lt;/code&gt; is given as input instead of &lt;code&gt;int&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//instead of &quot;std::cin&amp;gt;&amp;gt;age;&quot; use &quot;get_untill_int(&amp;amp;age);&quot; in main function.&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get_Untill_Int&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* pInput)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//keep taking input untill input is `int or float`&lt;/span&gt;\n&lt;/span&gt;{\n    cin&amp;gt;&amp;gt; *pInput;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*-----------check input validation----------------*/&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!cin) \n    {\n        cin.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n        cin.&lt;span class=&quot;hljs-built_in&quot;&gt;ignore&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n        cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid Input Type.\\nEnter again: &quot;&lt;/span&gt;;\n        cin &amp;gt;&amp;gt;*pInput;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*-----------checked input validation-------------*/&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am really wondering. C++ has a dedicated function for eating up any remaining or whatever white spaces. It is called &lt;a href=&quot;https://en.cppreference.com/w/cpp/io/manip/ws&quot; rel=&quot;nofollow noreferrer&quot;&gt;std::ws&lt;/a&gt;. And then, you can simply use&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin &amp;gt;&amp;gt; std::ws, name);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That should be the idomatic approach. For each transistion between formatted to unformatted input that should be used.&lt;/p&gt;\n&lt;p&gt;If we are not talking about white spaces, but entering for example letters where a number is expected, then we should follow the CPP reference and use&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;.ignore(std::numeric_limits&amp;lt;std::streamsize&amp;gt;::max(), &apos;\\n&apos;);&lt;/code&gt; to eliminate the wrong stuff.&lt;/p&gt;\n&lt;p&gt;Please read &lt;a href=&quot;https://en.cppreference.com/w/cpp/io/basic_istream/ignore&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    "]},"page":"94","randomQuestions":[{"title":"What are metaclasses in Python?","slug":"what-are-metaclasses-in-python-1657387811608"},{"title":"Resolve build errors due to circular dependency amongst classes","slug":"resolve-build-errors-due-to-circular-dependency-amongst-classes-1657384903462"},{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"},{"title":"Why don't flex items shrink past content size?","slug":"why-don't-flex-items-shrink-past-content-size-1657384687282"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"Official locator strategies for the webdriver","slug":"official-locator-strategies-for-the-webdriver-1657384353174"},{"title":"How to format numbers as currency strings","slug":"how-to-format-numbers-as-currency-strings-1657388399166"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"GUI not working after rewriting to MVC","slug":"gui-not-working-after-rewriting-to-mvc-1657388388035"},{"title":"How do JavaScript closures work?","slug":"how-do-javascript-closures-work-1657384418555"},{"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188"},{"title":"How to close/hide the Android soft keyboard programmatically?","slug":"how-to-closehide-the-android-soft-keyboard-programmatically-1657388217420"},{"title":"Does JavaScript guarantee object property order?","slug":"does-javascript-guarantee-object-property-order-1657384822587"},{"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"}]},"__N_SSG":true}