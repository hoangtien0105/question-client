{"pageProps":{"data":{"count":610,"rows":[{"id":520,"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945","postType":"QUESTION","createdAt":"2022-07-09T17:37:42.000Z","updatedAt":"2022-07-09T17:37:42.000Z","tags":[{"id":2569,"name":"undo","slug":"undo","createdAt":"2022-07-09T17:37:43.000Z","updatedAt":"2022-07-09T17:37:43.000Z","Questions_Tags":{"questionId":520,"tagId":2569}},{"id":2570,"name":"git-commit","slug":"git-commit","createdAt":"2022-07-09T17:37:43.000Z","updatedAt":"2022-07-09T17:37:43.000Z","Questions_Tags":{"questionId":520,"tagId":2570}}]},{"id":519,"title":"Why are global variables evil? [closed]","slug":"why-are-global-variables-evil-closed-1657388260006","postType":"QUESTION","createdAt":"2022-07-09T17:37:40.000Z","updatedAt":"2022-07-09T17:37:40.000Z","tags":[{"id":2566,"name":"side-effects","slug":"side-effects","createdAt":"2022-07-09T17:37:40.000Z","updatedAt":"2022-07-09T17:37:40.000Z","Questions_Tags":{"questionId":519,"tagId":2566}}]},{"id":518,"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021","postType":"QUESTION","createdAt":"2022-07-09T17:37:38.000Z","updatedAt":"2022-07-09T17:37:38.000Z","tags":[{"id":2563,"name":"comma-operator","slug":"comma-operator","createdAt":"2022-07-09T17:37:38.000Z","updatedAt":"2022-07-09T17:37:38.000Z","Questions_Tags":{"questionId":518,"tagId":2563}}]},{"id":517,"title":"How to remove all duplicates from an array of objects?","slug":"how-to-remove-all-duplicates-from-an-array-of-objects-1657388256190","postType":"QUESTION","createdAt":"2022-07-09T17:37:36.000Z","updatedAt":"2022-07-09T17:37:36.000Z","tags":[]},{"id":516,"title":"When can I use a forward declaration?","slug":"when-can-i-use-a-forward-declaration-1657388251827","postType":"QUESTION","createdAt":"2022-07-09T17:37:31.000Z","updatedAt":"2022-07-09T17:37:31.000Z","tags":[{"id":2555,"name":"forward-declaration","slug":"forward-declaration","createdAt":"2022-07-09T17:37:31.000Z","updatedAt":"2022-07-09T17:37:31.000Z","Questions_Tags":{"questionId":516,"tagId":2555}}]}]},"answers":{"516":["\n&lt;p&gt;Put yourself in the compiler&apos;s position: when you forward declare a type, all the compiler knows is that this type exists; it knows nothing about its size, members, or methods. This is why it&apos;s called an &lt;em&gt;incomplete type&lt;/em&gt;. Therefore, you cannot use the type to declare a member, or a base class, since the compiler would need to know the layout of the type.&lt;/p&gt;\n\n&lt;p&gt;Assuming the following forward declaration.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s what you can and cannot do.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What you can do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Declare a member to be a pointer or a reference to the incomplete type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X *p;\n    X &amp;amp;r;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Declare&lt;/em&gt; functions or methods which accept/return incomplete types:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;X    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods which accept/return pointers/references to the incomplete type (but without using its members):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X*, X&amp;amp;)&lt;/span&gt; &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;amp;   &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;       &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;X*   &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;       &lt;/span&gt;{}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What you cannot do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Use it as a base class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; : X {} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use it to declare a member:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X m; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods using this type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X x)&lt;/span&gt; &lt;/span&gt;{} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;    &lt;/span&gt;{} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use its methods or fields, in fact trying to dereference a variable with incomplete type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X *m;            \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;            \n    &lt;/span&gt;{\n        m-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;someMethod&lt;/span&gt;();      &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = m-&amp;gt;someField; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;When it comes to templates, there is no absolute rule: whether you can use an incomplete type as a template parameter is dependent on the way the type is used in the template.&lt;/p&gt;\n\n&lt;p&gt;For instance, &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; requires its parameter to be a complete type, while &lt;code&gt;boost::container::vector&amp;lt;T&amp;gt;&lt;/code&gt; does not. Sometimes, a complete type is required only if you use certain member functions; &lt;a href=&quot;https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t&quot;&gt;this is the case for &lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, for example.&lt;/p&gt;\n\n&lt;p&gt;A well-documented template should indicate in its documentation all the requirements of its parameters, including whether they need to be complete types or not.&lt;/p&gt;\n    ","\n&lt;p&gt;The main rule is that you can only forward-declare classes whose memory layout (and thus member functions and data members) do not need to be known in the file you forward-declare it.&lt;/p&gt;\n\n&lt;p&gt;This would rule out base classes and anything but classes used via references and pointers.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633620&quot; rel=&quot;noreferrer&quot;&gt;Lakos&lt;/a&gt; distinguishes between class usage&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;em&gt;in-name-only&lt;/em&gt; (for which a forward declaration is sufficient) and&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;in-size&lt;/em&gt; (for which the class definition is needed).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I&apos;ve never seen it pronounced more succinctly :)&lt;/p&gt;\n    ","\n&lt;p&gt;As well as pointers and references to incomplete types, you can also declare function prototypes that specify parameters and/or return values that are incomplete types.  However, you cannot &lt;em&gt;define&lt;/em&gt; a function having a parameter or return type that is incomplete, unless it is a pointer or reference.&lt;/p&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;              &lt;span class=&quot;hljs-comment&quot;&gt;// Forward declaration of X&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X* px)&lt;/span&gt; &lt;/span&gt;{}      &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: can always use a pointer&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;amp;  x)&lt;/span&gt; &lt;/span&gt;{}      &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: can always use a reference&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;             &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: return value in function prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt;&lt;/span&gt;;            &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: parameter in function prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt; &lt;/span&gt;{}          &lt;span class=&quot;hljs-comment&quot;&gt;// ILLEGAL: *definitions* require complete types&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of the answers so far describe when one can use a forward declaration of a class template. So, here it goes.&lt;/p&gt;\n\n&lt;p&gt;A class template can be forwarded declared as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Following the structure of the &lt;a href=&quot;https://stackoverflow.com/a/553869/434551&quot;&gt;accepted answer&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s what you can and cannot do.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What you can do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Declare a member to be a pointer or a reference to the incomplete type in another class template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;T&amp;gt;* ptr;\n    X&amp;lt;T&amp;gt;&amp;amp; ref;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare a member to be a pointer or a reference to one of its incomplete instantiations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;* ptr;\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; ref;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare function templates or member function templates which accept/return incomplete types:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare functions or member functions which accept/return one of its incomplete instantiations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Define function templates or member function templates which accept/return pointers/references to the incomplete type (but without using its members):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;*, X&amp;lt;T&amp;gt;&amp;amp;)&lt;/span&gt; &lt;/span&gt;{}\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;&amp;amp;   &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;&amp;amp; in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;*   &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;* in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Define functions or methods which accept/return pointers/references to one of its incomplete instantiations  (but without using its members):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;*, X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;)&lt;/span&gt; &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;   &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;*   &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;* in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use it as a base class of another template class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; : X&amp;lt;T&amp;gt; {} &lt;span class=&quot;hljs-comment&quot;&gt;// OK as long as X is defined before&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Foo is instantiated.&lt;/span&gt;\n\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a1; &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {};\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a2; &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is now defined.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use it to declare a member of another class template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;T&amp;gt; m; &lt;span class=&quot;hljs-comment&quot;&gt;// OK as long as X is defined before&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Foo is instantiated. &lt;/span&gt;\n};\n\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a1; &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {};\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a2; &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is now defined.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; function templates or methods using this type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt; x)&lt;/span&gt; &lt;/span&gt;{}    &lt;span class=&quot;hljs-comment&quot;&gt;// OK if X is defined before calling f1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;T&amp;gt;(); }  &lt;span class=&quot;hljs-comment&quot;&gt;// OK if X is defined before calling f2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f2&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;();     &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is defined now&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f2&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;();     &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is defined now&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What you cannot do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Use one of its instantiations as a base class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; : X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; {} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use one of its instantiations to declare a member:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; m; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods using one of its instantiations&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; x)&lt;/span&gt; &lt;/span&gt;{}            &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(); }   &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use the methods or fields of one of its instantiations, in fact trying to dereference a variable with incomplete type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;* m;            \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;            \n    &lt;/span&gt;{\n        m-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;someMethod&lt;/span&gt;();      &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = m-&amp;gt;someField; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create explicit instantiations of the class template&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;In file in which you use only Pointer or Reference to a class.And no member/member function should be invoked thought those Pointer/ reference.&lt;/p&gt;\n\n&lt;p&gt;with &lt;code&gt;class Foo;&lt;/code&gt;//forward declaration&lt;/p&gt;\n\n&lt;p&gt;We can declare data members of type Foo* or Foo&amp;amp;.&lt;/p&gt;\n\n&lt;p&gt;We can declare (but not define) functions with arguments, and/or return values, of type Foo.&lt;/p&gt;\n\n&lt;p&gt;We can declare static data members of type Foo. This is because static data members are defined outside the class definition.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m writing this as a separate answer rather than just a comment because I disagree with Luc Touraille&apos;s answer, not on the grounds of legality but for robust software and the danger of misinterpretation.&lt;/p&gt;\n\n&lt;p&gt;Specifically, I have an issue with the implied contract of what you expect users of your interface to have to know.&lt;/p&gt;\n\n&lt;p&gt;If you are returning or accepting reference types, then you are just saying they can pass through a pointer or reference which they may in turn have known only through a forward declaration.&lt;/p&gt;\n\n&lt;p&gt;When you are returning an incomplete type &lt;code&gt;X    f2();&lt;/code&gt; then you are saying your caller &lt;strong&gt;must&lt;/strong&gt; have the full type specification of X. They need it in order to create the LHS or temporary object at the call site.&lt;/p&gt;\n\n&lt;p&gt;Similarly, if you accept an incomplete type, the caller has to have constructed the object which is the parameter. Even if that object was returned as another incomplete type from a function, the call site needs the full declaration. i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// forward for two legal declarations &lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X &lt;span class=&quot;hljs-title&quot;&gt;returnsX&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;XAcceptor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;XAcepptor&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;returnsX&lt;/span&gt;() );  &lt;span class=&quot;hljs-comment&quot;&gt;// X declaration needs to be known here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I think there&apos;s an important principle that a header should supply enough information to use it without a dependency requiring other headers. That means header should be able to be included in a  compilation unit without causing a compiler error when you use any functions it declares.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Except&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If this external dependency is &lt;strong&gt;desired&lt;/strong&gt; behaviour. Instead of using conditional compilation you could have a &lt;em&gt;well-documented&lt;/em&gt; requirement for them to supply their own header declaring X. This is an alternative to using #ifdefs and can be a useful way to introduce mocks or other variants.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The important distinction being some template techniques where you are explicitly NOT expected to instantiate them, mentioned just so someone doesn&apos;t get snarky with me.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The general rule I follow is not to include any header file unless I have to.  So unless I am storing the object of a class as a member variable of my class I won&apos;t include it, I&apos;ll just use the forward declaration.&lt;/p&gt;\n    ","\n&lt;p&gt;As long as you don&apos;t need the definition (think pointers and references) you can get away with forward declarations. This is why mostly you&apos;d see them in headers while implementation files typically will pull the header for the appropriate definition(s).&lt;/p&gt;\n    ","\n&lt;p&gt;You will usually want to use forward declaration in a classes header file when you want to use the other type (class) as a member of the class. You can not use the forward-declared classes &lt;em&gt;methods&lt;/em&gt; in the header file because C++ does not know the definition of that class at that point yet. That&apos;s logic you have to move into the .cpp-files, but if you are using template-functions you should reduce them to only the part that uses the template and move that function into the header. &lt;/p&gt;\n    ","\n&lt;p&gt;Take it that forward declaration will get your code to compile (obj is created). Linking however (exe creation) will not be successfull unless the definitions are found. &lt;/p&gt;\n    ","\n&lt;p&gt;I just want to add one important thing you can do with a forwarded class not mentioned in the answer of Luc Touraille.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What you can do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods which accept/return \npointers/references to the incomplete type and forward that pointers/references \nto another function.     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;f6&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X*)&lt;/span&gt;       &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;f7&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;amp;)&lt;/span&gt;       &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;f8&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X* x_ptr, X&amp;amp; x_ref)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-built_in&quot;&gt;f6&lt;/span&gt;(x_ptr); &lt;span class=&quot;hljs-built_in&quot;&gt;f7&lt;/span&gt;(x_ref); }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A module can pass through an object of a forward declared class to another module.&lt;/p&gt;\n    ","\n&lt;p&gt;As, Luc Touraille has already explained it very well where to use and not use forward declaration of the class.&lt;/p&gt;\n\n&lt;p&gt;I will just add to that why we need to use it.&lt;/p&gt;\n\n&lt;p&gt;We should be using Forward declaration wherever possible to avoid the unwanted dependency injection.&lt;/p&gt;\n\n&lt;p&gt;As &lt;code&gt;#include&lt;/code&gt; header files are added on multiple files therefore, if we add a header into another header file it will add unwanted dependency injection in various parts of source code which can be avoided by adding &lt;code&gt;#include&lt;/code&gt; header into &lt;code&gt;.cpp&lt;/code&gt; files wherever possible rather than adding to another header file and use class forward declaration wherever possible in header &lt;code&gt;.h&lt;/code&gt; files.&lt;/p&gt;\n    "],"517":["\n&lt;p&gt;How about with some &lt;code&gt;es6&lt;/code&gt; magic?&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt; = obj.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index, self&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n  index === self.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (\n    t.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt; === value.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt; &amp;amp;&amp;amp; t.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === value.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\n  ))\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex&quot; rel=&quot;noreferrer&quot;&gt;Reference URL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A more generic solution would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uniqueArray = obj.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; _value = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(value);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; index === obj.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj) === _value;\n  });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using the above property strategy instead of &lt;code&gt;JSON.stringify&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isPropValuesEqual&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;subject, target, propNames&lt;/span&gt;) =&amp;gt;\n  propNames.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;propName&lt;/span&gt; =&amp;gt;&lt;/span&gt; subject[propName] === target[propName]);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueItemsByProperties&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;items, propNames&lt;/span&gt;) =&amp;gt; \n  items.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index, array&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    index === array.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;foundItem&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isPropValuesEqual&lt;/span&gt;(foundItem, item, propNames))\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can add a wrapper if you want the &lt;code&gt;propNames&lt;/code&gt; property to be either an array or a value:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueItemsByProperties&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;items, propNames&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; propNamesArray = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(propNames);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index, array&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    index === array.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;foundItem&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isPropValuesEqual&lt;/span&gt;(foundItem, item, propNamesArray))\n  );\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;allowing both &lt;code&gt;getUniqueItemsByProperties(&apos;a&apos;)&lt;/code&gt; and &lt;code&gt;getUniqueItemsByProperties([&apos;a&apos;]);&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackblitz.com/edit/remove-duplicates-from-array-of-objects&quot; rel=&quot;noreferrer&quot;&gt;Stackblitz Example&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Start by understanding the two methods used:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot; rel=&quot;noreferrer&quot;&gt;filter&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex&quot; rel=&quot;noreferrer&quot;&gt;findIndex&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Next take your idea of what makes your two objects equal and keep that in mind.&lt;/li&gt;\n&lt;li&gt;We can detect something as a duplicate, if it satisfies the criterion that we have just thought of, but it&apos;s position is not at the first instance of an object with the criterion.&lt;/li&gt;\n&lt;li&gt;Therefore we can use the above criterion to determine if something is a duplicate.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;One liners with filter ( Preserves order )&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Find unique &lt;code&gt;id&lt;/code&gt;&apos;s in an array.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,i,a&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v2&lt;/span&gt;=&amp;gt;&lt;/span&gt;(v2.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;===v.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;))===i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the order is not important, map solutions will be faster: &lt;a href=&quot;https://stackoverflow.com/a/70406623/1602301&quot;&gt;Solution with map&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Unique by multiple properties ( &lt;code&gt;place&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; )&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,i,a&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v2&lt;/span&gt;=&amp;gt;&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;place&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt;=&amp;gt;&lt;/span&gt;v2[k] ===v[k]))===i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unique by all properties (This will be slow for large arrays)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,i,a&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v2&lt;/span&gt;=&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(v2) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(v)))===i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Keep the last occurrence&lt;/strong&gt; by replacing &lt;code&gt;findIndex&lt;/code&gt; with &lt;code&gt;findLastIndex&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,i,a&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;findLastIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v2&lt;/span&gt;=&amp;gt;&lt;/span&gt;(v2.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt; === v.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;))===i)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;strong&gt;ES6+&lt;/strong&gt; in a single line you can get a unique list of objects by key:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; unique = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; [item[key], item])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It can be put into a function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueListBy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; [item[key], item])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is a working example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;other stuff1&quot;&lt;/span&gt; },\n    {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;other stuff2&quot;&lt;/span&gt; },\n    {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;other stuff4&quot;&lt;/span&gt; },\n    {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;other stuff5&quot;&lt;/span&gt; }\n]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueListBy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; [item[key], item])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()]\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr1 = &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueListBy&lt;/span&gt;(arr, &lt;span class=&quot;hljs-string&quot;&gt;&apos;place&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unique by place&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr1))\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nUnique by name&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = &lt;span class=&quot;hljs-title function_&quot;&gt;getUniqueListBy&lt;/span&gt;(arr, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr2))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;How does it work&lt;/h3&gt;\n&lt;p&gt;First the array is remapped in a way that it can be used as an input for a  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;noreferrer&quot;&gt;Map.&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;arr.map(item =&amp;gt; [item[key], item]);&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;which means each item of the array will be transformed in another array with 2 elements; the &lt;strong&gt;selected key&lt;/strong&gt; as first element and &lt;strong&gt;the entire initial item&lt;/strong&gt; as second element, this is called an entry (ex. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries&quot; rel=&quot;noreferrer&quot;&gt;array entries&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries&quot; rel=&quot;noreferrer&quot;&gt;map entries&lt;/a&gt;). And &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Relation_with_Array_objects&quot; rel=&quot;noreferrer&quot;&gt;here is the official doc&lt;/a&gt; with an example showing how to add array entries in Map constructor.&lt;/p&gt;\n&lt;p&gt;Example when key is &lt;em&gt;place&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[[&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;other stuff1&quot;&lt;/span&gt; }], ...]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Secondly, we pass this modified array to the Map constructor and here is the magic happening. Map will eliminate the duplicate keys values, keeping only last inserted value of the same key.\n&lt;strong&gt;Note&lt;/strong&gt;: Map keeps the order of insertion. (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_vs._Maps&quot; rel=&quot;noreferrer&quot;&gt;check difference between Map and object&lt;/a&gt;)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;new Map(entry array just mapped above)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Third we use the map values to retrieve the original items, but this time without duplicates.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;new Map(mappedArr).values()&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And last one is to add those values into a fresh new array so that it can look as the initial structure and return that:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;return [...new Map(mappedArr).values()]&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;A primitive method would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) {\n  obj[things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;[i][&lt;span class=&quot;hljs-string&quot;&gt;&apos;place&apos;&lt;/span&gt;]] = things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;[i];\n}\n\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;();\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) { \n   things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(obj[key]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Simple and performant solution with a better runtime&lt;/strong&gt; than the 70+ answers that already exist:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ids = array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt; =&amp;gt;&lt;/span&gt; o.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filtered = array.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{id}, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; !ids.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(id, index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;Example:&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;}]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ids = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt; =&amp;gt;&lt;/span&gt; o.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filtered = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{id}, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; !ids.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(id, index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(filtered)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;How it works:&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.filter()&lt;/code&gt;&lt;/a&gt; removes all duplicate objects by checking if the previously mapped id-array includes the current id (&lt;code&gt;{id}&lt;/code&gt; destructs the object into only its id). To only filter out actual duplicates, it is using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.includes()&lt;/code&gt;&lt;/a&gt;&apos;s second parameter &lt;code&gt;fromIndex&lt;/code&gt; with &lt;code&gt;index + 1&lt;/code&gt; which will ignore the current object and all previous.&lt;/p&gt;\n&lt;p&gt;Since every iteration of the &lt;code&gt;filter&lt;/code&gt; callback method will only search the array beginning at the current index + 1, this also dramatically reduces the runtime because only objects not previously filtered get checked.&lt;/p&gt;\n&lt;p&gt;This obviously also works for any other key that is not called &lt;code&gt;id&lt;/code&gt;, multiple or even all keys.&lt;/p&gt;\n    ","\n&lt;p&gt;If you can use Javascript libraries such as &lt;em&gt;underscore&lt;/em&gt; or lodash, I recommend having a look at &lt;code&gt;_.uniq&lt;/code&gt; function in their libraries. From &lt;code&gt;lodash&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(array, [isSorted=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;], [callback=_.&lt;span class=&quot;hljs-property&quot;&gt;identity&lt;/span&gt;], [thisArg])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically, you pass in the array that in here is an object literal and you pass in the attribute that you want to remove duplicates with in the original data array, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Amir&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Rahnama&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Amir&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Stevens&apos;&lt;/span&gt;}];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; non_duplidated_data = _.&lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Lodash now has introduced a &lt;code&gt;.uniqBy&lt;/code&gt; as well. &lt;/p&gt;\n    ","\n&lt;p&gt;I had this exact same requirement, to remove duplicate objects in a array, based on duplicates on a single field.  I found the code here: &lt;a href=&quot;http://www.tjcafferkey.me/remove-duplicates-from-array-of-objects/&quot; rel=&quot;noreferrer&quot;&gt;Javascript: Remove Duplicates from Array of Objects&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So in my example, I&apos;m removing any object from the array that has a duplicate licenseNum string value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayWithDuplicates = [\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;12345&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;NV&quot;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;A7846&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;12345&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;OR&quot;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;10849&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;B7037&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;WA&quot;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;12345&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;NM&quot;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;originalArray, prop&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newArray = [];\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lookupObject  = {};\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; originalArray) {\n        lookupObject[originalArray[i][prop]] = originalArray[i];\n     }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lookupObject) {\n         newArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(lookupObject[i]);\n     }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newArray;\n }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniqueArray = &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(arrayWithDuplicates, &lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;uniqueArray is: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(uniqueArray));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The results:&lt;/p&gt;\n\n&lt;p&gt;uniqueArray is: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[{&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;10849&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;12345&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;NM&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;A7846&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;licenseNum&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;B7037&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;WA&quot;&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One liner using Set&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; things = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;();\n\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;();\n\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;});\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;});\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// assign things.thing to myData for brevity&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myData = things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;;\n\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(myData.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;stringify&lt;/span&gt;))).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;parse&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Explanation:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;new Set(myData.map(JSON.stringify))&lt;/code&gt; creates a &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;Set&lt;/a&gt; object using the stringified myData elements. &lt;/li&gt;\n&lt;li&gt;Set object will ensure that every element is unique. &lt;/li&gt;\n&lt;li&gt;Then I create an array based on the elements of the created set using Array.from. &lt;/li&gt;\n&lt;li&gt;Finally, I use JSON.parse to convert stringified element back to an object.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;ES6 one liner is here&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;sravan ganji&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;pinky&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mammu&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;avy&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;rashni&quot;&lt;/span&gt;},\n];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc,cur&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(acc,{[cur.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;]:cur}),{})))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To remove all duplicates from an array of objects, the simplest way is use &lt;code&gt;filter&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniq = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr  = [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;},{&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;},{&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;}];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrFiltered = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; !uniq[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] &amp;amp;&amp;amp; (uniq[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arrFiltered&apos;&lt;/span&gt;, arrFiltered);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another option to do it using Array iterating methods if you need comparison only by one field of an object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, param&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, pos, array&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mapItem&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mapItem[param]; }).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item[param]) === pos;\n        })\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;place&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a generic way of doing this: you pass in a function that tests whether two elements of an array are considered equal. In this case, it compares the values of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;place&lt;/code&gt; properties of the two objects being compared.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;ES5 answer&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, equals&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; originalArr = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, len, val;\n    arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = originalArr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; ++i) {\n        val = originalArr[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!arr.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(item, val); })) {\n            arr.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(val);\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;thingsEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;thing1, thing2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; thing1.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt; === thing2.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;\n        &amp;amp;&amp;amp; thing1.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === thing2.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; things = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(things, thingsEqual);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(things);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Original ES3 answer&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrayContains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, val, equals&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(arr[i], val) ) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, equals&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; originalArr = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, len, j, val;\n    arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = originalArr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; ++i) {\n        val = originalArr[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;arrayContains&lt;/span&gt;(arr, val, equals)) {\n            arr.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(val);\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;thingsEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;thing1, thing2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; thing1.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt; === thing2.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;\n        &amp;amp;&amp;amp; thing1.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === thing2.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;, thingsEqual);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you can wait to eliminate the duplicates until after all the additions, the typical approach is to first sort the array and then eliminate duplicates. The sorting avoids the N * N approach of scanning the array for each element as you walk through them.&lt;/p&gt;\n\n&lt;p&gt;The &quot;eliminate duplicates&quot; function is usually called &lt;strong&gt;unique&lt;/strong&gt; or &lt;strong&gt;uniq&lt;/strong&gt;. Some existing implementations may combine the two steps, e.g., &lt;a href=&quot;http://prototypejs.org/doc/latest/language/Array/prototype/uniq/&quot; rel=&quot;noreferrer&quot;&gt;prototype&apos;s uniq&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.martienus.com/code/javascript-remove-duplicates-from-array.html&quot; rel=&quot;noreferrer&quot;&gt;This post&lt;/a&gt; has few ideas to try (and some to avoid :-) ) &lt;em&gt;if your library doesn&apos;t already have one&lt;/em&gt;! Personally I find this one the most straight forward:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){\n        a.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a[i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == a[i]){\n                a.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(i, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                i++;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n    }  \n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Provide your own comparison&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, compareFunc&lt;/span&gt;){\n        a.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;( compareFunc );\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;compareFunc&lt;/span&gt;(a[i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], a[i]) === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n                a.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(i, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                i++;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think the best approach is using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot; rel=&quot;noreferrer&quot;&gt;reduce&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;noreferrer&quot;&gt;Map object&lt;/a&gt;. &lt;strong&gt;This is a single line solution.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;David&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mark&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Lora&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Tyler&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Donald&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Adrian&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Michael&apos;&lt;/span&gt;}\n]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uniqueData = [...data.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;map, obj&lt;/span&gt;) =&amp;gt;&lt;/span&gt; map.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;, obj), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(uniqueData)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n  in `map.set(obj.id, obj)`\n  \n  &apos;obj.id&apos; is key. (don&apos;t worry. we&apos;ll get only values using the .values() method)\n  &apos;obj&apos; is whole object.\n*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;One liners with Map ( High performance, Does not preserve order )&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Find unique &lt;code&gt;id&lt;/code&gt;&apos;s in array &lt;code&gt;arr&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrUniq = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; [v.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;, v])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the order is important check out the solution with filter: &lt;a href=&quot;https://stackoverflow.com/a/56757215/1602301&quot;&gt;Solution with filter&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Unique by multiple properties ( &lt;code&gt;place&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; ) in array &lt;code&gt;arr&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrUniq = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([v.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;,v.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;]), v])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unique by all properties in array &lt;code&gt;arr&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrUniq = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(v), v])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keep the first occurrence in array &lt;code&gt;arr&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrUniq = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; [v.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;, v])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()].&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Dang, kids, let&apos;s crush this thing down, why don&apos;t we?&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; uniqIds = {}, source = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;}];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; filtered = source.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; !uniqIds[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] &amp;amp;&amp;amp; (uniqIds[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(filtered);\n&lt;span class=&quot;hljs-comment&quot;&gt;// EXPECTED: [{id:&apos;a&apos;},{id:&apos;b&apos;},{id:&apos;c&apos;},{id:&apos;d&apos;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To add one more to the list. Using ES6 and &lt;code&gt;Array.reduce&lt;/code&gt; with &lt;code&gt;Array.find&lt;/code&gt;.&lt;br&gt;\nIn this example filtering objects based on a &lt;code&gt;guid&lt;/code&gt; property.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; filtered = array.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;accumulator, current&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (! accumulator.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{guid}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; guid === current.&lt;span class=&quot;hljs-property&quot;&gt;guid&lt;/span&gt;)) {\n    accumulator.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(current);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; accumulator;\n}, []);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Extending this one to allow selection of a property and compress it into a one liner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqify&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;array, key&lt;/span&gt;) =&amp;gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prev, curr&lt;/span&gt;) =&amp;gt;&lt;/span&gt; prev.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; a[key] === curr[key]) ? prev : prev.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(curr) &amp;amp;&amp;amp; prev, []);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use it pass an array of objects and the name of the key you wish to de-dupe on as a string value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;uniqify&lt;/span&gt;(myArrayOfObjects, &lt;span class=&quot;hljs-string&quot;&gt;&apos;guid&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could also use a &lt;code&gt;Map&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; dedupThings = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;m, t&lt;/span&gt;) =&amp;gt;&lt;/span&gt; m.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(t.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;, t), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Full sample:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; things = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;();\n\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;();\n\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;});\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;});\nthings.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; dedupThings = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;m, t&lt;/span&gt;) =&amp;gt;&lt;/span&gt; m.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(t.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;, t), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(dedupThings, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;place&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;\n    },\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;place&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;\n    }\n]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;A TypeScript solution&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This will remove duplicate objects and also preserve the types of the objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicateObjects&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array: any[]&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(s)))]\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(s));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Considering &lt;a href=&quot;https://lodash.com/docs/4.17.4#uniqWith&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;lodash.uniqWith&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; objects = [{ &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; }, { &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }, { &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; }];\n \n_.&lt;span class=&quot;hljs-title function_&quot;&gt;uniqWith&lt;/span&gt;(objects, _.&lt;span class=&quot;hljs-property&quot;&gt;isEqual&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myData = [{&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;}, \n {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;},\n {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;}];\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; q = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(myData.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj), obj])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(q)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;One-liner using ES6 and &lt;code&gt;new Map()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// assign things.thing to myData&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myData = things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;;\n\n[...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(myData.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj), obj])).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Details:-&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Doing &lt;code&gt;.map()&lt;/code&gt; on the data list and converting each individual object into a &lt;code&gt;[key, value]&lt;/code&gt; pair array(length =2), the first element(key) would be the &lt;code&gt;stringified&lt;/code&gt; version of the object and second(value) would be an &lt;code&gt;object&lt;/code&gt; itself.&lt;/li&gt;\n&lt;li&gt;Adding above created array list to &lt;code&gt;new Map()&lt;/code&gt; would have the key as &lt;code&gt;stringified&lt;/code&gt; object and any same key addition would result in overriding the already existing key. &lt;/li&gt;\n&lt;li&gt;Using &lt;code&gt;.values()&lt;/code&gt; would give MapIterator with all values in a Map (&lt;code&gt;obj&lt;/code&gt; in our case)&lt;/li&gt;\n&lt;li&gt;Finally, &lt;code&gt;spread ...&lt;/code&gt; operator to give new Array with values from the above step.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; things = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;}\n];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filteredArr = things.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;thing, current&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; x = thing.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt; === current.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!x) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; thing.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;([current]);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; thing;\n  }\n}, []);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(filteredArr)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Solution Via &lt;code&gt;Set&lt;/code&gt; Object | According to the data type&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; seen = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;();\n &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; things = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filteredArr = things.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; duplicate = seen.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(el.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;);\n  seen.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(el.&lt;span class=&quot;hljs-property&quot;&gt;place&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !duplicate;\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(filteredArr)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;Set&lt;/code&gt; Object Feature&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Each value in the Set Object has to be unique, the value equality will be checked&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;The Purpose of Set object  storing unique values according to the  Data type , whether primitive values or object references.it has very useful four Instance methods &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt; , &lt;code&gt;has&lt;/code&gt; &amp;amp; &lt;code&gt;delete&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Unique &amp;amp; data Type feature:..&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;add&lt;/code&gt;method&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;it&apos;s  push unique data into collection by default also preserve data type .. that means it prevent to  push duplicate item into collection also it will check data type by default...&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;has&lt;/code&gt; method&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;sometime needs to check data item exist into the collection and . it&apos;s handy  method for the collection to cheek unique id or item and data type..&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;delete&lt;/code&gt;  method&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;it will remove specific item from the collection by identifying data type..&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;clear&lt;/code&gt;  method&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;it will remove all collection items from one specific variable and set as empty object&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;code&gt;Set&lt;/code&gt; object has also &lt;strong&gt;Iteration methods&lt;/strong&gt; &amp;amp; more feature..&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Better Read from Here :&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;&lt;strong&gt;Set - JavaScript | MDN&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;removeDuplicates()&lt;/code&gt; takes in an array of objects and returns a new array without any duplicate objects (based on the id property).&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; allTests = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;}, \n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; uniq = {};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; !uniq[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] &amp;amp;&amp;amp; (uniq[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;))\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(allTests);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Expected outcome:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;}, \n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;}\n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First, we set the value of variable uniq to an empty object.&lt;/p&gt;\n&lt;p&gt;Next, we filter through the array of objects. Filter creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; !uniq[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] &amp;amp;&amp;amp; (uniq[obj.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Above, we use the short-circuiting functionality of &amp;amp;&amp;amp;. If the left side of the &amp;amp;&amp;amp; evaluates to true, then it returns the value on the right of the &amp;amp;&amp;amp;. If the left side is false, it returns what is on the left side of the &amp;amp;&amp;amp;.&lt;/p&gt;\n&lt;p&gt;For each object(obj) we check uniq for a property named the value of obj.id (In this case, on the first iteration it would check for the property &apos;1&apos;.) We want the opposite of what it returns (either true or false) which is why we use the ! in &lt;code&gt;!uniq[obj.id]&lt;/code&gt;. If uniq has the id property already, it returns true which evaluates to false (!) telling the filter function NOT to add that obj. However, if it does not find the obj.id property, it returns false which then evaluates to true (!) and returns everything to the right of the &amp;amp;&amp;amp;, or (uniq[obj.id] = true). This is a truthy value, telling the filter method to add that obj to the returned array, and it also adds the property {1: true} to uniq. This ensures that any other obj instance with that same id will not be added again.&lt;/p&gt;\n    ","\n&lt;p&gt;This way works well for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrayUnique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, uniqueKey&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; flagList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!flagList.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(item[uniqueKey])) {\n      flagList.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(item[uniqueKey])\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    }\n  })\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = [\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kyle&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;occupation&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fashion Designer&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kyle&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;occupation&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fashion Designer&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Emily&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;occupation&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Web Designer&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Melissa&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;occupation&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fashion Designer&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Tom&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;occupation&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Web Developer&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Tom&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;occupation&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Web Developer&apos;&lt;/span&gt;\n  }\n]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;table&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;arrayUnique&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;// work well&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;printout&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;\n (index)    name         occupation     \n\n    0      &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kyle&apos;&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fashion Designer&apos;&lt;/span&gt; \n    1      &lt;span class=&quot;hljs-string&quot;&gt;&apos;Emily&apos;&lt;/span&gt;     &lt;span class=&quot;hljs-string&quot;&gt;&apos;Web Designer&apos;&lt;/span&gt;   \n    2     &lt;span class=&quot;hljs-string&quot;&gt;&apos;Melissa&apos;&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fashion Designer&apos;&lt;/span&gt; \n    3       &lt;span class=&quot;hljs-string&quot;&gt;&apos;Tom&apos;&lt;/span&gt;     &lt;span class=&quot;hljs-string&quot;&gt;&apos;Web Developer&apos;&lt;/span&gt;   \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;ES5:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrayUnique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, uniqueKey&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; flagList = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flagList.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item[uniqueKey]) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n      flagList.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(item[uniqueKey])\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    }\n  })\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These two ways are simpler and more understandable.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a solution for ES6 where you only want to keep the last item. This solution is functional and Airbnb style compliant.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; things = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;thing&lt;/span&gt;: [\n    { &lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;here&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;stuff&apos;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;there&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;morestuff1&apos;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;there&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;morestuff2&apos;&lt;/span&gt; }, \n  ],\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;array, key&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; removed = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; i[key] !== item[key]);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...removed, item];\n  }, []);\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(things.&lt;span class=&quot;hljs-property&quot;&gt;thing&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;place&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// &amp;gt; [{ place: &apos;here&apos;, name: &apos;stuff&apos; }, { place: &apos;there&apos;, name: &apos;morestuff2&apos; }]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Fast (less runtime) and type-safe answer for lazy &lt;strong&gt;Typescript&lt;/strong&gt; developers:&lt;/h1&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uniqueBy = &amp;lt;T&amp;gt;( &lt;span class=&quot;hljs-attr&quot;&gt;uniqueKey&lt;/span&gt;: keyof T, &lt;span class=&quot;hljs-attr&quot;&gt;objects&lt;/span&gt;: T[]): T[] =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ids = objects.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt; =&amp;gt;&lt;/span&gt; object[uniqueKey]);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; objects.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; !ids.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(object[uniqueKey], index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know there is a ton of answers in this question already, but bear with me...&lt;/p&gt;\n&lt;p&gt;Some of the objects in your array may have additional properties that you are not interested in, or you simply want to find the unique objects &lt;em&gt;considering only a subset of the properties&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Consider the array below. Say you want to find the unique objects in this array considering only &lt;code&gt;propOne&lt;/code&gt; and &lt;code&gt;propTwo&lt;/code&gt;, and ignore any other properties that may be there.&lt;/p&gt;\n&lt;p&gt;The expected result should include only the first and last objects. So here goes the code:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;propOne&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;propTwo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;propThree&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;I have no part in this...&apos;&lt;/span&gt;\n},\n{\n    &lt;span class=&quot;hljs-attr&quot;&gt;propOne&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;propTwo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;someOtherProperty&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;no one cares about this...&apos;&lt;/span&gt;\n},\n{\n    &lt;span class=&quot;hljs-attr&quot;&gt;propOne&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;propTwo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;yetAnotherJunk&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;I am valueless really&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;noOneHasThis&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;I have something no one has&apos;&lt;/span&gt;\n}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uniques = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;((&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n        &lt;span class=&quot;hljs-attr&quot;&gt;propOne&lt;/span&gt;: o.&lt;span class=&quot;hljs-property&quot;&gt;propOne&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;propTwo&lt;/span&gt;: o.&lt;span class=&quot;hljs-property&quot;&gt;propTwo&lt;/span&gt;\n    }))(x))))\n].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;parse&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(uniques);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Another option would be to create a custom indexOf function, which compares the values of your chosen property for each object and wrap this in a reduce function.   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniq = redundant_array.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;indexOfProperty&lt;/span&gt; (a, b){\n          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;i++){\n              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a[i].&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; == b.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt;){\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n               }\n          }\n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;indexOfProperty&lt;/span&gt;(a,b) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(b);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n    },[]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here I found a simple solution for removing duplicates from an array of objects using reduce method. I am filtering elements based on the position key of an object&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; med = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;name1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;name2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;right&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;name3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;name4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;right&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;name5&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;name6&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;left1&apos;&lt;/span&gt;}\n]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [];\nmed.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc, curr&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(acc.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(curr.&lt;span class=&quot;hljs-property&quot;&gt;position&lt;/span&gt;) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    acc.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(curr.&lt;span class=&quot;hljs-property&quot;&gt;position&lt;/span&gt;);\n    arr.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(curr);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; acc;\n}, [])\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Continuing exploring ES6 ways of removing duplicates from array of objects: setting &lt;code&gt;thisArg&lt;/code&gt; argument of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Array.prototype.filter&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;new Set&lt;/code&gt; provides a decent alternative:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; things = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;here&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;place&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;morestuff&quot;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filtered = things.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{place, name}&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key =&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${place}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${name}&lt;/span&gt;`&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(key) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(key);\n\n}, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(filtered);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;However, it will not work with arrow functions &lt;code&gt;() =&amp;gt;&lt;/code&gt;, as &lt;code&gt;this&lt;/code&gt; is bound to their lexical scope.&lt;/p&gt;\n    "],"518":["\n&lt;p&gt;The expression:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;(expression1,  expression2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First &lt;code&gt;expression1&lt;/code&gt; is evaluated, then &lt;code&gt;expression2&lt;/code&gt; is evaluated, and the value of &lt;code&gt;expression2&lt;/code&gt; is returned for the whole expression.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve seen used most in &lt;code&gt;while&lt;/code&gt; loops:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(read_string(s), s.len() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n   &lt;span class=&quot;hljs-comment&quot;&gt;//do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will do the operation, then do a test based on a side-effect. The other way would be to do it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s;\nread_string(s);\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(s.len() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n   &lt;span class=&quot;hljs-comment&quot;&gt;//do something&lt;/span&gt;\n   read_string(s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Comma_operator&quot; rel=&quot;noreferrer&quot;&gt;comma operator&lt;/a&gt; will evaluate the left operand, discard the result and then evaluate the right operand and that will be the result. The &lt;em&gt;idiomatic&lt;/em&gt; use as noted in the link is when initializing the variables used in a &lt;code&gt;for&lt;/code&gt; loop, and it gives the following example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *first;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( first = s, s += len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; s &amp;gt;= first; --s)\n      &lt;span class=&quot;hljs-comment&quot;&gt;/*^^^^^^^^^^^^^^^^^^^^^^^*/&lt;/span&gt; \n      &lt;span class=&quot;hljs-built_in&quot;&gt;putchar&lt;/span&gt;(*s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Otherwise there are not many &lt;em&gt;great&lt;/em&gt; uses of the &lt;em&gt;comma operator&lt;/em&gt;, although it is easy to abuse to generate code that is hard to read and maintain.&lt;/p&gt;\n\n&lt;p&gt;From the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot; rel=&quot;noreferrer&quot;&gt;draft C99 standard&lt;/a&gt; the grammar is as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;expression:\n  assignment-expression\n  expression , assignment-expression\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;em&gt;paragraph 2&lt;/em&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;strong&gt;left operand of a comma operator is evaluated as a void expression;&lt;/strong&gt; there is a sequence point after its evaluation. Then the &lt;strong&gt;right operand is evaluated; the result has its type and value.&lt;/strong&gt; &lt;sup&gt;97)&lt;/sup&gt; If an attempt is made to modify the result of a comma operator or to access it after the next sequence point, the behavior is undefined.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Footnote 97&lt;/em&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A comma operator does &lt;strong&gt;not yield an lvalue&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;which means you can not assign to the result of the &lt;em&gt;comma operator&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;It is important to note that the comma operator has the &lt;a href=&quot;https://en.cppreference.com/w/c/language/operator_precedence&quot; rel=&quot;noreferrer&quot;&gt;lowest precedence&lt;/a&gt; and therefore there are cases where using &lt;code&gt;()&lt;/code&gt; can make a big difference, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, y ;\n\n    x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ;\n    y = (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) ;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %d\\n&quot;&lt;/span&gt;, x, y ) ;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will have the following output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The comma operator combines the two expressions either side of it into one, evaluating them both in left-to-right order.  The value of the right-hand side is returned as the value of the whole expression.\n &lt;code&gt;(expr1, expr2)&lt;/code&gt; is like &lt;code&gt;{ expr1; expr2; }&lt;/code&gt; but you can use the result of &lt;code&gt;expr2&lt;/code&gt; in a function call or assignment.&lt;/p&gt;\n\n&lt;p&gt;It is often seen in &lt;code&gt;for&lt;/code&gt; loops to initialise or maintain multiple variables like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (low = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, high = MAXSIZE; low &amp;lt; high; low = newlow, high = newhigh)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* do something with low and high and put new values\n       in newlow and newhigh */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Apart from this, I&apos;ve only used it &quot;in anger&quot; in one other case, when wrapping up two operations that should always go together in a macro.  We had code that copied various binary values into a byte buffer for sending on a network, and a pointer maintained where we had got up to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; outbuff[BUFFSIZE];\n&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ptr = outbuff;\n\n*ptr++ = first_byte_value;\n*ptr++ = second_byte_value;\n\nsend_buff(outbuff, (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(ptr - outbuff));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the values were &lt;code&gt;short&lt;/code&gt;s or &lt;code&gt;int&lt;/code&gt;s we did this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;*((&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; *)ptr)++ = short_value;\n*((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *)ptr)++ = int_value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Later we read that this was not really valid C, because &lt;code&gt;(short *)ptr&lt;/code&gt; is no longer an l-value and can&apos;t be incremented, although our compiler at the time didn&apos;t mind.  To fix this, we split the expression in two:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;*(&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; *)ptr = short_value;\nptr += &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, this approach relied on all developers remembering to put both statements in all the time.  We wanted a function where you could pass in the output pointer, the value and and the value&apos;s type.  This being C, not C++ with templates, we couldn&apos;t have a function take an arbitrary type, so we settled on a macro:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ASSIGN_INCR(p, val, type)  ((*((type) *)(p) = (val)), (p) += sizeof(type))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using the comma operator we were able to use this in expressions or as statements as we wished:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (need_to_output_short)\n    ASSIGN_INCR(ptr, short_value, &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;);\n\nlatest_pos = ASSIGN_INCR(ptr, int_value, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;);\n\nsend_buff(outbuff, (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)(ASSIGN_INCR(ptr, last_value, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) - outbuff));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m not suggesting any of these examples are good style!  Indeed, I seem to remember Steve McConnell&apos;s &lt;em&gt;Code Complete&lt;/em&gt; advising against even using comma operators in a &lt;code&gt;for&lt;/code&gt; loop: for readability and maintainability, the loop should be controlled by only one variable, and the expressions in the &lt;code&gt;for&lt;/code&gt; line itself should only contain loop-control code, not other extra bits of initialisation or loop maintenance.&lt;/p&gt;\n    ","\n&lt;p&gt;It causes the evaluation of multiple statements, but uses only the last one as a resulting value (rvalue, I think).&lt;/p&gt;\n\n&lt;p&gt;So...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;; }\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = (&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;assigning x&quot;&lt;/span&gt;), f(), g() );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;should result in x being set to 8.&lt;/p&gt;\n    ","\n&lt;p&gt;As earlier answers have stated it evaluates all statements but uses the last one as the value of the expression. Personally I&apos;ve only found it useful in loop expressions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (tmp=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i = MAX; i &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The only place I&apos;ve seen it being useful is when you write a funky loop where you want to do multiple things in one of the expressions (probably the init expression or loop expression. Something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arraysAreMirrored&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a1[], &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a2[], &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i1, i2;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i2 = size - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i1 &amp;lt; size; i1++, i2--)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a1[i1] != a2[i2])\n    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pardon me if there are any syntax errors or if I mixed in anything that&apos;s not strict C. I&apos;m not arguing that the , operator is good form, but that&apos;s what you could use it for. In the case above I&apos;d probably use a &lt;code&gt;while&lt;/code&gt; loop instead so the multiple expressions on init and loop would be more obvious. (And I&apos;d initialize i1 and i2 inline instead of declaring and then initializing.... blah blah blah.)&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m reviving this simply to address questions from @Rajesh and @JeffMercado which i think are very important since this is one of the top search engine hits.&lt;/p&gt;\n\n&lt;p&gt;Take the following snippet of code for example &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j;\nj = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %d\\n&quot;&lt;/span&gt;, i , j);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will print&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;i&lt;/code&gt; case is handled as explained by most answers. All expressions are evaluated in left-to-right order but only the last one is assigned to &lt;code&gt;i&lt;/code&gt;. The result of the &lt;code&gt;(&lt;/code&gt; &lt;em&gt;expression&lt;/em&gt; )&lt;code&gt;is&lt;/code&gt;1`. &lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;j&lt;/code&gt; case follows different precedence rules since &lt;code&gt;,&lt;/code&gt; has the lowest operator precedence. Because of those rules, the compiler sees &lt;em&gt;assignment-expression, constant, constant ...&lt;/em&gt;. The expressions are again evaluated in left-to-right order and their side-effects stay visible, therefore, &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;5&lt;/code&gt; as a result of &lt;code&gt;j = 5&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Interstingly, &lt;code&gt;int j = 5,4,3,2,1;&lt;/code&gt; is not allowed by the language spec. An &lt;em&gt;initializer&lt;/em&gt; expects an &lt;em&gt;assignment-expression&lt;/em&gt; so a direct &lt;code&gt;,&lt;/code&gt; operator is not allowed.&lt;/p&gt;\n\n&lt;p&gt;Hope this helps.&lt;/p&gt;\n    "],"519":["\n&lt;p&gt;This has nothing to do with Python; global variables are bad in any programming language.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;However, global constants&lt;/strong&gt; are not conceptually the same as &lt;strong&gt;global variables&lt;/strong&gt;; global constants are perfectly harmless. In Python the distinction between the two is purely by convention: &lt;code&gt;CONSTANTS_ARE_CAPITALIZED&lt;/code&gt; and &lt;code&gt;globals_are_not&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The reason global variables are bad is that they enable functions to have hidden (non-obvious, surprising, hard to detect, hard to diagnose) side effects, leading to an increase in complexity, potentially leading to &lt;a href=&quot;https://en.wikipedia.org/wiki/Spaghetti_code&quot; rel=&quot;noreferrer&quot;&gt;Spaghetti code&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;However, sane use of global state is acceptable (as is local state and mutability) even in functional programming, either for algorithm optimization, reduced complexity, caching and memoization, or the practicality of porting structures originating in a predominantly imperative codebase.&lt;/p&gt;\n\n&lt;p&gt;All in all, your question can be answered in many ways, so your best bet is to just google &quot;why are global variables bad&quot;. Some examples:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?GlobalVariablesAreBad&quot; rel=&quot;noreferrer&quot;&gt;Global Variables Are Bad - Wiki Wiki Web&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;Why is Global State so Evil? - Software Engineering Stack Exchange&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/484635/are-global-variables-bad&quot;&gt;Are global variables bad?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you want to go deeper and find out why side effects are all about, and many other enlightening things, you should learn Functional Programming:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;Side effect (computer science) - Wikipedia&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/15269/why-are-side-effects-considered-evil-in-functional-programming&quot;&gt;Why are side-effects considered evil in functional programming? - Software Engineering Stack Exchange&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; rel=&quot;noreferrer&quot;&gt;Functional programming - Wikipedia&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Yes, &lt;em&gt;in theory&lt;/em&gt;, globals (and &quot;state&quot; in general) are evil. In practice, if you look into your python&apos;s packages directory you&apos;ll find that most modules there start with a bunch of global declarations. Obviously, people have no problem with them.&lt;/p&gt;\n\n&lt;p&gt;Specifically to python, globals&apos; visibility is limited to a module, therefore there are no &quot;true&quot; globals that affect the whole program - that makes them a way less harmful. Another point: there are no &lt;code&gt;const&lt;/code&gt;, so when you need a constant you have to use a global.&lt;/p&gt;\n\n&lt;p&gt;In my practice, if I happen to modify a global in a function, I always declare it with &lt;code&gt;global&lt;/code&gt;, even if there technically no need for that, as in:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cache = {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; cache\n\n    cache[args] = ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This makes globals&apos; manipulations easier to track down.&lt;/p&gt;\n    ","\n&lt;p&gt;A personal opinion on the topic is that having global variables being used in a function logic means that some other code can alter the logic and the expected output of that function which will make debugging very hard (especially in big projects) and will make testing harder as well.&lt;/p&gt;\n\n&lt;p&gt;Furthermore, if you consider other people reading your code (open-source community, colleagues etc) they will have a hard time trying to understand where the global variable is being set, where has been changed and what to expect from this global variable as opposed to an isolated function that its functionality can be determined by reading the function definition itself.&lt;/p&gt;\n\n&lt;h2&gt;(Probably) Violating Pure Function definition&lt;/h2&gt;\n\n&lt;p&gt;I believe that a clean and (nearly) bug-free code should have functions that are as pure as possible (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot; rel=&quot;noreferrer&quot;&gt;pure functions&lt;/a&gt;). A pure function is the one that has the following conditions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The function &lt;strong&gt;always evaluates the same result value given the same argument value(s)&lt;/strong&gt;. The function result value cannot depend on any hidden information or state that may change while program execution proceeds or between different executions of the program, nor can it depend on any external input from I/O devices (usuallysee below).&lt;/li&gt;\n&lt;li&gt;Evaluation of the result &lt;strong&gt;does not cause any semantically observable side effect or output&lt;/strong&gt;, such as mutation of mutable objects or output to I/O devices.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Having global variables is violating at least one of the above if not both as an external code can probably cause unexpected results.&lt;/p&gt;\n\n&lt;p&gt;Another clear definition of pure functions: &quot;Pure function is a function that takes &lt;strong&gt;all of its inputs as explicit arguments&lt;/strong&gt; and produces &lt;strong&gt;all of its outputs as explicit results&lt;/strong&gt;.&quot; &lt;a href=&quot;http://www.cs.nott.ac.uk/~pszgmh/pih.html&quot; rel=&quot;noreferrer&quot;&gt;[1]&lt;/a&gt;. Having global variables violates the idea of pure functions since an input and maybe one of the outputs (the global variable) is not explicitly being given or returned.&lt;/p&gt;\n\n&lt;h2&gt;(Probably) Violating Unit testing F.I.R.S.T principle&lt;/h2&gt;\n\n&lt;p&gt;Further on that, if you consider unit-testing and the F.I.R.S.T principle (&lt;strong&gt;F&lt;/strong&gt;ast tests, &lt;strong&gt;I&lt;/strong&gt;ndependent tests, &lt;strong&gt;R&lt;/strong&gt;epeatable, &lt;strong&gt;S&lt;/strong&gt;elf-Validating and &lt;strong&gt;T&lt;/strong&gt;imely) will probably violate the Independent tests principle (which means that tests don&apos;t depend on each other). &lt;/p&gt;\n\n&lt;p&gt;Having a global variable (not always) but in most of the cases (at least of what I have seen so far) is to prepare and pass results to other functions. This violates this principle as well. If the global variable has been used in that way (i.e the global variable used in function X has to be set in a function Y first) it means that to unit test function X you have to run test/run function Y first.&lt;/p&gt;\n\n&lt;h2&gt;Globals as constants&lt;/h2&gt;\n\n&lt;p&gt;On the other hand and as other people have already mentioned, if the global variable is used as a &quot;constant&quot; variable can be slightly better since the language does not support constants. However, I always prefer working with classes and having the &quot;constants&quot; as a class member and not use a global variable at all. If you have a code that two different classes require to share a global variable then you probably need to refactor your solution and make your classes independent.  &lt;/p&gt;\n\n&lt;p&gt;I don&apos;t believe that globals shouldn&apos;t be used. But if they are used the authors should consider some principles (the ones mentioned above perhaps and other software engineering principles and good practices) for a cleaner and nearly bug-free code.&lt;/p&gt;\n    ","\n&lt;p&gt;They are essential, the screen being a good example. However, in a multithreaded environment or with many developers involved, in practice often the question arises: who did (erraneously) set or clear it? Depending on the architecture, analysis can be costly and be required often. While reading the global var can be ok, writing to it must be controlled, for example by a single thread or threadsafe class. Hence, global vars arise the fear of high development costs possible by the consequences for which themselves are considered evil. Therefore in general, it&apos;s good practice to keep the number of global vars low.&lt;/p&gt;\n    "],"520":["\n&lt;h1&gt;Undo a commit &amp;amp; redo&lt;/h1&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ git commit -m &lt;span class=&quot;hljs-string&quot;&gt;&quot;Something terribly misguided&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# (0: Your Accident)&lt;/span&gt;\n$ git reset HEAD~                              &lt;span class=&quot;hljs-comment&quot;&gt;# (1)&lt;/span&gt;\n[ edit files as necessary ]                    &lt;span class=&quot;hljs-comment&quot;&gt;# (2)&lt;/span&gt;\n$ git add .                                    &lt;span class=&quot;hljs-comment&quot;&gt;# (3)&lt;/span&gt;\n$ git commit -c ORIG_HEAD                      &lt;span class=&quot;hljs-comment&quot;&gt;# (4)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/a&gt; is the command responsible for the &lt;strong&gt;undo&lt;/strong&gt;. It will undo your last commit while &lt;strong&gt;leaving your working tree (the state of your files on disk) untouched.&lt;/strong&gt; You&apos;ll need to add them again before you can commit them again).&lt;/li&gt;\n&lt;li&gt;Make corrections to &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified#_the_working_directory&quot; rel=&quot;noreferrer&quot;&gt;working tree&lt;/a&gt; files.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-add&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/a&gt; anything that you want to include in your new commit.&lt;/li&gt;\n&lt;li&gt;Commit the changes, reusing the old commit message. &lt;code&gt;reset&lt;/code&gt; copied the old head to &lt;code&gt;.git/ORIG_HEAD&lt;/code&gt;; &lt;a href=&quot;https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--cltcommitgt&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;commit&lt;/code&gt; with &lt;code&gt;-c ORIG_HEAD&lt;/code&gt;&lt;/a&gt; will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the &lt;a href=&quot;https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--Cltcommitgt&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;-C&lt;/code&gt;&lt;/a&gt; option.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Alternatively, to edit the previous commit (or just its commit message)&lt;/strong&gt;, &lt;a href=&quot;https://stackoverflow.com/q/179123/1146608&quot;&gt;&lt;code&gt;commit --amend&lt;/code&gt;&lt;/a&gt; will add changes within the current index to the previous commit.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;To remove (not revert) a commit that has been pushed to the server&lt;/strong&gt;, rewriting history with &lt;code&gt;git push origin main --force[-with-lease]&lt;/code&gt; is necessary. &lt;a href=&quot;https://stackoverflow.com/q/52823692/4096791&quot;&gt;It&apos;s &lt;em&gt;almost always&lt;/em&gt; a bad idea to use &lt;code&gt;--force&lt;/code&gt;; prefer &lt;code&gt;--force-with-lease&lt;/code&gt;&lt;/a&gt; instead, and as noted in &lt;a href=&quot;https://git-scm.com/docs&quot; rel=&quot;noreferrer&quot;&gt;the git manual&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You should understand the implications of rewriting history if you [rewrite history] has already been published.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h2&gt;Further Reading&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716&quot;&gt;You can use &lt;code&gt;git reflog&lt;/code&gt; to determine the SHA-1&lt;/a&gt; for the commit to which you wish to revert. Once you have this value, use the sequence of commands as explained above.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;HEAD~&lt;/code&gt; is the same as &lt;code&gt;HEAD~1&lt;/code&gt;. The article &lt;a href=&quot;https://stackoverflow.com/a/46350644/5175709&quot;&gt;What is the HEAD in git?&lt;/a&gt; is helpful if you want to uncommit multiple commits.&lt;/p&gt;\n    ","\n&lt;p&gt;Undoing a commit is a little scary if you don&apos;t know how it works.  But it&apos;s actually amazingly easy if you do understand. I&apos;ll show you the 4 different ways you can undo a commit.&lt;/p&gt;\n&lt;p&gt;Say you have this, where C is your HEAD and (F) is the state of your files.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;   (F)\nA-B-C\n    \n  master\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Option 1: &lt;code&gt;git reset --hard&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;You want to &lt;strong&gt;destroy commit C and also throw away any uncommitted changes&lt;/strong&gt;.  You do this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; (F)\nA-B\n  \nmaster\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now B is the HEAD.  Because you used &lt;code&gt;--hard&lt;/code&gt;, your files are reset to their state at commit B.&lt;/p&gt;\n&lt;h3&gt;Option 2: &lt;code&gt;git reset&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;Maybe commit C wasn&apos;t a disaster, but just a bit off.  You want to &lt;strong&gt;undo the commit but keep your changes&lt;/strong&gt; for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;   (F)\nA-B-C\n    \n  master\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do this, leaving off the &lt;code&gt;--hard&lt;/code&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this case the result is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;   (F)\nA-B-C\n  \nmaster\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In both cases, HEAD is just a pointer to the latest commit.  When you do a &lt;code&gt;git reset HEAD~1&lt;/code&gt;, you tell Git to move the HEAD pointer back one commit.  But (unless you use &lt;code&gt;--hard&lt;/code&gt;) you leave your files as they were.  So now &lt;code&gt;git status&lt;/code&gt; shows the changes you had checked into C.  You haven&apos;t lost a thing!&lt;/p&gt;\n&lt;h3&gt;Option 3: &lt;code&gt;git reset --soft&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;For the lightest touch, you can even &lt;strong&gt;undo your commit but leave your files and your &lt;a href=&quot;https://git.wiki.kernel.org/index.php/WhatIsTheIndex&quot; rel=&quot;noreferrer&quot;&gt;index&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This not only leaves your files alone, it even leaves your &lt;em&gt;index&lt;/em&gt; alone.  When you do &lt;code&gt;git status&lt;/code&gt;, you&apos;ll see that the same files are in the index as before.  In fact, right after this command, you could do &lt;code&gt;git commit&lt;/code&gt; and you&apos;d be redoing the same commit you just had.&lt;/p&gt;\n&lt;h3&gt;Option 4: you did &lt;code&gt;git reset --hard&lt;/code&gt; and need to get that code back&lt;/h3&gt;\n&lt;p&gt;One more thing: Suppose you &lt;strong&gt;destroy a commit&lt;/strong&gt; as in the first example, &lt;strong&gt;but then discover you needed it after all&lt;/strong&gt;?  Tough luck, right?&lt;/p&gt;\n&lt;p&gt;Nope, there&apos;s &lt;em&gt;still&lt;/em&gt; a way to get it back.  Type this&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reflog\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and you&apos;ll see a list of (partial) commit &lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-1#Data_integrity&quot; rel=&quot;noreferrer&quot;&gt;shas&lt;/a&gt; (that is, hashes) that you&apos;ve moved around in.  Find the commit you destroyed, and do this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git checkout -b someNewBranchName shaYouDestroyed\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ve now resurrected that commit.  Commits don&apos;t actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn&apos;t mean to get rid of.&lt;/p&gt;\n    ","\n&lt;p&gt;There are two ways to &quot;undo&quot; your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):&lt;/p&gt;\n&lt;h2&gt;How to undo a local commit&lt;/h2&gt;\n&lt;p&gt;Let&apos;s say I committed locally, but now I want to remove that commit.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git log\n    commit 101: bad commit    # Latest commit. This would be called &apos;HEAD&apos;.\n    commit 100: good commit   # Second to last commit. This is the one we want.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To restore everything back to the way it was prior to the last commit, we need to &lt;code&gt;reset&lt;/code&gt; to the commit before &lt;code&gt;HEAD&lt;/code&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^     # Use --soft if you want to keep your changes\ngit reset --hard HEAD^     # Use --hard if you don&apos;t care about keeping the changes you made\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now &lt;code&gt;git log&lt;/code&gt; will show that our last commit has been removed.&lt;/p&gt;\n&lt;h2&gt;How to undo a public commit&lt;/h2&gt;\n&lt;p&gt;If you have already made your commits public, you will want to create a new commit which will &quot;revert&quot; the changes you made in your previous commit (current HEAD).&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git revert HEAD\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Your changes will now be reverted and ready for you to commit:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git commit -m &apos;restoring the file I removed by accident&apos;\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don&apos;t need\n    commit 100: adding a file that we need\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more information, check out &lt;em&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things&quot; rel=&quot;noreferrer&quot;&gt;Git Basics - Undoing Things&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Add/remove files to get things the way you want:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git rm classdir\ngit add sourcedir\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then amend the commit:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git commit --amend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The previous, erroneous commit will be edited to reflect the new index state - in other words, it&apos;ll be like you never made the mistake in the first place.&lt;/p&gt;\n\n&lt;p&gt;Note that you should only do this if you haven&apos;t pushed yet. If you have pushed, then you&apos;ll just have to commit a fix normally.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git &lt;span class=&quot;hljs-built_in&quot;&gt;rm&lt;/span&gt; yourfiles/*.class\ngit commit -a -m &lt;span class=&quot;hljs-string&quot;&gt;&quot;deleted all class files in folder &apos;yourfiles&apos;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Warning: The above command will permanently remove the modifications to the &lt;code&gt;.java&lt;/code&gt; files (and any other files) that you wanted to commit.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;hard reset&lt;/code&gt; to &lt;code&gt;HEAD-1&lt;/code&gt; will set your working copy to the state of the commit before your wrong commit.&lt;/p&gt;\n    ","\n&lt;h2 id=&quot;to-change-the-last-commit-ayg9&quot;&gt;To change the last commit&lt;/h2&gt;\n&lt;p&gt;Replace the files in the index:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git rm --cached *.class\ngit add *.java\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, if it&apos;s a private branch, &lt;strong&gt;amend&lt;/strong&gt; the commit:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git commit --amend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, if it&apos;s a shared branch, make a new commit:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git commit -m &apos;Replace .class files with .java files&apos;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br&gt;\n&lt;p&gt;&lt;em&gt;(&lt;strong&gt;To change a previous commit&lt;/strong&gt;, use the awesome &lt;a href=&quot;https://stackoverflow.com/a/28421811/405550&quot;&gt;interactive rebase&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;ProTip: Add &lt;code&gt;*.class&lt;/code&gt; to a &lt;a href=&quot;https://help.github.com/articles/ignoring-files&quot; rel=&quot;noreferrer&quot;&gt;gitignore&lt;/a&gt; to stop this happening again.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;to-revert-a-commit-rotb&quot;&gt;To revert a commit&lt;/h2&gt;\n&lt;p&gt;Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is &lt;code&gt;reset&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You can reset Git to any commit with:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset @~N\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where &lt;code&gt;N&lt;/code&gt; is the number of commits before &lt;code&gt;HEAD&lt;/code&gt;, and &lt;code&gt;@~&lt;/code&gt; resets to the previous commit.&lt;/p&gt;\n&lt;p&gt;Instead of amending the commit, you could use:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset @~\ngit add *.java\ngit commit -m &quot;Add .java files&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Check out &lt;code&gt;git help reset&lt;/code&gt;, specifically the sections on &lt;code&gt;--soft&lt;/code&gt; &lt;code&gt;--mixed&lt;/code&gt; and &lt;code&gt;--hard&lt;/code&gt;, for a better understanding of what this does.&lt;/p&gt;\n&lt;h2 id=&quot;reflog-hdrm&quot;&gt;Reflog&lt;/h2&gt;\n&lt;p&gt;If you mess up, you can always use the reflog to find dropped commits:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you&apos;re back where you started\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;git revert &amp;lt;commit-id&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;To get the commit ID, just use &lt;code&gt;git log&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are planning to undo a local commit entirely, whatever you change you did on the commit, and if you don&apos;t worry anything about that, just do the following command.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after &lt;code&gt;git add&lt;/code&gt;) then do the following command.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now your committed files come into the staging area. Suppose if you want to upstage the files, because you need to edit some wrong content, then do the following command&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset HEAD\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now committed files to come from the staged area into the unstaged area. Now files are ready to edit, so whatever you change, you want to go edit and added it and make a fresh/new commit.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html&quot; rel=&quot;noreferrer&quot;&gt;More (link broken)&lt;/a&gt; (&lt;a href=&quot;https://web.archive.org/web/20170410191943/http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html&quot; rel=&quot;noreferrer&quot;&gt;Archived version&lt;/a&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;If you have &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot; rel=&quot;noreferrer&quot;&gt;Git Extras&lt;/a&gt; installed, you can run &lt;code&gt;git undo&lt;/code&gt; to undo the latest commit. &lt;code&gt;git undo 3&lt;/code&gt; will undo the last three commits.&lt;/p&gt;\n    ","\n&lt;p&gt;I wanted to undo the latest five commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;prompt&amp;gt; git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt&amp;gt; git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -&amp;gt; master (forced update)\nprompt&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I prefer to use &lt;code&gt;git rebase -i&lt;/code&gt; for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just &lt;em&gt;feels right&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Choose how many commits you want to list, then invoke like this (to enlist last three)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git rebase -i HEAD~3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample list&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then Git will remove commits for any line that you remove.&lt;/p&gt;\n    ","\n&lt;h2&gt;How to fix the previous local commit&lt;/h2&gt;\n\n&lt;p&gt;Use git-gui (or similar) to perform a &lt;code&gt;git commit --amend&lt;/code&gt;. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. &lt;/p&gt;\n\n&lt;h2&gt;How to undo the previous local commit&lt;/h2&gt;\n\n&lt;p&gt;Just reset your branch to the previous location (for example, using &lt;code&gt;gitk&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use &lt;code&gt;git reset HEAD~1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Word of warning&lt;/strong&gt;: &lt;em&gt;Careless use of &lt;code&gt;git reset&lt;/code&gt; is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h2&gt;How to undo a public commit&lt;/h2&gt;\n\n&lt;p&gt;Perform a &lt;a href=&quot;https://stackoverflow.com/a/1624724/86967&quot;&gt;reverse cherry pick&lt;/a&gt; (&lt;a href=&quot;http://git-scm.com/docs/git-revert.html&quot; rel=&quot;noreferrer&quot;&gt;git-revert&lt;/a&gt;) to undo the changes.&lt;/p&gt;\n\n&lt;p&gt;If you haven&apos;t yet pulled other changes onto your branch, you can simply do...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git revert --no-edit HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then push your updated branch to the shared repository.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;The commit history will show both commits, separately&lt;/em&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Advanced: Correction of the &lt;em&gt;private&lt;/em&gt; branch in public repository&lt;/h2&gt;\n\n&lt;h3&gt;&lt;em&gt;This can be dangerous -- be sure you have a local copy of the branch to repush.&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;&lt;em&gt;Also note: You don&apos;t want to do this if someone else may be working on the branch.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git push --delete (branch_name) ## remove public version of branch\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clean up your branch locally then repush...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git push origin (branch_name)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;In the normal case, you probably needn&apos;t worry about your private-branch commit history being pristine.  Just push a followup commit (see &apos;How to undo a public commit&apos; above), and later, do a &lt;a href=&quot;https://stackoverflow.com/a/22417539/86967&quot;&gt;squash-merge&lt;/a&gt; to hide the history.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to permanently undo it and you have cloned some repository.&lt;/p&gt;\n&lt;p&gt;The commit id can be seen by:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git log \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you can do like:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard &amp;lt;commit_id&amp;gt;\n\ngit push origin &amp;lt;branch_name&amp;gt; -f\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you have committed junk but not pushed,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;HEAD~1&lt;/strong&gt; is a shorthand for the commit before head. Alternatively you can refer to the &lt;strong&gt;SHA-1&lt;/strong&gt; of the hash if you want to reset to. &lt;em&gt;--soft&lt;/em&gt; option will delete the commit but it will leave all your changed files &quot;Changes to be committed&quot;, as git status would put it.&lt;/p&gt;\n  \n  &lt;p&gt;If you want to get rid of any changes to tracked files in the working tree since the commit before head use &quot;&lt;strong&gt;--hard&lt;/strong&gt;&quot; instead.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If you already pushed and someone pulled which is usually my case, you can&apos;t use &lt;em&gt;git reset&lt;/em&gt;. You can however do a &lt;em&gt;git revert&lt;/em&gt;,&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;git revert HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This will create a new commit that reverses everything introduced by the accidental commit.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;On &lt;a href=&quot;https://www.atlassian.com/software/sourcetree/overview&quot;&gt;SourceTree&lt;/a&gt; (GUI for GitHub), you may right-click the commit and do a &apos;Reverse Commit&apos;. This should undo your changes.&lt;/p&gt;\n\n&lt;p&gt;On the terminal:&lt;/p&gt;\n\n&lt;p&gt;You may alternatively use:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git revert\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git reset --soft HEAD^ &lt;span class=&quot;hljs-comment&quot;&gt;# Use --soft if you want to keep your changes.&lt;/span&gt;\ngit reset --hard HEAD^ &lt;span class=&quot;hljs-comment&quot;&gt;# Use --hard if you don&apos;t care about keeping your changes.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A single command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git reset --soft &lt;span class=&quot;hljs-string&quot;&gt;&apos;HEAD^&apos;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It works great to undo the last local commit!&lt;/p&gt;\n    ","\n&lt;p&gt;Just reset it doing the command below using &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Explain:&lt;/strong&gt; what &lt;code&gt;git reset&lt;/code&gt; does, it&apos;s basically &lt;code&gt;reset&lt;/code&gt; to any commit you&apos;d like to go back to, then if you combine it with &lt;code&gt;--soft&lt;/code&gt; key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, &lt;code&gt;HEAD&lt;/code&gt; is the head of the branch and if you combine with &lt;code&gt;~1&lt;/code&gt; (in this case you also use &lt;code&gt;HEAD^&lt;/code&gt;), it will go back only one commit which what you want...&lt;/p&gt;\n\n&lt;p&gt;I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/7zrzb.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/7zrzb.jpg&quot; alt=&quot;How to undo the last commits in Git?&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&quot;Reset the working tree to the last commit&quot;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^ \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&quot;Clean unknown files from the working tree&quot;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git clean    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;see - &lt;a href=&quot;https://web.archive.org/web/20210515091636/http://jonas.nitro.dk/git/quick-reference.html&quot; rel=&quot;noreferrer&quot;&gt;Git Quick Reference&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;NOTE: &lt;strong&gt;This command will delete your previous commit&lt;/strong&gt;, so use with caution! &lt;code&gt;git reset --hard&lt;/code&gt; is safer.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;How to undo the last Git commit?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If you don&apos;t want to keep your changes that you made:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to keep your changes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now check your git log. It will show that our last commit has been removed.&lt;/p&gt;\n    ","\n&lt;p&gt;Use reflog to find a correct state&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reflog\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/c7e7D.png&quot; alt=&quot;reflog before&quot;&gt;\n&lt;em&gt;REFLOG BEFORE RESET&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Select the correct reflog (f3cb6e2 in my case) and type &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard f3cb6e2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that the repo HEAD will be reset to that HEADid\n&lt;img src=&quot;https://i.stack.imgur.com/GdnDT.png&quot; alt=&quot;reset effect&quot;&gt;\n&lt;em&gt;LOG AFTER RESET&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Finally the reflog looks like the picture below&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Fhhub.png&quot; alt=&quot;reflog after&quot;&gt;\n&lt;em&gt;REFLOG FINAL&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;First run: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reflog\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.&lt;/p&gt;\n\n&lt;p&gt;Then do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard ActionIdFromRefLog\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Undo last commit:&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;git reset --soft HEAD^&lt;/code&gt; or &lt;code&gt;git reset --soft HEAD~&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This will undo the last commit.&lt;/p&gt;\n\n&lt;p&gt;Here &lt;code&gt;--soft&lt;/code&gt; means reset into staging.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;HEAD~&lt;/code&gt; or &lt;code&gt;HEAD^&lt;/code&gt; means to move to commit before HEAD.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Replace last commit to new commit:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;git commit --amend -m &quot;message&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will replace the last commit with the new commit.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way:&lt;/p&gt;\n\n&lt;p&gt;Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;.&lt;/p&gt;\n\n&lt;p&gt;Then navigate to your repository&apos;s local directory and run this command:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will erase all commits after the current one in your local repository but only for that one branch.&lt;/p&gt;\n    ","\n&lt;p&gt;Type &lt;code&gt;git log&lt;/code&gt; and find the last commit hash code and then enter:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset &amp;lt;the previous co&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In my case I accidentally committed some files I did not want to. So I did the following and it worked:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Verify the results with gitk or git log --stat&lt;/p&gt;\n    ","\n&lt;p&gt;Simple, run this in your command line:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~ \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are two main scenarios&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;You haven&apos;t pushed the commit yet&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If the problem was extra files you commited (and you don&apos;t want those on repository), you can remove them using &lt;code&gt;git rm&lt;/code&gt; and then commiting with &lt;code&gt;--amend&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git rm &amp;lt;pathToFile&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also remove entire directories with &lt;code&gt;-r&lt;/code&gt;, or even combine with other &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;Bash&lt;/a&gt; commands&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git rm -r &amp;lt;pathToDirectory&amp;gt;\ngit rm $(find -name &apos;*.class&apos;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After removing the files, you can commit, with &lt;strong&gt;--amend&lt;/strong&gt; option&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git commit --amend -C HEAD # the -C option is to use the same commit message\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;You already pushed the commit&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can apply the same solution of the other scenario and then doing &lt;code&gt;git push&lt;/code&gt; with the &lt;code&gt;-f&lt;/code&gt; option, but it is &lt;strong&gt;not recommended&lt;/strong&gt; since it overwrites the remote history with a divergent change (it can mess your repository).&lt;/p&gt;\n\n&lt;p&gt;Instead, you have to do the commit without &lt;code&gt;--amend&lt;/code&gt; (remember this about -amend`: That option rewrites the history on the last commit).&lt;/p&gt;\n    ","\n&lt;h3&gt;For a local commit&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you do not remember exactly in which commit it is, you might use&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git rm --cached &amp;lt;file&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;For a pushed commit&lt;/h3&gt;\n\n&lt;p&gt;The proper way of removing files from the repository history is using &lt;code&gt;git filter-branch&lt;/code&gt;. That is,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git filter-branch --index-filter &lt;span class=&quot;hljs-string&quot;&gt;&apos;git rm --cached &amp;lt;file&amp;gt;&apos;&lt;/span&gt; HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I recomnend you use this command with care. Read more at &lt;em&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html&quot;&gt;git-filter-branch(1) Manual Page&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;To reset to the previous revision, permanently deleting all uncommitted changes: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are many ways to do it:&lt;/p&gt;\n\n&lt;p&gt;Git command to undo the last commit/ previous commits:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Do Not use --hard if you do not know what you are doing.\n--hard is too &lt;strong&gt;dangerous&lt;/strong&gt;, and it might &lt;strong&gt;delete your files.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Basic command to revert the commit in Git is:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git reset --hard &amp;lt;COMMIT -ID&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD~&amp;lt;n&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;COMMIT-ID&lt;/strong&gt;: ID for the commit&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;n:&lt;/strong&gt;  is number of last commits you want to revert&lt;/p&gt;\n\n&lt;p&gt;You can get the commit id as shown below:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;strong&gt;d81d3f1&lt;/strong&gt; and &lt;strong&gt;be20eb8&lt;/strong&gt; are commit id.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Now let&apos;s see some cases:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Suppose you want to revert the last commit &apos;d81d3f1&apos;.  Here are two options:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git reset --hard d81d3f1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Suppose you want to revert the commit &apos;be20eb8&apos;:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git reset --hard be20eb8\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more detailed information you can refer and try out some other commands too for resetting head to a specified state:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git reset --help\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"19","randomQuestions":[{"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625"},{"title":"C++ Singleton design pattern","slug":"c++-singleton-design-pattern-1657387830040"},{"title":"WebDriverWait not working as expected","slug":"webdriverwait-not-working-as-expected-1657387373148"},{"title":"How can I deserialize JSON with C#?","slug":"how-can-i-deserialize-json-with-c-1657388102941"},{"title":"How do I compose a rotation matrix with human readable angles from scratch?","slug":"how-do-i-compose-a-rotation-matrix-with-human-readable-angles-from-scratch-1657387963457"},{"title":"Why aren't variable-length arrays part of the C++ standard?","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975"},{"title":"Why does my function that calls an API or launches a coroutine return an empty or null value?","slug":"why-does-my-function-that-calls-an-api-or-launches-a-coroutine-return-an-empty-or-null-value-1657388483820"},{"title":"GUI not working after rewriting to MVC","slug":"gui-not-working-after-rewriting-to-mvc-1657388388035"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"},{"title":"Grouping functions (tapply, by, aggregate) and the *apply family","slug":"grouping-functions-(tapply-by-aggregate)-and-the-*apply-family-1657387844286"},{"title":"What does \"list comprehension\" and similar mean? How does it work and how can I use it?","slug":"what-does-\"list-comprehension\"-and-similar-mean-how-does-it-work-and-how-can-i-use-it-1657387996940"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"How do I split a list into equally-sized chunks?","slug":"how-do-i-split-a-list-into-equally-sized-chunks-1657384580399"},{"title":"Do DOM tree elements with IDs become global properties?","slug":"do-dom-tree-elements-with-ids-become-global-properties-1657387475110"},{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API","slug":"no-'access-control-allow-origin'-header-is-present-on-the-requested-resourcewhen-trying-to-get-data-from-a-rest-api-1657387628467"},{"title":"How to access a local variable from a different function using pointers?","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760"},{"title":"How to randomize (shuffle) a JavaScript array?","slug":"how-to-randomize-(shuffle)-a-javascript-array-1657384790171"},{"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827"},{"title":"String.equals versus == [duplicate]","slug":"string.equals-versus-duplicate-1657387599972"}]},"__N_SSG":true}