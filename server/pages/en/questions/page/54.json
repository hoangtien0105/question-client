{"pageProps":{"data":{"count":610,"rows":[{"id":345,"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625","postType":"QUESTION","createdAt":"2022-07-09T17:28:22.000Z","updatedAt":"2022-07-09T17:28:22.000Z","tags":[{"id":1953,"name":"c++11","slug":"c++11","createdAt":"2022-07-09T17:28:22.000Z","updatedAt":"2022-07-09T17:28:22.000Z","Questions_Tags":{"questionId":345,"tagId":1953}},{"id":1954,"name":"move-semantics","slug":"move-semantics","createdAt":"2022-07-09T17:28:22.000Z","updatedAt":"2022-07-09T17:28:22.000Z","Questions_Tags":{"questionId":345,"tagId":1954}}]},{"id":344,"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598","postType":"QUESTION","createdAt":"2022-07-09T17:28:19.000Z","updatedAt":"2022-07-09T17:28:19.000Z","tags":[{"id":1949,"name":"href","slug":"href","createdAt":"2022-07-09T17:28:19.000Z","updatedAt":"2022-07-09T17:28:19.000Z","Questions_Tags":{"questionId":344,"tagId":1949}},{"id":1950,"name":"tabs","slug":"tabs","createdAt":"2022-07-09T17:28:19.000Z","updatedAt":"2022-07-09T17:28:19.000Z","Questions_Tags":{"questionId":344,"tagId":1950}}]},{"id":343,"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779","postType":"QUESTION","createdAt":"2022-07-09T17:28:16.000Z","updatedAt":"2022-07-09T17:28:16.000Z","tags":[{"id":1947,"name":"captured-variable","slug":"captured-variable","createdAt":"2022-07-09T17:28:16.000Z","updatedAt":"2022-07-09T17:28:16.000Z","Questions_Tags":{"questionId":343,"tagId":1947}}]},{"id":342,"title":"How can I change an element's class with JavaScript?","slug":"how-can-i-change-an-element's-class-with-javascript-1657387694695","postType":"QUESTION","createdAt":"2022-07-09T17:28:14.000Z","updatedAt":"2022-07-09T17:28:14.000Z","tags":[]},{"id":341,"title":"Example images for code and mark-up Q&As [closed]","slug":"example-images-for-code-and-mark-up-qandas-closed-1657387690222","postType":"QUESTION","createdAt":"2022-07-09T17:28:10.000Z","updatedAt":"2022-07-09T17:28:10.000Z","tags":[]}]},"answers":{"341":["\n&lt;p&gt;Here are some example images for common use, mostly from existing answers on SO.  &lt;/p&gt;\n\n&lt;h1&gt;&lt;strong&gt;Icons&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Simple Geometric shapes&lt;/strong&gt; generated using Java as originally seen in &lt;a href=&quot;https://stackoverflow.com/a/16052085/418556&quot;&gt;this answer&lt;/a&gt;.  It includes a Java based interface that defines the URLs and makes them easy to access.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 32x32 pixel PNG (4 colors x 5 shapes) with partial transparency (along the edges).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Categories:&lt;/strong&gt; &lt;a href=&quot;/questions/tagged/png&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;png&apos;&quot; rel=&quot;tag&quot;&gt;png&lt;/a&gt; &lt;a href=&quot;/questions/tagged/icons&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;icons&apos;&quot; rel=&quot;tag&quot;&gt;icons&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/gJmeJ.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/L5DGx.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/in9g1.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/IucNt.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/yoKxT.png&quot;&gt;&amp;nbsp;&amp;nbsp;\n  &lt;img src=&quot;https://i.stack.imgur.com/T5uTa.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/gYxHm.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/1lgtq.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/yBOv3.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/zJ8am.png&quot;&gt;&lt;br&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/IHARa.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/8BGfi.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/6ZXhi.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/Lqkl0.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/c67nr.png&quot;&gt;&amp;nbsp;&amp;nbsp;\n  &lt;img src=&quot;https://i.stack.imgur.com/wCF8S.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/5v2TX.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/F0JHK.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/4EVv1.png&quot;&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/xj49g.png&quot;&gt;&lt;br&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Sprite Sheets&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Chess Pieces&lt;/strong&gt; as originally seen on &lt;a href=&quot;https://stackoverflow.com/a/18686753/418556&quot;&gt;this answer&lt;/a&gt; that includes 2 other sprite sets (same image in different colors).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 384x128 px (each sprite 64x64 px) PNG with partial transparency.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Categories:&lt;/strong&gt; &lt;a href=&quot;/questions/tagged/png&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;png&apos;&quot; rel=&quot;tag&quot;&gt;png&lt;/a&gt; &lt;a href=&quot;/questions/tagged/sprite-sheet&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;sprite-sheet&apos;&quot; rel=&quot;tag&quot;&gt;sprite-sheet&lt;/a&gt; &lt;a href=&quot;/questions/tagged/icons&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;icons&apos;&quot; rel=&quot;tag&quot;&gt;icons&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/memI0.png&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Animated&lt;/h2&gt;\n\n&lt;p&gt;GIF is the only image format that supports animation.  Here are a few examples.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Categories:&lt;/strong&gt; &lt;a href=&quot;/questions/tagged/gif&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;gif&apos;&quot; rel=&quot;tag&quot;&gt;gif&lt;/a&gt; &lt;a href=&quot;/questions/tagged/animated-gif&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;animated-gif&apos;&quot; rel=&quot;tag&quot;&gt;animated-gif&lt;/a&gt; &lt;/p&gt;\n\n&lt;h3&gt;Solid BG&lt;/h3&gt;\n\n&lt;p&gt;&lt;strong&gt;Animated dashed border&lt;/strong&gt; as seen in &lt;a href=&quot;https://stackoverflow.com/a/9772978/418556&quot;&gt;this answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 100x30 px with filled BG (no transparency)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/DnzXV.gif&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Zooming stars&lt;/strong&gt; as seen in &lt;a href=&quot;https://stackoverflow.com/a/10836833/418556&quot;&gt;this answer&lt;/a&gt;, originally developed as a &apos;screen-shot&apos; of a screensaver.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 160x120 px with filled BG (no transparency)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/iQFxo.gif&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Animated Water&lt;/strong&gt; as seen in &lt;a href=&quot;https://stackoverflow.com/a/17894012/418556&quot;&gt;this answer&lt;/a&gt; to &lt;a href=&quot;https://stackoverflow.com/q/17893429/418556&quot;&gt;Animating Tiles In My Game&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 60x60 px with filled BG (no transparency)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/HXCUV.gif&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h3&gt;Transparent BG&lt;/h3&gt;\n\n&lt;p&gt;&lt;strong&gt;Orbital animation,&lt;/strong&gt; originally developed for &lt;a href=&quot;http://1point1c.org/&quot; rel=&quot;noreferrer&quot;&gt;1.1C&lt;/a&gt;.  The orbits of the &apos;inner&apos; planets (from Mercury to Jupiter, with an extra orbit shown in the thick of the asteroid belt).  Better on a dark BG.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 450x450 &amp;amp; 150x150 px animated GIFs with transparency.  &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/OtTIY.gif&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/z9rv7.gif&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Pictures&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Sunrise &amp;amp; moonset&lt;/strong&gt; over the CBD of Sydney, Australia&lt;br&gt;&lt;strong&gt;Sunset &amp;amp; Venus over a telescope&lt;/strong&gt; on Mt Stromlo, near Canberra, Australia.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Categories:&lt;/strong&gt; &lt;a href=&quot;/questions/tagged/jpeg&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;jpeg&apos;&quot; rel=&quot;tag&quot;&gt;jpeg&lt;/a&gt; &lt;a href=&quot;/questions/tagged/slideshow&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;slideshow&apos;&quot; rel=&quot;tag&quot;&gt;slideshow&lt;/a&gt; + Image Transitions&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 480x320 px JPEGs x 4.  (Displayed here at 1/2 size.) &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/XZ4V5.jpg&quot; width=&quot;240&quot; height=&quot;160&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/7bI1Y.jpg&quot; width=&quot;240&quot; height=&quot;160&quot;&gt;&lt;br&gt;\n  &lt;img src=&quot;https://i.stack.imgur.com/OVOg3.jpg&quot; width=&quot;240&quot; height=&quot;160&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lxthA.jpg&quot; width=&quot;240&quot; height=&quot;160&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Panorama at Dawn&lt;/strong&gt; across the South-Eastern Suburbs of Sydney.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Categories:&lt;/strong&gt; &lt;a href=&quot;/questions/tagged/jpg&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;jpg&apos;&quot; rel=&quot;tag&quot;&gt;jpg&lt;/a&gt; &lt;a href=&quot;/questions/tagged/panoramas&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;panoramas&apos;&quot; rel=&quot;tag&quot;&gt;panoramas&lt;/a&gt; &lt;a href=&quot;/questions/tagged/animation&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;animation&apos;&quot; rel=&quot;tag&quot;&gt;animation&lt;/a&gt; (scrolling)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 1474x436 px JPEG. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/aH5zB.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/aH5zB.jpg&quot; alt=&quot;Dawn Panorama&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Tiles&lt;/h2&gt;\n\n&lt;p&gt;This &lt;strong&gt;Mercator map of Earth&lt;/strong&gt; can be tiled left/right.  Originally seen on &lt;a href=&quot;https://stackoverflow.com/a/18825844/418556&quot;&gt;this answer&lt;/a&gt;.  The answer also includes a second version of the image that shows a semi-transparent line for the equator (which is not in the center, but significantly below it).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; 640x316 px (add 44 px at bottom to center equator) PNG with transparent BG.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Categories:&lt;/strong&gt; &lt;a href=&quot;/questions/tagged/png&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;png&apos;&quot; rel=&quot;tag&quot;&gt;png&lt;/a&gt; &lt;a href=&quot;/questions/tagged/tile&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;tile&apos;&quot; rel=&quot;tag&quot;&gt;tile&lt;/a&gt; &lt;a href=&quot;/questions/tagged/animation&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;animation&apos;&quot; rel=&quot;tag&quot;&gt;animation&lt;/a&gt; (scrolling)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/P59NF.png&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Tip&lt;/h2&gt;\n\n&lt;p&gt;For getting the URLs of the images, you might &apos;context click&apos; on the image as seen in the browser and either: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Show the properties.  The URL can be copied from the dialog that appears.  &lt;/li&gt;\n&lt;li&gt;View image.  Copy the URL from the browser address bar.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Alternately:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use the browser &apos;show source&apos; and copy it from the HTML.&lt;/li&gt;\n&lt;li&gt;For those with enough rep. (100+, to edit a community Wiki answer), go to &lt;a href=&quot;https://stackoverflow.com/posts/19209651/edit&quot;&gt;edit the answer&lt;/a&gt; and pull the URL from the text.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Code&lt;/h2&gt;\n\n&lt;p&gt;Below is a Java class which splits up the chess piece sprite sheet, suitable for pasting in to an MCVE:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.image.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.imageio.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ChessSprites&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ChessSprites&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SIZE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; BufferedImage SHEET;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// see https://stackoverflow.com/a/19209651/2891664&lt;/span&gt;\n            SHEET = ImageIO.read(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://i.stack.imgur.com/memI0.png&quot;&lt;/span&gt;));\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException x) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UncheckedIOException&lt;/span&gt;(x);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GOLD_QUEEN&lt;/span&gt;    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; * SIZE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,    SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SILVER_QUEEN&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; * SIZE, SIZE, SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GOLD_KING&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * SIZE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,    SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SILVER_KING&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * SIZE, SIZE, SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GOLD_ROOK&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * SIZE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,    SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SILVER_ROOK&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * SIZE, SIZE, SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GOLD_KNIGHT&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * SIZE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,    SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SILVER_KNIGHT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * SIZE, SIZE, SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GOLD_BISHOP&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; * SIZE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,    SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SILVER_BISHOP&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; * SIZE, SIZE, SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GOLD_PAWN&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * SIZE, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,    SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SILVER_PAWN&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SHEET.getSubimage(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * SIZE, SIZE, SIZE, SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;BufferedImage&amp;gt; SPRITES =\n        Collections.unmodifiableList(Arrays.asList(GOLD_QUEEN,  SILVER_QUEEN,\n                                                   GOLD_KING,   SILVER_KING,\n                                                   GOLD_ROOK,   SILVER_ROOK,\n                                                   GOLD_KNIGHT, SILVER_KNIGHT,\n                                                   GOLD_BISHOP, SILVER_BISHOP,\n                                                   GOLD_PAWN,   SILVER_PAWN));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"342":["\n&lt;h2&gt;Modern HTML5 Techniques for changing classes&lt;/h2&gt;\n&lt;p&gt;Modern browsers have added &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.classList&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;classList&lt;/strong&gt;&lt;/a&gt; which provides methods to make it easier to manipulate classes without needing a library:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;) )\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unfortunately, these do not work in Internet Explorer prior to v10, though there is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Shim_(computing)&quot; rel=&quot;noreferrer&quot;&gt;shim&lt;/a&gt; to add support for it to IE8 and IE9, available from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.classList&quot; rel=&quot;noreferrer&quot;&gt;this page&lt;/a&gt;. It is, though, getting more and more &lt;a href=&quot;http://caniuse.com/#feat=classlist&quot; rel=&quot;noreferrer&quot;&gt;supported&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Simple cross-browser solution&lt;/h2&gt;\n&lt;p&gt;The standard JavaScript way to select an element is using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/document.getElementById&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;document.getElementById(&quot;Id&quot;)&lt;/code&gt;&lt;/a&gt;, which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use &lt;code&gt;this&lt;/code&gt; instead - however, going into detail on this is beyond the scope of the answer.&lt;/p&gt;\n&lt;h3&gt;To change all classes for an element:&lt;/h3&gt;\n&lt;p&gt;To replace all existing classes with one or more new classes, set the className attribute:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyClass&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(You can use a space-delimited list to apply multiple classes.)&lt;/p&gt;\n&lt;h3&gt;To add an additional class to an element:&lt;/h3&gt;\n&lt;p&gt;To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&quot; MyClass&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;To remove a class from an element:&lt;/h3&gt;\n&lt;p&gt;To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; =\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replace&lt;/span&gt;\n      ( &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)MyClass(?!\\S)/g&lt;/span&gt; , &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Code wrapped for readability - above is all one statement */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;An explanation of this regex is as follows:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;(?:^|\\s) &lt;span class=&quot;hljs-comment&quot;&gt;# Match the start of the string or any single whitespace character&lt;/span&gt;\n\nMyClass  &lt;span class=&quot;hljs-comment&quot;&gt;# The literal text for the classname to remove&lt;/span&gt;\n\n(?!\\S)   &lt;span class=&quot;hljs-comment&quot;&gt;# Negative lookahead to verify the above is the whole classname&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;# Ensures there is no non-space character following&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;# (i.e. must be the end of the string or space)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;g&lt;/code&gt; flag tells the replace to repeat as required, in case the class name has been added multiple times.&lt;/p&gt;\n&lt;h3&gt;To check if a class is already applied to an element:&lt;/h3&gt;\n&lt;p&gt;The same regex used above for removing a class can also be used as a check as to whether a particular class exists:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;if ( &lt;span class=&quot;hljs-name&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).className.match(&lt;span class=&quot;hljs-name&quot;&gt;/&lt;/span&gt;(?:^|\\s)MyClass(?!\\S)/) )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br&gt;\n### Assigning these actions to onclick events:\n&lt;p&gt;Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as &lt;code&gt;onclick=&quot;this.className+=&apos; MyClass&apos;&quot;&lt;/code&gt;) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JavaScript interaction logic.&lt;/p&gt;\n&lt;p&gt;The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Code examples from above&lt;/span&gt;\n    }\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;changeClass()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;My Button&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sub&gt;&lt;em&gt;(It is not required to have this code in script tags, this is simply for the brevity of example, and including the JavaScript in a distinct file may be more appropriate.)&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;The second step is to move the onclick event out of the HTML and into JavaScript, for example using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot; rel=&quot;noreferrer&quot;&gt;addEventListener&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Code examples from above&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, changeClass);\n    }\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;My Button&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Note that the window.onload part is required so that the contents of that function are executed &lt;em&gt;after&lt;/em&gt; the HTML has finished loading - without this, the MyElement might not exist when the JavaScript code is called, so that line would fail.)&lt;/p&gt;\n&lt;br&gt;\n&lt;h2&gt;JavaScript Frameworks and Libraries&lt;/h2&gt;\n&lt;p&gt;The above code is all in standard JavaScript, however, it is common practice to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.&lt;/p&gt;\n&lt;p&gt;Whilst some people consider it overkill to add a ~50&amp;nbsp; KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work or anything that might have unusual cross-browser behavior, it is well worth considering.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The examples above have been reproduced below using &lt;a href=&quot;http://jquery.com&quot; rel=&quot;noreferrer&quot;&gt;jQuery&lt;/a&gt;, probably the most commonly used JavaScript library (though there are others worth investigating too).&lt;/p&gt;\n&lt;p&gt;(Note that &lt;code&gt;$&lt;/code&gt; here is the jQuery object.)&lt;/p&gt;\n&lt;h3&gt;Changing Classes with jQuery:&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#MyElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;);\n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#MyElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#MyElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;) )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In addition, jQuery provides a shortcut for adding a class if it doesn&apos;t apply, or removing a class that does:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#MyElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br&gt;\n### Assigning a function to a click event with jQuery:\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#MyElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(changeClass);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or, without needing an id:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:button:contains(My Button)&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(changeClass);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br&gt;\n    ","\n&lt;p&gt;You could also just do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And to toggle a class (remove if exists else add it):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In one of my old projects that did not use jQuery, I built the following functions for adding, removing and checking if an element has a class:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|^)&apos;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|$)&apos;&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, cls))\n        ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + cls;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, cls)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reg = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|^)&apos;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|$)&apos;&lt;/span&gt;);\n        ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(reg, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, for example, if I want &lt;code&gt;onclick&lt;/code&gt; to add some class to the button I can use this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;btn, cls&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(btn, cls)) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(btn, cls);\n        }\n    }\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;changeClass(this, &quot;&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;someClass&lt;/span&gt;&quot;)&quot;&amp;gt;&lt;/span&gt;My Button&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;By now for sure it would just be better to use jQuery.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;node.className&lt;/code&gt; like so:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This should work in &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_5#Versions&quot; rel=&quot;noreferrer&quot;&gt;Internet Explorer 5.5&lt;/a&gt; and up according to &lt;a href=&quot;http://quirksmode.org/dom/w3c_html.html&quot; rel=&quot;noreferrer&quot;&gt;PPK&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Wow, surprised there are so many overkill answers here...&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstClass&quot;&lt;/span&gt; onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;this.className=&apos;secondClass&apos;&quot;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using pure JavaScript code:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|^)&apos;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|$)&apos;&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, cls)) ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + cls;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, cls)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reg = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|^)&apos;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s|$)&apos;&lt;/span&gt;);\n        ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = ele.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(reg, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, oldClass, newClass&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, oldClass)){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(ele, oldClass);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(ele, newClass);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ele, cls1, cls2&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, cls1)){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;replaceClass&lt;/span&gt;(ele, cls1, cls2);\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(ele, cls2)){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;replaceClass&lt;/span&gt;(ele, cls2, cls1);\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(ele, cls1);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is working for me:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setCSS&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;eleID&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; currTabElem = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(eleID);\n\n    currTabElem.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;class&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some_class_name&quot;&lt;/span&gt;);\n    currTabElem.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;className&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some_class_name&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;4 actions possible: Add, Remove, Check, and Toggle&lt;/h1&gt;\n&lt;p&gt;Let&apos;s see multiple ways for each action.&lt;/p&gt;\n&lt;h2&gt;1. Add class&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; Best way to add class in the modern browser is using &lt;code&gt;classList.add()&lt;/code&gt; method of element.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 1&lt;/strong&gt;: Adding single class&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// adding class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;beautify&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 2&lt;/strong&gt;: Adding multiple class&lt;/p&gt;\n&lt;p&gt;To add multiple class saperate classes by a comma in the &lt;code&gt;add()&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// adding multiple class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;class2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;class3&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt; - You can also add classes to HTML elements using &lt;code&gt;className&lt;/code&gt; property.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Case 1&lt;/strong&gt;: Overwriting pre-existing classes\nWhen you assign a new class to the &lt;code&gt;className&lt;/code&gt; property it overwrites the previous class.\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// adding multiple class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;beautify&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Case 2&lt;/strong&gt;: Adding class without overwrite\nUse &lt;code&gt;+=&lt;/code&gt; operator for class not to overwrite previous classes. Also add an extra space before new class.\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// adding single multiple class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos; beautify&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// adding multiple classes&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos; class1 class2 class3&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;2. Remove class&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt; - Best way to remove a class from an element is &lt;code&gt;classList.remove()&lt;/code&gt; method.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 1&lt;/strong&gt;: Remove single class&lt;/p&gt;\n&lt;p&gt;Just pass the class name you want to remove from the element in the method.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// removing class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;beautify&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 2&lt;/strong&gt;: Remove multiple class&lt;/p&gt;\n&lt;p&gt;Pass multiple classes separated by a comma.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// removing class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;class2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;class3&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt; - You can also remove class using &lt;code&gt;className&lt;/code&gt; method.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Case 1&lt;/strong&gt;: Removing single class\nIf the element has only 1 class and you want to remove it then just assign an empty string to the &lt;code&gt;className&lt;/code&gt; method.\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// removing class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Case 2&lt;/strong&gt;: Removing multiple class\nIf the element multiple classes the first get all classes from the element using &lt;code&gt;className&lt;/code&gt; property and use replace method and replace desired classes with empty string and finally assign it to element]s &lt;code&gt;className&lt;/code&gt; property.\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// removing class&lt;/span&gt;\n  element.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = element.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;3. Checking class&lt;/h2&gt;\n&lt;p&gt;To check if a class exists in the element you can simply use &lt;strong&gt;&lt;code&gt;classList.contains()&lt;/code&gt;&lt;/strong&gt; method. It returns &lt;code&gt;true&lt;/code&gt; if the class exists else returns false.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// checking class&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;beautify&apos;&lt;/span&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Yes! class exists&apos;&lt;/span&gt;);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;4. Toggle class&lt;/h2&gt;\n&lt;p&gt;To toggle a class use &lt;strong&gt;&lt;code&gt;classList.toggle()&lt;/code&gt;&lt;/strong&gt; method.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// toggle class&lt;/span&gt;\n    element.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;beautify&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes (&lt;a href=&quot;https://gist.github.com/Maksims/5356227&quot; rel=&quot;noreferrer&quot;&gt;gist&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt;) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefiend&apos;&lt;/span&gt; ? &lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Element&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;addClass&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; ++i) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[i] &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|^)&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[i] + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|$)&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;)) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[i];\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;removeClass&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; ++i) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|^)&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[i] + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|$)&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;();\n  }\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toggleClass&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|^)&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|$)&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;)) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|^)&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|$)&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;;\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;hasClass&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|^)&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\\\s+|$)&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then just use like this (on click will add or remove class):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yourElementId&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;active&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is &lt;a href=&quot;http://jsfiddle.net/5QMgR/&quot; rel=&quot;noreferrer&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to add on information from another popular framework, Google Closures, see their &lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;dom/classes&lt;/a&gt; class:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;goog&lt;span class=&quot;hljs-selector-class&quot;&gt;.dom&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.classes&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(element, var_args)\n\ngoog&lt;span class=&quot;hljs-selector-class&quot;&gt;.dom&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.classes&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.addRemove&lt;/span&gt;(element, classesToRemove, classesToAdd)\n\ngoog&lt;span class=&quot;hljs-selector-class&quot;&gt;.dom&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.classes&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(element, var_args)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One option for selecting the element is using &lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;goog.dom.query&lt;/a&gt; with a CSS&amp;nbsp;3 selector:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myElement = goog.dom.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#MyElement&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A couple of minor notes and tweaks on the previous regexes:&lt;/p&gt;\n\n&lt;p&gt;You&apos;ll want to do it globally in case the class list has the class name more than once. And, you&apos;ll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.&lt;/p&gt;\n\n&lt;p&gt;This regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn&apos;t care about case in class names.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;testing   one   four  one  two&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cls = &lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rg          = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(^|\\\\s+)&quot;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&quot;(\\\\s+|$)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ig&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(rg, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cls = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rg          = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(^|\\\\s+)&quot;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&quot;(\\\\s+|$)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ig&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(rg, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cls = &lt;span class=&quot;hljs-string&quot;&gt;&quot;testing&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rg          = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(^|\\\\s+)&quot;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&quot;(\\\\s+|$)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ig&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(rg, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cls = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tWo&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rg          = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(^|\\\\s+)&quot;&lt;/span&gt; + cls + &lt;span class=&quot;hljs-string&quot;&gt;&quot;(\\\\s+|$)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ig&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(rg, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Change an element&apos;s CSS class with JavaScript in &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot; rel=&quot;noreferrer&quot;&gt;ASP.NET&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Page_Load(&lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; sender &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; System.EventArgs) &lt;span class=&quot;hljs-keyword&quot;&gt;Handles&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Me&lt;/span&gt;.Load\n    &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Not&lt;/span&gt; Page.IsPostBack &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n        lbSave.Attributes.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onmouseover&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;this.className = &apos;LinkButtonStyle1&apos;&quot;&lt;/span&gt;)\n        lbSave.Attributes.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onmouseout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;this.className = &apos;LinkButtonStyle&apos;&quot;&lt;/span&gt;)\n        lbCancel.Attributes.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onmouseover&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;this.className = &apos;LinkButtonStyle1&apos;&quot;&lt;/span&gt;)\n        lbCancel.Attributes.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onmouseout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;this.className = &apos;LinkButtonStyle&apos;&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would use jQuery and write something like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;$&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#some-element&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked&quot;&lt;/span&gt;);\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code adds a function to be called when an element of the id &lt;strong&gt;some-element&lt;/strong&gt; is clicked. The function appends &lt;strong&gt;clicked&lt;/strong&gt; to the element&apos;s class attribute if it&apos;s not already part of it, and removes it if it&apos;s there.&lt;/p&gt;\n&lt;p&gt;Yes, you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.&lt;/p&gt;\n    ","\n&lt;p&gt;The line&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).className = document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).className.replace(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bMyClass\\b/&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;)\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;should be:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/\\bMyClass\\b/&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Change an element&apos;s class in vanilla JavaScript with Internet Explorer 6 support&lt;/h1&gt;\n&lt;p&gt;You may try to use the node &lt;code&gt;attributes&lt;/code&gt; property to keep compatibility with old browsers, even Internet Explorer 6:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getClassNode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = element.&lt;span class=&quot;hljs-property&quot;&gt;attributes&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i--;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element.&lt;span class=&quot;hljs-property&quot;&gt;attributes&lt;/span&gt;[i].&lt;span class=&quot;hljs-property&quot;&gt;nodeName&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;attributes&lt;/span&gt;[i];\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;classNode, className&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index, classList = classNode.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index = classList.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(className)) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    classList.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(index, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    classNode.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = classList.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;classNode, className&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; classNode.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(className) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;classNode, className&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(classNode, className))\n    classNode.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + className;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;message&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; classNode = &lt;span class=&quot;hljs-title function_&quot;&gt;getClassNode&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; className = &lt;span class=&quot;hljs-title function_&quot;&gt;hasClass&lt;/span&gt;(classNode, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt; || &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(classNode, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt;(classNode, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(classNode, className);\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.red&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.red&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;I am red! &apos;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.red&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos; again&apos;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.blue&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.blue&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;I am blue! &apos;&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my version, fully working:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addHTMLClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, classname&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = item\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; item==&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;) {\n        obj = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(item)\n    }\n    obj.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + classname\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeHTMLClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, classname&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = item\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; item==&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;) {\n        obj = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(item)\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; classes = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;+obj.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (classes.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(classname)&amp;gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        classes = classes.&lt;span class=&quot;hljs-property&quot;&gt;replace&lt;/span&gt; (classname, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n    }\n    obj.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = classes\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;&amp;lt;tr onmouseover=&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;addHTMLClass&lt;/span&gt;(this,&lt;span class=&quot;hljs-string&quot;&gt;&quot;clsSelected&quot;&lt;/span&gt;)&apos;\nonmouseout=&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;removeHTMLClass&lt;/span&gt;(this,&lt;span class=&quot;hljs-string&quot;&gt;&quot;clsSelected&quot;&lt;/span&gt;)&apos; &amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a toggleClass to toggle/add/remove a class on an element:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If newState is provided add/remove theClass accordingly, otherwise toggle theClass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem, theClass, newState&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matchRegExp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(?:^|\\\\s)&apos;&lt;/span&gt; + theClass + &lt;span class=&quot;hljs-string&quot;&gt;&apos;(?!\\\\S)&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ? newState : (elem.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(matchRegExp) == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;));\n\n    elem.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;=elem.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(matchRegExp, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// clear all&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (add) elem.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + theClass;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://jsfiddle.net/dLuhp9se/&quot; rel=&quot;nofollow noreferrer&quot;&gt;the JSFiddle&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Also see my answer &lt;a href=&quot;https://stackoverflow.com/a/42941303/460084&quot;&gt;here&lt;/a&gt; for creating a new class dynamically.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the following vanilla JavaScript functions in my code. They use regular expressions and &lt;code&gt;indexOf&lt;/code&gt; but do not require quoting special characters in regular expressions.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el, cn&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c0 = (&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;),\n        c1 = (&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + cn + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c0.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(c1) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = (c0 + c1).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^ | $/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el, cn&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c0 = (&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;),\n        c1 = (&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + cn + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c0.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(c1) &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = c0.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(c1, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^ | $/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.classList&quot; rel=&quot;noreferrer&quot;&gt;element.classList&lt;/a&gt; in modern browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;The OP question was &lt;em&gt;How can I change an element&apos;s class with JavaScript?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Modern browsers allow you to do this &lt;strong&gt;with one line of JavaScript&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;document.getElementById(&apos;id&apos;).classList.replace(&apos;span1&apos;, &apos;span2&apos;)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;classList&lt;/code&gt; attribute provides a DOMTokenList which has a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList&quot; rel=&quot;nofollow noreferrer&quot;&gt;variety of methods&lt;/a&gt;. You can operate on an element&apos;s classList using simple manipulations like &lt;em&gt;add()&lt;/em&gt;, &lt;em&gt;remove()&lt;/em&gt; or &lt;em&gt;replace()&lt;/em&gt;. Or get very sophisticated and manipulate classes like you would an object or Map with &lt;em&gt;keys()&lt;/em&gt;, &lt;em&gt;values()&lt;/em&gt;, and &lt;em&gt;entries()&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/195951/how-can-i-change-an-elements-class-with-javascript/196038#196038&quot;&gt;Peter Boughton&apos;s answer&lt;/a&gt; is a great one, but it&apos;s now over a decade old. All modern browsers now support DOMTokenList - see &lt;a href=&quot;https://caniuse.com/#search=classList&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://caniuse.com/#search=classList&lt;/a&gt; and even &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_11#Internet_Explorer_11&quot; rel=&quot;nofollow noreferrer&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;11&lt;/a&gt; supports some DOMTokenList methods.&lt;/p&gt;\n    ","\n&lt;hr&gt;\n&lt;h1&gt;THE OPTIONS.&lt;/h1&gt;\n&lt;p&gt;Here is a little style vs. classList examples to get you to see what are the options you have available and how to use &lt;code&gt;classList&lt;/code&gt; to do what you want.&lt;/p&gt;\n&lt;h1&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; vs. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;classList&lt;/code&gt;&lt;/a&gt;&lt;/h1&gt;\n&lt;p&gt;The difference between &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;classList&lt;/code&gt; is that with &lt;code&gt;style&lt;/code&gt; you&apos;re adding to the style properties of the element, but &lt;code&gt;classList&lt;/code&gt; is kinda controlling the class(es) of the element (&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;toggle&lt;/code&gt;, &lt;code&gt;contain&lt;/code&gt;), I will show you how to use the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; method since those are the popular ones.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Style Example&lt;/h2&gt;\n&lt;p&gt;If you want to add &lt;code&gt;margin-top &lt;/code&gt; property into an element, you would do in such:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get the Element&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; el = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#element&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Add CSS property &lt;/span&gt;\nel.style.margintop = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0px&quot;&lt;/span&gt;\nel.style.margintop = &lt;span class=&quot;hljs-string&quot;&gt;&quot;25px&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// This would add a 25px to the top of the element.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;classList Example&lt;/h2&gt;\n&lt;p&gt;Let say we have a &lt;code&gt;&amp;lt;div class=&quot;class-a class-b&quot;&amp;gt;&lt;/code&gt;, in this case, we have 2 classes added to our div element already, &lt;code&gt;class-a&lt;/code&gt; and &lt;code&gt;class-b&lt;/code&gt;, and we want to control what classes &lt;strong&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/strong&gt; and what class to &lt;strong&gt;&lt;code&gt;add&lt;/code&gt;&lt;/strong&gt;. This is where &lt;code&gt;classList&lt;/code&gt; becomes handy.&lt;/p&gt;\n&lt;h3&gt;Remove &lt;code&gt;class-b&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get the Element&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; el = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#element&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Remove class-b style from the element&lt;/span&gt;\nel.classList.remove(&lt;span class=&quot;hljs-string&quot;&gt;&quot;class-b&quot;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Add &lt;code&gt;class-c&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get the Element&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; el = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#element&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Add class-b style from the element&lt;/span&gt;\nel.classList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;class-c&quot;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;element.className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;box&lt;/span&gt;) { box.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.first&lt;/span&gt;  { &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:  &lt;span class=&quot;hljs-number&quot;&gt;70px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:  &lt;span class=&quot;hljs-number&quot;&gt;70px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ff0&lt;/span&gt;                 }\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.second&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#f00&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;transition&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1s&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;change(this)&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For IE v6-9 (in which &lt;code&gt;classList&lt;/code&gt; is not supported and you don&apos;t want to use polyfills):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elem = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;some-id&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// don&apos;t forget the extra space before the class name&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; classList = elem.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos; other-class-name&apos;&lt;/span&gt;;\n\nelem.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;, classList);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;OK, I think in this case you should use jQuery or write your own Methods in pure JavaScript. My preference is adding my own methods rather than injecting all jQuery to my application if I don&apos;t need that for other reasons.&lt;/p&gt;\n&lt;p&gt;I&apos;d like to do something like below as methods to my JavaScript framework to add few functionalities which handle adding classes, deleting classes, etc. Similar to jQuery, this is fully supported in IE9+. Also my code is written in ES6, so you need to make sure your browser support it or you using something like &lt;a href=&quot;https://en.wikipedia.org/wiki/Babel_(transcompiler)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Babel&lt;/a&gt;, otherwise need to use ES5 syntax in your code. Also in this way, we finding element via ID, which means the element needs to have an ID to be selected:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Simple JavaScript utilities for class management in ES6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; classUtil = {\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;addClass&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id, cl&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(id).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(cl);\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;removeClass&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id, cl&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(id).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(cl);\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;hasClass&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id, cl&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(id).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(cl);\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;toggleClass&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id, cl&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(id).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt;(cl);\n  }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you can simply use them as below. Imagine your element has id of &apos;id&apos; and class of &apos;class&apos;. Make sure you pass them as a string. You can use the utility as below:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;classUtil.addClass(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myId&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;myClass&apos;&lt;/span&gt;);\nclassUtil.removeClass(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myId&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;myClass&apos;&lt;/span&gt;);\nclassUtil.hasClass(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myId&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;myClass&apos;&lt;/span&gt;);\nclassUtil.toggleClass(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myId&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;myClass&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;&lt;code&gt;classList&lt;/code&gt; DOM API:&lt;/h2&gt;\n&lt;p&gt;A very convenient manner of adding and removing classes is the &lt;code&gt;classList&lt;/code&gt; DOM API. This API allows us to select all classes of a specific DOM element in order to modify the list using JavaScript. For example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; el = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(el.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content wrapper animated&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;We can observe in the log that we are getting back an object with not only the classes of the element, but also many auxiliary methods and properties. This object inherits from the interface &lt;strong&gt;DOMTokenList&lt;/strong&gt;, an interface which is used in the DOM to represent a set of space separated tokens (like classes).&lt;/p&gt;\n&lt;h2&gt;Example:&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; el = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;container&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt; () {\n    el.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;newclass&apos;&lt;/span&gt;);\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceClass&lt;/span&gt; () {\n    el.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;newFoo&apos;&lt;/span&gt;);\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClass&lt;/span&gt; () {\n    el.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;button&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.foo&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.newFoo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.bar&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: powderblue;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.newclass&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt; solid green;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &quot;Sed ut perspiciatis unde omnis\n  iste natus error sit voluptatem accusantium doloremque laudantium,\n  totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et\n  quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n  voluptatem quia voluptas\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;addClass()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;AddClass&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;replaceClass()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;ReplaceClass&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;removeClass()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;removeClass&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, there are many ways to do this. In ES6 syntax we can achieve easily. Use this code toggle add and remove class.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; tabs=&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.menu li&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; tab &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; tabs){\n\n  tab.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; activetab = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;li.active&apos;&lt;/span&gt;);\n\n    activetab[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;active&apos;&lt;/span&gt;)\n\n    tab.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;active&apos;&lt;/span&gt;);\n  }\n\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: sans-serif;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#dfdfdf&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#2794c7&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ffffff&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;Please click an item:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Three&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Two&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;One&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just thought I&apos;d throw this in:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val, ary&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,l=ary.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;l; i++){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(ary[i] === val){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeClassName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;classNameS, fromElement&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = classNameS.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s/&lt;/span&gt;), s = fromElement.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s/&lt;/span&gt;), r = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,l=s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;l; i++){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-title function_&quot;&gt;iA&lt;/span&gt;(s[i], x))r.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(s[i]);\n  }\n  fromElement.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = r.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addClassName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;classNameS, toElement&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = toElement.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\s/&lt;/span&gt;);\n  s.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(c); toElement.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = s.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use &lt;code&gt;myElement.classList=&quot;new-class&quot;&lt;/code&gt; unless you need to maintain other existing classes in which case you can use the &lt;code&gt;classList.add, .remove&lt;/code&gt; methods.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; doc = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; divOne = doc.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; goButton = doc.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;go&quot;&lt;/span&gt;);\n\ngoButton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  divOne.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;;\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;48px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;48px&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.bordered&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid black;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.green&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: green;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.blue&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;go&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Change Class&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bordered green&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;).classList.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;);\ndocument.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;).classList.&lt;span class=&quot;hljs-keyword&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;class&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;That&apos;s it.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;And, if you really want to know the why and educate yourself then I suggest reading &lt;a href=&quot;https://stackoverflow.com/a/196038/1804013&quot;&gt;Peter Boughton&apos;s answer&lt;/a&gt;. It&apos;s perfect.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;This is possible with (&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot; rel=&quot;nofollow noreferrer&quot;&gt;document&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/target&quot; rel=&quot;nofollow noreferrer&quot;&gt;event&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;getElementById()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;getElementsByClassName()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;classed&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el, class_name, add_class&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:^|\\\\s)&quot;&lt;/span&gt; + class_name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;(?!\\\\S)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (add_class &amp;amp;&amp;amp; !el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(re)) el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + class_name\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!add_class) el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = el.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;a href=&quot;https://stackoverflow.com/questions/195951/how-can-i-change-an-elements-class-with-javascript/196038#196038&quot;&gt;Peter Boughton&apos;s answer&lt;/a&gt;, here is a simple cross-browser function to add and remove class.&lt;/p&gt;\n&lt;p&gt;Add class:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;classed&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;denis&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;active&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Remove class:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;classed&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;denis&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;active&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a property, &lt;strong&gt;className&lt;/strong&gt;, in JavaScript to change the name of the class of an HTML element. The existing class value will be replaced with the new one, that you have assigned in className.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;How can I change the class of an HTML element in JavaScript?&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;align&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;fa fa-home&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;icon&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;change-class&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Change Class&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; change_class = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change-class&quot;&lt;/span&gt;);\nchange_class.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; icon=&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;icon&quot;&lt;/span&gt;);\n    icon.&lt;span class=&quot;hljs-property&quot;&gt;className&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;fa fa-gear&quot;&lt;/span&gt;;\n}\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Credit - &lt;em&gt;&lt;a href=&quot;https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How To Change Class Name of an HTML Element in JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    "],"343":["\n&lt;p&gt;Yes - take a copy of the variable inside the loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; copy = variable;\n    actions.Add(() =&amp;gt; copy * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++ variable;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can think of it as if the C# compiler creates a &quot;new&quot; local variable every time it hits the variable declaration. In fact it&apos;ll create appropriate new closure objects, and it gets complicated (in terms of implementation) if you refer to variables in multiple scopes, but it works :)&lt;/p&gt;\n\n&lt;p&gt;Note that a more common occurrence of this problem is using &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) &lt;span class=&quot;hljs-comment&quot;&gt;// Just one variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; foo) &lt;span class=&quot;hljs-comment&quot;&gt;// And again, despite how it reads out loud&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See section 7.14.4.2 of the C# 3.0 spec for more details of this, and my &lt;a href=&quot;http://csharpindepth.com/Articles/Chapter5/Closures.aspx&quot; rel=&quot;noreferrer&quot;&gt;article on closures&lt;/a&gt; has more examples too.&lt;/p&gt;\n\n&lt;p&gt;Note that as of the C# 5 compiler and beyond (even when specifying an earlier version of C#), the behavior of &lt;code&gt;foreach&lt;/code&gt; changed so you no longer need to make local copy. See &lt;a href=&quot;https://stackoverflow.com/questions/8898925/is-there-a-reason-for-cs-reuse-of-the-variable-in-a-foreach/8899347#8899347&quot;&gt;this answer&lt;/a&gt; for more details.&lt;/p&gt;\n    ","\n&lt;p&gt;I believe what you are experiencing is something known as Closure &lt;a href=&quot;http://en.wikipedia.org/wiki/Closure_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;http://en.wikipedia.org/wiki/Closure_(computer_science)&lt;/a&gt;. Your lamba has a reference to a variable which is scoped outside the function itself. Your lamba is not interpreted until you invoke it and once it is it will get the value the variable has at execution time.&lt;/p&gt;\n    ","\n&lt;p&gt;Behind the scenes, the compiler is generating a class that represents the closure for your method call. It uses that single instance of the closure class for each iteration of the loop. The code looks something like this, which makes it easier to see why the bug happens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;()&lt;/span&gt;\n{\n    List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; closure = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CompilerGeneratedClosure();\n\n    Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; anonymousMethodAction = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (closure.variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(anonymousMethodAction == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            anonymousMethodAction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;(closure.YourAnonymousMethod);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//we&apos;re re-adding the same function &lt;/span&gt;\n        actions.Add(anonymousMethodAction);\n\n        ++closure.variable;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n    {\n        Console.WriteLine(act.Invoke());\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CompilerGeneratedClosure&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;YourAnonymousMethod&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.variable * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This isn&apos;t actually the compiled code from your sample, but I&apos;ve examined my own code and this looks very much like what the compiler would actually generate.&lt;/p&gt;\n    ","\n&lt;p&gt;The way around this is to store the value you need in a proxy variable, and have that variable get captured.&lt;/p&gt;\n\n&lt;p&gt;I.E.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; )\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; copy = variable;\n    actions.Add( () =&amp;gt; copy * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; );\n    ++variable;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;This has nothing to do with loops. &lt;/h1&gt;\n\n&lt;p&gt;This behavior is triggered because you use a lambda expression &lt;code&gt;() =&amp;gt; variable * 2&lt;/code&gt; where the outer scoped &lt;code&gt;variable&lt;/code&gt; not actually defined in the lambda&apos;s inner scope. &lt;/p&gt;\n\n&lt;p&gt;Lambda expressions (in C#3+, as well as anonymous methods in C#2) still create actual methods. Passing variables to these methods involve some dilemmas (pass by value? pass by reference? C# goes with by reference - but this opens another problem where the reference can outlive the actual variable). What C# does to resolve all these dilemmas is to create a new helper class (&quot;closure&quot;) with fields corresponding to the local variables used in the lambda expressions, and methods corresponding to the actual lambda methods. Any changes to &lt;code&gt;variable&lt;/code&gt; in your code is actually translated to change in that &lt;code&gt;ClosureClass.variable&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;So your while loop keeps updating the &lt;code&gt;ClosureClass.variable&lt;/code&gt; until it reaches 10, then you for loops executes the actions, which all operate on the same &lt;code&gt;ClosureClass.variable&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;To get your expected result, you need to create a separation between the loop variable, and the variable that is being closured. You can do this by introducing another variable, i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = variable; &lt;span class=&quot;hljs-comment&quot;&gt;// now t will be closured (i.e. replaced by a field in the new class)&lt;/span&gt;\n    actions.Add(() =&amp;gt; t * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++variable; &lt;span class=&quot;hljs-comment&quot;&gt;// changing variable won&apos;t affect the closured variable t&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could also move the closure to another method to create this separation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    actions.Add(Mult(variable));\n    ++variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can implement Mult as a lambda expression (implicit closure) &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Mult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or with an actual helper class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Helper&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; _i;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Helper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;\n    {\n        _i = i;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Method&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Mult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;\n{\n    Helper help = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Helper(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; help.Method;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In any case, &lt;strong&gt;&quot;Closures&quot; are NOT a concept related to loops&lt;/strong&gt;, but rather to anonymous methods / lambda expressions use of local scoped variables - although some incautious use of loops demonstrate closures traps.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes you need to scope &lt;code&gt;variable&lt;/code&gt; within the loop and pass it to the lambda that way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable1 = variable;\n    actions.Add(() =&amp;gt; variable1 * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n\nConsole.ReadLine();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The same situation is happening in multi-threading (C#, &lt;a href=&quot;http://en.wikipedia.org/wiki/.NET_Framework&quot; rel=&quot;nofollow&quot;&gt;.NET&lt;/a&gt; 4.0].&lt;/p&gt;\n\n&lt;p&gt;See the following code:&lt;/p&gt;\n\n&lt;p&gt;Purpose is to print 1,2,3,4,5 in order.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; counter &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; counter++)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread (() =&amp;gt; Console.Write (counter)).Start();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is interesting! (It might be like 21334...)&lt;/p&gt;\n\n&lt;p&gt;The only solution is to use local variables.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; counter &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; counter++)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; localVar= counter;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread (() =&amp;gt; Console.Write (localVar)).Start();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; n++) &lt;span class=&quot;hljs-comment&quot;&gt;//forloop syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; foo) &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; syntax\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is called the closure problem,\nsimply use a copy variable, and it&apos;s done.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = variable;\n    actions.Add(() =&amp;gt; i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++ variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since no one here directly quoted &lt;a href=&quot;https://ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMA-334&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;10.4.4.10 For statements &lt;/p&gt;\n  \n  &lt;p&gt;Definite assignment checking for a for-statement of the form:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-initializer; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-condition; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-iterator) embedded-statement\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;is done as if the statement were written:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-initializer;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-condition) {\n        embedded-statement;\n    LLoop: &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-iterator;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Further on in the spec,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;12.16.6.3 Instantiation of local variables&lt;/p&gt;\n  \n  &lt;p&gt;A local variable is considered to be instantiated when execution enters the scope of the variable. &lt;/p&gt;\n  \n  &lt;p&gt;[Example: For example, when the following method is invoked, the local variable &lt;code&gt;x&lt;/code&gt; is instantiated and initialized three timesonce for each iteration of the loop.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    ...\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;However, moving the declaration of &lt;code&gt;x&lt;/code&gt; outside the loop results in a single instantiation of &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    ...\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;end example]&lt;/p&gt;\n  \n  &lt;p&gt;When not captured, there is no way to observe exactly how often a local variable is instantiatedbecause the lifetimes of the instantiations are disjoint, it is possible for each instantation to simply use the same storage location. However, when an anonymous function captures a local variable, the effects of instantiation become apparent.&lt;/p&gt;\n  \n  &lt;p&gt;[Example: The example &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;D&lt;/span&gt;()&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Test&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; D[] &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n    D[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; D[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n      result[i] = () =&amp;gt; { Console.WriteLine(x); };\n    }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n  }\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;D d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()) &lt;span class=&quot;hljs-title&quot;&gt;d&lt;/span&gt;()&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;produces the output:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;However, when the declaration of &lt;code&gt;x&lt;/code&gt; is moved outside the loop:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; D[] &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  D[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; D[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n  &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    result[i] = () =&amp;gt; { Console.WriteLine(x); };\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;the output is:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Note that the compiler is permitted (but not required) to optimize the three instantiations into a single delegate instance (§11.7.2).&lt;/p&gt;\n  \n  &lt;p&gt;If a for-loop declares an iteration variable, that variable itself is considered to be declared outside of the loop. \n  [Example: Thus, if the example is changed to capture the iteration variable itself:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; D[] &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  D[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; D[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    result[i] = () =&amp;gt; { Console.WriteLine(i); };\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;only one instance of the iteration variable is captured, which produces the output:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;end example]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Oh yea, I guess it should be mentioned that in C++ this problem doesn&apos;t occur because you can choose if the variable is captured by value or by reference (see: &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/lambda#Lambda_capture&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lambda capture&lt;/a&gt;).&lt;/p&gt;\n    "],"344":["\n&lt;p&gt;This is a trick,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;openInNewTab&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;focus&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//or just&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;focus&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In most cases, this should happen directly in the &lt;code&gt;onclick&lt;/code&gt; handler for the link to prevent pop-up blockers, and the default &quot;new window&quot; behavior. You could do it this way, or by adding an event listener to your &lt;code&gt;DOM&lt;/code&gt; object.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;openInNewTab(&apos;www.test.com&apos;);&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Something&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;On&lt;/span&gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.tutsplanet.com/open-url-new-tab-using-javascript/&quot; rel=&quot;noreferrer&quot;&gt;http://www.tutsplanet.com/open-url-new-tab-using-javascript/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Nothing an author can do can choose to open in a new tab instead of a new window; it is a &lt;em&gt;user preference&lt;/em&gt;. (Note that the default user preference in most browsers is for new tabs, so a trivial test on a browser where that preference hasn&apos;t been changed will not demonstrate this.)&lt;/p&gt;\n&lt;p&gt;CSS3 proposed &lt;a href=&quot;https://www.w3.org/TR/2004/WD-css3-hyperlinks-20040224/#target-new&quot; rel=&quot;noreferrer&quot;&gt;target-new&lt;/a&gt;, but &lt;a href=&quot;https://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/&quot; rel=&quot;noreferrer&quot;&gt;the specification was abandoned&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/64718494/19068&quot;&gt;The &lt;strong&gt;reverse&lt;/strong&gt; is not true&lt;/a&gt;; by specifying certain window features for the window in the third argument of &lt;code&gt;window.open()&lt;/code&gt;, you can trigger a new window when the preference is for tabs.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;window.open()&lt;/code&gt; will not open in a new tab if it is not happening on the actual click event. In the example given the URL is being opened on the actual click event. &lt;strong&gt;This will work provided the user has appropriate settings in the browser&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Link&lt;/span&gt;&amp;lt;/a&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n     $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a.link&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n         &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;www.yourdomain.com&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n     });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similarly, if you are trying to do an Ajax call within the click function and want to open a window on success, ensure you are doing the Ajax call with the &lt;code&gt;async : false&lt;/code&gt; option set.&lt;/p&gt;\n    ","\n&lt;p&gt;This creates a virtual &lt;code&gt;a&lt;/code&gt; element, gives it &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; so it opens in a new tab, gives it the proper url &lt;code&gt;href&lt;/code&gt; and then clicks it.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;openInNewTab&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;href&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;), {\n    &lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;noopener noreferrer&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;: href,\n  }).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and then you can use it like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;openInNewTab&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://google.com&quot;&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;Important note:&lt;/h4&gt;\n&lt;p&gt;This must be called during the so-called &apos;trusted event&apos; callback - eg. &lt;strong&gt;during&lt;/strong&gt; click event (not necessary in callback function directly, but during click action). Otherwise opening a new page will be blocked by the browser&lt;/p&gt;\n&lt;p&gt;If you call it manually at some random moment (e.g., inside an interval or after server response) - it might be blocked by the browser (which makes sense as it&apos;d be a security risk and might lead to poor user experience)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Browsers have different behaviors for how they handle &lt;code&gt;window.open&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You cannot expect the behavior to be the same across all browsers.  &lt;code&gt;window.open&lt;/code&gt; doesn&apos;t reliably open pop-ups on a new tab across browsers, and it also depends on the user&apos;s preferences.&lt;/p&gt;\n&lt;p&gt;On &lt;strong&gt;Internet Explorer&lt;/strong&gt; (11), for example, users can choose to open popups in a new window or a new tab, you cannot force Internet Explorer 11 to open popups in a certain way through &lt;code&gt;window.open&lt;/code&gt;, as alluded to in &lt;a href=&quot;https://stackoverflow.com/a/4907854/456814&quot;&gt;Quentin&apos;s answer&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;As for &lt;strong&gt;Firefox&lt;/strong&gt; (29), the behavior for &lt;code&gt;window.open(url, &apos;_blank&apos;)&lt;/code&gt; &lt;strong&gt;depends on the browser&apos;s tab preferences,&lt;/strong&gt; though you can still force it to open urls in a popup window by specifying a width and height (see the &quot;Chrome&quot; section below).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Internet Explorer (11)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You can set Internet Explorer to open pop-ups in a new window:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/IYWRUm.png&quot; alt=&quot;Internet&amp;nbsp;Explorer settings dialog 1&quot;&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/8j8Yum.png&quot; alt=&quot;Internet&amp;nbsp;Explorer tab settings dialog&quot;&gt;&lt;/p&gt;\n&lt;p&gt;After doing that, try running &lt;code&gt;window.open(url)&lt;/code&gt; and &lt;code&gt;window.open(url, &apos;_blank&apos;)&lt;/code&gt;.\nObserve that the pages open &lt;em&gt;in a new window, not a new tab.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Firefox (29)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You can also set the tab preference to open new windows, and see the same results.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It looks like Chrome (version 34) does not have any settings for choosing to open popups in a new window or a new tab. Although, some ways to do it (editing the registry) are discussed &lt;a href=&quot;https://superuser.com/questions/166479/force-chrome-to-open-new-pages-in-new-window-not-tab-when-opened-from-a-progr&quot;&gt;in this question&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;In Chrome and Firefox, &lt;strong&gt;specifying a width and height will force a popup&lt;/strong&gt; (as mentioned in the answers &lt;a href=&quot;https://stackoverflow.com/q/726761/456814&quot;&gt;here&lt;/a&gt;), even when a user has set Firefox to open new windows in a new tab&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url = &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://stackoverflow.com&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;width=400, height=400&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, in &lt;strong&gt;Internet Explorer 11&lt;/strong&gt; the same code will always open a link in a new tab if &lt;em&gt;tabs&lt;/em&gt; is chosen in the browser preferences, specifying a width and height will &lt;em&gt;not&lt;/em&gt; force a new window popup.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In Chrome&lt;/strong&gt;, it seems &lt;code&gt;window.open&lt;/code&gt; opens a new tab when it is used in an &lt;code&gt;onclick&lt;/code&gt; event, and a new window when it is used from the browser console (&lt;a href=&quot;https://stackoverflow.com/questions/4907843/open-a-url-in-a-new-tab-using-javascript#comment22514382_13158856&quot;&gt;as noted by other people&lt;/a&gt;), and pop-ups open when a width and height are specified.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Additional Reading: &lt;code&gt;window.open&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window.open&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you use &lt;code&gt;window.open(url, &apos;_blank&apos;)&lt;/code&gt;, it will be blocked (popup blocker) on Chrome.&lt;/p&gt;\n\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//With JQuery&lt;/span&gt;\n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#myButton&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; redirectWindow = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://google.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n    redirectWindow.&lt;span class=&quot;hljs-property&quot;&gt;location&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With pure JavaScript,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#myButton&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; redirectWindow = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://google.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n    redirectWindow.&lt;span class=&quot;hljs-property&quot;&gt;location&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I use the following and it works very well!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;focus&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To elaborate Steven Spielberg&apos;s answer, I did this in such a case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, just before the browser will follow the link I&apos;m setting the target attribute, so it will make the link open in a new tab or window (&lt;strong&gt;depends on user&apos;s settings&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;p&gt;One line example in jQuery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// The `.get(0)` must be there to return the actual DOM element.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Doing `.click()` on the jQuery object for it did not work.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can also be accomplished just using native browser DOM APIs as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think that you can&apos;t control this. If the user had setup their browser to open links in a new window, you can&apos;t force this to open links in a new tab.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/726761/javascript-open-in-a-new-window-not-tab&quot;&gt;JavaScript open in a new window, not tab&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;An interesting fact is that the new tab can not be opened if the action is not invoked by the user (clicking a button or something) or if it is asynchronous, for example, this will NOT open in new tab:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;url&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);              \n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this may open in a new tab, depending on browser settings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;url&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);              \n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Whether to open the URL in a new tab or a new window, is actually controlled by the user&apos;s browser preferences. There is no way to override it in JavaScript.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;window.open()&lt;/code&gt; behaves differently depending on how it is being used. If it is &lt;strong&gt;called as a direct result of a user action&lt;/strong&gt;, let us say a button click, it should work fine and open a new tab (or window):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; button = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#openTab&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// add click event listener&lt;/span&gt;\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// open a new tab&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; tab = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://attacomsian.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, if you try to &lt;strong&gt;open a new tab from an AJAX request callback&lt;/strong&gt;, the browser will block it as it was not a direct user action.&lt;/p&gt;\n&lt;p&gt;To &lt;strong&gt;bypass the popup blocker&lt;/strong&gt; and open a new tab from a callback, here is a &lt;a href=&quot;https://attacomsian.com/blog/javascript-open-url-in-new-tab#asynchronous-http-request&quot; rel=&quot;noreferrer&quot;&gt;little hack&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; button = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#openTab&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// add click event listener&lt;/span&gt;\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// open an empty window&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; tab = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;about:blank&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// make an API call&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/api/validate&apos;&lt;/span&gt;)\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;TODO:&lt;/span&gt; do something with JSON response&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// update the actual URL&lt;/span&gt;\n            tab.&lt;span class=&quot;hljs-property&quot;&gt;location&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://attacomsian.com&apos;&lt;/span&gt;;\n            tab.&lt;span class=&quot;hljs-title function_&quot;&gt;focus&lt;/span&gt;();\n        })\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// close the empty window&lt;/span&gt;\n            tab.&lt;span class=&quot;hljs-title function_&quot;&gt;close&lt;/span&gt;();\n        });\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just omitting the &lt;code&gt;strWindowFeatures&lt;/code&gt; parameters will open a new tab, UNLESS the browser setting overrides it (browser settings trumps JavaScript).&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;New window&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myWin = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(strUrl, strWindowName, [strWindowFeatures]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;New tab&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myWin = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(strUrl, strWindowName);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;-- or --&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myWin = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(strUrl);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;openTab&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; link = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\n  link.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt; = url;\n  link.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(link);\n  link.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n  link.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(a);\na.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;href&apos;&lt;/span&gt;, location.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;);\na.&lt;span class=&quot;hljs-title function_&quot;&gt;dispatchEvent&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n    e.&lt;span class=&quot;hljs-title function_&quot;&gt;initMouseEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e\n}(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MouseEvents&apos;&lt;/span&gt;))))}(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;This has nothing to do with browser settings&lt;/strong&gt; if you are trying to open a new tab from a custom function.&lt;/p&gt;\n\n&lt;p&gt;In this page, open a JavaScript console and type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nav-questions&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;target&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nav-questions&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it will try to open a popup regardless of your settings, because the &apos;click&apos; comes from a custom action.&lt;/p&gt;\n\n&lt;p&gt;In order to behave like an actual &apos;mouse click&apos; on a link, you need to follow &lt;a href=&quot;https://stackoverflow.com/a/19464494/676002&quot;&gt;@spirinvladimir&apos;s advice&lt;/a&gt; and &lt;em&gt;really&lt;/em&gt; create it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nav-questions&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;target&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nav-questions&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;dispatchEvent&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n  e.&lt;span class=&quot;hljs-title function_&quot;&gt;initMouseEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e\n}(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MouseEvents&apos;&lt;/span&gt;))));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is a complete example (do not try it on &lt;a href=&quot;http://jsfiddle.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsFiddle&lt;/a&gt; or similar online editors, as it will not let you redirect to external pages from there):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;!&lt;span class=&quot;hljs-variable constant_&quot;&gt;DOCTYPE&lt;/span&gt; html&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n    &lt;span class=&quot;hljs-selector-id&quot;&gt;#firing_div&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15px&lt;/span&gt;;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;250px&lt;/span&gt;;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid blue;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n    }\n  &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_link&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; Go to Google &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;firing_div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; Click me to trigger custom click &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fire_custom_click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;firing click!&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_link&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;dispatchEvent&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n      e.&lt;span class=&quot;hljs-title function_&quot;&gt;initMouseEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;/* type, canBubble, cancelable, view */&lt;/span&gt;\n            &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,              &lt;span class=&quot;hljs-comment&quot;&gt;/* detail, screenX, screenY, clientX, clientY */&lt;/span&gt;\n            &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;/* ctrlKey, altKey, shiftKey, metaKey */&lt;/span&gt;\n            &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);                   &lt;span class=&quot;hljs-comment&quot;&gt;/* button, relatedTarget */&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e\n    }(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MouseEvents&apos;&lt;/span&gt;))));\n  }\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;firing_div&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = fire_custom_click;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a trick with &lt;code&gt;form&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#btn&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;openNewTab&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://stackoverflow.com&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    });\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;openNewTab&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;link&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; frm = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;form   method=&quot;get&quot; action=&quot;&apos;&lt;/span&gt; + link + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/form&amp;gt;&apos;&lt;/span&gt;)\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(frm);\n    frm.&lt;span class=&quot;hljs-title function_&quot;&gt;submit&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/b039wc1h/3/&quot; rel=&quot;noreferrer&quot;&gt;jsFiddle demo&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;JQuery&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;a /&amp;gt;&apos;&lt;/span&gt;,{&lt;span class=&quot;hljs-string&quot;&gt;&apos;href&apos;&lt;/span&gt;: url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;}).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JS&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;), { &lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;URL_HERE&apos;&lt;/span&gt;}).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Or you could just create a link element and click it...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; evLink = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nevLink.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;http://&apos;&lt;/span&gt; + strUrl;\nevLink.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(evLink);\nevLink.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now delete it&lt;/span&gt;\nevLink.&lt;span class=&quot;hljs-property&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeChild&lt;/span&gt;(evLink);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This shouldn&apos;t be blocked by any popup blockers... Hopefully.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Do not use target=&quot;_blank&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Always use specific name for that window  in my case &lt;code&gt;meaningfulName&lt;/code&gt;, in this case you save processor resource:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;button.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://google.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;meaningfulName&apos;&lt;/span&gt;)\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On this way when you click for example 10 times on button, browser will always re-render it in one new tab, instead of opening it in 10 different tabs which will consume much more resources.&lt;/p&gt;\n&lt;p&gt;You can read more about this on &lt;code&gt;MDN&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There is an answer to this question and it is not no.&lt;/p&gt;\n&lt;p&gt;I found an easy work around:&lt;/p&gt;\n&lt;p&gt;Step 1: Create an invisible link:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;a id=&quot;yourId&quot; href=&quot;yourlink.html&quot; target=&quot;_blank&quot; style=&quot;display: none;&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Step 2: Click on that link programmatically:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;document.getElementById(&quot;yourId&quot;).click();&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Here you go! Works a charm for me.&lt;/p&gt;\n    ","\n&lt;p&gt;To open a new tab and stay on the same location, you can open the current page in the new tab, and redirect the old tab to the new url.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newUrl = &lt;span class=&quot;hljs-string&quot;&gt;&apos;http://example.com&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; currentUrl = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;;    \n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(currentUrl , &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// open window with url of current page    &lt;/span&gt;\nlocation.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt; = newUrl; &lt;span class=&quot;hljs-comment&quot;&gt;// redirect the previous window to the new url&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You will be automatically moved by the browser to a new opened tab. It will look like your page is reloaded and you will stay on same page but on a new window&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/RCgV9.gif&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RCgV9.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;How about creating an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; with &lt;code&gt;_blank&lt;/code&gt; as &lt;code&gt;target&lt;/code&gt; attribute value and the &lt;code&gt;url&lt;/code&gt; as &lt;code&gt;href&lt;/code&gt;, with style display:hidden with a a children element? Then add to the DOM and then trigger the click event on a children element.&lt;/p&gt;\n\n&lt;h2&gt;UPDATE&lt;/h2&gt;\n\n&lt;p&gt;That doesn&apos;t work. The browser prevents the default behaviour. It could be triggered programmatically, but it doesn&apos;t follow the default behaviour.&lt;/p&gt;\n\n&lt;p&gt;Check and see for yourself: &lt;a href=&quot;http://jsfiddle.net/4S4ET/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://jsfiddle.net/4S4ET/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This might be a hack, but in Firefox if you specify a third parameter, &apos;fullscreen=yes&apos;, it opens a fresh new window.&lt;/p&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;window.open(&apos;MyPDF.pdf&apos;, &apos;_blank&apos;, &apos;fullscreen=yes&apos;); return false;&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;MyPDF&lt;/span&gt;&amp;lt;/a&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It seems to actually override the browser settings.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;window.open(url)&lt;/code&gt; will open url in new browser Tab. Belowe JS alternative to it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a= &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\na.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;;\na.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://support.wwf.org.uk/&apos;&lt;/span&gt;;\na.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// we don&apos;t need to remove &apos;a&apos; from DOM because we not add it&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;here is working &lt;a href=&quot;https://jsfiddle.net/Lamik/L4wax19t/&quot; rel=&quot;nofollow noreferrer&quot;&gt;example&lt;/a&gt; (stackoverflow snippets not allow to opening new tab)&lt;/p&gt;\n    ","\n&lt;p&gt;There are lots of answer copies suggesting using &quot;_blank&quot; as the target, however I found this didn&apos;t work. As Prakash notes, it is up to the browser. However, you can make certain suggestions to the browser, such as to whether the window should have a location bar.&lt;/p&gt;\n&lt;p&gt;If you suggest enough &lt;em&gt;&lt;strong&gt;&quot;tab-like things&quot;&lt;/strong&gt;&lt;/em&gt; you &lt;em&gt;&lt;strong&gt;might&lt;/strong&gt;&lt;/em&gt; get a tab, &lt;a href=&quot;https://stackoverflow.com/questions/15818892/chrome-javascript-window-open-in-new-tab&quot;&gt;as per Nico&apos;s answer to this more specific question for chrome&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://www.stackoverflow.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;toolbar=yes, location=yes, status=yes, menubar=yes, scrollbars=yes&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Disclaimer: This is not a panacea. It is still up to the user and browser. Now at least you&apos;ve specified one more preference for what you&apos;d like your window to look like.&lt;/p&gt;\n    ","\n&lt;p&gt;Opening a new tab from within a Firefox (Mozilla) extension goes like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;gBrowser.&lt;span class=&quot;hljs-property&quot;&gt;selectedTab&lt;/span&gt; = gBrowser.&lt;span class=&quot;hljs-title function_&quot;&gt;addTab&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://example.com&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This way is similar to the above solution but implemented differently  &lt;/p&gt;\n\n&lt;p&gt;.social_icon -&amp;gt; some class with CSS  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;social_icon&quot;&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;SOME_ID&quot;&lt;/span&gt; data-url=&lt;span class=&quot;hljs-string&quot;&gt;&quot;SOME_URL&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n\n\n $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.social_icon&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; url = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-url&apos;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; win = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;///similar to above solution&lt;/span&gt;\n        win.&lt;span class=&quot;hljs-title function_&quot;&gt;focus&lt;/span&gt;();\n   });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;this work for me, just prevent the event, add the url to an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;code&gt;tag&lt;/code&gt; then trigger the click event on that &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Js&lt;/span&gt;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.myBtn&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n        event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n        $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;href&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://someurl.com&quot;&lt;/span&gt;);\n        $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;trigger&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;);\n});\n&lt;span class=&quot;hljs-variable constant_&quot;&gt;HTML&lt;/span&gt;\n&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myBtn&quot;&lt;/span&gt; target=&lt;span class=&quot;hljs-string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Go&lt;/span&gt;&amp;lt;/a&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m going to agree somewhat with the person who wrote (paraphrased here): &quot;For a link in an existing web page, the browser will always open the link in a new tab if the new page is part of the same web site as the existing web page.&quot;  For me, at least, this &quot;general rule&quot; works in Chrome, Firefox, Opera, IE, Safari, SeaMonkey, and Konqueror.&lt;/p&gt;\n\n&lt;p&gt;Anyway, there is a less complicated way to take advantage of what the other person presented.  Assuming we are talking about your own web site (&quot;thissite.com&quot; below), where you want to control what the browser does, then, below, you want &quot;specialpage.htm&quot; to be EMPTY, no HTML at all in it (saves time sending data from the server!).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; wnd, &lt;span class=&quot;hljs-variable constant_&quot;&gt;URL&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//global variables&lt;/span&gt;\n\n &lt;span class=&quot;hljs-comment&quot;&gt;//specifying &quot;_blank&quot; in window.open() is SUPPOSED to keep the new page from replacing the existing page&lt;/span&gt;\n wnd = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.thissite.com/specialpage.htm&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//get reference to just-opened page&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;//if the &quot;general rule&quot; above is true, a new tab should have been opened.&lt;/span&gt;\n &lt;span class=&quot;hljs-variable constant_&quot;&gt;URL&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.someothersite.com/desiredpage.htm&quot;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//ultimate destination&lt;/span&gt;\n &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;gotoURL&lt;/span&gt;(),&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//wait 1/5 of a second; give browser time to create tab/window for empty page&lt;/span&gt;\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;gotoURL&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n { wnd.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;URL&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_self&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//replace the blank page, in the tab, with the desired page&lt;/span&gt;\n   wnd.&lt;span class=&quot;hljs-title function_&quot;&gt;focus&lt;/span&gt;();             &lt;span class=&quot;hljs-comment&quot;&gt;//when browser not set to automatically show newly-opened page, this MAY work&lt;/span&gt;\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you only want to open the external links (links that go to other sites) then this bit of JavaScript/jQuery works well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hostname = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;hostname&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;www.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; link_host = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hostname&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;www.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (link_host !== hostname) {\n            $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_blank&apos;&lt;/span&gt;);\n        }\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n    "],"345":["\n&lt;p&gt;I find it easiest to understand move semantics with example code. Let&apos;s start with a very simple string class which only holds a pointer to a heap-allocated block of memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;string&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* data;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* p)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size = std::&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(p) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[size];\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;memcpy&lt;/span&gt;(data, p, size);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since we chose to manage the memory ourselves, we need to follow the &lt;a href=&quot;http://en.wikipedia.org/wiki/Rule_of_three_%28C++_programming%29&quot; rel=&quot;noreferrer&quot;&gt;rule of three&lt;/a&gt;. I am going to defer writing the assignment operator and only implement the destructor and the copy constructor for now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    ~&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;()\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] data;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; that)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size = std::&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(that.data) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[size];\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;memcpy&lt;/span&gt;(data, that.data, size);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The copy constructor defines what it means to copy string objects. The parameter &lt;code&gt;const string&amp;amp; that&lt;/code&gt; binds to all expressions of type string which allows you to make copies in the following examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;;                                    &lt;span class=&quot;hljs-comment&quot;&gt;// Line 1&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x + y)&lt;/span&gt;&lt;/span&gt;;                                &lt;span class=&quot;hljs-comment&quot;&gt;// Line 2&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(some_function_returning_a_string())&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// Line 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now comes the key insight into move semantics. Note that only in the first line where we copy &lt;code&gt;x&lt;/code&gt; is this deep copy really necessary, because we might want to inspect &lt;code&gt;x&lt;/code&gt; later and would be very surprised if &lt;code&gt;x&lt;/code&gt; had changed somehow. Did you notice how I just said &lt;code&gt;x&lt;/code&gt; three times (four times if you include this sentence) and meant the &lt;em&gt;exact same object&lt;/em&gt; every time? We call expressions such as &lt;code&gt;x&lt;/code&gt; &quot;lvalues&quot;.&lt;/p&gt;\n\n&lt;p&gt;The arguments in lines 2 and 3 are not lvalues, but rvalues, because the underlying string objects have no names, so the client has no way to inspect them again at a later point in time.\nrvalues denote temporary objects which are destroyed at the next semicolon (to be more precise: at the end of the full-expression that lexically contains the rvalue). This is important because during the initialization of &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, we could do whatever we wanted with the source string, and &lt;em&gt;the client couldn&apos;t tell a difference&lt;/em&gt;!&lt;/p&gt;\n\n&lt;p&gt;C++0x introduces a new mechanism called &quot;rvalue reference&quot; which, among other things,\nallows us to detect rvalue arguments via function overloading. All we have to do is write a constructor with an rvalue reference parameter. Inside that constructor we can do &lt;em&gt;anything we want&lt;/em&gt; with the source, as long as we leave it in &lt;em&gt;some&lt;/em&gt; valid state:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(string&amp;amp;&amp;amp; that)   &lt;span class=&quot;hljs-comment&quot;&gt;// string&amp;amp;&amp;amp; is an rvalue reference to a string&lt;/span&gt;\n    {\n        data = that.data;\n        that.data = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What have we done here? Instead of deeply copying the heap data, we have just copied the pointer and then set the original pointer to null (to prevent &apos;delete[]&apos; from source object&apos;s destructor from releasing our &apos;just stolen data&apos;). In effect, we have &quot;stolen&quot; the data that originally belonged to the source string. Again, the key insight is that under no circumstance could the client detect that the source had been modified. Since we don&apos;t really do a copy here, we call this constructor a &quot;move constructor&quot;. Its job is to move resources from one object to another instead of copying them.&lt;/p&gt;\n\n&lt;p&gt;Congratulations, you now understand the basics of move semantics! Let&apos;s continue by implementing the assignment operator. If you&apos;re unfamiliar with the &lt;a href=&quot;https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom&quot;&gt;copy and swap idiom&lt;/a&gt;, learn it and come back, because it&apos;s an awesome C++ idiom related to exception safety.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    string&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(string that)\n    {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;swap&lt;/span&gt;(data, that.data);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Huh, that&apos;s it? &quot;Where&apos;s the rvalue reference?&quot; you might ask. &quot;We don&apos;t need it here!&quot; is my answer :)&lt;/p&gt;\n\n&lt;p&gt;Note that we pass the parameter &lt;code&gt;that&lt;/code&gt; &lt;em&gt;by value&lt;/em&gt;, so &lt;code&gt;that&lt;/code&gt; has to be initialized just like any other string object. Exactly how is &lt;code&gt;that&lt;/code&gt; going to be initialized? In the olden days of &lt;a href=&quot;http://en.wikipedia.org/wiki/C++#Standardization&quot; rel=&quot;noreferrer&quot;&gt;C++98&lt;/a&gt;, the answer would have been &quot;by the copy constructor&quot;. In C++0x, the compiler chooses between the copy constructor and the move constructor based on whether the argument to the assignment operator is an lvalue or an rvalue.&lt;/p&gt;\n\n&lt;p&gt;So if you say &lt;code&gt;a = b&lt;/code&gt;, the &lt;em&gt;copy constructor&lt;/em&gt; will initialize &lt;code&gt;that&lt;/code&gt; (because the expression &lt;code&gt;b&lt;/code&gt; is an lvalue), and the assignment operator swaps the contents with a freshly created, deep copy. That is the very definition of the copy and swap idiom -- make a copy, swap the contents with the copy, and then get rid of the copy by leaving the scope. Nothing new here.&lt;/p&gt;\n\n&lt;p&gt;But if you say &lt;code&gt;a = x + y&lt;/code&gt;, the &lt;em&gt;move constructor&lt;/em&gt; will initialize &lt;code&gt;that&lt;/code&gt; (because the expression &lt;code&gt;x + y&lt;/code&gt; is an rvalue), so there is no deep copy involved, only an efficient move.\n&lt;code&gt;that&lt;/code&gt; is still an independent object from the argument, but its construction was trivial,\nsince the heap data didn&apos;t have to be copied, just moved. It wasn&apos;t necessary to copy it because &lt;code&gt;x + y&lt;/code&gt; is an rvalue, and again, it is okay to move from string objects denoted by rvalues.&lt;/p&gt;\n\n&lt;p&gt;To summarize, the copy constructor makes a deep copy, because the source must remain untouched.\nThe move constructor, on the other hand, can just copy the pointer and then set the pointer in the source to null. It is okay to &quot;nullify&quot; the source object in this manner, because the client has no way of inspecting the object again.&lt;/p&gt;\n\n&lt;p&gt;I hope this example got the main point across. There is a lot more to rvalue references and move semantics which I intentionally left out to keep it simple. If you want more details please see &lt;a href=&quot;https://stackoverflow.com/a/11540204/179917&quot;&gt;my supplementary answer&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;My first answer was an extremely simplified introduction to move semantics, and many details were left out on purpose to keep it simple.\nHowever, there is a lot more to move semantics, and I thought it was time for a second answer to fill the gaps.\nThe first answer is already quite old, and it did not feel right to simply replace it with a completely different text. I think it still serves well as a first introduction. But if you want to dig deeper, read on :)&lt;/p&gt;\n\n&lt;p&gt;Stephan T. Lavavej took the time to provide valuable feedback. Thank you very much, Stephan!&lt;/p&gt;\n\n&lt;h2&gt;Introduction&lt;/h2&gt;\n\n&lt;p&gt;Move semantics allows an object, under certain conditions, to take ownership of some other object&apos;s external resources. This is important in two ways:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Turning expensive copies into cheap moves. See my first answer for an example. Note that if an object does not manage at least one external resource (either directly, or indirectly through its member objects), move semantics will not offer any advantages over copy semantics. In that case, copying an object and moving an object means the exact same thing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;cannot_benefit_from_move_semantics&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;        &lt;span class=&quot;hljs-comment&quot;&gt;// moving an int means copying an int&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; b;      &lt;span class=&quot;hljs-comment&quot;&gt;// moving a float means copying a float&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; c;     &lt;span class=&quot;hljs-comment&quot;&gt;// moving a double means copying a double&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; d[&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;// moving a char array means copying a char array&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Implementing safe &quot;move-only&quot; types; that is, types for which copying does not make sense, but moving does.  Examples include locks, file handles, and smart pointers with unique ownership semantics. Note: This answer discusses &lt;code&gt;std::auto_ptr&lt;/code&gt;, a deprecated C++98 standard library template, which was replaced by &lt;code&gt;std::unique_ptr&lt;/code&gt; in C++11. Intermediate C++ programmers are probably at least somewhat familiar with &lt;code&gt;std::auto_ptr&lt;/code&gt;, and because of the &quot;move semantics&quot; it displays, it seems like a good starting point for discussing move semantics in C++11. YMMV.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;What is a move?&lt;/h2&gt;\n\n&lt;p&gt;The C++98 standard library offers a smart pointer with unique ownership semantics called &lt;code&gt;std::auto_ptr&amp;lt;T&amp;gt;&lt;/code&gt;. In case you are unfamiliar with &lt;code&gt;auto_ptr&lt;/code&gt;, its purpose is to guarantee that a dynamically allocated object is always released, even in the face of exceptions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// arbitrary code, could throw exceptions&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}   &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- when a goes out of scope, the triangle is deleted automatically&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The unusual thing about &lt;code&gt;auto_ptr&lt;/code&gt; is its &quot;copying&quot; behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle)&lt;/span&gt;&lt;/span&gt;;\n\n      +---------------+\n      | triangle data |\n      +---------------+\n        ^\n        |\n        |\n        |\n  +-----|---+\n  |   +-|-+ |\na | p | | | |\n  |   +---+ |\n  +---------+\n\n&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;;\n\n      +---------------+\n      | triangle data |\n      +---------------+\n        ^\n        |\n        +----------------------+\n                               |\n  +---------+            +-----|---+\n  |   +---+ |            |   +-|-+ |\na | p |   | |          b | p | | | |\n  |   +---+ |            |   +---+ |\n  +---------+            +---------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note how the initialization of &lt;code&gt;b&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; copy the triangle, but instead transfers the ownership of the triangle from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;. We also say &quot;&lt;code&gt;a&lt;/code&gt; is &lt;em&gt;moved into&lt;/em&gt; &lt;code&gt;b&lt;/code&gt;&quot; or &quot;the triangle is &lt;em&gt;moved&lt;/em&gt; from &lt;code&gt;a&lt;/code&gt; &lt;em&gt;to&lt;/em&gt; &lt;code&gt;b&lt;/code&gt;&quot;. This may sound confusing because the triangle itself always stays at the same place in memory.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;To move an object means to transfer ownership of some resource it manages to another object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The copy constructor of &lt;code&gt;auto_ptr&lt;/code&gt; probably looks something like this (somewhat simplified):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;auto_ptr&lt;/span&gt;(auto_ptr&amp;amp; source)   &lt;span class=&quot;hljs-comment&quot;&gt;// note the missing const&lt;/span&gt;\n{\n    p = source.p;\n    source.p = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// now the source no longer owns the object&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Dangerous and harmless moves&lt;/h2&gt;\n\n&lt;p&gt;The dangerous thing about &lt;code&gt;auto_ptr&lt;/code&gt; is that what syntactically looks like a copy is actually a move. Trying to call a member function on a moved-from &lt;code&gt;auto_ptr&lt;/code&gt; will invoke undefined behavior, so you have to be very careful not to use an &lt;code&gt;auto_ptr&lt;/code&gt; after it has been moved from:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle)&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// create triangle&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;;              &lt;span class=&quot;hljs-comment&quot;&gt;// move a into b&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; area = a-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;area&lt;/span&gt;();           &lt;span class=&quot;hljs-comment&quot;&gt;// undefined behavior&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But &lt;code&gt;auto_ptr&lt;/code&gt; is not &lt;em&gt;always&lt;/em&gt; dangerous. Factory functions are a perfectly fine use case for &lt;code&gt;auto_ptr&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;make_triangle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;auto_ptr&lt;/span&gt;&amp;lt;Shape&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(make_triangle())&lt;/span&gt;&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// move temporary into c&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; area = &lt;span class=&quot;hljs-built_in&quot;&gt;make_triangle&lt;/span&gt;()-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;area&lt;/span&gt;();   &lt;span class=&quot;hljs-comment&quot;&gt;// perfectly safe&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note how both examples follow the same syntactic pattern:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(expression)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; area = expression-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;area&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And yet, one of them invokes undefined behavior, whereas the other one does not. So what is the difference between the expressions &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;make_triangle()&lt;/code&gt;? Aren&apos;t they both of the same type? Indeed they are, but they have different &lt;em&gt;value categories&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Value categories&lt;/h2&gt;\n\n&lt;p&gt;Obviously, there must be some profound difference between the expression &lt;code&gt;a&lt;/code&gt; which denotes an &lt;code&gt;auto_ptr&lt;/code&gt; variable, and the expression &lt;code&gt;make_triangle()&lt;/code&gt; which denotes the call of a function that returns an &lt;code&gt;auto_ptr&lt;/code&gt; by value, thus creating a fresh temporary &lt;code&gt;auto_ptr&lt;/code&gt; object every time it is called. &lt;code&gt;a&lt;/code&gt; is an example of an &lt;em&gt;lvalue&lt;/em&gt;, whereas &lt;code&gt;make_triangle()&lt;/code&gt; is an example of an &lt;em&gt;rvalue&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Moving from lvalues such as &lt;code&gt;a&lt;/code&gt; is dangerous, because we could later try to call a member function via &lt;code&gt;a&lt;/code&gt;, invoking undefined behavior. On the other hand, moving from rvalues such as &lt;code&gt;make_triangle()&lt;/code&gt; is perfectly safe, because after the copy constructor has done its job, we cannot use the temporary again. There is no expression that denotes said temporary; if we simply write &lt;code&gt;make_triangle()&lt;/code&gt; again, we get a &lt;em&gt;different&lt;/em&gt; temporary. In fact, the moved-from temporary is already gone on the next line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;auto_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(make_triangle())&lt;/span&gt;&lt;/span&gt;;\n                                  ^ the moved-from temporary dies right here\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the letters &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; have a historic origin in the left-hand side and right-hand side of an assignment. This is no longer true in C++, because there are lvalues that cannot appear on the left-hand side of an assignment (like arrays or user-defined types without an assignment operator), and there are rvalues which can (all rvalues of class types with an assignment operator).&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An rvalue of class type is an expression whose evaluation creates a temporary object.\n  Under normal circumstances, no other expression inside the same scope denotes the same temporary object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Rvalue references&lt;/h2&gt;\n\n&lt;p&gt;We now understand that moving from lvalues is potentially dangerous, but moving from rvalues is harmless. If C++ had language support to distinguish lvalue arguments from rvalue arguments, we could either completely forbid moving from lvalues, or at least make moving from lvalues &lt;em&gt;explicit&lt;/em&gt; at call site, so that we no longer move by accident.&lt;/p&gt;\n\n&lt;p&gt;C++11&apos;s answer to this problem is &lt;em&gt;rvalue references&lt;/em&gt;. An rvalue reference is a new kind of reference that only binds to rvalues, and the syntax is &lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;. The good old reference &lt;code&gt;X&amp;amp;&lt;/code&gt; is now known as an &lt;em&gt;lvalue reference&lt;/em&gt;. (Note that &lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a reference to a reference; there is no such thing in C++.)&lt;/p&gt;\n\n&lt;p&gt;If we throw &lt;code&gt;const&lt;/code&gt; into the mix, we already have four different kinds of references. What kinds of expressions of type &lt;code&gt;X&lt;/code&gt; can they bind to?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;            lvalue   &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; lvalue   rvalue   &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; rvalue\n---------------------------------------------------------              \nX&amp;amp;          yes\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; X&amp;amp;    yes      yes            yes      yes\nX&amp;amp;&amp;amp;                                 yes\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; X&amp;amp;&amp;amp;                           yes      yes\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In practice, you can forget about &lt;code&gt;const X&amp;amp;&amp;amp;&lt;/code&gt;. Being restricted to read from rvalues is not very useful.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An rvalue reference &lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt; is a new kind of reference that only binds to rvalues.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Implicit conversions&lt;/h2&gt;\n\n&lt;p&gt;Rvalue references went through several versions. Since version 2.1, an rvalue reference &lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt; also binds to all value categories of a different type &lt;code&gt;Y&lt;/code&gt;, provided there is an implicit conversion from &lt;code&gt;Y&lt;/code&gt; to &lt;code&gt;X&lt;/code&gt;. In that case, a temporary of type &lt;code&gt;X&lt;/code&gt; is created, and the rvalue reference is bound to that temporary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::string&amp;amp;&amp;amp; r)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;some_function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above example, &lt;code&gt;&quot;hello world&quot;&lt;/code&gt; is an lvalue of type &lt;code&gt;const char[12]&lt;/code&gt;. Since there is an implicit conversion from &lt;code&gt;const char[12]&lt;/code&gt; through &lt;code&gt;const char*&lt;/code&gt; to &lt;code&gt;std::string&lt;/code&gt;, a temporary of type &lt;code&gt;std::string&lt;/code&gt; is created, and &lt;code&gt;r&lt;/code&gt; is bound to that temporary. This is one of the cases where the distinction between rvalues (expressions) and temporaries (objects) is a bit blurry.&lt;/p&gt;\n\n&lt;h2&gt;Move constructors&lt;/h2&gt;\n\n&lt;p&gt;A useful example of a function with an &lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt; parameter is the &lt;em&gt;move constructor&lt;/em&gt; &lt;code&gt;X::X(X&amp;amp;&amp;amp; source)&lt;/code&gt;. Its purpose is to transfer ownership of the managed resource from the source into the current object.&lt;/p&gt;\n\n&lt;p&gt;In C++11, &lt;code&gt;std::auto_ptr&amp;lt;T&amp;gt;&lt;/code&gt; has been replaced by &lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt; which takes advantage of rvalue references. I will develop and discuss a simplified version of &lt;code&gt;unique_ptr&lt;/code&gt;. First, we encapsulate a raw pointer and overload the operators &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, so our class feels like a pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;unique_ptr&lt;/span&gt;\n{\n    T* ptr;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    T* &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ptr;\n    }\n\n    T&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;*() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *ptr;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The constructor takes ownership of the object, and the destructor deletes it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* p = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        ptr = p;\n    }\n\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;unique_ptr&lt;/span&gt;()\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; ptr;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now comes the interesting part, the move constructor:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;unique_ptr&lt;/span&gt;(unique_ptr&amp;amp;&amp;amp; source)   &lt;span class=&quot;hljs-comment&quot;&gt;// note the rvalue reference&lt;/span&gt;\n    {\n        ptr = source.ptr;\n        source.ptr = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This move constructor does exactly what the &lt;code&gt;auto_ptr&lt;/code&gt; copy constructor did, but it can only be supplied with rvalues:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;;                 &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(make_triangle())&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// okay&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second line fails to compile, because &lt;code&gt;a&lt;/code&gt; is an lvalue, but the parameter &lt;code&gt;unique_ptr&amp;amp;&amp;amp; source&lt;/code&gt; can only be bound to rvalues. This is exactly what we wanted; dangerous moves should never be implicit. The third line compiles just fine, because &lt;code&gt;make_triangle()&lt;/code&gt; is an rvalue. The move constructor will transfer ownership from the temporary to &lt;code&gt;c&lt;/code&gt;. Again, this is exactly what we wanted.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The move constructor transfers ownership of a managed resource into the current object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Move assignment operators&lt;/h2&gt;\n\n&lt;p&gt;The last missing piece is the move assignment operator. Its job is to release the old resource and acquire the new resource from its argument:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    unique_ptr&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(unique_ptr&amp;amp;&amp;amp; source)   &lt;span class=&quot;hljs-comment&quot;&gt;// note the rvalue reference&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; != &amp;amp;source)    &lt;span class=&quot;hljs-comment&quot;&gt;// beware of self-assignment&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; ptr;         &lt;span class=&quot;hljs-comment&quot;&gt;// release the old resource&lt;/span&gt;\n\n            ptr = source.ptr;   &lt;span class=&quot;hljs-comment&quot;&gt;// acquire the new resource&lt;/span&gt;\n            source.ptr = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note how this implementation of the move assignment operator duplicates logic of both the destructor and the move constructor. Are you familiar with the copy-and-swap idiom? It can also be applied to move semantics as the move-and-swap idiom:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    unique_ptr&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(unique_ptr source)   &lt;span class=&quot;hljs-comment&quot;&gt;// note the missing reference&lt;/span&gt;\n    {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;swap&lt;/span&gt;(ptr, source.ptr);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now that &lt;code&gt;source&lt;/code&gt; is a variable of type &lt;code&gt;unique_ptr&lt;/code&gt;, it will be initialized by the move constructor; that is, the argument will be moved into the parameter. The argument is still required to be an rvalue, because the move constructor itself has an rvalue reference parameter. When control flow reaches the closing brace of &lt;code&gt;operator=&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt; goes out of scope, releasing the old resource automatically.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The move assignment operator transfers ownership of a managed resource into the current object, releasing the old resource.\n  The move-and-swap idiom simplifies the implementation.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Moving from lvalues&lt;/h2&gt;\n\n&lt;p&gt;Sometimes, we want to move from lvalues. That is, sometimes we want the compiler to treat an lvalue as if it were an rvalue, so it can invoke the move constructor, even though it could be potentially unsafe.\nFor this purpose, C++11 offers a standard library function template called &lt;code&gt;std::move&lt;/code&gt; inside the header &lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;.\nThis name is a bit unfortunate, because &lt;code&gt;std::move&lt;/code&gt; simply casts an lvalue to an rvalue; it does &lt;em&gt;not&lt;/em&gt; move anything by itself. It merely &lt;em&gt;enables&lt;/em&gt; moving. Maybe it should have been named &lt;code&gt;std::cast_to_rvalue&lt;/code&gt; or &lt;code&gt;std::enable_move&lt;/code&gt;, but we are stuck with the name by now.&lt;/p&gt;\n\n&lt;p&gt;Here is how you explicitly move from an lvalue:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;;              &lt;span class=&quot;hljs-comment&quot;&gt;// still an error&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::move(a))&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// okay&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that after the third line, &lt;code&gt;a&lt;/code&gt; no longer owns a triangle. That&apos;s okay, because by &lt;em&gt;explicitly&lt;/em&gt; writing &lt;code&gt;std::move(a)&lt;/code&gt;, we made our intentions clear: &quot;Dear constructor, do whatever you want with &lt;code&gt;a&lt;/code&gt; in order to initialize &lt;code&gt;c&lt;/code&gt;; I don&apos;t care about &lt;code&gt;a&lt;/code&gt; anymore. Feel free to have your way with &lt;code&gt;a&lt;/code&gt;.&quot;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;std::move(some_lvalue)&lt;/code&gt; casts an lvalue to an rvalue, thus enabling a subsequent move.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Xvalues&lt;/h2&gt;\n\n&lt;p&gt;Note that even though &lt;code&gt;std::move(a)&lt;/code&gt; is an rvalue, its evaluation does &lt;em&gt;not&lt;/em&gt; create a temporary object. This conundrum forced the committee to introduce a third value category. Something that can be bound to an rvalue reference, even though it is not an rvalue in the traditional sense, is called an &lt;em&gt;xvalue&lt;/em&gt; (eXpiring value). The traditional rvalues were renamed to &lt;em&gt;prvalues&lt;/em&gt; (Pure rvalues).&lt;/p&gt;\n\n&lt;p&gt;Both prvalues and xvalues are rvalues. Xvalues and lvalues are both &lt;em&gt;glvalues&lt;/em&gt; (Generalized lvalues). The relationships are easier to grasp with a diagram:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;        expressions\n          /     \\\n         /       \\\n        /         \\\n    glvalues   rvalues\n      /  \\       /  \\\n     /    \\     /    \\\n    /      \\   /      \\\nlvalues   xvalues   prvalues\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that only xvalues are really new; the rest is just due to renaming and grouping.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;C++98 rvalues are known as prvalues in C++11. Mentally replace all occurrences of &quot;rvalue&quot; in the preceding paragraphs with &quot;prvalue&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Moving out of functions&lt;/h2&gt;\n\n&lt;p&gt;So far, we have seen movement into local variables, and into function parameters. But moving is also possible in the opposite direction. If a function returns by value, some object at call site (probably a local variable or a temporary, but could be any kind of object) is initialized with the expression after the &lt;code&gt;return&lt;/code&gt; statement as an argument to the move constructor:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;make_triangle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;Shape&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle);\n}          \\-----------------------------/\n                  |\n                  | temporary is moved into c\n                  |\n                  &lt;span class=&quot;hljs-function&quot;&gt;v\nunique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(make_triangle())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Perhaps surprisingly, automatic objects (local variables that are not declared as &lt;code&gt;static&lt;/code&gt;) can also be &lt;em&gt;implicitly&lt;/em&gt; moved out of functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;make_square&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Square)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;   &lt;span class=&quot;hljs-comment&quot;&gt;// note the missing std::move&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How come the move constructor accepts the lvalue &lt;code&gt;result&lt;/code&gt; as an argument? The scope of &lt;code&gt;result&lt;/code&gt; is about to end, and it will be destroyed during stack unwinding. Nobody could possibly complain afterward that &lt;code&gt;result&lt;/code&gt; had changed somehow; when control flow is back at the caller, &lt;code&gt;result&lt;/code&gt; does not exist anymore! For that reason, C++11 has a special rule that allows returning automatic objects from functions without having to write &lt;code&gt;std::move&lt;/code&gt;. In fact, you should &lt;em&gt;never&lt;/em&gt; use &lt;code&gt;std::move&lt;/code&gt; to move automatic objects out of functions, as this inhibits the &quot;named return value optimization&quot; (NRVO).&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Never use &lt;code&gt;std::move&lt;/code&gt; to move automatic objects out of functions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Note that in both factory functions, the return type is a value, not an rvalue reference. Rvalue references are still references, and as always, you should never return a reference to an automatic object; the caller would end up with a dangling reference if you tricked the compiler into accepting your code, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt;&amp;amp;&amp;amp; &lt;span class=&quot;hljs-title&quot;&gt;flawed_attempt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// DO NOT DO THIS!&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;very_bad_idea&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Square)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(very_bad_idea);   &lt;span class=&quot;hljs-comment&quot;&gt;// WRONG!&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Never return automatic objects by rvalue reference. Moving is exclusively performed by the move constructor, not by &lt;code&gt;std::move&lt;/code&gt;, and not by merely binding an rvalue to an rvalue reference.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Moving into members&lt;/h2&gt;\n\n&lt;p&gt;Sooner or later, you are going to write code like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    unique_ptr&amp;lt;Shape&amp;gt; member;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(unique_ptr&amp;lt;Shape&amp;gt;&amp;amp;&amp;amp; parameter)\n    : &lt;span class=&quot;hljs-built_in&quot;&gt;member&lt;/span&gt;(parameter)   &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n    {}\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically, the compiler will complain that &lt;code&gt;parameter&lt;/code&gt; is an lvalue. If you look at its type, you see an rvalue reference, but an rvalue reference simply means &quot;a reference that is bound to an rvalue&quot;; it does &lt;em&gt;not&lt;/em&gt; mean that the reference itself is an rvalue! Indeed, &lt;code&gt;parameter&lt;/code&gt; is just an ordinary variable with a name. You can use &lt;code&gt;parameter&lt;/code&gt; as often as you like inside the body of the constructor, and it always denotes the same object. Implicitly moving from it would be dangerous, hence the language forbids it.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A named rvalue reference is an lvalue, just like any other variable.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The solution is to manually enable the move:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    unique_ptr&amp;lt;Shape&amp;gt; member;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(unique_ptr&amp;lt;Shape&amp;gt;&amp;amp;&amp;amp; parameter)\n    : &lt;span class=&quot;hljs-built_in&quot;&gt;member&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(parameter))   &lt;span class=&quot;hljs-comment&quot;&gt;// note the std::move&lt;/span&gt;\n    {}\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could argue that &lt;code&gt;parameter&lt;/code&gt; is not used anymore after the initialization of &lt;code&gt;member&lt;/code&gt;. Why is there no special rule to silently insert &lt;code&gt;std::move&lt;/code&gt; just as with return values? Probably because it would be too much burden on the compiler implementors. For example, what if the constructor body was in another translation unit? By contrast, the return value rule simply has to check the symbol tables to determine whether or not the identifier after the &lt;code&gt;return&lt;/code&gt; keyword denotes an automatic object.&lt;/p&gt;\n\n&lt;p&gt;You can also pass the &lt;code&gt;parameter&lt;/code&gt; by value. For move-only types like &lt;code&gt;unique_ptr&lt;/code&gt;, it seems there is no established idiom yet. Personally, I prefer to pass by value, as it causes less clutter in the interface.&lt;/p&gt;\n\n&lt;h2&gt;Special member functions&lt;/h2&gt;\n\n&lt;p&gt;C++98 implicitly declares three special member functions on demand, that is, when they are needed somewhere: the copy constructor, the copy assignment operator, and the destructor.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;X::&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; X&amp;amp;);              &lt;span class=&quot;hljs-comment&quot;&gt;// copy constructor&lt;/span&gt;\nX&amp;amp; X::&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; X&amp;amp;);   &lt;span class=&quot;hljs-comment&quot;&gt;// copy assignment operator&lt;/span&gt;\nX::~&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;();                     &lt;span class=&quot;hljs-comment&quot;&gt;// destructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Rvalue references went through several versions. Since version 3.0, C++11 declares two additional special member functions on demand: the move constructor and the move assignment operator. Note that neither VC10 nor VC11 conforms to version 3.0 yet, so you will have to implement them yourself.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;X::&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;(X&amp;amp;&amp;amp;);                   &lt;span class=&quot;hljs-comment&quot;&gt;// move constructor&lt;/span&gt;\nX&amp;amp; X::&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(X&amp;amp;&amp;amp;);        &lt;span class=&quot;hljs-comment&quot;&gt;// move assignment operator&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These two new special member functions are only implicitly declared if none of the special member functions are declared manually. Also, if you declare your own move constructor or move assignment operator, neither the copy constructor nor the copy assignment operator will be declared implicitly.&lt;/p&gt;\n\n&lt;p&gt;What do these rules mean in practice?&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If you write a class without unmanaged resources, there is no need to declare any of the five special member functions yourself, and you will get correct copy semantics and move semantics for free. Otherwise, you will have to implement the special member functions yourself. Of course, if your class does not benefit from move semantics, there is no need to implement the special move operations.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Note that the copy assignment operator and the move assignment operator can be fused into a single, unified assignment operator, taking its argument by value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;X&amp;amp; X::&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(X source)    &lt;span class=&quot;hljs-comment&quot;&gt;// unified assignment operator&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;swap&lt;/span&gt;(source);            &lt;span class=&quot;hljs-comment&quot;&gt;// see my first answer for an explanation&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, the number of special member functions to implement drops from five to four. There is a tradeoff between exception-safety and efficiency here, but I am not an expert on this issue.&lt;/p&gt;\n\n&lt;h2&gt;Forwarding references (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf&quot; rel=&quot;noreferrer&quot;&gt;previously&lt;/a&gt; known as &lt;em&gt;Universal references&lt;/em&gt;)&lt;/h2&gt;\n\n&lt;p&gt;Consider the following function template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T&amp;amp;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You might expect &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; to only bind to rvalues, because at first glance, it looks like an rvalue reference. As it turns out though, &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; also binds to lvalues:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;make_triangle&lt;/span&gt;());   &lt;span class=&quot;hljs-comment&quot;&gt;// T is unique_ptr&amp;lt;Shape&amp;gt;, T&amp;amp;&amp;amp; is unique_ptr&amp;lt;Shape&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;Shape&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Triangle)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(a);                 &lt;span class=&quot;hljs-comment&quot;&gt;// T is unique_ptr&amp;lt;Shape&amp;gt;&amp;amp;, T&amp;amp;&amp;amp; is unique_ptr&amp;lt;Shape&amp;gt;&amp;amp;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the argument is an rvalue of type &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; is deduced to be &lt;code&gt;X&lt;/code&gt;, hence &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; means &lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;. This is what anyone would expect.\nBut if the argument is an lvalue of type &lt;code&gt;X&lt;/code&gt;, due to a special rule, &lt;code&gt;T&lt;/code&gt; is deduced to be &lt;code&gt;X&amp;amp;&lt;/code&gt;, hence &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; would mean something like &lt;code&gt;X&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt;. But since C++ still has no notion of references to references, the type &lt;code&gt;X&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt; is &lt;em&gt;collapsed&lt;/em&gt; into &lt;code&gt;X&amp;amp;&lt;/code&gt;. This may sound confusing and useless at first, but reference collapsing is essential for &lt;em&gt;perfect forwarding&lt;/em&gt; (which will not be discussed here).&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;T&amp;amp;&amp;amp; is not an rvalue reference, but a forwarding reference. It also binds to lvalues, in which case &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; are both lvalue references.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If you want to constrain a function template to rvalues, you can combine &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/sfinae&quot; rel=&quot;noreferrer&quot;&gt;SFINAE&lt;/a&gt; with type traits:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;std::is_rvalue_reference&amp;lt;T&amp;amp;&amp;amp;&amp;gt;::value, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n&lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T&amp;amp;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Implementation of move&lt;/h2&gt;\n\n&lt;p&gt;Now that you understand reference collapsing, here is how &lt;code&gt;std::move&lt;/code&gt; is implemented:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::remove_reference&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type&amp;amp;&amp;amp;\n&lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T&amp;amp;&amp;amp; t)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::remove_reference&amp;lt;T&amp;gt;::type&amp;amp;&amp;amp;&amp;gt;(t);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, &lt;code&gt;move&lt;/code&gt; accepts any kind of parameter thanks to the forwarding reference &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;, and it returns an rvalue reference. The &lt;code&gt;std::remove_reference&amp;lt;T&amp;gt;::type&lt;/code&gt; meta-function call is necessary because otherwise, for lvalues of type &lt;code&gt;X&lt;/code&gt;, the return type would be &lt;code&gt;X&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt;, which would collapse into &lt;code&gt;X&amp;amp;&lt;/code&gt;. Since &lt;code&gt;t&lt;/code&gt; is always an lvalue (remember that a named rvalue reference is an lvalue), but we want to bind &lt;code&gt;t&lt;/code&gt; to an rvalue reference, we have to explicitly cast &lt;code&gt;t&lt;/code&gt; to the correct return type.\nThe call of a function that returns an rvalue reference is itself an xvalue. Now you know where xvalues come from ;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The call of a function that returns an rvalue reference, such as &lt;code&gt;std::move&lt;/code&gt;, is an xvalue.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Note that returning by rvalue reference is fine in this example, because &lt;code&gt;t&lt;/code&gt; does not denote an automatic object, but instead an object that was passed in by the caller.&lt;/p&gt;\n    ","\n&lt;p&gt;Suppose you have a function that returns a substantial object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Matrix &lt;span class=&quot;hljs-title&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Matrix &amp;amp;a, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Matrix &amp;amp;b)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you write code like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Matrix r = &lt;span class=&quot;hljs-built_in&quot;&gt;multiply&lt;/span&gt;(a, b);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then an ordinary C++ compiler will create a temporary object for the result of &lt;code&gt;multiply()&lt;/code&gt;, call the copy constructor to initialise &lt;code&gt;r&lt;/code&gt;, and then destruct the temporary return value. Move semantics in C++0x allow the &quot;move constructor&quot; to be called to initialise &lt;code&gt;r&lt;/code&gt; by copying its contents, and then discard the temporary value without having to destruct it.&lt;/p&gt;\n\n&lt;p&gt;This is especially important if (like perhaps the &lt;code&gt;Matrix&lt;/code&gt; example above), the object being copied allocates extra memory on the heap to store its internal representation. A copy constructor would have to either make a full copy of the internal representation, or use reference counting and copy-on-write semantics interally. A move constructor would leave the heap memory alone and just copy the pointer inside the &lt;code&gt;Matrix&lt;/code&gt; object.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Move semantics&lt;/strong&gt; is about &lt;strong&gt;transferring resources rather than copying them&lt;/strong&gt; when nobody needs the source value anymore.&lt;/p&gt;\n\n&lt;p&gt;In C++03, objects are often copied, only to be destroyed or assigned-over before any code uses the value again.  For example, when you return by value from a functionunless RVO kicks inthe value you&apos;re returning is copied to the caller&apos;s stack frame, and then it goes out of scope and is destroyed.  This is just one of many examples: see pass-by-value when the source object is a temporary, algorithms like &lt;code&gt;sort&lt;/code&gt; that just rearrange items, reallocation in &lt;code&gt;vector&lt;/code&gt; when its &lt;code&gt;capacity()&lt;/code&gt; is exceeded, etc.&lt;/p&gt;\n\n&lt;p&gt;When such copy/destroy pairs are expensive, it&apos;s typically because the object owns some heavyweight resource. For example, &lt;code&gt;vector&amp;lt;string&amp;gt;&lt;/code&gt; may own a dynamically-allocated memory block containing an array of &lt;code&gt;string&lt;/code&gt; objects, each with its own dynamic memory.  Copying such an object is costly: you have to allocate new memory for each dynamically-allocated blocks in the source, and copy all the values across.  &lt;em&gt;Then&lt;/em&gt; you need deallocate all that memory you just copied.  However, &lt;em&gt;moving&lt;/em&gt; a large &lt;code&gt;vector&amp;lt;string&amp;gt;&lt;/code&gt; means just copying a few pointers (that refer to the dynamic memory block) to the destination and zeroing them out in the source.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are really interested in a good, in-depth explanation of move semantics, I&apos;d highly recommend reading the original paper on them, &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm&quot; rel=&quot;noreferrer&quot;&gt;&quot;A Proposal to Add Move Semantics Support to the C++ Language.&quot;&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;It&apos;s very accessible and easy to read and it makes an excellent case for the benefits that they offer.  There are other more recent and up to date papers about move semantics available on &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/&quot; rel=&quot;noreferrer&quot;&gt;the WG21 website&lt;/a&gt;, but this one is probably the most straightforward since it approaches things from a top-level view and doesn&apos;t get very much into the gritty language details.&lt;/p&gt;\n    ","\n&lt;p&gt;In easy (practical) terms:&lt;/p&gt;\n\n&lt;p&gt;Copying an object means copying its &quot;static&quot; members and calling the &lt;code&gt;new&lt;/code&gt; operator for its dynamic objects. Right?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i, *p;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) : &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(a.i), &lt;span class=&quot;hljs-built_in&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(*a.p)) {}\n   ~&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() { &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; p; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, to &lt;strong&gt;move&lt;/strong&gt; an object (I repeat, in a practical point of view) implies only to copy the pointers of dynamic objects, and not to create new ones.&lt;/p&gt;\n\n&lt;p&gt;But, is that not dangerous? Of course, you could destruct a dynamic object twice (segmentation fault). So, to avoid that, you should &quot;invalidate&quot; the source pointers to avoid destructing them twice:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i, *p;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Movement of an object inside a copy constructor.&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) : &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(a.i), &lt;span class=&quot;hljs-built_in&quot;&gt;p&lt;/span&gt;(a.p)\n   {\n     a.p = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// pointer invalidated.&lt;/span&gt;\n   }\n\n   ~&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() { &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; p; }\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Deleting NULL, 0 or nullptr (address 0x0) is safe. &lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ok, but if I move an object, the source object becomes useless, no? Of course, but in certain situations that&apos;s very useful. The most evident one is when I call a function with an anonymous object (temporal, rvalue object, ..., you can call it with different names):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;heavyFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HeavyType())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In that situation, an anonymous object is created, next copied to the function parameter, and afterwards deleted. So, here it is better to move the object, because you don&apos;t need the anonymous object and you can save time and memory.&lt;/p&gt;\n\n&lt;p&gt;This leads to the concept of an &quot;rvalue&quot; reference. They exist in C++11 only to detect if the received object is anonymous or not. I think you do already know that an &quot;lvalue&quot; is an assignable entity (the left part of the &lt;code&gt;=&lt;/code&gt; operator), so you need a named reference to an object to be capable to act as an lvalue. A rvalue is exactly the opposite, an object with no named references. Because of that, anonymous object and rvalue are synonyms. So: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i, *p;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Copy&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) : &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(a.i), &lt;span class=&quot;hljs-built_in&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(*a.p)) {}\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Movement (&amp;amp;&amp;amp; means &quot;rvalue reference to&quot;)&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(A&amp;amp;&amp;amp; a) : &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(a.i), &lt;span class=&quot;hljs-built_in&quot;&gt;p&lt;/span&gt;(a.p)\n   {\n      a.p = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n   }\n\n   ~&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() { &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; p; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, when an object of type &lt;code&gt;A&lt;/code&gt; should be &quot;copied&quot;, the compiler creates a lvalue reference or a rvalue reference according to if the passed object is named or not. When not, your move-constructor is called and you know the object is temporal and you can move its dynamic objects instead of copying them, saving space and memory.&lt;/p&gt;\n\n&lt;p&gt;It is important to remember that &quot;static&quot; objects are always copied. There&apos;s no ways to &quot;move&quot; a static object (object in stack and not on heap). So, the distinction &quot;move&quot;/ &quot;copy&quot; when an object has no dynamic members (directly or indirectly) is irrelevant.&lt;/p&gt;\n\n&lt;p&gt;If your object is complex and the destructor has other secondary effects, like calling to a library&apos;s function, calling to other global functions or whatever it is, perhaps is better to signal a movement with a flag:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Heavy&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; b_moved;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// staff&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) { &lt;span class=&quot;hljs-comment&quot;&gt;/* definition */&lt;/span&gt; }\n   &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(A&amp;amp;&amp;amp; a) : &lt;span class=&quot;hljs-comment&quot;&gt;// initialization list&lt;/span&gt;\n   {\n      a.b_moved = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n   }\n\n   ~&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!b_moved) &lt;span class=&quot;hljs-comment&quot;&gt;/* destruct object */&lt;/span&gt; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, your code is shorter (you don&apos;t need to do a &lt;code&gt;nullptr&lt;/code&gt; assignment for each dynamic member) and more general.&lt;/p&gt;\n\n&lt;p&gt;Other typical question: what is the difference between &lt;code&gt;A&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;const A&amp;amp;&amp;amp;&lt;/code&gt;? Of course, in the first case, you can modify the object and in the second not, but, practical meaning? In the second case, you can&apos;t modify it, so you have no ways to invalidate the object (except with a mutable flag or something like that), and there is no practical difference to a copy constructor.&lt;/p&gt;\n\n&lt;p&gt;And what is &lt;strong&gt;perfect forwarding&lt;/strong&gt;? It is important to know that a &quot;rvalue reference&quot; is a reference to a named object in the &quot;caller&apos;s scope&quot;. But in the actual scope, a rvalue reference is a name to an object, so, it acts as a named object. If you pass an rvalue reference to another function, you are passing a named object, so, the object isn&apos;t received like a temporal object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(A&amp;amp;&amp;amp; a)&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;other_function&lt;/span&gt;(a);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The object &lt;code&gt;a&lt;/code&gt; would be copied to the actual parameter of &lt;code&gt;other_function&lt;/code&gt;. If you want the object &lt;code&gt;a&lt;/code&gt; continues being treated as a temporary object, you should use the &lt;code&gt;std::move&lt;/code&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;other_function&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(a));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this line, &lt;code&gt;std::move&lt;/code&gt; will cast &lt;code&gt;a&lt;/code&gt; to an rvalue and &lt;code&gt;other_function&lt;/code&gt; will receive the object as a unnamed object. Of course, if &lt;code&gt;other_function&lt;/code&gt; has not specific overloading to work with unnamed objects, this distinction is not important.&lt;/p&gt;\n\n&lt;p&gt;Is that perfect forwarding? Not, but we are very close. Perfect forwarding is only useful to work with templates, with the purpose to say: if I need to pass an object to another function, I need that if I receive a named object, the object is passed as a named object, and when not, I want to pass it like a unnamed object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T&amp;amp;&amp;amp; a)&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;other_function&lt;/span&gt;(std::forward&amp;lt;T&amp;gt;(a));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s the signature of a prototypical function that uses perfect forwarding, implemented in C++11 by means of &lt;code&gt;std::forward&lt;/code&gt;. This function exploits some rules of template instantiation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; `A&amp;amp; &amp;amp;&amp;amp; == A&amp;amp;`\n `A&amp;amp;&amp;amp; &amp;amp;&amp;amp; == A&amp;amp;&amp;amp;`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, if &lt;code&gt;T&lt;/code&gt; is a lvalue reference to &lt;code&gt;A&lt;/code&gt; (&lt;strong&gt;T&lt;/strong&gt; = A&amp;amp;), &lt;code&gt;a&lt;/code&gt; also (&lt;strong&gt;A&amp;amp;&lt;/strong&gt; &amp;amp;&amp;amp; =&amp;gt; A&amp;amp;). If &lt;code&gt;T&lt;/code&gt; is a rvalue reference to &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; also (A&amp;amp;&amp;amp; &amp;amp;&amp;amp; =&amp;gt; A&amp;amp;&amp;amp;). In both cases, &lt;code&gt;a&lt;/code&gt; is a named object in the actual scope, but &lt;code&gt;T&lt;/code&gt; contains the information of its &quot;reference type&quot; from the caller scope&apos;s point of view. This information (&lt;code&gt;T&lt;/code&gt;) is passed as template parameter to &lt;code&gt;forward&lt;/code&gt; and &apos;a&apos; is moved or not according to the type of &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s like copy semantics, but instead of having to duplicate all of the data you get to steal the data from the object being &quot;moved&quot; from.&lt;/p&gt;\n    ","\n&lt;p&gt;You know what a copy semantics means right? it means you have types which are copyable, for user-defined types you define this either buy explicitly writing a copy constructor &amp;amp; assignment operator or the compiler generates them implicitly. This will do a copy.&lt;/p&gt;\n\n&lt;p&gt;Move semantics is basically a user-defined type with constructor that takes an r-value reference (new type of reference using &amp;amp;&amp;amp; (yes two ampersands)) which is non-const, this is called a move constructor, same goes for assignment operator. So what does a move constructor do, well instead of copying memory from it&apos;s source argument it &apos;moves&apos; memory from the source to the destination.&lt;/p&gt;\n\n&lt;p&gt;When would you want to do that? well std::vector is an example, say you created a temporary std::vector and you return it from a function say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;foo&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;get_foos&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;re going to have overhead from the copy constructor when the function returns, if (and it will in C++0x) std::vector has a move constructor instead of copying it can just set it&apos;s pointers and &apos;move&apos; dynamically allocated memory to the new instance. It&apos;s kind of like transfer-of-ownership semantics with std::auto_ptr.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m writing this to make sure I understand it properly.&lt;/p&gt;\n\n&lt;p&gt;Move semantics were created to avoid the unnecessary copying of large objects.  Bjarne Stroustrup in his book &quot;The C++ Programming Language&quot; uses two examples where unnecessary copying occurs by default: one, the swapping of two large objects, and two, the returning of a large object from a method.&lt;/p&gt;\n\n&lt;p&gt;Swapping two large objects usually involves copying the first object to a temporary object, copying the second object to the first object, and copying the temporary object to the second object.  For a built-in type, this is very fast, but for large objects these three copies could take a large amount of time.  A &quot;move assignment&quot; allows the programmer to override the default copy behavior and instead swap references to the objects, which means that there is no copying at all and the swap operation is much faster.  The move assignment can be invoked by calling the std::move() method.&lt;/p&gt;\n\n&lt;p&gt;Returning an object from a method by default involves making a copy of the local object and its associated data in a location which is accessible to the caller (because the local object is not accessible to the caller and disappears when the method finishes).  When a built-in type is being returned, this operation is very fast, but if a large object is being returned, this could take a long time.  The move constructor allows the programmer to override this default behavior and instead &quot;reuse&quot; the heap data associated with the local object by pointing the object being returned to the caller to heap data associated with the local object.  Thus no copying is required.&lt;/p&gt;\n\n&lt;p&gt;In languages which do not allow the creation of local objects (that is, objects on the stack) these types of problems do not occur as all objects are allocated on the heap and are always accessed by reference.&lt;/p&gt;\n    ","\n&lt;p&gt;To illustrate the need for &lt;em&gt;move semantics&lt;/em&gt;, let&apos;s consider this example without move semantics:&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a function that takes an object of type &lt;code&gt;T&lt;/code&gt; and returns an object of the same type &lt;code&gt;T&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;T &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T o)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; }\n  &lt;span class=&quot;hljs-comment&quot;&gt;//^^^ new object constructed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above function uses &lt;em&gt;call by value&lt;/em&gt; which means that when this function is called an object must be &lt;em&gt;constructed&lt;/em&gt; to be used by the function.&lt;br&gt;\nBecause the function also &lt;em&gt;returns by value&lt;/em&gt;, another new object is constructed for the return value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T b = &lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;(a);\n  &lt;span class=&quot;hljs-comment&quot;&gt;//^ new object constructed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Two&lt;/strong&gt; new objects have been constructed, one of which is a temporary object that&apos;s only used for the duration of the function.&lt;/p&gt;\n\n&lt;p&gt;When the new object is created from the return value, the copy constructor is called to &lt;em&gt;copy&lt;/em&gt; the contents of the temporary object to the new object b. After the function completes, the temporary object used in the function goes out of scope and is destroyed.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now, let&apos;s consider what a &lt;em&gt;copy constructor&lt;/em&gt; does.&lt;/p&gt;\n\n&lt;p&gt;It must first initialize the object, then copy all the relevant data from the old object to the new one.&lt;br&gt;\nDepending on the class, maybe its a container with very much data, then that could represent much &lt;em&gt;time&lt;/em&gt; and &lt;em&gt;memory usage&lt;/em&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Copy constructor&lt;/span&gt;\nT::&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt;(T &amp;amp;old) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy_data&lt;/span&gt;(m_a, old.m_a);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy_data&lt;/span&gt;(m_b, old.m_b);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy_data&lt;/span&gt;(m_c, old.m_c);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With &lt;strong&gt;move semantics&lt;/strong&gt; it&apos;s now possible to make most of this work less unpleasant by simply &lt;em&gt;moving&lt;/em&gt; the data rather than copying.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Move constructor&lt;/span&gt;\nT::&lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt;(T &amp;amp;&amp;amp;old) &lt;span class=&quot;hljs-keyword&quot;&gt;noexcept&lt;/span&gt; {\n    m_a = std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(old.m_a);\n    m_b = std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(old.m_b);\n    m_c = std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(old.m_c);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Moving the data involves re-associating the data with the new object. And &lt;em&gt;no copy takes place&lt;/em&gt; at all.&lt;/p&gt;\n\n&lt;p&gt;This is accomplished with an &lt;code&gt;rvalue&lt;/code&gt; reference.&lt;br&gt;\nAn &lt;code&gt;rvalue&lt;/code&gt; reference works pretty much like an &lt;code&gt;lvalue&lt;/code&gt; reference with one important difference: &lt;br&gt;\nan &lt;em&gt;rvalue reference can be moved&lt;/em&gt; and an &lt;em&gt;lvalue&lt;/em&gt; cannot.&lt;/p&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/move_constructor&quot; rel=&quot;noreferrer&quot;&gt;cppreference.com&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;To make strong exception guarantee possible, user-defined move constructors should not throw exceptions. In fact, standard containers typically rely on std::move_if_noexcept to choose between move and copy when container elements need to be relocated.\n  If both copy and move constructors are provided, overload resolution selects the move constructor if the argument is an rvalue (either a prvalue such as a nameless temporary or an xvalue such as the result of std::move), and selects the copy constructor if the argument is an lvalue (named object or a function/operator returning lvalue reference). If only the copy constructor is provided, all argument categories select it (as long as it takes a reference to const, since rvalues can bind to const references), which makes copying the fallback for moving, when moving is unavailable.\n  In many situations, move constructors are optimized out even if they would produce observable side-effects, see copy elision.\n  A constructor is called a &apos;move constructor&apos; when it takes an rvalue reference as a parameter. It is not obligated to move anything, the class is not required to have a resource to be moved and a &apos;move constructor&apos; may not be able to move a resource as in the allowable (but maybe not sensible) case where the parameter is a const rvalue reference (const T&amp;amp;&amp;amp;).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Here&apos;s &lt;a href=&quot;https://www.youtube.com/watch?v=06HKceSDiKE&amp;amp;t=135s&quot; rel=&quot;nofollow noreferrer&quot;&gt;an answer&lt;/a&gt; from the book &quot;The C++ Programming Language&quot; by Bjarne Stroustrup. If you don&apos;t want to see the video, you can see the text below:&lt;/p&gt;\n\n&lt;p&gt;Consider this snippet. Returning from an operator+ involves copying the result out of the local variable &lt;code&gt;res&lt;/code&gt; and into someplace where the caller can access it. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Vector &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;+(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Vector&amp;amp; a, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Vector&amp;amp; b)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()!=b.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;())\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; Vector_siz e_mismatch{};\n    &lt;span class=&quot;hljs-function&quot;&gt;Vector &lt;span class=&quot;hljs-title&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a.size())&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i!=a.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i)\n            res[i]=a[i]+b[i];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We didnt really want a copy; we just wanted to get the result out of a function. So we need to move a Vector rather than to copy it. We can define move constructor as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Vector&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Vector&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Vector&amp;amp; a); &lt;span class=&quot;hljs-comment&quot;&gt;// copy constructor&lt;/span&gt;\n    Vector&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Vector&amp;amp; a); &lt;span class=&quot;hljs-comment&quot;&gt;// copy assignment&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Vector&lt;/span&gt;(Vector&amp;amp;&amp;amp; a); &lt;span class=&quot;hljs-comment&quot;&gt;// move constructor&lt;/span&gt;\n    Vector&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=(Vector&amp;amp;&amp;amp; a); &lt;span class=&quot;hljs-comment&quot;&gt;// move assignment&lt;/span&gt;\n};\n\nVector::&lt;span class=&quot;hljs-built_in&quot;&gt;Vector&lt;/span&gt;(Vector&amp;amp;&amp;amp; a)\n    :elem{a.elem}, &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;grab the elements&quot; from a&lt;/span&gt;\n    sz{a.sz}\n{\n    a.elem = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// now a has no elements&lt;/span&gt;\n    a.sz = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &amp;amp;&amp;amp; means &quot;rvalue reference&quot; and is a reference to which we can bind an rvalue. &quot;rvalue&quot; is intended to complement &quot;lvalue&quot; which roughly means &quot;something that can appear on the left-hand side of an assignment.&quot; So an rvalue means roughly &quot;a value that you cant assign to&quot;, such as an integer returned by a function call, and the &lt;code&gt;res&lt;/code&gt; local variable in operator+() for Vectors. &lt;/p&gt;\n\n&lt;p&gt;Now, the statement &lt;code&gt;return res;&lt;/code&gt; will not copy!&lt;/p&gt;\n    "]},"page":"54","randomQuestions":[{"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665"},{"title":"Selecting and manipulating CSS pseudo-elements such as ::before and ::after using javascript (or jQuery)","slug":"selecting-and-manipulating-css-pseudo-elements-such-as-::before-and-::after-using-javascript-(or-jquery)-1657387406132"},{"title":"\"Thinking in AngularJS\" if I have a jQuery background? [closed]","slug":"\"thinking-in-angularjs\"-if-i-have-a-jquery-background-closed-1657384761159"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"},{"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218"},{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"What is event bubbling and capturing?","slug":"what-is-event-bubbling-and-capturing-1657388059203"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"How do I give text or an image a transparent background using CSS?","slug":"how-do-i-give-text-or-an-image-a-transparent-background-using-css-1657388188508"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"Why should there be spaces around '[' and ']' in Bash?","slug":"why-should-there-be-spaces-around-''-and-''-in-bash-1657387984122"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"}]},"__N_SSG":true}