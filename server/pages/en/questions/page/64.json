{"pageProps":{"data":{"count":610,"rows":[{"id":295,"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064","postType":"QUESTION","createdAt":"2022-07-09T17:25:36.000Z","updatedAt":"2022-07-09T17:25:36.000Z","tags":[{"id":1782,"name":"sql-server-2008","slug":"sql-server-2008","createdAt":"2022-07-09T17:25:36.000Z","updatedAt":"2022-07-09T17:25:36.000Z","Questions_Tags":{"questionId":295,"tagId":1782}},{"id":1783,"name":"parameters","slug":"parameters","createdAt":"2022-07-09T17:25:36.000Z","updatedAt":"2022-07-09T17:25:36.000Z","Questions_Tags":{"questionId":295,"tagId":1783}}]},{"id":294,"title":"How to create a generic array in Java?","slug":"how-to-create-a-generic-array-in-java-1657387532298","postType":"QUESTION","createdAt":"2022-07-09T17:25:32.000Z","updatedAt":"2022-07-09T17:25:32.000Z","tags":[{"id":1780,"name":"instantiation","slug":"instantiation","createdAt":"2022-07-09T17:25:32.000Z","updatedAt":"2022-07-09T17:25:32.000Z","Questions_Tags":{"questionId":294,"tagId":1780}}]},{"id":293,"title":"How do we control web page caching, across all browsers?","slug":"how-do-we-control-web-page-caching-across-all-browsers-1657387529059","postType":"QUESTION","createdAt":"2022-07-09T17:25:29.000Z","updatedAt":"2022-07-09T17:25:29.000Z","tags":[{"id":1772,"name":"caching","slug":"caching","createdAt":"2022-07-09T17:25:29.000Z","updatedAt":"2022-07-09T17:25:29.000Z","Questions_Tags":{"questionId":293,"tagId":1772}},{"id":1773,"name":"https","slug":"https","createdAt":"2022-07-09T17:25:29.000Z","updatedAt":"2022-07-09T17:25:29.000Z","Questions_Tags":{"questionId":293,"tagId":1773}},{"id":1774,"name":"http-headers","slug":"http-headers","createdAt":"2022-07-09T17:25:29.000Z","updatedAt":"2022-07-09T17:25:29.000Z","Questions_Tags":{"questionId":293,"tagId":1774}}]},{"id":292,"title":"What is the purpose of the var keyword and when should I use it (or omit it)?","slug":"what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-(or-omit-it)-1657387525538","postType":"QUESTION","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","tags":[{"id":1769,"name":"keyword","slug":"keyword","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","Questions_Tags":{"questionId":292,"tagId":1769}},{"id":1770,"name":"ecmascript-5","slug":"ecmascript-5","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","Questions_Tags":{"questionId":292,"tagId":1770}}]},{"id":291,"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426","postType":"QUESTION","createdAt":"2022-07-09T17:25:22.000Z","updatedAt":"2022-07-09T17:25:22.000Z","tags":[{"id":1765,"name":"awt","slug":"awt","createdAt":"2022-07-09T17:25:22.000Z","updatedAt":"2022-07-09T17:25:22.000Z","Questions_Tags":{"questionId":291,"tagId":1765}},{"id":1766,"name":"listener","slug":"listener","createdAt":"2022-07-09T17:25:22.000Z","updatedAt":"2022-07-09T17:25:22.000Z","Questions_Tags":{"questionId":291,"tagId":1766}}]}]},"answers":{"291":["\n&lt;p&gt;You&apos;re mis-interpreting the information given to you. You should avoid using Swing components with AWT &lt;strong&gt;components&lt;/strong&gt;. It&apos;s OK to use Swing with the AWT listener structure, layout managers, etc. and in fact it&apos;s impossible not to.&lt;/p&gt;\n    ","\n&lt;p&gt;There have been some good answers, but I would like to cover a slightly different aspect.  Things that Swing provides beyond AWT.&lt;/p&gt;\n\n&lt;h2&gt;Components&lt;/h2&gt;\n\n&lt;p&gt;Swing supports styled documents in &lt;code&gt;JEditorPane&lt;/code&gt; &amp;amp; &lt;code&gt;JTextPane&lt;/code&gt; &amp;amp; to a limited extent using HTML in some other &lt;code&gt;JComponents&lt;/code&gt;.  AWT does not support styled documents in any component.  &lt;/p&gt;\n\n&lt;p&gt;AWT provides no tree based structure like &lt;code&gt;JTree&lt;/code&gt;, no tabular structure such as &lt;code&gt;JTable&lt;/code&gt;, no version of &lt;code&gt;JToolBar&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/iueSU.png&quot; width=&quot;677&quot; height=&quot;398&quot;&gt; &lt;/p&gt;\n\n&lt;p&gt;AWT has no equivalent (that I can find or recall) for &lt;code&gt;JColorChooser&lt;/code&gt; &amp;amp; none for the simple utility class - &lt;code&gt;JOptionPane&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/UZB98.png&quot;&gt;&lt;/p&gt;\n\n&lt;h2&gt;Listeners&lt;/h2&gt;\n\n&lt;p&gt;As mentioned in a comment, see the 20+ extra/alternate listeners in the &lt;code&gt;javax.swing.event&lt;/code&gt; package.&lt;/p&gt;\n\n&lt;h2&gt;Pluggable Look &amp;amp; Feel&lt;/h2&gt;\n\n&lt;p&gt;Swing components can be set to a particular look &amp;amp; feel at run-time, including a native PLAF.  &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Jaqap.png&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;See the screen shots on the &lt;a href=&quot;https://stackoverflow.com/questions/5621338/about-swing-and-jtable/5630271#5630271&quot;&gt;Nested Layout Example&lt;/a&gt; for some more samples.&lt;/p&gt;\n\n&lt;h2&gt;Layouts&lt;/h2&gt;\n\n&lt;p&gt;In addition to the plethora of AWT layouts, Swing provides:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;BoxLayout&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GroupLayout&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;OverlayLayout&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ScrollPaneLayout&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ViewportLayout&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Other&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Key Bindings.  See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to Use Key Bindings&lt;/a&gt; for details.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/javax/swing/undo/UndoManager.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;UndoManager&lt;/code&gt;&lt;/a&gt; for undo/redo ability in editable documents.&lt;/li&gt;\n&lt;li&gt;Inbuilt &lt;a href=&quot;http://www.oracle.com/technetwork/java/painting-140037.html#db&quot; rel=&quot;nofollow noreferrer&quot;&gt;double buffering&lt;/a&gt; to avoid flicker on repaint.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/javax/swing/SwingWorker.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;SwingWorker&lt;/code&gt;&lt;/a&gt; for responsive GUIs.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;There is probably a lot more I missed in that brief description, but the bottom line is that Swing is an altogether newer and more enabled GUI toolkit.  &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Swing both builds on, &lt;strong&gt;and&lt;/strong&gt; relies heavily on, classes in the AWT.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Java&apos;s Swing takes ActionListeners, which are part of the AWT package.  If you wish to use swing, you must use some form of an AWT ActionListener.  That is just the way things are.  I don&apos;t suggest using Java at all for complex guis, but nor would I say that AWT is outdated, as there is no direct replacement.  Thus, just go ahead and use AWT.&lt;/p&gt;\n\n&lt;p&gt;As an alternative, you could look into JOGL, but that&apos;s more if you are trying to create something game-oriented.&lt;/p&gt;\n    ","\n&lt;p&gt;This is a small example which can demonstrate, the use of &lt;strong&gt;javax.swing.Action&lt;/strong&gt; package\nyou should also refer to java doc for &lt;strong&gt;javax.swing.event&lt;/strong&gt; package i think you are finding that . . . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.BorderLayout;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.event.ActionEvent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.event.ActionListener;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.AbstractAction;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.Action;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.Icon;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.ImageIcon;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JButton;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JFrame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JMenu;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JMenuBar;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JMenuItem;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JPanel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JToolBar;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SysOutHelloAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AbstractAction&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;printIcon&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageIcon&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Print.gif&quot;&lt;/span&gt;);\n\n    SysOutHelloAction() {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Print&quot;&lt;/span&gt;, printIcon);\n        putValue(Action.SHORT_DESCRIPTION, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent actionEvent)&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SwingActionTester&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Action Sample&quot;&lt;/span&gt;);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;printAction&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SysOutHelloAction&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;JMenuBar&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;menuBar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JMenuBar&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;JMenu&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JMenu&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;File&quot;&lt;/span&gt;);\n        menuBar.add(menu);\n        menu.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JMenuItem&lt;/span&gt;(printAction));\n        &lt;span class=&quot;hljs-type&quot;&gt;JToolBar&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;toolbar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JToolBar&lt;/span&gt;();\n        toolbar.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(printAction));\n        &lt;span class=&quot;hljs-type&quot;&gt;JButton&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;enableButton&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enable&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;enableActionListener&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent actionEvent)&lt;/span&gt; {\n                printAction.setEnabled(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            }\n        };\n        enableButton.addActionListener(enableActionListener);\n        &lt;span class=&quot;hljs-type&quot;&gt;JButton&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;disableButton&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Disable&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;disableActionListener&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent actionEvent)&lt;/span&gt; {\n                printAction.setEnabled(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            }\n        };\n        disableButton.addActionListener(disableActionListener);\n        &lt;span class=&quot;hljs-type&quot;&gt;JButton&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;relabelButton&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Relabel&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;relabelActionListener&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent actionEvent)&lt;/span&gt; {\n                printAction.putValue(Action.NAME, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Changed Action Value&quot;&lt;/span&gt;);\n            }\n        };\n        relabelButton.addActionListener(relabelActionListener);\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;buttonPanel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        buttonPanel.add(enableButton);\n        buttonPanel.add(disableButton);\n        buttonPanel.add(relabelButton);\n        frame.setJMenuBar(menuBar);\n        frame.add(toolbar, BorderLayout.SOUTH);\n        frame.add(buttonPanel, BorderLayout.NORTH);\n        frame.setSize(&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);\n        frame.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You are right.  Both Java AWT and Java Spring are obsolete.  Use JavaFX instead.&lt;br&gt;\nAnd, as a commentary, I am frustrated with Java, that it was supposed to be &quot;write once run everywhere&quot;, when now it turns out to be &quot;must keep rewriting your app every three months&quot; because new Java releases break previous code, and new packages replace the old.  &lt;/p&gt;\n    "],"292":["\n&lt;p&gt;If you&apos;re in the global scope then there&apos;s not much difference. Read &lt;a href=&quot;https://stackoverflow.com/a/1471738/1541051&quot;&gt;Kangax&apos;s&lt;/a&gt; answer for explanation&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re in a function then &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; will create a local variable, &quot;no var&quot; will look up the scope chain until it finds the variable or hits the global scope (at which point it will create it):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// These are both globals&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\nbar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n    bar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// Global&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Execute an anonymous function&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; wibble = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n        foo = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Inherits from scope above (creating a closure)&lt;/span&gt;\n        moo = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Global&lt;/span&gt;\n    }())\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&apos;re not doing an assignment then you need to use &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x; &lt;span class=&quot;hljs-comment&quot;&gt;// Declare x&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;There&apos;s a difference&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var x = 1&lt;/code&gt; &lt;strong&gt;declares variable&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; in current scope (aka execution context). If the declaration appears in a function - a local variable is declared; if it&apos;s in global scope - a global variable is declared.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;x = 1&lt;/code&gt;, on the other hand, is merely a property assignment. It first tries to resolve &lt;code&gt;x&lt;/code&gt; against scope chain. If it finds it anywhere in that scope chain, it performs assignment; if it doesn&apos;t find &lt;code&gt;x&lt;/code&gt;, only then does &lt;strong&gt;it creates &lt;code&gt;x&lt;/code&gt; property on a global object&lt;/strong&gt; (which is a top level object in a scope chain). &lt;/p&gt;\n\n&lt;p&gt;Now, notice that it doesn&apos;t declare a global variable, it creates a global property.&lt;/p&gt;\n\n&lt;p&gt;The difference between the two is subtle and might be confusing unless you understand that &lt;strong&gt;variable declarations also create properties&lt;/strong&gt; (only on a Variable Object) and that every property in Javascript (well, ECMAScript) have certain flags that describe their properties - ReadOnly, DontEnum and DontDelete.&lt;/p&gt;\n\n&lt;p&gt;Since variable declaration creates property with the DontDelete flag, the difference between &lt;code&gt;var x = 1&lt;/code&gt; and &lt;code&gt;x = 1&lt;/code&gt; (when executed in global scope) is that the former one - variable declaration - creates the DontDelete&apos;able property, and latter one doesn&apos;t. As a consequence, the property created via this implicit assignment can then be deleted from the global object, and the former one - the one created via variable declaration - cannot be deleted.&lt;/p&gt;\n\n&lt;p&gt;But this is just theory of course, and &lt;strong&gt;in practice there are even more differences between the two&lt;/strong&gt;, due to various bugs in implementations (such as those from IE).&lt;/p&gt;\n\n&lt;p&gt;Hope it all makes sense : )&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update 2010/12/16]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In ES5 (ECMAScript 5; recently standardized, 5th edition of the language) there&apos;s a so-called &quot;strict mode&quot;  an opt-in language mode, which slightly changes the behavior of undeclared assignments. In strict mode, assignment to an undeclared identifier is a &lt;strong&gt;ReferenceError&lt;/strong&gt;. The rationale for this was to catch accidental assignments, preventing creation of undesired global properties. Some of the newer browsers have already started rolling support for strict mode. See, for example, &lt;a href=&quot;http://kangax.github.com/es5-compat-table&quot; rel=&quot;noreferrer&quot;&gt;my compat table&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Saying it&apos;s the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;global&lt;/strong&gt;&quot; isn&apos;t entirely accurate.&lt;/p&gt;\n\n&lt;p&gt;It might be better to think of it as the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;nearest&lt;/strong&gt;&quot;. The nearest can surely be global, but that won&apos;t always be the case.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* global scope */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* local scope */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = outer */&lt;/span&gt;\n    local = !&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = outer */&lt;/span&gt;\n        local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = undefined */&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* defaults to defining a global */&lt;/span&gt;\n        public = &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When Javascript is executed in a browser, all your code is surrounded by a with statement, like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Your code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More info on &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;with&lt;/code&gt; - MDN&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since &lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt; , there is no difference between declaring &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;inside window&lt;/strong&gt; and not declaring it at all.&lt;/p&gt;\n\n&lt;p&gt;The difference comes when you&apos;re not directly inside the window, e.g. inside a function or inside a block.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; lets you hide external variables that have the same name. In this way you can simulate a &quot;private&quot; variable, but that&apos;s another topic.&lt;/p&gt;\n\n&lt;p&gt;A rule of thumb is to always use &lt;code&gt;var&lt;/code&gt;, because otherwise you run the risk of introducing subtle bugs.&lt;/p&gt;\n\n&lt;p&gt;EDIT:\nAfter the critiques I received, I would like to emphasize the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;The global scope is &lt;code&gt;window&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Not using &lt;code&gt;var&lt;/code&gt; implicitly declares &lt;code&gt;var&lt;/code&gt; in the global scope (window)&lt;/li&gt;\n&lt;li&gt;Declaring a variable in the global scope (window) using &lt;code&gt;var&lt;/code&gt; is the same as omitting it.&lt;/li&gt;\n&lt;li&gt;Declaring a variable in scopes different from window using &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;is not the same thing&lt;/strong&gt; as declaring a variable without &lt;code&gt;var&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Always declare &lt;code&gt;var&lt;/code&gt; explicitly because it&apos;s good practice&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Always use the &lt;code&gt;var&lt;/code&gt; keyword to declare variables. Why? Good coding practice should be enough of a reason in itself, but omitting it means it is declared in the &lt;strong&gt;global&lt;/strong&gt; scope (a variable like this is called an &quot;implied&quot; global). Douglas Crockford &lt;a href=&quot;http://javascript.crockford.com/code.html#variable%20declarations&quot; rel=&quot;noreferrer&quot;&gt;recommends never using implied globals&lt;/a&gt;, and according to the &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html#//apple_ref/doc/uid/TP40006541&quot; rel=&quot;noreferrer&quot;&gt;Apple JavaScript Coding Guidelines&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Any variable created without the &lt;code&gt;var&lt;/code&gt;\n  keyword is created at the global scope\n  and is not garbage collected when the\n  function returns (because it doesnt\n  go out of scope), presenting the\n  opportunity for a memory leak.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Here&apos;s quite a good example of how you can get caught out from not declaring local variables with &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;i++)\n    {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;();\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;(&lt;code&gt;i&lt;/code&gt; is reset at every iteration of the loop, as it&apos;s not declared locally in the &lt;code&gt;for&lt;/code&gt; loop but globally) eventually resulting in infinite loop&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would say it&apos;s better to use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; in most situations.&lt;/p&gt;\n\n&lt;p&gt;Local variables are always faster than the variables in global scope.&lt;/p&gt;\n\n&lt;p&gt;If you do not use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; to declare a variable, the variable will be in global scope.&lt;/p&gt;\n\n&lt;p&gt;For more information, you can search &quot;scope chain JavaScript&quot; in Google.&lt;/p&gt;\n    ","\n&lt;h1&gt;Don&apos;t use &lt;code&gt;var&lt;/code&gt;!&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;var&lt;/code&gt; was the pre-ES6 way to declare a variable. We are now &lt;em&gt;in the future&lt;/em&gt;, and you should be coding as such.&lt;/p&gt;\n&lt;h2&gt;Use &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; should be used for ~95% of cases. It makes it so the variable reference can&apos;t change, thus array, object, and DOM node properties can change and should likely be &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let&lt;/code&gt; should be be used for any variable expecting to be reassigned. This includes within a for loop. If you ever write &lt;code&gt;varName =&lt;/code&gt; beyond the initialization, use &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Both have block level scoping, as expected in most other languages.&lt;/p&gt;\n    ","\n&lt;p&gt;another difference \ne.g&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = a || [] ; &lt;span class=&quot;hljs-comment&quot;&gt;// works &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;while &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = a || [] ; &lt;span class=&quot;hljs-comment&quot;&gt;// a is undefined error.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; is always a good idea to prevent variables from cluttering the global scope and variables from conflicting with each other, causing unwanted overwriting.&lt;/p&gt;\n    ","\n&lt;p&gt;Without &lt;code&gt;var&lt;/code&gt; - global variable.&lt;/p&gt;\n\n&lt;p&gt;Strongly recommended to &lt;strong&gt;ALWAYS&lt;/strong&gt; use &lt;code&gt;var&lt;/code&gt; statement, because init global variable in local context - is evil. But, if you need this dirty trick, you should write comment at start of page:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* global: varname1, varname2... */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is example code I have written for you to understand this concept:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; \nbar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     \nfooba = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Execute an anonymous function&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    \n    bar = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;             &lt;span class=&quot;hljs-comment&quot;&gt;//overwrites global scope bar&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;           &lt;span class=&quot;hljs-comment&quot;&gt;//a new foo variable is created in this&apos; function&apos;s scope&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooba = &lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;//same as above&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(foo);   &lt;span class=&quot;hljs-comment&quot;&gt;//prints 4&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(bar);   &lt;span class=&quot;hljs-comment&quot;&gt;//prints 100&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(fooba); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 900&lt;/span&gt;\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(foo);       &lt;span class=&quot;hljs-comment&quot;&gt;//prints 5&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(bar);       &lt;span class=&quot;hljs-comment&quot;&gt;//prints 100&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(fooba);     &lt;span class=&quot;hljs-comment&quot;&gt;//prints 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;@Chris S gave a nice example showcasing the practical difference (and danger) between &lt;code&gt;var&lt;/code&gt; and no &lt;code&gt;var&lt;/code&gt;. Here&apos;s another one, I find this one particularly dangerous because the difference is only visible in an asynchronous environment so it can easily slip by during testing.&lt;/p&gt;\n\n&lt;p&gt;As you&apos;d expect the following snippet outputs &lt;code&gt;[&quot;text&quot;]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = []\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;So does the following snippet (note the missing &lt;code&gt;let&lt;/code&gt; before &lt;code&gt;array&lt;/code&gt;):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = []\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Executing the data manipulation asynchronously still produces the same result with a single executor:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;But behaves differently with multiple ones:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Using let however:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As someeone trying to learn this this is how I see it. The above examples were maybe a bit overly complicated for a beginner. &lt;/p&gt;\n\n&lt;p&gt;If you run this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output will read as:  false, false, true, true&lt;/p&gt;\n\n&lt;p&gt;Because it sees the variables in the function as seperate from those outside of it, hence the term local variable and this was because we used var in the assignment. If you take away the var in the function so it now reads like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is false, false, false, false&lt;/p&gt;\n\n&lt;p&gt;This is because rather than creating a new variable in the local scope or function it simply uses the global variables and reassigns them to false. &lt;/p&gt;\n    ","\n&lt;p&gt;I see people are confused when declaring variables with or without &lt;strong&gt;var&lt;/strong&gt; and inside or outside the function. Here is a deep example that will walk you through these steps:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/ozkantarik/L0avu6vh/&quot; rel=&quot;noreferrer&quot;&gt;See the script below in action here at jsfiddle&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined outside the function without var&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined outside the function with var&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting outside of all functions... \\n \\n a, b defined but c, d not defined yet: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n \\n (If I try to show the value of the undefined c or d, console.log would throw &apos;Uncaught ReferenceError: c is not defined&apos; error and script would stop running!)&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function without var&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function with var&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now inside the 1. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    b = b + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    d = d + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After added values inside the 1. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n};\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Run the 1. function again...&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testVar2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function with var&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now inside the 2. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    b = b + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    d = d + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After added values inside the 2. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar2&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now outside of all functions... \\n \\n Final Values: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n You will not be able to see d here because then the value is requested, console.log would throw error &apos;Uncaught ReferenceError: d is not defined&apos; and script would stop. \\n &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;**************\\n Conclusion \\n ************** \\n \\n 1. No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.\\n 2. If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() \\n 3. If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now check console.log for the error when value d is requested next:&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(d);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;\n  \n  &lt;ol&gt;\n  &lt;li&gt;No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.&lt;/li&gt;\n  &lt;li&gt;If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() &lt;/li&gt;\n  &lt;li&gt;If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Inside a code you if you use a variable without using var, then what happens is the automatically var var_name is placed in the global scope eg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = some_value; &lt;span class=&quot;hljs-comment&quot;&gt;/*a has local scope and it cannot be accessed when this\n    function is not active*/&lt;/span&gt;\n    b = a; &lt;span class=&quot;hljs-comment&quot;&gt;/*here it places &quot;var b&quot; at top of script i.e. gives b global scope or\n    uses already defined global variable b */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Besides scopes issue, some folks also mention &lt;a href=&quot;https://www.w3schools.com/js/js_hoisting.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoisting&lt;/a&gt;, but no one gave an example. Here&apos;s one for global scope:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(noErrorCase);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; noErrorCase = &lt;span class=&quot;hljs-string&quot;&gt;&quot;you will reach that point&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(runTimeError);\nrunTimeError = &lt;span class=&quot;hljs-string&quot;&gt;&quot;you won&apos;t reach that point&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Without using &quot;var&quot; variables can only define when set a value. In example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;my_var;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;cannot work in &lt;strong&gt;global scope&lt;/strong&gt; or &lt;strong&gt;any other scope&lt;/strong&gt;. It should be with value like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;my_var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand you can define a vaiable like;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; my_var;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Its value is &lt;code&gt;undefined&lt;/code&gt; ( Its value is not &lt;code&gt;null&lt;/code&gt; and it is not equal to &lt;code&gt;null&lt;/code&gt; interestingly.).&lt;/p&gt;\n    ","\n&lt;p&gt;You should use var keyword unless you intend to have the variable attached to window object in browser. &lt;a href=&quot;http://www.yourtechchick.com/javascript/difference-between-javascript-variables-with-var-and-without-var/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s a link that explains scoping and difference between glocal scoping and local scoping with and wihtout var keyword.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When variables get defined without the use of var keyword, what it looks like is a simple assignment operation.&lt;/p&gt;\n\n&lt;p&gt;When the value is assigned to a variable in javascript, the interpreter first tries to find the variable declaration in the same context/scope as that of assignment. When the interpreter executes &lt;code&gt;dummyVariable = 20&lt;/code&gt;, it looks up for the declaration of dummyVariable at beginning of the function. \n(Since all Variable declarations are moved to the beginning of the context by javascript interpreter and this is called hoisting)&lt;/p&gt;\n\n&lt;p&gt;You may also want to look at &lt;a href=&quot;http://www.yourtechchick.com/javascript/what-is-hoisting-in-javascript-javascript-hoisting-explained/&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoisting in javascript&lt;/a&gt;&lt;/p&gt;\n    "],"293":["\n&lt;h1&gt;Introduction&lt;/h1&gt;\n&lt;p&gt;The correct minimum set of headers that works across all mentioned clients (and proxies):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Cache-Control: no-cache, no-store, must-revalidate\nPragma: no-cache\nExpires: 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/a&gt; is per the HTTP 1.1 spec for clients and proxies (and implicitly required by some clients next to &lt;code&gt;Expires&lt;/code&gt;). The &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Pragma&lt;/code&gt;&lt;/a&gt; is per the HTTP 1.0 spec for prehistoric clients. The &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Expires&lt;/code&gt;&lt;/a&gt; is per the HTTP 1.0 and 1.1 specs for clients and proxies. In HTTP 1.1, the &lt;code&gt;Cache-Control&lt;/code&gt; takes precedence over &lt;code&gt;Expires&lt;/code&gt;, so it&apos;s after all for HTTP 1.0 proxies only.&lt;/p&gt;\n&lt;p&gt;If you don&apos;t care about IE6 and its broken caching when serving pages over HTTPS with only &lt;code&gt;no-store&lt;/code&gt;, then you could omit &lt;code&gt;Cache-Control: no-cache&lt;/code&gt;.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Cache-Control: no-store, must-revalidate\nPragma: no-cache\nExpires: 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you don&apos;t care about IE6 nor HTTP 1.0 clients (HTTP 1.1 was introduced in 1997), then you could omit &lt;code&gt;Pragma&lt;/code&gt;.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Cache-Control: no-store, must-revalidate\nExpires: 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you don&apos;t care about HTTP 1.0 proxies either, then you could omit &lt;code&gt;Expires&lt;/code&gt;.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Cache-Control: no-store, must-revalidate\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On the other hand, if the server auto-includes a valid &lt;code&gt;Date&lt;/code&gt; header, then you could theoretically omit &lt;code&gt;Cache-Control&lt;/code&gt; too and rely on &lt;code&gt;Expires&lt;/code&gt; only.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Date: Wed, 24 Aug 2016 18:32:02 GMT\nExpires: 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But that may fail if e.g. the end-user manipulates the operating system date and the client software is relying on it.&lt;/p&gt;\n&lt;p&gt;Other &lt;code&gt;Cache-Control&lt;/code&gt; parameters such as &lt;code&gt;max-age&lt;/code&gt; are irrelevant if the abovementioned &lt;code&gt;Cache-Control&lt;/code&gt; parameters are specified. The &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/a&gt; header as included in most other answers here is &lt;em&gt;only&lt;/em&gt; interesting if you &lt;strong&gt;actually want&lt;/strong&gt; to cache the request, so you don&apos;t need to specify it at all.&lt;/p&gt;\n&lt;h1&gt;How to set it?&lt;/h1&gt;\n&lt;p&gt;Using PHP:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control: no-cache, no-store, must-revalidate&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.1.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma: no-cache&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.0.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires: 0&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Java Servlet, or Node.js:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;response.setHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.1.&lt;/span&gt;\nresponse.setHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.0.&lt;/span&gt;\nresponse.setHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using ASP.NET-MVC&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Response.Cache.SetCacheability(HttpCacheability.NoCache);  &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.1.&lt;/span&gt;\nResponse.Cache.AppendCacheExtension(&lt;span class=&quot;hljs-string&quot;&gt;&quot;no-store, must-revalidate&quot;&lt;/span&gt;);\nResponse.AppendHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.0.&lt;/span&gt;\nResponse.AppendHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using ASP.NET Web API:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// `response` is an instance of System.Net.Http.HttpResponseMessage&lt;/span&gt;\nresponse.Headers.CacheControl = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CacheControlHeaderValue\n{\n    NoCache = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    NoStore = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    MustRevalidate = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n};\nresponse.Headers.Pragma.ParseAdd(&lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// We can&apos;t use `response.Content.Headers.Expires` directly&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// since it allows only `DateTimeOffset?` values.&lt;/span&gt;\nresponse.Content?.Headers.TryAddWithoutValidation(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.&lt;/span&gt;ToString()); \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using ASP.NET:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Response.AppendHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.1.&lt;/span&gt;\nResponse.AppendHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.0.&lt;/span&gt;\nResponse.AppendHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using ASP.NET Core v3&lt;/p&gt;\n&lt;pre class=&quot;lang-c# s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// using Microsoft.Net.Http.Headers&lt;/span&gt;\nResponse.Headers[HeaderNames.CacheControl] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt;;\nResponse.Headers[HeaderNames.Expires] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\nResponse.Headers[HeaderNames.Pragma] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using ASP:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Response.addHeader &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; HTTP 1.1.&lt;/span&gt;\nResponse.addHeader &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; HTTP 1.0.&lt;/span&gt;\nResponse.addHeader &lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Ruby on Rails:&lt;/p&gt;\n&lt;pre class=&quot;lang-ruby s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;headers[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# HTTP 1.1.&lt;/span&gt;\nheaders[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# HTTP 1.0.&lt;/span&gt;\nheaders[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Python/Flask:&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;response = make_response(render_template(...))\nresponse.headers[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# HTTP 1.1.&lt;/span&gt;\nresponse.headers[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# HTTP 1.0.&lt;/span&gt;\nresponse.headers[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Python/Django:&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;response[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# HTTP 1.1.&lt;/span&gt;\nresponse[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# HTTP 1.0.&lt;/span&gt;\nresponse[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Python/Pyramid:&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;request.response.headerlist.extend(\n    (\n        (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cache-Control&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no-cache, no-store, must-revalidate&apos;&lt;/span&gt;),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Pragma&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no-cache&apos;&lt;/span&gt;),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Expires&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;)\n    )\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Go:&lt;/p&gt;\n&lt;pre class=&quot;lang-default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;responseWriter.&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt;().&lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.1.&lt;/span&gt;\nresponseWriter.&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt;().&lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// HTTP 1.0.&lt;/span&gt;\nresponseWriter.&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt;().&lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Proxies.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Clojure (require Ring utils):&lt;/p&gt;\n&lt;pre class=&quot;lang-clj s-code-block&quot;&gt;&lt;code class=&quot;hljs language-clojure&quot;&gt;(&lt;span class=&quot;hljs-name&quot;&gt;require&lt;/span&gt; &apos;[ring.util.response &lt;span class=&quot;hljs-symbol&quot;&gt;:as&lt;/span&gt; r])\n(&lt;span class=&quot;hljs-name&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; response\n  (&lt;span class=&quot;hljs-name&quot;&gt;r/header&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt;)\n  (&lt;span class=&quot;hljs-name&quot;&gt;r/header&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;)\n  (&lt;span class=&quot;hljs-name&quot;&gt;r/header&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Apache &lt;code&gt;.htaccess&lt;/code&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;IfModule&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;mod_headers.c&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Header set Cache-Control &quot;no-cache, no-store, must-revalidate&quot;\n    Header set Pragma &quot;no-cache&quot;\n    Header set Expires 0\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;IfModule&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using HTML:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;HTML meta tags vs HTTP response headers&lt;/h1&gt;\n&lt;p&gt;Important to know is that when an HTML page is served over an HTTP connection, and a header is present in &lt;strong&gt;both&lt;/strong&gt; the HTTP response headers and the HTML &lt;code&gt;&amp;lt;meta http-equiv&amp;gt;&lt;/code&gt; tags, then the one specified in the HTTP response header will get precedence over the HTML meta tag. The HTML meta tag will only be used when the page is viewed from a local disk file system via a &lt;code&gt;file://&lt;/code&gt; URL. See also &lt;a href=&quot;http://www.w3.org/TR/html4/charset.html#h-5.2.2&quot; rel=&quot;noreferrer&quot;&gt;W3 HTML spec chapter 5.2.2&lt;/a&gt;. Take care with this when you don&apos;t specify them programmatically because the webserver can namely include some default values.&lt;/p&gt;\n&lt;p&gt;Generally, you&apos;d better just &lt;strong&gt;not&lt;/strong&gt; specify the HTML meta tags to avoid confusion by starters and rely on hard HTTP response headers. Moreover, specifically those &lt;code&gt;&amp;lt;meta http-equiv&amp;gt;&lt;/code&gt; tags are &lt;a href=&quot;http://validator.w3.org&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;invalid&lt;/strong&gt;&lt;/a&gt; in HTML5. Only the &lt;code&gt;http-equiv&lt;/code&gt; values listed in &lt;a href=&quot;http://w3c.github.io/html/document-metadata.html#pragma-directives&quot; rel=&quot;noreferrer&quot;&gt;HTML5 specification&lt;/a&gt; are allowed.&lt;/p&gt;\n&lt;h1&gt;Verifying the actual HTTP response headers&lt;/h1&gt;\n&lt;p&gt;To verify the one and the other, you can see/debug them in the HTTP traffic monitor of the web browser&apos;s developer toolset. You can get there by pressing F12 in Chrome/Firefox23+/IE9+, and then opening the &quot;Network&quot; or &quot;Net&quot; tab panel, and then clicking the HTTP request of interest to uncover all detail about the HTTP request and response. The &lt;a href=&quot;https://i.stack.imgur.com/fSnXH.png&quot; rel=&quot;noreferrer&quot;&gt;below screenshot&lt;/a&gt; is from Chrome:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/fSnXH.png&quot; alt=&quot;Chrome developer toolset HTTP traffic monitor showing HTTP response headers on stackoverflow.com&quot;&gt;&lt;/p&gt;\n&lt;h1&gt;I want to set those headers on file downloads too&lt;/h1&gt;\n&lt;p&gt;First of all, this question and answer are targeted on &quot;web pages&quot; (HTML pages), not &quot;file downloads&quot; (PDF, zip, Excel, etc). You&apos;d better have them cached and make use of some file version identifier somewhere in the URI path or query string to force a redownload on a changed file. When applying those no-cache headers on file downloads anyway, then beware of the IE7/8 bug when serving a file download over HTTPS instead of HTTP. For detail, see &lt;a href=&quot;https://stackoverflow.com/q/5034454&quot;&gt;IE cannot download foo.jsf. IE was not able to open this internet site. The requested site is either unavailable or cannot be found&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;(hey, everyone: please don&apos;t just mindlessly copy&amp;amp;paste all headers you can find)&lt;/p&gt;\n&lt;p&gt;First of all, &lt;a href=&quot;http://httpwg.org/specs/rfc7234.html#history.lists&quot; rel=&quot;noreferrer&quot;&gt;Back button history is &lt;em&gt;not a cache&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The freshness model (Section 4.2) does not necessarily apply to history mechanisms. That is, a history mechanism can display a previous representation even if it has expired.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In the old HTTP spec, the wording was even stronger, explicitly telling browsers to disregard cache directives for back button history.&lt;/p&gt;\n&lt;p&gt;Back is supposed to go back in time (to the time when the user &lt;em&gt;was&lt;/em&gt; logged in). It does not navigate forward to a previously opened URL.&lt;/p&gt;\n&lt;p&gt;However, in practice, the cache can influence the back button, in very specific circumstances:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Page &lt;em&gt;must&lt;/em&gt; be delivered over &lt;strong&gt;HTTPS&lt;/strong&gt;, otherwise, this cache-busting won&apos;t be reliable. Plus, if you&apos;re not using HTTPS, then your page is vulnerable to login stealing in many other ways.&lt;/li&gt;\n&lt;li&gt;You must send &lt;code&gt;Cache-Control: no-store, must-revalidate&lt;/code&gt; (some browsers observe &lt;code&gt;no-store&lt;/code&gt; and some observe &lt;code&gt;must-revalidate&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You &lt;em&gt;never&lt;/em&gt; need any of:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; with cache headers  it doesn&apos;t work at all. Totally useless.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;post-check&lt;/code&gt;/&lt;code&gt;pre-check&lt;/code&gt;  it&apos;s an IE-only directive that only applies to &lt;em&gt;cachable&lt;/em&gt; resources.&lt;/li&gt;\n&lt;li&gt;Sending the same header twice or in dozen parts. Some PHP snippets out there actually replace previous headers, resulting in only the last one being sent.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you want, you could add:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;no-cache&lt;/code&gt; or &lt;code&gt;max-age=0&lt;/code&gt;, which will make resource (URL) &quot;stale&quot; and require browsers to check with the server if there&apos;s a newer version (&lt;code&gt;no-store&lt;/code&gt; already implies this even stronger).&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt; with a date in the past for HTTP/1.0 clients (although &lt;em&gt;real&lt;/em&gt; HTTP/1.0-only clients are completely non-existent these days).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;Bonus: &lt;a href=&quot;http://httpwg.org/specs/rfc7234.html&quot; rel=&quot;noreferrer&quot;&gt;The new HTTP caching RFC&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As @Kornel stated, what you want is not to deactivate the cache, but to deactivate the history buffer. Different browsers have their own subtle ways to disable the history buffer.&lt;/p&gt;\n\n&lt;p&gt;In Chrome (v28.0.1500.95 m) we can do this only by &lt;code&gt;Cache-Control: no-store&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In FireFox (v23.0.1) any one of these will work:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt; (https only)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt; (https only)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Vary: *&lt;/code&gt; (https only)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In Opera (v12.15) we only can do this by &lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt; (https only).&lt;/p&gt;\n\n&lt;p&gt;In Safari (v5.1.7, 7534.57.2) any one of these will work:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt; in html&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt; (https only)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In IE8 (v8.0.6001.18702IC) any one of these will work:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate, max-age=0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt; (https only)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Vary: *&lt;/code&gt; (https only)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;Combining the above gives us this solution which works for Chrome 28, FireFox 23, IE8, Safari 5.1.7, and Opera 12.15:&lt;/strong&gt; &lt;code&gt;Cache-Control: no-store, must-revalidate&lt;/code&gt; (https only)&lt;/p&gt;\n\n&lt;p&gt;Note that https is needed because Opera wouldn&apos;t deactivate history buffer for plain http pages. If you really can&apos;t get https and you are prepared to ignore Opera, the best you can do is this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Cache-Control: no-store\n&amp;lt;body onunload=&quot;&quot;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Below shows the raw logs of my tests:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;HTTP:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: none&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: none&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate, max-age=0&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, must-revalidate, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: none&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;HTTPS:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: none&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: none&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/sub&gt;\n&lt;br&gt;Success: Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, must-revalidate, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/sub&gt;\n&lt;br&gt;Success: Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate, max-age=0&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7&lt;/sub&gt;\n&lt;br&gt;Success: IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, no-store, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache, no-store, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7, Opera 12.15&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, &lt;/sub&gt;\n&lt;br&gt;Success: IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, &lt;/sub&gt;\n&lt;br&gt;Success: IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: 0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, &lt;/sub&gt;\n&lt;br&gt;Success: IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, must-revalidate, max-age=0, proxy-revalidate, s-maxage=0&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt;&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, FireFox 23, Safari 5.1.7, &lt;/sub&gt;\n&lt;br&gt;Success: IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Expires: Sat, 12 Oct 1991 05:00:00 GMT&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;\n&lt;br&gt;&lt;code&gt;Vary: *&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: Chrome 28, Safari 5.1.7&lt;/sub&gt;\n&lt;br&gt;Success: FireFox 23, IE8, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store, must-revalidate&lt;/code&gt;\n&lt;br&gt;&lt;sub&gt;Fail: none&lt;/sub&gt;\n&lt;br&gt;Success: Chrome 28, FireFox 23, IE8, Safari 5.1.7, Opera 12.15&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I found the web.config route useful (tried to add it to the answer but doesn&apos;t seem to have been accepted so posting here)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;system.webServer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;httpProtocol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;customHeaders&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache, no-store, must-revalidate&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- HTTP 1.1. --&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- HTTP 1.0. --&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expires&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Proxies. --&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;customHeaders&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;httpProtocol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;system.webServer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;And here is the express / node.js way of doing the same:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;app.&lt;span class=&quot;hljs-title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;req, res, next&lt;/span&gt;) {\n    res.&lt;span class=&quot;hljs-title function_&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cache-Control&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no-cache, no-store, must-revalidate&apos;&lt;/span&gt;);\n    res.&lt;span class=&quot;hljs-title function_&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Pragma&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no-cache&apos;&lt;/span&gt;);\n    res.&lt;span class=&quot;hljs-title function_&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Expires&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I found that all of the answers on this page still had problems.  In particular, I noticed that none of them would stop IE8 from using a cached version of the page when you accessed it by hitting the back button.&lt;/p&gt;\n\n&lt;p&gt;After much research and testing, I found that the only two headers I really needed were:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Cache-Control: no-store&lt;br&gt;\n  Vary: *&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;For an explanation of the Vary header, check out &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.6&quot; rel=&quot;noreferrer&quot;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.6&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;On IE6-8, FF1.5-3.5, Chrome 2-3, Safari 4, and Opera 9-10, these headers caused the page to be requested from the server when you click on a link to the page, or put the URL directly in the address bar.  That covers about &lt;a href=&quot;http://marketshare.hitslink.com/browser-market-share.aspx?qprid=2&quot; rel=&quot;noreferrer&quot;&gt;99%&lt;/a&gt; of all browsers in use as of Jan &apos;10.&lt;/p&gt;\n\n&lt;p&gt;On IE6, and Opera 9-10, hitting the back button still caused the cached version to be loaded.  On all other browsers I tested, they did fetch a fresh version from the server.  So far, I haven&apos;t found any set of headers that will cause those browsers to not return cached versions of pages when you hit the back button.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;  After writing this answer, I realized that our web server is identifying itself as an HTTP 1.0 server.  The headers I&apos;ve listed are the correct ones in order for responses from an HTTP 1.0 server to not be cached by browsers.  For an HTTP 1.1 server, look at BalusC&apos;s &lt;a href=&quot;https://stackoverflow.com/questions/49547/making-sure-a-web-page-is-not-cached-across-all-browsers/2068407#2068407&quot;&gt;answer&lt;/a&gt;.  &lt;/p&gt;\n    ","\n&lt;p&gt;After a bit of research we came up with the following list of headers that seemed to cover most browsers:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21&quot; rel=&quot;nofollow noreferrer&quot;&gt;Expires&lt;/a&gt;: Sat, 26 Jul 1997 05:00:00 GMT&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cache-Control&lt;/a&gt;: &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;no-cache&lt;/a&gt;, private, &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4&quot; rel=&quot;nofollow noreferrer&quot;&gt;must-revalidate&lt;/a&gt;, max-stale=0, post-check=0, pre-check=0 no-store&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pragma&lt;/a&gt;: no-cache&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In ASP.NET we added these using the following snippet:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Response.ClearHeaders(); \nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;); //HTTP 1.1\nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;private&quot;); // HTTP 1.1\nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;no-store&quot;); // HTTP 1.1\nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;must-revalidate&quot;); // HTTP 1.1\nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;max-stale=0&quot;); // HTTP 1.1 \nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;post-check=0&quot;); // HTTP 1.1 \nResponse.AppendHeader(&quot;Cache-Control&quot;, &quot;pre-check=0&quot;); // HTTP 1.1 \nResponse.AppendHeader(&quot;Pragma&quot;, &quot;no-cache&quot;); // HTTP 1.0 \nResponse.AppendHeader(&quot;Expires&quot;, &quot;Sat, 26 Jul 1997 05:00:00 GMT&quot;); // HTTP 1.0 \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Found from: &lt;a href=&quot;http://forums.asp.net/t/1013531.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://forums.asp.net/t/1013531.aspx&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The use of the pragma header in the response is a wives tale. RFC2616 only defines it as a request header&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.mnot.net/cache_docs/#PRAGMA&quot; rel=&quot;noreferrer&quot;&gt;http://www.mnot.net/cache_docs/#PRAGMA&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;DISCLAIMER:  I strongly suggest reading @BalusC&apos;s answer.  After reading the following caching tutorial: &lt;a href=&quot;http://www.mnot.net/cache_docs/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.mnot.net/cache_docs/&lt;/a&gt; (I recommend you read it, too), I believe it to be correct.  However, for historical reasons (and because I have tested it myself), I will include my original answer below:&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I tried the &apos;accepted&apos; answer for PHP, which did not work for me.  Then I did a little research, found a slight variant, tested it, and it worked.  Here it is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;header(&apos;Cache-Control: no-store, private, no-cache, must-revalidate&apos;);     // HTTP/1.1\nheader(&apos;Cache-Control: pre-check=0, post-check=0, max-age=0, max-stale = 0&apos;, false);  // HTTP/1.1\nheader(&apos;Pragma: public&apos;);\nheader(&apos;Expires: Sat, 26 Jul 1997 05:00:00 GMT&apos;);                  // Date in the past  \nheader(&apos;Expires: 0&apos;, false); \nheader(&apos;Last-Modified: &apos;.gmdate(&apos;D, d M Y H:i:s&apos;) . &apos; GMT&apos;);\nheader (&apos;Pragma: no-cache&apos;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That should work.  The problem was that when setting the same part of the header twice, if the &lt;code&gt;false&lt;/code&gt; is not sent as the second argument to the header function, header function will simply overwrite the previous &lt;code&gt;header()&lt;/code&gt; call.  So, when setting the &lt;code&gt;Cache-Control&lt;/code&gt;, for example if one does not want to put all the arguments in one &lt;code&gt;header()&lt;/code&gt; function call, he must do something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;header(&apos;Cache-Control: this&apos;);\nheader(&apos;Cache-Control: and, this&apos;, false);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See more complete documentation &lt;a href=&quot;http://in.php.net/header&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a bug in IE6&lt;/p&gt;\n\n&lt;p&gt;Content with &quot;Content-Encoding: gzip&quot; is always cached even if you use &quot;Cache-Control: no-cache&quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://support.microsoft.com/kb/321722&quot; rel=&quot;noreferrer&quot;&gt;http://support.microsoft.com/kb/321722&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can disable gzip compression for IE6 users (check the user agent for &quot;MSIE 6&quot;)&lt;/p&gt;\n    ","\n&lt;p&gt;For ASP.NET Core, create a simple middleware class:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class NoCacheMiddleware\n{\n    private readonly RequestDelegate m_next;\n\n    public NoCacheMiddleware( RequestDelegate next )\n    {\n        m_next = next;\n    }\n\n    public async Task Invoke( HttpContext httpContext )\n    {\n        httpContext.Response.OnStarting( ( state ) =&amp;gt;\n        {\n            // ref: http://stackoverflow.com/questions/49547/making-sure-a-web-page-is-not-cached-across-all-browsers\n            httpContext.Response.Headers.Append( &quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot; );\n            httpContext.Response.Headers.Append( &quot;Pragma&quot;, &quot;no-cache&quot; );\n            httpContext.Response.Headers.Append( &quot;Expires&quot;, &quot;0&quot; );\n            return Task.FromResult( 0 );\n        }, null );\n\n        await m_next.Invoke( httpContext );\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then register it with &lt;code&gt;Startup.cs&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;app.UseMiddleware&amp;lt;NoCacheMiddleware&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Make sure you add this somewhere after&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;app.UseStaticFiles();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;These directives does not mitigate any security risk. They are really intended to force UA&apos;s to refresh volatile information, not keep UA&apos;s from being retaining information. See &lt;a href=&quot;https://stackoverflow.com/questions/64059/is-there-a-way-to-keep-a-page-from-rendering-once-a-person-has-logged-out-but-h&quot;&gt;this similar question&lt;/a&gt;. At the very least, there is no guarantee that any routers, proxies, etc. will not ignore the caching directives as well.&lt;/p&gt;\n\n&lt;p&gt;On a more positive note, policies regarding physical access to computers, software installation, and the like will put you miles ahead of most firms in terms of security. If the consumers of this information are members of the public, the only thing you can really do is help them understand that once the information hits their machine, that machine is &lt;strong&gt;their&lt;/strong&gt; responsibility, not yours.&lt;/p&gt;\n    ","\n&lt;p&gt;The RFC for &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot; rel=&quot;noreferrer&quot;&gt;HTTP 1.1&lt;/a&gt; says the proper method is to add an HTTP Header for:&lt;/p&gt;\n\n&lt;p&gt;Cache-Control: no-cache&lt;/p&gt;\n\n&lt;p&gt;Older browsers may ignore this if they are not properly compliant to HTTP 1.1. For those you can try the header:&lt;/p&gt;\n\n&lt;p&gt;Pragma: no-cache&lt;/p&gt;\n\n&lt;p&gt;This is also supposed to work for HTTP 1.1 browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;Setting the modified http header to some date in 1995 usually does the trick.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example:&lt;/p&gt;\n\n&lt;pre&gt;Expires: Wed, 15 Nov 1995 04:58:08 GMT\nLast-Modified: Wed, 15 Nov 1995 04:58:08 GMT\nCache-Control: no-cache, must-revalidate\n&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://php.net/header&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP documentation for the header function&lt;/a&gt; has a rather complete example (contributed by a third party):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    header(&apos;Pragma: public&apos;);\n    header(&quot;Expires: Sat, 26 Jul 1997 05:00:00 GMT&quot;);                  // Date in the past   \n    header(&apos;Last-Modified: &apos;.gmdate(&apos;D, d M Y H:i:s&apos;) . &apos; GMT&apos;);\n    header(&apos;Cache-Control: no-store, no-cache, must-revalidate&apos;);     // HTTP/1.1\n    header(&apos;Cache-Control: pre-check=0, post-check=0, max-age=0&apos;, false);    // HTTP/1.1\n    header (&quot;Pragma: no-cache&quot;);\n    header(&quot;Expires: 0&quot;, false);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you&apos;re facing download problems with IE6-IE8 over SSL and cache:no-cache header (and similar values) with MS Office files you can use cache:private,no-store header and return file on POST request. It works.  &lt;/p&gt;\n    ","\n&lt;p&gt;in my case i fix the problem in chrome with this&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;form id=&quot;form1&quot; runat=&quot;server&quot; autocomplete=&quot;off&quot;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where i need to clear the content of a previus form data when the users click button back for security reasons&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted answer does not appear to work for IIS7+, going by the large number of questions about cache headers not being sent in II7:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/10908115/325727&quot;&gt;Something is forcing responses to have cache-control: private in IIS7&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/6165218/325727&quot;&gt;IIS7: Cache Setting Not Working... why?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/1556026/325727&quot;&gt;IIS7 + ASP.NET MVC Client Caching Headers Not Working&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/17491296/325727&quot;&gt;Set cache-control for aspx pages&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/22443932/325727&quot;&gt;Cache-control: no-store, must-revalidate not sent to client browser in IIS7 + ASP.NET MVC&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And so on&lt;/p&gt;\n\n&lt;p&gt;The accepted answer is correct in which headers must be set, but not in how they must be set.  This way works with IIS7:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Response.Cache.SetCacheability(HttpCacheability.NoCache);\nResponse.Cache.AppendCacheExtension(&quot;no-store, must-revalidate&quot;);\nResponse.AppendHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);\nResponse.AppendHeader(&quot;Expires&quot;, &quot;-1&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first line sets &lt;code&gt;Cache-control&lt;/code&gt; to &lt;code&gt;no-cache&lt;/code&gt;, and the second line adds the other attributes &lt;code&gt;no-store, must-revalidate&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve had best and most consistent results across all browsers by setting \n    Pragma: no-cache&lt;/p&gt;\n    ","\n&lt;p&gt;The headers in the answer provided by BalusC does not prevent Safari 5 (and possibly older versions as well) from displaying content from the browser cache when using the browser&apos;s back button. A way to prevent this is to add an empty onunload event handler attribute to the body tag:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;body onunload=&quot;&quot;&amp;gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This hack apparently breaks the back-forward cache in Safari: &lt;a href=&quot;https://stackoverflow.com/questions/158319/cross-browser-onload-event-and-the-back-button&quot;&gt;Is there a cross-browser onload event when clicking the back button?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Also, just for good measure, make sure you reset the &lt;code&gt;ExpiresDefault&lt;/code&gt; in your &lt;code&gt;.htaccess&lt;/code&gt; file if you&apos;re using that to enable caching.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ExpiresDefault &quot;access plus 0 seconds&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Afterwards, you can use &lt;code&gt;ExpiresByType&lt;/code&gt; to set specific values for the files you want to cache:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ExpiresByType image/x-icon &quot;access plus 3 month&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This may also come in handy if your dynamic files e.g. php, etc. are being cached by the browser, and you can&apos;t figure out why. Check &lt;code&gt;ExpiresDefault&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to the headers consider serving your page via &lt;strong&gt;https&lt;/strong&gt;.  Many browsers will not cache https by default.&lt;/p&gt;\n    ","\n&lt;pre&gt;&lt;code&gt;//In .net MVC\n[OutputCache(NoStore = true, Duration = 0, VaryByParam = &quot;*&quot;)]\npublic ActionResult FareListInfo(long id)\n{\n}\n\n// In .net webform\n&amp;lt;%@ OutputCache NoStore=&quot;true&quot; Duration=&quot;0&quot; VaryByParam=&quot;*&quot; %&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To complete &lt;a href=&quot;https://stackoverflow.com/users/157882&quot;&gt;BalusC&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://stackoverflow.com/questions/49547/making-sure-a-web-page-is-not-cached-across-all-browsers/2068407#2068407&quot;&gt;ANSWER&lt;/a&gt;\nIf you are using perl you can use CGI to add HTTP headers.&lt;/p&gt;\n\n&lt;p&gt;Using Perl:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Use CGI;    \nsub set_new_query() {\n        binmode STDOUT, &quot;:utf8&quot;;\n        die if defined $query;\n        $query = CGI-&amp;gt;new();\n        print $query-&amp;gt;header(\n                        -expires       =&amp;gt; &apos;Sat, 26 Jul 1997 05:00:00 GMT&apos;,\n                        -Pragma        =&amp;gt; &apos;no-cache&apos;,\n                        -Cache_Control =&amp;gt; join(&apos;, &apos;, qw(\n                                            private\n                                            no-cache\n                                            no-store\n                                            must-revalidate\n                                            max-age=0\n                                            pre-check=0\n                                            post-check=0 \n                                           ))\n        );\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using apache httpd.conf&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;\\.(html|htm|js|css|pl)$&quot;&amp;gt;\nFileETag None\n&amp;lt;ifModule mod_headers.c&amp;gt;\nHeader unset ETag\nHeader set Cache-Control &quot;max-age=0, no-cache, no-store, must-revalidate&quot;\nHeader set Pragma &quot;no-cache&quot;\nHeader set Expires &quot;Wed, 11 Jan 1984 05:00:00 GMT&quot;\n&amp;lt;/ifModule&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;\n\n&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When I tried to use the html META, browsers ignored them and cached the page.&lt;/p&gt;\n    ","\n&lt;p&gt;I just want to point out that if someone wants to prevent caching ONLY dynamic content, adding those additional headers should be made programmatically.&lt;/p&gt;\n\n&lt;p&gt;I edited configuration file of my project to append no-cache headers, but that also disabled caching static content, which isn&apos;t usually desirable.\nModifying response headers in code assures that images and style files will be cached.&lt;/p&gt;\n\n&lt;p&gt;This is quite obvious, yet still worth mentioning.&lt;/p&gt;\n\n&lt;p&gt;And another caution. Be careful using ClearHeaders method from HttpResponse class. It may give you some bruises if you use it recklessly. Like it gave me. &lt;/p&gt;\n\n&lt;p&gt;After redirecting on ActionFilterAttribute event the consequences of clearing all headers are losing all session data and data in TempData storage. It&apos;s safer to redirect from an Action or don&apos;t clear headers when redirection is taking place.&lt;/p&gt;\n\n&lt;p&gt;On second thought I discourage all to use ClearHeaders method. It&apos;s better to remove headers separately. And to set Cache-Control header properly I&apos;m using this code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;filterContext.HttpContext.Response.Cache.SetCacheability(HttpCacheability.NoCache);\nfilterContext.HttpContext.Response.Cache.AppendCacheExtension(&quot;no-store, must-revalidate&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had no luck with &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;meta&amp;gt;&lt;/code&gt; elements. Adding HTTP cache related parameters directly (outside of the HTML doc) does indeed work for me.&lt;/p&gt;\n\n&lt;p&gt;Sample code in Python using web.py &lt;code&gt;web.header&lt;/code&gt; calls follows. I purposefully redacted my personal irrelevant utility code.&lt;/p&gt;\n\n&lt;pre&gt;    import web\n    import sys\n    import PERSONAL-UTILITIES\n\n    myname = &quot;main.py&quot;\n\n    urls = (\n        &apos;/&apos;, &apos;main_class&apos;\n    )\n\n    main = web.application(urls, globals())\n\n    render = web.template.render(&quot;templates/&quot;, base=&quot;layout&quot;, cache=False)\n\n    class main_class(object):\n        def GET(self):\n            web.header(&quot;Cache-control&quot;,&quot;no-cache, no-store, must-revalidate&quot;)\n            web.header(&quot;Pragma&quot;, &quot;no-cache&quot;)\n            web.header(&quot;Expires&quot;, &quot;0&quot;)\n            return render.main_form()\n\n        def POST(self):\n            msg = &quot;POSTed:&quot;\n            form = web.input(function = None)\n            web.header(&quot;Cache-control&quot;,&quot;no-cache, no-store, must-revalidate&quot;)\n            web.header(&quot;Pragma&quot;, &quot;no-cache&quot;)\n            web.header(&quot;Expires&quot;, &quot;0&quot;)\n            return render.index_laid_out(greeting = msg + form.function)\n\n    if __name__ == &quot;__main__&quot;:\n        nargs = len(sys.argv)\n        # Ensure that there are enough arguments after python program name\n        if nargs != 2:\n            LOG-AND-DIE(&quot;%s: Command line error, nargs=%s, should be 2&quot;, myname, nargs)\n        # Make sure that the TCP port number is numeric\n        try:\n            tcp_port = int(sys.argv[1])\n        except Exception as e:\n            LOG-AND-DIE (&quot;%s: tcp_port = int(%s) failed (not an integer)&quot;, myname, sys.argv[1])\n        # All is well!\n        JUST-LOG(&quot;%s: Running on port %d&quot;, myname, tcp_port)\n        web.httpserver.runsimple(main.wsgifunc(), (&quot;localhost&quot;, tcp_port))\n        main.run()\n\n&lt;/pre&gt;\n    ","\n&lt;p&gt;See this link to a Case Study on Caching:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://securityevaluators.com/knowledge/case_studies/caching/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://securityevaluators.com/knowledge/case_studies/caching/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Summary, according to the article, only &lt;code&gt;Cache-Control: no-store&lt;/code&gt; works on Chrome, Firefox and IE.  IE accepts other controls, but Chrome and Firefox do not.  The link is a good read complete with the history of caching and documenting proof of concept.&lt;/p&gt;\n    ","\n&lt;p&gt;i have solved in this way.&lt;/p&gt;\n\n&lt;p&gt;2 considerations:&lt;/p&gt;\n\n&lt;p&gt;1) the server side events are not fired on back click, instead of javascript.&lt;/p&gt;\n\n&lt;p&gt;2) i have 2 javascript to read/write cookies&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function setCookie(name, value, days)\n{\n    var expires = &quot;&quot;;\n    if (days)\n    {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = &quot;; expires=&quot; + date.toUTCString();\n    }\n    document.cookie = name + &quot;=&quot; + (value || &quot;&quot;) + expires + &quot;; path=/&quot;;\n}\n\nfunction getCookie(name)\n{\n    var nameEQ = name + &quot;=&quot;;\n    var ca = document.cookie.split(&apos;;&apos;);\n\n    for (var i = ca.length - 1; i &amp;gt;= 0; i--)\n    {\n        var c = ca[i];\n        while (c.charAt(0) == &apos; &apos;)\n        {\n            c = c.substring(1, c.length);\n        }\n\n        if (c.indexOf(nameEQ) == 0)\n        {\n            return c.substring(nameEQ.length, c.length);\n        }\n    }\n    return null;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in my Page_Load i inserted this: (this is NOT fired on back click)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    protected void Page_Load(object sender, EventArgs e)\n    {\n       Page.RegisterClientScriptBlock(&quot;&quot;, &quot;&amp;lt;script&amp;gt;setCookie(&apos;&quot; + Session.SessionID + &quot;&apos;, &apos;&quot; + Login + &quot;&apos;, &apos;100&apos;);&amp;lt;/script&amp;gt;&quot;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &apos;Login&apos; is my id value that is -1 after logout (you could use something else, a boolean for example).&lt;/p&gt;\n\n&lt;p&gt;then in my page i added this: (this IS fired on back click)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\nif (getCookie(&apos;&amp;lt;%= Session.SessionID %&amp;gt;&apos;) &amp;lt; 0)\n        {\n            if (history.length &amp;gt; 0)\n            {\n                history.go(+1);\n            }\n        }\n\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;nothing else.&lt;/p&gt;\n\n&lt;p&gt;with this solution back click is enable on every page and disable only after logout on each page on the same browser.&lt;/p&gt;\n    ","\n&lt;p&gt;you can use location block for set individual file instead of whole app get caching in IIS      &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; &amp;lt;location path=&quot;index.html&quot;&amp;gt;\n    &amp;lt;system.webServer&amp;gt;\n      &amp;lt;httpProtocol&amp;gt;\n        &amp;lt;customHeaders&amp;gt;\n          &amp;lt;add name=&quot;Cache-Control&quot; value=&quot;no-cache&quot; /&amp;gt;\n        &amp;lt;/customHeaders&amp;gt;\n      &amp;lt;/httpProtocol&amp;gt;\n    &amp;lt;/system.webServer&amp;gt;\n  &amp;lt;/location&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Not sure if my answer sounds simple and stupid, and perhaps it has already been known to you since long time ago, but since &lt;strong&gt;preventing someone from using browser back button to view your historical pages&lt;/strong&gt; is one of your goals, you can use:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;window.location.replace(&quot;https://www.example.com/page-not-to-be-viewed-in-browser-history-back-button.html&quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Of course, this may not be possible to be implemented across the entire site, but at least for some critical pages, you can do that. Hope this helps.&lt;/p&gt;\n    "],"294":["\n&lt;p&gt;I have to ask a question in return: is your &lt;code&gt;GenSet&lt;/code&gt; &quot;checked&quot; or &quot;unchecked&quot;?\nWhat does that mean?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Checked&lt;/strong&gt;: &lt;em&gt;strong typing&lt;/em&gt;. &lt;code&gt;GenSet&lt;/code&gt; knows explicitly what type of objects it contains (i.e. its constructor was explicitly called with a &lt;code&gt;Class&amp;lt;E&amp;gt;&lt;/code&gt; argument, and methods will throw an exception when they are passed arguments that are not of type &lt;code&gt;E&lt;/code&gt;. See &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Collections.checkedCollection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;-&amp;gt; in that case, you should write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;E&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; E[] a;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Class&amp;lt;E&amp;gt; c, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Use Array native method to create array&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// of a type only known at run time&lt;/span&gt;\n        &lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; E[] a = (E[]) Array.newInstance(c, s);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.a = a;\n    }\n\n    E &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a[i];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unchecked&lt;/strong&gt;: &lt;em&gt;weak typing&lt;/em&gt;. No type checking is actually done on any of the objects passed as argument.&lt;/p&gt;\n\n&lt;p&gt;-&amp;gt; in that case, you should write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;E&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Object[] a;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s)&lt;/span&gt; {\n        a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[s];\n    }\n\n    E &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (E) a[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the component type of the array should be the &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;erasure&lt;/em&gt;&lt;/a&gt; of the type parameter:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;E &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// E has an upper bound of Foo&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Foo[] a; &lt;span class=&quot;hljs-comment&quot;&gt;// E erases to Foo, so use Foo[]&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s)&lt;/span&gt; {\n        a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;[s];\n    }\n\n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;All of this results from a known, and deliberate, weakness of generics in Java: it was implemented using erasure, so &quot;generic&quot; classes don&apos;t know what type argument they were created with at run time, and therefore can not provide type-safety unless some explicit mechanism (type-checking) is implemented.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;E[] arr = (E[])&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[INITIAL_ARRAY_LENGTH];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is one of the suggested ways of implementing a generic collection in &lt;em&gt;Effective Java; Item 26&lt;/em&gt;.  No type errors, no need to cast the array repeatedly.  &lt;em&gt;However&lt;/em&gt; this triggers a warning because it is potentially dangerous, and should be used with caution.  As detailed in the comments, this &lt;code&gt;Object[]&lt;/code&gt; is now masquerading as our &lt;code&gt;E[]&lt;/code&gt; type, and can cause unexpected errors or &lt;code&gt;ClassCastException&lt;/code&gt;s if used unsafely.&lt;/p&gt;\n\n&lt;p&gt;As a rule of thumb, this behavior is safe as long as the cast array is used internally (e.g. to back a data structure), and not returned or exposed to client code.  Should you need to return an array of a generic type to other code, the reflection &lt;code&gt;Array&lt;/code&gt; class you mention is the right way to go.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Worth mentioning that wherever possible, you&apos;ll have a much happier time working with &lt;code&gt;List&lt;/code&gt;s rather than arrays if you&apos;re using generics.  Certainly sometimes you don&apos;t have a choice, but using the collections framework is far more robust.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s how to use generics to get an array of precisely the type youre looking for while preserving type safety (as opposed to the other answers, which will either give you back an &lt;code&gt;Object&lt;/code&gt; array or result in warnings at compile time):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Array;  \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;E&amp;gt; {  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; E[] a;  \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Class&amp;lt;E[]&amp;gt; clazz, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length)&lt;/span&gt; {  \n        a = clazz.cast(Array.newInstance(clazz.getComponentType(), length));  \n    }  \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {  \n        GenSet&amp;lt;String&amp;gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;String&amp;gt;(String[].class, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);  \n        String[] bar = foo.a;  \n        foo.a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;xyzzy&quot;&lt;/span&gt;;  \n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];  \n    }  \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That compiles without warnings, and as you can see in &lt;code&gt;main&lt;/code&gt;, for whatever type you declare an instance of &lt;code&gt;GenSet&lt;/code&gt; as, you can assign &lt;code&gt;a&lt;/code&gt; to an array of that type, and you can assign an element from &lt;code&gt;a&lt;/code&gt; to a variable of that type, meaning that the array and the values in the array are of the correct type.&lt;/p&gt;\n\n&lt;p&gt;It works by using class literals as runtime type tokens, as discussed in the &lt;a href=&quot;http://download.oracle.com/javase/tutorial/extra/generics/literals.html&quot; rel=&quot;noreferrer&quot;&gt;Java Tutorials&lt;/a&gt;. Class literals are treated by the compiler as instances of &lt;code&gt;java.lang.Class&lt;/code&gt;. To use one, simply follow the name of a class with &lt;code&gt;.class&lt;/code&gt;. So, &lt;code&gt;String.class&lt;/code&gt; acts as a &lt;code&gt;Class&lt;/code&gt; object representing the class &lt;code&gt;String&lt;/code&gt;. This also works for interfaces, enums, any-dimensional arrays (e.g. &lt;code&gt;String[].class&lt;/code&gt;), primitives (e.g. &lt;code&gt;int.class&lt;/code&gt;), and the keyword &lt;code&gt;void&lt;/code&gt; (i.e. &lt;code&gt;void.class&lt;/code&gt;). &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Class&lt;/code&gt; itself is generic (declared as &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; stands for the type that the &lt;code&gt;Class&lt;/code&gt; object is representing), meaning that the type of &lt;code&gt;String.class&lt;/code&gt; is &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So, whenever you call the constructor for &lt;code&gt;GenSet&lt;/code&gt;, you pass in a class literal for the first argument representing an array of the &lt;code&gt;GenSet&lt;/code&gt; instance&apos;s declared type (e.g. &lt;code&gt;String[].class&lt;/code&gt; for &lt;code&gt;GenSet&amp;lt;String&amp;gt;&lt;/code&gt;). Note that you won&apos;t be able to get an array of primitives, since primitives can&apos;t be used for type variables.&lt;/p&gt;\n\n&lt;p&gt;Inside the constructor, calling the method &lt;code&gt;cast&lt;/code&gt; returns the passed &lt;code&gt;Object&lt;/code&gt; argument cast to the class represented by the &lt;code&gt;Class&lt;/code&gt; object on which the method was called. Calling the static method &lt;code&gt;newInstance&lt;/code&gt; in &lt;code&gt;java.lang.reflect.Array&lt;/code&gt; returns as an &lt;code&gt;Object&lt;/code&gt; an array of the type represented by the &lt;code&gt;Class&lt;/code&gt; object passed as the first argument and of the length specified by the &lt;code&gt;int&lt;/code&gt; passed as the second argument. Calling the method &lt;code&gt;getComponentType&lt;/code&gt; returns a &lt;code&gt;Class&lt;/code&gt; object representing the component type of the array represented by the &lt;code&gt;Class&lt;/code&gt; object on which the method was called (e.g. &lt;code&gt;String.class&lt;/code&gt; for &lt;code&gt;String[].class&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Class&lt;/code&gt; object doesn&apos;t represent an array).&lt;/p&gt;\n\n&lt;p&gt;That last sentence isn&apos;t entirely accurate. Calling &lt;code&gt;String[].class.getComponentType()&lt;/code&gt; returns a &lt;code&gt;Class&lt;/code&gt; object representing the class &lt;code&gt;String&lt;/code&gt;, but its type is &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt;, not &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt;, which is why you can&apos;t do something like the following.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; String[].class.getComponentType().cast(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// won&apos;t compile&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Same goes for every method in &lt;code&gt;Class&lt;/code&gt; that returns a &lt;code&gt;Class&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;p&gt;Regarding Joachim Sauer&apos;s comment on &lt;a href=&quot;https://stackoverflow.com/questions/529085/java-how-to-generic-array-creation/529094#529094&quot;&gt;this answer&lt;/a&gt; (I don&apos;t have enough reputation to comment on it myself), the example using the cast to &lt;code&gt;T[]&lt;/code&gt; will result in a warning because the compiler can&apos;t guarantee type safety in that case.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Edit regarding Ingo&apos;s comments:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T[] newArray(Class&amp;lt;T[]&amp;gt; type, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; type.cast(Array.newInstance(type.getComponentType(), size));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is the only answer that is type safe&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;E[] a;\n\na = newArray(size);\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@SafeVarargs&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;E&amp;gt; E[] newArray(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length, E... array)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.copyOf(array, length);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To extend to more dimensions, just add &lt;code&gt;[]&lt;/code&gt;&apos;s and dimension parameters to &lt;code&gt;newInstance()&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt; is a type parameter, &lt;code&gt;cls&lt;/code&gt; is a &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;d1&lt;/code&gt; through &lt;code&gt;d5&lt;/code&gt; are integers):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;T[] array = (T[])Array.newInstance(cls, d1);\nT[][] array = (T[][])Array.newInstance(cls, d1, d2);\nT[][][] array = (T[][][])Array.newInstance(cls, d1, d2, d3);\nT[][][][] array = (T[][][][])Array.newInstance(cls, d1, d2, d3, d4);\nT[][][][][] array = (T[][][][][])Array.newInstance(cls, d1, d2, d3, d4, d5);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int...%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.newInstance()&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt;\n    ","\n&lt;p&gt;In Java 8, we can do a kind of generic array creation using a lambda or method reference. This is similar to the reflective approach (which passes a &lt;code&gt;Class&lt;/code&gt;), but here we aren&apos;t using reflection.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@FunctionalInterface&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArraySupplier&lt;/span&gt;&amp;lt;E&amp;gt; {\n    E[] get(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericSet&lt;/span&gt;&amp;lt;E&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; ArraySupplier&amp;lt;E&amp;gt; supplier;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; E[] array;\n\n    GenericSet(ArraySupplier&amp;lt;E&amp;gt; supplier) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.supplier = supplier;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.array    = supplier.get(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        GenericSet&amp;lt;String&amp;gt; ofString =\n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericSet&lt;/span&gt;&amp;lt;&amp;gt;(String[]::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;);\n        GenericSet&amp;lt;Double&amp;gt; ofDouble =\n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericSet&lt;/span&gt;&amp;lt;&amp;gt;(Double[]::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, this is used by &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;&amp;lt;A&amp;gt; A[] Stream.toArray(IntFunction&amp;lt;A[]&amp;gt;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This &lt;em&gt;could&lt;/em&gt; also be done pre-Java 8 using anonymous classes but it&apos;s more cumbersome.&lt;/p&gt;\n    ","\n&lt;p&gt;This is covered in Chapter 5 (Generics) of &lt;a href=&quot;http://java.sun.com/docs/books/effective/&quot; rel=&quot;noreferrer&quot;&gt;Effective Java, 2nd Edition&lt;/a&gt;, item 25...&lt;strong&gt;Prefer lists to arrays&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Your code will work, although it will generate an unchecked warning (which you could suppress with the following annotation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings({&quot;unchecked&quot;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, it would probably be better to use a List instead of an Array.&lt;/p&gt;\n\n&lt;p&gt;There&apos;s an interesting discussion of this bug/feature on &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-5105887&quot; rel=&quot;noreferrer&quot;&gt;the OpenJDK project site&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You do not need to pass the Class argument to the constructor.\nTry this.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;T&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; T[] array;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@SafeVarargs&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacity, T... dummy)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dummy.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(\n              &lt;span class=&quot;hljs-string&quot;&gt;&quot;Do not provide values for dummy argument.&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.array = Arrays.copyOf(dummy, capacity);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;GenSet of &quot;&lt;/span&gt; + array.getClass().getComponentType().getName()\n            + &lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + array.length + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;GenSet&amp;lt;Integer&amp;gt; intSet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\nSystem.out.println(intSet);\nSystem.out.println(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;String&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;GenSet of java.lang.Integer[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nGenSet of java.lang.String[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Java generics work by checking types at compile time and inserting appropriate casts, but &lt;em&gt;erasing&lt;/em&gt; the types in the compiled files. This makes generic libraries usable by code which doesn&apos;t understand generics (which was a deliberate design decision) but which means you can&apos;t normally find out what the type is at run time.&lt;/p&gt;\n\n&lt;p&gt;The public &lt;code&gt;Stack(Class&amp;lt;T&amp;gt; clazz,int capacity)&lt;/code&gt; constructor requires you to pass a Class object at run time, which means class information &lt;em&gt;is&lt;/em&gt; available at runtime to code that needs it. And the &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; form means that the compiler will check that the Class object you pass is precisely the Class object for type T. Not a subclass of T, not a superclass of T, but precisely T.&lt;/p&gt;\n\n&lt;p&gt;This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.&lt;/p&gt;\n    ","\n&lt;p&gt;Although the thread is dead, I would like to draw your attention to this.&lt;/p&gt;\n&lt;p&gt;Generics are used for type checking during compile time. Therefore, the purpose is to check&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;What comes in is what you need.&lt;/li&gt;\n&lt;li&gt;What you return is what the consumer needs.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Check this:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/fCXXe.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;p&gt;Don&apos;t worry about typecasting warnings when you are writing a generic class; worry when you are using it.&lt;/p&gt;\n    ","\n&lt;p&gt;What about this solution?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SafeVarargs&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T[] toGenericArray(T ... elems) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; elems;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It works and looks too simple to be true. Is there any drawback?&lt;/p&gt;\n    ","\n&lt;p&gt;The example is using Java reflection to create an array. Doing this is generally not recommended, since it isn&apos;t typesafe. Instead, what you should do is just use an internal List, and avoid the array at all.&lt;/p&gt;\n    ","\n&lt;p&gt;Look also to this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T[] toArray(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;T&amp;gt; obj) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || obj.isEmpty()) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; obj.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; T[] res = (T[]) Array.newInstance(t.getClass(), obj.size());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; obj.size(); i++) {\n        res[i] = obj.get(i);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It converts a list of any kind of object to an array of the same type.&lt;/p&gt;\n    ","\n&lt;p&gt;I have found a quick and easy way that works for me. Note that i have only used this on Java JDK 8. I don&apos;t know if it will work with previous versions.&lt;/p&gt;\n\n&lt;p&gt;Although we cannot instantiate a generic array of a specific type parameter, we can pass an already created array to a generic class constructor.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenArray&lt;/span&gt; &amp;lt;T&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; T theArray[]; &lt;span class=&quot;hljs-comment&quot;&gt;// reference array&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n    GenArray(T[] arr) {\n        theArray = arr;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do whatever with the array...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in main we can create the array like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenArrayDemo&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// array size&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Here we can instantiate the array of the type we want, say Character (no primitive types allowed in generics)&lt;/span&gt;\n        Character[] ar = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Character&lt;/span&gt;[size];\n\n        GenArray&amp;lt;Character&amp;gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Character&lt;/span&gt;&amp;lt;&amp;gt;(ar); &lt;span class=&quot;hljs-comment&quot;&gt;// create the generic Array&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more flexibility with your arrays you can use a linked list eg. the ArrayList and other methods found in the Java.util.ArrayList class.&lt;/p&gt;\n    ","\n&lt;p&gt;Passing a list of values...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T[] array(T... values) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I made this code snippet to reflectively instantiate a class which is passed for a simple automated test utility.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;attributeValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(clazz.isArray()){\n        Class&amp;lt;?&amp;gt; arrayType = clazz.getComponentType();\n        attributeValue = Array.newInstance(arrayType, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!clazz.isInterface()){\n        attributeValue = BeanUtils.instantiateClass(clazz);\n    }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n    logger.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cannot instanciate \\&quot;{}\\&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[]{clazz});\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note this segment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(clazz.isArray()){\n        Class&amp;lt;?&amp;gt; arrayType = clazz.getComponentType();\n        attributeValue = Array.newInstance(arrayType, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for array initiating where &lt;strong&gt;Array.newInstance(class of array, size of array)&lt;/strong&gt;. Class can be both primitive (int.class) and object (Integer.class).&lt;/p&gt;\n\n&lt;p&gt;BeanUtils is part of Spring.&lt;/p&gt;\n    ","\n&lt;p&gt;The forced cast suggested by other people did not work for me, throwing an exception of illegal casting.&lt;/p&gt;\n\n&lt;p&gt;However, this implicit cast worked fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Item&amp;lt;K&amp;gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt;[SIZE];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where Item is a class I defined containing the member:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; K value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you get an array of type K (if the item only has the value) or any generic type you want defined in the class Item.&lt;/p&gt;\n    ","\n&lt;p&gt;Actually an easier way to do so, is to create an array of objects and cast it to your desired type like the following example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;T[] array = (T[])&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[SIZE];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;SIZE&lt;/code&gt; is a constant and &lt;code&gt;T&lt;/code&gt; is a type identifier&lt;/p&gt;\n    ","\n&lt;p&gt;No one else has answered the question of what is going on in the example you posted.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Array;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Stack&lt;/span&gt;&amp;lt;T&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Class&amp;lt;T&amp;gt; clazz, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacity)&lt;/span&gt; {\n        array = (T[])Array.newInstance(clazz, capacity);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; T[] array;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As others have said generics are &quot;erased&quot; during compilation. So at runtime an instance of a generic doesn&apos;t know what its component type is. The reason for this is historical, Sun wanted to add generics without breaking the existing interface (both source and binary).&lt;/p&gt;\n\n&lt;p&gt;Arrays on the other hand &lt;em&gt;do&lt;/em&gt; know their component type at runtime.&lt;/p&gt;\n\n&lt;p&gt;This example works around the problem by having the code that calls the constructor (which does know the type) pass a parameter telling the class the required type.&lt;/p&gt;\n\n&lt;p&gt;So the application would construct the class with something like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Stack&amp;lt;foo&amp;gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Stack&lt;/span&gt;&amp;lt;foo&amp;gt;(foo.class,&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the constructor now knows (at runtime) what the component type is and can use that information to construct the array through the reflection API.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Array.newInstance(clazz, capacity);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally we have a type cast because the compiler has no way of knowing that the array returned by &lt;code&gt;Array#newInstance()&lt;/code&gt; is the correct type (even though we know).&lt;/p&gt;\n\n&lt;p&gt;This style is a bit ugly but it can sometimes be the least bad solution to creating generic types that do need to know their component type at runtime for whatever reason (creating arrays, or creating instances of their component type, etc.).&lt;/p&gt;\n    ","\n&lt;p&gt;I found a sort of a work around to this problem. &lt;/p&gt;\n\n&lt;p&gt;The line below throws generic array creation error&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Person&amp;gt;[] personLists=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Person&amp;gt;()[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However if I encapsulate &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; in a separate class, it works.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PersonList&lt;/span&gt; {\n\n    List&amp;lt;Person&amp;gt; people;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PersonList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        people=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Person&amp;gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can expose people in the class PersonList thru a getter. The line below will give you an array, that has a &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; in every element. In other words array of &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;PersonList[] personLists=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PersonList&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I needed something like this in some code I was working on and this is what I did to get it to work. So far no problems.&lt;/p&gt;\n    ","\n&lt;p&gt;Generic array creation is disallowed in java but you can do it like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Stack&lt;/span&gt;&amp;lt;T&amp;gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; T[] array;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; capacity)&lt;/span&gt; {\n    array = (T[]) &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[capacity];\n }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;According to vnportnoy the syntax&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;GenSet&amp;lt;Integer&amp;gt; intSet[] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;creates an array of null references, to be filled as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++)\n{\n   intSet[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is type safe.&lt;/p&gt;\n    ","\n&lt;p&gt;You could create an Object array and cast it to E everywhere. Yeah, it&apos;s not very clean way to do it but it should at least work.&lt;/p&gt;\n    ","\n&lt;p&gt;try this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Element&amp;lt;T&amp;gt;[][] elements = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MatrixData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.m = m;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.n = n;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.elements = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Element&lt;/span&gt;[m][n];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.elements[i][j] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Element&lt;/span&gt;&amp;lt;T&amp;gt;();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;An easy, albeit messy workaround to this would be to nest a second &quot;holder&quot; class inside of your main class, and use it to hold your data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Whatever&lt;/span&gt;&amp;lt;Thing&amp;gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Holder&lt;/span&gt;&amp;lt;OtherThing&amp;gt;{\n        OtherThing thing;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Holder&amp;lt;Thing&amp;gt;[] arrayOfHolders = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Holder&lt;/span&gt;&amp;lt;Thing&amp;gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Maybe unrelated to this question but while I was getting the &quot;&lt;code&gt;generic array creation&lt;/code&gt;&quot; error for using &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Tuple&amp;lt;Long,String&amp;gt;[] tupleArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Tuple&lt;/span&gt;&amp;lt;Long,String&amp;gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I find out the following works (and worked for me) with  &lt;code&gt;@SuppressWarnings({&quot;unchecked&quot;})&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; Tuple&amp;lt;Long, String&amp;gt;[] tupleArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Tuple&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m wondering if this code would create an effective generic array?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T [] createArray(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; desiredSize){\n    ArrayList&amp;lt;T&amp;gt; builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;T&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;x&amp;lt;desiredSize;x++){\n        builder.add(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; builder.toArray(zeroArray());\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//zeroArray should, in theory, create a zero-sized array of T&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//when it is not given any parameters.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; T [] zeroArray(T... i){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: Perhaps an alternate way of creating such an array, if the size you required was known and small, would be to simply feed the required number of &quot;null&quot;s into the zeroArray command?&lt;/p&gt;\n\n&lt;p&gt;Though obviously this isn&apos;t as versatile as using the createArray code.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use a cast:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenSet&lt;/span&gt;&amp;lt;Item&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Item[] a;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s)&lt;/span&gt; {\n        a = (Item[]) &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;[s];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I actually found a pretty unique solution to bypass the inability to initiate a generic array. What you have to do is create a class that takes in the generic variable T like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericInvoker&lt;/span&gt; &amp;lt;T&amp;gt; {\n    T variable;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenericInvoker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T variable)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.variable = variable;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then in your array class just have it start like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;GenericInvoker&amp;lt;T&amp;gt;[] array;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n    array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericInvoker&lt;/span&gt;[];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;starting a &lt;code&gt;new Generic Invoker[]&lt;/code&gt; will cause an issue with unchecked but there shouldn&apos;t actually be any issues.&lt;/p&gt;\n\n&lt;p&gt;To get from the array you should call the array[i].variable like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array[index].variable;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The rest, such as resizing the array can be done with Arrays.copyOf() like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; newSize)&lt;/span&gt;{\n    array = Arrays.copyOf(array, newSize);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the add function can be added like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T element)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the variable size below is equal to how many times the add function has been called &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// and is used to keep track of where to put the next variable in the array&lt;/span&gt;\n    arrays[size] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericInvoker&lt;/span&gt;(element);\n    size++;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you really want to wrap a generic array of fixed size you will have a method to add data to that array, hence you can initialize properly the array there doing something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Array;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Stack&lt;/span&gt;&amp;lt;T&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; T[] array = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// fixed or pass it in the constructor&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T value)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack does not accept nulls&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (array == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            array = (T[]) Array.newInstance(value.getClass(), capacity);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// put logic: e.g.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos == capacity)\n             &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;push on full stack&quot;&lt;/span&gt;);\n        array[pos++] = value;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IllegalStateException {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pos == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pop on empty stack&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array[--pos];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in this case you use a java.lang.reflect.Array.newInstance to create the array, and it will not be an Object[], but a real T[].\nYou should not worry of it not being final, since it is managed inside your class.\nNote that you need a non null object on the push() to be able to get the type to use, so I added a check on the data you push and throw an exception there.&lt;/p&gt;\n\n&lt;p&gt;Still this is somewhat pointless: you store data via push and it is the signature of the method that guarantees only T elements will enter. So it is more or less irrelevant that the array is Object[] or T[].&lt;/p&gt;\n    "],"295":["\n&lt;p&gt;You can parameterize &lt;em&gt;each&lt;/em&gt; value, so something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] { &quot;ruby&quot;, &quot;rails&quot;, &quot;scruffy&quot;, &quot;rubyonrails&quot; };\nstring cmdText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM Tags WHERE Name IN ({0})&quot;;\n\nstring[] paramNames &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tags.Select(\n    (s, i) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &quot;@tag&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i.ToString()\n).ToArray();\n\nstring inClause &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; string.Join(&quot;, &quot;, paramNames);\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (SqlCommand cmd &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(string.Format(cmdText, inClause))) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; paramNames.Length; i&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;) {\n       cmd.Parameters.AddWithValue(paramNames[i], tags[i]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which will give you:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;cmd.CommandText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT * FROM Tags WHERE Name IN (@tag0, @tag1, @tag2, @tag3)&quot;\ncmd.Parameters[&quot;@tag0&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;ruby&quot;\ncmd.Parameters[&quot;@tag1&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;rails&quot;\ncmd.Parameters[&quot;@tag2&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;scruffy&quot;\ncmd.Parameters[&quot;@tag3&quot;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;rubyonrails&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No, this is not open to &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;noreferrer&quot;&gt;SQL injection&lt;/a&gt;. The only injected text into CommandText is not based on user input. It&apos;s solely based on the hardcoded &quot;@tag&quot; prefix, and the index of an array. The index will &lt;em&gt;always&lt;/em&gt; be an integer, is not user generated, and is safe.&lt;/p&gt;\n\n&lt;p&gt;The user inputted values are still stuffed into parameters, so there is no vulnerability there.&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Injection concerns aside, take care to note that constructing the command text to accomodate a variable number of parameters (as above) impede&apos;s SQL server&apos;s ability to take advantage of cached queries. The net result is that you almost certainly lose the value of using parameters in the first place (as opposed to merely inserting the predicate strings into the SQL itself).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not that cached query plans aren&apos;t valuable, but IMO this query isn&apos;t nearly complicated enough to see much benefit from it. While the compilation costs may approach (or even exceed) the execution costs, you&apos;re still talking milliseconds. &lt;/p&gt;\n\n&lt;p&gt;If you have enough RAM, I&apos;d expect SQL&amp;nbsp;Server would probably cache a plan for the common counts of parameters as well. I suppose you could always add five parameters, and let the unspecified tags be NULL - the query plan should be the same, but it seems pretty ugly to me and I&apos;m not sure that it&apos;d worth the micro-optimization (although, on Stack&amp;nbsp;Overflow - it may very well be worth it).&lt;/p&gt;\n\n&lt;p&gt;Also, SQL&amp;nbsp;Server 7 and later will &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa175264(SQL.80).aspx&quot; rel=&quot;noreferrer&quot;&gt;auto-parameterize queries&lt;/a&gt;, so using parameters isn&apos;t really necessary from a performance standpoint - it is, however, &lt;em&gt;critical&lt;/em&gt; from a security standpoint - especially with user inputted data like this.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a quick-and-dirty technique I have used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|ruby|rails|scruffy|rubyonrails|&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; Name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So here&apos;s the C# code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] { &quot;ruby&quot;, &quot;rails&quot;, &quot;scruffy&quot;, &quot;rubyonrails&quot; };\nconst string cmdText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;select * from tags where &apos;|&apos; + @tags + &apos;|&apos; like &apos;%|&apos; + Name + &apos;|%&apos;&quot;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (SqlCommand cmd &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(cmdText)) {\n   cmd.Parameters.AddWithValue(&quot;@tags&quot;, string.Join(&quot;|&quot;, tags);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Two caveats:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The performance is terrible. &lt;code&gt;LIKE &quot;%...%&quot;&lt;/code&gt; queries are not indexed.&lt;/li&gt;\n&lt;li&gt;Make sure you don&apos;t have any &lt;code&gt;|&lt;/code&gt;, blank, or null tags or this won&apos;t work&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There are other ways to accomplish this that some people may consider cleaner, so please keep reading.&lt;/p&gt;\n    ","\n&lt;p&gt;For SQL Server 2008, you can use a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb675163.aspx&quot; rel=&quot;noreferrer&quot;&gt;table valued parameter&lt;/a&gt;. It&apos;s a bit of work, but it is arguably cleaner than &lt;a href=&quot;https://stackoverflow.com/questions/337704/parameterizing-a-sql-in-clause#337792&quot;&gt;my other method&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;First, you have to create a type&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; TYPE dbo.TagNamesTableType &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ( Name nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;) )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, your ADO.NET code looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] tags = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;ruby&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rails&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;scruffy&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rubyonrails&quot;&lt;/span&gt; };\ncmd.CommandText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT Tags.* FROM Tags JOIN @tagNames as P ON Tags.Name = P.Name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// value must be IEnumerable&amp;lt;SqlDataRecord&amp;gt;&lt;/span&gt;\ncmd.Parameters.AddWithValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;@tagNames&quot;&lt;/span&gt;, tags.AsSqlDataRecord(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;)).SqlDbType = SqlDbType.Structured;\ncmd.Parameters[&lt;span class=&quot;hljs-string&quot;&gt;&quot;@tagNames&quot;&lt;/span&gt;].TypeName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;dbo.TagNamesTableType&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Extension method for converting IEnumerable&amp;lt;string&amp;gt; to IEnumerable&amp;lt;SqlDataRecord&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; IEnumerable&amp;lt;SqlDataRecord&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;AsSqlDataRecord&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; values, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; columnName&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (values == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || !values.Any()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Annoying, but SqlClient wants null instead of 0 rows&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstRecord = values.First();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; metadata= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlMetaData(columnName, SqlDbType.NVarChar, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//50 as per SQL Type&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values.Select(v =&amp;gt; \n    {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlDataRecord(metadata);\n       r.SetValues(v);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;\nAs Per @Doug&lt;/p&gt;\n&lt;p&gt;Please try to avoid &lt;code&gt;var metadata = SqlMetaData.InferFromValue(firstRecord, columnName);&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;It&apos;s set first value length, so if first value is 3 characters then its set max length 3 and other records will truncated if more then 3 characters.&lt;/p&gt;\n&lt;p&gt;So, please try to use: &lt;code&gt;var metadata= new SqlMetaData(columnName, SqlDbType.NVarChar, maxLen);&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Note: &lt;code&gt;-1&lt;/code&gt; for max length.&lt;/p&gt;\n    ","\n&lt;p&gt;The original question was &lt;strong&gt;&quot;How do I parameterize a query ...&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is &lt;strong&gt;not an answer&lt;/strong&gt; to that original question. There are some very good demonstrations of how to do that, in other answers.&lt;/p&gt;\n&lt;p&gt;See the &lt;a href=&quot;https://stackoverflow.com/a/337864&quot;&gt;answer from Mark Brackett&lt;/a&gt; for the preferred answer that I (and 231 others) upvoted. The approach given in his answer allows 1) for effective use of bind variables, and 2) for predicates that are sargable.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Selected answer&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I am addressing here the approach given in Joel Spolsky&apos;s answer, the answer &quot;selected&quot; as the right answer.&lt;/p&gt;\n&lt;p&gt;Joel Spolsky&apos;s approach is clever.  And it works reasonably, it&apos;s going to exhibit predictable behavior and predictable performance, given &quot;normal&quot; values, and with the normative edge cases, such as NULL and the empty string.  And it may be sufficient for a particular application.&lt;/p&gt;\n&lt;p&gt;But in terms generalizing this approach, let&apos;s also consider the more obscure corner cases, like when the &lt;code&gt;Name&lt;/code&gt; column contains a wildcard character (as recognized by the LIKE predicate.)  The wildcard character I see most commonly used is &lt;code&gt;%&lt;/code&gt; (a percent sign.). So let&apos;s deal with that here now, and later go on to other cases.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Some problems with % character&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Consider a Name value of &lt;code&gt;&apos;pe%ter&apos;&lt;/code&gt;.  (For the examples here, I use a literal string value in place of the column name.)  A row with a Name value of `&apos;pe%ter&apos; would be returned by a query of the form:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|peanut|butter|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%ter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But that same row will &lt;strong&gt;not&lt;/strong&gt; be returned if the order of the search terms is reversed:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|butter|peanut|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%ter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The behavior we observe is kind of odd.  Changing the order of the search terms in the list changes the result set.&lt;/p&gt;\n&lt;p&gt;It almost goes without saying that we might not want &lt;code&gt;pe%ter&lt;/code&gt; to match peanut butter, no matter how much he likes it.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Obscure corner case&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;(Yes, I will agree that this is an obscure case.  Probably one that is not likely to be tested.  We wouldn&apos;t expect a wildcard in a column value.  We may assume that the application prevents such a value from being stored.  But in my experience, I&apos;ve rarely seen a database constraint that specifically disallowed characters or patterns that would be considered wildcards on the right side of a &lt;code&gt;LIKE&lt;/code&gt; comparison operator.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Patching a hole&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;One approach to patching this hole is to escape the &lt;code&gt;%&lt;/code&gt; wildcard character.  (For anyone not familiar with the escape clause on the operator, here&apos;s a link to the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa933232(SQL.80).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Server documentation&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|peanut|butter|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe\\%ter&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we can match the literal %.  Of course, when we have a column name, we&apos;re going to need to dynamically escape the wildcard.  We can use the &lt;code&gt;REPLACE&lt;/code&gt; function to find occurrences of the &lt;code&gt;% &lt;/code&gt;character and insert a backslash character in front of each one, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|pe%ter|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; REPLACE( &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%ter&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\%&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So that solves the problem with the % wildcard.  Almost.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Escape the escape&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;We recognize that our solution has introduced another problem.  The escape character.  We see that we&apos;re also going to need to escape any occurrences of escape character itself.  This time, we use the ! as the escape character:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|pe%t!r|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; REPLACE(REPLACE( &lt;span class=&quot;hljs-string&quot;&gt;&apos;pe%t!r&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;!&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;!!&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;!%&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;The underscore too&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Now that we&apos;re on a roll, we can add another &lt;code&gt;REPLACE&lt;/code&gt; handle the underscore wildcard.   And just for fun, this time, we&apos;ll use $ as the escape character.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|p_%t!r|&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%|&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; REPLACE(REPLACE(REPLACE( &lt;span class=&quot;hljs-string&quot;&gt;&apos;p_%t!r&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$$&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$%&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;$_&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I prefer this approach to escaping because it works in Oracle and MySQL as well as SQL Server.  (I usually use the \\ backslash as the escape character, since that&apos;s the character we use in regular expressions. But why be constrained by convention!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Those pesky brackets&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;SQL Server also allows for wildcard characters to be treated as literals by enclosing them in brackets &lt;code&gt;[]&lt;/code&gt;.  So we&apos;re not done fixing yet, at least for SQL Server.  Since pairs of brackets have special meaning, we&apos;ll need to escape those as well.  If we manage to properly escape the brackets, then at least we won&apos;t have to bother with the hyphen &lt;code&gt;-&lt;/code&gt; and the carat &lt;code&gt;^&lt;/code&gt; within the brackets.  And we can leave any &lt;code&gt;% &lt;/code&gt;and &lt;code&gt;_&lt;/code&gt; characters inside the brackets escaped, since we&apos;ll have basically disabled the special meaning of the brackets.&lt;/p&gt;\n&lt;p&gt;Finding matching pairs of brackets shouldn&apos;t be that hard.  It&apos;s a little more difficult than handling the occurrences of singleton % and _.  (Note that it&apos;s not sufficient to just escape all occurrences of brackets, because a singleton bracket is considered to be a literal, and doesn&apos;t need to be escaped. The logic is getting a little fuzzier than I can handle without running more test cases.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Inline expression gets messy&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;That inline expression in the SQL is getting longer and uglier.  We can probably make it work, but heaven help the poor soul that comes behind and has to decipher it.  As much of a fan I am for inline expressions, I&apos;m inclined not use one here, mainly because I don&apos;t want to have to leave a comment explaining the reason for the mess, and apologizing for it.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A function where ?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Okay, so, if we don&apos;t handle that as an inline expression in the SQL, the closest alternative we have is a user defined function.  And we know that won&apos;t speed things up any (unless we can define an index on it, like we could with Oracle.)  If we&apos;ve got to create a function, we might better do that in the code that calls the SQL statement.&lt;/p&gt;\n&lt;p&gt;And that function may have some differences in behavior, dependent on the DBMS and version.  (A shout out to all you Java developers so keen on being able to use any database engine interchangeably.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Domain knowledge&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;We may have specialized knowledge of the domain for the column, (that is, the set of allowable values enforced for the column.  We may know &lt;em&gt;a priori&lt;/em&gt; that the values stored in the column will never contain a percent sign, an underscore, or bracket pairs.  In that case, we just include a quick comment that those cases are covered.&lt;/p&gt;\n&lt;p&gt;The values stored in the column may allow for % or _ characters, but a constraint may require those values to be escaped, perhaps using a defined character, such that the values are LIKE comparison &quot;safe&quot;.  Again, a quick comment about the allowed set of values, and in particular which character is used as an escape character, and go with Joel Spolsky&apos;s approach.&lt;/p&gt;\n&lt;p&gt;But, absent the specialized knowledge and a guarantee, it&apos;s important for us to at least consider handling those obscure corner cases, and consider whether the behavior is reasonable and &quot;per the specification&quot;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Other issues recapitulated&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I believe others have already sufficiently pointed out some of the other commonly considered areas of concern:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL injection&lt;/a&gt; (taking what would appear to be user supplied information, and including that in the SQL text rather than supplying them through bind variables.  Using bind variables isn&apos;t required, it&apos;s just one convenient approach to thwart with SQL injection.  There are other ways to deal with it:&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;optimizer plan using index scan rather than index seeks, possible need for an expression or function for escaping wildcards (possible index on expression or function)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;using literal values in place of bind variables impacts scalability&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;I like Joel Spolsky&apos;s approach.  It&apos;s clever.  And it works.&lt;/p&gt;\n&lt;p&gt;But as soon as I saw it, I immediately saw a potential problem with it, and it&apos;s not my nature to let it slide.  I don&apos;t mean to be critical of the efforts of others.  I know many developers take their work very personally, because they invest so much into it and they care so much about it.  So please understand, this is not a personal attack.  What I&apos;m identifying here is the type of problem that crops up in production rather than testing.&lt;/p&gt;\n    ","\n&lt;p&gt;You can pass the parameter as a string&lt;/p&gt;\n\n&lt;p&gt;So you have the string &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@tags&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@tags&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ruby&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;rails&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;scruffy&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;rubyonrails\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fnSplit(&lt;span class=&quot;hljs-variable&quot;&gt;@tags&lt;/span&gt;, &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then all you have to do is pass the string as 1 parameter.&lt;/p&gt;\n\n&lt;p&gt;Here is the split function I use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; [dbo].[fnSplit](\n    &lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;-- List of delimited items&lt;/span&gt;\n  , &lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- delimiter that separates items&lt;/span&gt;\n) &lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; (item &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;)\nWHILE CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;RTRIM(LTRIM(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;))),\n  &lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;RTRIM(LTRIM(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sDelimiter&lt;/span&gt;),LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;))))\n\n IF LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sItem&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\nIF LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sInputList&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- Put the last item in&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I heard Jeff/Joel talk about this on the podcast today (&lt;em&gt;&lt;a href=&quot;http://itc.conversationsnetwork.org/audio/download/ITC.SO-Episode34-2008.12.16.mp3&quot; rel=&quot;noreferrer&quot;&gt;episode 34&lt;/a&gt;&lt;/em&gt;, 2008-12-16 (MP3, 31&amp;nbsp;MB), 1 h 03 min 38 secs - 1 h 06 min 45 secs), and I thought I recalled Stack&amp;nbsp;Overflow was using &lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL&quot; rel=&quot;noreferrer&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;, but maybe it was ditched. Here&apos;s the same thing in LINQ&amp;nbsp;to&amp;nbsp;SQL.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;var inValues &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; [] { &quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot; };\n\nvar results &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Tags\n              &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; inValues.Contains(tag.Name)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; tag;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s it. And, yes, LINQ already looks backwards enough, but the &lt;code&gt;Contains&lt;/code&gt; clause seems extra backwards to me. When I had to do a similar query for a project at work, I naturally tried to do this the wrong way by doing a join between the local array and the SQL Server table, figuring the LINQ&amp;nbsp;to&amp;nbsp;SQL translator would be smart enough to handle the translation somehow. It didn&apos;t, but it did provide an error message that was descriptive and pointed me towards using &lt;em&gt;Contains&lt;/em&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Anyway, if you run this in the highly recommended &lt;a href=&quot;http://www.linqpad.net/&quot; rel=&quot;noreferrer&quot;&gt;LINQPad&lt;/a&gt;, and run this query, you can view the actual SQL that the SQL LINQ provider generated. It&apos;ll show you each of the values getting parameterized into an &lt;code&gt;IN&lt;/code&gt; clause.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are calling from .NET, you could use &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot; rel=&quot;noreferrer&quot;&gt;Dapper dot net&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] names &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] {&quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot;};\nvar tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dataContext.Query&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;Tags&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;(@&quot;\nselect * from Tags \nwhere Name in @names\norder by Count desc&quot;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; {names});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here Dapper does the thinking, so you don&apos;t have to. Something similar is possible with &lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL&quot; rel=&quot;noreferrer&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;, of course:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;string[] names &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[] {&quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot;};\nvar tags &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dataContext.Tags\n           &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; names.Contains(tag.Name)\n           orderby tag.Count descending\n           &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; tag;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In &lt;code&gt;SQL Server 2016+&lt;/code&gt; you could use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt684588.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;STRING_SPLIT&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt; NVARCHAR(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; STRING_SPLIT(&lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [Count] &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt; NVARCHAR(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags t\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; STRING_SPLIT(&lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t.Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [Count] &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/481811&quot; rel=&quot;noreferrer&quot;&gt;LiveDemo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/a/337817/5070879&quot;&gt;accepted answer&lt;/a&gt; will of course work and it is one of the way to go, but it is anti-pattern.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;E. Find rows by list of values&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;This is replacement for common anti-pattern such as creating a dynamic SQL string in application layer or Transact-SQL, or by using LIKE operator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ProductId, Name, Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Product\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,1,2,3,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(ProductId &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,%&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;Addendum&lt;/em&gt;:&lt;/p&gt;\n\n&lt;p&gt;To improve the &lt;code&gt;STRING_SPLIT&lt;/code&gt; table function row estimation, it is a good idea to materialize splitted values as temporary table/table variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt; NVARCHAR(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails,sql&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; #t(val NVARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; #t(val) &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; s.[&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; STRING_SPLIT(&lt;span class=&quot;hljs-variable&quot;&gt;@names&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) s;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags tg\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; #t t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t.val &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tg.TagName\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [Count] &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/1196908?opt.withExecutionPlan=true#executionPlan&quot; rel=&quot;noreferrer&quot;&gt;SEDE - Live Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Related: &lt;a href=&quot;https://www.brentozar.com/archive/2020/02/how-to-pass-a-list-of-values-into-a-stored-procedure/&quot; rel=&quot;noreferrer&quot;&gt;How to Pass a List of Values Into a Stored Procedure&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;hr&gt;\n&lt;sup&gt;Original question has requirement &lt;code&gt;SQL Server 2008&lt;/code&gt;. Because this question is often used as duplicate, I&apos;ve added this answer as reference. &lt;/sup&gt;&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is possibly a half nasty way of doing it, I used it once, was rather effective.&lt;/p&gt;\n\n&lt;p&gt;Depending on your goals it might be of use. &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Create a &lt;em&gt;temp table&lt;/em&gt; with one column. &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;INSERT&lt;/code&gt; each look-up value into that column. &lt;/li&gt;\n&lt;li&gt;Instead of using an &lt;code&gt;IN&lt;/code&gt;, you can then just use your standard &lt;code&gt;JOIN&lt;/code&gt; rules. ( Flexibility++ )&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This has a bit of added flexibility in what you can do, but it&apos;s more suited for situations where you have a large table to query, with good indexing, and you want to use the parametrized list more than once. Saves having to execute it twice and have all the sanitation done manually.&lt;/p&gt;\n\n&lt;p&gt;I never got around to profiling exactly how &lt;em&gt;fast&lt;/em&gt; it was, but in my situation it was needed. &lt;/p&gt;\n    ","\n&lt;p&gt;We have function that creates a table variable that you can join to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; [dbo].[Fn_sqllist_to_table](&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;),\n                                           &lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt;(\n  Position &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;    &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n      WHILE Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt;\n                        (Position,&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;     (&lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;, Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n            IF Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Len(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt;\n                          (Position,&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;     (&lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;, Len(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; Charindex(&lt;span class=&quot;hljs-variable&quot;&gt;@delim&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n      IF Len(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@listTable&lt;/span&gt;\n                    (Position,&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;     (&lt;span class=&quot;hljs-variable&quot;&gt;@myPos&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;)\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;@Name&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;    \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; fn_sqllist_to_table(&lt;span class=&quot;hljs-variable&quot;&gt;@Name&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)))\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is gross, but if you are guaranteed to have at least one, you could do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ...\n       ...\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;@tag1&lt;/span&gt;, ISNULL( &lt;span class=&quot;hljs-variable&quot;&gt;@tag2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@tag1&lt;/span&gt; ), ISNULL( &lt;span class=&quot;hljs-variable&quot;&gt;@tag3&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@tag1&lt;/span&gt; ), etc. )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having IN( &apos;tag1&apos;, &apos;tag2&apos;, &apos;tag1&apos;, &apos;tag1&apos;, &apos;tag1&apos; ) will be easily optimized away by SQL Server. Plus, you get direct index seeks&lt;/p&gt;\n    ","\n&lt;p&gt;I would pass a table type parameter (since it&apos;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2008&quot; rel=&quot;noreferrer&quot;&gt;SQL Server 2008&lt;/a&gt;), and do a &lt;code&gt;where exists&lt;/code&gt;, or inner join. You may also use XML, using &lt;code&gt;sp_xml_preparedocument&lt;/code&gt;, and then even index that temporary table.&lt;/p&gt;\n    ","\n&lt;p&gt;In my opinion, the best source to solve this problem, is what has been posted on this site:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://weblogs.sqlteam.com/dinakar/archive/2007/03/28/60150.aspx&quot; rel=&quot;noreferrer&quot;&gt;Syscomments. Dinakar Nethi&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; dbo.fnParseArray (&lt;span class=&quot;hljs-variable&quot;&gt;@Array&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;),&lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@T&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; (col1 &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;--DECLARE @T Table (col1 varchar(50))  &lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- @Array is the array we wish to parse&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- @Separator is the separator charactor such as a comma&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- This is used to locate each separator character&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;-- this holds each array value as it is returned&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- For my loop to work I need an extra separator at the end. I always look to the&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;-- left of the separator character for each array value&lt;/span&gt;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;\n\n &lt;span class=&quot;hljs-comment&quot;&gt;-- Loop through the string searching for separtor characters&lt;/span&gt;\n WHILE PATINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; \n &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- patindex matches the a pattern against a string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; PATINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- This is where you process the values passed.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@T&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value)    \n    &lt;span class=&quot;hljs-comment&quot;&gt;-- Replace this select statement with your processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- @array_value holds the value of this element of the array&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;-- This replaces what we just processed with and empty string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; STUFF(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; dbo.fnParseArray(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a,b,c,d,e,f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREDITS FOR: Dinakar Nethi&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The proper way IMHO is to store the list in a character string (limited in length by what the DBMS support); the only trick is that (in order to simplify processing) I have a separator (a comma in my example) at the beginning and at the end of the string. The idea is to &quot;normalize on the fly&quot;, turning the list into a one-column table that contains one row per value. This allows you to turn&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;in (ct1,ct2, ct3 ... ctn)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;into an&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;in (select ...)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;or (the solution I&apos;d probably prefer) a regular join, if you just add a &quot;distinct&quot; to avoid problems with duplicate values in the list.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately, the techniques to slice a string are fairly product-specific.\nHere is the SQL Server version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; qry(n, names) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;\n       (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; len(list.names) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; len(replace(list.names, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(list.names, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, len(list.names)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; names\n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,Doc,Grumpy,Happy,Sneezy,Bashful,Sleepy,Dopey,&apos;&lt;/span&gt; names) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; list\n        &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; (n &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(names, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; charindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, names), len(names)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; names\n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; qry\n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; n &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; n, &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(names, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, charindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, names) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) dwarf\n &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; qry;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The Oracle version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; n, substr(name, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, instr(name, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) dwarf\n &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; n,\n             substr(val, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; instr(val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, n)) name\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; rownum &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n,\n                   list.val\n            &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;  (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,Doc,Grumpy,Happy,Sneezy,Bashful,Sleepy,Dopey,&apos;&lt;/span&gt; val\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dual) list\n            &lt;span class=&quot;hljs-keyword&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; level &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; length(list.val) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;\n                               length(replace(list.val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the MySQL version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pivot.n,\n      substring_index(substring_index(list.val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; pivot.n), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; n) pivot,    (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,Doc,Grumpy,Happy,Sneezy,Bashful,Sleepy,Dopey,&apos;&lt;/span&gt; val) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; pivot.n &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;  length(list.val) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;\n                   length(replace(list.val, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Of course, &quot;pivot&quot; must return as many rows as the maximum number of\nitems we can find in the list)&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;ve got &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2008&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Server 2008&lt;/a&gt; or later I&apos;d use a &lt;a href=&quot;https://stackoverflow.com/questions/5595353/how-to-pass-table-value-parameters-to-stored-procedure-from-net-code&quot;&gt;Table Valued Parameter&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re unlucky enough to be stuck on &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SQL_Server#SQL_Server_2005&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Server 2005&lt;/a&gt; you could add a &lt;a href=&quot;http://en.wikipedia.org/wiki/Common_Language_Runtime&quot; rel=&quot;nofollow noreferrer&quot;&gt;CLR&lt;/a&gt; function like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;[SqlFunction(\n    DataAccessKind.None,\n    IsDeterministic &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    SystemDataAccess &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SystemDataAccessKind.None,\n    IsPrecise &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    FillRowMethodName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SplitFillRow&quot;,\n    TableDefinintion &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;s NVARCHAR(MAX)&quot;]\npublic &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; IEnumerable Split(SqlChars seperator, SqlString s)\n{\n    if (s.IsNull)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; string[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.ToString().Split(seperator.Buffer);\n}\n\npublic &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; void SplitFillRow(object &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; SqlString s)\n{\n    s &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlString(row.ToString());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which you could use like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@desiredTags&lt;/span&gt; nvarchar(MAX);\n&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@desiredTags&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [dbo].[Split] (&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@desiredTags&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think this is a case when a static query is just not the way to go. Dynamically build the list for your in clause, escape your single quotes, and dynamically build SQL. In this case you probably won&apos;t see much of a difference with any method due to the small list, but the most efficient method really is to send the SQL exactly as it is written in your post. I think it is a good habit to write it the most efficient way, rather than to do what makes the prettiest code, or consider it bad practice to dynamically build SQL.&lt;/p&gt;\n\n&lt;p&gt;I have seen the split functions take longer to execute than the query themselves in many cases where the parameters get large. A stored procedure with table valued parameters in SQL 2008 is the only other option I would consider, although this will probably be slower in your case. TVP will probably only be faster for large lists if you are searching on the primary key of the TVP, because SQL will build a temporary table for the list anyway (if the list is large). You won&apos;t know for sure unless you test it.&lt;/p&gt;\n\n&lt;p&gt;I have also seen stored procedures that had 500 parameters with default values of null, and having WHERE Column1 IN (@Param1, @Param2, @Param3, ..., @Param500). This caused SQL to build a temp table, do a sort/distinct, and then do a table scan instead of an index seek. That is essentially what you would be doing by parameterizing that query, although on a small enough scale that it won&apos;t make a noticeable difference. I highly recommend against having NULL in your IN lists, as if that gets changed to a NOT IN it will not act as intended. You could dynamically build the parameter list, but the only obvious thing that you would gain is that the objects would escape the single quotes for you. That approach is also slightly slower on the application end since the objects have to parse the query to find the parameters. It may or may not be faster on SQL, as parameterized queries call sp_prepare, sp_execute for as many times you execute the query, followed by sp_unprepare. &lt;/p&gt;\n\n&lt;p&gt;The reuse of execution plans for stored procedures or parameterized queries may give you a performance gain, but it will lock you in to one execution plan determined by the first query that is executed. That may be less than ideal for subsequent queries in many cases. In your case, reuse of execution plans will probably be a plus, but it might not make any difference at all as the example is a really simple query.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Cliffs notes:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For your case anything you do, be it parameterization with a fixed number of items in the list (null if not used), dynamically building the query with or without parameters, or using stored procedures with table valued parameters will not make much of a difference. However, my general recommendations are as follows:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Your case/simple queries with few parameters:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Dynamic SQL, maybe with parameters if testing shows better performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Queries with reusable execution plans, called multiple times by simply changing the parameters or if the query is complicated:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;SQL with dynamic parameters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Queries with large lists:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Stored procedure with table valued parameters. If the list can vary by a large amount use WITH RECOMPILE on the stored procedure, or simply use dynamic SQL without parameters to generate a new execution plan for each query.&lt;/p&gt;\n    ","\n&lt;p&gt;May be we can use XML here:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; xml\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;items&amp;gt;\n    &amp;lt;item myvalue=&quot;29790&quot; /&amp;gt;\n    &amp;lt;item myvalue=&quot;31250&quot; /&amp;gt;\n    &amp;lt;/items&amp;gt;\n    &apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; CTE &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n         &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n            x.item.value(&lt;span class=&quot;hljs-string&quot;&gt;&apos;@myvalue[1]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;decimal&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; myvalue\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt;.nodes(&lt;span class=&quot;hljs-string&quot;&gt;&apos;//items/item&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; x(item) )\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; tableColumnName &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; myvalue &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; cte)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we have strings stored inside the IN clause with the comma(,) delimited, we can use the charindex function to get the values. If you use .NET, then you can map with SqlParameters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;DDL Script:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; Tags\n    ([ID] &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, [Name] &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;))\n;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; Tags\n    ([ID], [Name])\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;scruffy&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rubyonrails&apos;&lt;/span&gt;)\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;T-SQL:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt; nvarchar(max)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; CharIndex(Name,&lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use the above statement in your .NET code and map the parameter with SqlParameter.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://sqlfiddle.com/#!3/31994/3&quot; rel=&quot;noreferrer&quot;&gt;Fiddler demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;\nCreate the table called SelectedTags using the following script.&lt;/p&gt;\n\n&lt;p&gt;DDL Script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; SelectedTags\n(Name nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; SelectedTags &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;),(&lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;T-SQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; nvarchar(max)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;coalesce&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;st.Name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; SelectedTags st\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; CharIndex(Name,&lt;span class=&quot;hljs-variable&quot;&gt;@Param&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;d approach this by default with passing a table valued function (that returns a table from a string) to the IN condition.&lt;/p&gt;\n\n&lt;p&gt;Here is the code for the UDF &lt;em&gt;(I got it from Stack Overflow somewhere, i can&apos;t find the source right now)&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; [dbo].[Split] (&lt;span class=&quot;hljs-variable&quot;&gt;@sep&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; Pieces(pn, &lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;, stop) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sep&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; pn &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, stop &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, CHARINDEX(&lt;span class=&quot;hljs-variable&quot;&gt;@sep&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt;, stop &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Pieces\n      &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; stop &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n      &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@s&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; stop &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; stop&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; s\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Pieces\n  )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once you got this your code would be as simple as this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dbo.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby;rails;scruffy;rubyonrails&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Count &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unless you have a ridiculously long string, this should work well with the table index.&lt;/p&gt;\n\n&lt;p&gt;If needed you can insert it into a temp table, index it, then run a join...&lt;/p&gt;\n    ","\n&lt;p&gt;For a variable number of arguments like this the only way I&apos;m aware of is to either generate the SQL explicitly or do something that involves populating a temporary table with the items you want and joining against the temp table.&lt;/p&gt;\n    ","\n&lt;p&gt;Another possible solution is instead of passing a variable number of arguments to a stored procedure, pass a single string containing the names you&apos;re after, but make them unique by surrounding them with &apos;&amp;lt;&amp;gt;&apos;. Then use PATINDEX to find the names:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Tags \n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; PATINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&amp;lt;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; Name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;gt;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;jo&amp;gt;,&amp;lt;john&amp;gt;,&amp;lt;scruffy&amp;gt;,&amp;lt;rubyonrails&amp;gt;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the following stored procedure. It uses a custom split function, which can be found &lt;a href=&quot;http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/01/t-sql-split-function.aspx&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; stored &lt;span class=&quot;hljs-keyword&quot;&gt;procedure&lt;/span&gt; GetSearchMachingTagNames \n    &lt;span class=&quot;hljs-variable&quot;&gt;@PipeDelimitedTagNames&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(max), \n    &lt;span class=&quot;hljs-variable&quot;&gt;@delimiter&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) \n    &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tags \n         &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; [dbo].[Split](&lt;span class=&quot;hljs-variable&quot;&gt;@PipeDelimitedTagNames&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@delimiter&lt;/span&gt;) \n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is another alternative. Just pass a comma-delimited list as a string parameter to the stored procedure and:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PROCEDURE&lt;/span&gt; [dbo].[sp_myproc]\n    &lt;span class=&quot;hljs-variable&quot;&gt;@UnitList&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(MAX) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;1,2,3&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; ph.UnitID &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; CsvToInt(&lt;span class=&quot;hljs-variable&quot;&gt;@UnitList&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; [dbo].[CsvToInt] ( &lt;span class=&quot;hljs-variable&quot;&gt;@Array&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(MAX))\n&lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@IntTable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n(IntValue &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(MAX)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n\n    while patindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%,%&apos;&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; patindex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%,%&apos;&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@IntTable&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Values&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;Cast&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;_value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stuff(&lt;span class=&quot;hljs-variable&quot;&gt;@array&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@separator&lt;/span&gt;_position, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In &lt;a href=&quot;http://en.wikipedia.org/wiki/ColdFusion&quot; rel=&quot;noreferrer&quot;&gt;ColdFusion&lt;/a&gt; we just do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;cfset myvalues &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;ruby|rails|scruffy|rubyonrails&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;cfquery name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;q&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sometable &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;cfqueryparam &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;#myvalues#&quot; list&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&quot;true&quot;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;cfquery&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a technique that recreates a local table to be used in a query string. Doing it this way eliminates all parsing problems. &lt;/p&gt;\n\n&lt;p&gt;The string can be built in any language. In this example I used SQL since that was the original problem I was trying to solve. I needed a clean way to pass in table data on the fly in a string to be executed later.&lt;/p&gt;\n\n&lt;p&gt;Using a user defined type is optional. Creating the type is only created once and can be done ahead of time. Otherwise just add a full table type to the declaration in the string. &lt;/p&gt;\n\n&lt;p&gt;The general pattern is easy to extend and can be used for passing more complex tables.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a user defined type for the list.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; TYPE [dbo].[StringList] &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt;(\n    [StringValue] [nvarchar](max) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a sample list using the list table type.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; [dbo].[StringList]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Build a string in which we recreate the list so we can pass it to exec&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-- This can be done in any language since we&apos;re just building a string.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; nvarchar(max);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;DECLARE @list [dbo].[StringList]; INSERT INTO @list VALUES &apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Add all the values we want to the string. This would be a loop in C++.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; StringValue &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;),&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@list&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Remove the trailing comma so the query is valid sql.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, len(&lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Add a select to test the string.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;; SELECT * FROM @list;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Execute the string and see we&apos;ve pass the table correctly.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXEC&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@str&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In SQL Server 2016+ another possibility is to use the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn921879.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;OPENJSON&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;\n\n&lt;p&gt;This approach is blogged about in &lt;a href=&quot;http://blogs.msdn.com/b/sqlserverstorageengine/archive/2015/11/03/openjson-one-of-best-ways-to-select-rows-by-list-of-id.aspx&quot; rel=&quot;noreferrer&quot;&gt;OPENJSON - one of best ways to select rows by list of ids&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A full worked example below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; dbo.Tags\n  (\n     Name  &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;),\n     Count &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;\n  )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; dbo.Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;      (&lt;span class=&quot;hljs-string&quot;&gt;&apos;VB&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;982&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1306&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;rails&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1478&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;scruffy&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;C#&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1784&lt;/span&gt;)\n\nGO\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; PROC dbo.SomeProc\n&lt;span class=&quot;hljs-variable&quot;&gt;@Tags&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(MAX)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; T.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   dbo.Tags T\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  T.Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; J.Value &lt;span class=&quot;hljs-keyword&quot;&gt;COLLATE&lt;/span&gt; Latin1_General_CI_AS\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   OPENJSON(CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@Tags&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;)) J)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; T.Count &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n\nGO\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXEC&lt;/span&gt; dbo.SomeProc &lt;span class=&quot;hljs-variable&quot;&gt;@Tags&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;ruby&quot;,&quot;rails&quot;,&quot;scruffy&quot;,&quot;rubyonrails&quot;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; dbo.Tags \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have an answer that doesn&apos;t require a UDF, XML\nBecause IN accepts a select statement\ne.g. SELECT * FROM Test where Data IN (SELECT Value FROM TABLE)&lt;/p&gt;\n\n&lt;p&gt;You really only need a way to convert the string into a table.&lt;/p&gt;\n\n&lt;p&gt;This can be done with a recursive CTE, or a query with a number table (or Master..spt_value)&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s the CTE version.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruby,rails,scruffy,rubyonrails&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n\n;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; RecursiveCSV(x,y) \n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; \n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n        x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)),\n        y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@InputString&lt;/span&gt;))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n        x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)),\n        y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,LEN(y))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n        RecursiveCSV \n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,LEN(y)) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; \n        &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,CHARINDEX(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,y,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n    Tags\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; \n    Name &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; RecursiveCSV)\nOPTION (MAXRECURSION &lt;span class=&quot;hljs-number&quot;&gt;32767&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I use a more concise version &lt;a href=&quot;https://stackoverflow.com/a/337792/16587&quot;&gt;of the top voted answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;SqlParameter&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; parameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tags.Select((s, i) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(&quot;@tag&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i.ToString(), SqlDbType.NVarChar(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)) { &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s}).ToList();\n\nvar whereCondition &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; string.Format(&quot;tags in ({0})&quot;, String.Join(&quot;,&quot;,parameters.Select(s &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; s.ParameterName)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It does loop through the tag parameters twice; but that doesn&apos;t matter most of the time (it won&apos;t be your bottleneck; if it is, unroll the loop).&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re really interested in performance and don&apos;t want to iterate through the loop twice, here&apos;s a less beautiful version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;var parameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;SqlParameter&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\nvar paramNames &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (var i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; tags.Length; i&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;)  \n{\n    var paramName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;@tag&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i;\n\n    &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Include size &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; explicitly (&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; AddWithValue)\n    &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Because &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; Server may use an implicit conversion if it doesn&lt;span class=&quot;hljs-string&quot;&gt;&apos;t know\n    //the actual size.\n    var p = new SqlParameter(paramName, SqlDbType.NVarChar(50) { Value = tags[i]; } \n    paramNames.Add(paramName);\n    parameters.Add(p);\n}\n\nvar inClause = string.Join(&quot;,&quot;, paramNames);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is another answer to this problem. &lt;/p&gt;\n\n&lt;p&gt;(new version posted on 6/4/13).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    private &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; DataSet GetDataSet(SqlConnectionStringBuilder scsb, string strSql, params object[] pars)\n    {\n        var ds &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DataSet();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (var sqlConn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlConnection(scsb.ConnectionString))\n        {\n            var sqlParameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;SqlParameter&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\n            var replacementStrings &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Dictionary&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;string, string&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;();\n            if (pars &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; pars.Length; i&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;)\n                {\n                    if (pars[i] &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; IEnumerable&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;)\n                    {\n                        List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; enumerable &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (pars[i] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IEnumerable&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;).ToList();\n                        replacementStrings.Add(&quot;@&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; i, String.Join(&quot;,&quot;, enumerable.Select((&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, pos) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; String.Format(&quot;@_{0}_{1}&quot;, i, pos))));\n                        sqlParameters.AddRange(enumerable.Select((&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, pos) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(String.Format(&quot;@_{0}_{1}&quot;, i, pos), &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; ?? DBNull.Value)).ToArray());\n                    }\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                    {\n                        sqlParameters.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(String.Format(&quot;@{0}&quot;, i), pars[i] ?? DBNull.Value));\n                    }\n                }\n            }\n            strSql &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; replacementStrings.Aggregate(strSql, (&lt;span class=&quot;hljs-keyword&quot;&gt;current&lt;/span&gt;, replacementString) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; current.Replace(replacementString.Key, replacementString.Value));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (var sqlCommand &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(strSql, sqlConn))\n            {\n                if (pars &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)\n                {\n                    sqlCommand.Parameters.AddRange(sqlParameters.ToArray());\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Fail&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;safe, just &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; intends &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; pass a single &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;parameter&lt;/span&gt;\n                    sqlCommand.Parameters.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlParameter(&quot;@0&quot;, DBNull.Value));\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (var sqlDataAdapter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlDataAdapter(sqlCommand))\n                {\n                    sqlDataAdapter.Fill(ds);\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ds;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cheers.&lt;/p&gt;\n    ","\n&lt;p&gt;The only winning move is not to play.&lt;/p&gt;\n\n&lt;p&gt;No infinite variability for you.  Only finite variability.&lt;/p&gt;\n\n&lt;p&gt;In the SQL you have a clause like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ( {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b.CompanyId &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ({&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}) )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the C# code you do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; origCount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; idList.Count;\n  if (origCount &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n    throw &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&quot;You may only specify up to five originators to filter on.&quot;);\n  }\n  while (idList.Count &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) { idList.Add(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;); }  &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; an impossible &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ExecuteQuery&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;PublishDate&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;(getValuesInListSQL, \n               origCount,   \n               idList[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], idList[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So basically if the count is 0 then there is no filter and everything goes through.  If the count is higher than 0 the then the value must be in the list, but the list has been padded out to five with impossible values (so that the SQL still makes sense)&lt;/p&gt;\n\n&lt;p&gt;Sometimes the lame solution is the only one that actually works.&lt;/p&gt;\n    "]},"page":"64","randomQuestions":[{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"Are global variables thread-safe in Flask? How do I share data between requests?","slug":"are-global-variables-thread-safe-in-flask-how-do-i-share-data-between-requests-1657387949951"},{"title":"ggplot with 2 y axes on each side and different scales","slug":"ggplot-with-2-y-axes-on-each-side-and-different-scales-1657388519163"},{"title":"MySQL pivot row into dynamic number of columns","slug":"mysql-pivot-row-into-dynamic-number-of-columns-1657387981930"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","slug":"what-is-an-indexoutofrangeexception-argumentoutofrangeexception-and-how-do-i-fix-it-1657384697159"},{"title":"Identifying and solving javax.el.PropertyNotFoundException: Target Unreachable","slug":"identifying-and-solving-javax.el.propertynotfoundexception:-target-unreachable-1657388164753"},{"title":"How to compare arrays in JavaScript?","slug":"how-to-compare-arrays-in-javascript-1657387352277"},{"title":"Accessing nested JavaScript objects and arrays by string path","slug":"accessing-nested-javascript-objects-and-arrays-by-string-path-1657387321754"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"Loop through an array in JavaScript","slug":"loop-through-an-array-in-javascript-1657387821551"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"How to get the difference between two arrays in JavaScript?","slug":"how-to-get-the-difference-between-two-arrays-in-javascript-1657388463384"},{"title":"Where and why do I have to put the \"template\" and \"typename\" keywords?","slug":"where-and-why-do-i-have-to-put-the-\"template\"-and-\"typename\"-keywords-1657384467606"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"}]},"__N_SSG":true}