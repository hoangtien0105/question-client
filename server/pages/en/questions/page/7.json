{"pageProps":{"data":{"count":610,"rows":[{"id":580,"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492","postType":"QUESTION","createdAt":"2022-07-09T17:41:16.000Z","updatedAt":"2022-07-09T17:41:16.000Z","tags":[]},{"id":579,"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057","postType":"QUESTION","createdAt":"2022-07-09T17:41:14.000Z","updatedAt":"2022-07-09T17:41:14.000Z","tags":[]},{"id":578,"title":"When should I use a return statement in ES6 arrow functions","slug":"when-should-i-use-a-return-statement-in-es6-arrow-functions-1657388472113","postType":"QUESTION","createdAt":"2022-07-09T17:41:12.000Z","updatedAt":"2022-07-09T17:41:12.000Z","tags":[]},{"id":577,"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341","postType":"QUESTION","createdAt":"2022-07-09T17:41:10.000Z","updatedAt":"2022-07-09T17:41:10.000Z","tags":[]},{"id":576,"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075","postType":"QUESTION","createdAt":"2022-07-09T17:41:08.000Z","updatedAt":"2022-07-09T17:41:08.000Z","tags":[{"id":2766,"name":"dynamic-variables","slug":"dynamic-variables","createdAt":"2022-07-09T17:41:08.000Z","updatedAt":"2022-07-09T17:41:08.000Z","Questions_Tags":{"questionId":576,"tagId":2766}}]}]},"answers":{"576":["\n&lt;p&gt;Since ECMA-/Javascript is all about &lt;code&gt;Objects&lt;/code&gt; and &lt;code&gt;Contexts&lt;/code&gt; (which, are also somekind of Object), every variable is stored in a such called &lt;strong&gt;Variable-&lt;/strong&gt; (or in case of a Function, &lt;strong&gt;Activation Object&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;p&gt;So if you create variables like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    c = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the &lt;strong&gt;Global scope&lt;/strong&gt; (= NO function context), you implicitly write those variables into the &lt;strong&gt;Global object&lt;/strong&gt; (= &lt;code&gt;window&lt;/code&gt; in a browser).&lt;/p&gt;\n\n&lt;p&gt;Those can get accessed by using the &quot;dot&quot; or &quot;bracket&quot; notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This only works for the global object in this particular instance, because the &lt;strong&gt;Variable Object&lt;/strong&gt; of the &lt;strong&gt;Global Object&lt;/strong&gt; is the &lt;code&gt;window&lt;/code&gt; object itself. Within the Context of a function, you don&apos;t have direct access to the &lt;strong&gt;Activation Object&lt;/strong&gt;. For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// === undefined&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(name);\n   name = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// === 1&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(name);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;new&lt;/code&gt; creates a new instance of a self-defined object (context). Without &lt;code&gt;new&lt;/code&gt; the scope of the function would be also &lt;code&gt;global&lt;/code&gt; (=window). This example would alert &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; respectively. If we would replace &lt;code&gt;this.a = 1; this.b = 2&lt;/code&gt; with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both alert outputs would be undefined. In that scenario, the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; would get stored in the Activation Object from &lt;code&gt;foobar&lt;/code&gt;, which we cannot access (of course we could access those directly by calling &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; is one option.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(name)); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Note that using the &lt;code&gt;eval()&lt;/code&gt; function is not recommended if you don&apos;t know what you are doing, since it brings multiple security issues. Use something else unless absolutely necessary. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot; rel=&quot;noreferrer&quot;&gt;the MDN page for eval&lt;/a&gt; for more info.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the window object to get at it . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myVar&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;window&lt;/code&gt; has a reference to all global variables and global functions you are using. &lt;/p&gt;\n    ","\n&lt;p&gt;Just don&apos;t know what a bad answer gets so many votes. It&apos;s quite easy answer but you make it complex.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If you want to get article_count&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// var article_count = 1000;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; type = &lt;span class=&quot;hljs-string&quot;&gt;&apos;article&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[type+&lt;span class=&quot;hljs-string&quot;&gt;&apos;_count&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// in a function we use &quot;this&quot;;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(article_count);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an example : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;+i] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + i;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p0); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 0&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p1); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p2); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p3); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myVariable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;coco&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[myVariable] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;riko&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(coco); &lt;span class=&quot;hljs-comment&quot;&gt;// display : riko&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, the value &quot;&lt;em&gt;coco&lt;/em&gt;&quot; of &lt;strong&gt;myVariable&lt;/strong&gt; becomes a variable &lt;strong&gt;coco&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Because all the variables in the global scope are properties of the Window object.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;varname&apos;&lt;/span&gt;;\nstr = a+&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(str)\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(varname);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try this...&lt;/p&gt;\n    ","\n&lt;p&gt;In Javascript you can use the fact that all properties are key value pairs. jAndy already mentioned this but I don&apos;t think his answer show how it can be exploited.&lt;/p&gt;\n\n&lt;p&gt;Usually you are not trying to create a variable to hold a variable name but are trying to generate variable names and then use them. PHP does it with &lt;code&gt;$$var&lt;/code&gt; notation but Javascript doesn&apos;t need to because property keys are interchangeable with array keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mine = {};\nmine[id] = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mine.&lt;span class=&quot;hljs-property&quot;&gt;abc&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;gives 123. Usually you want to construct the variable which is why there is the indirection so you can also do it the other way around.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mine = {};\nmine.&lt;span class=&quot;hljs-property&quot;&gt;abc&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mine[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;bc&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to use a global object like window or global (node), you can try something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {};\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;There\\&apos;s no need to store even more stuff in a global object.&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;2019 &lt;/p&gt;\n\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; operator can run string expression in the context it called and return variables from that context; &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;literal object&lt;/code&gt; theoretically can do that by write:&lt;code&gt;{[varName]}&lt;/code&gt;, but it blocked by definition. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So I come across this question and everyone here just play around without bringing a real solution. but @Axel Heider has a good approaching.&lt;/p&gt;\n\n&lt;p&gt;The solution is &lt;code&gt;eval&lt;/code&gt;.\nalmost most forgotten operator. ( think most one is &lt;code&gt;with()&lt;/code&gt; ) &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; operator can dynamically run expression in the context it called. and return the result of that expression. we can use that to dynamically return a  variable&apos;s value in function&apos;s context. &lt;/p&gt;\n\n&lt;p&gt;example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;exmaple1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(name)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example1&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// return 1&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;option&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, defaultValue = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(option){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;defaultValue&apos;&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt; (name);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return 2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// return 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that I always write explicitly the expression &lt;code&gt;eval&lt;/code&gt; will run.\nTo avoid unnecessary surprises in the code. &lt;code&gt;eval&lt;/code&gt; is very strong&lt;/strong&gt;\nBut I&apos;m sure you know that already&lt;/p&gt;\n\n&lt;p&gt;BTW, if it was legal we could use &lt;code&gt;literal object&lt;/code&gt; to capture the variable name and value, but we cant combine computed property names and property value shorthand, sadly, is invalid&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;functopn &lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; varName &lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; var1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, var2 =&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; capture = {[varName]}\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;var1&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//trow &apos;Uncaught SyntaxError: Unexpected token }`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to draw multiple FormData on the fly and object way worked well&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; forms = {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then in my loops whereever i needed to create a form data i used&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;forms[&lt;span class=&quot;hljs-string&quot;&gt;&quot;formdata&quot;&lt;/span&gt;+counter]=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\nforms[&lt;span class=&quot;hljs-string&quot;&gt;&quot;formdata&quot;&lt;/span&gt;+counter].&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(var_name, var_value);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an alternative for those who need to export a dynamically named variable&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; {\n  [someVariable]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some value&apos;&lt;/span&gt;,\n  [anotherVariable]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;another value&apos;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// then.... import from another file like this:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; vars &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;./some-file&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another alternative is to simply create an object whose keys are named dynamically&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; vars = { [someVariable]: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [otherVariable]: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// consume it like this&lt;/span&gt;\nvars[someVariable];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;use Object is great too.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:a,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:b}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(temp[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;],temp[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although this have an accepted answer I would like to add an observation: &lt;/p&gt;\n\n&lt;p&gt;In ES6 using &lt;code&gt;let&lt;/code&gt; &lt;strong&gt;doesn&apos;t work&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*this is NOT working*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;skyBlue&quot;&lt;/span&gt;,\n    m = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gold&quot;&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tomato&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;However using &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;works&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*this IS working*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;skyBlue&quot;&lt;/span&gt;,\n    m = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gold&quot;&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tomato&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope this may be useful to some.&lt;/p&gt;\n    ","\n&lt;p&gt;This will do exactly what you done in php:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ccc = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[name] ); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;what they mean is no, you can&apos;t.\nthere is no way to get it done.\nso it was possible you could do something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-comment&quot;&gt;// where obj is an object and const is a variable name&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;const&lt;/span&gt; () {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myProperty&lt;/span&gt; = property_value;\n&lt;span class=&quot;hljs-comment&quot;&gt;// .. more prototype&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;const&lt;/span&gt;();\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;having a create function just like the one implemented in ECMAScript 5.&lt;/p&gt;\n    ","\n&lt;p&gt;eval() did not work in my tests. But adding new JavaScript code to the DOM tree is possible. So here is a function that adds a new variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createVariable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;varName,varContent&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scriptStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;var &quot;&lt;/span&gt;+varName+&lt;span class=&quot;hljs-string&quot;&gt;&quot;= \\&quot;&quot;&lt;/span&gt;+varContent+&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;&quot;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_scriptCode = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createTextNode&lt;/span&gt;( scriptStr )\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);\n  node_script.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;\n  node_script.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(node_scriptCode);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_head = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n  node_head.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(node_script);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;createVariable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dynamicVar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some content&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(dynamicVar)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is always better to use create a namespace and declare a variable in it instead of adding it to the global object. We can also create a function to get and set the value&lt;/p&gt;\n&lt;p&gt;See the below code snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//creating a namespace in which all the variables will be defined.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObjects={};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//function that will set the name property in the myObjects namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;){\n  myObjects.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;=val;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//function that will return the name property in the myObjects namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myObjects.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//now we can use it like:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kevin&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = x;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(y)  &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;kevin&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(z); &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;y&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(z)); &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;kevin&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this similar way, we can declare and use multiple variables. Although this will increase the line of code but the code will be more robust and less error-prone.&lt;/p&gt;\n    "],"577":["\n&lt;p&gt;The benefit of not calling via the shell is that you are not invoking a &apos;mystery program.&apos;  On POSIX, the environment variable &lt;code&gt;SHELL&lt;/code&gt; controls which binary is invoked as the &quot;shell.&quot;  On Windows, there is no bourne shell descendent, only cmd.exe.&lt;/p&gt;\n\n&lt;p&gt;So invoking the shell invokes a program of the user&apos;s choosing and is platform-dependent.  Generally speaking, avoid invocations via the shell.&lt;/p&gt;\n\n&lt;p&gt;Invoking via the shell does allow you to expand environment variables and file globs according to the shell&apos;s usual mechanism.  On POSIX systems, the shell expands file globs to a list of files.  On Windows, a file glob (e.g., &quot;*.*&quot;) is not expanded by the shell, anyway (but environment variables on a command line &lt;em&gt;are&lt;/em&gt; expanded by cmd.exe).&lt;/p&gt;\n\n&lt;p&gt;If you think you want environment variable expansions and file globs, research the &lt;code&gt;ILS&lt;/code&gt; attacks of 1992-ish on network services which performed subprogram invocations via the shell.  Examples include the various &lt;code&gt;sendmail&lt;/code&gt; backdoors involving &lt;code&gt;ILS&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In summary, use &lt;code&gt;shell=False&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.call(&lt;span class=&quot;hljs-string&quot;&gt;&apos;echo $HOME&apos;&lt;/span&gt;)\nTraceback (most recent call last):\n...\nOSError: [Errno &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] No such file &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; directory\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.call(&lt;span class=&quot;hljs-string&quot;&gt;&apos;echo $HOME&apos;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n/user/khong\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Setting the shell argument to a true value causes subprocess to spawn an intermediate shell process, and tell it to run the command. In other words, using an intermediate shell means that variables, glob patterns, and other special shell features in the command string are processed before the command is run. Here, in the example, $HOME was processed before the echo command. Actually, this is the case of command with shell expansion while the command ls -l considered as a simple command.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;source: &lt;a href=&quot;http://www.bogotobogo.com/python/python_subprocess_module.php&quot; rel=&quot;noreferrer&quot;&gt;Subprocess Module&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;An example where things could go wrong with Shell=True is shown here&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; call\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;filename = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;What file would you like to display?\\n&quot;&lt;/span&gt;)\nWhat file would you like to display?\nnon_existent; rm -rf / &lt;span class=&quot;hljs-comment&quot;&gt;# THIS WILL DELETE EVERYTHING IN ROOT PARTITION!!!&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;call(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cat &quot;&lt;/span&gt; + filename, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Uh-oh. This will end badly...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Check the doc here: &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#frequently-used-arguments&quot;&gt;subprocess.call()&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Executing programs through the shell means that all user input passed to the program is interpreted according to the syntax and semantic rules of the invoked shell.  At best, this only causes inconvenience to the user, because the user has to obey these rules.  For instance, paths containing special shell characters like quotation marks or blanks must be escaped.  At worst, it causes security leaks, because the user can execute arbitrary programs.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;shell=True&lt;/code&gt; is sometimes convenient to make use of specific shell features like word splitting or parameter expansion.  However, if such a feature is required, make use of other modules are given to you (e.g. &lt;code&gt;os.path.expandvars()&lt;/code&gt; for parameter expansion or &lt;code&gt;shlex&lt;/code&gt; for word splitting).  This means more work, but avoids other problems.&lt;/p&gt;\n\n&lt;p&gt;In short: Avoid &lt;code&gt;shell=True&lt;/code&gt; by all means.&lt;/p&gt;\n    ","\n&lt;p&gt;The other answers here adequately explain the security caveats which are also mentioned in the &lt;code&gt;subprocess&lt;/code&gt; documentation.  But in addition to that, the overhead of starting a shell to start the program you want to run is often unnecessary and definitely silly for situations where you don&apos;t actually use any of the shell&apos;s functionality.  Moreover, the additional hidden complexity should scare you, &lt;em&gt;especially&lt;/em&gt; if you are not very familiar with the shell or the services it provides.&lt;/p&gt;\n&lt;p&gt;Where the interactions with the shell are nontrivial, you now require the reader and maintainer of the Python script (which may or may not be your future self) to understand both Python and shell script. Remember the Python motto &lt;em&gt;&quot;explicit is better than implicit&quot;;&lt;/em&gt; even when the Python code is going to be somewhat more complex than the equivalent (and often very terse) shell script, you might be better off removing the shell and replacing the functionality with native Python constructs. Minimizing the work done in an external process and keeping control within your own code as far as possible is often a good idea simply because it improves visibility and reduces the risks of -- wanted or unwanted -- side effects.&lt;/p&gt;\n&lt;p&gt;Wildcard expansion, variable interpolation, and redirection are all simple to replace with native Python constructs.  A complex shell pipeline where parts or all cannot be reasonably rewritten in Python would be the one situation where perhaps you could consider using the shell.  You should still make sure you understand the performance and security implications.&lt;/p&gt;\n&lt;p&gt;In the trivial case, to avoid &lt;code&gt;shell=True&lt;/code&gt;, simply replace&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.Popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;command -with -options &apos;like this&apos; and\\\\ an\\\\ argument&quot;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.Popen([&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-with&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-options&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;like this&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;and an argument&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice how the first argument is a list of strings to pass to &lt;code&gt;execvp()&lt;/code&gt;, and how quoting strings and backslash-escaping shell metacharacters is generally not necessary (or useful, or correct).\nMaybe see also &lt;a href=&quot;https://stackoverflow.com/questions/10067266/when-to-wrap-quotes-around-a-shell-variable/27701642&quot;&gt;When to wrap quotes around a shell variable?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you don&apos;t want to figure this out yourself, the &lt;code&gt;shlex.split()&lt;/code&gt; function can do this for you. It&apos;s part of the Python standard library, but of course, if your shell command string is static, you can just run it once, during development, and paste the result into your script.&lt;/p&gt;\n&lt;p&gt;As an aside, you very often want to avoid &lt;code&gt;Popen&lt;/code&gt; if one of the simpler wrappers in the &lt;code&gt;subprocess&lt;/code&gt; package does what you want. If you have a recent enough Python, you should probably use &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;With &lt;code&gt;check=True&lt;/code&gt; it will fail if the command you ran failed.&lt;/li&gt;\n&lt;li&gt;With &lt;code&gt;stdout=subprocess.PIPE&lt;/code&gt; it will capture the command&apos;s output.&lt;/li&gt;\n&lt;li&gt;With &lt;code&gt;text=True&lt;/code&gt; (or somewhat obscurely, with the synonym &lt;code&gt;universal_newlines=True&lt;/code&gt;) it will decode output into a proper Unicode string (it&apos;s just &lt;code&gt;bytes&lt;/code&gt; in the system encoding otherwise, on Python 3).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If not, for many tasks, you want &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.check_output&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;check_output&lt;/code&gt;&lt;/a&gt; to obtain the output from a command, whilst checking that it succeeded, or &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.check_call&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;check_call&lt;/code&gt;&lt;/a&gt; if there is no output to collect.&lt;/p&gt;\n&lt;p&gt;I&apos;ll close with a quote from David Korn: &quot;It&apos;s easier to write a portable shell than a portable shell script.&quot; Even &lt;code&gt;subprocess.run(&apos;echo &quot;$HOME&quot;&apos;, shell=True)&lt;/code&gt; is not portable to Windows.&lt;/p&gt;\n    ","\n&lt;p&gt;Anwser above explains it correctly, but not straight enough.\nLet use &lt;code&gt;ps&lt;/code&gt; command to see what happens.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n\ns = subprocess.Popen([&lt;span class=&quot;hljs-string&quot;&gt;&quot;sleep 100&quot;&lt;/span&gt;], shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(s.pid)\ntime.sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\ns.kill()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;finish&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Run it, and shows&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;start\n&lt;span class=&quot;hljs-number&quot;&gt;832758&lt;/span&gt;\nfinish\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can then use &lt;code&gt;ps -auxf &amp;gt; 1&lt;/code&gt; before &lt;code&gt;finish&lt;/code&gt;, and then &lt;code&gt;ps -auxf &amp;gt; 2&lt;/code&gt; after &lt;code&gt;finish&lt;/code&gt;. Here is the output&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cy         &lt;span class=&quot;hljs-number&quot;&gt;71209&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;9184&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4580&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    Ss   Oct20   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       \\_ /&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;/bash\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832757&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;13324&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9600&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S+   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       |   \\_ python /home/cy/Desktop/test.py\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832758&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2616&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;612&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S+   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       |       \\_ /&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;/sh -c sleep &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832759&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5448&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;532&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S+   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       |           \\_ sleep &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See? Instead of directly running &lt;code&gt;sleep 100&lt;/code&gt;. it actually runs &lt;code&gt;/bin/sh&lt;/code&gt;. and the &lt;code&gt;pid&lt;/code&gt; it prints out is actually the &lt;code&gt;pid&lt;/code&gt; of &lt;code&gt;/bin/sh&lt;/code&gt;. After if you call &lt;code&gt;s.kill()&lt;/code&gt;, it kills &lt;code&gt;/bin/sh&lt;/code&gt; but &lt;code&gt;sleep&lt;/code&gt; is still there.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cy         &lt;span class=&quot;hljs-number&quot;&gt;69369&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;533764&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8160&lt;/span&gt; ?        Ssl  Oct20   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;  \\_ /usr/libexec/xdg-desktop-portal\ncy         &lt;span class=&quot;hljs-number&quot;&gt;69411&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;491652&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14856&lt;/span&gt; ?        Ssl  Oct20   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:04  \\_ /usr/libexec/xdg-desktop-portal-gtk\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832646&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5448&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;596&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S    &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  \\_ sleep &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So the next question is , what can &lt;code&gt;/bin/sh&lt;/code&gt; do? Every linux user knows it, heard it, and uses it. But i bet there are so many people who doesn&apos;t really understand what is &lt;code&gt;shell&lt;/code&gt; indeed. Maybe you also hear &lt;code&gt;/bin/bash&lt;/code&gt;, they&apos;re similar.&lt;/p&gt;\n&lt;p&gt;One obvious function of shell is for users convenience to run linux application. because of shell programm like &lt;code&gt;sh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt;, you can directly use command like &lt;code&gt;ls&lt;/code&gt; rather than &lt;code&gt;/usr/bin/ls&lt;/code&gt;. it will search where &lt;code&gt;ls&lt;/code&gt; is and runs it for you.&lt;/p&gt;\n&lt;p&gt;Other function is it will interpret string after &lt;code&gt;$&lt;/code&gt; as environment variable. You can compare these two python script to findout yourself.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.call([&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo $PATH&quot;&lt;/span&gt;], shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.call([&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$PATH&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;And the most important, it makes possible to run linux command as script. Such as &lt;code&gt;if&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; are introduced by shell. it&apos;s not native linux command&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;let&apos;s assume you are using shell=False and providing the command as a list. And some malicious  user tried injecting an &apos;rm&apos; command.\nYou will see, that &apos;rm&apos; will be interpreted as an argument and effectively &apos;ls&apos; will try to find a file called &apos;rm&apos;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/etc/passwd&apos;&lt;/span&gt;])\nls: rm: No such file &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; directory\n-rw-r--r--    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;hljs-number&quot;&gt;1172&lt;/span&gt; May &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt; /etc/passwd\ndrwxr-xr-x    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; root     root          &lt;span class=&quot;hljs-number&quot;&gt;4096&lt;/span&gt; May &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt; /home\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/etc/passwd&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;shell=False is not a secure by default, if you don&apos;t control the input properly. You can still execute dangerous commands.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-rf&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;])\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-rf&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;])\nls: /home: No such file &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; directory\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I am writing most of my applications in container environments, I know which shell is being invoked and i am not taking any user input.&lt;/p&gt;\n&lt;p&gt;So in my use case, I see no security risk. And it is much easier creating long string of commands. Hope I am not wrong.&lt;/p&gt;\n    "],"578":["\n&lt;p&gt;Jackson has partially &lt;a href=&quot;https://stackoverflow.com/a/28135120/473961&quot;&gt;answered this&lt;/a&gt; in a similar question:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Implicit return, but only if there is no block.&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;This will result in errors when a one-liner expands to multiple lines and the programmer forgets to add a &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;\n  &lt;li&gt;Implicit return is syntactically ambiguous. &lt;code&gt;(name) =&amp;gt; {id: name}&lt;/code&gt;returns the object &lt;code&gt;{id: name}&lt;/code&gt;... right? Wrong. It returns &lt;code&gt;undefined&lt;/code&gt;. Those braces are an explicit block. &lt;code&gt;id:&lt;/code&gt; is a label.&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I would add to this the definition of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block&quot; rel=&quot;noreferrer&quot;&gt;block&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:\n&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// returns: undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: an empty block with an implicit return&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {})() \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: &apos;Hi Jess&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: no block means implicit return&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hi &apos;&lt;/span&gt; + name)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: explicit return required inside block, but is missing.&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hi &apos;&lt;/span&gt; + name})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: &apos;Hi Jess&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: explicit return in block exists&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hi &apos;&lt;/span&gt; + name})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;) \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: a block containing a single label. No explicit return.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: name})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;) \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: {id: &apos;Jess&apos;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: implicit return of expression ( ) which evaluates to an object&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: name}))(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;) \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: {id: &apos;Jess&apos;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// explanation: explicit return inside block returns object&lt;/span&gt;\n(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: name}})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;) \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I understand this rule-of-thumb ... &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For functions that are effectively transforms (one-line-manipulations of arguments), return is implicit. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Candidates are:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// square-root &lt;/span&gt;\nvalue =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sqrt&lt;/span&gt;(value)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// sum&lt;/span&gt;\n(a,b) =&amp;gt; a+b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For other operations (more than one-liners that require a block, return has to be explicit&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s another case here.&lt;/p&gt;\n\n&lt;p&gt;When writing a functional component in React, you can use parentheses to wrap implicitly returned JSX.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;FunctionalComponent&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; (\n  &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;OtherComponent&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another case that gave me some trouble. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the &quot;tricky&quot; way&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrap&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;foo&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;bar&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (foo === &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + bar;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;nofoo &apos;&lt;/span&gt; + bar;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here we define a function returning an anonymous function.The &quot;tricky&quot; bit is that the function body for the outer function (the part begining with (bar) =&amp;gt; ...) visually looks like a &quot;block&quot;, but it&apos;s not. Since it&apos;s not, implicit return kicks in.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s how wrap would execute:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// use wrap() to create a function withfoo()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; withfoo = &lt;span class=&quot;hljs-title function_&quot;&gt;wrap&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: foo bar&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;withfoo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// use wrap() to create a function withoutfoo()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; withoutfoo = &lt;span class=&quot;hljs-title function_&quot;&gt;wrap&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: nofoo bar&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;withoutfoo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The way I unpacked this to make sure I understood it was to &quot;unarrowify&quot; the functions.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s the semantic equivalent of the first code block, simply making the body of wrap() do an explicit return. This definition produces the same results as above.  This is where the dots connect. Compare the first code block above with the one below, and it&apos;s clear that an arrow function itself is treated as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Function_body&quot; rel=&quot;noreferrer&quot;&gt;an expression, not a block, and has the implied return&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the explicit return way&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrap&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;foo&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;bar&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (foo === &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + bar;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;nofoo &apos;&lt;/span&gt; + bar;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The fully unarrowified version of wrap would be like this, which while not as compact as the fat arrowed up version, seems a lot easier to comprehend.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the &quot;no arrow functions&quot; way&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; wrap = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;foo&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;bar&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (foo === &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + bar;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;nofoo &apos;&lt;/span&gt; + bar;\n  };\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the end, for others that may have to read my code, and future me, I think I&apos;d prefer to go the non arrow version which can be comprehended visually at first glance, rather than the arrow one which takes a fair bit of thought (and in my case experimentation) to grok.&lt;/p&gt;\n    ","\n&lt;p&gt;Arrow functions allow you to have an implicit return: values are returned without having to use the &lt;code&gt;return&lt;/code&gt; keyword.&lt;/p&gt;\n\n&lt;p&gt;It works when there is a on-line statement in the function body:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunction&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;myFunction&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;//&apos;test&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Another example, returning an object (remember to wrap the curly brackets in parentheses to avoid it being considered the wrapping function body brackets):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunction&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; ({&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;myFunction&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;//{value: &apos;test&apos;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Omitting the brackets {} and return keyword from an arrow function are ok if:\n(1) You wouldn&apos;t have any code (e.g. assignment statements) before the return statement and\n(2) You would be returning a single entity [Note: The single entity can be multiple lines.  If so, then all you need are regular parentheses() like the example below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;posts.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;post&lt;/span&gt; =&amp;gt;&lt;/span&gt; (\n  &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{post.id}&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    {post.title}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n))\n&lt;/code&gt;&lt;/pre&gt;\n    "],"579":["\n&lt;p&gt;There is no enlightened answer, it&apos;s just because it&apos;s not defined as valid syntax by the C++ language...  So it is so, by definition of the language.&lt;/p&gt;\n\n&lt;p&gt;If you do have an expression within then it is valid.  For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; ((&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));&lt;span class=&quot;hljs-comment&quot;&gt;//compiles&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even simpler put: because &lt;code&gt;(x)&lt;/code&gt; is a valid C++ expression, while &lt;code&gt;()&lt;/code&gt; is not. &lt;/p&gt;\n\n&lt;p&gt;To learn more about how languages are defined, and how compilers work, you should learn about &lt;a href=&quot;http://en.wikipedia.org/wiki/Formal_language_theory&quot; rel=&quot;noreferrer&quot;&gt;Formal language theory&lt;/a&gt; or more specifically &lt;a href=&quot;http://en.wikipedia.org/wiki/Context-free_grammar&quot; rel=&quot;noreferrer&quot;&gt;Context Free Grammars (CFG)&lt;/a&gt; and related material like finite state machines.  If you are interested in that though the wikipedia pages won&apos;t be enough, you&apos;ll have to get a book.&lt;/p&gt;\n    ","\n&lt;p&gt;The final solution to this issue is to move to the C+11 uniform initialization syntax if you can.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;A a{};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.stroustrup.com/C++11FAQ.html#uniform-init&quot;&gt;http://www.stroustrup.com/C++11FAQ.html#uniform-init&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;C function declarators&lt;/h1&gt;\n\n&lt;p&gt;First of all, there is C. In C, &lt;code&gt;A a()&lt;/code&gt; is function declaration. For example, &lt;code&gt;putchar&lt;/code&gt; has the following declaration. Normally, such declarations are stored in header files, however nothing stops you from writing them manually, if you know how the declaration of function looks like. The argument names are optional in declarations, so I omitted it in this example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This allows you to write the code like this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;C also allows you to define functions that take functions as arguments, with nice readable syntax that looks like a function call (well, it&apos;s readable, as long you won&apos;t return a pointer to function).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;eighty_four&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;output_result&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; callback())&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Returned: %d\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;callback&lt;/span&gt;());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;output_result&lt;/span&gt;(eighty_four);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As I mentioned, C allows omitting argument names in header files, therefore the &lt;code&gt;output_result&lt;/code&gt; would look like this in header file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;output_result&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;One argument in constructor&lt;/h1&gt;\n\n&lt;p&gt;Don&apos;t you recognize that one? Well, let me remind you.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;A &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(B())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yep, it&apos;s exactly the same function declaration. &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;output_result&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can easily notice a conflict of C with new features of C++. To be exact, constructors being class name and parenthesis, and alternate declaration syntax with &lt;code&gt;()&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;. By design, C++ tries to be compatible with C code, and therefore it has to deal with this case - even if practically nobody cares. Therefore, old C features have priority over new C++ features. The grammar of declarations tries to match the name as function, before reverting to the new syntax with &lt;code&gt;()&lt;/code&gt; if it fails.&lt;/p&gt;\n\n&lt;p&gt;If one of those features wouldn&apos;t exist, or had a different syntax (like &lt;code&gt;{}&lt;/code&gt; in C++11), this issue would never have happened for syntax with one argument.&lt;/p&gt;\n\n&lt;p&gt;Now you may ask why &lt;code&gt;A a((B()))&lt;/code&gt; works. Well, let&apos;s declare &lt;code&gt;output_result&lt;/code&gt; with useless parentheses.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;output_result&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;()))&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It won&apos;t work. The grammar requires the variable to not be in parentheses.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&amp;lt;stdin&amp;gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;: error: expected declaration specifiers &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; ... before ( token\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, C++ expects standard expression here. In C++, you can write the following code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the following code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value = ((((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;()))));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;C++ expects expression inside inside parentheses to be... well... expression, as opposed to the type C expects. Parentheses don&apos;t mean anything here. However, by inserting useless parentheses, the C function declaration is not matched, and the new syntax can be matched properly (which simply expects an expression, such as &lt;code&gt;2 + 2&lt;/code&gt;).&lt;/p&gt;\n\n&lt;h1&gt;More arguments in constructor&lt;/h1&gt;\n\n&lt;p&gt;Surely one argument is nice, but what about two? It&apos;s not that constructors may have just one argument. One of built-in classes which takes two arguments is &lt;code&gt;std::string&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;hundred_dots&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is all well and fine (technically, it would have most vexing parse if it would be written as &lt;code&gt;std::string wat(int(), char())&lt;/code&gt;, but let&apos;s be honest - who would write that? But let&apos;s assume this code has a vexing problem. You would assume that you have to put everything in parentheses.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;hundred_dots&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not quite so.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&amp;lt;stdin&amp;gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;: error: invalid conversion from &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; to &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* [-fpermissive]\nIn file included from /usr/include/c++/&lt;span class=&quot;hljs-number&quot;&gt;4.8&lt;/span&gt;/string:&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n                 from &amp;lt;stdin&amp;gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n/usr/include/c++/&lt;span class=&quot;hljs-number&quot;&gt;4.8&lt;/span&gt;/bits/basic_string.tcc:&lt;span class=&quot;hljs-number&quot;&gt;212&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: error:   initializing argument &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; of std::basic_string&amp;lt;_CharT, _Traits, _Alloc&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;basic_string&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; _CharT*, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; _Alloc&amp;amp;) [with _CharT = &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;; _Traits = std::char_traits&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;; _Alloc = std::allocator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;] [-fpermissive]\n     basic_string&amp;lt;_CharT, _Traits, _Alloc&amp;gt;::\n     ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m not sure why g++ tries to convert &lt;code&gt;char&lt;/code&gt; to &lt;code&gt;const char *&lt;/code&gt;. Either way, the constructor was called with just one value of type &lt;code&gt;char&lt;/code&gt;. There is no overload which has one argument of type &lt;code&gt;char&lt;/code&gt;, therefore the compiler is confused. You may ask - why the argument is of type char?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yes, &lt;code&gt;,&lt;/code&gt; here is a comma operator. The comma operator takes two arguments, and gives the right-side argument. It isn&apos;t really useful, but it&apos;s something to be known for my explanation.&lt;/p&gt;\n\n&lt;p&gt;Instead, to solve the most vexing parse, the following code is needed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;hundred_dots&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The arguments are in parentheses, not the entire expression. In fact, just one of expressions needs to be in parentheses, as it&apos;s enough to break from the C grammar slightly to use the C++ feature. Things brings us to the point of zero arguments.&lt;/p&gt;\n\n&lt;h1&gt;Zero arguments in constructor&lt;/h1&gt;\n\n&lt;p&gt;You may have noticed the &lt;code&gt;eighty_four&lt;/code&gt; function in my explanation.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;eighty_four&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yes, this is also affected by the most vexing parse. It&apos;s a valid definition, and one you most likely have seen if you created header files (and you should). Adding parentheses doesn&apos;t fix it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;eighty_four&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why is that so? Well, &lt;code&gt;()&lt;/code&gt; is not an expression. In C++, you have to put an expression between parentheses. You cannot write &lt;code&gt;auto value = ()&lt;/code&gt; in C++, because &lt;code&gt;()&lt;/code&gt; doesn&apos;t mean anything (and even if did, like empty tuple (see Python), it would be one argument, not zero). Practically that means you cannot use shorthand syntax without using C++11&apos;s &lt;code&gt;{}&lt;/code&gt; syntax, as there are no expressions to put in parenthesis, and C grammar for function declarations will always apply.&lt;/p&gt;\n    ","\n&lt;p&gt;You could instead&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;A &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;A a=&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The innermost parens in your example would be an expression, and in C++ the grammar defines an &lt;code&gt;expression&lt;/code&gt; to be an &lt;code&gt;assignment-expression&lt;/code&gt; or another &lt;code&gt;expression&lt;/code&gt; followed by a comma and another &lt;code&gt;assignment-expression&lt;/code&gt; (Appendix A.4 - Grammar summary/Expressions).&lt;/p&gt;\n\n&lt;p&gt;The grammar further defines an &lt;code&gt;assignment-expression&lt;/code&gt; as one of several other types of expression, none of which can be nothing (or only whitespace).&lt;/p&gt;\n\n&lt;p&gt;So the reason you can&apos;t have &lt;code&gt;A a(())&lt;/code&gt; is simply because the grammar doesn&apos;t allow it.  However, I can&apos;t answer why the people who created C++ didn&apos;t allow this particular use of empty parens as some sort of special-case - I&apos;d guess that they&apos;d rather not put in such a special case if there was a reasonable alternative.&lt;/p&gt;\n    "],"580":["\n&lt;p&gt;There are a few things you should check :&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Did you write the name of your function correctly? Names are case sensitive.&lt;/li&gt;\n&lt;li&gt;Did you install the package that contains the function? &lt;code&gt;install.packages(&quot;thePackage&quot;)&lt;/code&gt; (this only needs to be done once)&lt;/li&gt;\n&lt;li&gt;Did you attach that package to the workspace ?\n&lt;code&gt;require(thePackage)&lt;/code&gt; (and check its return value) or &lt;code&gt;library(thePackage)&lt;/code&gt; (this should be done every time you start a new R session)&lt;/li&gt;\n&lt;li&gt;Are you using an older R version where this function didn&apos;t exist yet?&lt;/li&gt;\n&lt;li&gt;Are you using a different version of the specific &lt;em&gt;package&lt;/em&gt;? This could be in either direction: functions are added and removed over time, and it&apos;s possible the code you&apos;re referencing is expecting a newer or older version of the package than what you have installed.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If you&apos;re not sure in which package that function is situated, you can do a few things.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;If you&apos;re sure you installed and attached/loaded the right package, type &lt;code&gt;help.search(&quot;some.function&quot;)&lt;/code&gt; or &lt;code&gt;??some.function&lt;/code&gt; to get an information box that can tell you in which package it is contained.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;find&lt;/code&gt; and &lt;code&gt;getAnywhere&lt;/code&gt; can also be used to locate functions.&lt;/li&gt;\n&lt;li&gt;If you have no clue about the package, you can use &lt;code&gt;findFn&lt;/code&gt; in the &lt;code&gt;sos&lt;/code&gt; package as explained in &lt;a href=&quot;https://stackoverflow.com/questions/7004710/lapply-is-part-of-what-package-in-r&quot;&gt;this answer&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;RSiteSearch(&quot;some.function&quot;)&lt;/code&gt; or searching with &lt;a href=&quot;https://www.rdocumentation.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;rdocumentation&lt;/a&gt; or &lt;a href=&quot;http://rseek.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;rseek&lt;/a&gt; are alternative ways to find the function.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Sometimes you need to use an older version of R, but run code created for a newer version. Newly added functions (eg hasName in R 3.4.0) won&apos;t be found then. If you use an older R version and want to use a newer function, you can use the package &lt;a href=&quot;https://cran.r-project.org/package=backports&quot; rel=&quot;nofollow noreferrer&quot;&gt;backports&lt;/a&gt; to make such functions available. You also find a list of functions that need to be backported on the &lt;a href=&quot;https://github.com/r-lib/backports/blob/master/README.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;git repo of backports&lt;/a&gt;. Keep in mind that R versions older than R3.0.0 are incompatible with packages built for R3.0.0 and later versions.&lt;/p&gt;\n    ","\n&lt;p&gt;Another problem, in the presence of a NAMESPACE, is that you are trying to run an unexported function from package &lt;strong&gt;foo&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example (contrived, I know, but):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; mod &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; prcomp&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;USArrests&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; scale &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; plot.prcomp&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mod&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nError&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; could not find &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;plot.prcomp&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Firstly, you shouldn&apos;t be calling S3 methods directly, but lets assume &lt;code&gt;plot.prcomp&lt;/code&gt; was actually some useful internal function in package &lt;em&gt;foo&lt;/em&gt;. To call such function if you know what you are doing requires the use of &lt;code&gt;:::&lt;/code&gt;. You also need to know the namespace in which the function is found. Using &lt;code&gt;getAnywhere()&lt;/code&gt; we find that the function is in package &lt;strong&gt;stats&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; getAnywhere&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;plot.prcomp&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nA single object matching plot.prcomp was found\nIt was found &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the following places\n  registered S3 method &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; plot from namespace stats\n  namespace&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;stats\nwith value\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; main &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; deparse&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;substitute&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \nscreeplot.default&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; main &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; main&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;environment&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; namespace&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;stats&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So we can now call it directly using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; stats&lt;span class=&quot;hljs-operator&quot;&gt;:::&lt;/span&gt;plot.prcomp&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mod&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve used &lt;code&gt;plot.prcomp&lt;/code&gt; just as an example to illustrate the purpose. In normal use you shouldn&apos;t be calling S3 methods like this. But as I said, if the function you want to call exists (it might be a hidden utility function for example), but is in a &lt;code&gt;namespace&lt;/code&gt;, R will report that it can&apos;t find the function unless you tell it which namespace to look in.&lt;/p&gt;\n\n&lt;p&gt;Compare this to the following:\n&lt;code&gt;stats::plot.prcomp&lt;/code&gt;\nThe above fails because while &lt;code&gt;stats&lt;/code&gt; uses &lt;code&gt;plot.prcomp&lt;/code&gt;, it is not exported from &lt;code&gt;stats&lt;/code&gt; as the error rightly tells us:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Error: &apos;plot.prcomp&apos; is not an exported object from &apos;namespace:stats&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is documented as follows:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;pkg::name returns the value of the exported variable name in namespace pkg, whereas pkg:::name returns the value of the internal variable name.  &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I can usually resolve this problem when a computer is under my control, but it&apos;s more of a nuisance when working with a grid.  When a grid is not homogenous, not all libraries may be installed, and my experience has often been that a package wasn&apos;t installed because a dependency wasn&apos;t installed.  To address this, I check the following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Is Fortran installed? (Look for &apos;gfortran&apos;.) This affects several major packages in R.&lt;/li&gt;\n&lt;li&gt;Is Java installed?  Are the Java class paths correct?&lt;/li&gt;\n&lt;li&gt;Check that the package was installed by the admin and available for use by the appropriate user.  Sometimes users will install packages in the wrong places or run without appropriate access to the right libraries.  &lt;code&gt;.libPaths()&lt;/code&gt; is a good check.&lt;/li&gt;\n&lt;li&gt;Check &lt;code&gt;ldd&lt;/code&gt; results for R, to be sure about shared libraries&lt;/li&gt;\n&lt;li&gt;It&apos;s good to periodically run a script that just loads every package needed and does some little test.  This catches the package issue as early as possible in the workflow.  This is akin to build testing or unit testing, except it&apos;s more like a smoke test to make sure that the very basic stuff works.&lt;/li&gt;\n&lt;li&gt;If packages can be stored in a network-accessible location, are they?  If they cannot, is there a way to ensure consistent versions across the machines?  (This may seem OT, but correct package installation includes availability of the &lt;em&gt;right&lt;/em&gt; version.)&lt;/li&gt;\n&lt;li&gt;Is the package available for the given OS?  Unfortunately, not all packages are available across platforms.  This goes back to step 5.  If possible, try to find a way to handle a different OS by switching to an appropriate flavor of a package or switch off the dependency in certain cases.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Having encountered this quite a bit, some of these steps become fairly routine.  Although #7 might seem like a good starting point, these are listed in approximate order of the frequency that I use them.&lt;/p&gt;\n    ","\n&lt;p&gt;If this occurs while you check your package (R CMD check), take a look at your NAMESPACE.&lt;/p&gt;\n\n&lt;p&gt;You can solve this by adding the following statement to the NAMESPACE: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;exportPattern&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;^[^\\\\\\\\.]&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This exports everything that doesn&apos;t start with a dot (&quot;.&quot;). This allows you to have your hidden functions, starting with a dot: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;.myHiddenFunction &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;my hidden function&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had the error&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Error: could not find function &lt;code&gt;some.function&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;happen when doing R CMD check of a package I was making with RStudio.  I found adding&lt;/p&gt;\n\n&lt;p&gt;exportPattern(&quot;.&quot;)&lt;/p&gt;\n\n&lt;p&gt;to the NAMESPACE file did the trick.  As a sidenote, I had initially configured RStudio to use ROxygen to make the documentation -- and selected the configuration where ROxygen would write my NAMESPACE file for me, which kept erasing my edits.  So, in my instance I unchecked NAMESPACE from the Roxygen configuration and added exportPattern(&quot;.&quot;) to NAMESPACE to solve this error.&lt;/p&gt;\n    ","\n&lt;p&gt;This error can occur even if the name of the function is valid if some mandatory arguments are missing (i.e you did not provide enough arguments).&lt;br&gt;\nI got this in an Rcpp context, where I wrote a C++ function with optionnal arguments, and did not provided those arguments in R. It appeared that optionnal arguments from the C++ were seen as mandatory by R. As a result, R could not find a matching function for the correct name but an incorrect number of arguments.&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;Rcpp Function : &lt;code&gt;SEXP RcppFunction(arg1, arg2=0) {}&lt;/code&gt;&lt;br&gt;\nR Calls :&lt;br&gt;\n&lt;code&gt;RcppFunction(0)&lt;/code&gt; raises the error&lt;br&gt;\n&lt;code&gt;RcppFunction(0, 0)&lt;/code&gt; does not&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.rdocumentation.org/advanced_search&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rdocumentation.org&lt;/a&gt; has a very handy search function that - among other things - lets you find functions - from all the packages on CRAN, as well as from packages from Bioconductor and GitHub.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uGBQT.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uGBQT.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using &lt;code&gt;parallelMap&lt;/code&gt; you&apos;ll need to export custom functions to the slave jobs, otherwise you get an error &quot;could not find function &quot;.&lt;/p&gt;\n\n&lt;p&gt;If you set a non-missing level on &lt;code&gt;parallelStart&lt;/code&gt; the same argument should be passed to &lt;code&gt;parallelExport&lt;/code&gt;, else you get the same error. So this should be strictly followed:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;parallelStart&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mode &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;your mode here&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; N&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; level &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;task.level&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nparallelExport&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;myfun&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; level &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;task.level&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You may be able to fix this error &lt;strong&gt;by name spacing ::&lt;/strong&gt; the function call &lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;comparison.cloud&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;colors &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; max.words &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;wordcloud&lt;span class=&quot;hljs-operator&quot;&gt;::&lt;/span&gt;comparison.cloud&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;colors &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; max.words &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I got the same, error, I was running version .99xxx, I checked for updates from help menu and updated My RStudio to 1.0x, then the error did not come&lt;/p&gt;\n\n&lt;p&gt;So simple solution, just update your R Studio&lt;/p&gt;\n    "]},"page":"7","randomQuestions":[{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"How to convert string representation of list to a list","slug":"how-to-convert-string-representation-of-list-to-a-list-1657387384181"},{"title":"PHP - Failed to open stream : No such file or directory","slug":"php-failed-to-open-stream-:-no-such-file-or-directory-1657387872896"},{"title":"PHP parse/syntax errors; and how to solve them","slug":"php-parsesyntax-errors-and-how-to-solve-them-1657384264713"},{"title":"jQuery Ajax File Upload","slug":"jquery-ajax-file-upload-1657387368970"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API","slug":"no-'access-control-allow-origin'-header-is-present-on-the-requested-resourcewhen-trying-to-get-data-from-a-rest-api-1657387628467"},{"title":"How do I merge two dictionaries in a single expression?","slug":"how-do-i-merge-two-dictionaries-in-a-single-expression-1657387593160"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Undefined behavior and sequence points","slug":"undefined-behavior-and-sequence-points-1657384639493"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"How to remove all duplicates from an array of objects?","slug":"how-to-remove-all-duplicates-from-an-array-of-objects-1657388256190"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"Scroll to an element with jQuery","slug":"scroll-to-an-element-with-jquery-1657388523178"},{"title":"Why does my recursive function return None?","slug":"why-does-my-recursive-function-return-none-1657387792894"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"Prefer composition over inheritance?","slug":"prefer-composition-over-inheritance-1657387399409"},{"title":"Why are these constructs using pre and post-increment undefined behavior?","slug":"why-are-these-constructs-using-pre-and-post-increment-undefined-behavior-1657384520109"},{"title":"How to create a generic array in Java?","slug":"how-to-create-a-generic-array-in-java-1657387532298"},{"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093"}]},"__N_SSG":true}