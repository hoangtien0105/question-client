{"pageProps":{"data":{"count":610,"rows":[{"id":165,"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356","postType":"QUESTION","createdAt":"2022-07-09T16:40:35.000Z","updatedAt":"2022-07-09T16:40:35.000Z","tags":[]},{"id":164,"title":"Simulating group_concat MySQL function in Microsoft SQL Server 2005?","slug":"simulating-group_concat-mysql-function-in-microsoft-sql-server-2005-1657384832169","postType":"QUESTION","createdAt":"2022-07-09T16:40:32.000Z","updatedAt":"2022-07-09T16:40:32.000Z","tags":[{"id":602,"name":"sql-server","slug":"sql-server","createdAt":"2022-07-09T16:40:32.000Z","updatedAt":"2022-07-09T16:40:32.000Z","Questions_Tags":{"questionId":164,"tagId":602}},{"id":603,"name":"sql-server-2005","slug":"sql-server-2005","createdAt":"2022-07-09T16:40:32.000Z","updatedAt":"2022-07-09T16:40:32.000Z","Questions_Tags":{"questionId":164,"tagId":603}},{"id":604,"name":"string-aggregation","slug":"string-aggregation","createdAt":"2022-07-09T16:40:32.000Z","updatedAt":"2022-07-09T16:40:32.000Z","Questions_Tags":{"questionId":164,"tagId":604}}]},{"id":163,"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870","postType":"QUESTION","createdAt":"2022-07-09T16:40:28.000Z","updatedAt":"2022-07-09T16:40:28.000Z","tags":[{"id":598,"name":"bounded-wildcard","slug":"bounded-wildcard","createdAt":"2022-07-09T16:40:28.000Z","updatedAt":"2022-07-09T16:40:28.000Z","Questions_Tags":{"questionId":163,"tagId":598}},{"id":599,"name":"super","slug":"super","createdAt":"2022-07-09T16:40:28.000Z","updatedAt":"2022-07-09T16:40:28.000Z","Questions_Tags":{"questionId":163,"tagId":599}},{"id":600,"name":"pecs","slug":"pecs","createdAt":"2022-07-09T16:40:28.000Z","updatedAt":"2022-07-09T16:40:28.000Z","Questions_Tags":{"questionId":163,"tagId":600}}]},{"id":162,"title":"What does if __name__ == \"__main__\": do?","slug":"what-does-if-__name__-\"__main__\":-do-1657384825815","postType":"QUESTION","createdAt":"2022-07-09T16:40:25.000Z","updatedAt":"2022-07-09T16:40:25.000Z","tags":[{"id":594,"name":"python-module","slug":"python-module","createdAt":"2022-07-09T16:40:25.000Z","updatedAt":"2022-07-09T16:40:25.000Z","Questions_Tags":{"questionId":162,"tagId":594}}]},{"id":161,"title":"Does JavaScript guarantee object property order?","slug":"does-javascript-guarantee-object-property-order-1657384822587","postType":"QUESTION","createdAt":"2022-07-09T16:40:22.000Z","updatedAt":"2022-07-09T16:40:22.000Z","tags":[]}]},"answers":{"161":["\n&lt;p&gt;The iteration order for objects follows &lt;a href=&quot;https://stackoverflow.com/a/38218582/292500&quot;&gt;a certain set of rules&lt;/a&gt; since ES2015, but &lt;strong&gt;it does not (always) follow the insertion order&lt;/strong&gt;. Simply put, the iteration order is a combination of the insertion order for strings keys, and ascending order for number-like keys:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// key order: 1, foo, bar&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using an array or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Map&lt;/code&gt; object&lt;/a&gt; can be a better way to achieve this. &lt;code&gt;Map&lt;/code&gt; shares some similarities with &lt;code&gt;Object&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_and_maps_compared&quot; rel=&quot;noreferrer&quot;&gt;guarantees the keys to be iterated in order of insertion&lt;/a&gt;, without exception:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The keys in Map are ordered while keys added to object are not. Thus, when iterating over it, a Map object returns keys in order of insertion. (Note that in the ECMAScript 2015 spec objects do preserve creation order for string and Symbol keys, so traversal of an object with ie only string keys would yield keys in order of insertion)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As a note, properties order in objects werent guaranteed at all before ES2015. Definition of an Object from &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript Third Edition (pdf)&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;h3&gt;4.3.3 Object&lt;/h3&gt;\n&lt;p&gt;An object is a member of the\ntype Object. &lt;strong&gt;It is an unordered collection of properties&lt;/strong&gt; each of which\ncontains a primitive value, object, or\nfunction. A function stored in a\nproperty of an object is called a\nmethod.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;YES (but not always insertion order).&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Most Browsers iterate object properties as:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Integer keys in ascending order (and strings like &quot;1&quot; that parse as ints)&lt;/li&gt;\n&lt;li&gt;String keys, in insertion order (ES2015 guarantees this and all browsers comply)&lt;/li&gt;\n&lt;li&gt;Symbol names, in insertion order (ES2015 guarantees this and all browsers comply)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Some older browsers combine categories #1 and #2, iterating all keys in insertion order. If your keys might parse as integers, it&apos;s best not to rely on any specific iteration order.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Current Language Spec (since ES2015)&lt;/strong&gt; insertion order is preserved, except in the case of keys that parse as integers (eg &quot;7&quot; or &quot;99&quot;), where behavior varies between browsers. For example, Chrome/V8 does not respect insertion order when the keys are parse as numeric.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Old Language Spec (before ES2015)&lt;/strong&gt;: Iteration order was technically undefined, but all major browsers complied with the ES2015 behavior.&lt;/p&gt;\n&lt;p&gt;Note that the ES2015 behavior was a good example of the language spec being driven by existing behavior, and not the other way round. To get a deeper sense of that backwards-compatibility mindset, see &lt;a href=&quot;http://code.google.com/p/v8/issues/detail?id=164&quot; rel=&quot;noreferrer&quot;&gt;http://code.google.com/p/v8/issues/detail?id=164&lt;/a&gt;, a Chrome bug that covers in detail the design decisions behind Chrome&apos;s iteration order behavior.\nPer one of the (rather opinionated) comments on that bug report:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Standards always follow implementations, that&apos;s where XHR came from, and Google does the same thing by implementing Gears and then embracing equivalent HTML5 functionality.  The right fix is to have ECMA formally incorporate the de-facto standard behavior into the next rev of the spec.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Property order in normal Objects is a complex subject in JavaScript.&lt;/p&gt;\n&lt;p&gt;While in ES5 explicitly no order has been specified, ES2015 defined an order in certain cases, and successive changes to the specification since have increasingly defined the order (even, as of ES2020, the &lt;code&gt;for-in&lt;/code&gt; loop&apos;s order). Given is the following object:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;m&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  [&lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;()]: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;sym&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This results in the following order (in certain cases):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;m&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {},\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;(): &lt;span class=&quot;hljs-string&quot;&gt;&quot;sym&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The order for &quot;own&quot; (non-inherited) properties is:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Integer-like keys in ascending order&lt;/li&gt;\n&lt;li&gt;String keys in insertion order&lt;/li&gt;\n&lt;li&gt;Symbols in insertion order&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Thus, there are three segments, which may alter the insertion order (as happened in the example). And integer-like keys don&apos;t stick to the insertion order at all.&lt;/p&gt;\n&lt;p&gt;In ES2015, only certain methods followed the order:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Object.assign&lt;/li&gt;\n&lt;li&gt;Object.defineProperties&lt;/li&gt;\n&lt;li&gt;Object.getOwnPropertyNames&lt;/li&gt;\n&lt;li&gt;Object.getOwnPropertySymbols&lt;/li&gt;\n&lt;li&gt;Reflect.ownKeys&lt;/li&gt;\n&lt;li&gt;JSON.parse&lt;/li&gt;\n&lt;li&gt;JSON.stringify&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;As of ES2020, all others do (some in specs between ES2015 and ES2020, others in ES2020), which includes:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Object.keys, Object.entries, Object.values, ...&lt;/li&gt;\n&lt;li&gt;for..in&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The most difficult to nail down was &lt;code&gt;for-in&lt;/code&gt; because, uniquely, it includes inherited properties. That &lt;a href=&quot;https://github.com/tc39/proposal-for-in-order&quot; rel=&quot;noreferrer&quot;&gt;was done&lt;/a&gt; (in all but edge cases) in ES2020. The following list from the linked (now completed) proposal provides the edge cases where the order is not specified:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Neither the object being iterated nor anything in its prototype chain is a proxy, typed array, module namespace object, or host exotic object.&lt;/li&gt;\n&lt;li&gt;Neither the object nor anything in its prototype chain has its prototype change during iteration.&lt;/li&gt;\n&lt;li&gt;Neither the object nor anything in its prototype chain has a property deleted during iteration.&lt;/li&gt;\n&lt;li&gt;Nothing in the object&apos;s prototype chain has a property added during iteration.&lt;/li&gt;\n&lt;li&gt;No property of the object or anything in its prototype chain has its enumerability change during iteration.&lt;/li&gt;\n&lt;li&gt;No non-enumerable property shadows an enumerable one.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Conclusion: Even in ES2015 you shouldn&apos;t rely on the property order of normal objects in JavaScript. It is prone to errors. If you need ordered named pairs, use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; instead, which purely uses insertion order. If you just need order, use an array or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; (which also uses purely insertion order).&lt;/p&gt;\n    ","\n&lt;p&gt;At the time of writing, most browsers did return properties in the same order as they were inserted, but it was explicitly not guaranteed behaviour so shouldn&apos;t have been relied upon.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript specification&lt;/a&gt; used to say:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The mechanics and order of enumerating the properties ... is not specified.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;However in ES2015 and later non-integer keys will be returned in insertion order.&lt;/p&gt;\n    ","\n&lt;p&gt;This whole answer is in the context of spec compliance, not what any engine does at a particular moment or historically.&lt;/p&gt;\n\n&lt;h1&gt;Generally, no&lt;/h1&gt;\n\n&lt;p&gt;The actual question is very vague.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;will the properties be in the same order that I added them&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;In what context?&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The answer is: it depends on a number of factors. In general, &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Sometimes, yes&lt;/h1&gt;\n\n&lt;p&gt;Here is where you can count on property key order for plain &lt;code&gt;Objects&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;ES2015 compliant engine&lt;/li&gt;\n&lt;li&gt;Own properties&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;, &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;, &lt;code&gt;Object.getOwnPropertySymbols(O)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In all cases these methods include non-enumerable property keys and order keys as specified by &lt;code&gt;[[OwnPropertyKeys]]&lt;/code&gt; (see below). They differ in the type of key values they include (&lt;code&gt;String&lt;/code&gt; and / or &lt;code&gt;Symbol&lt;/code&gt;). In this context &lt;code&gt;String&lt;/code&gt; includes integer values.&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-object.getownpropertynames&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames(O)&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Returns &lt;code&gt;O&lt;/code&gt;&apos;s own &lt;code&gt;String&lt;/code&gt;-keyed properties (&lt;em&gt;property names&lt;/em&gt;).&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-reflect.ownkeys&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Reflect.ownKeys(O)&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Returns &lt;code&gt;O&lt;/code&gt;&apos;s own &lt;code&gt;String&lt;/code&gt;- and &lt;code&gt;Symbol&lt;/code&gt;-keyed properties.&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-object.getownpropertysymbols&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols(O)&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Returns &lt;code&gt;O&lt;/code&gt;&apos;s own &lt;code&gt;Symbol&lt;/code&gt;-keyed properties.&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;[[OwnPropertyKeys]]&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;The order is essentially: integer-like &lt;code&gt;Strings&lt;/code&gt; in ascending order, non-integer-like &lt;code&gt;Strings&lt;/code&gt; in creation order, Symbols in creation order. Depending which function invokes this, some of these types may not be included.&lt;/p&gt;\n\n&lt;p&gt;The specific language is that keys are returned in the following order:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ol start=&quot;2&quot;&gt;\n  &lt;li&gt;&lt;p&gt;... each own property key &lt;code&gt;P&lt;/code&gt; of &lt;code&gt;O&lt;/code&gt; [the object being iterated] that is an integer index, in ascending numeric index order&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;... each own property key &lt;code&gt;P&lt;/code&gt; of &lt;code&gt;O&lt;/code&gt; that is a String but is not an integer index, in property creation order&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;... each own property key &lt;code&gt;P&lt;/code&gt; of &lt;code&gt;O&lt;/code&gt; that is a Symbol, in property creation order&lt;/p&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;If you&apos;re interested in ordered maps you should consider using the &lt;code&gt;Map&lt;/code&gt; type introduced in ES2015 instead of plain &lt;code&gt;Objects&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As of ES2015, property order is guaranteed for certain methods that iterate over properties. &lt;a href=&quot;https://stackoverflow.com/a/30919039/&quot;&gt;but not others&lt;/a&gt;. Unfortunately, the methods which are not guaranteed to have an order are generally the most often used:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;Object.keys&lt;/code&gt;, &lt;code&gt;Object.values&lt;/code&gt;, &lt;code&gt;Object.entries&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;for..in&lt;/code&gt; loops&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;But, as of ES2020, property order for these previously untrustworthy methods &lt;em&gt;will&lt;/em&gt; be guaranteed by the specification&lt;/strong&gt; to be iterated over in the same deterministic manner as the others, due to to the &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/finished-proposals.md&quot; rel=&quot;noreferrer&quot;&gt;finished&lt;/a&gt; proposal: &lt;a href=&quot;https://github.com/tc39/proposal-for-in-order&quot; rel=&quot;noreferrer&quot;&gt;for-in mechanics&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Just like with the methods which have a guaranteed iteration order (like &lt;code&gt;Reflect.ownKeys&lt;/code&gt; and &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;), the previously-unspecified methods will also iterate in the following order:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Numeric array keys, in ascending numeric order&lt;/li&gt;\n&lt;li&gt;All other non-Symbol keys, in insertion order&lt;/li&gt;\n&lt;li&gt;Symbol keys, in insertion order&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This is what pretty much every implementation does already (and has done for many years), but the new proposal has made it official.&lt;/p&gt;\n&lt;p&gt;Although the current specification leaves for..in iteration order &quot;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-enumerate-object-properties&quot; rel=&quot;noreferrer&quot;&gt;almost totally unspecified&lt;/a&gt;, real engines tend to be more consistent:&quot;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The lack of specificity in ECMA-262 does not reflect reality. In discussion going back years, implementors have observed that there are some constraints on the behavior of for-in which anyone who wants to run code on the web needs to follow.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Because every implementation already iterates over properties predictably, it can be put into the specification without breaking backwards compatibility.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;There are a few weird cases which implementations currently do &lt;em&gt;not&lt;/em&gt; agree on, and in such cases, the resulting order will continue be unspecified. For property order &lt;a href=&quot;https://github.com/tc39/proposal-for-in-order#a-conservative-underapproximation-of-interop-semantics&quot; rel=&quot;noreferrer&quot;&gt;to be guaranteed&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Neither the object being iterated nor anything in its prototype chain is a proxy, typed array, module namespace object, or host exotic object.&lt;/p&gt;\n&lt;p&gt;Neither the object nor anything in its prototype chain has its prototype change during iteration.&lt;/p&gt;\n&lt;p&gt;Neither the object nor anything in its prototype chain has a property deleted during iteration.&lt;/p&gt;\n&lt;p&gt;Nothing in the object&apos;s prototype chain has a property added during iteration.&lt;/p&gt;\n&lt;p&gt;No property of the object or anything in its prototype chain has its enumerability change during iteration.&lt;/p&gt;\n&lt;p&gt;No non-enumerable property shadows an enumerable one.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In modern browsers you can use the &lt;code&gt;Map&lt;/code&gt; data structure instead of a object. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;noreferrer&quot;&gt;Developer mozilla &amp;gt; Map&lt;/a&gt; &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A Map object can iterate its elements in insertion order...&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h2&gt;In ES2015, it does, but not to what you might think&lt;/h2&gt;\n\n&lt;p&gt;The order of keys in an object wasn&apos;t guaranteed until ES2015. It was implementation-defined.&lt;/p&gt;\n\n&lt;p&gt;However, in ES2015 in &lt;em&gt;was&lt;/em&gt; specified. Like many things in JavaScript, this was done for compatibility purposes and generally reflected an existing unofficial standard among most JS engines (with you-know-who being an exception).&lt;/p&gt;\n\n&lt;p&gt;The order is defined in the spec, under the abstract operation &lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/index.html#sec-ordinaryownpropertykeys&quot; rel=&quot;noreferrer&quot;&gt;OrdinaryOwnPropertyKeys&lt;/a&gt;, which underpins all methods of iterating over an object&apos;s own keys. Paraphrased, the order is as follows:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;All &lt;em&gt;integer index&lt;/em&gt; keys (stuff like &lt;code&gt;&quot;1123&quot;&lt;/code&gt;, &lt;code&gt;&quot;55&quot;&lt;/code&gt;, etc) in ascending numeric order.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All string keys which are not integer indices, in order of creation (oldest-first).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All symbol keys, in order of creation (oldest-first).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;It&apos;s silly to say that the order is unreliable - it is reliable, it&apos;s just probably not what you want, and modern browsers implement this order correctly.&lt;/p&gt;\n\n&lt;p&gt;Some exceptions include methods of enumerating inherited keys, such as the &lt;code&gt;for .. in&lt;/code&gt; loop. The &lt;code&gt;for .. in&lt;/code&gt; loop doesn&apos;t guarantee order according to the specification. &lt;/p&gt;\n    ","\n&lt;p&gt;As others have stated, you have no guarantee as to the order when you iterate over the properties of an object. If you need an ordered list of multiple fields I suggested creating an array of objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myarr = [{&lt;span class=&quot;hljs-attr&quot;&gt;somfield1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;somefield2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;somfield1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;somefield2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;somfield1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;somefield2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;j&apos;&lt;/span&gt;}];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you can use a regular for loop and have the insert order. You could then use the Array sort method to sort this into a new array if needed.&lt;/p&gt;\n    ","\n&lt;p&gt;Just found this out the hard way.&lt;/p&gt;\n\n&lt;p&gt;Using React with Redux, the state container of which&apos;s keys I want to traverse in order to generate children is refreshed everytime the store is changed (as per Redux&apos;s immutability concepts).&lt;/p&gt;\n\n&lt;p&gt;Thus, in order to take &lt;code&gt;Object.keys(valueFromStore)&lt;/code&gt; I used &lt;code&gt;Object.keys(valueFromStore).sort()&lt;/code&gt;, so that I at least now have an alphabetical order for the keys.&lt;/p&gt;\n    ","\n&lt;p&gt;Major Difference between Object and MAP with Example :&lt;/p&gt;\n&lt;p&gt;it&apos;s Order of iteration in loop, In Map it follows the order as it was set while creation whereas in OBJECT does not.&lt;/p&gt;\n&lt;p&gt;SEE:\n&lt;strong&gt;OBJECT&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\nobj.&lt;span class=&quot;hljs-property&quot;&gt;prop1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;prop2&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;day&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj)\n\n**&lt;span class=&quot;hljs-attr&quot;&gt;OUTPUT&lt;/span&gt;: {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;day&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;prop1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;prop2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;}**\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;MAP&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()\n    &lt;span class=&quot;hljs-comment&quot;&gt;// setting the values&lt;/span&gt;\n    myMap.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value associated with &apos;a string&apos;&quot;&lt;/span&gt;)\n    myMap.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;value associated with keyObj&apos;&lt;/span&gt;)\n    myMap.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;value associated with keyFunc&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-attr&quot;&gt;OUTPUT&lt;/span&gt;:\n**&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;value associated with &apos;a string&apos;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;value associated with keyObj&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;value associated with keyFunc&quot;&lt;/span&gt;**\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For a 100% fail-safe solution you could use nested objects and do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\nobj.&lt;span class=&quot;hljs-property&quot;&gt;prop1&lt;/span&gt; = {&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\nobj.&lt;span class=&quot;hljs-property&quot;&gt;prop2&lt;/span&gt; = {&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(obj).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj[prop].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt; == i) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj[prop].&lt;span class=&quot;hljs-property&quot;&gt;content&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From the &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot; rel=&quot;nofollow&quot;&gt;JSON standard&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An object is an &lt;strong&gt;unordered&lt;/strong&gt; collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;(emphasis mine).&lt;/p&gt;\n\n&lt;p&gt;So, no you can&apos;t guarantee the order.&lt;/p&gt;\n    "],"162":["\n&lt;h1&gt;Short Answer&lt;/h1&gt;\n&lt;p&gt;It&apos;s boilerplate code that protects users from accidentally invoking the script when they didn&apos;t intend to. Here are some common problems when the guard is omitted from a script:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you import the guardless script in another script (e.g. &lt;code&gt;import my_script_without_a_name_eq_main_guard&lt;/code&gt;), then the latter script will trigger the former to run &lt;em&gt;at import time&lt;/em&gt; and &lt;em&gt;using the second script&apos;s command line arguments&lt;/em&gt;. This is almost always a mistake.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you have a custom class in the guardless script and save it to a pickle file, then unpickling it in another script will trigger an import of the guardless script, with the same problems outlined in the previous bullet.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Long Answer&lt;/h1&gt;\n&lt;p&gt;To better understand why and how this matters, we need to take a step back to understand how Python initializes scripts and how this interacts with its module import mechanism.&lt;/p&gt;\n&lt;p&gt;Whenever the Python interpreter reads a source file, it does two things:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;it sets a few special variables like &lt;code&gt;__name__&lt;/code&gt;, and then&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;it executes all of the code found in the file.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Let&apos;s see how this works and how it relates to your question about the &lt;code&gt;__name__&lt;/code&gt; checks we always see in Python scripts.&lt;/p&gt;\n&lt;h2&gt;Code Sample&lt;/h2&gt;\n&lt;p&gt;Let&apos;s use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called &lt;code&gt;foo.py&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Suppose this is foo.py.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;before import&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; math\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;before function_a&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_a&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Function A&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;before function_b&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_b&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Function B {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(math.sqrt(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;before __name__ guard&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    function_a()\n    function_b()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;after __name__ guard&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Special Variables&lt;/h2&gt;\n&lt;p&gt;When the Python interpreter reads a source file, it first defines a few special variables. In this case, we care about the &lt;code&gt;__name__&lt;/code&gt; variable.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;When Your Module Is the Main Program&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you are running your module (the source file) as the main program, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python foo.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the interpreter will assign the hard-coded string &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; to the &lt;code&gt;__name__&lt;/code&gt; variable, i.e.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# It&apos;s as if the interpreter inserts this at the top&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# of your module when run as the main program.&lt;/span&gt;\n__name__ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;When Your Module Is Imported By Another&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;On the other hand, suppose some other module is the main program and it imports your module. This means there&apos;s a statement like this in the main program, or in some other module the main program imports:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Suppose this is in some other main program.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The interpreter will search for your &lt;code&gt;foo.py&lt;/code&gt; file (along with searching for a few other variants), and prior to executing that module, it will assign the name &lt;code&gt;&quot;foo&quot;&lt;/code&gt; from the import statement to the &lt;code&gt;__name__&lt;/code&gt; variable, i.e.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# It&apos;s as if the interpreter inserts this at the top&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# of your module when it&apos;s imported from another module.&lt;/span&gt;\n__name__ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Executing the Module&apos;s Code&lt;/h2&gt;\n&lt;p&gt;After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It prints the string &lt;code&gt;&quot;before import&quot;&lt;/code&gt; (without quotes).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It loads the &lt;code&gt;math&lt;/code&gt; module and assigns it to a variable called &lt;code&gt;math&lt;/code&gt;. This is equivalent to replacing &lt;code&gt;import math&lt;/code&gt; with the following (note that &lt;code&gt;__import__&lt;/code&gt; is a low-level function in Python that takes a string and triggers the actual import):&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Find and load a module given its string name, &quot;math&quot;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# then assign it to a local variable called math.&lt;/span&gt;\nmath = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;math&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;p&gt;It prints the string &lt;code&gt;&quot;before function_a&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It executes the &lt;code&gt;def&lt;/code&gt; block, creating a function object, then assigning that function object to a variable called &lt;code&gt;function_a&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It prints the string &lt;code&gt;&quot;before function_b&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It executes the second &lt;code&gt;def&lt;/code&gt; block, creating another function object, then assigning it to a variable called &lt;code&gt;function_b&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It prints the string &lt;code&gt;&quot;before __name__ guard&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Only When Your Module Is the Main Program&lt;/strong&gt;&lt;/p&gt;\n&lt;ol start=&quot;8&quot;&gt;\n&lt;li&gt;If your module is the main program, then it will see that &lt;code&gt;__name__&lt;/code&gt; was indeed set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; and it calls the two functions, printing the strings &lt;code&gt;&quot;Function A&quot;&lt;/code&gt; and &lt;code&gt;&quot;Function B 10.0&quot;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Only When Your Module Is Imported by Another&lt;/strong&gt;&lt;/p&gt;\n&lt;ol start=&quot;8&quot;&gt;\n&lt;li&gt;(&lt;strong&gt;instead&lt;/strong&gt;) If your module is not the main program but was imported by another one, then &lt;code&gt;__name__&lt;/code&gt; will be &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, not &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, and it&apos;ll skip the body of the &lt;code&gt;if&lt;/code&gt; statement.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt;&lt;/p&gt;\n&lt;ol start=&quot;9&quot;&gt;\n&lt;li&gt;It will print the string &lt;code&gt;&quot;after __name__ guard&quot;&lt;/code&gt; in both situations.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;In summary, here&apos;s what&apos;d be printed in the two cases:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;# What gets printed if foo is the main program\nbefore import\nbefore function_a\nbefore function_b\nbefore __name__ guard\nFunction A\nFunction B 10.0\nafter __name__ guard\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;# What gets printed if foo is imported as a regular module\nbefore import\nbefore function_a\nbefore function_b\nbefore __name__ guard\nafter __name__ guard\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Why Does It Work This Way?&lt;/h2&gt;\n&lt;p&gt;You might naturally wonder why anybody would want this.  Well, sometimes you want to write a &lt;code&gt;.py&lt;/code&gt; file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing &lt;code&gt;.py&lt;/code&gt; files like your script and running special test functions. You don&apos;t want it to try running the script just because it&apos;s importing the module.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Beyond those examples, it&apos;s elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script&apos;s module.&lt;/p&gt;\n&lt;h2&gt;Food for Thought&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Question: Can I have multiple &lt;code&gt;__name__&lt;/code&gt; checking blocks?  Answer: it&apos;s strange to do so, but the language won&apos;t stop you.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Suppose the following is in &lt;code&gt;foo2.py&lt;/code&gt;.  What happens if you say &lt;code&gt;python foo2.py&lt;/code&gt; on the command-line? Why?&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Suppose this is foo2.py.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, sys; sys.path.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, os.path.dirname(__file__)) &lt;span class=&quot;hljs-comment&quot;&gt;# needed for some interpreters&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_a&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; foo2 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; function_b\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a2&quot;&lt;/span&gt;)\n    function_b()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a3&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_b&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;t1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;m1&quot;&lt;/span&gt;)\n    function_a()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;m2&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;t2&quot;&lt;/span&gt;)\n      \n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Now, figure out what will happen if you remove the &lt;code&gt;__name__&lt;/code&gt; check in &lt;code&gt;foo3.py&lt;/code&gt;:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Suppose this is foo3.py.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, sys; sys.path.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, os.path.dirname(__file__)) &lt;span class=&quot;hljs-comment&quot;&gt;# needed for some interpreters&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_a&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; foo3 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; function_b\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a2&quot;&lt;/span&gt;)\n    function_b()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a3&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_b&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;t1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;m1&quot;&lt;/span&gt;)\nfunction_a()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;m2&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;t2&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;What will this do when used as a script?  When imported as a module?&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Suppose this is in foo4.py&lt;/span&gt;\n__name__ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)\n    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;before __name__ guard&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    bar()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;after __name__ guard&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When your script is run by passing it as a command to the Python interpreter,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python myscript.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there&apos;s no &lt;code&gt;main()&lt;/code&gt; function that gets run automatically - the &lt;code&gt;main()&lt;/code&gt; function is implicitly all the code at the top level.&lt;/p&gt;\n\n&lt;p&gt;In this case, the top-level code is an &lt;code&gt;if&lt;/code&gt; block.  &lt;code&gt;__name__&lt;/code&gt; is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in &lt;code&gt;myscript.py&lt;/code&gt; above), then &lt;code&gt;__name__&lt;/code&gt; instead is set to the string &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.  Thus, you can test whether your script is being run directly or being imported by something else by testing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the &lt;code&gt;if&lt;/code&gt; clause above won&apos;t get run as the condition is not met. As a basic example, consider the following two scripts:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# file one.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;func() in one.py&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;top-level in one.py&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one.py is being run directly&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one.py is being imported into another module&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# file two.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; one\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;top-level in two.py&quot;&lt;/span&gt;)\none.func()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;two.py is being run directly&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;two.py is being imported into another module&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if you invoke the interpreter as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python one.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output will be&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;top-level &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; one.py\none.py &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; being run directly\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you run &lt;code&gt;two.py&lt;/code&gt; instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python two.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You get&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;top-level &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; one.py\none.py &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; being imported into another module\ntop-level &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; two.py\nfunc() &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; one.py\ntwo.py &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; being run directly\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thus, when module &lt;code&gt;one&lt;/code&gt; gets loaded, its &lt;code&gt;__name__&lt;/code&gt; equals &lt;code&gt;&quot;one&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Create the following two files:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# a.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# b.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__name__ equals &quot;&lt;/span&gt; + __name__)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;if-statement was executed&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now run each file individually.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Running &lt;code&gt;python a.py&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python a.py\n__name__ equals b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When &lt;code&gt;a.py&lt;/code&gt; is executed, it imports the module &lt;code&gt;b&lt;/code&gt;. This causes all the code inside &lt;code&gt;b&lt;/code&gt; to run. Python sets &lt;code&gt;globals()[&apos;__name__&apos;]&lt;/code&gt; in the &lt;code&gt;b&lt;/code&gt; module to the module&apos;s name, &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;\n  &lt;br&gt;\n&lt;p&gt;&lt;strong&gt;Running &lt;code&gt;python b.py&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python b.py\n__name__ equals __main__\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;-statement was executed\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When only the file &lt;code&gt;b.py&lt;/code&gt; is executed, Python sets &lt;code&gt;globals()[&apos;__name__&apos;]&lt;/code&gt; in this file to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;. Therefore, the &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;True&lt;/code&gt; this time.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;What does the &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;To outline the basics:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The global variable, &lt;code&gt;__name__&lt;/code&gt;, in the module that is the entry point to your program, is &lt;code&gt;&apos;__main__&apos;&lt;/code&gt;. Otherwise, it&apos;s the name you import the module by.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;So, code under the &lt;code&gt;if&lt;/code&gt; block will only run if the module is the entry point to your program.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It allows the code in the module to be importable by other modules, without executing the code block beneath on import.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Why do we need this?&lt;/p&gt;\n\n&lt;h2&gt;Developing and Testing Your Code&lt;/h2&gt;\n\n&lt;p&gt;Say you&apos;re writing a Python script designed to be used as a module:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do_important&lt;/span&gt;():\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;This function does something very important&quot;&quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; test the module by adding this call of the function to the bottom:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;do_important()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and running it (on a command prompt) with something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;~$ python important.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;The Problem&lt;/h2&gt;\n\n&lt;p&gt;However, if you want to import the module to another script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; important\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On import, the &lt;code&gt;do_important&lt;/code&gt; function would be called, so you&apos;d probably comment out your function call, &lt;code&gt;do_important()&lt;/code&gt;, at the bottom. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# do_important() # I must remember to uncomment to execute this!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then you&apos;ll have to remember whether or not you&apos;ve commented out your test function call. And this extra complexity would mean you&apos;re likely to forget, making your development process more troublesome.&lt;/p&gt;\n\n&lt;h2&gt;A Better Way&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;__name__&lt;/code&gt; variable points to the namespace wherever the Python interpreter happens to be at the moment. &lt;/p&gt;\n\n&lt;p&gt;Inside an imported module, it&apos;s the name of that module. &lt;/p&gt;\n\n&lt;p&gt;But inside the primary module (or an interactive Python session, i.e. the interpreter&apos;s Read, Eval, Print Loop, or REPL) you are running everything from its &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So if you check before executing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    do_important()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With the above, your code will only execute when you&apos;re running it as the primary module (or intentionally call it from another script). &lt;/p&gt;\n\n&lt;h2&gt;An Even Better Way&lt;/h2&gt;\n\n&lt;p&gt;There&apos;s a Pythonic way to improve on this, though. &lt;/p&gt;\n\n&lt;p&gt;What if we want to run this business process from outside the module?&lt;/p&gt;\n\n&lt;p&gt;If we put the code we want to exercise as we develop and test in a function like this and then do our check for &lt;code&gt;&apos;__main__&apos;&lt;/code&gt; immediately after:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;business logic for when running this module as the primary one!&quot;&quot;&quot;&lt;/span&gt;\n    setup()\n    foo = do_important()\n    bar = do_even_more_important(foo)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; baz &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; bar:\n        do_super_important(baz)\n    teardown()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Here&apos;s our payoff idiom!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We now have a final function for the end of our module that will run if we run the module as the primary module. &lt;/p&gt;\n\n&lt;p&gt;It will allow the module and its functions and classes to be imported into other scripts without running the &lt;code&gt;main&lt;/code&gt; function, and will also allow the module (and its functions and classes) to be called when running from a different &lt;code&gt;&apos;__main__&apos;&lt;/code&gt; module, i.e.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; important\nimportant.main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot; rel=&quot;noreferrer&quot;&gt;This idiom can also be found in the Python documentation in an explanation of the &lt;code&gt;__main__&lt;/code&gt; module.&lt;/a&gt; That text states:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This module represents the (otherwise anonymous) scope in which the\n  interpreters main program executes  commands read either from\n  standard input, from a script file, or from an interactive prompt. It\n  is this environment in which the idiomatic conditional script stanza\n  causes a script to run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; is the part that runs when the script is run from (say) the command line using a command like &lt;code&gt;python myscript.py&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h2&gt;What does &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?&lt;/h2&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is a global variable (in Python, global actually means on the &lt;a href=&quot;https://docs.python.org/tutorial/modules.html#modules&quot; rel=&quot;nofollow noreferrer&quot;&gt;module level&lt;/a&gt;) that exists in all namespaces. It is typically the module&apos;s name (as a &lt;code&gt;str&lt;/code&gt; type).&lt;/p&gt;\n&lt;p&gt;As the only special case, however, in whatever Python process you run, as in mycode.py:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python mycode.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the otherwise anonymous global namespace is assigned the value of &lt;code&gt;&apos;__main__&apos;&lt;/code&gt; to its &lt;code&gt;__name__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Thus, including &lt;a href=&quot;https://docs.python.org/library/__main__.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;the final lines&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;at the end of your mycode.py script,&lt;/li&gt;\n&lt;li&gt;when it is the primary, entry-point module that is run by a Python process,&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;will cause your script&apos;s uniquely defined &lt;code&gt;main&lt;/code&gt; function to run.&lt;/p&gt;\n&lt;p&gt;Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; mycode\n&lt;span class=&quot;hljs-comment&quot;&gt;# ... any amount of other code&lt;/span&gt;\nmycode.main()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are lots of different takes here on the mechanics of the code in question, the &quot;How&quot;, but for me none of it made sense until I understood the &quot;Why&quot;. This should be especially helpful for new programmers.&lt;/p&gt;\n\n&lt;p&gt;Take file &quot;ab.py&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A function in ab file&apos;&lt;/span&gt;);\na()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a second file &quot;xy.py&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ab\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;main function: this is where the action is&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;peripheral task: might be useful in other projects&apos;&lt;/span&gt;)\nx()\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;What is this code actually doing?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When you execute &lt;code&gt;xy.py&lt;/code&gt;, you &lt;code&gt;import ab&lt;/code&gt;. The import statement runs the module immediately on import, so &lt;code&gt;ab&lt;/code&gt;&apos;s operations get executed before the remainder of &lt;code&gt;xy&lt;/code&gt;&apos;s. Once finished with &lt;code&gt;ab&lt;/code&gt;, it continues with &lt;code&gt;xy&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The interpreter keeps track of which scripts are running with &lt;code&gt;__name__&lt;/code&gt;. When you run a script - no matter what you&apos;ve named it - the interpreter calls it &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, making it the master or &apos;home&apos; script that gets returned to after running an external script.&lt;/p&gt;\n\n&lt;p&gt;Any other script that&apos;s called from this &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; script is assigned its filename as its &lt;code&gt;__name__&lt;/code&gt; (e.g., &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt;). Hence, the line &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; is the interpreter&apos;s test to determine if it&apos;s interpreting/parsing the &apos;home&apos; script that was initially executed, or if it&apos;s temporarily peeking into another (external) script. This gives the programmer flexibility to have the script behave differently if it&apos;s executed directly vs. called externally.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s step through the above code to understand what&apos;s happening, focusing first on the unindented lines and the order they appear in the scripts. Remember that function - or &lt;code&gt;def&lt;/code&gt; - blocks don&apos;t do anything by themselves until they&apos;re called. What the interpreter might say if mumbled to itself:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Open xy.py as the &apos;home&apos; file; call it &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; in the &lt;code&gt;__name__&lt;/code&gt; variable.&lt;/li&gt;\n&lt;li&gt;Import and open file with the &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Oh, a function. I&apos;ll remember that.&lt;/li&gt;\n&lt;li&gt;Ok, function &lt;code&gt;a()&lt;/code&gt;; I just learned that. Printing &apos;&lt;em&gt;A function in ab file&lt;/em&gt;&apos;.&lt;/li&gt;\n&lt;li&gt;End of file; back to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;!&lt;/li&gt;\n&lt;li&gt;Oh, a function. I&apos;ll remember that.&lt;/li&gt;\n&lt;li&gt;Another one.&lt;/li&gt;\n&lt;li&gt;Function &lt;code&gt;x()&lt;/code&gt;; ok, printing &apos;&lt;em&gt;peripheral task: might be useful in other projects&lt;/em&gt;&apos;.&lt;/li&gt;\n&lt;li&gt;What&apos;s this? An &lt;code&gt;if&lt;/code&gt; statement. Well, the condition has been met (the variable &lt;code&gt;__name__&lt;/code&gt; has been set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;), so I&apos;ll enter the &lt;code&gt;main()&lt;/code&gt; function and print &apos;&lt;em&gt;main function: this is where the action is&lt;/em&gt;&apos;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The bottom two lines mean: &quot;If this is the &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; or &apos;home&apos; script, execute the function called &lt;code&gt;main()&lt;/code&gt;&quot;. That&apos;s why you&apos;ll see a &lt;code&gt;def main():&lt;/code&gt; block up top, which contains the main flow of the script&apos;s functionality.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Why implement this?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Remember what I said earlier about import statements? When you import a module it doesn&apos;t just &apos;recognize&apos; it and wait for further instructions - it actually runs all the executable operations contained within the script. So, putting the meat of your script into the &lt;code&gt;main()&lt;/code&gt; function effectively quarantines it, putting it in isolation so that it won&apos;t immediately run when imported by another script.&lt;/p&gt;\n\n&lt;p&gt;Again, there will be exceptions, but common practice is that &lt;code&gt;main()&lt;/code&gt; doesn&apos;t usually get called externally. So you may be wondering one more thing: if we&apos;re not calling &lt;code&gt;main()&lt;/code&gt;, why are we calling the script at all? It&apos;s because many people structure their scripts with standalone functions that are built to be run independent of the rest of the code in the file. They&apos;re then later called somewhere else in the body of the script. Which brings me to this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;But the code works without it&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, that&apos;s right. These separate functions &lt;strong&gt;can&lt;/strong&gt; be called from an in-line script that&apos;s not contained inside a &lt;code&gt;main()&lt;/code&gt; function. If you&apos;re accustomed (as I am, in my early learning stages of programming) to building in-line scripts that do exactly what you need, and you&apos;ll try to figure it out again if you ever need that operation again ... well, you&apos;re not used to this kind of internal structure to your code, because it&apos;s more complicated to build and it&apos;s not as intuitive to read.&lt;/p&gt;\n\n&lt;p&gt;But that&apos;s a script that probably can&apos;t have its functions called externally, because if it did it would immediately start calculating and assigning variables. And chances are if you&apos;re trying to re-use a function, your new script is related closely enough to the old one that there will be conflicting variables.&lt;/p&gt;\n\n&lt;p&gt;In splitting out independent functions, you gain the ability to re-use your previous work by calling them into another script. For example, &quot;example.py&quot; might import &quot;xy.py&quot; and call &lt;code&gt;x()&lt;/code&gt;, making use of the &apos;x&apos; function from &quot;xy.py&quot;. (Maybe it&apos;s capitalizing the third word of a given text string; creating a NumPy array from a list of numbers and squaring them; or detrending a 3D surface. The possibilities are limitless.)&lt;/p&gt;\n\n&lt;p&gt;(As an aside, &lt;a href=&quot;https://stackoverflow.com/questions/23000075/purpose-of-if-name-main&quot;&gt;this question&lt;/a&gt; contains an answer by @kindall that finally helped me to understand - the why, not the how. Unfortunately it&apos;s been marked as a duplicate of &lt;a href=&quot;https://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;this one&lt;/a&gt;, which I think is a mistake.)&lt;/p&gt;\n    ","\n&lt;p&gt;The code under &lt;code&gt;if __name__ == &apos;__main__&apos;:&lt;/code&gt; will &lt;em&gt;only&lt;/em&gt; be executed if the module is invoked as a script.&lt;/p&gt;\n&lt;p&gt;As an example, consider the following module &lt;code&gt;my_test_module.py&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# my_test_module.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is going to be printed out, no matter what&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is going to be printed out, only if user invokes the module as a script&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;First possibility: Import &lt;code&gt;my_test_module.py&lt;/code&gt; in another module&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# main.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; my_test_module\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello from main.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if you invoke &lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python main.py\n\n&amp;gt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;This is going to be printed out, no matter what&apos;&lt;/span&gt;\n&amp;gt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello from main.py&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that only the top-level &lt;code&gt;print()&lt;/code&gt; statement in &lt;code&gt;my_test_module&lt;/code&gt; is executed.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Second possibility: Invoke &lt;code&gt;my_test_module.py&lt;/code&gt; as a script&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Now if you run &lt;code&gt;my_test_module.py&lt;/code&gt; as a Python script, both &lt;code&gt;print()&lt;/code&gt; statements will be executed:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python my_test_module.py\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is going to be printed out, no matter what&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is going to be printed out, only if user invokes the module as a script&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;For a more comprehensive explanation, you can read &lt;em&gt;&lt;a href=&quot;https://towardsdatascience.com/what-does-if-name-main-do-e357dd61be1a&quot; rel=&quot;nofollow noreferrer&quot;&gt;What does &lt;code&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt; do in Python&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;When there are certain statements in our module (&lt;code&gt;M.py&lt;/code&gt;) we want to be executed when it&apos;ll be running as main (not imported), we can place those statements (test-cases, print statements) under this &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;\n\n&lt;p&gt;As by default (when module running as main, not imported) the &lt;code&gt;__name__&lt;/code&gt; variable is set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, and when it&apos;ll be imported the &lt;code&gt;__name__&lt;/code&gt; variable will get a different value, most probably the name of the module (&lt;code&gt;&apos;M&apos;&lt;/code&gt;).\nThis is helpful in running different variants of a modules together, and separating their specific input &amp;amp; output statements and also if there are any test-cases.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;In short&lt;/strong&gt;, use this &apos;&lt;code&gt;if __name__ == &quot;main&quot;&lt;/code&gt; &apos; block to prevent (certain) code from being run when the module is imported.&lt;/p&gt;\n    ","\n&lt;p&gt;Put simply, &lt;code&gt;__name__&lt;/code&gt; is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.&lt;/p&gt;\n\n&lt;p&gt;So if we have two scripts;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#script1.py&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Script 1&apos;s name: {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__name__)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#script2.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; script1\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Script 2&apos;s name: {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__name__)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output from executing script1 is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Script &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;s name: __main__\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the output from executing script2 is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Script1&lt;span class=&quot;hljs-string&quot;&gt;&apos;s name is script1\nScript 2&apos;&lt;/span&gt;s name: __main__\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, &lt;code&gt;__name__&lt;/code&gt; tells us which code is the &apos;main&apos; module.\nThis is great, because you can just write code and not have to worry about structural issues like in C/C++, where, if a file does not implement a &apos;main&apos; function then it cannot be compiled as an executable and if it does, it cannot then be used as a library.&lt;/p&gt;\n\n&lt;p&gt;Say you write a Python script that does something great and you implement a boatload of functions that are useful for other purposes. If I want to use them I can just import your script and use them without executing your program (given that your code only executes within the  &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; context). Whereas in C/C++ you would have to portion out those pieces into a separate module that then includes the file. Picture the situation below;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/hWLqr.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/hWLqr.png&quot; alt=&quot;Complicated importing in C&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The arrows are import links. For three modules each trying to include the previous modules code there are six files (nine, counting the implementation files) and five links. This makes it difficult to include other code into a C project unless it is compiled specifically as a library. Now picture it for Python:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Eql0u.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Eql0u.png&quot; alt=&quot;Elegant importing in Python&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You write a module, and if someone wants to use your code they just import it and the &lt;code&gt;__name__&lt;/code&gt; variable can help to separate the executable portion of the program from the library part.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s look at the answer in a more abstract way:&lt;/p&gt;\n\n&lt;p&gt;Suppose we have this code in &lt;code&gt;x.py&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;...\n&amp;lt;Block A&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &amp;lt;Block B&amp;gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Blocks A and B are run when we are running &lt;code&gt;x.py&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;But just block A (and not B) is run when we are running another module, &lt;code&gt;y.py&lt;/code&gt; for example, in which &lt;code&gt;x.py&lt;/code&gt; is imported and the code is run from there (like when a function in &lt;code&gt;x.py&lt;/code&gt; is called from &lt;code&gt;y.py&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;To be short, you need to know several points:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;import a&lt;/code&gt; action actually runs all that can be run in &lt;code&gt;a.py&lt;/code&gt;, meaning each line in &lt;code&gt;a.py&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Because of point 1, you may not want everything to be run in &lt;code&gt;a.py&lt;/code&gt; when importing it&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To solve the problem in point 2, Python allows you to use a condition check&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is an implicit variable in all &lt;code&gt;.py&lt;/code&gt; modules:&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;when &lt;code&gt;a.py&lt;/code&gt; is &lt;code&gt;import&lt;/code&gt;ed, the value of &lt;code&gt;__name__&lt;/code&gt; of &lt;code&gt;a.py&lt;/code&gt; module is set to its file name &quot;&lt;code&gt;a&lt;/code&gt;&quot;&lt;/li&gt;\n&lt;li&gt;when &lt;code&gt;a.py&lt;/code&gt; is run directly using &quot;&lt;code&gt;python a.py&lt;/code&gt;&quot;, the value of &lt;code&gt;__name__&lt;/code&gt; is set to a string &lt;code&gt;__main__&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;Based on the mechanism how Python sets the variable &lt;code&gt;__name__&lt;/code&gt; for each module, do you know how to achieve point 3? The answer is fairly easy, right? Use an &lt;em&gt;if&lt;/em&gt; condition: &lt;code&gt;if __name__ == &quot;__main__&quot;: // do A&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;then &lt;code&gt;python a.py&lt;/code&gt; will run the part &lt;code&gt;// do A&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;and &lt;code&gt;import a&lt;/code&gt; will skip the part &lt;code&gt;// do A&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol start=&quot;6&quot;&gt;\n&lt;li&gt;You can even put if &lt;code&gt;__name__ == &quot;a&quot;&lt;/code&gt; depending on your functional need, but rarely do&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The important thing that Python is special at is point 4! The rest is just basic logic.&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;I&apos;ve been reading so much throughout the answers on this page. I would say, if you know the thing, for sure you will understand those answers, otherwise, you are still confused.&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When you run Python interactively the local &lt;code&gt;__name__&lt;/code&gt; variable is assigned a value of &lt;code&gt;__main__&lt;/code&gt;. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its &lt;code&gt;__name__&lt;/code&gt; attribute is assigned a value of &lt;code&gt;__main__&lt;/code&gt;, rather than the actual name of the module. In this way, modules can look at their own &lt;code&gt;__name__&lt;/code&gt; value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do something appropriate here, like calling a&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# main() function defined elsewhere in this module.&lt;/span&gt;\n    main()\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do nothing. This module has been imported by another&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# module that wants to make use of the functions,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# classes and other useful bits it has defined.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Consider:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It checks if the &lt;code&gt;__name__&lt;/code&gt; attribute of the Python script is &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;. In other words, if the program itself is executed, the attribute will be &lt;code&gt;__main__&lt;/code&gt;, so the program will be executed (in this case the &lt;code&gt;main()&lt;/code&gt; function).&lt;/p&gt;\n&lt;p&gt;However, if your Python script is used by a module, any code outside of the &lt;code&gt;if&lt;/code&gt; statement will be executed, so &lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; is used just to check if the program is used as a module or not, and therefore decides whether to run the code.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Before explaining anything about &lt;code&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt; it is important to understand what &lt;code&gt;__name__&lt;/code&gt; is and what it does.&lt;/em&gt;&lt;/p&gt;\n&lt;h2&gt;What is &lt;code&gt;__name__&lt;/code&gt;?&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is a &lt;a href=&quot;https://wiki.python.org/moin/DunderAlias&quot; rel=&quot;nofollow noreferrer&quot;&gt;DunderAlias&lt;/a&gt; - can be thought of as a global variable (accessible from modules) and works in a similar way to &lt;a href=&quot;https://stackoverflow.com/questions/13881395/in-python-what-is-a-global-statement&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;It is a string (global as mentioned above) as indicated by &lt;code&gt;type(__name__)&lt;/code&gt; (yielding &lt;code&gt;&amp;lt;class &apos;str&apos;&amp;gt;&lt;/code&gt;), and is an inbuilt standard for both &lt;a href=&quot;https://docs.python.org/3/library/__main__.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python 3&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python 2&lt;/a&gt; versions.&lt;/p&gt;\n&lt;h2&gt;Where&lt;/h2&gt;\n&lt;p&gt;It can not only be used in scripts but can also be found in both the interpreter and modules/packages.&lt;/p&gt;\n&lt;h3&gt;Interpreter:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(__name__)\n__main__\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Script:&lt;/h3&gt;\n&lt;p&gt;&lt;em&gt;test_file.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(__name__)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Resulting in &lt;code&gt;__main__&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;Module or package:&lt;/h3&gt;\n&lt;p&gt;&lt;em&gt;somefile.py:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;somefunction&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(__name__)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;test_file.py:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; somefile\nsomefile.somefunction()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Resulting in &lt;code&gt;somefile&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Notice that when used in a package or module, &lt;code&gt;__name__&lt;/code&gt; takes the name of the file.  The path of the actual module or package path is not given, but has its own DunderAlias &lt;code&gt;__file__&lt;/code&gt;, that allows for this.&lt;/p&gt;\n&lt;p&gt;You should see that, where &lt;code&gt;__name__&lt;/code&gt;, where it is the main file (or program) will &lt;em&gt;always&lt;/em&gt; return &lt;code&gt;__main__&lt;/code&gt;, and if it is a module/package, or anything that is running off some other Python script, will return the name of the file where it has originated from.&lt;/p&gt;\n&lt;h2&gt;Practice&lt;/h2&gt;\n&lt;p&gt;Being a variable means that it&apos;s value &lt;em&gt;can&lt;/em&gt; be overwritten (&quot;can&quot; does not mean &quot;should&quot;), overwriting the value of &lt;code&gt;__name__&lt;/code&gt; will result in a lack of readability.  So do not do it, for any reason.  If you need a variable define a new variable.&lt;/p&gt;\n&lt;p&gt;It is always assumed that the value of &lt;code&gt;__name__&lt;/code&gt; to be &lt;code&gt;__main__&lt;/code&gt; or the name of the file.  Once again changing this default value will cause more confusion that it will do good, causing problems further down the line.&lt;/p&gt;\n&lt;h3&gt;Example:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;__name__ = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Horrify&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Change default from __main__&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Horrify&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(__name__)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Not Horrify&apos;&lt;/span&gt;)\n...\nHorrify\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is considered good practice in general to include the &lt;code&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt; in scripts.&lt;/p&gt;\n&lt;h2&gt;Now to answer &lt;code&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt;:&lt;/h2&gt;\n&lt;p&gt;&lt;em&gt;Now we know the behaviour of &lt;code&gt;__name__&lt;/code&gt; things become clearer:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;An &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#if-statements&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; is a flow control statement that contains the block of code will execute if the value given is true. We have seen that &lt;code&gt;__name__&lt;/code&gt; can take either\n&lt;code&gt;__main__&lt;/code&gt; or the file name it has been imported from.&lt;/p&gt;\n&lt;p&gt;This means that if &lt;code&gt;__name__&lt;/code&gt; is equal to &lt;code&gt;__main__&lt;/code&gt; then the file must be the main file and must actually be running (or it is the interpreter), not a module or package imported into the script.&lt;/p&gt;\n&lt;p&gt;If indeed &lt;code&gt;__name__&lt;/code&gt; does take the value of &lt;code&gt;__main__&lt;/code&gt; then whatever is in that block of code will execute.&lt;/p&gt;\n&lt;p&gt;This tells us that if the file running is the main file (or you are running from the interpreter directly) then that condition must execute.  If it is a package then it should not, and the value will not be &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n&lt;h3&gt;Modules&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; can also be used in modules to define the name of a module&lt;/p&gt;\n&lt;h3&gt;Variants&lt;/h3&gt;\n&lt;p&gt;It is also possible to do other, less common but useful things with &lt;code&gt;__name__&lt;/code&gt;, some I will show here:&lt;/p&gt;\n&lt;h3&gt;Executing only if the file is a module or package&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ != &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do some useful things &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Running one condition if the file is the main one and another if it is not&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Execute something&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do some useful things&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also use it to provide runnable help functions/utilities on packages and modules without the elaborate use of libraries.&lt;/p&gt;\n&lt;p&gt;It also allows modules to be run from the command line as main scripts, which can be also very useful.&lt;/p&gt;\n    ","\n&lt;p&gt;I think it&apos;s best to break the answer in depth and in simple words:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt;: Every module in Python has a special attribute called &lt;code&gt;__name__&lt;/code&gt;.\nIt is a built-in variable that returns the name of the module.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__main__&lt;/code&gt;: Like other programming languages, Python too has an execution entry point, i.e., main. &lt;code&gt;&apos;__main__&apos;&lt;/code&gt; &lt;em&gt;is the name of the scope in which top-level code executes&lt;/em&gt;. Basically you have two ways of using a Python module: Run it directly as a script, or import it. When a module is run as a script, its &lt;code&gt;__name__&lt;/code&gt; is set to &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Thus, the value of the &lt;code&gt;__name__&lt;/code&gt; attribute is set to &lt;code&gt;__main__&lt;/code&gt; when the module is run as the main program. Otherwise the value of &lt;code&gt;__name__&lt;/code&gt;  is set to contain the name of the module.&lt;/p&gt;\n    ","\n&lt;p&gt;It is a special for when a Python file is called from the command line. This is typically used to call a &quot;main()&quot; function or execute other appropriate startup code, like commandline arguments handling for instance.&lt;/p&gt;\n&lt;p&gt;It could be written in several ways. Another is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;some_function_for_instance_main&lt;/span&gt;():\n    dosomething()\n\n\n__name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; some_function_for_instance_main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I am not saying you should use this in production code, but it serves to illustrate that there is nothing &quot;magical&quot; about &lt;code&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It just a convention for invoking a main function in Python files.&lt;/p&gt;\n    ","\n&lt;p&gt;There are a number of variables that the system (Python interpreter) provides for source files (modules).  You can get their values anytime you want, so, let us focus on the &lt;strong&gt;__name__&lt;/strong&gt; variable/attribute:&lt;/p&gt;\n\n&lt;p&gt;When Python loads a source code file, it executes all of the code found in it. (Note that it doesn&apos;t call all of the methods and functions defined in the file, but it does define them.)&lt;/p&gt;\n\n&lt;p&gt;Before the interpreter executes the source code file though, it defines a few special variables for that file; &lt;strong&gt;__name__&lt;/strong&gt; is one of those special variables that Python automatically defines for each source code file.&lt;/p&gt;\n\n&lt;p&gt;If Python is loading this source code file as the main program (i.e. the file you run), then it sets the special &lt;strong&gt;__name__&lt;/strong&gt; variable for this file to have a value &lt;strong&gt;&quot;__main__&quot;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;If this is being imported from another module, &lt;strong&gt;__name__&lt;/strong&gt; will be set to that module&apos;s name.&lt;/p&gt;\n\n&lt;p&gt;So, in your example in part:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n   lock = thread.allocate_lock()\n   thread.start_new_thread(myfunction, (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thread #: 1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, lock))\n   thread.start_new_thread(myfunction, (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thread #: 2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, lock))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;means that the code block:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lock = thread.allocate_lock()\nthread.start_new_thread(myfunction, (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thread #: 1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, lock))\nthread.start_new_thread(myfunction, (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thread #: 2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, lock))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will be executed only when you run the module directly; the code block will not execute if another module is calling/importing it because the value of &lt;strong&gt;__name__&lt;/strong&gt; will not equal to &quot;&lt;strong&gt;main&lt;/strong&gt;&quot; in that particular instance.&lt;/p&gt;\n\n&lt;p&gt;Hope this helps out.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; is basically the top-level script environment, and it specifies the interpreter that (&apos;I have the highest priority to be executed first&apos;).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&apos;__main__&apos;&lt;/code&gt; is the name of the scope in which top-level code executes. A modules &lt;code&gt;__name__&lt;/code&gt; is set equal to &lt;code&gt;&apos;__main__&apos;&lt;/code&gt; when read from standard input, a script, or from an interactive prompt.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Execute only if run as a script&lt;/span&gt;\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Consider:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; __name__\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output for the above is &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;direct method&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above statement is true and prints &lt;em&gt;&quot;direct method&quot;&lt;/em&gt;. Suppose if they imported this class in another class it doesn&apos;t print &lt;em&gt;&quot;direct method&quot;&lt;/em&gt; because, while importing, it will set &lt;code&gt;__name__ equal to &quot;first model name&quot;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;You can make the file usable as a &lt;strong&gt;script&lt;/strong&gt; as well as an &lt;strong&gt;importable module&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;fibo.py (a module named &lt;code&gt;fibo&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Other modules can IMPORT this MODULE to use the function fib&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fib&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):    &lt;span class=&quot;hljs-comment&quot;&gt;# write Fibonacci series up to n&lt;/span&gt;\n    a, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; b &amp;lt; n:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n        a, b = b, a+b\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# This allows the file to be used as a SCRIPT&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n    fib(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(sys.argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reference: &lt;a href=&quot;https://docs.python.org/3.5/tutorial/modules.html&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/3.5/tutorial/modules.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The reason for&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is primarily to avoid the &lt;a href=&quot;https://docs.python.org/2/library/threading.html#importing-in-threaded-code&quot; rel=&quot;noreferrer&quot;&gt;import lock&lt;/a&gt; problems that would arise from &lt;a href=&quot;https://stackoverflow.com/questions/46326059/&quot;&gt;having code directly imported&lt;/a&gt;. You want &lt;code&gt;main()&lt;/code&gt; to run if your file was directly invoked (that&apos;s the &lt;code&gt;__name__ == &quot;__main__&quot;&lt;/code&gt; case), but if your code was imported then the importer has to enter your code from the true main module to avoid import lock problems.&lt;/p&gt;\n\n&lt;p&gt;A side-effect is that you automatically sign on to a methodology that supports multiple entry points. You can run your program using &lt;code&gt;main()&lt;/code&gt; as the entry point, &lt;em&gt;but you don&apos;t have to&lt;/em&gt;. While &lt;code&gt;setup.py&lt;/code&gt; expects &lt;code&gt;main()&lt;/code&gt;, other tools use alternate entry points. For example, to run your file as a &lt;code&gt;gunicorn&lt;/code&gt; process, you define an &lt;code&gt;app()&lt;/code&gt; function instead of a &lt;code&gt;main()&lt;/code&gt;. Just as with &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;gunicorn&lt;/code&gt; imports your code so you don&apos;t want it do do anything while it&apos;s being imported (because of the import lock issue).&lt;/p&gt;\n    ","\n&lt;p&gt;Every module in Python has an attribute called &lt;code&gt;__name__&lt;/code&gt;. The value of &lt;code&gt;__name__&lt;/code&gt;  attribute is  &lt;code&gt;__main__&lt;/code&gt; when the module is run directly, like &lt;code&gt;python my_module.py&lt;/code&gt;. Otherwise (like when you say &lt;code&gt;import my_module&lt;/code&gt;) the value of &lt;code&gt;__name__&lt;/code&gt;  is the name of the module.&lt;/p&gt;\n&lt;p&gt;Small example to explain in short.&lt;/p&gt;\n&lt;h3&gt;Script &lt;em&gt;test.py&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;apple = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello_world&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am inside hello_world&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Value of __name__ is: &quot;&lt;/span&gt;, __name__)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Going to call hello_world&quot;&lt;/span&gt;)\n    hello_world()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can execute this directly as&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;python test.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Value of __name__ is: __main__\nGoing to call hello_world\nI am inside hello_world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now suppose we call the above script from another script:&lt;/p&gt;\n&lt;h3&gt;Script &lt;em&gt;external_calling.py&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; test\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(test.apple)\ntest.hello_world()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(test.__name__)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you execute this,&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;python external_calling.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;42\nI am inside hello_world\ntest\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, the above is self-explanatory that when you call &lt;em&gt;test&lt;/em&gt; from another script, if loop &lt;code&gt;__name__&lt;/code&gt; in &lt;code&gt;test.py&lt;/code&gt; will not execute.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are a beginner, probably the only answer you need right now is that &lt;em&gt;this code is unnecessary&lt;/em&gt; for a simple script. It is only useful if you want to be able to &lt;code&gt;import&lt;/code&gt; your script (or &lt;code&gt;unpickle&lt;/code&gt; etc; see the other answers here for some other non-beginner scenarios).&lt;/p&gt;\n&lt;p&gt;In slightly different words, the &lt;code&gt;if __name__&lt;/code&gt; guard is a mechanism for hiding code from other code. If you don&apos;t have a specific reason to hide something, don&apos;t: If you don&apos;t need to hide some code from &lt;code&gt;import&lt;/code&gt;, don&apos;t put it behind this guard, and if you do, hide as little as possible.&lt;/p&gt;\n&lt;p&gt;In slightly more detail, let&apos;s say you have a simple script &lt;code&gt;fib.py&lt;/code&gt; (adapted from &lt;a href=&quot;https://stackoverflow.com/a/42773985/874188&quot;&gt;this answer&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# XXX &lt;span class=&quot;hljs-doctag&quot;&gt;FIXME:&lt;/span&gt; useless (see below)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Write a number: &apos;&lt;/span&gt;))\n    a, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; b &amp;lt; n:\n        a, b = b, a+b\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fibonacci number %i: %i&apos;&lt;/span&gt; % (n, b))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, if you simply run &lt;code&gt;python fib.py&lt;/code&gt; it works fine. But &lt;code&gt;__name__&lt;/code&gt; will always be &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; in this scenario, so the condition is actually unnecessary. The script could be simplified to just&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;n = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Write a number: &apos;&lt;/span&gt;))\na, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; b &amp;lt; n:\n    a, b = b, a+b\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fibonacci number %i: %i&apos;&lt;/span&gt; % (n, b))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, you can&apos;t &lt;code&gt;import fib&lt;/code&gt; with the new version, but if you didn&apos;t plan to do that in the first place, this version is actually better, because it&apos;s simpler and clearer.&lt;/p&gt;\n&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; want to be able to &lt;code&gt;import fib&lt;/code&gt;, the first version is useless, too, because the useful code is in a section which will not run when you &lt;code&gt;import&lt;/code&gt; this file (in which case &lt;code&gt;__name__&lt;/code&gt; will not be &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;). The proper design in that case would be to refactor the code so that the useful parts are in a function you can run when you want to after you have &lt;code&gt;import&lt;/code&gt;ed it.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Write a number: &apos;&lt;/span&gt;))\n    a, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; b &amp;lt; n:\n        a, b = b, a+b\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fibonacci number %i: %i&apos;&lt;/span&gt; % (n, b))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, if you &lt;code&gt;import fib&lt;/code&gt;, the call to &lt;code&gt;main()&lt;/code&gt; will not be executed; but when you run &lt;code&gt;python fib.py&lt;/code&gt;, it will.&lt;/p&gt;\n&lt;p&gt;Actually, a better design still would be to isolate the reusable part (the actual calculation) from the user-visible input/output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fibn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;:\n    a, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; b &amp;lt; n:\n        a, b = b, a+b\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Write a number: &apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fibonacci number %i: %i&apos;&lt;/span&gt; % (n, fibn(n)))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, you can &lt;code&gt;from fib import fibn&lt;/code&gt; and call the &lt;code&gt;fibn()&lt;/code&gt; function from the code which performs this &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;(I called the function &lt;code&gt;fibn()&lt;/code&gt; just to make it clearer what is what in this example. In real life, you might call it &lt;code&gt;fib()&lt;/code&gt; and do &lt;code&gt;from fib import fib&lt;/code&gt;.)&lt;/p&gt;\n&lt;p&gt;Similarly, you could &lt;code&gt;import&lt;/code&gt; and call the &lt;code&gt;main&lt;/code&gt; function if you wanted to reuse it.&lt;/p&gt;\n&lt;p&gt;Returning to the code in the question, I would similarly move the code from the &lt;code&gt;if&lt;/code&gt; into a function as well, so that callers can invoke that function if they want to.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    lock = thread.allocate_lock()\n    thread.start_new_thread(myfunction, (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thread #: 1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, lock))\n    thread.start_new_thread(myfunction, (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thread #: 2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, lock))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This changes the scope of the &lt;code&gt;lock&lt;/code&gt; variable; if the surrounding code needs access to it, you will need to make it &lt;code&gt;global&lt;/code&gt; (or, perhaps, better, refactor &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;return lock&lt;/code&gt;, and have the caller capture the value in a local variable of its own).&lt;/p&gt;\n&lt;p&gt;(Unlike in languages like C, the name &lt;code&gt;main&lt;/code&gt; has no specific meaning to Python; but it&apos;s a common convention to use it as the name of the thing which will be run. You still have to actually explicitly call it, like &lt;code&gt;main()&lt;/code&gt;, unlike in C.)&lt;/p&gt;\n    ","\n&lt;p&gt;This answer is for Java programmers learning Python.\nEvery Java file typically contains one public class. You can use that class in two ways: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Call the class from other files. You just have to import it in the calling program.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Run the class stand alone, for testing purposes. &lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For the latter case, the class should contain a public static void main() method. In Python this purpose is served by the globally defined label &lt;code&gt;&apos;__main__&apos;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If the Python interpreter is running a particular module then the &lt;code&gt;__name__&lt;/code&gt; global variable will have the value &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;():\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;():\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n\n          &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;you can see me&quot;&lt;/span&gt;)\n          a()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n\n          &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;You can&apos;t see me&quot;&lt;/span&gt;)\n          b()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you run this script, it prints &lt;strong&gt;you can see me&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you import this file, say A to file B, and execute the file B then &lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; in file A becomes false, so it prints  &lt;strong&gt;You can&apos;t see me&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In simple words:&lt;/p&gt;\n&lt;p&gt;The code you see under &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; will only get called upon when your Python file is executed as &quot;python example1.py&quot;.&lt;/p&gt;\n&lt;p&gt;However, if you wish to import your Python file &apos;example1.py&apos; as a module to work with another Python file, say &apos;example2.py&apos;, the code under &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; will not run or take any effect.&lt;/p&gt;\n&lt;p&gt;In simple words:&lt;/p&gt;\n&lt;p&gt;The code you see under &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; will only get called upon when your Python file is executed as &quot;python example1.py&quot;.&lt;/p&gt;\n&lt;p&gt;However, if you wish to import your Python file &apos;example1.py&apos; as a module to work with another Python file, say &apos;example2.py&apos;, the code under &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; will not run or take any effect.&lt;/p&gt;\n    ","\n&lt;p&gt;If this .py file are imported by other .py files, the code under the &lt;code&gt;if&lt;/code&gt; statement will not be executed.&lt;/p&gt;\n&lt;p&gt;If this .py are run by &lt;code&gt;python this_py.py&lt;/code&gt; under shell, or double clicked in Windows. the code under the &lt;code&gt;if&lt;/code&gt; statement will be executed.&lt;/p&gt;\n&lt;p&gt;It is usually written for testing.&lt;/p&gt;\n    ","\n&lt;p&gt;We see if &lt;code&gt;__name__ == &apos;__main__&apos;:&lt;/code&gt; quite often.&lt;/p&gt;\n&lt;p&gt;It checks if a module is being imported or not.&lt;/p&gt;\n&lt;p&gt;In other words, the code within the &lt;code&gt;if&lt;/code&gt; block will be executed only when the code runs directly. Here &lt;code&gt;directly&lt;/code&gt; means &lt;code&gt;not imported&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Let&apos;s see what it does using a simple code that prints the name of the module:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# test.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;():\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;test module name=%s&apos;&lt;/span&gt; %(__name__))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;call test()&apos;&lt;/span&gt;)\n   test()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we run the code directly via &lt;code&gt;python test.py&lt;/code&gt;, the module name is &lt;code&gt;__main__&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;call test()\ntest module name=__main__\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Create a file, &lt;strong&gt;a.py&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(__name__) &lt;span class=&quot;hljs-comment&quot;&gt;# It will print out __main__&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is always equal to &lt;code&gt;__main__&lt;/code&gt; whenever that file is &lt;strong&gt;run directly&lt;/strong&gt; showing that this is the main file.&lt;/p&gt;\n\n&lt;p&gt;Create another file, &lt;strong&gt;b.py&lt;/strong&gt;, in the same directory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; a  &lt;span class=&quot;hljs-comment&quot;&gt;# Prints a&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Run it. It will print &lt;strong&gt;a&lt;/strong&gt;, i.e., the name of the file which &lt;strong&gt;is imported&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So, to show &lt;strong&gt;two different behavior of the same file&lt;/strong&gt;, this is a commonly used trick:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Code to be run when imported into another python file&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Code to be run only when run directly&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"163":["\n&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; &quot;PECS&quot; is from the collection&apos;s point of view. If you are &lt;em&gt;only&lt;/em&gt; pulling items from a generic collection, it is a producer and you should use &lt;code&gt;extends&lt;/code&gt;; if you are &lt;em&gt;only&lt;/em&gt; stuffing items in, it is a consumer and you should use &lt;code&gt;super&lt;/code&gt;. If you do both with the same collection, you shouldn&apos;t use either &lt;code&gt;extends&lt;/code&gt; or &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Suppose you have a method that takes as its parameter a collection of things, but you want it to be more flexible than just accepting a &lt;code&gt;Collection&amp;lt;Thing&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Case 1: You want to go through the collection and do things with each item.&lt;/strong&gt;&lt;br&gt;\nThen the list is a &lt;strong&gt;producer&lt;/strong&gt;, so you should use a &lt;code&gt;Collection&amp;lt;? extends Thing&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The reasoning is that a &lt;code&gt;Collection&amp;lt;? extends Thing&amp;gt;&lt;/code&gt; could hold any subtype of &lt;code&gt;Thing&lt;/code&gt;, and thus each element will behave as a &lt;code&gt;Thing&lt;/code&gt; when you perform your operation. (You actually cannot add anything (except null) to a &lt;code&gt;Collection&amp;lt;? extends Thing&amp;gt;&lt;/code&gt;, because you cannot know at runtime which &lt;em&gt;specific&lt;/em&gt; subtype of &lt;code&gt;Thing&lt;/code&gt; the collection holds.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Case 2: You want to add things to the collection.&lt;/strong&gt;&lt;br&gt;\nThen the list is a &lt;strong&gt;consumer&lt;/strong&gt;, so you should use a &lt;code&gt;Collection&amp;lt;? super Thing&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The reasoning here is that unlike &lt;code&gt;Collection&amp;lt;? extends Thing&amp;gt;&lt;/code&gt;, &lt;code&gt;Collection&amp;lt;? super Thing&amp;gt;&lt;/code&gt; can always hold a &lt;code&gt;Thing&lt;/code&gt; no matter what the actual parameterized type is. Here you don&apos;t care what is already in the list as long as it will allow a &lt;code&gt;Thing&lt;/code&gt; to be added; this is what &lt;code&gt;? super Thing&lt;/code&gt; guarantees.&lt;/p&gt;\n    ","\n&lt;p&gt;The principles behind this in computer science is called&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Covariance: &lt;code&gt;? extends MyClass&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;Contravariance: &lt;code&gt;? super MyClass&lt;/code&gt; and&lt;/li&gt;\n&lt;li&gt;Invariance/non-variance: &lt;code&gt;MyClass&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The picture below should explain the concept.\nPicture courtesy: &lt;a href=&quot;https://stackoverflow.com/users/2707792/andrey-tyukin&quot;&gt;Andrey Tyukin&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/KjDLw.png&quot; alt=&quot;Covariance vs Contravariance&quot;&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;When dealing with collections, a common rule for selecting between upper or lower bounded wildcards is PECS. &lt;a href=&quot;https://www.baeldung.com/java-generics-interview-questions#q13-when-would-you-choose-to-use-a-lower-bounded-type-vs-an-upper-bounded-type&quot; rel=&quot;noreferrer&quot;&gt;credit&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;PECS (Producer &lt;code&gt;extends&lt;/code&gt; and Consumer &lt;code&gt;super&lt;/code&gt;)&lt;/p&gt;\n&lt;p&gt;mnemonic  Ge&lt;strong&gt;t&lt;/strong&gt; (ex&lt;strong&gt;t&lt;/strong&gt;end) and P&lt;strong&gt;u&lt;/strong&gt;t (S&lt;strong&gt;u&lt;/strong&gt;per) principle.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;This &lt;strong&gt;principle&lt;/strong&gt; states that:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Use an &lt;code&gt;extends&lt;/code&gt; wildcard when you only get values out of a structure.&lt;/li&gt;\n&lt;li&gt;Use a &lt;code&gt;super&lt;/code&gt; wildcard when you only put values into a structure.&lt;/li&gt;\n&lt;li&gt;And dont use a wildcard when you both get and put.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Example in Java:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Super&lt;/span&gt; {\n        Number &lt;span class=&quot;hljs-title function_&quot;&gt;testCoVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testContraVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Number parameter)&lt;/span&gt; {\n        } \n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Super&lt;/span&gt; {\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        Integer &lt;span class=&quot;hljs-title function_&quot;&gt;testCoVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-comment&quot;&gt;//compiles successfully i.e. return type is don&apos;t care(Integer is subtype of Number)&lt;/span&gt;\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testContraVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer parameter)&lt;/span&gt; {\n        } &lt;span class=&quot;hljs-comment&quot;&gt;//doesn&apos;t support even though Integer is subtype of Number&lt;/span&gt;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The Liskov Substitution Principle (LSP) states that &lt;strong&gt;objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Within the type system of a programming language, a typing rule&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;covariant&lt;/strong&gt; if it preserves the ordering of types (), which orders types from more specific to more generic;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;contravariant&lt;/strong&gt; if it reverses this ordering;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;invariant&lt;/strong&gt; or nonvariant if neither of these applies.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;Covariance and contravariance&lt;/a&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Read-only data types (sources) can be &lt;strong&gt;&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Covariant_return_type&quot; rel=&quot;noreferrer&quot;&gt;covariant&lt;/a&gt;&lt;/strong&gt;;&lt;/li&gt;\n&lt;li&gt;write-only data types (sinks) can be &lt;strong&gt;contravariant&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Mutable data types which act as both sources and sinks should be &lt;strong&gt;invariant&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;To illustrate this general phenomenon, consider the array type. For the type Animal we can make the type Animal[]&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;covariant&lt;/strong&gt;: a Cat[] is an Animal[];&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;contravariant&lt;/strong&gt;: an Animal[] is a Cat[];&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;invariant&lt;/strong&gt;: an Animal[] is not a Cat[] and a Cat[] is not an Animal[].&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Java Examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Object name= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prem&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//works&lt;/span&gt;\nList&amp;lt;Number&amp;gt; numbers = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;span class=&quot;hljs-comment&quot;&gt;//gets compile time error&lt;/span&gt;\n\nInteger[] myInts = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};\nNumber[] myNumber = myInts;\nmyNumber[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//attempt of heap pollution i.e. at runtime gets java.lang.ArrayStoreException: java.lang.Double(we can fool compiler but not run-time)&lt;/span&gt;\n\nList&amp;lt;String&amp;gt; list=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\nlist.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prem&quot;&lt;/span&gt;);\nList&amp;lt;Object&amp;gt; listObject=list; &lt;span class=&quot;hljs-comment&quot;&gt;//Type mismatch: cannot convert from List&amp;lt;String&amp;gt; to List&amp;lt;Object&amp;gt; at Compiletime  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.codejava.net/java-core/collections/generics-with-subtyping-and-the-substitution-principle&quot; rel=&quot;noreferrer&quot;&gt;more examples&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/KoW5X.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/KoW5X.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.mathsisfun.com/definitions/bounds.html&quot; rel=&quot;noreferrer&quot;&gt;Image src&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;bounded&lt;/strong&gt;(i.e. heading toward somewhere) &lt;strong&gt;wildcard&lt;/strong&gt; : There are 3 different flavours of wildcards:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;In-variance/Non-variance: &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;? extends Object&lt;/code&gt; - &lt;strong&gt;Unbounded&lt;/strong&gt; Wildcard. It stands for the family of  all types. Use when you both get and put.&lt;/li&gt;\n&lt;li&gt;Co-variance: &lt;code&gt;? extends T&lt;/code&gt; ( Reign of &lt;code&gt;T&lt;/code&gt; descendants)  - a wildcard with an &lt;strong&gt;upper bound&lt;/strong&gt;. &lt;code&gt;T&lt;/code&gt; is the &lt;strong&gt;upper&lt;/strong&gt;-most class in the inheritance hierarchy. Use an &lt;code&gt;extends&lt;/code&gt; wildcard when you only &lt;strong&gt;Get&lt;/strong&gt; values out of a structure.&lt;/li&gt;\n&lt;li&gt;Contra-variance: &lt;code&gt;? super T&lt;/code&gt; ( Reign of &lt;code&gt;T&lt;/code&gt; ancestor)  - a wildcard with a &lt;strong&gt;lower bound&lt;/strong&gt;. &lt;code&gt;T&lt;/code&gt; is the &lt;strong&gt;lower&lt;/strong&gt;-most class in the inheritance hierarchy. Use a &lt;code&gt;super&lt;/code&gt; wildcard when you only &lt;strong&gt;Put&lt;/strong&gt; values into a structure.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Note: wildcard &lt;code&gt;?&lt;/code&gt; means &lt;strong&gt;zero or one time&lt;/strong&gt;, represents an &lt;strong&gt;unknown type&lt;/strong&gt;. The wildcard can be used as the type of a parameter, never used as a type argument for a generic method invocation, a generic class instance creation.(i.e. when used wildcard that reference not used in elsewhere in program like we use &lt;code&gt;T&lt;/code&gt;)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ki1Kf.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ki1Kf.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {}}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {}}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {}}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {}}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//? extends Shape i.e. can use any sub type of Shape, here Shape is Upper Bound in inheritance hierarchy&lt;/span&gt;\n        List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;&amp;gt; intList5 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Shape&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;&amp;gt; intList6 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Cricle&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;&amp;gt; intList7 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Rectangle&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;&amp;gt; intList9 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Object&amp;gt;();&lt;span class=&quot;hljs-comment&quot;&gt;//ERROR.&lt;/span&gt;\n\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//? super Shape i.e. can use any super type of Shape, here Shape is Lower Bound in inheritance hierarchy&lt;/span&gt;\n        List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Shape&amp;gt; inList5 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Shape&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Shape&amp;gt; inList6 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Object&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Shape&amp;gt; inList7 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Circle&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//ERROR.&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//-----------------------------------------------------------&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circle&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; circle; &lt;span class=&quot;hljs-comment&quot;&gt;// OK. Circle IS-A Shape&lt;/span&gt;\n\n        List&amp;lt;Circle&amp;gt; circles = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n        List&amp;lt;Shape&amp;gt; shapes = circles; &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR. List&amp;lt;Circle&amp;gt; is not subtype of List&amp;lt;Shape&amp;gt; even when Circle IS-A Shape&lt;/span&gt;\n\n        List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circle&lt;/span&gt;&amp;gt; circles2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;&amp;gt; shapes2 = circles2; &lt;span class=&quot;hljs-comment&quot;&gt;// OK. List&amp;lt;? extends Circle&amp;gt; is subtype of List&amp;lt;? extends Shape&amp;gt;&lt;/span&gt;\n\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//-----------------------------------------------------------&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;shape2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;();\n        Circle circle2= (Circle) shape2; &lt;span class=&quot;hljs-comment&quot;&gt;// OK. with type casting&lt;/span&gt;\n\n        List&amp;lt;Shape&amp;gt; shapes3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n        List&amp;lt;Circle&amp;gt; circles3 = shapes3; &lt;span class=&quot;hljs-comment&quot;&gt;//ERROR. List&amp;lt;Circle&amp;gt; is not subtype of  List&amp;lt;Shape&amp;gt; even Circle is subetype of Shape&lt;/span&gt;\n\n        List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Shape&amp;gt; shapes4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n        List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Circle&amp;gt; circles4 = shapes4; &lt;span class=&quot;hljs-comment&quot;&gt;//OK.&lt;/span&gt;\n    }\n\n    \n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     * Example for an upper bound wildcard (Get values i.e Producer `extends`)\n     *\n     * */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testCoVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? extends Shape&amp;gt; list)&lt;/span&gt; {\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//ERROR&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//ERROR&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circle&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Square&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rectangle&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR&lt;/span&gt;\n        Shape shape= list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//OK so list act as produces only&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     * You can&apos;t add a Shape,Circle,Square,Rectangle to a List&amp;lt;? extends Shape&amp;gt;\n     * You can get an object and know that it will be an Shape\n     */&lt;/span&gt;\n    }\n    \n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     * Example for  a lower bound wildcard (Put values i.e Consumer`super`)\n     * */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testContraVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Shape&amp;gt; list)&lt;/span&gt; {\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//ERROR&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//OK&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circle&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//OK&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Square&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//OK&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rectangle&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//OK&lt;/span&gt;\n        Shape shape= list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR. Type mismatch, so list acts only as consumer&lt;/span&gt;\n        Object object= list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//OK gets an object, but we don&apos;t know what kind of Object it is.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * You can add a Shape,Circle,Square,Rectangle to a List&amp;lt;? super Shape&amp;gt;\n         * You can&apos;t get an Shape(but can get Object) and don&apos;t know what kind of Shape it is.\n         */&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html&quot; rel=&quot;noreferrer&quot;&gt;generics&lt;/a&gt; and &lt;a href=&quot;http://www.codejava.net/java-core/collections/generics-with-extends-and-super-wildcards-and-the-get-and-put-principle&quot; rel=&quot;noreferrer&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.infoworld.com/article/3172592/type-dependency-in-java-part-1.html&quot; rel=&quot;noreferrer&quot;&gt;Covariance and contravariance&lt;/a&gt; determine compatibility based on types. In either case, variance is a directed relation. Covariance can be translated as &quot;&lt;strong&gt;different in the same direction&lt;/strong&gt;,&quot; or with-different, whereas contravariance means &quot;&lt;strong&gt;different in the opposite direction&lt;/strong&gt;,&quot; or against-different. Covariant and contravariant types are not the same, but there is a correlation between them. The names imply the direction of the correlation.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/54576828/1697099&quot;&gt;https://stackoverflow.com/a/54576828/1697099&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/64888058/1697099&quot;&gt;https://stackoverflow.com/a/64888058/1697099&lt;/a&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Covariance: accept subtypes (read only i.e. Producer)&lt;/li&gt;\n&lt;li&gt;Contravariance: accept supertypes (write only i.e. Consumer)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {}\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {}\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; {}\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testCoVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? extends B&amp;gt; myBlist)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;();\n        myBlist.add(b); &lt;span class=&quot;hljs-comment&quot;&gt;// does not compile&lt;/span&gt;\n        myBlist.add(c); &lt;span class=&quot;hljs-comment&quot;&gt;// does not compile&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myBlist.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); \n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testContraVariance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; B&amp;gt; myBlist)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;();\n        myBlist.add(b);\n        myBlist.add(c);\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myBlist.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// does not compile&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In a nutshell, three easy rules to remember PECS: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use the &lt;code&gt;&amp;lt;? extends T&amp;gt;&lt;/code&gt; wildcard if you need to retrieve object of\ntype &lt;code&gt;T&lt;/code&gt; from a collection.&lt;/li&gt;\n&lt;li&gt;Use the &lt;code&gt;&amp;lt;? super T&amp;gt;&lt;/code&gt; wildcard if you need to put objects of type &lt;code&gt;T&lt;/code&gt; in\na collection.&lt;/li&gt;\n&lt;li&gt;If you need to satisfy both things, well, dont use any wildcard. As\nsimple as that.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;As I explain in &lt;a href=&quot;https://stackoverflow.com/questions/2248390/java-generics-collections-max-signature-and-comparator/2248503#2248503&quot;&gt;my answer&lt;/a&gt; to another question, PECS is a mnemonic device  created by Josh Bloch to help remember &lt;strong&gt;P&lt;/strong&gt;roducer &lt;code&gt;&lt;strong&gt;e&lt;/strong&gt;xtends&lt;/code&gt;, &lt;strong&gt;C&lt;/strong&gt;onsumer &lt;code&gt;&lt;strong&gt;s&lt;/strong&gt;uper&lt;/code&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This means that when a parameterized type being passed to a method will &lt;em&gt;produce&lt;/em&gt; instances of &lt;code&gt;T&lt;/code&gt; (they will be retrieved from it in some way), &lt;code&gt;? extends T&lt;/code&gt; should be used, since any instance of a subclass of &lt;code&gt;T&lt;/code&gt; is also a &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;When a parameterized type being passed to a method will &lt;em&gt;consume&lt;/em&gt; instances of &lt;code&gt;T&lt;/code&gt; (they will be passed to it to do something), &lt;code&gt;? super T&lt;/code&gt; should be used because an instance of &lt;code&gt;T&lt;/code&gt; can legally be passed to any method that accepts some supertype of &lt;code&gt;T&lt;/code&gt;. A &lt;code&gt;Comparator&amp;lt;Number&amp;gt;&lt;/code&gt; could be used on a &lt;code&gt;Collection&amp;lt;Integer&amp;gt;&lt;/code&gt;, for example. &lt;code&gt;? extends T&lt;/code&gt; would not work, because a &lt;code&gt;Comparator&amp;lt;Integer&amp;gt;&lt;/code&gt; could not operate on a &lt;code&gt;Collection&amp;lt;Number&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note that generally you should only be using &lt;code&gt;? extends T&lt;/code&gt; and &lt;code&gt;? super T&lt;/code&gt; for the parameters of some method. Methods should just use &lt;code&gt;T&lt;/code&gt; as the type parameter on a generic return type.&lt;/p&gt;\n    ","\n&lt;p&gt;let&apos;s assume this hierarchy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Creature&lt;/span&gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;// X&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Creature&lt;/span&gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;// Y&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fish&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;// Z&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shark&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fish&lt;/span&gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;// A&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HammerSkark&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shark&lt;/span&gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;// B&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeadHammerShark&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HammerSkark&lt;/span&gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;// C&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Let&apos;s clarify PE - Producer Extends:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shark&lt;/span&gt;&amp;gt; sharks = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why you cannot add objects that extend &quot;Shark&quot; in this list? like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;sharks.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HammerShark&lt;/span&gt;());&lt;span class=&quot;hljs-comment&quot;&gt;//will result in compilation error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since you have a list that can be of type A, B or C &lt;strong&gt;at runtime&lt;/strong&gt;, you cannot add any object of type A, B or C in it because you can end up with a combination that is not allowed in java. &lt;br&gt;In practice, the compiler can indeed see at compiletime that you add a B:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;sharks.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HammerShark&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...but it has no way to tell if at runtime, your B will be a subtype or supertype of the list type. At runtime the list type can be any of the types A, B, C. So you cannot end up adding HammerSkark (super type) in a list of DeadHammerShark for example.&lt;/p&gt;\n\n&lt;p&gt;*You will say: &quot;OK, but why can&apos;t I add HammerSkark in it since it is the smallest type?&quot;. \nAnswer: It is the smallest &lt;strong&gt;you&lt;/strong&gt; know. But HammerSkark can be extended too by somebody else and you end up in the same scenario.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Let&apos;s clarify CS - Consumer Super:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In the same hierarchy we can try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Shark&amp;gt; sharks = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What and why you &lt;strong&gt;can&lt;/strong&gt; add to this list?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;sharks.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shark&lt;/span&gt;());\nsharks.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DeadHammerShark&lt;/span&gt;());\nsharks.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HammerSkark&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can add the above types of objects because anything below shark(A,B,C) will always be subtypes of anything above shark (X,Y,Z). Easy to understand. &lt;/p&gt;\n\n&lt;p&gt;You &lt;strong&gt;cannot&lt;/strong&gt; add types above Shark, because &lt;strong&gt;at runtime&lt;/strong&gt; the type of added object can be higher in hierarchy than the declared type of the list(X,Y,Z). This is not allowed.&lt;/p&gt;\n\n&lt;p&gt;But why you cannot read from this list?\n(I mean you can get an element out of it, but you cannot assign it to anything other than Object o):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Object o;\no = sharks.get(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;// only assignment that works&lt;/span&gt;\n\nAnimal s;\ns = sharks.get(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//doen&apos;t work&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At runtime, the type of list can be any type above A: X, Y, Z, ...\nThe compiler can compile your assignment statement (which seems correct) but, &lt;strong&gt;at runtime&lt;/strong&gt; the type of s (Animal) can be lower in hierarchy than the declared type of the list(which could be Creature, or higher). This is not allowed.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To sum up&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;We use &lt;code&gt;&amp;lt;? super T&amp;gt;&lt;/code&gt; to add objects of types equal or below &lt;code&gt;T&lt;/code&gt; to the &lt;code&gt;List&lt;/code&gt;.&lt;/strong&gt; We cannot read from \nit.&lt;br&gt;\n&lt;strong&gt;We use &lt;code&gt;&amp;lt;? extends T&amp;gt;&lt;/code&gt; to read objects of types equal or below &lt;code&gt;T&lt;/code&gt; from list.&lt;/strong&gt; We cannot add element to it.&lt;/p&gt;\n    ","\n&lt;p&gt;This is the clearest, simplest way for me think of extends vs. super:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;extends&lt;/code&gt; is for &lt;strong&gt;reading&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;super&lt;/code&gt; is for &lt;strong&gt;writing&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I find &quot;PECS&quot; to be a non-obvious way to think of things regarding who is the &quot;producer&quot; and who is the &quot;consumer&quot;. &quot;PECS&quot; is defined from the perspective of the &lt;em&gt;data collection itself&lt;/em&gt;  the collection &quot;consumes&quot; if objects are being written &lt;em&gt;to&lt;/em&gt; it (it is consuming objects from calling code), and it &quot;produces&quot; if objects are being read &lt;em&gt;from&lt;/em&gt; it (it is producing objects to some calling code). This is counter to how everything else is named though. Standard Java APIs are named from the perspective of the calling code, not the collection itself. For example, a collection-centric view of &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/List.html&quot; rel=&quot;noreferrer&quot;&gt;java.util.List&lt;/a&gt; should have a method named &quot;receive()&quot; instead of &quot;add()&quot;  after all, the calling code &lt;em&gt;adds&lt;/em&gt; the element, but the list itself &lt;em&gt;receives&lt;/em&gt; the element.&lt;/p&gt;\n\n&lt;p&gt;I think it&apos;s more intuitive, natural and consistent to think of things from the perspective of the code that interacts with the collection  does the code &quot;read from&quot; or &quot;write to&quot; the collection? Following that, any code &lt;em&gt;writing to&lt;/em&gt; the collection would be the &quot;producer&quot;, and any code &lt;em&gt;reading from&lt;/em&gt; the collection would be the &quot;consumer&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;lets try visualizing this concept.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;? super SomeType&amp;gt;&lt;/code&gt; is an undefined(yet) type, but that undefined type &lt;strong&gt;should be a super&lt;/strong&gt;class of the SomeType class.&lt;/p&gt;\n&lt;p&gt;The same goes for &lt;code&gt;&amp;lt;? extends SomeType&amp;gt;&lt;/code&gt;. Its a type that &lt;strong&gt;should extend&lt;/strong&gt; the SomeType class (it should be a child class of the SomeType class).&lt;/p&gt;\n&lt;p&gt;If we consider the concept of &apos;class inheritance&apos; in a Venn diagram, an example would be like this:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rneiP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rneiP.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Mammal class &lt;strong&gt;extends&lt;/strong&gt; Animal class (Animal class is a &lt;strong&gt;super&lt;/strong&gt;class of Mammal class).&lt;/p&gt;\n&lt;p&gt;Cat/Dog class &lt;strong&gt;extends&lt;/strong&gt; Mammal class (Mammal class is a &lt;strong&gt;super&lt;/strong&gt;class of Cat/Dog class).&lt;/p&gt;\n&lt;p&gt;Then, lets think about the circles in the above diagram as a box that has a physical volume.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/mpxnl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/mpxnl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;You CANT put a bigger box into a smaller one.&lt;/p&gt;\n&lt;p&gt;You can ONLY put a smaller box into a bigger one.&lt;/p&gt;\n&lt;p&gt;When you say &lt;code&gt;&amp;lt;? super SomeType&amp;gt;&lt;/code&gt;, you wanna describe a box that is the same size or &lt;strong&gt;bigger&lt;/strong&gt; than the SomeType box.&lt;/p&gt;\n&lt;p&gt;If you say &lt;code&gt;&amp;lt;? extends SomeType&amp;gt;&lt;/code&gt;, then you wanna describe a box that is the same size or &lt;strong&gt;smaller&lt;/strong&gt; than the SomeType box.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;so what is PECS anyway?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;An example of a Producer is a List which we only read from.&lt;/p&gt;\n&lt;p&gt;An example of a Consumer is a List which we only write into.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Just keep in mind this:&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;We read from a producer, and take that stuff into our own box.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And we write our own box into a consumer.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So, we need to read(take) something from a producer &lt;strong&gt;and put that into our box.&lt;/strong&gt; This means that any boxes taken from the producer should &lt;strong&gt;NOT&lt;/strong&gt; be bigger than our box. Thats why &lt;strong&gt;P&lt;/strong&gt;roducer &lt;strong&gt;E&lt;/strong&gt;xtends.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Extends means a smaller box&lt;/strong&gt;(smaller circle in the Venn diagram above). The boxes of a producer should be smaller than our own box, because we are gonna take those boxes from the producer and put them into our own box. We cant put anything bigger than our box!&lt;/p&gt;\n&lt;p&gt;Also, we need to write(put) &lt;strong&gt;our own box into&lt;/strong&gt; a consumer. This means that the boxes of the consumer should &lt;strong&gt;NOT&lt;/strong&gt; be smaller than our own box. Thats why &lt;strong&gt;C&lt;/strong&gt;onsumer &lt;strong&gt;S&lt;/strong&gt;uper.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Super means a bigger box&lt;/strong&gt;(bigger circle in the Venn diagram above). If we want to put our own boxes into a consumer, the boxes of the consumer should be bigger than our box!&lt;/p&gt;\n&lt;p&gt;Now we can easily understand this example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Collections&lt;/span&gt; { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; T&amp;gt; dest, List&amp;lt;? extends T&amp;gt; src)&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; src.size(); i++) \n        dest.set(i, src.get(i)); \n  } \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the above example, we want to read(take) something from &lt;code&gt;src&lt;/code&gt; and write(put) them into &lt;code&gt;dest&lt;/code&gt;. So the &lt;code&gt;src&lt;/code&gt; is a Producer and its boxes should be smaller(more specific) than some type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Vice versa, the &lt;code&gt;dest&lt;/code&gt; is a Consumer and its boxes should be bigger(more general) than some type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If the boxes of the &lt;code&gt;src&lt;/code&gt; were bigger than that of the &lt;code&gt;dest&lt;/code&gt;, we couldnt put those big boxes into the smaller boxes the &lt;code&gt;dest&lt;/code&gt; has.&lt;/p&gt;\n&lt;p&gt;If anyone reads this, I hope it helps you better understand\n&lt;strong&gt;P&lt;/strong&gt;roducer &lt;strong&gt;E&lt;/strong&gt;xtends, &lt;strong&gt;C&lt;/strong&gt;onsumer &lt;strong&gt;S&lt;/strong&gt;uper.&lt;/p&gt;\n&lt;p&gt;Happy coding! :)&lt;/p&gt;\n    ","\n&lt;p&gt;(adding an answer because never enough examples with Generics wildcards)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;       &lt;span class=&quot;hljs-comment&quot;&gt;// Source &lt;/span&gt;\n       List&amp;lt;Integer&amp;gt; intList = Arrays.asList(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n       List&amp;lt;Double&amp;gt; doubleList = Arrays.asList(&lt;span class=&quot;hljs-number&quot;&gt;2.78&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;);\n       List&amp;lt;Number&amp;gt; numList = Arrays.asList(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2.78&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n\n       &lt;span class=&quot;hljs-comment&quot;&gt;// Destination&lt;/span&gt;\n       List&amp;lt;Integer&amp;gt; intList2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n       List&amp;lt;Double&amp;gt; doublesList2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n       List&amp;lt;Number&amp;gt; numList2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n        copyElements1(intList,intList2);         &lt;span class=&quot;hljs-comment&quot;&gt;// from int to int&lt;/span&gt;\n        copyElements1(doubleList,doublesList2);  &lt;span class=&quot;hljs-comment&quot;&gt;// from double to double&lt;/span&gt;\n\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copyElements1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;T&amp;gt; src, Collection&amp;lt;T&amp;gt; dest)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(T n : src){\n            dest.add(n);\n         }\n      }\n\n\n     &lt;span class=&quot;hljs-comment&quot;&gt;// Let&apos;s try to copy intList to its supertype&lt;/span&gt;\n     copyElements1(intList,numList2); &lt;span class=&quot;hljs-comment&quot;&gt;// error, method signature just says &quot;T&quot;&lt;/span&gt;\n                                      &lt;span class=&quot;hljs-comment&quot;&gt;// and here the compiler is given &lt;/span&gt;\n                                      &lt;span class=&quot;hljs-comment&quot;&gt;// two types: Integer and Number, &lt;/span&gt;\n                                      &lt;span class=&quot;hljs-comment&quot;&gt;// so which one shall it be?&lt;/span&gt;\n\n     &lt;span class=&quot;hljs-comment&quot;&gt;// PECS to the rescue!&lt;/span&gt;\n     copyElements2(intList,numList2);  &lt;span class=&quot;hljs-comment&quot;&gt;// possible&lt;/span&gt;\n\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// copy Integer (? extends T) to its supertype (Number is super of Integer)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copyElements2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;? extends T&amp;gt; src, \n                                          Collection&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; T&amp;gt; dest)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(T n : src){\n            dest.add(n);\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The PECS &quot;rule&quot; just ensures that the following is legal:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Consumer: whatever &lt;code&gt;?&lt;/code&gt; is, it can legally &lt;em&gt;refer to&lt;/em&gt; &lt;code&gt;T&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;Producer: whatever &lt;code&gt;?&lt;/code&gt; is, it can legally be &lt;em&gt;referred to by&lt;/em&gt; &lt;code&gt;T&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The typical pairing along the lines of &lt;code&gt;List&amp;lt;? extends T&amp;gt; producer, List&amp;lt;? super T&amp;gt; consumer&lt;/code&gt; is simply ensuring that the compiler can enforce the standard &quot;IS-A&quot; inheritance relationship rules. If we could do so legally, it might be simpler to say &lt;code&gt;&amp;lt;T extends ?&amp;gt;, &amp;lt;? extends T&amp;gt;&lt;/code&gt; (or better yet in Scala, as you can see above, it&apos;s &lt;code&gt;[-T], [+T]&lt;/code&gt;. Unfortunately the best we can do is &lt;code&gt;&amp;lt;? super T&amp;gt;, &amp;lt;? extends T&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;When I first encountered this and broke it down in my head the mechanics made sense but the code itself continued to look confusing to me - I kept thinking &quot;it seems like the bounds shouldn&apos;t need to be inverted like that&quot; - even though I was clear on the above - that it&apos;s simply about guaranteeing compliance with the standard rules of reference.&lt;/p&gt;\n\n&lt;p&gt;What helped me was looking at it using ordinary assignment as an analogy. &lt;/p&gt;\n\n&lt;p&gt;Consider the following (not production ready) toy code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// copies the elements of &apos;producer&apos; into &apos;consumer&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? extends T&amp;gt; producer, List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; T&amp;gt; consumer)&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(T t : producer)\n       consumer.add(t);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Illustrating this in terms of the assignment analogy, for &lt;code&gt;consumer&lt;/code&gt; the &lt;code&gt;?&lt;/code&gt; wildcard (unknown type) is the reference - the &quot;left hand side&quot; of the assignment - and &lt;code&gt;&amp;lt;? super T&amp;gt;&lt;/code&gt; ensures that whatever &lt;code&gt;?&lt;/code&gt; is, &lt;code&gt;T&lt;/code&gt; &quot;IS-A&quot; &lt;code&gt;?&lt;/code&gt; - that &lt;code&gt;T&lt;/code&gt; can be assigned to it, because &lt;code&gt;?&lt;/code&gt; is a super type (or at most the same type) as &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For &lt;code&gt;producer&lt;/code&gt; the concern is the same it&apos;s just inverted: &lt;code&gt;producer&lt;/code&gt;&apos;s &lt;code&gt;?&lt;/code&gt; wildcard (unknown type) is the &lt;em&gt;referent&lt;/em&gt; - the &quot;right hand side&quot; of the assignment - and &lt;code&gt;&amp;lt;? extends T&amp;gt;&lt;/code&gt; ensures that whatever &lt;code&gt;?&lt;/code&gt; is, &lt;code&gt;?&lt;/code&gt; &quot;IS-A&quot; &lt;code&gt;T&lt;/code&gt; - that &lt;em&gt;it&lt;/em&gt; can be assigned &lt;em&gt;to a &lt;code&gt;T&lt;/code&gt;&lt;/em&gt;, because &lt;code&gt;?&lt;/code&gt; is a sub type (or at least the same type) as &lt;code&gt;T&lt;/code&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Covariance&lt;/strong&gt;: accept subtypes&lt;br&gt;\n&lt;strong&gt;Contravariance&lt;/strong&gt;: accept supertypes&lt;/p&gt;\n\n&lt;p&gt;Covariant types are read-only, while contravariant types are write-only.&lt;/p&gt;\n    ","\n&lt;p&gt;Remember this: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Consumer eat &lt;strong&gt;supper&lt;/strong&gt;(super); Producer &lt;strong&gt;extends&lt;/strong&gt; his parent&apos;s factory&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/62752867/4770877&quot;&gt;[Covariance and contravariance]&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Lets take a look at example&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; { }\n&lt;span class=&quot;hljs-comment&quot;&gt;//B is A&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; { }\n&lt;span class=&quot;hljs-comment&quot;&gt;//C is A&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; { }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Generics allows you to work with Types dynamically in a safe way&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//ListA&lt;/span&gt;\nList&amp;lt;A&amp;gt; listA = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;A&amp;gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//add&lt;/span&gt;\nlistA.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;());\nlistA.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;());\nlistA.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//get&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listA.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listA.get(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listA.get(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//ListB&lt;/span&gt;\nList&amp;lt;B&amp;gt; listB = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;B&amp;gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//add&lt;/span&gt;\nlistB.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//get&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listB.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/D4RwI.png&quot; height=&quot;150&quot;&gt;\n&lt;h2&gt;Problem&lt;/h2&gt;\n&lt;p&gt;Since Java&apos;s Collection is a reference type as a result we have next issues:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Problem #1&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//not compiled&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//danger of **adding** non-B objects using listA reference&lt;/span&gt;\nlistA = listB;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/WyHs7.png&quot; height=&quot;150&quot;&gt;\n&lt;p&gt;*Swift&apos;s generic does not have such problem because Collection is &lt;code&gt;Value type&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/a/59219141/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt; therefore a new collection is created&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Problem #2&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//not compiled&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//danger of **getting** non-B objects using listB reference&lt;/span&gt;\nlistB = listA;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/nTEXJ.png&quot; height=&quot;150&quot;&gt;\n&lt;h2&gt;The solution - Generic Wildcards&lt;/h2&gt;\n&lt;p&gt;Wildcard is a reference type feature and it can not be instantiated directly&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Solution #1&lt;/strong&gt;\n&lt;code&gt;&amp;lt;? super A&amp;gt;&lt;/code&gt; aka lower bound aka contravariance aka consumers guarantees that it is operates by A and all superclasses, that is why it is safe to &lt;strong&gt;add&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; A&amp;gt; listSuperA;\nlistSuperA = listA;\nlistSuperA = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Object&amp;gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//add&lt;/span&gt;\nlistSuperA.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;());\nlistSuperA.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//get&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;o0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listSuperA.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/jtcBs.png&quot; height=&quot;150&quot;&gt;\n&lt;p&gt;&lt;strong&gt;Solution #2&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;? extends A&amp;gt;&lt;/code&gt; aka upper bound aka covariance aka producers guarantees that it is operates by A and all subclasses, that is why it is safe to &lt;strong&gt;get&lt;/strong&gt; and cast&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;&amp;gt; listExtendsA;\nlistExtendsA = listA;\nlistExtendsA = listB;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//get&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listExtendsA.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/Y33aY.png&quot; height=&quot;150&quot;&gt;\n    ","\n&lt;p&gt;Using real life example (with some simplifications):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Imagine a freight train with freight cars as analogy to a list.&lt;/li&gt;\n&lt;li&gt;You can &lt;strong&gt;put&lt;/strong&gt; a cargo in a freight car if the cargo has &lt;strong&gt;the same or smaller size&lt;/strong&gt; than the freight car = &lt;code&gt;&amp;lt;? super FreightCarSize&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;You can &lt;strong&gt;unload&lt;/strong&gt; a cargo from a freight car if you have &lt;strong&gt;enough place&lt;/strong&gt; (more than the size of the cargo) in your depot = &lt;code&gt;&amp;lt;? extends DepotSize&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;PECS: Producer extends and Consumer super&lt;/h2&gt;\n&lt;p&gt;Prerequisites for understanding:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Generics and generic wildcards&lt;/li&gt;\n&lt;li&gt;Polymorphism, Subtyping and Supertyping&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;Lets say we have a type which takes a generic type parameter T, for example &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;. When we write code it can be potentially beneficial to also allow subtypes or supertypes of our generic type parameter T. This relaxes the restraints for the user of the API and can make the code more flexible.&lt;/p&gt;\n&lt;p&gt;Let first see what we gain relaxing these restrictions. Lets say we have the following 3 classes:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BaseAnimal&lt;/span&gt;{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BaseAnimal&lt;/span&gt;{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;{};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and we are building a public method which takes a &lt;code&gt;list&amp;lt;Animal&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;If we use a super &lt;code&gt;List&amp;lt;? super Animal&amp;gt;&lt;/code&gt; instead of &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt; we now can pass in more lists to satisfy the requirement of our method. We now can pass in either &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt; or &lt;code&gt;List&amp;lt;BaseAnimal&amp;gt;&lt;/code&gt; even &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;If we use an extends &lt;code&gt;List&amp;lt;? extends Animal&amp;gt;&lt;/code&gt; instead of &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt; we now can pass in more lists to satisfy the requirement of our method. We now can pass in either &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt; or &lt;code&gt;List&amp;lt;Duck&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;However this poses the following 2 restrictions:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;If we use a super type like &lt;code&gt;List&amp;lt;? super Animal&amp;gt;&lt;/code&gt; we don&apos;t know the exact type of &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; it will be. It could be either a list of &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt; or &lt;code&gt;List&amp;lt;BaseAnimal&amp;gt;&lt;/code&gt; or &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;. We have no way of knowing. This means we can never get a value out of this List because we do not know what the type will be. However we can put any data type which is &lt;code&gt;Animal&lt;/code&gt; or extends it into the &lt;code&gt;List&lt;/code&gt;. Because we can only put data into the  &lt;code&gt;List&lt;/code&gt; it is called a &lt;strong&gt;consumer&lt;/strong&gt; of data.&lt;/li&gt;\n&lt;li&gt;If we use an extends &lt;code&gt;List&amp;lt;? extends Animal&amp;gt;&lt;/code&gt; instead of &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt;. We also don&apos;t know what the exact type is. It can either be &lt;code&gt;List&amp;lt;Animal&amp;gt;&lt;/code&gt; or &lt;code&gt;List&amp;lt;Duck&amp;gt;&lt;/code&gt;. We can&apos;t add something to the &lt;code&gt;List&lt;/code&gt; now because we can never certainly know what the type is. However we can pull something out because we always know that anything which comes out of the list is a subtype of &lt;code&gt;Animal&lt;/code&gt;. Because we can only pull data out of the &lt;code&gt;List&lt;/code&gt; is it called a &lt;strong&gt;producer&lt;/strong&gt; of data.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Here is a simple program to illustrate the relaxation of the type restrictions:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Generics&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;Generics&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;generics&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Generics&lt;/span&gt;();\n\n        generics.producerExtends(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Duck&amp;gt;());\n        generics.producerExtends(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Animal&amp;gt;());\n\n        generics.consumerSuper(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Object&amp;gt;());\n        generics.consumerSuper(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Animal&amp;gt;());\n\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//  ? extends T   is an upper bound&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;producerExtends&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? extends Animal&amp;gt; list)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Following are illegal since we never know exactly what type the list will be&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// list.add(new Duck());&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// list.add(new Animal());&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-comment&quot;&gt;// We can read from it since we are always getting an Animal or subclass from it&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// However we can read them as an animal type, so this compiles fine&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (list.size() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-type&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ? extends T   is a lower bound&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;consumerSuper&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; Animal&amp;gt; list)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// It will be either a list of Animal or a superclass of it&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Therefore we can add any type which extends animals&lt;/span&gt;\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Duck&lt;/span&gt;());\n        list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;());\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler won&apos;t allow this it could potentially be a super type of Animal&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Animal animal = list.get(0);&lt;/span&gt;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    "],"164":["\n&lt;p&gt;No REAL easy way to do this. Lots of ideas out there, though.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://blog.shlomoid.com/2008/11/emulating-mysqls-groupconcat-function.html&quot; rel=&quot;noreferrer&quot;&gt;Best one I&apos;ve found&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; table_name, &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(column_names , LEN(column_names )&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; column_names\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; information_schema.columns &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; extern\n&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY\n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; column_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; information_schema.columns &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; intern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; extern.table_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intern.table_name\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n) pre_trimmed (column_names)\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; table_name, column_names;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or a version that works correctly if the data might contain characters such as &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; extern\n     &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; table_name\n         &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   INFORMATION_SCHEMA.COLUMNS)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; table_name,\n       &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(y.column_names, LEN(y.column_names) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; column_names\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   extern\n       &lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; column_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   INFORMATION_SCHEMA.COLUMNS &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; intern\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  extern.table_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intern.table_name\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;), TYPE) x (column_names)\n       &lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; x.column_names.value(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;NVARCHAR(MAX)&apos;&lt;/span&gt;)) y(column_names) \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I may be a bit late to the party but this method works for me and is easier than the COALESCE method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STUFF(\n             (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; Column_Name \n              &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table_Name\n              &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH (&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))\n             , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;SQL Server 2017&lt;/strong&gt; does introduce a new aggregate function&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt790580.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;STRING_AGG ( expression, separator)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Concatenates the values of string expressions and places separator\n  values between them. The separator is not added at the end of string.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The concatenated elements can be ordered by appending &lt;code&gt;WITHIN GROUP (ORDER BY some_expression)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For versions 2005-2016&lt;/strong&gt; I typically use the XML method in the accepted answer.&lt;/p&gt;\n\n&lt;p&gt;This can fail in some circumstances however. e.g. if the data to be concatenated contains &lt;code&gt;CHAR(29)&lt;/code&gt; you see&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;FOR XML could not serialize the data ... because it\n  contains a character (0x001D) which is not allowed in XML.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A more robust method that can deal with all characters would be to use a CLR aggregate. However applying an ordering to the concatenated elements is more difficult with this approach.&lt;/p&gt;\n\n&lt;p&gt;The method of assigning to a variable is &lt;a href=&quot;https://stackoverflow.com/questions/15138593/nvarchar-concatenation-index-nvarcharmax-inexplicable-behavior/15163136#15163136&quot;&gt;not guaranteed&lt;/a&gt; and should be avoided in production code.&lt;/p&gt;\n    ","\n&lt;p&gt;Possibly too late to be of benefit now, but is this not the easiest way to do things?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;     empName, projIDs &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; replace\n                          ((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Surname &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; [data()]\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; project_members\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  empName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a.empName\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; xml path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)), &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, REQUIRED SEPERATOR)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;         project_members a\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;     empName &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; empName\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Have a look at the &lt;a href=&quot;https://github.com/orlando-colamatteo/ms-sql-server-group-concat-sqlclr&quot; rel=&quot;noreferrer&quot;&gt;GROUP_CONCAT&lt;/a&gt; project on Github, I think I does exactly what you are searching for:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This project contains a set of SQLCLR User-defined Aggregate functions (SQLCLR UDAs) that collectively offer similar functionality to the MySQL GROUP_CONCAT function. There are multiple functions to ensure the best performance based on the functionality required...&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;To concatenate all the project manager names from projects that have multiple project managers write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.project_id,a.project_name,Stuff((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; N&lt;span class=&quot;hljs-string&quot;&gt;&apos;/ &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; first_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;last_name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; projects_v \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; a.project_id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;project_id\n &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt;\n XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;),TYPE).&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text()[1]&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;nvarchar(max)&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,N&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n) mgr_names\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; projects_v a\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; a.project_id,a.project_name\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With the below code you have to set PermissionLevel=External on your project properties before you deploy, and change the database to trust external code (be sure to read elsewhere about security risks and alternatives [like certificates]) by running &quot;ALTER DATABASE database_name SET TRUSTWORTHY ON&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;System&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Data.SqlTypes;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.IO;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Serialization;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Serialization.Formatters.Binary;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Microsoft.SqlServer.Server;\n\n[Serializable]\n[SqlUserDefinedAggregate(Format.UserDefined,\nMaxByteSize&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;,\nIsInvariantToDuplicates&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\nIsInvariantToNulls&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\nIsInvariantToOrder&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\nIsNullIfEmpty&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)]\n    public struct CommaDelimit : IBinarySerialize\n{\n\n\n[Serializable]\n private class StringList : List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n { }\n\n private StringList List;\n\n public void Init()\n {\n  this.List &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringList();\n }\n\n public void Accumulate(SqlString &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n {\n  if (&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;value.IsNull)\n   this.Add(value.Value);\n }\n\n private void &lt;span class=&quot;hljs-keyword&quot;&gt;Add&lt;/span&gt;(string &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n {\n  if (&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;this.List.Contains(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;))\n   this.List.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n }\n\n public void &lt;span class=&quot;hljs-keyword&quot;&gt;Merge&lt;/span&gt;(CommaDelimit &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;)\n {\n  foreach (string s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; group.List)\n  {\n   this.Add(s);\n  }\n }\n\n void IBinarySerialize.Read(BinaryReader reader)\n {\n    IFormatter formatter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n    this.List &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (StringList)formatter.Deserialize(reader.BaseStream);\n }\n\n public SqlString Terminate()\n {\n  if (this.List.Count &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SqlString.Null;\n\n  const string Separator &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;, &quot;;\n\n  this.List.Sort();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlString(String.Join(Separator, this.List.ToArray()));\n }\n\n void IBinarySerialize.Write(BinaryWriter writer)\n {\n  IFormatter formatter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n  formatter.Serialize(writer.BaseStream, this.List);\n }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve tested this using a query that looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n dbo.CommaDelimit(X.value) [delimited] \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;-- intentional duplicate&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n ) X \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And yields: A, B, C, D&lt;/p&gt;\n    ","\n&lt;p&gt;Tried these but for my purposes in MS SQL Server 2005 the following was most useful, which I found at &lt;a href=&quot;http://www.xaprb.com/blog/2005/09/28/simulating-the-group-concat-function/&quot; rel=&quot;noreferrer&quot;&gt;xaprb&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; master.dbo.systypes;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; rtrim(&lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;@Mark as you mentioned it was the space character that caused issues for me.&lt;/p&gt;\n    ","\n&lt;p&gt;About J Hardiman&apos;s answer, how about:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; empName, projIDs&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;\n  REPLACE(\n    REPLACE(\n      (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; REPLACE(projID, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-somebody-puts-microsoft-out-of-his-misery-please-&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; [data()] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; project_members &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)), \n      &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, \n      &lt;span class=&quot;hljs-string&quot;&gt;&apos; / &apos;&lt;/span&gt;), \n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;-somebody-puts-microsoft-out-of-his-misery-please-&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) \n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; project_members a &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; empName\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By the way, is the use of &quot;Surname&quot; a typo or am i not understanding a concept here?&lt;/p&gt;\n\n&lt;p&gt;Anyway, thanks a lot guys cuz it saved me quite some time :)&lt;/p&gt;\n    ","\n&lt;h3&gt;2021&lt;/h3&gt;\n&lt;p&gt;@AbdusSalamAzad&apos;s answer is the correct one.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STRING_AGG(my_col, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; my_result &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; my_tbl;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the result is too big, you may get error &quot;&lt;strong&gt;STRING_AGG aggregation result exceeded the limit of 8000 bytes. Use LOB types to avoid result truncation.&lt;/strong&gt;&quot; , which can be fixed by changing the query to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STRING_AGG(&lt;span class=&quot;hljs-keyword&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(max), my_col), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; my_result &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; my_tbl;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;UPDATE 2020: &lt;strong&gt;SQL Server 2016+&lt;/strong&gt; &lt;strong&gt;JSON&lt;/strong&gt; Serialization and De-serialization Examples&lt;/p&gt;\n&lt;p&gt;The data provided by the OP inserted into a temporary table called #project_members&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; if &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt; #project_members;\n&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; #project_members(\n  empName        &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;,\n  projID         &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);\ngo\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; #project_members(empName, projID) &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ANDY&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A100&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ANDY&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B391&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ANDY&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;X010&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;TOM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A100&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;TOM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A510&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to serialize this data into a single JSON string with a nested array containing projID&apos;s&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; empName, (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pm_json.projID \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm_json \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; pm.empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;pm_json.empName \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; json path, root(&lt;span class=&quot;hljs-string&quot;&gt;&apos;projList&apos;&lt;/span&gt;)) projJSON\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; empName\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; json path;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;[\n  {\n    &quot;empName&quot;: &quot;ANDY&quot;,\n    &quot;projJSON&quot;: {\n      &quot;projList&quot;: [\n        { &quot;projID&quot;: &quot;A100&quot; },\n        { &quot;projID&quot;: &quot;B391&quot; },\n        { &quot;projID&quot;: &quot;X010&quot; }\n      ]\n    }\n  },\n  {\n    &quot;empName&quot;: &quot;TOM&quot;,\n    &quot;projJSON&quot;: {\n      &quot;projList&quot;: [\n        { &quot;projID&quot;: &quot;A100&quot; },\n        { &quot;projID&quot;: &quot;A510&quot; }\n      ]\n    }\n  }\n]&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to de-serialize this data from a single JSON string back to it&apos;s original rows and columns&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@json&lt;/span&gt;           nvarchar(max)&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;N&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{&quot;empName&quot;:&quot;ANDY&quot;,&quot;projJSON&quot;:{&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},\n                                         {&quot;projID&quot;:&quot;B391&quot;},{&quot;projID&quot;:&quot;X010&quot;}]}},{&quot;empName&quot;:&quot;TOM&quot;,&quot;projJSON&quot;:\n                                         {&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},{&quot;projID&quot;:&quot;A510&quot;}]}}]&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; oj.empName, noj.projID \n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; openjson(&lt;span class=&quot;hljs-variable&quot;&gt;@json&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (empName        &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n                           projJSON       nvarchar(max) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; json) oj\n     &lt;span class=&quot;hljs-keyword&quot;&gt;cross&lt;/span&gt; apply openjson(oj.projJSON, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$.projList&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (projID    &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)) noj;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;empName projID\nANDY    A100\nANDY    B391\nANDY    X010\nTOM     A100\nTOM     A510\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to persist the unique empName to a table and store the projID&apos;s in a nested JSON array&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; if &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt; #project_members_with_json;\n&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; #project_members_with_json(\n  empName        &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;,\n  projJSON       nvarchar(max) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);\ngo\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; #project_members_with_json(empName, projJSON) \n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; empName, (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pm_json.projID \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm_json \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; pm.empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;pm_json.empName \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; json path, root(&lt;span class=&quot;hljs-string&quot;&gt;&apos;projList&apos;&lt;/span&gt;)) \n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; empName;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;empName projJSON\nANDY    {&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},{&quot;projID&quot;:&quot;B391&quot;},{&quot;projID&quot;:&quot;X010&quot;}]}\nTOM     {&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},{&quot;projID&quot;:&quot;A510&quot;}]}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to de-serialize from a table with unique empName and nested JSON array column containing projID&apos;s&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; wj.empName, oj.projID\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n  #project_members_with_json wj\n &lt;span class=&quot;hljs-keyword&quot;&gt;cross&lt;/span&gt; apply\n  openjson(wj.projJSON, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$.projList&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (projID    &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)) oj;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;empName projID\nANDY    A100\nANDY    B391\nANDY    X010\nTOM     A100\nTOM     A510\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For SQL Server 2017+, use  STRING_AGG() function&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STRING_AGG(Genre, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Result&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Genres;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Sample result:&lt;/p&gt;\n&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;\n&lt;p&gt;Rock,Jazz,Country,Pop,Blues,Hip Hop,Rap,Punk&lt;/p&gt;\n    ","\n&lt;p&gt;For my fellow Googlers out there, here&apos;s a very simple plug-and-play solution that worked for me after struggling with the more complex solutions for a while:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;distinct&lt;/span&gt; empName,\nNewColumnName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;STUFF((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONVERT&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), projID ) \n                     &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; \n                     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;t.empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that I had to convert the ID into a VARCHAR in order to concatenate it as a string. If you don&apos;t have to do that, here&apos;s an even simpler version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;distinct&lt;/span&gt; empName,\nNewColumnName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;STUFF((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; projID\n                     &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; \n                     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;t.empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All credit for this goes to here:\n&lt;a href=&quot;https://social.msdn.microsoft.com/Forums/sqlserver/en-US/9508abc2-46e7-4186-b57f-7f368374e084/replicating-groupconcat-function-of-mysql-in-sql-server?forum=transactsql&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://social.msdn.microsoft.com/Forums/sqlserver/en-US/9508abc2-46e7-4186-b57f-7f368374e084/replicating-groupconcat-function-of-mysql-in-sql-server?forum=transactsql&lt;/a&gt;&lt;/p&gt;\n    "],"165":["\n&lt;p&gt;Well, the only thing that I can tell you about are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot; rel=&quot;noreferrer&quot;&gt;getter&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a syntactic extension introduced by the ECMAScript 5th Edition Specification, the syntax is supported by most modern browsers (including IE9).&lt;/p&gt;\n    ","\n&lt;p&gt;You could do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n   &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n   &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n   &lt;span class=&quot;hljs-attr&quot;&gt;init&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n   }\n}.&lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would be some kind of one time initialization of the object.&lt;/p&gt;\n\n&lt;p&gt;Note that you are actually assigning the return value of &lt;code&gt;init()&lt;/code&gt; to &lt;code&gt;foo&lt;/code&gt;, therefore you have to &lt;code&gt;return this&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The obvious, simple answer is missing, so for completeness:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;But &lt;em&gt;is&lt;/em&gt; there any way to have values in an object literal&apos;s properties depend on other properties declared earlier?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No. All of the solutions here defer it until after the object is created (in various ways) and then assign the third property. The &lt;em&gt;simplest&lt;/em&gt; way is to just do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n};\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All others are just more indirect ways to do the same thing. (Felix&apos;s is particularly clever, but requires creating and destroying a temporary function, adding complexity; and either leaves an extra property on the object or [if you &lt;code&gt;delete&lt;/code&gt; that property] &lt;a href=&quot;http://jsperf.com/test-dictionary-mode&quot;&gt;impacts the performance&lt;/a&gt; of subsequent property accesses on that object.)&lt;/p&gt;\n\n&lt;p&gt;If you need it to all be within one expression, you can do that without the temporary property:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n    o.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or of course, if you need to do this more than once:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;buildFoo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: b};\n    o.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then where you need to use it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-title function_&quot;&gt;buildFoo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simply instantiate an anonymous function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Now in ES6 you can create lazy cached properties. On first use the property evaluates once to become a normal static property. Result: The second time the math function overhead is skipped. &lt;/p&gt;\n\n&lt;p&gt;The magic is in the getter.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the arrow getter &lt;code&gt;this&lt;/code&gt; picks up the &lt;a href=&quot;http://eddmann.com/posts/arrow-functions-lexical-this-scoping-in-javascript/&quot; rel=&quot;noreferrer&quot;&gt;surrounding lexical scope&lt;/a&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;foo     &lt;span class=&quot;hljs-comment&quot;&gt;// {a: 5, b: 6}&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;\nfoo     &lt;span class=&quot;hljs-comment&quot;&gt;// {a: 5, b: 6 , c: 11}  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Some closure should deal with this;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = a + b;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a,\n        &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: b,\n        &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: c\n    }\n}();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All the variables declared within &lt;code&gt;foo&lt;/code&gt; are private to &lt;code&gt;foo&lt;/code&gt;, as you would expect with any function declaration and because they are all in scope, they all have access to each other without needing to refer to &lt;code&gt;this&lt;/code&gt;, just as you would expect with a function.  The difference is that this function returns an object that exposes the private variables and assigns that object to &lt;code&gt;foo&lt;/code&gt;.  In the end, you return just the interface you want to expose as an object with the &lt;code&gt;return {}&lt;/code&gt; statement.&lt;/p&gt;\n\n&lt;p&gt;The function is then executed at the end with the &lt;code&gt;()&lt;/code&gt; which causes the entire foo object to be evaluated, all the variables within instantiated and the return object added as properties of &lt;code&gt;foo()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You could do it like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a, b\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: b = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: a + b\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That method has proven useful to me when I had to refer to the object that a function was originally declared on. The following is a minimal example of how I used it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createMyObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, self\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: self = {\n            &lt;span class=&quot;hljs-attr&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(count++)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By defining self as the object that contains the print function you allow the function to refer to that object. This means you will not have to &apos;bind&apos; the print function to an object if you need to pass it somewhere else. &lt;/p&gt;\n\n&lt;p&gt;If you would, instead, use &lt;code&gt;this&lt;/code&gt; as illustrated below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createMyObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(count++)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the following code will log 0, 1, 2 and then give an error&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;hljs-title function_&quot;&gt;createMyObject&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; log = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;\no.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// this refers to the o.a object so the chaining works&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// this refers to the window object so the chaining fails!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using the self method you guarantee that print will always return the same object regardless of the context in which the function is ran. The code above will run just fine and log 0, 1, 2 and 3 when using the self version of &lt;code&gt;createMyObject()&lt;/code&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;For completion, in ES6 we&apos;ve got classes (supported at the time of writing this only by latest browsers, but available in Babel, TypeScript and other transpilers)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  }  \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;just for the sake of thought - place object&apos;s properties out of a timeline:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;}\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo.&lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;there are better answers above too&lt;/em&gt;. This is how I modified example code you questioned with.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;},\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;},\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;}\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// console.log(foo.c);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can do it using the module pattern. Just like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; that = {};\n\n  that.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n  that.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n\n  that.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; that.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + that.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; that;\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooObject = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\nfooObject.&lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//13&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this pattern you can instantiate several foo objects according to your need.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/jPNxY/1/&quot;&gt;http://jsfiddle.net/jPNxY/1/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There are several ways to accomplish this; this is what I would use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n &lt;span class=&quot;hljs-comment&quot;&gt;// return this; // commented out because this happens automatically&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;();\no.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// === 6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Creating new function on your object literal and invoking a constructor seems a radical departure from the original problem, and it&apos;s unnecessary.  &lt;/p&gt;\n\n&lt;p&gt;You cannot reference a sibling property during object literal initialization. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: a + b } &lt;span class=&quot;hljs-comment&quot;&gt;// not defined &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: y.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + y.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// not defined &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The simplest solution for computed properties follows (no heap, no functions, no constructor): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n\nx.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = x.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + x.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// apply computed property&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The other answers posted here are better but here&apos;s an alternative that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sets the value at initialization (not a getter, or derived, etc)&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t require any type of &lt;code&gt;init()&lt;/code&gt; or code outside of the object literal&lt;/li&gt;\n&lt;li&gt;Is an object literal and not a factory function or other object creation mechanic.&lt;/li&gt;\n&lt;li&gt;Shouldn&apos;t have any performance impact (except at initialization)    &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Self-executing anonymous functions and window storage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;:(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;temp&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;qwert&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;temp&lt;/span&gt;;\n    })(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;temp&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The order is &lt;a href=&quot;https://stackoverflow.com/a/17438220/728393&quot;&gt;guaranteed&lt;/a&gt; (&lt;code&gt;bar&lt;/code&gt; before &lt;code&gt;baz&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;It pollutes &lt;code&gt;window&lt;/code&gt; of course, but I can&apos;t imagine someone writing a script that requires &lt;code&gt;window.temp&lt;/code&gt; to be persistent. Maybe &lt;code&gt;tempMyApp&lt;/code&gt; if you&apos;re paranoid.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also ugly but occasionally useful. An example is when you are using an API with rigid initialization conditions and don&apos;t feel like refactoring so the scoping is correct.&lt;/p&gt;\n\n&lt;p&gt;And it&apos;s dry, of course.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the following code as alternative, and it works. And the variable can be array too. (@ Fausto R.)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;],\n  &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(x);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;;\n  }\n};\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;e&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// foo.d = [10,20,30,40]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; property works great, and you can also use a binded closure for &quot;expensive&quot; functions that should only run once &lt;em&gt;(this only works with &lt;code&gt;var&lt;/code&gt;, not with &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; info = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;: (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;databaseLookup&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;)\n  }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(info)(),\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fullName&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;computing fullName...&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.first}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.last}&lt;/span&gt;`&lt;/span&gt;\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;555-22-9999&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;First&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Last&apos;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;databaseLookup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fetching address from remote server (runs once)...&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`22 Main St, City, Country`&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(info.&lt;span class=&quot;hljs-property&quot;&gt;fullName&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(info.&lt;span class=&quot;hljs-property&quot;&gt;fullName&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; info.&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;)\n})()&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The key to all this is &lt;strong&gt;SCOPE&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You need to encapsulate the &quot;parent&quot; (parent object) of the property you want to define as it&apos;s own instantiated object, and then you can make references to sibling properties using the key word &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s very, very &lt;strong&gt;important&lt;/strong&gt; to remember that if you refer to &lt;code&gt;this&lt;/code&gt; without first so doing, then &lt;code&gt;this&lt;/code&gt; will refer to the outer scope... which will be the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;//this is really window.x&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;//assign value&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 9 (not 1 as you might expect, b/c *this* refers `window` object)&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if your object is written as a function which returns an object, AND you use ES6 object-attribute &apos;methods&apos;, then it&apos;s possible:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;state&lt;/span&gt;) =&amp;gt; ({\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-title function_&quot;&gt;oneThing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    state.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = state.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-title function_&quot;&gt;anotherThing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;oneThing&lt;/span&gt;();\n    state.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = state.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;\n  },\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; store = {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; root = &lt;span class=&quot;hljs-title function_&quot;&gt;module&lt;/span&gt;(store);\n\nroot.&lt;span class=&quot;hljs-title function_&quot;&gt;oneThing&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(store);\n\nroot.&lt;span class=&quot;hljs-title function_&quot;&gt;anotherThing&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(store);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(root, &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(root), root.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a neat ES6 way:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({\n    ...o,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;\n  }))({\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n  });\n  \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;I use it to do something like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; constants = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;freeze&lt;/span&gt;(\n  (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({\n    ..._,\n    &lt;span class=&quot;hljs-attr&quot;&gt;flag_data&lt;/span&gt;: {\n      [_.&lt;span class=&quot;hljs-property&quot;&gt;a_flag&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;,\n      [_.&lt;span class=&quot;hljs-property&quot;&gt;b_flag&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;,\n      [_.&lt;span class=&quot;hljs-property&quot;&gt;c_flag&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;oof&apos;&lt;/span&gt;\n    }\n  }))({\n    &lt;span class=&quot;hljs-attr&quot;&gt;a_flag&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b_flag&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c_flag&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,\n  })\n);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(constants.&lt;span class=&quot;hljs-property&quot;&gt;flag_data&lt;/span&gt;[constants.&lt;span class=&quot;hljs-property&quot;&gt;b_flag&lt;/span&gt;]);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just for everyone&apos;s amusement:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (                        &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;This={\n    a: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    b: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,                          }&lt;/span&gt;)=&amp;gt;&lt;/span&gt;({...&lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;             }))(\n);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;How about this  solution this will work with nested objects with array as well&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;      &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assignOwnProVal&lt;/span&gt;\n     = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;to,&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;){ \n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj,string&lt;/span&gt;){ \n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = string.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;); \n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = obj[parts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]; \n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(parts[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]){ \n                    parts.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newString = parts.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;); \n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(newObj,newString); \n                } \n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newObj; \n            } \n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[to] = &lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;);\n     } \n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { name : &lt;span class=&quot;hljs-string&quot;&gt;&apos;Gaurav&apos;&lt;/span&gt;, temp : \n                  {id : [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;:\n                        {&lt;span class=&quot;hljs-attr&quot;&gt;street&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;Brunswick&apos;&lt;/span&gt;}} } \n     obj.&lt;span class=&quot;hljs-title function_&quot;&gt;assignOwnProVal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;street&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;temp.city.street&apos;&lt;/span&gt;); \n     obj.&lt;span class=&quot;hljs-title function_&quot;&gt;assignOwnProVal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myid&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;temp.id.1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Throwing in an option since I didn&apos;t see this exact scenario covered.  If you &lt;em&gt;don&apos;t&lt;/em&gt; want &lt;code&gt;c&lt;/code&gt; updated when &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; update, then an ES6 IIFE works well.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n    a,\n    b,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: a + b\n}))(a,b);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For my needs, I have an object that relates to an array which will end up being used in a loop, so I only want to calculate some common setup once, so this is what I have:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; processingState = (&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;indexOfSelectedTier&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n    selectedTier,\n    indexOfSelectedTier,\n    &lt;span class=&quot;hljs-attr&quot;&gt;hasUpperTierSelection&lt;/span&gt;: tiers.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,indexOfSelectedTier)\n                         .&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt; =&amp;gt;&lt;/span&gt; pendingSelectedFiltersState[t.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;]),\n}))(tiers.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(selectedTier));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since I need to set a property for &lt;code&gt;indexOfSelectedTier&lt;/code&gt; and I need to use that value when setting the &lt;code&gt;hasUpperTierSelection&lt;/code&gt; property, I calculate that value first and pass it in as a param to the IIFE&lt;/p&gt;\n    ","\n&lt;p&gt;Here is an example of behavior of &apos;this&apos; in the object.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;external&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;global.prop&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; that = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;internal&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop1&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;//external&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//internal&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;log1&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//external&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;log2&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//&apos;global.prop&apos; in node; &apos;external&apos; in chrome&lt;/span&gt;\n    }()\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;log3&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//internal&lt;/span&gt;\n    })()\n  },\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Other approach would be to declare the object first before assigning properties into it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {};\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// Does work&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;getSum&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// foo.getSum() === 22&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With that, you can use the object variable name to access the already assigned values.&lt;br&gt;\nBest for &lt;code&gt;config.js&lt;/code&gt; file.&lt;/p&gt;\n    ","\n&lt;h2&gt;Two lazy solutions&lt;/h2&gt;\n&lt;p&gt;There are already excellent answers here and I&apos;m no expert on this, but I am an expert in being lazy and to my expert eye these answers don&apos;t seem lazy enough.&lt;/p&gt;\n&lt;h3&gt;First: return object from anonymous function&lt;/h3&gt;\n&lt;p&gt;A very slight variation from &lt;a href=&quot;https://stackoverflow.com/a/10766107/4621141&quot;&gt;T.J. Crowder&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17421508/4621141&quot;&gt;Henry Wrightson&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/14206385/4621141&quot;&gt;Rafael Rocha&lt;/a&gt; answers:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Paste in your original object&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  };\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// Use their properties&lt;/span&gt;\n  foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Do whatever else you want&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Finally, return object&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo;\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The slight advantage here is just pasting your original object as it was, without worrying about arguments etc. (IMHO the wrapper function becomes quite transparent this way).&lt;/p&gt;\n&lt;h3&gt;Second: using setTimeout&lt;/h3&gt;\n&lt;p&gt;This here may work, if you don&apos;t need &lt;code&gt;foo.c&lt;/code&gt; right away:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; foo.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = foo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + foo.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Though, at first, foo.c will be the integer returned by setTimeout&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo);\n&lt;span class=&quot;hljs-comment&quot;&gt;// But if this isn&apos;t an issue, the value will be updated when time comes in the event loop&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Ok I came up with another solution. Here I want to initialize an object representing the amount of milliseconds for each unit of time.\nIt turns out enum in typescript can not be used in my case, so I declared multiple variables that I assign to an object as follow:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;SECOND&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;MINUTE&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;SECOND&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;HOUR&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;MINUTE&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;DAY&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;HOUR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;WEEK&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; * &lt;span class=&quot;hljs-variable constant_&quot;&gt;DAY&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TimeInMS&lt;/span&gt; = {\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;SECOND&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;MINUTE&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;HOUR&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;DAY&lt;/span&gt;,\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;WEEK&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The drawbacks of this method are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;variables are defined as constants, even if we dont need them. Thus it needs useless memory.&lt;/li&gt;\n&lt;li&gt;each value of the object must be declared as standalone variable&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This solution uses Typescript (you can use the vanilla JS which TS compiles to if needed)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;asd&lt;/span&gt; {\n    def = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n        ads= &lt;span class=&quot;hljs-string&quot;&gt;&apos;asd&apos;&lt;/span&gt;;\n        qwe= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ads&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this method is just to check/test this solution &lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;def&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;qwe&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// these two lines are just to check&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asd&lt;/span&gt;();\ninstance.&lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here were using class expressions to get the nested object literal interface we&apos;d want. This is the next best thing IMHO to being able to reference the properties of an object during creation.&lt;/p&gt;\n\n&lt;p&gt;Main thing to note is while using this solution, you have exact same interface as you&apos;d have had from an object literal. And the syntax is pretty close to an object literal itself (vs using a function, etc).&lt;/p&gt;\n\n&lt;h2&gt;Compare the following&lt;/h2&gt;\n\n&lt;h3&gt;Solution I&apos;ve proposed&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;asd&lt;/span&gt; {\n    def = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n        ads= &lt;span class=&quot;hljs-string&quot;&gt;&apos;asd&apos;&lt;/span&gt;;\n        qwe= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ads&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Solution if object literals would&apos;ve sufficed&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; asd = {\n    def : {\n        &lt;span class=&quot;hljs-attr&quot;&gt;ads&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;asd&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;qwe&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ads&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;, &lt;span class=&quot;hljs-comment&quot;&gt;//ILLEGAL CODE; just to show ideal scenario&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Another example&lt;/h2&gt;\n\n&lt;p&gt;Here in this class, you can combine multiple relative path among themselves, which is not possible with an object literal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CONSTANT&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; readonly &lt;span class=&quot;hljs-variable constant_&quot;&gt;PATH&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;/** private visibility because these relative paths don&apos;t make sense for direct access, they&apos;re only useful to path class\n         *\n         */&lt;/span&gt;\n        private readonly &lt;span class=&quot;hljs-variable constant_&quot;&gt;RELATIVE&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;AFTER_EFFECTS_TEMPLATE_BINARY_VERSION&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\assets\\\\aep-template\\\\src\\\\video-template.aep&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;AFTER_EFFECTS_TEMPLATE_XML_VERSION&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\assets\\\\aep-template\\\\intermediates\\\\video-template.aepx&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;RELATIVE_PATH_TO_AFTER_EFFECTS&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\Adobe\\\\Adobe After Effects CC 2018\\\\Support Files\\\\AfterFX.exe&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;OUTPUT_DIRECTORY_NAME&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\output&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;INPUT_DIRECTORY_NAME&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\input&apos;&lt;/span&gt;;\n            readonly &lt;span class=&quot;hljs-attr&quot;&gt;ASSETS_DIRECTORY_NAME&lt;/span&gt;: fs.&lt;span class=&quot;hljs-property&quot;&gt;PathLike&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\assets&apos;&lt;/span&gt;;\n        };\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to use native JS, the other answers provide good solutions.&lt;/p&gt;\n\n&lt;p&gt;But if you&apos;re willing to write self-referencing objects like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{ \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: ...,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;${this.a + this.a}&quot;&lt;/span&gt;,\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wrote an npm library called &lt;a href=&quot;https://github.com/alex-e-leon/self-referenced-object&quot; rel=&quot;nofollow noreferrer&quot;&gt;self-referenced-object&lt;/a&gt; that supports that syntax and returns a native object.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secreta&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secretb&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secreta&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;secretb&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is almost identical to @slicedtoad&apos;s answer, but doesn&apos;t use a function.&lt;/p&gt;\n    "]},"page":"90","randomQuestions":[{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","slug":"how-does-the-windows-command-interpreter-(cmd.exe)-parse-scripts-1657387731560"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824"},{"title":"How should I use servlets and Ajax?","slug":"how-should-i-use-servlets-and-ajax-1657385492684"},{"title":"How to make a great R reproducible example","slug":"how-to-make-a-great-r-reproducible-example-1657384198173"},{"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760"},{"title":"Why are global variables evil? [closed]","slug":"why-are-global-variables-evil-closed-1657388260006"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"Why don't flex items shrink past content size?","slug":"why-don't-flex-items-shrink-past-content-size-1657384687282"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"How to sum a variable by group","slug":"how-to-sum-a-variable-by-group-1657384838148"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"Reference: What is variable scope, which variables are accessible from where and what are \"undefined variable\" errors?","slug":"reference:-what-is-variable-scope-which-variables-are-accessible-from-where-and-what-are-\"undefined-variable\"-errors-1657384644697"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"What does enctype='multipart/form-data' mean?","slug":"what-does-enctype'multipartform-data'-mean-1657388229352"},{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"Web-scraping JavaScript page with Python","slug":"web-scraping-javascript-page-with-python-1657388240875"},{"title":"How can I read inputs as numbers?","slug":"how-can-i-read-inputs-as-numbers-1657384503324"}]},"__N_SSG":true}