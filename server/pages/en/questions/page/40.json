{"pageProps":{"data":{"count":610,"rows":[{"id":415,"title":"How do I Pandas group-by to get sum?","slug":"how-do-i-pandas-group-by-to-get-sum-1657387908708","postType":"QUESTION","createdAt":"2022-07-09T17:31:48.000Z","updatedAt":"2022-07-09T17:31:48.000Z","tags":[]},{"id":414,"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461","postType":"QUESTION","createdAt":"2022-07-09T17:31:45.000Z","updatedAt":"2022-07-09T17:31:45.000Z","tags":[{"id":2202,"name":"smart-pointers","slug":"smart-pointers","createdAt":"2022-07-09T17:31:45.000Z","updatedAt":"2022-07-09T17:31:45.000Z","Questions_Tags":{"questionId":414,"tagId":2202}}]},{"id":413,"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231","postType":"QUESTION","createdAt":"2022-07-09T17:31:42.000Z","updatedAt":"2022-07-09T17:31:42.000Z","tags":[]},{"id":412,"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083","postType":"QUESTION","createdAt":"2022-07-09T17:31:39.000Z","updatedAt":"2022-07-09T17:31:39.000Z","tags":[]},{"id":411,"title":"Split array into chunks","slug":"split-array-into-chunks-1657387896420","postType":"QUESTION","createdAt":"2022-07-09T17:31:36.000Z","updatedAt":"2022-07-09T17:31:36.000Z","tags":[]}]},"answers":{"411":["\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;array.slice()&lt;/code&gt;&lt;/a&gt; method can extract a slice from the beginning, middle, or end of an array for whatever purposes you require, without changing the original array.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunkSize = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += chunkSize) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunk = array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + chunkSize);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do whatever&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The last &lt;code&gt;chunk&lt;/code&gt; may be smaller than &lt;code&gt;chunkSize&lt;/code&gt;. For example when given an &lt;code&gt;array&lt;/code&gt; of 12 elements the first chunk will have 10 elements, the second chunk only has 2.&lt;/p&gt;\n&lt;p&gt;Note that a &lt;code&gt;chunkSize&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; will cause an infinite loop.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a ES6 version using reduce&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; perChunk = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// items per chunk    &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; inputArray = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = inputArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultArray, item, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunkIndex = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(index/perChunk)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!resultArray[chunkIndex]) {\n    resultArray[chunkIndex] = [] &lt;span class=&quot;hljs-comment&quot;&gt;// start a new chunk&lt;/span&gt;\n  }\n\n  resultArray[chunkIndex].&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(item)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; resultArray\n}, [])\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result); &lt;span class=&quot;hljs-comment&quot;&gt;// result: [[&apos;a&apos;,&apos;b&apos;], [&apos;c&apos;,&apos;d&apos;], [&apos;e&apos;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;And you&apos;re ready to chain further map/reduce transformations.\nYour input array is left intact&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;If you prefer a shorter but less readable version, you can sprinkle some &lt;code&gt;concat&lt;/code&gt; into the mix for the same end result:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;inputArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;all,one,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ch = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(i/perChunk); \n   all[ch] = [].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;((all[ch]||[]),one); \n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; all\n}, [])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can use remainder operator to put consecutive items into different chunks:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ch = (i % perChunk); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Modified from an answer by dbaseman: &lt;a href=&quot;https://stackoverflow.com/a/10456344/711085&quot;&gt;https://stackoverflow.com/a/10456344/711085&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chunk_inefficient&apos;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;chunkSize&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [].&lt;span class=&quot;hljs-property&quot;&gt;concat&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;([],\n      array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem, i&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i % chunkSize ? [] : [array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + chunkSize)];\n      })\n    );\n  }\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;chunk_inefficient&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n)\n&lt;span class=&quot;hljs-comment&quot;&gt;// [[1, 2, 3], [4, 5, 6], [7]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;minor addendum&lt;/em&gt;:&lt;/p&gt;\n\n&lt;p&gt;I should point out that the above is a not-that-elegant (in my mind) workaround to use &lt;code&gt;Array.map&lt;/code&gt;. It basically does the following, where ~ is concatenation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]]~[]~[]~[] ~ [[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]]~[]~[]~[] ~ [[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It has the same asymptotic running time as the method below, but perhaps a worse constant factor due to building empty lists. One could rewrite this as follows (mostly the same as Blazemonger&apos;s method, which is why I did not originally submit this answer):&lt;/p&gt;\n\n&lt;p&gt;More efficient method:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// refresh page if experimenting and you already defined Array.prototype.chunk&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chunk&apos;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;chunkSize&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; R = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += chunkSize)\n      R.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + chunkSize));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; R;\n  }\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;My preferred way nowadays is the above, or one of the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;range&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Array.range(5) --&amp;gt; [0,1,2,3,4]&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(n)).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; i)\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chunk&apos;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ACTUAL CODE FOR CHUNKING ARRAY:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n)).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*n,i*n+n));\n\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Demo:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) );\n[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or if you don&apos;t want an Array.range function, it&apos;s actually just a one-liner (excluding the fluff):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ceil = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ceil&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chunk&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n)).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*n,i*n+n));\n}});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chunk&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n)), &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*n,i*n+n));\n}});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try to avoid mucking with native prototypes, including &lt;code&gt;Array.prototype&lt;/code&gt;, if you don&apos;t know who will be consuming your code (3rd parties, coworkers, yourself at a later date, etc.).&lt;/p&gt;\n&lt;p&gt;There are ways to safely extend prototypes (but not in all browsers) and there are ways to safely consume objects created from extended prototypes, but a better rule of thumb is to follow the &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot; rel=&quot;noreferrer&quot;&gt;Principle of Least Surprise&lt;/a&gt; and avoid these practices altogether.&lt;/p&gt;\n&lt;p&gt;If you have some time, watch Andrew Dupont&apos;s JSConf 2011 talk, &lt;a href=&quot;https://www.youtube.com/watch?v=xL3xCO7CLNM&quot; rel=&quot;noreferrer&quot;&gt;&quot;Everything is Permitted: Extending Built-ins&quot;&lt;/a&gt;, for a good discussion about this topic.&lt;/p&gt;\n&lt;p&gt;But back to the question, while the solutions above will work, they are overly complex and requiring unnecessary computational overhead. Here is my solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt; (arr, len) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chunks = [],\n      i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n      n = arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; n) {\n    chunks.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i += len));\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; chunks;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Optionally, you can do the following to avoid cluttering the global namespace:&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;chunk&lt;/span&gt; = chunk;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Using generators&lt;/h1&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;chunks&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, n&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += n) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + n);\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; someArray = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([...&lt;span class=&quot;hljs-title function_&quot;&gt;chunks&lt;/span&gt;(someArray, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]) &lt;span class=&quot;hljs-comment&quot;&gt;// [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I tested the different answers into jsperf.com. The result is available there: &lt;a href=&quot;https://web.archive.org/web/20150909134228/https://jsperf.com/chunk-mtds&quot; rel=&quot;noreferrer&quot;&gt;https://web.archive.org/web/20150909134228/https://jsperf.com/chunk-mtds&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;And the fastest function (and that works from IE8) is this one:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, chunkSize&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (chunkSize &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid chunk size&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; R = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,len=arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;len; i+=chunkSize)\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i,i+chunkSize));\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; R;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One-liner in ECMA 6&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [list,chunkSize] = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\n[...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(list.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / chunkSize))].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; list.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,chunkSize))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;d prefer to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot; rel=&quot;noreferrer&quot;&gt;splice&lt;/a&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chunks = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, size&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n    results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, size));\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Nowadays you can use lodash&apos; chunk function to split the array into smaller arrays &lt;a href=&quot;https://lodash.com/docs#chunk&quot;&gt;https://lodash.com/docs#chunk&lt;/a&gt; No need to fiddle with the loops anymore!&lt;/p&gt;\n    ","\n&lt;p&gt;Old question: New answer! I actually was working with an answer from this question and had a friend improve on it! So here it is: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;chunk&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt; n &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( !&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n ) ].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(n).&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(n) );\n};\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&amp;gt; [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There have been many answers but this is what I use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;arr, size&lt;/span&gt;) =&amp;gt;\n  arr\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc, _, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n      (i % size)\n        ? acc\n        : [...acc, arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + size)]\n    , [])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// USAGE&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]\n&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(numbers, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;First, check for a remainder when dividing the index by the chunk size.&lt;/p&gt;\n\n&lt;p&gt;If there is a remainder then just return the accumulator array.&lt;/p&gt;\n\n&lt;p&gt;If there is no remainder then the index is divisible by the chunk size, so take a slice from the original array (starting at the current index) and add it to the accumulator array.&lt;/p&gt;\n\n&lt;p&gt;So, the returned accumulator array for each iteration of reduce looks something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 0: [[1, 2, 3]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1: [[1, 2, 3]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2: [[1, 2, 3]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3: [[1, 2, 3], [4, 5, 6]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 4: [[1, 2, 3], [4, 5, 6]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 5: [[1, 2, 3], [4, 5, 6]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 6: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 7: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 8: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 9: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One more solution using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;array, size&lt;/span&gt;) =&amp;gt;\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc, _, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i % size === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) acc.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + size))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; acc\n  }, [])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Usage:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunked = &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(numbers, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chunked)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;This solution is very similar to the &lt;a href=&quot;https://stackoverflow.com/a/50766024/1079869&quot;&gt;solution by Steve Holgado&lt;/a&gt;. However, because this solution doesn&apos;t utilize array spreading and doesn&apos;t create new arrays in the reducer function, it&apos;s faster (see &lt;a href=&quot;https://jsperf.com/array-chunking-using-reduce&quot; rel=&quot;noreferrer&quot;&gt;jsPerf test&lt;/a&gt;) and subjectively more readable (simpler syntax) than the other solution.&lt;/p&gt;\n&lt;p&gt;At every &lt;em&gt;nth&lt;/em&gt; iteration (where &lt;em&gt;n&lt;/em&gt; = &lt;code&gt;size&lt;/code&gt;; starting at the first iteration), the accumulator array (&lt;code&gt;acc&lt;/code&gt;) is appended with a chunk of the array (&lt;code&gt;array.slice(i, i + size)&lt;/code&gt;) and then returned. At other iterations, the accumulator array is returned as-is.&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;size&lt;/code&gt; is zero, the method returns an empty array. If &lt;code&gt;size&lt;/code&gt; is negative, the method returns broken results. So, if needed in your case, you may want to do something about negative or non-positive &lt;code&gt;size&lt;/code&gt; values.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;If speed is important in your case, a simple &lt;code&gt;for&lt;/code&gt; loop would be faster than using &lt;code&gt;reduce()&lt;/code&gt; (see the &lt;a href=&quot;https://jsperf.com/array-chunking-using-reduce&quot; rel=&quot;noreferrer&quot;&gt;jsPerf test&lt;/a&gt;), and some may find this style more readable as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, size&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// This prevents infinite loops&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (size &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Size must be positive&apos;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += size) {\n    result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, i + size))\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think this a nice recursive solution with ES6 syntax:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunk = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, size&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [];\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; head = array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, size);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; tail = array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(size);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [head, ...&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(tail, size)];\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Ok, let&apos;s start with a fairly tight one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,(arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;+n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)/n|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).\n           &lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c,i&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(n*i,n*i+n); });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is used like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then we have this tight reducer function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunker&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, c, i&lt;/span&gt;) {\n    (p[i/&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = p[i/&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] || []).&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(c);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is used like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(chunker.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),[]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since a kitten dies when we bind &lt;code&gt;this&lt;/code&gt; to a number, we can do manual currying like this instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Fluent alternative API without prototype hacks.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunker&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, c, i&lt;/span&gt;) {\n       (p[i/n|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = p[i/n|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] || []).&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(c);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p;\n   };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is used like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunker&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),[]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the still pretty tight function which does it all in one go:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, cur, i&lt;/span&gt;) {\n        (p[i/n|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = p[i/n|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] || []).&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(cur);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p;\n    },[]);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;ONE-LINER&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,n&lt;/span&gt;)=&amp;gt;[...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n))].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(n*i,n+n*i));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;For TypeScript&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunk = &amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: T[], &lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;: number): T[][] =&amp;gt;\n  [...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / size))].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(size * i, size + size * i)\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;DEMO&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,n&lt;/span&gt;)=&amp;gt;[...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n))].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(n*i,n+n*i));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Chunk By Number Of Groups&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;part&lt;/span&gt;=(&lt;span class=&quot;hljs-params&quot;&gt;a,n&lt;/span&gt;)=&amp;gt;[...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(n)].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n),(i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n)));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;For TypeScript&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; part = &amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: T[], &lt;span class=&quot;hljs-attr&quot;&gt;n&lt;/span&gt;: number): T[][] =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / n);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(n)].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i * b, (i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * b));\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;DEMO&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;part&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a, n&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / n);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(n)].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i * b, (i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * b));\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;part&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))+&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;part&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I aimed at creating a simple non-mutating solution in pure ES6. Peculiarities in javascript make it necessary to fill the empty array before mapping :-(&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, l&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / l)).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, n&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(n*l, n*l + l)); \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This version with recursion seem simpler and more compelling:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, l&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l)].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(l), l)); \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The ridiculously weak array functions of ES6 makes for good puzzles :-)&lt;/p&gt;\n    ","\n&lt;p&gt;Created a npm package for this &lt;a href=&quot;https://www.npmjs.com/package/array.chunk&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.npmjs.com/package/array.chunk&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += size) {\n  result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i, size + i));\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot; rel=&quot;nofollow noreferrer&quot;&gt;TypedArray&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += size) {\n  result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;subarray&lt;/span&gt;(i, size + i));\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;Array.prototype.splice()&lt;/code&gt; and splice it until the array has element.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;chunk&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;size&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = [];\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n        result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, size));\n    }\n        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Update&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;Array.prototype.splice()&lt;/code&gt; populates the original array and after performing the &lt;code&gt;chunk()&lt;/code&gt; the original array (&lt;code&gt;arr&lt;/code&gt;) becomes &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So if you want to keep the original array untouched, then copy and keep the &lt;code&gt;arr&lt;/code&gt; data into another array and do the same thing.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;chunk&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;size&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = [...&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;];  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = [];\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n        result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(data.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, size));\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;chunked:&apos;&lt;/span&gt;, arr.&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;original&apos;&lt;/span&gt;, arr);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;P.S: Thanks to @mts-knn for mentioning the matter.&lt;/p&gt;\n    ","\n&lt;p&gt;The following ES2015 approach works without having to define a function and directly on anonymous arrays (example with chunk size 2):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i, all&lt;/span&gt;) =&amp;gt;&lt;/span&gt; all.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;=&amp;gt;&lt;/span&gt;x.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to define a function for this, you could do it as follows (improving on K._&apos;s comment on &lt;a href=&quot;https://stackoverflow.com/a/8495740/1460043&quot;&gt;Blazemonger&apos;s answer&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;array_chunks&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;array, chunk_size&lt;/span&gt;) =&amp;gt; array\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i, all&lt;/span&gt;) =&amp;gt;&lt;/span&gt; all.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*chunk_size, (i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*chunk_size))\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you use EcmaScript version &amp;gt;= 5.1, you can implement a functional version of &lt;code&gt;chunk()&lt;/code&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot; rel=&quot;nofollow noreferrer&quot;&gt;array.reduce()&lt;/a&gt; that has O(N) complexity:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;chunkSize, array&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;previous, current&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chunk;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (previous.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || \n                previous[previous.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === chunkSize) {\n            chunk = [];   &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n            previous.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(chunk);   &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            chunk = previous[previous.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;// 3&lt;/span&gt;\n        }\n        chunk.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(current);   &lt;span class=&quot;hljs-comment&quot;&gt;// 4&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; previous;   &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n    }, []);   &lt;span class=&quot;hljs-comment&quot;&gt;// 6&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]));\n&lt;span class=&quot;hljs-comment&quot;&gt;// prints [ [ &apos;a&apos;, &apos;b&apos; ], [ &apos;c&apos;, &apos;d&apos; ], [ &apos;e&apos; ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Explanation of each &lt;code&gt;// nbr&lt;/code&gt; above:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Create a new chunk if the previous value, i.e. the previously returned array of chunks, is empty or if the last previous chunk has &lt;code&gt;chunkSize&lt;/code&gt; items&lt;/li&gt;\n&lt;li&gt;Add the new chunk to the array of existing chunks&lt;/li&gt;\n&lt;li&gt;Otherwise, the current chunk is the last chunk in the array of chunks&lt;/li&gt;\n&lt;li&gt;Add the current value to the chunk&lt;/li&gt;\n&lt;li&gt;Return the modified array of chunks&lt;/li&gt;\n&lt;li&gt;Initialize the reduction by passing an empty array&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Currying based on &lt;code&gt;chunkSize&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chunk3 = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, array);\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunk3&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]));\n&lt;span class=&quot;hljs-comment&quot;&gt;// prints [ [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ], [ &apos;d&apos;, &apos;e&apos; ] ]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You can add the &lt;code&gt;chunk()&lt;/code&gt; function to the global &lt;code&gt;Array&lt;/code&gt; object:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chunk&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;chunkSize&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;previous, current&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chunk;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (previous.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || \n                    previous[previous.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === chunkSize) {\n                chunk = [];\n                previous.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(chunk);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                chunk = previous[previous.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n            }\n            chunk.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(current);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; previous;\n        }, []);\n    }\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// prints [ [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; &apos;d&apos; ], [ &apos;e&apos; ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;js&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;splitToBulks&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, bulkSize = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bulks = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / bulkSize); i++) {\n        bulks.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i * bulkSize, (i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * bulkSize));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bulks;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;splitToBulks&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;typescript&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; splitToBulks&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: T[], &lt;span class=&quot;hljs-attr&quot;&gt;bulkSize&lt;/span&gt;: number = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;): T[][] {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bulks&lt;/span&gt;: T[][] = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / bulkSize); i++) {\n        bulks.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i * bulkSize, (i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * bulkSize));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bulks;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;results = []\nchunk_size = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n   results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, chunk_size))\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The one line in pure javascript:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunks&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, size&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; / size)}).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(index*size, (index+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*size))\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// The following will group letters of the alphabet by 4&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunks&lt;/span&gt;([...&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;fromCharCode&lt;/span&gt;(i + &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;)), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I recommend using lodash. Chunking is one of many useful functions there.\nInstructions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;npm i --save lodash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Include in your project:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;lodash&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayOfElements = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 5&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 6&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 7&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 8&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 9&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 10&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 11&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element 12&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunkedElements = _.&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(arrayOfElements, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can find my sample here:\n&lt;a href=&quot;https://playcode.io/659171/&quot; rel=&quot;noreferrer&quot;&gt;https://playcode.io/659171/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here is an example where I split an array into chunks of 2 elements, simply by splicing chunks out of the array until the original array is empty.\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; new_array = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunksize = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunk = array.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,chunksize);\n        new_array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(chunk);\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(new_array)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the Array.prototype.reduce function to do this in one line.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, size&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;rows, key, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (index % size == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? rows.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;([key]) : rows[rows.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(key)) &amp;amp;&amp;amp; rows, []);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n        \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(arr,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;And this would be my contribution to this topic. I guess &lt;code&gt;.reduce()&lt;/code&gt; is the best way.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;segment&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;arr, n&lt;/span&gt;) =&amp;gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r,e,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; i%n ? (r[r.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(e), r)\n                                                    : (r.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;([e]), r), []),\n        arr = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;}).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        res = &lt;span class=&quot;hljs-title function_&quot;&gt;segment&lt;/span&gt;(arr,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(res));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;But the above implementation is not very efficient since &lt;code&gt;.reduce()&lt;/code&gt; runs through all &lt;code&gt;arr&lt;/code&gt; function. A more efficient approach (very close to the fastest imperative solution) would be, iterating over the reduced (to be chunked) array since we can calculate it&apos;s size in advance by &lt;code&gt;Math.ceil(arr/n);&lt;/code&gt;. Once we have the empty result array like &lt;code&gt;Array(Math.ceil(arr.length/n)).fill();&lt;/code&gt; the rest is to map slices of the &lt;code&gt;arr&lt;/code&gt; array into it.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr,n&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n)).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*n, i*n+n));\n}\n\narr = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;},&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\nres = &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(arr,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(res));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;So far so good but we can still simplify the above snipet further.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,n&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;/n)}, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(i*n, i*n+n)),\n    arr   = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;},&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),\n    res   = &lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(arr,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(res));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;coffeescript&lt;/span&gt;:\n\nb = (a.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len) &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n\ndemo \na = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]\n\nb = (a.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n[ [ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ],\n  [ &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; ],\n  [ &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; ],\n  [ &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; ] ]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use chunk from lodash&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;lodash.&lt;span class=&quot;hljs-title function_&quot;&gt;chunk&lt;/span&gt;(arr,&amp;lt;size&amp;gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;chunk&lt;/span&gt;=&amp;gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chunk);\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; size = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; chunks = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n    chunks.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(array.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, size));\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chunks);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"412":["\n&lt;p&gt;Below are five options for achieving this layout:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;CSS Positioning &lt;/li&gt;\n&lt;li&gt;Flexbox with Invisible DOM Element&lt;/li&gt;\n&lt;li&gt;Flexbox with Invisible Pseudo-Element&lt;/li&gt;\n&lt;li&gt;Flexbox with &lt;code&gt;flex: 1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;CSS Grid Layout&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Method #1: CSS Positioning Properties&lt;/h2&gt;\n\n&lt;p&gt;Apply &lt;code&gt;position: relative&lt;/code&gt; to the flex container.&lt;/p&gt;\n\n&lt;p&gt;Apply &lt;code&gt;position: absolute&lt;/code&gt; to item D.&lt;/p&gt;\n\n&lt;p&gt;Now this item is absolutely positioned within the flex container.&lt;/p&gt;\n\n&lt;p&gt;More specifically, item D is removed from the document flow but stays within the bounds of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/position#Absolute_positioning&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;nearest positioned ancestor&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use the CSS offset properties &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; to move this element into position.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:last-child&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ddd&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: row;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#aaa&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;span&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: aqua;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;true center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;One caveat&lt;/strong&gt; to this method is that some browsers may not completely remove an absolutely-positioned flex item from the normal flow. This changes the alignment in a non-standard, unexpected way. More details: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/q/32991051/3597276&quot;&gt;Absolutely positioned flex item is not removed from the normal flow in IE11&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Method #2: Flex Auto Margins &amp;amp; Invisible Flex Item (DOM element)&lt;/h2&gt;\n\n&lt;p&gt;With a combination of &lt;a href=&quot;https://stackoverflow.com/a/33856609/3597276&quot;&gt;&lt;strong&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/strong&gt; margins&lt;/a&gt; and a new, invisible flex item the layout can be achieved.&lt;/p&gt;\n\n&lt;p&gt;The new flex item is identical to item D and is placed at the opposite end (the left edge).&lt;/p&gt;\n\n&lt;p&gt;More specifically, because flex alignment is based on the distribution of free space, the new item is a necessary counterbalance to keep the three middle boxes horizontally centered. The new item must be the same width as the existing D item, or the middle boxes won&apos;t be precisely centered.&lt;/p&gt;\n\n&lt;p&gt;The new item is removed from view with &lt;code&gt;visibility: hidden&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In short:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Create a duplicate of the &lt;code&gt;D&lt;/code&gt; element.&lt;/li&gt;\n&lt;li&gt;Place it at the beginning of the list.&lt;/li&gt;\n&lt;li&gt;Use flex &lt;code&gt;auto&lt;/code&gt; margins to keep &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; centered, with both &lt;code&gt;D&lt;/code&gt; elements creating equal balance from both ends.&lt;/li&gt;\n&lt;li&gt;Apply &lt;code&gt;visibility: hidden&lt;/code&gt; to the duplicate &lt;code&gt;D&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:first&lt;/span&gt;-child {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;visibility&lt;/span&gt;: hidden;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:last-child&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ddd&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: row;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#aaa&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center; &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;span&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: aqua; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- new; invisible spacer item --&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;true center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Method #3: Flex Auto Margins &amp;amp; Invisible Flex Item (pseudo-element)&lt;/h2&gt;\n\n&lt;p&gt;This method is similar to #2, except it&apos;s cleaner semantically and the width of &lt;code&gt;D&lt;/code&gt; must be known.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Create a pseudo-element with the same width as &lt;code&gt;D&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Place it at the start of the container with &lt;code&gt;::before&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Use flex &lt;code&gt;auto&lt;/code&gt; margins to keep &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; perfectly centered, with the pseudo and &lt;code&gt;D&lt;/code&gt; elements creating equal balance from both ends.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; auto &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;visibility&lt;/span&gt;: hidden;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ddd&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:last-child&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ddd&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: row;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#aaa&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center; &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;span&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: aqua; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;true center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Method #4: Add &lt;code&gt;flex: 1&lt;/code&gt; to left and right items&lt;/h2&gt;\n\n&lt;p&gt;Starting with Method #2 or #3 above, instead of worrying about equal width for the left and right items to maintain equal balance, just give each one &lt;code&gt;flex: 1&lt;/code&gt;. This will force them both to consume available space, thus centering the middle item.&lt;/p&gt;\n\n&lt;p&gt;You can then add &lt;code&gt;display: flex&lt;/code&gt; to individual items in order to align their content.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;about using this method with &lt;code&gt;min-height&lt;/code&gt;:&lt;/em&gt; Currently in Chrome, Firefox, Edge and possibly other browsers, the shorthand rule &lt;code&gt;flex: 1&lt;/code&gt; breaks down to this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;flex-grow: 1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;flex-shrink: 1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;flex-basis: 0%&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;That &lt;strong&gt;percentage unit (%)&lt;/strong&gt; on &lt;code&gt;flex-basis&lt;/code&gt; causes this method to break when &lt;code&gt;min-height&lt;/code&gt; is used on the container. This is because, as a general rule, percentage heights on the children require an explicit &lt;code&gt;height&lt;/code&gt; property setting on the parent.&lt;/p&gt;\n\n&lt;p&gt;This is an old CSS rule dating back to 1998 (&lt;a href=&quot;https://www.w3.org/TR/2008/REC-CSS2-20080411/&quot; rel=&quot;noreferrer&quot;&gt;CSS Level 2&lt;/a&gt;) which is still in effect in many browsers to some degree or another. For complete details see &lt;a href=&quot;https://stackoverflow.com/q/33636796/3597276&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/31728799/3597276&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an illustration of the problem posted in the comments by &lt;a href=&quot;https://stackoverflow.com/users/2651804/user2651804&quot;&gt;user2651804&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: teal;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80vh&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: space-between;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: orange;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:first&lt;/span&gt;-child {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;very long annoying text that will add on top of the height of its parent&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The solution is to not use the percentage unit. Try &lt;code&gt;px&lt;/code&gt; or just nothing at all (&lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/#flex-common&quot; rel=&quot;noreferrer&quot;&gt;which is what the spec actually recommends&lt;/a&gt;, despite the fact that at least some of the major browsers have appended a percentage unit for whatever reason).&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: teal;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80vh&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: space-between;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: orange;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* OVERRIDE THE BROWSER SETTING IN THE FLEX PROPERTY */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:first&lt;/span&gt;-child {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#flex-container&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* OR... JUST SET THE LONG-HAND PROPERTIES INDIVIDUALLY\n\n#flex-container &amp;gt; div:first-child {\n  flex-grow: 1;\n  flex-shrink: 1;\n  flex-basis: 0;\n}\n\n#flex-container::after {\n  content: &quot;&quot;;\n  flex-grow: 1;\n  flex-shrink: 1;\n  flex-basis: 0;\n}\n */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;very long annoying text that will add on top of the height of its parent&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Method #5: CSS Grid Layout&lt;/h2&gt;\n\n&lt;p&gt;This may be the cleanest and most efficient method. There is no need for absolute positioning, fake elements or other hackery.&lt;/p&gt;\n\n&lt;p&gt;Simply create a grid with multiple columns. Then position your items in the middle and end columns. Basically, just leave the first column empty.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: grid;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;grid-template-columns&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;fr &lt;span class=&quot;hljs-built_in&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, auto) &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;fr;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;grid-column&lt;/span&gt;-&lt;span class=&quot;hljs-attribute&quot;&gt;gap&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  justify-items: center;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) { &lt;span class=&quot;hljs-attribute&quot;&gt;grid-column-start&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; }\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) { &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;: auto; }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* for demo only */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none; }\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#aaa&lt;/span&gt;; }\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;  { &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;| true center |&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The simplest solution will be to justify-content center to the parent container and giving margin-left auto to first and last child element.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n}\n\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.a&lt;/span&gt;,&lt;span class=&quot;hljs-selector-class&quot;&gt;.d&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;:auto;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Most easy way&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item1&lt;/span&gt;{\n   &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translateX&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;/*D element Width[if needed]*/&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using the &lt;code&gt;display:grid&lt;/code&gt; approach, you can simply put all of the &lt;code&gt;ul&lt;/code&gt; children into the same cell and then set &lt;code&gt;justify-self&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: grid;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.ul&lt;/span&gt; &amp;gt; * {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;grid-column-start&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;grid-row-start&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  justify-self:center;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.ul&lt;/span&gt; &amp;gt; *&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:last-child&lt;/span&gt; {\n  justify-self: right;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Make Fancy */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:inline-block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#bbb&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;ul&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Inspired by the &lt;a href=&quot;https://stackoverflow.com/a/38948646/1075499&quot;&gt;Method #5: CSS Grid Layout&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/users/3597276/michael-benjamin&quot;&gt;@Michal Benjamin&lt;/a&gt;&apos;s solution and because I&apos;m using Tailwind and as of now still don&apos;t have access to all the grid options by default. This seems to work:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: grid;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;grid-template-columns&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;minmax&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;fr));\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-self&lt;/span&gt;: center;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: flex-start; &lt;span class=&quot;hljs-comment&quot;&gt;/* OR margin-right: auto */&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: flex-end; &lt;span class=&quot;hljs-comment&quot;&gt;/* OR margin-left:auto */&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;PS: Not sure if mixing up flex and grid like this is a good idea!&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to make it aligned, you can simply attach an empty span and split the three child spans into them.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The easiest way:&lt;/strong&gt;\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.wrap&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:flex;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.full-width&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.centered&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.btn&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: end;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;full-width&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;full-width centered&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;full-width btn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Very clear question. I couldn&apos;t help but post the answer after a few hours of digging. We Could of solved this with tables, table-cell, absolute positions, transforms but we just had to do it with flexbox :)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.parent {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.center {\n  margin: auto;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://codepen.io/rgfx/pen/BLorgd&quot; rel=&quot;nofollow&quot;&gt;http://codepen.io/rgfx/pen/BLorgd&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted answer can be changed a bit because you can use grid template areas and do it without fake element&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;grid-template-areas &apos;. b c&apos;\ngrid-template-columns: 1fr 1fr 1fr\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I expanded on &lt;a href=&quot;https://stackoverflow.com/users/3597276/michael-b&quot;&gt;Michael_B&lt;/a&gt;&apos;s &lt;a href=&quot;https://stackoverflow.com/a/38948646/476951&quot;&gt;answer&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-3&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-3&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-3&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: flex-start;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-3&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: flex-end;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__1-of-2&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__1-of-2&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: flex-end;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-2&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: flex-start;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-2&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__1-of-2&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__1-of-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__1-of-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.center-flex__2-of-2&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-attr&quot;&gt;[class*=center-flex]&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt; solid &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-selector-attr&quot;&gt;[class*=center-flex]&lt;/span&gt; &amp;gt; * {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;2 of 3\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;center-flex__2-of-3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Accusamus&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Porro&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;this&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Accusamus&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Porro&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Culpa&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Sit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n1 of 2\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;akex center-flex__1-of-2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;this&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Accusamus&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Porro&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Culpa&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Sit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n2 of 2\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;akex center-flex__2-of-2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Accusamus&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Porro&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Culpa&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Sit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;this&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n1 of 1\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;center-flex__1-of-1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Center&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;this&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://codepen.io/HerrSerker/pen/dQxMdO?editors=1100&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here with the help of SASS as a codepen&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; { \n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; \n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: row;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#aaa&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:last-child&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ddd&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;D&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"413":["\n&lt;p&gt;&lt;code&gt;is&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; if two variables point to the same object (in memory), &lt;code&gt;==&lt;/code&gt; if the objects referred to by the variables are equal.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a \n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b == a\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Make a new copy of list `a` via the slice operator, &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# and assign it to variable `b`&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a[:] \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b == a\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The same holds true for string literals:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; x * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; intern(x*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Please see &lt;a href=&quot;https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none&quot;&gt;this question&lt;/a&gt; as well.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a simple rule of thumb to tell you when to use &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;==&lt;/code&gt; is for &lt;em&gt;value equality&lt;/em&gt;. Use it when you would like to know if two objects have the same value.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;is&lt;/code&gt; is for &lt;em&gt;reference equality&lt;/em&gt;. Use it when you would like to know if two references refer to the same object.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In general, when you are comparing something to a simple type, you are usually checking for &lt;em&gt;value equality&lt;/em&gt;, so you should use &lt;code&gt;==&lt;/code&gt;. For example, the intention of your example is probably to check whether x has a value equal to 2 (&lt;code&gt;==&lt;/code&gt;), not whether &lt;code&gt;x&lt;/code&gt; is literally referring to the same object as 2.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Something else to note: because of the way the CPython reference implementation works, you&apos;ll get unexpected and inconsistent results if you mistakenly use &lt;code&gt;is&lt;/code&gt; to compare for reference equality on integers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == b\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s pretty much what we expected: &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have the same value, but are distinct entities. But what about this?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c == d\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; d\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is inconsistent with the earlier result. What&apos;s going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here&apos;s an example demonstrating this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;260&lt;/span&gt;): a = i; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%i: %s&quot;&lt;/span&gt; % (i, a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(i)));\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;251&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;252&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;253&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;254&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;257&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;258&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;259&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is another obvious reason not to use &lt;code&gt;is&lt;/code&gt;: the behavior is left up to implementations when you&apos;re erroneously using it for value equality.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;Is there a difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; in Python?&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, they have a very important difference.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;: check for equality - the semantics are that equivalent objects (that aren&apos;t necessarily the same object) will test as equal. As the &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#value-comparisons&quot; rel=&quot;noreferrer&quot;&gt;documentation says&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The operators &amp;lt;, &amp;gt;, ==, &amp;gt;=, &amp;lt;=, and != compare the values of two objects.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;is&lt;/code&gt;&lt;/strong&gt;: check for identity - the semantics are that the object (as held in memory) &lt;em&gt;is&lt;/em&gt; the object. Again, the &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#is-not&quot; rel=&quot;noreferrer&quot;&gt;documentation says&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The operators &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;is not&lt;/code&gt; test for object identity: &lt;code&gt;x is y&lt;/code&gt; is true\n  if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the same object. Object identity is\n  determined using the &lt;code&gt;id()&lt;/code&gt; function. &lt;code&gt;x is not y&lt;/code&gt; yields the inverse\n  truth value.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thus, the check for identity is the same as checking for the equality of the IDs of the objects. That is,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is the same as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a) == &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;id&lt;/code&gt; is the builtin function that returns an integer that &quot;is guaranteed to be unique among simultaneously existing objects&quot; (see &lt;code&gt;help(id)&lt;/code&gt;) and where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are any arbitrary objects.&lt;/p&gt;\n\n&lt;h2&gt;Other Usage Directions&lt;/h2&gt;\n\n&lt;p&gt;You should use these comparisons for their semantics. Use &lt;code&gt;is&lt;/code&gt; to check identity and &lt;code&gt;==&lt;/code&gt; to check equality.&lt;/p&gt;\n\n&lt;p&gt;So in general, we use &lt;code&gt;is&lt;/code&gt; to check for identity. This is usually useful when we are checking for an object that should only exist once in memory, referred to as a &quot;singleton&quot; in the documentation.&lt;/p&gt;\n\n&lt;p&gt;Use cases for &lt;code&gt;is&lt;/code&gt; include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;enum values (when using Enums from the enum module)&lt;/li&gt;\n&lt;li&gt;usually modules&lt;/li&gt;\n&lt;li&gt;usually class objects resulting from class definitions&lt;/li&gt;\n&lt;li&gt;usually function objects resulting from function definitions&lt;/li&gt;\n&lt;li&gt;anything else that should only exist once in memory (all singletons, generally)&lt;/li&gt;\n&lt;li&gt;a specific object that you want by identity&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Usual use cases for &lt;code&gt;==&lt;/code&gt; include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;numbers, including integers&lt;/li&gt;\n&lt;li&gt;strings&lt;/li&gt;\n&lt;li&gt;lists&lt;/li&gt;\n&lt;li&gt;sets&lt;/li&gt;\n&lt;li&gt;dictionaries&lt;/li&gt;\n&lt;li&gt;custom mutable objects&lt;/li&gt;\n&lt;li&gt;other builtin immutable objects, in most cases&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The general use case, again, for &lt;code&gt;==&lt;/code&gt;, is the object you want may not be the &lt;em&gt;same&lt;/em&gt; object, instead it may be an &lt;em&gt;equivalent&lt;/em&gt; one&lt;/p&gt;\n\n&lt;h3&gt;PEP 8 directions&lt;/h3&gt;\n\n&lt;p&gt;PEP 8, the official Python style guide for the standard library also mentions &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#programming-recommendations&quot; rel=&quot;noreferrer&quot;&gt;two use-cases for &lt;code&gt;is&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Comparisons to singletons like &lt;code&gt;None&lt;/code&gt; should always be done with &lt;code&gt;is&lt;/code&gt; or\n  &lt;code&gt;is not&lt;/code&gt;, never the equality operators.&lt;/p&gt;\n  \n  &lt;p&gt;Also, beware of writing &lt;code&gt;if x&lt;/code&gt; when you really mean &lt;code&gt;if x is not None&lt;/code&gt; --\n  e.g. when testing whether a variable or argument that defaults to &lt;code&gt;None&lt;/code&gt;\n  was set to some other value. The other value might have a type (such\n  as a container) that could be false in a boolean context!&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Inferring equality from identity&lt;/h2&gt;\n\n&lt;p&gt;If &lt;code&gt;is&lt;/code&gt; is true, equality can &lt;em&gt;usually&lt;/em&gt; be inferred - logically, if an object is itself, then it should test as equivalent to itself. &lt;/p&gt;\n\n&lt;p&gt;In most cases this logic is true, but it relies on the implementation of the &lt;code&gt;__eq__&lt;/code&gt; special method. As the &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#value-comparisons&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; say, &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The default behavior for equality comparison (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) is based on\n  the identity of the objects. Hence, equality comparison of instances\n  with the same identity results in equality, and equality comparison of\n  instances with different identities results in inequality. A\n  motivation for this default behavior is the desire that all objects\n  should be reflexive (i.e. x is y implies x == y).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and in the interests of consistency, recommends:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Equality comparison should be reflexive. In other words, identical\n  objects should compare equal:&lt;/p&gt;\n  \n  &lt;p&gt;&lt;code&gt;x is y&lt;/code&gt; implies &lt;code&gt;x == y&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;We can see that this is the default behavior for custom objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;obj = Object()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;obj2 = Object()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;obj == obj, obj &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; obj\n(&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;obj == obj2, obj &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; obj2\n(&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The contrapositive is also usually true - if somethings test as not equal, you can usually infer that they are not the same object. &lt;/p&gt;\n\n&lt;p&gt;Since tests for equality can be customized, this inference does not always hold true for all types.&lt;/p&gt;\n\n&lt;h3&gt;An exception&lt;/h3&gt;\n\n&lt;p&gt;A notable exception is &lt;code&gt;nan&lt;/code&gt; - it always tests as not equal to itself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;nan = &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nan&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;nan\nnan\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;nan &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; nan\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;nan == nan           &lt;span class=&quot;hljs-comment&quot;&gt;# !!!!!&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Checking for identity can be much a much quicker check than checking for equality (which might require recursively checking members). &lt;/p&gt;\n\n&lt;p&gt;But it cannot be substituted for equality where you may find more than one object as equivalent.&lt;/p&gt;\n\n&lt;p&gt;Note that comparing equality of lists and tuples will assume that identity of objects are equal (because this is a fast check). This can create contradictions if the logic is inconsistent - as it is for &lt;code&gt;nan&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[nan] == [nan]\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(nan,) == (nan,)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;A Cautionary Tale:&lt;/h2&gt;\n\n&lt;p&gt;The question is attempting to use &lt;code&gt;is&lt;/code&gt; to compare integers. You shouldn&apos;t assume that an instance of an integer is the same instance as one obtained by another reference. This story explains why.&lt;/p&gt;\n\n&lt;p&gt;A commenter had code that relied on the fact that small integers (-5 to 256 inclusive) are singletons in Python, instead of checking for equality.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Wow, this can lead to some insidious bugs. I had some code that checked if a is b, which worked as I wanted because a and b are typically small numbers. The bug only happened today, after six months in production, because a and b were finally large enough to not be cached.  gwg&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It worked in development. It may have passed some unittests. &lt;/p&gt;\n\n&lt;p&gt;And it worked in production - until the code checked for an integer larger than 256, at which point it failed in production. &lt;/p&gt;\n\n&lt;p&gt;This is a production failure that could have been caught in code review or possibly with a style-checker.&lt;/p&gt;\n\n&lt;p&gt;Let me emphasize: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/28864111/541136&quot;&gt;do not use &lt;code&gt;is&lt;/code&gt; to compare integers.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; determines if the values are equal, while &lt;code&gt;is&lt;/code&gt; determines if they are the exact same object.&lt;/p&gt;\n    ","\n&lt;h1&gt;What&apos;s the difference between &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;?&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; are different comparison! As others already said:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;==&lt;/code&gt; compares the values of the objects.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;is&lt;/code&gt; compares the references of the objects.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In Python names refer to objects, for example in this case &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt; refer to an &lt;code&gt;int&lt;/code&gt; instance storing the value &lt;code&gt;1000&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;value1 = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\nvalue2 = value1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/WLzXy.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/WLzXy.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Because &lt;code&gt;value2&lt;/code&gt; refers to the same object &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; will give &lt;code&gt;True&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;value1 == value2\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;value1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; value2\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the following example the names &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt; refer to different &lt;code&gt;int&lt;/code&gt; instances, even if both store the same integer:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;value1 = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;value2 = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IJgBI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IJgBI.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Because the same value (integer) is stored &lt;code&gt;==&lt;/code&gt; will be &lt;code&gt;True&lt;/code&gt;, that&apos;s why it&apos;s often called &quot;value comparison&quot;. However &lt;code&gt;is&lt;/code&gt; will return &lt;code&gt;False&lt;/code&gt; because these are different objects:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;value1 == value2\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;value1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; value2\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;When to use which?&lt;/h2&gt;\n&lt;p&gt;Generally &lt;code&gt;is&lt;/code&gt; is a much faster comparison. That&apos;s why CPython caches (or maybe &lt;em&gt;reuses&lt;/em&gt; would be the better term) certain objects like small integers, some strings, etc. But this should be treated as &lt;em&gt;implementation detail&lt;/em&gt; that could (even if unlikely) change at any point without warning.&lt;/p&gt;\n&lt;p&gt;You should &lt;strong&gt;only use &lt;code&gt;is&lt;/code&gt;&lt;/strong&gt; if you:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;want to check if two objects are really the same object (not just the same &quot;value&quot;). One example can be if &lt;em&gt;you&lt;/em&gt; use a singleton object as constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;want to compare a value to a &lt;a href=&quot;https://docs.python.org/library/constants.html&quot; rel=&quot;noreferrer&quot;&gt;Python &lt;em&gt;constant&lt;/em&gt;&lt;/a&gt;. The constants in Python are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;True&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;False&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;NotImplemented&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;__debug__&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;classes (for example &lt;code&gt;int is int&lt;/code&gt; or &lt;code&gt;int is float&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;there could be additional constants in built-in modules or 3rd party modules. For example &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/maskedarray.baseclass.html#numpy.ma.masked&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;np.ma.masked&lt;/code&gt;&lt;/a&gt; from the NumPy module)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In &lt;strong&gt;every other case you should use &lt;code&gt;==&lt;/code&gt;&lt;/strong&gt; to check for equality.&lt;/p&gt;\n&lt;h2&gt;Can I customize the behavior?&lt;/h2&gt;\n&lt;p&gt;There is some aspect to &lt;code&gt;==&lt;/code&gt; that hasn&apos;t been mentioned already in the other answers: It&apos;s part of &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#data-model&quot; rel=&quot;noreferrer&quot;&gt;Pythons &quot;Data model&quot;&lt;/a&gt;. That means its behavior can be customized using the &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__eq__&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__eq__&lt;/code&gt;&lt;/a&gt; method. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, val&lt;/span&gt;):\n        self._value = val\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__eq__ method called&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self._value == other._value\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; AttributeError:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cannot compare {0} to objects of type {1}&apos;&lt;/span&gt;\n                            .&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self), &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(other)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is just an artificial example to illustrate that the method is really called:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MyClass(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) == MyClass(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n__eq__ method called\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that by default (if no other implementation of &lt;code&gt;__eq__&lt;/code&gt; can be found in the class or the superclasses) &lt;code&gt;__eq__&lt;/code&gt; uses &lt;code&gt;is&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, value&lt;/span&gt;):\n        self._value = value\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = AClass(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = AClass(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == b\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == a\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So it&apos;s actually important to implement &lt;code&gt;__eq__&lt;/code&gt; if you want &quot;more&quot; than just reference-comparison for custom classes!&lt;/p&gt;\n&lt;p&gt;On the other hand you cannot customize &lt;code&gt;is&lt;/code&gt; checks. It will always compare &lt;em&gt;just&lt;/em&gt; if you have the same reference.&lt;/p&gt;\n&lt;h2&gt;Will these comparisons always return a boolean?&lt;/h2&gt;\n&lt;p&gt;Because &lt;code&gt;__eq__&lt;/code&gt; can be re-implemented or overridden, it&apos;s not limited to return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. It &lt;em&gt;could&lt;/em&gt; return anything (but in most cases it should return a boolean!).&lt;/p&gt;\n&lt;p&gt;For example with NumPy arrays the &lt;code&gt;==&lt;/code&gt; will return an array:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;np.arange(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\narray([&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;,  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But &lt;code&gt;is&lt;/code&gt; checks will always return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;!&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; As Aaron Hall mentioned in the comments:&lt;/p&gt;\n&lt;p&gt;Generally you shouldn&apos;t do any &lt;code&gt;is True&lt;/code&gt; or &lt;code&gt;is False&lt;/code&gt; checks because one normally uses these &quot;checks&quot; in a context that implicitly converts the &lt;em&gt;condition&lt;/em&gt; to a boolean (for example in an &lt;code&gt;if&lt;/code&gt; statement). So doing the &lt;code&gt;is True&lt;/code&gt; comparison &lt;strong&gt;and&lt;/strong&gt; the implicit boolean cast is doing more work than just doing the boolean cast - and you limit yourself to booleans (which isn&apos;t considered pythonic).&lt;/p&gt;\n&lt;p&gt;Like PEP8 mentions:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Don&apos;t compare boolean values to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; using &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Yes:   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; greeting:\nNo:    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; greeting == &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\nWorse: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; greeting &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;They are &lt;b&gt;completely different&lt;/b&gt;.  &lt;code&gt;is&lt;/code&gt; checks for object identity, while &lt;code&gt;==&lt;/code&gt; checks for equality (a notion that depends on the two operands&apos; types).&lt;/p&gt;\n\n&lt;p&gt;It is only a lucky coincidence that &quot;&lt;code&gt;is&lt;/code&gt;&quot; seems to work correctly with small integers (e.g. 5 == 4+1).  That is because &lt;a href=&quot;https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong&quot; rel=&quot;noreferrer&quot;&gt;CPython optimizes the storage of integers in the range (-5 to 256) by making them singletons&lt;/a&gt;. This behavior is totally implementation-dependent and not guaranteed to be preserved under all manner of minor transformative operations.&lt;/p&gt;\n\n&lt;p&gt;For example, Python 3.5 also makes short strings singletons, but slicing them disrupts this behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;[:] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;[:] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#comparisons&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/library/stdtypes.html#comparisons&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;is&lt;/code&gt; tests for identity\n&lt;code&gt;==&lt;/code&gt; tests for equality&lt;/p&gt;\n\n&lt;p&gt;Each (small) integer value is mapped to a single value, so every 3 is identical and equal. This is an implementation detail, not part of the language spec though&lt;/p&gt;\n    ","\n&lt;p&gt;Your answer is correct. The &lt;code&gt;is&lt;/code&gt; operator compares the identity of two objects.  The &lt;code&gt;==&lt;/code&gt; operator compares the values of two objects.&lt;/p&gt;\n\n&lt;p&gt;An object&apos;s identity never changes once it has been created; you may think of it as the object&apos;s address in memory.&lt;/p&gt;\n\n&lt;p&gt;You can control comparison behaviour of object values by defining a &lt;code&gt;__cmp__&lt;/code&gt; method or a &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#basic-customization&quot; rel=&quot;nofollow noreferrer&quot;&gt;rich comparison&lt;/a&gt; method like &lt;code&gt;__eq__&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Have a look at Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/306313&quot;&gt;Python&apos;s is operator behaves unexpectedly with integers&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;What it mostly boils down to is that &quot;&lt;code&gt;is&lt;/code&gt;&quot; checks to see if they are the same object, not just equal to each other (the numbers below 256 are a special case).&lt;/p&gt;\n    ","\n&lt;p&gt;In a nutshell, &lt;code&gt;is&lt;/code&gt; checks whether two references point to the same object or not.&lt;code&gt;==&lt;/code&gt; checks whether two objects have the same value or not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a=[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nb=a        &lt;span class=&quot;hljs-comment&quot;&gt;#a and b point to the same object&lt;/span&gt;\nc=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)  &lt;span class=&quot;hljs-comment&quot;&gt;#c points to different object &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a==b:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#&apos;&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;#output:#&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;##&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;#output:## &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a==c:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;###&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;#output:## &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; c:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;####&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;#no output as c and a point to different object &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As the other people in this post answer the question in details the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; for comparing Objects or variables, I would &lt;strong&gt;emphasize&lt;/strong&gt; mainly the comparison between &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; &lt;strong&gt;for strings&lt;/strong&gt; which can give different results and I would urge programmers to carefully use them.&lt;/p&gt;\n&lt;p&gt;For string comparison, make sure to use &lt;code&gt;==&lt;/code&gt; instead of &lt;code&gt;is&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;str is hello&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;str == hello&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Out:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; hello\n&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; == hello\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; in the below example &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; will get different results:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;str2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello sam&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello sam&apos;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;str2 is hello sam&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str2 == &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello sam&apos;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;str2 == hello sam&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Out:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;str2 == hello sam\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion and Analysis:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Use &lt;code&gt;is&lt;/code&gt; carefully to compare between strings.\nSince &lt;code&gt;is&lt;/code&gt; for comparing objects and since in Python 3+ every variable such as string interpret as an object, let&apos;s see what happened in above paragraphs.&lt;/p&gt;\n&lt;p&gt;In python there is &lt;a href=&quot;https://www.geeksforgeeks.org/id-function-python/#:%7E:text=id()%20is%20an%20inbuilt,the%20same%20id()%20value.&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/a&gt; function that shows a unique constant of an object during its lifetime. This id is using in back-end of Python interpreter to compare two objects using &lt;code&gt;is&lt;/code&gt; keyword.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;)\n&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;140039832615152&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)\n&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;140039832615152&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;str2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello sam&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello sam&apos;&lt;/span&gt;)\n&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;140039832615536&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(str2)\n&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;140039832615792&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As John Feminella said, most of the time you will use == and != because your objective is to  compare values. I&apos;d just like to categorise what you would do the rest of the time:&lt;/p&gt;\n\n&lt;p&gt;There is one and only one instance of NoneType i.e. None is a singleton. Consequently &lt;code&gt;foo == None&lt;/code&gt; and &lt;code&gt;foo is None&lt;/code&gt; mean the same. However the &lt;code&gt;is&lt;/code&gt; test is faster and the Pythonic convention is to use &lt;code&gt;foo is None&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you are doing some introspection or mucking about with garbage collection or checking whether your custom-built string interning gadget is working or suchlike, then you probably have a use-case for &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;True and False are also (now) singletons, but there is no use-case for &lt;code&gt;foo == True&lt;/code&gt; and no use case for &lt;code&gt;foo is True&lt;/code&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;Most of them already answered to the point. Just as an additional note (based on my understanding and experimenting but not from a documented source), the statement &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;== if the objects referred to by the variables are equal&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;from above answers should be read as &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;== if the objects referred to by the variables are equal and objects belonging to the same type/class&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;. I arrived at this conclusion based on the below test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\ntuple1 = (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(tuple1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list1))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(tuple1))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list1 == tuple1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; tuple1)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the contents of the list and tuple are same but the type/class are different. &lt;/p&gt;\n    ","\n&lt;p&gt;Python difference between is and equals(==)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The is operator may seem like the same as the equality operator but\n  they are not same.&lt;/p&gt;\n  \n  &lt;p&gt;The is checks if both the variables point to the same object whereas\n  the == sign checks if the values for the two variables are the same.&lt;/p&gt;\n  \n  &lt;p&gt;So if the is operator returns True then the equality is definitely\n  True, but the opposite may or may not be True.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is an example to demonstrate the similarity and the difference.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == b\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == c\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; c\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == b\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a == b\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Tip: Avoid using &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; immutable types such &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; strings &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; numbers, the result &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; unpredictable.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    "],"414":["\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This answer is rather old, and so describes what was &apos;good&apos; at the time, which was smart pointers provided by the Boost library. Since C++11, the standard library has provided sufficient smart pointers types, and so you should favour the use of &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/unique_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/shared_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/weak_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::weak_ptr&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;There was also &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/auto_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::auto_ptr&lt;/code&gt;&lt;/a&gt;. It was very much like a scoped pointer, except that it also had the &quot;special&quot; dangerous ability to be copied  which also unexpectedly transfers ownership.&lt;br&gt;\n&lt;strong&gt;It was deprecated in C++11 and removed in C++17&lt;/strong&gt;, so you shouldn&apos;t use it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::auto_ptr&amp;lt;MyObject&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyObject())&lt;/span&gt;&lt;/span&gt;;\nstd::auto_ptr&amp;lt;MyObject&amp;gt; p2 = p1; &lt;span class=&quot;hljs-comment&quot;&gt;// Copy and transfer ownership. &lt;/span&gt;\n                                 &lt;span class=&quot;hljs-comment&quot;&gt;// p1 gets set to empty!&lt;/span&gt;\np2-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;DoSomething&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works.&lt;/span&gt;\np1-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;DoSomething&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Oh oh. Hopefully raises some NULL pointer exception.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;OLD ANSWER&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A smart pointer is a class that wraps a &apos;raw&apos; (or &apos;bare&apos;) C++ pointer, to manage the lifetime of the object being pointed to. There is no single smart pointer type, but all of them try to abstract a raw pointer in a practical way.&lt;/p&gt;\n\n&lt;p&gt;Smart pointers should be preferred over raw pointers. If you feel you need to use pointers (first consider if you &lt;em&gt;really&lt;/em&gt; do), you would normally want to use a smart pointer as this can alleviate many of the problems with raw pointers, mainly forgetting to delete the object and leaking memory.&lt;/p&gt;\n\n&lt;p&gt;With raw pointers, the programmer has to explicitly destroy the object when it is no longer useful.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Need to create the object to achieve some goal&lt;/span&gt;\nMyObject* ptr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(); \nptr-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;DoSomething&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Use the object in some way&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; ptr; &lt;span class=&quot;hljs-comment&quot;&gt;// Destroy the object. Done with it.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Wait, what if DoSomething() raises an exception...?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A smart pointer by comparison defines a policy as to when the object is destroyed. You still have to create the object, but you no longer have to worry about destroying it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;SomeSmartPtr&amp;lt;MyObject&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyObject())&lt;/span&gt;&lt;/span&gt;;\nptr-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;DoSomething&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Use the object in some way.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Destruction of the object happens, depending &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// on the policy the smart pointer class uses.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Destruction would happen even if DoSomething() &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// raises an exception&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The simplest policy in use involves the scope of the smart pointer wrapper object, such as implemented by &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/smart_ptr/scoped_ptr.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;boost::scoped_ptr&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/unique_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    {\n       &lt;span class=&quot;hljs-function&quot;&gt;std::unique_ptr&amp;lt;MyObject&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyObject())&lt;/span&gt;&lt;/span&gt;;\n       ptr-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;DoSomethingUseful&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// ptr goes out of scope -- &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// the MyObject is automatically destroyed.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ptr-&amp;gt;Oops(); // Compile error: &quot;ptr&quot; not defined&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// since it is no longer in scope.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;code&gt;std::unique_ptr&lt;/code&gt; instances cannot be copied. This prevents the pointer from being deleted multiple times (incorrectly). You can, however, pass references to it around to other functions you call.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;s are useful when you want to tie the lifetime of the object to a particular block of code, or if you embedded it as member data inside another object, the lifetime of that other object. The object exists until the containing block of code is exited, or until the containing object is itself destroyed.&lt;/p&gt;\n\n&lt;p&gt;A more complex smart pointer policy involves reference counting the pointer. This does allow the pointer to be copied. When the last &quot;reference&quot; to the object is destroyed, the object is deleted. This policy is implemented by &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;boost::shared_ptr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/shared_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::shared_ptr&amp;lt;MyObject&amp;gt; MyObjectPtr; &lt;span class=&quot;hljs-comment&quot;&gt;// nice short alias&lt;/span&gt;\n    MyObjectPtr p1; &lt;span class=&quot;hljs-comment&quot;&gt;// Empty&lt;/span&gt;\n\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;MyObjectPtr &lt;span class=&quot;hljs-title&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyObject())&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// There is now one &quot;reference&quot; to the created object&lt;/span&gt;\n        p1 = p2; &lt;span class=&quot;hljs-comment&quot;&gt;// Copy the pointer.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// There are now two references to the object.&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// p2 is destroyed, leaving one reference to the object.&lt;/span&gt;\n} &lt;span class=&quot;hljs-comment&quot;&gt;// p1 is destroyed, leaving a reference count of zero. &lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// The object is deleted.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reference counted pointers are very useful when the lifetime of your object is much more complicated, and is not tied directly to a particular section of code or to another object.&lt;/p&gt;\n\n&lt;p&gt;There is one drawback to reference counted pointers  the possibility of creating a dangling reference:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Create the smart pointer on the heap&lt;/span&gt;\nMyObjectPtr* pp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MyObjectPtr&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;())\n&lt;span class=&quot;hljs-comment&quot;&gt;// Hmm, we forgot to destroy the smart pointer,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// because of that, the object is never destroyed!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another possibility is creating circular references:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Owner&lt;/span&gt; {\n   std::shared_ptr&amp;lt;Owner&amp;gt; other;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::shared_ptr&amp;lt;Owner&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Owner())&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;std::shared_ptr&amp;lt;Owner&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Owner())&lt;/span&gt;&lt;/span&gt;;\np1-&amp;gt;other = p2; &lt;span class=&quot;hljs-comment&quot;&gt;// p1 references p2&lt;/span&gt;\np2-&amp;gt;other = p1; &lt;span class=&quot;hljs-comment&quot;&gt;// p2 references p1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Oops, the reference count of of p1 and p2 never goes to zero!&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The objects are never destroyed!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To work around this problem, both Boost and C++11 have defined a &lt;code&gt;weak_ptr&lt;/code&gt; to define a weak (uncounted) reference to a &lt;code&gt;shared_ptr&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple answer for these days of modern C++ (C++11 and later):&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&quot;What is a smart pointer?&quot;&lt;/strong&gt; &lt;br&gt;\nIt&apos;s a type whose values can be used like pointers, but which provides the additional feature of automatic memory management: When a smart pointer is no longer in use, the memory it points to is deallocated (see also &lt;a href=&quot;http://en.wikipedia.org/wiki/Smart_pointer&quot; rel=&quot;noreferrer&quot;&gt;the more detailed definition on Wikipedia&lt;/a&gt;).&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&quot;When should I use one?&quot;&lt;/strong&gt; &lt;br&gt;\nIn code which involves tracking the ownership of a piece of memory, allocating or de-allocating; the smart pointer often saves you the need to do these things explicitly.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&quot;But which smart pointer should I use in which of those cases?&quot;&lt;/strong&gt;\n&lt;ul&gt;\n&lt;li&gt;Use &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/unique_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt; when you want your object to live just as long as a single owning reference to it lives. For example, use it for a pointer to memory which gets allocated on entering some scope and de-allocated on exiting the scope.&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/shared_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/a&gt; when you do want to refer to your object from multiple places - and do not want your object to be de-allocated until all these references are themselves gone.&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/weak_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::weak_ptr&lt;/code&gt;&lt;/a&gt; when you do want to refer to your object from multiple places - for those references for which it&apos;s ok to ignore and deallocate (so they&apos;ll just note the object is gone when you try to dereference).&lt;/li&gt;\n&lt;li&gt;Don&apos;t use the &lt;code&gt;boost::&lt;/code&gt; smart pointers or &lt;code&gt;std::auto_ptr&lt;/code&gt; except in special cases which you can read up on if you must.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&quot;Hey, I didn&apos;t ask which one to use!&quot;&lt;/strong&gt; &lt;br&gt;\nAh, but you really wanted to, admit it.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&quot;So when should I use regular pointers then?&quot;&lt;/strong&gt; &lt;br&gt;\nMostly in code that is oblivious to memory ownership. This would typically be in functions which get a pointer from someplace else and do not allocate nor de-allocate, and do not store a copy of the pointer which outlasts their execution.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Smart_pointer&quot; rel=&quot;noreferrer&quot;&gt;smart pointer&lt;/a&gt; is a pointer-like type with some additional functionality, e.g. automatic memory deallocation, reference counting etc.&lt;/p&gt;\n&lt;p&gt;A small intro is available on the page &lt;a href=&quot;http://ootips.org/yonat/4dev/smart-pointers.html&quot; rel=&quot;noreferrer&quot;&gt;Smart Pointers - What, Why, Which?&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;One of the simple smart-pointer types is &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/auto_ptr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::auto_ptr&lt;/code&gt;&lt;/a&gt; (chapter 20.4.5 of C++ standard), which allows one to deallocate memory automatically when it out of scope and which is more robust than simple pointer usage when exceptions are thrown, although less flexible.&lt;/p&gt;\n&lt;p&gt;Another convenient type is &lt;a href=&quot;http://www.boost.org/doc/libs/1_36_0/libs/smart_ptr/shared_ptr.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;boost::shared_ptr&lt;/code&gt;&lt;/a&gt; which implements reference counting and automatically deallocates memory when no references to the object remains. This helps avoiding memory leaks and is easy to use to implement &lt;a href=&quot;http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot; rel=&quot;noreferrer&quot;&gt;RAII&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The subject is covered in depth in book &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201734842&quot; rel=&quot;noreferrer&quot;&gt;&quot;C++ Templates: The Complete Guide&quot; by David Vandevoorde, Nicolai M. Josuttis&lt;/a&gt;, chapter Chapter 20. Smart Pointers.\nSome topics covered:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Protecting Against Exceptions&lt;/li&gt;\n&lt;li&gt;Holders, (note, &lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/auto_ptr&quot; rel=&quot;noreferrer&quot;&gt;std::auto_ptr&lt;/a&gt; is implementation of such type of smart pointer)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&quot; rel=&quot;noreferrer&quot;&gt;Resource Acquisition Is Initialization&lt;/a&gt; (This is frequently used for exception-safe resource management in C++)&lt;/li&gt;\n&lt;li&gt;Holder Limitations&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Reference_counting&quot; rel=&quot;noreferrer&quot;&gt;Reference Counting&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Concurrent Counter Access&lt;/li&gt;\n&lt;li&gt;Destruction and Deallocation&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Definitions provided by Chris, Sergdev and Llyod are correct. I prefer a simpler definition though, just to keep my life simple:\nA smart pointer is simply a class that overloads the &lt;code&gt;-&amp;gt;&lt;/code&gt;  and &lt;code&gt;*&lt;/code&gt; operators. Which means that your object semantically looks like a pointer but you can make it do way cooler things, including reference counting, automatic destruction etc.\n&lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;auto_ptr&lt;/code&gt; are sufficient in most cases, but come along with their own set of small idiosyncrasies.&lt;/p&gt;\n    ","\n&lt;p&gt;A smart pointer is like a regular (typed) pointer, like &quot;char*&quot;, except when the pointer itself goes out of scope then what it points to is deleted as well. You can use it like you would a regular pointer, by using &quot;-&amp;gt;&quot;, but not if you need an actual pointer to the data. For that, you can use &quot;&amp;amp;*ptr&quot;.&lt;/p&gt;\n\n&lt;p&gt;It is useful for:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Objects that must be allocated with new, but that you&apos;d like to have the same lifetime as something on that stack. If the object is assigned to a smart pointer, then they will be deleted when the program exits that function/block.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Data members of classes, so that when the object is deleted all the owned data is deleted as well, without any special code in the destructor (you will need to be sure the destructor is virtual, which is almost always a good thing to do).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You may &lt;em&gt;not&lt;/em&gt; want to use a smart pointer when:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;... the pointer shouldn&apos;t actually own the data... i.e., when you are just using the data, but you want it to survive the function where you are referencing it.&lt;/li&gt;\n&lt;li&gt;... the smart pointer isn&apos;t itself going to be destroyed at some point. You don&apos;t want it to sit in memory that never gets destroyed (such as in an object that is dynamically allocated but won&apos;t be explicitly deleted).&lt;/li&gt;\n&lt;li&gt;... two smart pointers might point to the same data. (There are, however, even smarter pointers that will handle that... that is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Reference_counting&quot; rel=&quot;noreferrer&quot;&gt;reference counting&lt;/a&gt;.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;See also:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;garbage collection&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/94227/smart-pointers-or-who-owns-you-baby&quot;&gt;This stack overflow question&lt;/a&gt; regarding data ownership&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;A smart pointer is an object that acts like a pointer, but additionally provides control on construction, destruction, copying, moving and dereferencing.&lt;/p&gt;\n\n&lt;p&gt;One can implement one&apos;s own smart pointer, but many libraries also provide smart pointer implementations each with different advantages and drawbacks.&lt;/p&gt;\n\n&lt;p&gt;For example, &lt;a href=&quot;http://www.boost.org/&quot; rel=&quot;noreferrer&quot;&gt;Boost&lt;/a&gt; provides the following smart pointer implementations:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; is a pointer to &lt;code&gt;T&lt;/code&gt; using a reference count to determine when the object is no longer needed.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;scoped_ptr&amp;lt;T&amp;gt;&lt;/code&gt; is a pointer automatically deleted when it goes out of scope. No assignment is possible.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;intrusive_ptr&amp;lt;T&amp;gt;&lt;/code&gt; is another reference counting pointer. It provides better performance than &lt;code&gt;shared_ptr&lt;/code&gt;, but requires the type &lt;code&gt;T&lt;/code&gt; to provide its own reference counting mechanism.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;weak_ptr&amp;lt;T&amp;gt;&lt;/code&gt; is a weak pointer, working in conjunction with &lt;code&gt;shared_ptr&lt;/code&gt; to avoid circular references.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;shared_array&amp;lt;T&amp;gt;&lt;/code&gt; is like &lt;code&gt;shared_ptr&lt;/code&gt;, but for arrays of &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;scoped_array&amp;lt;T&amp;gt;&lt;/code&gt; is like &lt;code&gt;scoped_ptr&lt;/code&gt;, but for arrays of &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These are just one linear descriptions of each and can be used as per need, for further detail and examples one can look at the documentation of Boost.&lt;/p&gt;\n\n&lt;p&gt;Additionally, the C++ standard library provides three smart pointers; &lt;code&gt;std::unique_ptr&lt;/code&gt; for unique ownership, &lt;code&gt;std::shared_ptr&lt;/code&gt; for shared ownership and &lt;code&gt;std::weak_ptr&lt;/code&gt;. &lt;code&gt;std::auto_ptr&lt;/code&gt; existed in C++03 but is now deprecated.&lt;/p&gt;\n    ","\n&lt;p&gt;Most kinds of smart pointers handle disposing of the pointer-to object for you. It&apos;s very handy because you don&apos;t have to think about disposing of objects manually anymore.&lt;/p&gt;\n\n&lt;p&gt;The most commonly-used smart pointers are &lt;code&gt;std::tr1::shared_ptr&lt;/code&gt; (or &lt;code&gt;boost::shared_ptr&lt;/code&gt;), and, less commonly, &lt;code&gt;std::auto_ptr&lt;/code&gt;. I recommend regular use of &lt;code&gt;shared_ptr&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt; is very versatile and deals with a large variety of disposal scenarios, including cases where objects need to be &quot;passed across DLL boundaries&quot; (the common nightmare case if different &lt;code&gt;libc&lt;/code&gt;s are used between your code and the DLLs).&lt;/p&gt;\n    ","\n&lt;p&gt;Here is the Link for similar answers : &lt;a href=&quot;http://sickprogrammersarea.blogspot.in/2014/03/technical-interview-questions-on-c_6.html&quot;&gt;http://sickprogrammersarea.blogspot.in/2014/03/technical-interview-questions-on-c_6.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A smart pointer is an object that acts, looks and feels like a normal pointer but offers more functionality. In C++, smart pointers are implemented as template classes that encapsulate a pointer and override standard pointer operators. They have a number of advantages over regular pointers. They are guaranteed to be initialized as either null pointers or pointers to a heap object. Indirection through a null pointer is checked. No delete is ever necessary. Objects are automatically freed when the last pointer to them has gone away. One significant problem with these smart pointers is that unlike regular pointers, they don&apos;t respect inheritance. Smart pointers are unattractive for polymorphic code. Given below is an example for the implementation of smart pointers.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;smart_pointer&lt;/span&gt;\n{\n          &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n               &lt;span class=&quot;hljs-built_in&quot;&gt;smart_pointer&lt;/span&gt;();                          &lt;span class=&quot;hljs-comment&quot;&gt;// makes a null pointer&lt;/span&gt;\n               &lt;span class=&quot;hljs-built_in&quot;&gt;smart_pointer&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; X&amp;amp; x)            &lt;span class=&quot;hljs-comment&quot;&gt;// makes pointer to copy of x&lt;/span&gt;\n\n               X&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; *( );\n               &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; X&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;*( ) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;;\n               X* &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;;\n\n               &lt;span class=&quot;hljs-built_in&quot;&gt;smart_pointer&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; smart_pointer &amp;lt;X&amp;gt; &amp;amp;);\n               &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; smart_pointer &amp;lt;X&amp;gt; &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; =(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; smart_pointer&amp;lt;X&amp;gt;&amp;amp;);\n               ~&lt;span class=&quot;hljs-built_in&quot;&gt;smart_pointer&lt;/span&gt;();\n          &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n               &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This class implement a smart pointer to an object of type X. The object itself is located on the heap. Here is how to use it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;smart_pointer &amp;lt;employee&amp;gt; p= &lt;span class=&quot;hljs-built_in&quot;&gt;employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Harris&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1333&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Like other overloaded operators, p will behave like a regular pointer,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;cout&amp;lt;&amp;lt;*p;\np-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;raise_salary&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Let T be a class in this tutorial \nPointers in C++ can be divided into 3 types :&lt;/p&gt;\n\n&lt;p&gt;1) &lt;strong&gt;Raw pointers&lt;/strong&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T a;  \nT * _ptr = &amp;amp;a; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;They hold a memory address to a location in memory. Use with caution , as programs become complex hard to keep track. &lt;/p&gt;\n\n&lt;p&gt;Pointers with const data or address { Read backwards } &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T a ; \n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T * ptr1 = &amp;amp;a ; \nT &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; * ptr1 = &amp;amp;a ;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pointer to a data type T which is a const. Meaning you cannot change the data type using the pointer. ie &lt;code&gt;*ptr1 = 19&lt;/code&gt; ; will not work. But you can move the pointer. ie &lt;code&gt;ptr1++ , ptr1--&lt;/code&gt; ;  etc will work.\nRead backwards : pointer to type T which is const &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;  T * &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; ptr2 ;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A const pointer to a data type T . Meaning you cannot move the pointer but you can change the value pointed to by the pointer. ie &lt;code&gt;*ptr2 = 19&lt;/code&gt; will work but &lt;code&gt;ptr2++ ; ptr2--&lt;/code&gt; etc will not work. Read backwards : const pointer to a type T &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T * &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; ptr3 ; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A const pointer to a const data type T . Meaning you cannot either move the pointer nor can you change the data type pointer to be the pointer. ie . &lt;code&gt;ptr3-- ; ptr3++ ; *ptr3 = 19;&lt;/code&gt; will not work &lt;/p&gt;\n\n&lt;p&gt;3) &lt;strong&gt;Smart Pointers&lt;/strong&gt; : { &lt;code&gt;#include &amp;lt;memory&amp;gt;&lt;/code&gt; } &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Shared Pointer&lt;/strong&gt;: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;  T a ; \n     &lt;span class=&quot;hljs-comment&quot;&gt;//shared_ptr&amp;lt;T&amp;gt; shptr(new T) ; not recommended but works &lt;/span&gt;\n     shared_ptr&amp;lt;T&amp;gt; shptr = &lt;span class=&quot;hljs-built_in&quot;&gt;make_shared&lt;/span&gt;&amp;lt;T&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// faster + exception safe&lt;/span&gt;\n\n     std::cout &amp;lt;&amp;lt; shptr.&lt;span class=&quot;hljs-built_in&quot;&gt;use_count&lt;/span&gt;() ; &lt;span class=&quot;hljs-comment&quot;&gt;// 1 //  gives the number of &quot; &lt;/span&gt;\nthings &lt;span class=&quot;hljs-string&quot;&gt;&quot; pointing to it. \n     T * temp = shptr.get(); // gives a pointer to object\n\n     // shared_pointer used like a regular pointer to call member functions\n      shptr-&amp;gt;memFn();\n     (*shptr).memFn(); \n\n    //\n     shptr.reset() ; // frees the object pointed to be the ptr \n     shptr = nullptr ; // frees the object \n     shptr = make_shared&amp;lt;T&amp;gt;() ; // frees the original object and points to new object\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Implemented using reference counting to keep track of how many &quot; things &quot; point to the object pointed to by the pointer. When this count goes to 0 , the object is automatically deleted , ie objected is deleted when all the share_ptr pointing to the object goes out of scope. \nThis gets rid of the headache of having to delete objects which you have allocated using new. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Weak Pointer :&lt;/strong&gt; \n    Helps deal with cyclic reference which arises when using Shared Pointer\n    If you have two objects pointed to by two shared pointers and there is an internal shared pointer pointing to each others shared pointer then there will be a cyclic reference and the object will not be deleted when shared pointers go out of scope. To solve this , change the internal member from a shared_ptr to weak_ptr. Note : To access the element pointed to by a weak pointer use lock() , this returns a weak_ptr. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T a ; \nshared_ptr&amp;lt;T&amp;gt; shr = &lt;span class=&quot;hljs-built_in&quot;&gt;make_shared&lt;/span&gt;&amp;lt;T&amp;gt;() ; \nweak_ptr&amp;lt;T&amp;gt; wk = shr ; &lt;span class=&quot;hljs-comment&quot;&gt;// initialize a weak_ptr from a shared_ptr &lt;/span&gt;\nwk.&lt;span class=&quot;hljs-built_in&quot;&gt;lock&lt;/span&gt;()-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;memFn&lt;/span&gt;() ; &lt;span class=&quot;hljs-comment&quot;&gt;// use lock to get a shared_ptr &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//   ^^^ Can lead to exception if the shared ptr has gone out of scope&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!wk.&lt;span class=&quot;hljs-built_in&quot;&gt;expired&lt;/span&gt;()) wk.&lt;span class=&quot;hljs-built_in&quot;&gt;lock&lt;/span&gt;()-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;memFn&lt;/span&gt;() ;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Check if shared ptr has gone out of scope before access&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See : &lt;a href=&quot;https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful&quot;&gt;When is std::weak_ptr useful?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Unique Pointer :&lt;/strong&gt; \n    Light weight smart pointer with exclusive ownership. Use when pointer points to unique objects without sharing the objects between the pointers.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;uptr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T)&lt;/span&gt;&lt;/span&gt;;\nuptr-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;memFn&lt;/span&gt;(); \n\n&lt;span class=&quot;hljs-comment&quot;&gt;//T * ptr = uptr.release(); // uptr becomes null and object is pointed to by ptr&lt;/span&gt;\nuptr.&lt;span class=&quot;hljs-built_in&quot;&gt;reset&lt;/span&gt;() ; &lt;span class=&quot;hljs-comment&quot;&gt;// deletes the object pointed to by uptr &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To change the object pointed to by the unique ptr , use move semantics&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;uptr1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;unique_ptr&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;uptr2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T)&lt;/span&gt;&lt;/span&gt;;\nuptr2 = std::&lt;span class=&quot;hljs-built_in&quot;&gt;move&lt;/span&gt;(uptr1); \n&lt;span class=&quot;hljs-comment&quot;&gt;// object pointed by uptr2 is deleted and &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// object pointed by uptr1 is pointed to by uptr2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// uptr1 becomes null &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;References : \n    They can essentially be though of as const pointers, ie a pointer which is const and cannot be moved with better syntax.&lt;/p&gt;\n\n&lt;p&gt;See : &lt;a href=&quot;https://stackoverflow.com/questions/57483/what-are-the-differences-between-a-pointer-variable-and-a-reference-variable-in&quot;&gt;What are the differences between a pointer variable and a reference variable in C++?&lt;/a&gt;  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;r-value reference : reference to a temporary object   \nl-value reference : reference to an object whose address can be obtained\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; reference : reference to a data type which is &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; cannot be modified \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reference : \n&lt;a href=&quot;https://www.youtube.com/channel/UCEOGtxYTB6vo6MQ-WQ9W_nQ&quot; rel=&quot;noreferrer&quot;&gt;https://www.youtube.com/channel/UCEOGtxYTB6vo6MQ-WQ9W_nQ&lt;/a&gt; \nThanks to Andre for pointing out this question.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Smart_pointer&quot; rel=&quot;noreferrer&quot;&gt;http://en.wikipedia.org/wiki/Smart_pointer&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In computer science, a smart pointer\n  is an abstract data type that\n  simulates a pointer while providing\n  additional features, such as automatic\n  garbage collection or bounds checking.\n  These additional features are intended\n  to reduce bugs caused by the misuse of\n  pointers while retaining efficiency.\n  Smart pointers typically keep track of\n  the objects that point to them for the\n  purpose of memory management. The\n  misuse of pointers is a major source\n  of bugs: the constant allocation,\n  deallocation and referencing that must\n  be performed by a program written\n  using pointers makes it very likely\n  that some memory leaks will occur.\n  Smart pointers try to prevent memory\n  leaks by making the resource\n  deallocation automatic: when the\n  pointer to an object (or the last in a\n  series of pointers) is destroyed, for\n  example because it goes out of scope,\n  the pointed object is destroyed too.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;A smart pointer is a class, a wrapper of a normal pointer. Unlike normal pointers, smart points life circle is based on a reference count (how many time the smart pointer object is assigned). So whenever a smart pointer is assigned to another one, the internal reference count plus plus. And whenever the object goes out of scope, the reference count minus minus.&lt;/p&gt;\n\n&lt;p&gt;Automatic pointer, though looks similar, is totally different from smart pointer. It is a convenient class that deallocates the resource whenever an automatic pointer object goes out of variable scope. To some extent, it makes a pointer (to dynamically allocated memory) works similar to a stack variable (statically allocated in compiling time).&lt;/p&gt;\n    ","\n&lt;p&gt;What is a smart pointer.&lt;/p&gt;\n&lt;p&gt;Long version, In principle:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1192/lectures/lecture15/15_RAII.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1192/lectures/lecture15/15_RAII.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;A modern C++ idiom:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;RAII: Resource Acquisition Is Initialization.\n\n When you initialize an object, &lt;span class=&quot;hljs-function&quot;&gt;it should already have \n  acquired any resources it &lt;span class=&quot;hljs-title&quot;&gt;needs&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(in the constructor)&lt;/span&gt;.\n\n\n When an object goes out of scope, it should release every \n  resource it is &lt;span class=&quot;hljs-title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; the destructor)&lt;/span&gt;.\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;key point:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; There should never be a half-ready &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; half-dead object.\n When an object is created, it should be in a ready state.\n When an object goes out of scope, it should release its resources. \n The user shouldnt have to &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; anything more. \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Raw Pointers violate RAII&lt;/strong&gt;: It need user to delete manually when the pointers go out of scope.&lt;/p&gt;\n&lt;p&gt;RAII solution is:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Have a smart pointer &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;:\n Allocates the memory when initialized\n Frees the memory when destructor is called\n Allows access to underlying pointer\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For smart pointer need copy and share, use shared_ptr:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; use another memory to store Reference counting &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; shared.\n increment when copy, decrement when destructor.\n &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; memory when Reference counting is &lt;span class=&quot;hljs-number&quot;&gt;0.&lt;/span&gt; \n  also &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; memory that store Reference counting.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for smart pointer not own the raw pointer, use weak_ptr:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; change Reference counting.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;shared_ptr usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;correct way:\nstd::shared_ptr&amp;lt;T&amp;gt; t1 = std::&lt;span class=&quot;hljs-built_in&quot;&gt;make_shared&lt;/span&gt;&amp;lt;T&amp;gt;(TArgs);\nstd::shared_ptr&amp;lt;T&amp;gt; t2 = std::&lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt;(Targs));\n\nwrong way:\nT* pt = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;T&lt;/span&gt;(TArgs); &lt;span class=&quot;hljs-comment&quot;&gt;// never exposure the raw pointer&lt;/span&gt;\nshared_ptr&amp;lt;T&amp;gt; t1 = &lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;T&amp;gt;(pt);\nshared_ptr&amp;lt;T&amp;gt; t2 = &lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;T&amp;gt;(pt);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Always avoid using raw pointer.&lt;/p&gt;\n&lt;p&gt;For scenario that have to use raw pointer:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/19432062/2482283&quot;&gt;https://stackoverflow.com/a/19432062/2482283&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For raw pointer that not nullptr, use reference instead.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; use T*\nuse T&amp;amp;  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For optional reference which maybe nullptr, use raw pointer, and which means:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T* pt; is optional reference &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; maybe &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;.\nNot own the raw pointer, \nRaw pointer is managed by some one &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;.\nI only know that the caller is sure it is &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; released now.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Smart Pointers are those where you don&apos;t have to worry about Memory De-Allocation, Resource Sharing and Transfer. &lt;/p&gt;\n\n&lt;p&gt;You can very well use these pointer in the similar way as any allocation works in Java. In java Garbage Collector does the trick, while in Smart Pointers, the trick is done by Destructors.&lt;/p&gt;\n    ","\n&lt;p&gt;The existing answers are good but don&apos;t cover what to do when a smart pointer is not the (complete) answer to the problem you are trying to solve.&lt;/p&gt;\n\n&lt;p&gt;Among other things (explained well in other answers) using a smart pointer is a possible solution to &lt;a href=&quot;https://stackoverflow.com/questions/48454208/how-do-we-use-a-abstract-class-as-a-function-return-type&quot;&gt;How do we use a abstract class as a function return type?&lt;/a&gt; which has been marked as a duplicate of this question. However, the first question to ask if tempted to specify an abstract (or in fact, any) base class as a return type in C++ is &quot;what do you really mean?&quot;. There is a good discussion (with further references) of idiomatic object oriented programming in C++ (and how this is different to other languages) in the documentation of the &lt;a href=&quot;http://www.boost.org/doc/libs/1_66_0/libs/ptr_container/doc/guidelines.html#recommended-practice-for-object-oriented-programming&quot; rel=&quot;nofollow noreferrer&quot;&gt;boost pointer container library&lt;/a&gt;. In summary, in C++ you have to think about ownership. Which smart pointers help you with, but are not the only solution, or always a complete solution (they don&apos;t give you polymorphic copy) and are not always a solution you want to expose in your interface (and a function return sounds an awful lot like an interface). It might be sufficient to return a reference, for example. But in all of these cases (smart pointer, pointer container or simply returning a reference) you have changed the return from a &lt;em&gt;value&lt;/em&gt; to some form of &lt;em&gt;reference&lt;/em&gt;. If you really needed copy you may need to add more boilerplate &quot;idiom&quot; or move beyond idiomatic (or otherwise) OOP in C++ to more generic polymorphism using libraries like &lt;a href=&quot;http://stlab.adobe.com/group__poly__related.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Adobe Poly&lt;/a&gt; or &lt;a href=&quot;http://www.boost.org/doc/libs/1_66_0/doc/html/boost_typeerasure.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Boost.TypeErasure&lt;/a&gt;.&lt;/p&gt;\n    "],"415":["\n&lt;p&gt;Use &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;GroupBy.sum&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;]).&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;()\n\nOut[&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;]: \n               Number\nFruit   Name         \nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n        Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n        Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n        Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n        Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n        Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also you can use agg function,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].agg(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to keep the original columns &lt;code&gt;Fruit&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt;, use &lt;code&gt;reset_index()&lt;/code&gt;. Otherwise &lt;code&gt;Fruit&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; will become part of the index. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;().reset_index()\n\nFruit   Name       Number\nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\nApples  Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nApples  Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\nGrapes  Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\nGrapes  Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\nOranges Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\nOranges Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As seen in the other answers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;()\n\n               Number\nFruit   Name         \nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n        Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n        Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n        Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n        Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n        Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Both the other answers accomplish what you want.  &lt;/p&gt;\n\n&lt;p&gt;You can use the &lt;code&gt;pivot&lt;/code&gt; functionality to arrange the data in a nice table&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;],as_index = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;().pivot(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;).fillna(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n\n\n\nName    Bob     Mike    Steve   Tom    Tony\nFruit                   \nApples  &lt;span class=&quot;hljs-number&quot;&gt;16.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;10.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nGrapes  &lt;span class=&quot;hljs-number&quot;&gt;35.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;87.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;\nOranges &lt;span class=&quot;hljs-number&quot;&gt;67.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;57.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can select different columns to sum numbers. &lt;/p&gt;\n    ","\n&lt;p&gt;A variation on the .agg() function; provides the ability to (1) persist type DataFrame, (2) apply averages, counts, summations, etc. and (3) enables groupby on multiple columns while maintaining legibility. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;att1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;att2&apos;&lt;/span&gt;]).agg({&lt;span class=&quot;hljs-string&quot;&gt;&apos;att1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;count&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;att3&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;sum&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;att4&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;mean&apos;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;using your values... &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;]).agg({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;sum&quot;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can set the &lt;code&gt;groupby&lt;/code&gt; column to  &lt;code&gt;index&lt;/code&gt;  then using &lt;code&gt;sum&lt;/code&gt; with &lt;code&gt;level&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.set_index([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;]).&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(level=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;175&lt;/span&gt;]: \n               Number\nFruit   Name         \nApples  Bob        &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n        Mike        &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n        Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nOranges Bob        &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n        Mike       &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n        Tony        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nGrapes  Bob        &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n        Tom        &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n        Tony       &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could also use &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html&quot; rel=&quot;noreferrer&quot;&gt;transform()&lt;/a&gt; on column &lt;code&gt;Number&lt;/code&gt; after group by. This operation will calculate the total number in one group with function &lt;code&gt;sum&lt;/code&gt;, the result is a series with the same index as original dataframe.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;] = df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;])[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;].transform(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;)\ndf = df.drop_duplicates(subset=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;]).drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Date&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, you can drop the duplicate rows on column &lt;code&gt;Fruit&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt;. Moreover, you can drop the column &lt;code&gt;Date&lt;/code&gt; by specifying axis &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt; for rows and &lt;code&gt;1&lt;/code&gt; for columns).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# print(df)&lt;/span&gt;\n\n      Fruit   Name  Number\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    Apples    Bob      &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    Apples   Mike       &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    Apples  Steve      &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   Oranges    Bob      &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   Oranges    Tom      &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   Oranges   Mike      &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   Oranges   Tony       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;   Grapes    Bob      &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;   Grapes    Tom      &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;   Grapes   Tony      &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# You could achieve the same result with functions discussed by others: &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# print(df.groupby([&apos;Fruit&apos;, &apos;Name&apos;], as_index=False)[&apos;Number&apos;].sum())&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# print(df.groupby([&apos;Fruit&apos;, &apos;Name&apos;], as_index=False)[&apos;Number&apos;].agg(&apos;sum&apos;))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is an official tutorial &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html&quot; rel=&quot;noreferrer&quot;&gt;Group by: split-apply-combine&lt;/a&gt; talking about what you can do after group by.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use dfsql&lt;br&gt;\nfor your problem, it will look something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.sql(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT fruit, sum(number) GROUP BY fruit&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/mindsdb/dfsql&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/mindsdb/dfsql&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;here is an article about it:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://medium.com/riselab/why-every-data-scientist-using-pandas-needs-modin-bringing-sql-to-dataframes-3b216b29a7c0&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://medium.com/riselab/why-every-data-scientist-using-pandas-needs-modin-bringing-sql-to-dataframes-3b216b29a7c0&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you want the aggregated column to have a custom name such as &lt;code&gt;Total Number&lt;/code&gt;, &lt;code&gt;Total&lt;/code&gt; etc. (all the solutions on here results in a dataframe where the aggregate column is named &lt;code&gt;Number&lt;/code&gt;), use named aggregation:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;], as_index=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).agg(**{&lt;span class=&quot;hljs-string&quot;&gt;&apos;Total Number&apos;&lt;/span&gt;: (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;)})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or (if the custom name doesn&apos;t need to have a white space in it):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.groupby([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Fruit&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;], as_index=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;).agg(Total=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sum&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this is equivalent to SQL query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Fruit, Name, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(Number) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; df \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Fruit, Name\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Speaking of SQL, there&apos;s &lt;code&gt;pandasql&lt;/code&gt; module that allows you to query pandas dataFrames in the local environment using SQL syntax. It&apos;s not part of Pandas, so will have to be installed separately.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#! pip install pandasql&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pandasql &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sqldf\nsqldf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nSELECT Fruit, Name, sum(Number) AS Total\nFROM df \nGROUP BY Fruit, Name\n&quot;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"40","randomQuestions":[{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"How to print without a newline or space","slug":"how-to-print-without-a-newline-or-space-1657387814213"},{"title":"How can I make an AJAX call without jQuery?","slug":"how-can-i-make-an-ajax-call-without-jquery-1657388448955"},{"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"MySQL Error 1093 - Can't specify target table for update in FROM clause","slug":"mysql-error-1093-can't-specify-target-table-for-update-in-from-clause-1657388078961"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"How do I sort a dictionary by value?","slug":"how-do-i-sort-a-dictionary-by-value-1657385485049"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"How should I use servlets and Ajax?","slug":"how-should-i-use-servlets-and-ajax-1657385492684"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"Is there a RegExp.escape function in JavaScript?","slug":"is-there-a-regexp.escape-function-in-javascript-1657387606651"},{"title":"Correctly allocating multi-dimensional arrays","slug":"correctly-allocating-multi-dimensional-arrays-1657387733756"},{"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"}]},"__N_SSG":true}