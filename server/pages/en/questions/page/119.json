{"pageProps":{"data":{"count":610,"rows":[{"id":20,"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445","postType":"QUESTION","createdAt":"2022-07-09T16:31:31.000Z","updatedAt":"2022-07-09T16:31:31.000Z","tags":[]},{"id":19,"title":"Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference","slug":"why-is-my-variable-unaltered-after-i-modify-it-inside-of-a-function-asynchronous-code-reference-1657384288966","postType":"QUESTION","createdAt":"2022-07-09T16:31:28.000Z","updatedAt":"2022-07-09T16:31:28.000Z","tags":[]},{"id":18,"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300","postType":"QUESTION","createdAt":"2022-07-09T16:31:26.000Z","updatedAt":"2022-07-09T16:31:26.000Z","tags":[{"id":59,"name":"excel","slug":"excel","createdAt":"2022-07-09T16:31:26.000Z","updatedAt":"2022-07-09T16:31:26.000Z","Questions_Tags":{"questionId":18,"tagId":59}},{"id":60,"name":"vba","slug":"vba","createdAt":"2022-07-09T16:31:26.000Z","updatedAt":"2022-07-09T16:31:26.000Z","Questions_Tags":{"questionId":18,"tagId":60}}]},{"id":17,"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261","postType":"QUESTION","createdAt":"2022-07-09T16:31:23.000Z","updatedAt":"2022-07-09T16:31:23.000Z","tags":[{"id":57,"name":"callback","slug":"callback","createdAt":"2022-07-09T16:31:23.000Z","updatedAt":"2022-07-09T16:31:23.000Z","Questions_Tags":{"questionId":17,"tagId":57}},{"id":58,"name":"this","slug":"this","createdAt":"2022-07-09T16:31:23.000Z","updatedAt":"2022-07-09T16:31:23.000Z","Questions_Tags":{"questionId":17,"tagId":58}}]},{"id":16,"title":"JavaScript closure inside loops â€“ simple practical example","slug":"javascript-closure-inside-loops-simple-practical-example-1657384278449","postType":"QUESTION","createdAt":"2022-07-09T16:31:18.000Z","updatedAt":"2022-07-09T16:31:18.000Z","tags":[{"id":54,"name":"loops","slug":"loops","createdAt":"2022-07-09T16:31:19.000Z","updatedAt":"2022-07-09T16:31:19.000Z","Questions_Tags":{"questionId":16,"tagId":54}},{"id":55,"name":"closures","slug":"closures","createdAt":"2022-07-09T16:31:19.000Z","updatedAt":"2022-07-09T16:31:19.000Z","Questions_Tags":{"questionId":16,"tagId":55}}]}]},"answers":{"16":["\n&lt;p&gt;Well, the problem is that the variable &lt;code&gt;i&lt;/code&gt;, within each of your anonymous functions, is bound to the same variable outside of the function.&lt;/p&gt;\n&lt;h1&gt;ES6 solution: &lt;code&gt;let&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;ECMAScript 6 (ES6) introduces new &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords that are scoped differently than &lt;code&gt;var&lt;/code&gt;-based variables. For example, in a loop with a &lt;code&gt;let&lt;/code&gt;-based index, each iteration through the loop will have a new variable &lt;code&gt;i&lt;/code&gt; with loop scope, so your code would work as you expect. There are many resources, but I&apos;d recommend &lt;a href=&quot;http://www.2ality.com/2015/02/es6-scoping.html&quot; rel=&quot;noreferrer&quot;&gt;2ality&apos;s block-scoping post&lt;/a&gt; as a great source of information.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Beware, though, that IE9-IE11 and Edge prior to Edge 14 support &lt;code&gt;let&lt;/code&gt; but get the above wrong (they don&apos;t create a new &lt;code&gt;i&lt;/code&gt; each time, so all the functions above would log 3 like they would if we used &lt;code&gt;var&lt;/code&gt;). Edge 14 finally gets it right.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;ES5.1 solution: forEach&lt;/h1&gt;\n&lt;p&gt;With the relatively widespread availability of the &lt;code&gt;Array.prototype.forEach&lt;/code&gt; function (in 2015), it&apos;s worth noting that in those situations involving iteration primarily over an array of values, &lt;code&gt;.forEach()&lt;/code&gt; provides a clean, natural way to get a distinct closure for every iteration. That is, assuming you&apos;ve got some sort of array containing values (DOM references, objects, whatever), and the problem arises of setting up callbacks specific to each element, you can do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someArray = [ &lt;span class=&quot;hljs-comment&quot;&gt;/* whatever */&lt;/span&gt; ];\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\nsomeArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrayElement&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ... code code code for this one element&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;someAsynchronousFunction&lt;/span&gt;(arrayElement, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    arrayElement.&lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;();\n  });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The idea is that each invocation of the callback function used with the &lt;code&gt;.forEach&lt;/code&gt; loop will be its own closure. The parameter passed in to that handler is the array element specific to that particular step of the iteration. If it&apos;s used in an asynchronous callback, it won&apos;t collide with any of the other callbacks established at other steps of the iteration.&lt;/p&gt;\n&lt;p&gt;If you happen to be working in jQuery, the &lt;code&gt;$.each()&lt;/code&gt; function gives you a similar capability.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Classic solution: Closures&lt;/h1&gt;\n&lt;p&gt;What you want to do is bind the variable within each function to a separate, unchanging value outside of the function:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(i);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Since there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of &quot;i&quot; remains as you intended.&lt;/p&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index);\n        };\n    }(i));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; (2014):&lt;/p&gt;\n\n&lt;p&gt;Personally I think @Aust&apos;s &lt;a href=&quot;https://stackoverflow.com/a/19323214/918959&quot;&gt;more recent answer about using &lt;code&gt;.bind&lt;/code&gt;&lt;/a&gt; is the best way to do this kind of thing now. There&apos;s also lo-dash/underscore&apos;s &lt;code&gt;_.partial&lt;/code&gt; when you don&apos;t need or want to mess with &lt;code&gt;bind&lt;/code&gt;&apos;s &lt;code&gt;thisArg&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way that hasn&apos;t been mentioned yet is the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value: &apos;&lt;/span&gt; + x);\n  }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As pointed out by @squint and @mekdev, you get better performance by creating the function outside the loop first and then binding the results within the loop.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value: &apos;&lt;/span&gt; + x);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = log.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, i);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using an &lt;a href=&quot;http://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot; rel=&quot;noreferrer&quot;&gt;Immediately-Invoked Function Expression&lt;/a&gt;, the simplest and most readable way to enclose an index variable:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;iterator: &apos;&lt;/span&gt; + index);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//now you can also loop an ajax call here &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//without losing track of the iterator value:   $.ajax({});&lt;/span&gt;\n    \n    })(i);\n\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This sends the iterator &lt;code&gt;i&lt;/code&gt; into the anonymous function of which we define as &lt;code&gt;index&lt;/code&gt;.  This creates a closure, where the variable &lt;code&gt;i&lt;/code&gt; gets saved for later use in any asynchronous functionality within the IIFE.&lt;/p&gt;\n    ","\n&lt;p&gt;Bit late to the party, but I was exploring this issue today and noticed that many of the answers don&apos;t completely address how Javascript treats scopes, which is essentially what this boils down to.&lt;/p&gt;\n&lt;p&gt;So as many others mentioned, the problem is that the inner function is referencing the same &lt;code&gt;i&lt;/code&gt; variable. So why don&apos;t we just create a new local variable each iteration, and have the inner function reference that instead?&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ilocal = i; &lt;span class=&quot;hljs-comment&quot;&gt;//create a new local variable&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + ilocal); &lt;span class=&quot;hljs-comment&quot;&gt;//each should reference its own local variable&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Just like before, where each inner function outputted the last value assigned to &lt;code&gt;i&lt;/code&gt;, now each inner function just outputs the last value assigned to &lt;code&gt;ilocal&lt;/code&gt;. But shouldn&apos;t each iteration have it&apos;s own &lt;code&gt;ilocal&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;Turns out, that&apos;s the issue. Each iteration is sharing the same scope, so every iteration after the first is just overwriting &lt;code&gt;ilocal&lt;/code&gt;. From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block#No_block_scope&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although &quot;standalone&quot; blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don&apos;t do what you think they do, if you think they do anything like such blocks in C or Java.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Reiterated for emphasis:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;h2&gt;JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script&lt;/h2&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;We can see this by checking &lt;code&gt;ilocal&lt;/code&gt; before we declare it in each iteration:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(ilocal);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ilocal = i;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;This is exactly why this bug is so tricky. Even though you are redeclaring a variable, Javascript won&apos;t throw an error, and JSLint won&apos;t even throw a warning. This is also why the best way to solve this is to take advantage of closures, which is essentially the idea that in Javascript, inner functions have access to outer variables because inner scopes &quot;enclose&quot; outer scopes.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/60fH9.png&quot; alt=&quot;Closures&quot;&gt;&lt;/p&gt;\n&lt;p&gt;This also means that inner functions &quot;hold onto&quot; outer variables and keep them alive, even if the outer function returns. To utilize this, we create and call a wrapper function purely to make a new scope, declare &lt;code&gt;ilocal&lt;/code&gt; in the new scope, and return an inner function that uses &lt;code&gt;ilocal&lt;/code&gt; (more explanation below):&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//create a new scope using a wrapper function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ilocal = i; &lt;span class=&quot;hljs-comment&quot;&gt;//capture i into a local var&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//return the inner function&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + ilocal);\n        };\n    })(); &lt;span class=&quot;hljs-comment&quot;&gt;//remember to run the wrapper function&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Creating the inner function inside a wrapper function gives the inner function a private environment that only it can access, a &quot;closure&quot;. Thus, every time we call the wrapper function we create a new inner function with it&apos;s own separate environment, ensuring that the &lt;code&gt;ilocal&lt;/code&gt; variables don&apos;t collide and overwrite each other. A few minor optimizations gives the final answer that many other SO users gave:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//creates a separate environment for the inner function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ilocal&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//return the inner function&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + ilocal);\n    };\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;With ES6 now mainstream, we can now use the new &lt;code&gt;let&lt;/code&gt; keyword to create block-scoped variables:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) { &lt;span class=&quot;hljs-comment&quot;&gt;// use &quot;let&quot; to declare &quot;i&quot;&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;//each should reference its own local variable&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) { &lt;span class=&quot;hljs-comment&quot;&gt;// we can use &quot;var&quot; here without issue&lt;/span&gt;\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Look how easy it is now! For more information see &lt;a href=&quot;https://stackoverflow.com/a/16661498/1852456&quot;&gt;this answer&lt;/a&gt;, which my info is based off of.&lt;/p&gt;\n    ","\n&lt;p&gt;With ES6 now widely supported, the best answer to this question has changed.  ES6 provides the &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords for this exact circumstance.  Instead of messing around with closures, we can just use &lt;code&gt;let&lt;/code&gt; to set a loop scope variable like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          \n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            \n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); \n    };\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;val&lt;/code&gt; will then point to an object that is specific to that particular turn of the loop, and will return the correct value without the additional closure notation.  This obviously significantly simplifies this problem.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is similar to &lt;code&gt;let&lt;/code&gt; with the additional restriction that the variable name can&apos;t be rebound to a new reference after initial assignment.&lt;/p&gt;\n\n&lt;p&gt;Browser support is now here for those targeting the latest versions of browsers. &lt;code&gt;const&lt;/code&gt;/&lt;code&gt;let&lt;/code&gt; are currently supported in the latest Firefox, Safari, Edge and Chrome. It also is supported in Node, and you can use it anywhere by taking advantage of build tools like Babel.  You can see a working example here: &lt;a href=&quot;http://jsfiddle.net/ben336/rbU4t/2/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/ben336/rbU4t/2/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Docs here:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const&quot; rel=&quot;noreferrer&quot;&gt;const&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot; rel=&quot;noreferrer&quot;&gt;let&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Beware, though, that IE9-IE11 and Edge prior to Edge 14 support &lt;code&gt;let&lt;/code&gt; but get the above wrong (they don&apos;t create a new &lt;code&gt;i&lt;/code&gt; each time, so all the functions above would log 3 like they would if we used &lt;code&gt;var&lt;/code&gt;). Edge 14 finally gets it right.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way of saying it is that the &lt;code&gt;i&lt;/code&gt; in your function is bound at the time of executing the function, not the time of creating the function.&lt;/p&gt;\n\n&lt;p&gt;When you create the closure, &lt;code&gt;i&lt;/code&gt; is a reference to the variable defined in the outside scope, not a copy of it as it was when you created the closure. It will be evaluated at the time of execution.&lt;/p&gt;\n\n&lt;p&gt;Most of the other answers provide ways to work around by creating another variable that won&apos;t change the value for you.&lt;/p&gt;\n\n&lt;p&gt;Just thought I&apos;d add an explanation for clarity. For a solution, personally, I&apos;d go with Harto&apos;s since it is the most self-explanatory way of doing it from the answers here. Any of the code posted will work, but I&apos;d opt for a closure factory over having to write a pile of comments to explain why I&apos;m declaring a new variable(Freddy and 1800&apos;s) or have weird embedded closure syntax(apphacker).&lt;/p&gt;\n    ","\n&lt;p&gt;What you need to understand is the scope of the variables in javascript is based on the function. This is an important difference than say c# where you have block scope, and just copying the variable to one inside the for will work.&lt;/p&gt;\n\n&lt;p&gt;Wrapping it in a function that evaluates returning the function like apphacker&apos;s answer will do the trick, as the variable now has the function scope.&lt;/p&gt;\n\n&lt;p&gt;There is also a let keyword instead of var, that would allow using the block scope rule. In that case defining a variable inside the for would do the trick. That said, the let keyword isn&apos;t a practical solution because of compatibility.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = i; &lt;span class=&quot;hljs-comment&quot;&gt;//add this&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index); &lt;span class=&quot;hljs-comment&quot;&gt;//change to the copy&lt;/span&gt;\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another variation on the technique, similar to Bjorn&apos;s (apphacker), which lets you assign the variable value inside the function rather than passing it as a parameter, which might be clearer sometimes:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = i;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index);\n        }\n    })();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that whatever technique you use, the &lt;code&gt;index&lt;/code&gt; variable becomes a sort of static variable, bound to the returned copy of the inner function. I.e., changes to its value are preserved between calls. It can be very handy.&lt;/p&gt;\n    ","\n&lt;p&gt;This describes the common mistake with using closures in JavaScript.&lt;/p&gt;\n\n&lt;h2&gt;A function defines a new environment&lt;/h2&gt;\n\n&lt;p&gt;Consider:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt; ++;},\n    &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;;}\n  };\n}\n\ncounter1 = &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounter&lt;/span&gt;();\ncounter2 = &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounter&lt;/span&gt;();\n\ncounter1.&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counter1.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counter2.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For each time &lt;code&gt;makeCounter&lt;/code&gt; is invoked, &lt;code&gt;{counter: 0}&lt;/code&gt; results in a new object being created. Also, a new copy of &lt;code&gt;obj&lt;/code&gt; \nis created as well to reference the new object. Thus, &lt;code&gt;counter1&lt;/code&gt; and &lt;code&gt;counter2&lt;/code&gt; are independent of each other.&lt;/p&gt;\n\n&lt;h2&gt;Closures in loops&lt;/h2&gt;\n\n&lt;p&gt;Using a closure in a loop is tricky.&lt;/p&gt;\n\n&lt;p&gt;Consider: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; counters = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounters&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; num; i++)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n    counters[i] = {\n      &lt;span class=&quot;hljs-attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;++;},\n      &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;;}\n    }; \n  }\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;makeCounters&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\ncounters[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counters[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counters[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that &lt;code&gt;counters[0]&lt;/code&gt; and &lt;code&gt;counters[1]&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; independent. In fact, they operate on the same &lt;code&gt;obj&lt;/code&gt;!&lt;/p&gt;\n\n&lt;p&gt;This is because there is only one copy of &lt;code&gt;obj&lt;/code&gt; shared across all iterations of the loop, perhaps for performance reasons.\nEven though &lt;code&gt;{counter: 0}&lt;/code&gt; creates a new object in each iteration, the same copy of &lt;code&gt;obj&lt;/code&gt; will just get updated with a\nreference to the newest object.&lt;/p&gt;\n\n&lt;p&gt;Solution is to use another helper function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeHelper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;++;},\n    &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;;}\n  }; \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounters&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; num; i++)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n    counters[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;makeHelper&lt;/span&gt;(obj);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works because local variables in the function scope directly, as well as function argument variables, are allocated \nnew copies upon entry.&lt;/p&gt;\n    ","\n&lt;p&gt;The most simple solution would be,&lt;/p&gt;\n\n&lt;p&gt;Instead of using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++){\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++){\n    funcs[j]();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which alerts &quot;2&quot;, for 3 times. This is because anonymous functions created in for loop, shares same closure, and in that closure, the value of &lt;code&gt;i&lt;/code&gt; is the same. Use this to prevent shared closure:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; new_i =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; new_i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; new_i++){\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\n        funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n        }\n    })(new_i);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++){\n    funcs[j]();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The idea behind this is, encapsulating the entire body of the for loop with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot; rel=&quot;noreferrer&quot;&gt;IIFE&lt;/a&gt; (Immediately-Invoked Function Expression) and passing &lt;code&gt;new_i&lt;/code&gt; as a parameter and capturing it as &lt;code&gt;i&lt;/code&gt;. Since the anonymous function is executed immediately, the &lt;code&gt;i&lt;/code&gt; value is different for each function defined inside the anonymous function.&lt;/p&gt;\n\n&lt;p&gt;This solution seems to fit any such problem since it will require minimal changes to the original code suffering from this issue. In fact, this is by design, it should not be an issue at all!&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple solution that uses &lt;code&gt;forEach&lt;/code&gt; (works back to IE9):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    };\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Prints:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h2&gt;try this shorter one&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;no array&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;no extra for loop&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(i)();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);};\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/7P6EN/&quot;&gt;http://jsfiddle.net/7P6EN/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The main issue with the code shown by the OP is that &lt;code&gt;i&lt;/code&gt; is never read until the second loop. To demonstrate, imagine seeing an error inside of the code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The error actually does not occur until &lt;code&gt;funcs[someIndex]&lt;/code&gt; is executed &lt;code&gt;()&lt;/code&gt;. Using this same logic, it should be apparent that the value of &lt;code&gt;i&lt;/code&gt; is also not collected until this point either. Once the original loop finishes, &lt;code&gt;i++&lt;/code&gt; brings &lt;code&gt;i&lt;/code&gt; to the value of &lt;code&gt;3&lt;/code&gt; which results in the condition &lt;code&gt;i &amp;lt; 3&lt;/code&gt; failing and the loop ending. At this point, &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt; and so when &lt;code&gt;funcs[someIndex]()&lt;/code&gt; is used, and &lt;code&gt;i&lt;/code&gt; is evaluated, it is 3 - every time.&lt;/p&gt;\n\n&lt;p&gt;To get past this, you must evaluate &lt;code&gt;i&lt;/code&gt; as it is encountered. Note that this has already happened in the form of &lt;code&gt;funcs[i]&lt;/code&gt; (where there are 3 unique indexes). There are several ways to capture this value. One is to pass it in as a parameter to a function which is shown in several ways already here. &lt;/p&gt;\n\n&lt;p&gt;Another option is to construct a function object which will be able to close over the variable. That can be accomplished thusly&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/QcUjH/&quot;&gt;&lt;code&gt;jsFiddle Demo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; closedVariable = i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + closedVariable); \n    };\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;JavaScript functions &quot;close over&quot; the scope they have access to upon declaration, and retain access to that scope even as variables in that scope change.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i)\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; k += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[k]()\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Each function in the array above closes over the global scope (global, simply because that happens to be the scope they&apos;re declared in).&lt;/p&gt;\n\n&lt;p&gt;Later those functions are invoked logging the most current value of &lt;code&gt;i&lt;/code&gt; in the global scope. That&apos;s the magic, and frustration, of closure.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&quot;JavaScript Functions close over the scope they are declared in, and retain access to that scope even as variable values inside of that scope change.&quot;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;let&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; solves this by creating a new scope each time the &lt;code&gt;for&lt;/code&gt; loop runs, creating a separated scope for each function to close over. Various other techniques do the same thing with extra functions.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i)\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; k += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[k]()\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;(&lt;code&gt;let&lt;/code&gt; makes variables block scoped. Blocks are denoted by curly braces, but in the case of the for loop the initialization variable, &lt;code&gt;i&lt;/code&gt; in our case, is considered to be declared in the braces.)&lt;/p&gt;\n    ","\n&lt;p&gt;After reading through various solutions, I&apos;d like to add that the reason those solutions work is to rely on the concept of &lt;strong&gt;scope chain&lt;/strong&gt;. It&apos;s the way JavaScript resolve a variable during execution.  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Each function definition forms a scope consisting of all the local \nvariables declared by &lt;code&gt;var&lt;/code&gt; and its &lt;code&gt;arguments&lt;/code&gt;.   &lt;/li&gt;\n&lt;li&gt;If we have inner function defined inside another (outer) function, this \nforms a chain, and will be used during execution   &lt;/li&gt;\n&lt;li&gt;When a function gets executed, the runtime evaluates variables by searching the &lt;strong&gt;scope chain&lt;/strong&gt;. If a variable can be found in a certain point of the chain it will stop searching and use it, otherwise it continues until the global scope reached which belongs to &lt;code&gt;window&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In the initial code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {         \n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {        &lt;span class=&quot;hljs-comment&quot;&gt;// function inner&apos;s scope contains nothing&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);    \n  };\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;)                  &lt;span class=&quot;hljs-comment&quot;&gt;// test value &apos;i&apos;, print 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;funcs&lt;/code&gt; gets executed, the scope chain will be &lt;code&gt;function inner -&amp;gt; global&lt;/code&gt;. Since the variable &lt;code&gt;i&lt;/code&gt; cannot be found in &lt;code&gt;function inner&lt;/code&gt; (neither declared using &lt;code&gt;var&lt;/code&gt; nor passed as arguments), it continues to search, until the value of &lt;code&gt;i&lt;/code&gt; is eventually found in the global scope which is &lt;code&gt;window.i&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;By wrapping it in an outer function either explicitly define a helper function like &lt;a href=&quot;https://stackoverflow.com/a/750506&quot;&gt;harto&lt;/a&gt; did or use an anonymous function like &lt;a href=&quot;https://stackoverflow.com/a/750495&quot;&gt;Bjorn&lt;/a&gt; did:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {              &lt;span class=&quot;hljs-comment&quot;&gt;// function outer&apos;s scope contains &apos;i&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {      &lt;span class=&quot;hljs-comment&quot;&gt;// function inner, closure created&lt;/span&gt;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(i);\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;)          &lt;span class=&quot;hljs-comment&quot;&gt;// print 3 still&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;funcs&lt;/code&gt; gets executed, now the scope chain will be &lt;code&gt;function inner -&amp;gt; function outer&lt;/code&gt;. This time &lt;code&gt;i&lt;/code&gt; can be found in the outer function&apos;s scope which is executed 3 times in the for loop, each time has value &lt;code&gt;i&lt;/code&gt; bound correctly. It won&apos;t use the value of &lt;code&gt;window.i&lt;/code&gt; when inner executed.&lt;/p&gt;\n\n&lt;p&gt;More detail can be found &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;br&gt;\nIt includes the common mistake in creating closure in the loop as what we have here, as well as why we need closure and the performance consideration.&lt;/p&gt;\n    ","\n&lt;p&gt;With new features of ES6 block level scoping is managed:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code in OP&apos;s question is replaced with &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m surprised no one yet has suggested using the &lt;code&gt;forEach&lt;/code&gt; function to better avoid (re)using local variables. In fact, I&apos;m not using &lt;code&gt;for(var i ...)&lt;/code&gt; at all anymore for this reason.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){ &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value:&apos;&lt;/span&gt;, i); });\n&lt;span class=&quot;hljs-comment&quot;&gt;// My value: 0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// My value: 2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// My value: 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;// edited to use &lt;code&gt;forEach&lt;/code&gt; instead of map.&lt;/p&gt;\n    ","\n&lt;p&gt;This question really shows the history of JavaScript! Now we can avoid block scoping with arrow functions and handle loops directly from DOM nodes using Object methods.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; funcs = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i));\nfuncs.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; buttons = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(buttons)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; buttons[i].&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i)));&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif22&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;We will check , what actually happens when you declare &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;\none by one.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;&lt;strong&gt;Case1&lt;/strong&gt; : &lt;strong&gt;using &lt;code&gt;var&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n     funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;debugger&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n     };\n   }\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(funcs);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now open your &lt;strong&gt;chrome console window&lt;/strong&gt; by pressing &lt;strong&gt;F12&lt;/strong&gt; and refresh the page.\nExpend every 3 functions inside the array.You will see an property called &lt;code&gt;[[Scopes]]&lt;/code&gt;.Expand that one. You will see one\narray object called &lt;code&gt;&quot;Global&quot;&lt;/code&gt;,expand that one. You will find a property &lt;code&gt;&apos;i&apos;&lt;/code&gt; declared into the object which having value 3.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/f6I2J.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/f6I2J.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/kF3Yv.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/kF3Yv.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;When you declare a variable using &lt;code&gt;&apos;var&apos;&lt;/code&gt; outside a function ,it becomes global variable(you can check by typing &lt;code&gt;i&lt;/code&gt; or\n&lt;code&gt;window.i&lt;/code&gt; in console window.It will return 3).&lt;/li&gt;\n&lt;li&gt;The anonymous function you declared will not call and check the value inside the function unless you invoke the\nfunctions.&lt;/li&gt;\n&lt;li&gt;When you invoke the function , &lt;code&gt;console.log(&quot;My value: &quot; + i)&lt;/code&gt; takes the value from its &lt;code&gt;Global&lt;/code&gt; object and display the\nresult.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;&lt;strong&gt;CASE2 : using let&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;Now replace the &lt;code&gt;&apos;var&apos;&lt;/code&gt; with &lt;code&gt;&apos;let&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n        funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;debugger&lt;/span&gt;;\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n        };\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(funcs);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do the same thing, Go to the scopes . Now you will see two objects &lt;code&gt;&quot;Block&quot;&lt;/code&gt; and &lt;code&gt;&quot;Global&quot;&lt;/code&gt;. Now expand &lt;code&gt;Block&lt;/code&gt; object , you\nwill see &apos;i&apos; is defined there , and the strange thing is that , for every functions , the value if &lt;code&gt;i&lt;/code&gt; is different (0 , 1, 2).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/HGqXU.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HGqXU.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you declare variable using &lt;code&gt;&apos;let&apos;&lt;/code&gt; even outside the function but inside the loop , this variable will not be a Global\nvariable , it will become a &lt;code&gt;Block&lt;/code&gt; level variable which is only available for the same function only.That is the reason , we\nare getting value of &lt;code&gt;i&lt;/code&gt; different for each function when we invoke the functions.&lt;/p&gt;\n&lt;p&gt;For more detail about how closer works , please go through the awesome video tutorial &lt;a href=&quot;https://youtu.be/71AtaJpJHw0&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://youtu.be/71AtaJpJHw0&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The reason your original example did not work is that all the closures you created in the loop referenced the same frame. In effect, having 3 methods on one object with only a single &lt;code&gt;i&lt;/code&gt; variable. They all printed out the same value.&lt;/p&gt;\n    ","\n&lt;p&gt;First of all, understand what&apos;s wrong with this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here when the &lt;code&gt;funcs[]&lt;/code&gt; array is being initialized, &lt;code&gt;i&lt;/code&gt; is being incremented, the &lt;code&gt;funcs&lt;/code&gt; array is initialized and the size of &lt;code&gt;func&lt;/code&gt; array becomes 3,  so &lt;code&gt;i = 3,&lt;/code&gt;. \nNow when the &lt;code&gt;funcs[j]()&lt;/code&gt; is called, it is again using the variable &lt;code&gt;i&lt;/code&gt;, which has already been incremented to 3.&lt;/p&gt;\n\n&lt;p&gt;Now to solve this, we have many options. Below are two of them:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;We can initialize &lt;code&gt;i&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; or initialize a new variable &lt;code&gt;index&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; and make it equal to &lt;code&gt;i&lt;/code&gt;. So when the call is being made, &lt;code&gt;index&lt;/code&gt; will be used and its scope will end after initialization. And for calling, &lt;code&gt;index&lt;/code&gt; will be initialized again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          \n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = i;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index); \n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        \n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Other Option can be to introduce a &lt;code&gt;tempFunc&lt;/code&gt; which returns the actual function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tempFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {  \n    funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;tempFunc&lt;/span&gt;(i);                                     \n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        \n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;noreferrer&quot;&gt;closure&lt;/a&gt; structure, this would reduce your extra for loop. You can do it in a single for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {     \n  (funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {         \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); \n  })(i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Till ES5, This problem can only be solved using &lt;strong&gt;closure&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;But now in ES6, we have block level scope variables. Changing &lt;strong&gt;var&lt;/strong&gt; to &lt;strong&gt;let&lt;/strong&gt; in first &lt;strong&gt;for loop&lt;/strong&gt; will solve the problem.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {      &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {          &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n  };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();                      &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif23&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re having this sort of problem with a &lt;code&gt;while&lt;/code&gt; loop, rather than a &lt;code&gt;for&lt;/code&gt; loop, for example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i);\n  }, i * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif24&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The technique to close over the current value is a bit different. Declare a block-scoped variable with &lt;code&gt;const&lt;/code&gt; inside the &lt;code&gt;while&lt;/code&gt; block, and assign the current &lt;code&gt;i&lt;/code&gt; to it. Then, wherever the variable is being used asynchronously, replace &lt;code&gt;i&lt;/code&gt; with the new block-scoped variable:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; thisIterationI = i;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thisIterationI);\n  }, i * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif25&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;For older browsers that don&apos;t support block-scoped variables, you can use an IIFE called with &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;innerI&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(innerI);\n    }, innerI * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n  })(i);\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif26&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If the asynchronous action to be invoked happens to be &lt;code&gt;setTimeout&lt;/code&gt; like the above, you can also call &lt;code&gt;setTimeout&lt;/code&gt; with a &lt;em&gt;third&lt;/em&gt; parameter to indicate the argument to call the passed function with:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(\n    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;thisIterationI&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// Callback&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thisIterationI);\n    },\n    i * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// Delay&lt;/span&gt;\n    i &lt;span class=&quot;hljs-comment&quot;&gt;// Gets passed to the callback; becomes thisIterationI&lt;/span&gt;\n  );\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif27&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You could use a declarative module for lists of data such as &lt;a href=&quot;https://github.com/runefs/query-js&quot; rel=&quot;nofollow&quot;&gt;query-js&lt;/a&gt;(*). In these situations I personally find a declarative approach less surprising&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = &lt;span class=&quot;hljs-title class_&quot;&gt;Query&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n    };\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could then use your second loop and get the expected result or you could do &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs.&lt;span class=&quot;hljs-title function_&quot;&gt;iterate&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;){ &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(*) I&apos;m the author of query-js and therefor biased towards using it, so don&apos;t take my words as a recommendation for said library only for the declarative approach :)&lt;/p&gt;\n    ","\n&lt;p&gt;I prefer to use &lt;code&gt;forEach&lt;/code&gt; function, which has its own closure with creating a pseudo range:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// creating a range&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            \n        &lt;span class=&quot;hljs-comment&quot;&gt;// now i is safely incapsulated &lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n    };\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j](); &lt;span class=&quot;hljs-comment&quot;&gt;// 0, 1, 2&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That looks uglier than ranges in other languages, but IMHO less monstrous than other solutions.&lt;/p&gt;\n    ","\n&lt;p&gt;And yet another solution: instead of creating another loop, just bind the &lt;code&gt;this&lt;/code&gt; to the return function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value: &apos;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;//log value of i.&lt;/span&gt;\n  }.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {  &lt;span class=&quot;hljs-comment&quot;&gt;//5 functions&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;createFunc&lt;/span&gt;(i);     &lt;span class=&quot;hljs-comment&quot;&gt;// call createFunc() i=5 times&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif28&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;By binding &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;, solves the problem as well.&lt;/p&gt;\n    ","\n&lt;p&gt;Many solutions seem correct but they don&apos;t mention it&apos;s called &lt;a href=&quot;https://www.sitepoint.com/currying-in-functional-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Currying&lt;/code&gt;&lt;/a&gt; which is a functional programming design pattern for situations like here. 3-10 times faster than bind depending on the browser.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {      &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;curryShowValue&lt;/span&gt;(i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();                      &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;curryShowValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://jsperf.com/bind-vs-curry&quot; rel=&quot;nofollow noreferrer&quot;&gt;the performance gain in different browsers&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Your code doesn&apos;t work, because what it does is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Create&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`funcs`&lt;/span&gt; and assign it an empty array;  \n&lt;span class=&quot;hljs-title class_&quot;&gt;Loop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; up until it is less than &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; and assign it to variable &lt;span class=&quot;hljs-string&quot;&gt;`i`&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Push&lt;/span&gt; to variable &lt;span class=&quot;hljs-string&quot;&gt;`funcs`&lt;/span&gt; next &lt;span class=&quot;hljs-attr&quot;&gt;function&lt;/span&gt;:  \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Only push (save), but don&apos;t execute&lt;/span&gt;\n        **&lt;span class=&quot;hljs-title class_&quot;&gt;Write&lt;/span&gt; to &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt; current value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`i`&lt;/span&gt;;**\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// First loop has ended, i = 3;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Loop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; up until it is less than &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; and assign it to variable &lt;span class=&quot;hljs-string&quot;&gt;`j`&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Call&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`j`&lt;/span&gt;-th &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`funcs`&lt;/span&gt;:  \n        **&lt;span class=&quot;hljs-title class_&quot;&gt;Write&lt;/span&gt; to &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt; current value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`i`&lt;/span&gt;;**  \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Ask yourself NOW! What is the value of i?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the question is, what is the value of variable &lt;code&gt;i&lt;/code&gt; when the function is called? Because the first loop is created with the condition of &lt;code&gt;i &amp;lt; 3&lt;/code&gt;, it stops immediately when the condition is false, so it is &lt;code&gt;i = 3&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;You need to understand that, in time when your functions are created, none of their code is executed, it is only saved for later. And so when they are called later, the interpreter executes them and asks: &quot;What is the current value of &lt;code&gt;i&lt;/code&gt;?&quot;&lt;/p&gt;\n\n&lt;p&gt;So, your goal is to first save the value of &lt;code&gt;i&lt;/code&gt; to function and only after that save the function to &lt;code&gt;funcs&lt;/code&gt;. This could be done for example this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + x); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, each function will have it&apos;s own variable &lt;code&gt;x&lt;/code&gt; and we set this &lt;code&gt;x&lt;/code&gt; to the value of &lt;code&gt;i&lt;/code&gt; in each iteration.&lt;/p&gt;\n\n&lt;p&gt;This is only one of the multiple ways to solve this problem.&lt;/p&gt;\n    "],"17":["\n&lt;h2&gt;What you should know about &lt;code&gt;this&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; (aka &quot;the context&quot;) is a special keyword inside each function and its value only depends on &lt;em&gt;how&lt;/em&gt; the function was called, not how/when/where it was defined. It is not affected by lexical scopes like other variables (except for arrow functions, see below). Here are some examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// normal function call&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// `this` will refer to `window`&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// as object method&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: foo};\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// `this` will refer to `obj`&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// as constructor function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// `this` will refer to an object that inherits from `foo.prototype`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To learn more about &lt;code&gt;this&lt;/code&gt;, have a look at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;MDN documentation&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;How to refer to the correct &lt;code&gt;this&lt;/code&gt;&lt;/h2&gt;\n&lt;h3&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;arrow functions&lt;/a&gt;&lt;/h3&gt;\n&lt;p&gt;ECMAScript 6 introduced &lt;em&gt;arrow functions&lt;/em&gt;, which can be thought of as lambda functions. They don&apos;t have their own &lt;code&gt;this&lt;/code&gt; binding. Instead, &lt;code&gt;this&lt;/code&gt; is looked up in scope just like a normal variable. That means you don&apos;t have to call &lt;code&gt;.bind&lt;/code&gt;. That&apos;s not the only special behavior they have, please refer to the MDN documentation for more information.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Don&apos;t use &lt;code&gt;this&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;You actually don&apos;t want to access &lt;code&gt;this&lt;/code&gt; in particular, but &lt;em&gt;the object it refers to&lt;/em&gt;. That&apos;s why an easy solution is to simply create a new variable that also refers to that object. The variable can have any name, but common ones are &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(self.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since &lt;code&gt;self&lt;/code&gt; is a normal variable, it obeys lexical scope rules and is accessible inside the callback. This also has the advantage that you can access the &lt;code&gt;this&lt;/code&gt; value of the callback itself.&lt;/p&gt;\n&lt;h3&gt;Explicitly set &lt;code&gt;this&lt;/code&gt; of the callback - part 1&lt;/h3&gt;\n&lt;p&gt;It might look like you have no control over the value of &lt;code&gt;this&lt;/code&gt; because its value is set automatically, but that is actually not the case.&lt;/p&gt;\n&lt;p&gt;Every function has the method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.bind&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt;, which returns a new function with &lt;code&gt;this&lt;/code&gt; bound to a value. The function has exactly the same behavior as the one you called &lt;code&gt;.bind&lt;/code&gt; on, only that &lt;code&gt;this&lt;/code&gt; was set by you. No matter how or when that function is called, &lt;code&gt;this&lt;/code&gt; will always refer to the passed value.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; boundFunction = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// parenthesis are not necessary&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);             &lt;span class=&quot;hljs-comment&quot;&gt;// but might improve readability&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- here we are calling `.bind()` &lt;/span&gt;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, boundFunction);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this case, we are binding the callback&apos;s &lt;code&gt;this&lt;/code&gt; to the value of &lt;code&gt;MyConstructor&lt;/code&gt;&apos;s &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a binding context for jQuery, use &lt;a href=&quot;http://api.jquery.com/jQuery.proxy/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;jQuery.proxy&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; instead. The reason to do this is so that you don&apos;t need to store the reference to the function when unbinding an event callback. jQuery handles that internally.&lt;/p&gt;\n&lt;h3&gt;Set &lt;code&gt;this&lt;/code&gt; of the callback - part 2&lt;/h3&gt;\n&lt;p&gt;Some functions/methods which accept callbacks also accept a value to which the callback&apos;s &lt;code&gt;this&lt;/code&gt; should refer to. This is basically the same as binding it yourself, but the function/method does it for you. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array#map&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; is such a method. Its signature is:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(callback[, thisArg])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The first argument is the callback and the second argument is the value &lt;code&gt;this&lt;/code&gt; should refer to. Here is a contrived example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;multiplier&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; new_arr = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v * &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;multiplier&lt;/span&gt;;\n}, obj); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- here we are passing `obj` as second argument&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Whether or not you can pass a value for &lt;code&gt;this&lt;/code&gt; is usually mentioned in the documentation of that function/method. For example, &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot; rel=&quot;noreferrer&quot;&gt;jQuery&apos;s &lt;code&gt;$.ajax&lt;/code&gt; method &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; describes an option called &lt;code&gt;context&lt;/code&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This object will be made the context of all Ajax-related callbacks.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h2&gt;Common problem: Using object methods as callbacks/event handlers&lt;/h2&gt;\n&lt;p&gt;Another common manifestation of this problem is when an object method is used as callback/event handler. Functions are first-class citizens in JavaScript and the term &quot;method&quot; is just a colloquial term for a function that is a value of an object property. But that function doesn&apos;t have a specific link to its &quot;containing&quot; object.&lt;/p&gt;\n&lt;p&gt;Consider the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The function &lt;code&gt;this.method&lt;/code&gt; is assigned as click event handler, but if the &lt;code&gt;document.body&lt;/code&gt; is clicked, the value logged will be &lt;code&gt;undefined&lt;/code&gt;, because inside the event handler, &lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;document.body&lt;/code&gt;, not the instance of &lt;code&gt;Foo&lt;/code&gt;.&lt;br&gt;\nAs already mentioned at the beginning, what &lt;code&gt;this&lt;/code&gt; refers to depends on how the function is &lt;strong&gt;called&lt;/strong&gt;, not how it is &lt;strong&gt;defined&lt;/strong&gt;.&lt;br&gt;\nIf the code was like the following, it might be more obvious that the function doesn&apos;t have an implicit reference to the object:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt; = method;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt; is the same as mentioned above: If available, use &lt;code&gt;.bind&lt;/code&gt; to explicitly bind &lt;code&gt;this&lt;/code&gt; to a specific value&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;method&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or explicitly call the function as a &quot;method&quot; of the object, by using an anonymous function as callback / event handler and assign the object (&lt;code&gt;this&lt;/code&gt;) to another variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    self.&lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;();\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or use an arrow function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2 id=&quot;here-are-several-ways-to-access-the-parent-context-inside-a-child-context-rzco&quot;&gt;Here are several ways to access the parent context inside a child context -&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;You can use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;bind&lt;/a&gt;()&lt;/code&gt; function.&lt;/li&gt;\n&lt;li&gt;Store a reference to context/this inside another variable (see the below example).&lt;/li&gt;\n&lt;li&gt;Use ES6 &lt;a href=&quot;https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/&quot; rel=&quot;noreferrer&quot;&gt;Arrow&lt;/a&gt; functions.&lt;/li&gt;\n&lt;li&gt;Alter the code, function design, and architecture - for this you should have command over &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot; rel=&quot;noreferrer&quot;&gt;design patterns&lt;/a&gt; in JavaScript.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h1 id=&quot;use-the-bind-function-nhau&quot;&gt;1. Use the &lt;code&gt;bind()&lt;/code&gt; function&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, ( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) );\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Mock transport object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; transport = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;on&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event, callback&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(callback, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n    }\n};\n&lt;span class=&quot;hljs-comment&quot;&gt;// called as&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, transport);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are using Underscore.js - &lt;a href=&quot;http://underscorejs.org/#bind&quot; rel=&quot;noreferrer&quot;&gt;http://underscorejs.org/#bind&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, _.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n}, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1 id=&quot;store-a-reference-to-contextthis-inside-another-variable-gctm&quot;&gt;2. Store a reference to context/this inside another variable&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n  transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(self.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1 id=&quot;arrow-function-wlcj&quot;&gt;3. Arrow function&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n  transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n    ","\n&lt;p&gt;It&apos;s all in the &quot;magic&quot; syntax of calling a method:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;object.&lt;span class=&quot;hljs-title function_&quot;&gt;property&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you get the property from the object and call it in one go, the object will be the context for the method. If you call the same method, but in separate steps, the context is the global scope (window) instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = object.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you get the reference of a method, it&apos;s no longer attached to the object. It&apos;s just a reference to a plain function. The same happens when you get the reference to use as a callback:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;saveNextLevelData&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setAll&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s where you would bind the context to the function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;saveNextLevelData&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setAll&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are using jQuery you should use the &lt;code&gt;$.proxy&lt;/code&gt; method instead, as &lt;code&gt;bind&lt;/code&gt; is not supported in all browsers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;saveNextLevelData&lt;/span&gt;($.&lt;span class=&quot;hljs-title function_&quot;&gt;proxy&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setAll&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;should&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;know about &quot;this&quot; Keyword.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;As per my view you can implement &quot;this&quot; in three ways&lt;/strong&gt;\n&lt;em&gt;&lt;strong&gt;(Self/Arrow function/Bind Method)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;A function&apos;s &lt;code&gt;this&lt;/code&gt; keyword behaves a little differently in JavaScript compared to other languages.&lt;/p&gt;\n&lt;p&gt;It also has some differences between strict mode and non-strict mode.&lt;/p&gt;\n&lt;p&gt;In most cases, the value of this is determined by how a function is called.&lt;/p&gt;\n&lt;p&gt;It can&apos;t be set by assignment during execution, and it may be different each time the function is called.&lt;/p&gt;\n&lt;p&gt;ES5 introduced the bind() method to set the value of a function&apos;s &lt;code&gt;this&lt;/code&gt; regardless of how it&apos;s called,&lt;/p&gt;\n&lt;p&gt;And ES2015 introduced arrow functions that don&apos;t provide their own &lt;code&gt;this&lt;/code&gt; binding (it retains this value of the enclosing lexical context).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Method1:&lt;/strong&gt; Self - Self is being used to maintain a reference to the original this even as the context is changing. It&apos;s a technique often used in event handlers (especially in closures).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(self.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method2&lt;/strong&gt;: Arrow function - An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords.&lt;/p&gt;\n&lt;p&gt;Arrow function expressions are ill-suited as methods, and they cannot be used as constructors.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;Arrow function expressions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method 3&lt;/strong&gt;: Bind - The bind() method creates a new function that, when called, has its &lt;code&gt;this&lt;/code&gt; keyword set to the provided value with a given sequence of arguments preceding any provided when the new function is called.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;Function.prototype.bind()&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n    transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;,(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3 id=&quot;the-trouble-with-context-3iac&quot;&gt;The trouble with &quot;context&quot;&lt;/h3&gt;\n&lt;p&gt;The term &quot;context&quot; is sometimes used to refer to the object referenced by &lt;em&gt;this&lt;/em&gt;. Its use is inappropriate, because it doesn&apos;t fit either semantically or technically with &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.3&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript&apos;s &lt;em&gt;this&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.oxforddictionaries.com/definition/english/context&quot; rel=&quot;nofollow noreferrer&quot;&gt;&quot;Context&quot;&lt;/a&gt; means the circumstances surrounding something that adds meaning, or some preceding and following information that gives extra meaning. The term &quot;context&quot; is used in ECMAScript to refer to &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.3&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;execution context&lt;/em&gt;&lt;/a&gt;, which is all the parameters, scope, and &lt;em&gt;this&lt;/em&gt; within the scope of some executing code.&lt;/p&gt;\n&lt;p&gt;This is shown in &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMA-262 section 10.4.2&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Set the ThisBinding to the same value as the ThisBinding of the\ncalling execution context&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Which clearly indicates that &lt;em&gt;this&lt;/em&gt; is part of an execution context.&lt;/p&gt;\n&lt;p&gt;An execution context provides the surrounding information that adds meaning to the code that is being executed. It includes much more information than just the &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-11.1.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;thisBinding&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The value of &lt;em&gt;this&lt;/em&gt; isn&apos;t &quot;context&quot;. It&apos;s just one part of an execution context. It&apos;s essentially a local variable that can be set by the call to any object and in strict mode, to any value at all.&lt;/p&gt;\n    ","\n&lt;p&gt;First, you need to have a clear understanding of &lt;strong&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/strong&gt; and behaviour of the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword in the context of &lt;strong&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;this&lt;/code&gt; &amp;amp; &lt;code&gt;scope&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;There are two types of scope in JavaScript. They are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Global Scope&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Function Scope&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In short, global scope refers to the window object. Variables declared in a global scope are accessible from anywhere.&lt;/p&gt;\n&lt;p&gt;On the other hand, function scope resides inside of a function. A variable declared inside a function cannot be accessed from the outside world normally.&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword in the global scope refers to the window object. &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; inside a function also refers to the window object. So &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; will always refer to the window until we find a way to manipulate &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; to indicate a context of our own choosing.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;--------------------------------------------------------------------------------\n-                                                                              -\n-   Global Scope                                                               -\n-   (globally &quot;this&quot; refers to window object)                                  -\n-                                                                              -\n-   function outer_function(callback){                                         -\n-                                                                              -\n-       // Outer function scope                                                -\n-       // Inside the outer function, the &quot;this&quot; keyword                       -\n-       //  refers to window object                                            -\n-       callback() // &quot;this&quot; inside callback also refers to the  window object -\n-   }                                                                          -\n-                                                                              -\n-   function callback_function(){                                              -\n-                                                                              -\n-       // Function to be passed as callback                                   -\n-                                                                              -\n-       // Here &quot;THIS&quot; refers to the window object also                        -\n-   }                                                                          -\n-                                                                              -\n-   outer_function(callback_function)                                          -\n-   // Invoke with callback                                                    -\n-                                                                              -\n--------------------------------------------------------------------------------\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Different ways to manipulate &lt;code&gt;this&lt;/code&gt; inside callback functions:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Here I have a constructor function called Person. It has a property called &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; and four method called &lt;strong&gt;&lt;code&gt;sayNameVersion1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;sayNameVersion2&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;sayNameVersion3&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;sayNameVersion4&lt;/code&gt;&lt;/strong&gt;. All four of them has one specific task. Accept a callback and invoke it. The callback has a specific task which is to log the name property of an instance of Person constructor function.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n        callback.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)()\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;()\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion3&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n        callback.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n    }\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion4&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n        callback.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n    }\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;niceCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Function to be used as callback&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parentObject = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(parentObject)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s create an instance from person constructor and invoke different versions of &lt;strong&gt;&lt;code&gt;sayNameVersionX&lt;/code&gt;&lt;/strong&gt; (X refers to 1,2,3,4) method with &lt;strong&gt;&lt;code&gt;niceCallback&lt;/code&gt;&lt;/strong&gt; to see how many ways we can manipulate the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; inside callback to refer to the &lt;strong&gt;&lt;code&gt;person&lt;/code&gt;&lt;/strong&gt; instance.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;zami&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Create an instance of Person constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;bind:&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;What bind do is to create a new function with the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword set to the provided value.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;sayNameVersion1&lt;/code&gt; and &lt;code&gt;sayNameVersion2&lt;/code&gt; use bind to manipulate &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; of the callback function.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n    callback.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)()\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The first one binds &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; with a callback inside the method itself. And for the second one, the callback is passed with the object bound to it.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;p1.&lt;span class=&quot;hljs-title function_&quot;&gt;sayNameVersion1&lt;/span&gt;(niceCallback) &lt;span class=&quot;hljs-comment&quot;&gt;// pass simply the callback and bind happens inside the sayNameVersion1 method&lt;/span&gt;\n\np1.&lt;span class=&quot;hljs-title function_&quot;&gt;sayNameVersion2&lt;/span&gt;(niceCallback.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(p1)) &lt;span class=&quot;hljs-comment&quot;&gt;// uses bind before passing callback&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;call:&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;&lt;code&gt;first argument&lt;/code&gt;&lt;/strong&gt; of the &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; method is used as &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; inside the function that is invoked with &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; attached to it.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;sayNameVersion3&lt;/code&gt; uses &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; to manipulate the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; to refer to the person object that we created, instead of the window object.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion3&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n    callback.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And it is called like the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;p1.&lt;span class=&quot;hljs-title function_&quot;&gt;sayNameVersion3&lt;/span&gt;(niceCallback)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;apply:&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Similar to &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt;, the first argument of &lt;strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/strong&gt; refers to the object that will be indicated by the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;sayNameVersion4&lt;/code&gt; uses &lt;strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/strong&gt; to manipulate &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; to refer to a person object&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayNameVersion4&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;){\n    callback.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And it is called like the following. Simply the callback is passed,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;p1.&lt;span class=&quot;hljs-title function_&quot;&gt;sayNameVersion4&lt;/span&gt;(niceCallback)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;We can not bind this to &lt;code&gt;setTimeout()&lt;/code&gt;, as it always executes with &lt;strong&gt;the global object (Window)&lt;/strong&gt;. If you want to access the &lt;code&gt;this&lt;/code&gt; context in the callback function then by using &lt;code&gt;bind()&lt;/code&gt; to the callback function, we can achieve it as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;methodName&lt;/span&gt;();\n}.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The question revolves around how the &lt;code&gt;this&lt;/code&gt; keyword behaves in JavaScript. &lt;code&gt;this&lt;/code&gt; behaves differently as below,&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The value of &lt;code&gt;this&lt;/code&gt; is usually determined by a function execution context.&lt;/li&gt;\n&lt;li&gt;In the global scope, &lt;code&gt;this&lt;/code&gt; refers to the global object (the &lt;code&gt;window&lt;/code&gt; object).&lt;/li&gt;\n&lt;li&gt;If strict mode is enabled for any function then the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; as in strict mode, global object refers to &lt;code&gt;undefined&lt;/code&gt; in place of the &lt;code&gt;window&lt;/code&gt; object.&lt;/li&gt;\n&lt;li&gt;The object that is standing before the dot is what the &lt;code&gt;this&lt;/code&gt; keyword will be bound to.&lt;/li&gt;\n&lt;li&gt;We can set the value of this explicitly with &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;When the &lt;code&gt;new&lt;/code&gt; keyword is used (a constructor), this is bound to the new object being created.&lt;/li&gt;\n&lt;li&gt;Arrow functions dont bind &lt;code&gt;this&lt;/code&gt;instead, &lt;code&gt;this&lt;/code&gt; is bound lexically (i.e., based on the original context)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;As most of the answers suggest, we can use &lt;strong&gt;the arrow function or &lt;code&gt;bind()&lt;/code&gt; Method or Self&lt;/strong&gt; var. I would quote a point about lambdas (arrow function) from &lt;a href=&quot;https://google.github.io/styleguide/jsguide.html#features-functions-arrow-functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google JavaScript Style Guide&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Prefer using arrow functions over f.bind(this), and especially over\ngoog.bind(f, this). Avoid writing const self = this. Arrow functions\nare particularly useful for callbacks, which sometimes pass unexpectedly\nadditional arguments.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Google clearly recommends using lambdas rather than bind or &lt;code&gt;const self = this&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;So the best solution would be to use lambdas as below,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyConstructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, transport&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n  transport.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;References:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://medium.com/tech-tajawal/javascript-this-4-rules-7354abdb274c&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://medium.com/tech-tajawal/javascript-this-4-rules-7354abdb274c&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://2ality.com/2016/02/arrow-functions-vs-bind.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;arrow-functions-vs-bind&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Currently there is another approach possible if classes are used in code.&lt;/p&gt;\n&lt;p&gt;With support of &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot; rel=&quot;nofollow noreferrer&quot;&gt;class fields&lt;/a&gt;, it&apos;s possible to make it the following way:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;someView&lt;/span&gt; {\n    onSomeInputKeyUp = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// This refers to the correct value&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ....&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;someInitMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n        someInput.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onSomeInputKeyUp&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For sure under the hood it&apos;s all the old good arrow function that binds context, but in this form it looks much more clear that explicit binding.&lt;/p&gt;\n&lt;p&gt;Since it&apos;s a Stage 3 Proposal, you will need &lt;a href=&quot;https://en.wikipedia.org/wiki/Babel_(transcompiler)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Babel&lt;/a&gt; and appropriate &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-class-properties&quot; rel=&quot;nofollow noreferrer&quot;&gt;Babel plugin&lt;/a&gt; to process it as for now (08/2018).&lt;/p&gt;\n    ","\n&lt;p&gt;I was facing a problem with &lt;code&gt;Ngx&lt;/code&gt; line chart &lt;code&gt;xAxisTickFormatting&lt;/code&gt; function which was called from HTML like this: &lt;code&gt;[xAxisTickFormatting]=&quot;xFormat&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I was unable to access my component&apos;s variable from the function declared. This solution helped me to resolve the issue to find the correct this.&lt;/p&gt;\n&lt;p&gt;Instead of using the function like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;xFormat (value): string {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;oneComponentVariable&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//gives wrong result&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; xFormat = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// console.log(this);&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// now you have access to your component variables&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;oneComponentVariable&lt;/span&gt;\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another approach, which is &lt;strong&gt;the standard way since DOM2&lt;/strong&gt; to bind &lt;code&gt;this&lt;/code&gt; within the event listener, that &lt;strong&gt;let you always remove the listener&lt;/strong&gt; (among other benefits), is the &lt;code&gt;handleEvent(evt)&lt;/code&gt; method from the &lt;code&gt;EventListener&lt;/code&gt; interface:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;handleEvent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// always true&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; === obj);\n  }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, obj);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Detailed information about using &lt;code&gt;handleEvent&lt;/code&gt; can be found here: &lt;em&gt;&lt;a href=&quot;https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38&quot; rel=&quot;nofollow noreferrer&quot;&gt;DOM handleEvent: a cross-platform standard since year 2000&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Some other people have touched on how to use the .bind() method, but specifically here is how you can use it with .then() if anyone is having trouble getting them to work together:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;()\n.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&apos;this&apos; wasn&apos;t accessible here before but now it is&lt;/span&gt;\n}.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As mentioned in the comments, an alternative would be to use an arrow function that doesn&apos;t have its own &apos;this&apos; value&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;()\n.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&apos;this&apos; was always accessible here&lt;/span&gt;\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2 id=&quot;this-in-javascript&quot;&gt;&lt;code&gt;this&lt;/code&gt; in JavaScript:&lt;/h2&gt;\n&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; in JavaScript is 100% determined by how a function is called, and not how it is defined. We can relatively easily find the value of &lt;code&gt;this&lt;/code&gt; by the &lt;strong&gt;&apos;left of the dot rule&apos;&lt;/strong&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;When the function is created using the function keyword the value of &lt;code&gt;this&lt;/code&gt; is the object left of the dot of the function which is called&lt;/li&gt;\n&lt;li&gt;If there is no object left of the dot then the value of &lt;code&gt;this&lt;/code&gt; inside a function is often the global object (&lt;code&gt;global&lt;/code&gt; in Node.js and &lt;code&gt;window&lt;/code&gt; in a browser). I wouldn&apos;t recommend using the &lt;code&gt;this&lt;/code&gt; keyword here because it is less explicit than using something like &lt;code&gt;window&lt;/code&gt;!&lt;/li&gt;\n&lt;li&gt;There exist certain constructs like arrow functions and functions created using the &lt;code&gt;Function.prototype.bind()&lt;/code&gt; a function that can fix the value of &lt;code&gt;this&lt;/code&gt;. These are exceptions of the rule, but they are really helpful to fix the value of &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2 id=&quot;example-in-node.js-wasz&quot;&gt;Example in Node.js&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;module data&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// This outside a function in node refers to module.exports object&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj1 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1 data&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;met1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;met2&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    },\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj2 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj2 data&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;test1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;test2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(obj1),\n    &lt;span class=&quot;hljs-attr&quot;&gt;test3&lt;/span&gt;: obj1.&lt;span class=&quot;hljs-property&quot;&gt;met1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;test4&lt;/span&gt;: obj1.&lt;span class=&quot;hljs-property&quot;&gt;met2&lt;/span&gt;,\n};\n\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;test1&lt;/span&gt;();\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;test2&lt;/span&gt;();\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;test3&lt;/span&gt;();\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;test4&lt;/span&gt;();\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;met1&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj2);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/VvehZ.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/VvehZ.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Let me walk you through the outputs one by one (ignoring the first log starting from the second):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;this&lt;/code&gt; is &lt;code&gt;obj2&lt;/code&gt; because of the left of the dot rule, we can see how &lt;code&gt;test1&lt;/code&gt; is called &lt;code&gt;obj2.test1();&lt;/code&gt;. &lt;code&gt;obj2&lt;/code&gt; is left of the dot and thus the &lt;code&gt;this&lt;/code&gt; value.&lt;/li&gt;\n&lt;li&gt;Even though &lt;code&gt;obj2&lt;/code&gt; is left of the dot, &lt;code&gt;test2&lt;/code&gt; is bound to &lt;code&gt;obj1&lt;/code&gt; via the &lt;code&gt;bind()&lt;/code&gt; method. The &lt;code&gt;this&lt;/code&gt; value is &lt;code&gt;obj1&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;obj2&lt;/code&gt; is left of the dot from the function which is called: &lt;code&gt;obj2.test3()&lt;/code&gt;. Therefore &lt;code&gt;obj2&lt;/code&gt; will be the value of &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;In this case: &lt;code&gt;obj2.test4()&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; is left of the dot. However, arrow functions don&apos;t have their own &lt;code&gt;this&lt;/code&gt; binding. Therefore it will bind to the &lt;code&gt;this&lt;/code&gt; value of the outer scope which is the &lt;code&gt;module.exports&lt;/code&gt; an object which was logged in the beginning.&lt;/li&gt;\n&lt;li&gt;We can also specify the value of &lt;code&gt;this&lt;/code&gt; by using the &lt;code&gt;call&lt;/code&gt; function. Here we can pass in the desired &lt;code&gt;this&lt;/code&gt; value as an argument, which is &lt;code&gt;obj2&lt;/code&gt; in this case.&lt;/li&gt;\n&lt;/ol&gt;\n    "],"18":["\n&lt;h3&gt;Some examples of how to avoid select&lt;/h3&gt;\n&lt;p&gt;Use &lt;code&gt;Dim&lt;/code&gt;&apos;d variables&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Range\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;Set&lt;/code&gt; the variable to the required range. There are many ways to refer to a single-cell range:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;NamedRange&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or a multi-cell range:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:B10&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B10&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), Cells(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AnotherNamedRange&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Resize(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use the shortcut to the &lt;code&gt;Evaluate&lt;/code&gt; method, but this is less efficient and should generally be avoided in production code.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = [A1]\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = [A1:B10]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All the above examples refer to cells on the &lt;em&gt;active sheet&lt;/em&gt;. Unless you specifically want to work only with the active sheet, it is better to Dim a &lt;code&gt;Worksheet&lt;/code&gt; variable too:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ws.Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; ws\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = .Range(.Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), .Cells(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; want to work with the &lt;code&gt;ActiveSheet&lt;/code&gt;, for clarity it&apos;s best to be explicit. But take care, as some &lt;code&gt;Worksheet&lt;/code&gt; methods change the active sheet.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, this refers to the &lt;em&gt;active workbook&lt;/em&gt;.  Unless you specifically want to work only with the &lt;code&gt;ActiveWorkbook&lt;/code&gt; or &lt;code&gt;ThisWorkbook&lt;/code&gt;, it is better to Dim a &lt;code&gt;Workbook&lt;/code&gt; variable too.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; wb &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Workbook\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb = Application.Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = wb.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; want to work with the &lt;code&gt;ActiveWorkbook&lt;/code&gt;, for clarity it&apos;s best to be explicit. But take care, as many &lt;code&gt;WorkBook&lt;/code&gt; methods change the active book.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ActiveWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also use the &lt;code&gt;ThisWorkbook&lt;/code&gt; object to refer to the book containing the running code.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A common (bad) piece of code is to open a book, get some data then close again&lt;/p&gt;\n&lt;p&gt;This is bad:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; foo()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Variant\n    Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1.xlsx&quot;&lt;/span&gt;).Sheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Clear\n    Workbooks.Open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Path\\To\\SomeClosedBook.xlsx&quot;&lt;/span&gt;)\n    v = ActiveWorkbook.Sheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value\n    Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeAlreadyOpenBook.xlsx&quot;&lt;/span&gt;).Activate\n    ActiveWorkbook.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value = v\n    Workbooks(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).Activate\n    ActiveWorkbook.Close()\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And it would be better like:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; foo()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Variant\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; wb1 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Workbook\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt;  wb2 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Workbook\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb1 = Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeAlreadyOpenBook.xlsx&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb2 = Workbooks.Open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Path\\To\\SomeClosedBook.xlsx&quot;&lt;/span&gt;)\n    v = wb2.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value\n    wb1.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeOtherSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value = v\n    wb2.Close()\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Pass ranges to your &lt;code&gt;Sub&lt;/code&gt;s and &lt;code&gt;Function&lt;/code&gt;s as Range variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; ClearRange(r &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Range)\n    r.ClearContents\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;....&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; MyMacro()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:B10&quot;&lt;/span&gt;)\n    ClearRange rng\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You should also apply Methods (such as &lt;code&gt;Find&lt;/code&gt; and &lt;code&gt;Copy&lt;/code&gt;) to variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng1 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng2 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng1 = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A10&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng2 = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B1:B10&quot;&lt;/span&gt;)\nrng1.Copy rng2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are looping over a range of cells it is often better (faster) to copy the range values to a variant array first and loop over that:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; dat &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A10000&quot;&lt;/span&gt;)\ndat = rng.Value  &lt;span class=&quot;hljs-comment&quot;&gt;&apos; dat is now array (1 to 10000, 1 to 1)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i = LBound(dat, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; UBound(dat, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    dat(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = dat(i, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Or whatever operation you need to perform&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;next&lt;/span&gt;\nrng.Value = dat &lt;span class=&quot;hljs-comment&quot;&gt;&apos; put new values back on sheet&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a small taster for what&apos;s possible.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Two main reasons why &lt;code&gt;.Select&lt;/code&gt;, &lt;code&gt;.Activate&lt;/code&gt;, &lt;code&gt;Selection&lt;/code&gt;, &lt;code&gt;Activecell&lt;/code&gt;, &lt;code&gt;Activesheet&lt;/code&gt;, &lt;code&gt;Activeworkbook&lt;/code&gt;, etc. should be avoided&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;It slows down your code.&lt;/li&gt;\n&lt;li&gt;It is usually the main cause of runtime errors.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;How do we avoid it?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Directly work with the relevant objects&lt;/p&gt;\n&lt;p&gt;Consider this code&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Activate\nRange(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blah&quot;&lt;/span&gt;\nSelection.NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code can also be written as&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n    .Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blah&quot;&lt;/span&gt;\n    .NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; If required declare your variables. The same code above can be written as&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; worksheet\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; ws.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n    .Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blah&quot;&lt;/span&gt;\n    .NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;That&apos;s a good answer, but what I am missing on this topic is when we actually need Activate. Everyone says it is bad, but no one explains any cases where it makes sense to use it.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Situation when you &lt;strong&gt;can&apos;t avoid&lt;/strong&gt; using &lt;code&gt;.Activate/.Select&lt;/code&gt;. (Will add more links as and when I come across them)&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;When you want to present a worksheet to a user so that the user can see it.&lt;/li&gt;\n&lt;li&gt;Scenarios like &lt;a href=&quot;https://stackoverflow.com/questions/68507433/working-macro-returns-error-when-run-from-form-control&quot;&gt;Working macro returns error when run from form control&lt;/a&gt; where you are forced to use &lt;code&gt;.Activate&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;When &lt;a href=&quot;https://stackoverflow.com/questions/70015987/hijri-date-formatting&quot;&gt;usual methods&lt;/a&gt; of &lt;code&gt;Text To Columns&lt;/code&gt; / &lt;code&gt;.Formula = .Formula&lt;/code&gt; doesn&apos;t work then you may have to resort to &lt;code&gt;.Select&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;One small point of emphasis I&apos;ll add to all the excellent answers given previously:&lt;/p&gt;\n&lt;p&gt;Probably the biggest thing you can do to avoid using Select is to &lt;em&gt;&lt;strong&gt;as much as possible, use named ranges (combined with meaningful variable names) in your VBA code&lt;/strong&gt;&lt;/em&gt;. This point was mentioned above, but it was glossed over a bit; however, it deserves special attention.&lt;/p&gt;\n&lt;p&gt;Here are a couple of additional reasons to make liberal use of named ranges, though I am sure I could think of more.&lt;/p&gt;\n&lt;h2&gt;Named ranges make your code easier to read and understand.&lt;/h2&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Months &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; MonthlySales &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Months = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Months&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; E.g, &quot;Months&quot; might be a named range referring to A1:A12&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; MonthlySales = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MonthlySales&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; E.g, &quot;Monthly Sales&quot; might be a named range referring to B1:B12&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Month &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; Month &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Months\n    Debug.Print MonthlySales(Month.Row)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; Month\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is pretty obvious what the named ranges &lt;code&gt;Months&lt;/code&gt; and &lt;code&gt;MonthlySales&lt;/code&gt; contain, and what the procedure is doing.&lt;/p&gt;\n&lt;p&gt;Why is this important? Partially because it is easier for other people to understand it, but even if you are the only person who will ever see or use your code, you should still use named ranges and good variable names because &lt;em&gt;&lt;strong&gt;you will forget&lt;/strong&gt;&lt;/em&gt; what you meant to do with it a year later, and &lt;em&gt;&lt;strong&gt;you will waste&lt;/strong&gt;&lt;/em&gt; 30 minutes just figuring out what your code is doing.&lt;/p&gt;\n&lt;h2&gt;Named ranges ensure that your macros do not break when (not if!) the configuration of the spreadsheet changes.&lt;/h2&gt;\n&lt;p&gt;Consider, if the above example had been written like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng1 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng2 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng1 = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A12&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng2 = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B1:B12&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng3 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng3 &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rng1\n    Debug.Print rng2(rng3.Row)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code will work just fine at first - that is until you or a future user decides &quot;gee wiz, I think I&apos;m going to add a new column with the year in Column &lt;code&gt;A&lt;/code&gt;!&quot;, or put an expenses column between the months and sales columns, or add a header to each column. Now, your code is broken. And because you used terrible variable names, it will take you a lot more time to figure out how to fix it than it should take.&lt;/p&gt;\n&lt;p&gt;If you had used named ranges to begin with, the &lt;code&gt;Months&lt;/code&gt; and &lt;code&gt;Sales&lt;/code&gt; columns could be moved around all you like, and your code would continue working just fine.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m going to give the short answer since everyone else gave the long one.&lt;/p&gt;\n\n&lt;p&gt;You&apos;ll get .select and .activate whenever you record macros and reuse them.  When you .select a cell or sheet it just makes it active.  From that point on whenever you use unqualified references like &lt;code&gt;Range.Value&lt;/code&gt; they just use the active cell and sheet.  This can also be problematic if you don&apos;t watch where your code is placed or a user clicks on the workbook.&lt;/p&gt;\n\n&lt;p&gt;So, you can eliminate these issues by directly referencing your cells.  Which goes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos;create and set a range&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Excel.Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Rng = Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1&quot;&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;OR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Rng = Workbooks(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you could&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos;Just deal with the cell directly rather than creating a range&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;I want to put the string &quot;Hello&quot; in Range A1 of sheet 1&lt;/span&gt;\nWorkbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1&quot;&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;OR&lt;/span&gt;\nWorkbooks(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are various combinations of these methods, but that would be the general idea expressed as shortly as possible for impatient people like me.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;... and am finding that my code would be more re-usable if I were able to use variables instead of Select functions.&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;While I cannot think of any more than an isolated handful of situations where &lt;code&gt;.Select&lt;/code&gt; would be a better choice than direct cell referencing, I would rise to the defense of &lt;code&gt;Selection&lt;/code&gt; and point out that it should not be thrown out for the same reasons that &lt;code&gt;.Select&lt;/code&gt; should be avoided.&lt;/p&gt;\n\n&lt;p&gt;There are times when having short, time-saving macro sub routines assigned to hot-key combinations available with the tap of a couple of keys saves a lot of time. Being able to select a group of cells to enact the operational code on works wonders when dealing with pocketed data that does not conform to a worksheet-wide data format. Much in the same way that you might select a group of cells and apply a format change, selecting a group of cells to run special macro code against can be a major time saver.&lt;/p&gt;\n\n&lt;p&gt;Examples of Selection-based sub framework:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Run_on_Selected()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rSEL &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = Selection    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;store the current selection in case it changes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rSEL\n        Debug.Print rng.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell-by-cell operational code here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = &lt;span class=&quot;hljs-literal&quot;&gt;Nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Run_on_Selected_Visible()\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;this is better for selected ranges on filtered data or containing hidden rows/columns&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rSEL &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = Selection    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;store the current selection in case it changes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rSEL.SpecialCells(xlCellTypeVisible)\n        Debug.Print rng.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell-by-cell operational code here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = &lt;span class=&quot;hljs-literal&quot;&gt;Nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Run_on_Discontiguous_Area()\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;this is better for selected ranges of discontiguous areas&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ara &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rSEL &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = Selection    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;store the current selection in case it changes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; ara &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rSEL.Areas\n        Debug.Print ara.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell group operational code here&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; ara.Areas\n            Debug.Print rng.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell-by-cell operational code here&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; ara\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = &lt;span class=&quot;hljs-literal&quot;&gt;Nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The actual code to process could be anything from a single line to multiple modules. I have used this method to initiate long running routines on a ragged selection of cells containing the filenames of external workbooks.&lt;/p&gt;\n\n&lt;p&gt;In short, don&apos;t discard &lt;code&gt;Selection&lt;/code&gt; due to its close association with &lt;code&gt;.Select&lt;/code&gt; and &lt;code&gt;ActiveCell&lt;/code&gt;. As a worksheet property it has many other purposes.&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;(Yes, I know this question was about &lt;code&gt;.Select&lt;/code&gt;, not &lt;code&gt;Selection&lt;/code&gt; but I wanted to remove any misconceptions that novice VBA coders might infer.)&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Avoiding &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Activate&lt;/code&gt; is the move that makes you a bit better VBA developer. In general, &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Activate&lt;/code&gt; are used when a macro is recorded, thus the &lt;code&gt;Parent&lt;/code&gt; worksheet or range is always considered the active one.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;This is how you may avoid &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Activate&lt;/code&gt; in the following cases:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Adding a new Worksheet and copying a cell on it:&lt;/h2&gt;\n\n&lt;p&gt;From (code generated with macro recorder):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Makro2()\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Sheets.Add After:=ActiveSheet\n    Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tabelle1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tabelle1&quot;&lt;/span&gt;).Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;NewName&quot;&lt;/span&gt;\n    ActiveCell.FormulaR1C1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot;&lt;/span&gt;\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Selection.Copy\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B3&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    ActiveSheet.Paste\n    Application.CutCopyMode = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; TestMe()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = Worksheets.Add\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; ws\n        .Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;NewName&quot;&lt;/span&gt;\n        .Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n        .Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).Copy Destination:=.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B3&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;When you want to copy range between worksheets:&lt;/h2&gt;\n\n&lt;p&gt;From:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Source&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nColumns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Copy\nSheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Target&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nColumns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nActiveSheet.Paste\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Source&quot;&lt;/span&gt;).Columns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).Copy Destination:=Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Target&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Using fancy named ranges&lt;/h2&gt;\n\n&lt;p&gt;You may access them with &lt;code&gt;[]&lt;/code&gt;, which is really beautiful, compared to the other way. Check yourself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Months &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; MonthlySales &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Months = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Months&quot;&lt;/span&gt;)    \n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; MonthlySales = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MonthlySales&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Months =[Months]\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; MonthlySales = [MonthlySales]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The example from above would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Source&quot;&lt;/span&gt;).Columns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).Copy Destination:=Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Target&quot;&lt;/span&gt;).[A1]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Not copying values, but taking them&lt;/h2&gt;\n\n&lt;p&gt;Usually, if you are willing to &lt;code&gt;select&lt;/code&gt;, most probably you are copying something. If you are only interested in the values, this is a good option to avoid select:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Range(&quot;B1:B6&quot;).Value = Range(&quot;A1:A6&quot;).Value&lt;/code&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Try always to reference the Worksheet as well&lt;/h2&gt;\n\n&lt;p&gt;This is probably the most common mistake in &lt;a href=&quot;/questions/tagged/vba&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;vba&apos;&quot; rel=&quot;tag&quot;&gt;vba&lt;/a&gt;. Whenever you copy ranges, sometimes the worksheet is not referenced and thus VBA considers the wrong sheet the ActiveWorksheet.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos;This will work only if the 2. Worksheet is selected!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; TestMe()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).Range(Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), Cells(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).Copy\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;This works always!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; TestMe2()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n        .Range(.Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), .Cells(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).Copy\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Can I really never use &lt;code&gt;.Select&lt;/code&gt; or &lt;code&gt;.Activate&lt;/code&gt; for anything?&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A good example of when you could be justified in using &lt;code&gt;.Activate&lt;/code&gt; and &lt;code&gt;.Select&lt;/code&gt; is when you want make sure that a specific Worksheet is selected for visual reasons. E.g., that your Excel would always open with the cover worksheet selected first, disregarding which which was the ActiveSheet when the file was closed.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Thus, something like the code below is absolutely OK:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Workbook_Open()\n    Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cover&quot;&lt;/span&gt;).Activate\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Another good example is when you need to export all sheets into one PDF file, as mentioned in this case - &lt;a href=&quot;https://stackoverflow.com/questions/59107554/how-to-avoid-select-active-statements-in-vba-in-this-example&quot;&gt;How to avoid select/active statements in VBA in this example?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When a command only works with &lt;code&gt;ActiveWindow&lt;/code&gt; like &lt;a href=&quot;https://github.com/Vitosh/VBA_personal/blob/master/Boilerplate/Boilerplate%20VitoshAcademy/tblInput.vb&quot; rel=&quot;noreferrer&quot;&gt;ActiveWindow.Zoom&lt;/a&gt; or &lt;a href=&quot;https://github.com/Vitosh/VBA_personal/blob/master/Boilerplate/Boilerplate%20VitoshAcademy/ExcelAdditional.bas&quot; rel=&quot;noreferrer&quot;&gt;ActiveWindow.FreezePanes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Please note that in the following I&apos;m comparing the Select approach (the one that the OP wants to avoid), with the Range approach (and this is the answer to the question). So don&apos;t stop reading when you see the first Select.&lt;/p&gt;\n&lt;p&gt;It really depends on what you are trying to do. Anyway, a simple example could be useful. Let&apos;s suppose that you want to set the value of the active cell to &quot;foo&quot;. Using ActiveCell you would write something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro1()\n    ActiveCell.Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to use it for a cell that is not the active one, for instance for &quot;B2&quot;, you should select it first, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro2()\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Macro1\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Ranges you can write a more generic macro that can be used to set the value of any cell you want to whatever you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; SetValue(cellAddress &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, aVal &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant)\n    Range(cellAddress).Value = aVal\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you can rewrite Macro2 as:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro2()\n    SetCellValue &lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And Macro1 as:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro1()\n    SetValue ActiveCell.Address, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Always state the workbook, worksheet and the cell/range.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Thisworkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fred&quot;&lt;/span&gt;).cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nWorkbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bob&quot;&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fred&quot;&lt;/span&gt;).cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because end users will always just click buttons and as soon as the focus moves off of the workbook the code wants to work with then things go completely wrong.&lt;/p&gt;\n\n&lt;p&gt;And never use the index of a workbook.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Workbooks(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fred&quot;&lt;/span&gt;).cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You don&apos;t know what other workbooks will be open when the user runs your code.&lt;/p&gt;\n    ","\n&lt;p&gt;These methods are rather stigmatized, so taking the lead &lt;a href=&quot;https://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba/35864330#35864330&quot;&gt;of Vityata&lt;/a&gt; and Jeeped for the sake of drawing a line in the sand:&lt;/p&gt;\n&lt;h2&gt;Call &lt;code&gt;.Activate&lt;/code&gt;, &lt;code&gt;.Select&lt;/code&gt;, &lt;code&gt;Selection&lt;/code&gt;, &lt;code&gt;ActiveSomething&lt;/code&gt; methods/properties&lt;/h2&gt;\n&lt;p&gt;Basically because they&apos;re called primarily to handle user input through the application UI. Since they&apos;re the methods called when the user handles objects through the UI, they&apos;re the ones recorded by the macro-recorder, and that&apos;s why calling them is either brittle or redundant for most situations: you don&apos;t have to select an object so as to perform an action with &lt;code&gt;Selection&lt;/code&gt; right afterwards.&lt;/p&gt;\n&lt;p&gt;However, this definition settles situations on which they are called for:&lt;/p&gt;\n&lt;h2&gt;When to call &lt;code&gt;.Activate&lt;/code&gt;, &lt;code&gt;.Select&lt;/code&gt;, &lt;code&gt;.Selection&lt;/code&gt;, &lt;code&gt;.ActiveSomething&lt;/code&gt; methods/properties&lt;/h2&gt;\n&lt;p&gt;Basically when you expect the &lt;em&gt;final user&lt;/em&gt; to play a role in the execution.&lt;/p&gt;\n&lt;p&gt;If you are developing and expect the user to choose the object instances for your code to handle, then &lt;code&gt;.Selection&lt;/code&gt; or &lt;code&gt;.ActiveObject&lt;/code&gt; are apropriate.&lt;/p&gt;\n&lt;p&gt;On the other hand, &lt;code&gt;.Select&lt;/code&gt; and &lt;code&gt;.Activate&lt;/code&gt; are of use when you can infer the user&apos;s next action and you want your code to guide the user, possibly saving him/her some time and mouse clicks. For example, if your code just created a brand new instance of a chart or updated one, the user might want to check it out, and you could call &lt;code&gt;.Activate&lt;/code&gt; on it or its sheet to save the user the time searching for it; or if you know the user will need to update some range values, you can programmatically select that range.&lt;/p&gt;\n    ","\n&lt;p&gt;IMHO use of &lt;code&gt;.select&lt;/code&gt; comes from people, who like me started learning VBA by necessity through recording macros and then modifying the code without realizing that &lt;code&gt;.select&lt;/code&gt; and subsequent &lt;code&gt;selection&lt;/code&gt; is just an unnecessary middle-men.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.select&lt;/code&gt; can be avoided, as many posted already, by directly working with the already existing objects, which allows various indirect referencing like calculating i and j in a complex way and then editing cell(i,j), etc.&lt;/p&gt;\n\n&lt;p&gt;Otherwise, there is nothing implicitly wrong with &lt;code&gt;.select&lt;/code&gt; itself and you can find uses for this easily, e.g. I have a spreadsheet that I populate with date, activate macro that does some magic with it and exports it in an acceptable format on a separate sheet, which, however, requires some final manual (unpredictable) inputs into an adjacent cell. So here comes the moment for &lt;code&gt;.select&lt;/code&gt; that saves me that additional mouse movement and click.&lt;/p&gt;\n    ","\n&lt;p&gt;To avoid using the &lt;code&gt;.Select&lt;/code&gt; method, you can set a variable equal to the property that you want.&lt;/p&gt;\n&lt;p&gt; For instance, if you want the value in &lt;code&gt;Cell A1&lt;/code&gt; you could set a variable equal to the value property of that cell.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Example &lt;code&gt;valOne = Range(&quot;A1&quot;).Value&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt; For instance, if you want the codename of &apos;Sheet3&lt;code&gt;you could set a variable equal to the&lt;/code&gt;Codename` property of that worksheet.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Example &lt;code&gt;valTwo = Sheets(&quot;Sheet3&quot;).Codename&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;How to avoid copy-paste?&lt;/h1&gt;\n&lt;p&gt;Let&apos;s face it: this one appears a lot when recording macros:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Copy\nRange(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y9).Select\nSelection.Paste\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While the only thing the person wants is:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y9&quot;&lt;/span&gt;).Value = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1&quot;&lt;/span&gt;).Value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Therefore, instead of using copy-paste in VBA macros, I&apos;d advise the following simple approach:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Destination_Range.Value = Source_Range.Value\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I noticed that none of these answers mention the &lt;a href=&quot;https://msdn.microsoft.com/en-us/vba/excel-vba/articles/range-offset-property-excel&quot; rel=&quot;noreferrer&quot;&gt;.Offset Property&lt;/a&gt;. This also can be used to avoid using the &lt;code&gt;Select&lt;/code&gt; action when manipulating certain cells, particularly in reference to a selected cell (as the OP mentions with &lt;code&gt;ActiveCell&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Here are a couple examples.&lt;/p&gt;\n\n&lt;p&gt;I will also assume the &quot;ActiveCell&quot; is &lt;strong&gt;J4&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ActiveCell.Offset(2, 0).Value = 12&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This will change the cell &lt;code&gt;J6&lt;/code&gt; to be a value of 12 &lt;/li&gt;\n&lt;li&gt;A minus -2 would have referenced J2&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;ActiveCell.Offset(0,1).Copy ActiveCell.Offset(,2)&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This will copy the cell in &lt;code&gt;k4&lt;/code&gt; to &lt;code&gt;L4&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Note that &quot;0&quot; is not needed in the offset parameter if not needed (,2)&lt;/li&gt;\n&lt;li&gt;Similar to the previous example a minus 1 would be &lt;code&gt;i4&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;ActiveCell.Offset(, -1).EntireColumn.ClearContents&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This will clear values in all cells in the column k.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These aren&apos;t to say they are &quot;better&quot; than the above options, but just listing alternatives.&lt;/p&gt;\n    ","\n&lt;p&gt;The main reason never to use Select or Activesheet is because most people will have at least another couple of workbooks open (sometimes dozens) when they run your macro, and if they click away from your sheet while your macro is running and click on some other book they have open, then the &quot;Activesheet&quot; changes, and the target workbook for an unqualified &quot;Select&quot; command changes as well.&lt;/p&gt;\n&lt;p&gt;At best, your macro will crash, at worst you might end up writing values or changing cells in the wrong workbook with no way to &quot;Undo&quot; them.&lt;/p&gt;\n&lt;p&gt;I have a simple golden rule that I follow: Add variables named &quot;wb&quot; and &quot;ws&quot; for a Workbook object and a Worksheet object and always use those to refer to my macro book. If I need to refer to more than one book, or more than one sheet, I add more variables.&lt;/p&gt;\n&lt;p&gt;For example,&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; wb &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Workbook\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Worksheet\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb = ThisWorkBook\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = wb.sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Output&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &quot;Set wb = ThisWorkbook&quot; command is absolutely key. &quot;ThisWorkbook&quot; is a special value in Excel, and it means the workbook that your VBA code is &lt;em&gt;currently running from&lt;/em&gt;. A very helpful shortcut to set your Workbook variable with.&lt;/p&gt;\n&lt;p&gt;After you&apos;ve done that at the top of your Sub, using them could not be simpler, just use them wherever you would use &quot;Selection&quot;:&lt;/p&gt;\n&lt;p&gt;So to change the value of cell &quot;A1&quot; in &quot;Output&quot; to &quot;Hello&quot;, instead of:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Output&quot;&lt;/span&gt;).Activate\nActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can now do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;ws.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which is not only much more reliable and less likely to crash if the user is working with multiple spreadsheets; it&apos;s also much shorter, quicker and easier to write.&lt;/p&gt;\n&lt;p&gt;As an added bonus, if you &lt;em&gt;always&lt;/em&gt; name your variables &quot;wb&quot; and &quot;ws&quot;, you can copy and paste code from one book to another and it will usually work with minimal changes needed, if any.&lt;/p&gt;\n    ","\n&lt;p&gt;Working with the &lt;em&gt;.Parent&lt;/em&gt; feature, this example shows how setting only one myRng reference enables dynamic access to the entire environment without  any .Select, .Activate, .Activecell, .ActiveWorkbook, .ActiveSheet and so on. (There isn&apos;t any generic &lt;em&gt;.Child&lt;/em&gt; feature.)&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; ShowParents()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myRng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; myRng = ActiveCell\n    Debug.Print myRng.Address                    &lt;span class=&quot;hljs-comment&quot;&gt;&apos; An address of the selected cell&lt;/span&gt;\n    Debug.Print myRng.Parent.name                &lt;span class=&quot;hljs-comment&quot;&gt;&apos; The name of sheet, where MyRng is in&lt;/span&gt;\n    Debug.Print myRng.Parent.Parent.name         &lt;span class=&quot;hljs-comment&quot;&gt;&apos; The name of workbook, where MyRng is in&lt;/span&gt;\n    Debug.Print myRng.Parent.Parent.Parent.name  &lt;span class=&quot;hljs-comment&quot;&gt;&apos; The name of application, where MyRng is in&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos; You may use this feature to set reference to these objects&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; mySh  &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myWbk &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Workbook\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myApp &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Application\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; mySh = myRng.Parent\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; myWbk = myRng.Parent.Parent\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; myApp = myRng.Parent.Parent.Parent\n    Debug.Print mySh.name, mySh.Cells(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value\n    Debug.Print myWbk.name, myWbk.Sheets.Count\n    Debug.Print myApp.name, myApp.Workbooks.Count\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos; You may use dynamically addressing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; myRng\n        .Copy\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Pastes in D1 on sheet 2 in the same workbook, where the copied cell is&lt;/span&gt;\n        .Parent.Parent.Sheets(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D1&quot;&lt;/span&gt;).PasteSpecial xlValues\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Or myWbk.Sheets(2).Range(&quot;D1&quot;).PasteSpecial xlValues&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; We may dynamically call active application too&lt;/span&gt;\n        .Parent.Parent.Parent.CutCopyMode = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Or myApp.CutCopyMode = False&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an example that will clear the contents of cell &quot;A1&quot; (or more if the selection type is xllastcell, etc.). All done without having to select the cells.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Application.&lt;span class=&quot;hljs-keyword&quot;&gt;GoTo&lt;/span&gt; Reference:=Workbook(WorkbookName).Worksheets(WorksheetName).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\nRange(Selection,selection(selectiontype)).clearcontents \n&lt;/code&gt;&lt;/pre&gt;\n    "],"19":["\n&lt;p&gt;One word answer: &lt;strong&gt;asynchronicity&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Forewords&lt;/h2&gt;\n\n&lt;p&gt;This topic has been iterated at least a couple of thousands of times, here, in Stack Overflow. Hence, first off I&apos;d like to point out some extremely useful resources:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/14220323/1331430&quot;&gt;@Felix Kling&apos;s answer to &quot;How do I return the response from an asynchronous call?&quot;&lt;/a&gt;. See his excellent answer explaining synchronous and asynchronous flows, as well as the &quot;Restructure code&quot; section.&lt;br&gt;\n@Benjamin Gruenbaum has also put a lot of effort explaining asynchronicity in the same thread.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/10058879/1331430&quot;&gt;@Matt Esch&apos;s answer to &quot;Get data from fs.readFile&quot;&lt;/a&gt; also explains asynchronicity extremely well in a simple manner.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;The answer to the question at hand&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s trace the common behavior first. In all examples, the &lt;code&gt;outerScopeVar&lt;/code&gt; is modified inside of a &lt;em&gt;function&lt;/em&gt;. That function is clearly not executed immediately, it is being assigned or passed as an argument. That is what we call a &lt;strong&gt;&lt;em&gt;callback&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now the question is, when is that callback called?&lt;/p&gt;\n\n&lt;p&gt;It depends on the case. Let&apos;s try to trace some common behavior again:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;img.onload&lt;/code&gt; may be called &lt;em&gt;sometime in the future&lt;/em&gt;, when (and if) the image has successfully loaded.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; may be called &lt;em&gt;sometime in the future&lt;/em&gt;, after the delay has expired and the timeout hasn&apos;t been canceled by &lt;code&gt;clearTimeout&lt;/code&gt;. Note: even when using &lt;code&gt;0&lt;/code&gt; as delay, all browsers have a minimum timeout delay cap (specified to be 4ms in the HTML5 spec).&lt;/li&gt;\n&lt;li&gt;jQuery &lt;code&gt;$.post&lt;/code&gt;&apos;s callback may be called &lt;em&gt;sometime in the future&lt;/em&gt;, when (and if) the Ajax request has been completed successfully.&lt;/li&gt;\n&lt;li&gt;Node.js&apos;s &lt;code&gt;fs.readFile&lt;/code&gt; may be called &lt;em&gt;sometime in the future&lt;/em&gt;, when the file has been read successfully or thrown an error.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In all cases, we have a callback which may run &lt;em&gt;sometime in the future&lt;/em&gt;. This &quot;sometime in the future&quot; is what we refer to as &lt;strong&gt;asynchronous flow&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Asynchronous execution is pushed out of the synchronous flow. That is, the asynchronous code will &lt;strong&gt;never&lt;/strong&gt; execute while the synchronous code stack is executing. This is the meaning of JavaScript being single-threaded.&lt;/p&gt;\n\n&lt;p&gt;More specifically, when the JS engine is idle -- not executing a stack of (a)synchronous code -- it will poll for events that may have triggered asynchronous callbacks (e.g. expired timeout, received network response) and execute them one after another. This is regarded as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/EventLoop&quot; rel=&quot;noreferrer&quot;&gt;Event Loop&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;That is, the asynchronous code highlighted in the hand-drawn red shapes may execute only after all the remaining synchronous code in their respective code blocks have executed:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/40IwM.png&quot; alt=&quot;async code highlighted&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;In short, the callback functions are created synchronously but executed asynchronously. You just can&apos;t rely on the execution of an asynchronous function until you know it has executed, and how to do that?&lt;/p&gt;\n\n&lt;p&gt;It is simple, really. The logic that depends on the asynchronous function execution should be started/called from inside this asynchronous function. For example, moving the &lt;code&gt;alert&lt;/code&gt;s and &lt;code&gt;console.log&lt;/code&gt;s too inside the callback function would output the expected result, because the result is available at that point.&lt;/p&gt;\n\n&lt;h3&gt;Implementing your own callback logic&lt;/h3&gt;\n\n&lt;p&gt;Often you need to do more things with the result from an asynchronous function or do different things with the result depending on where the asynchronous function has been called. Let&apos;s tackle a bit more complex example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar;\n&lt;span class=&quot;hljs-title function_&quot;&gt;helloCatAsync&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerScopeVar);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;helloCatAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        outerScopeVar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Nya&apos;&lt;/span&gt;;\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I&apos;m using &lt;code&gt;setTimeout&lt;/code&gt; with a random delay as a generic asynchronous function, the same example applies to Ajax, &lt;code&gt;readFile&lt;/code&gt;, &lt;code&gt;onload&lt;/code&gt; and any other asynchronous flow.&lt;/p&gt;\n\n&lt;p&gt;This example clearly suffers from the same issue as the other examples, it is not waiting until the asynchronous function executes.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s tackle it implementing a callback system of our own. First off, we get rid of that ugly &lt;code&gt;outerScopeVar&lt;/code&gt; which is completely useless in this case. Then we add a parameter which accepts a function argument, our callback. When the asynchronous operation finishes, we call this callback passing the result. The implementation (please read the comments in order):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Call helloCatAsync passing a callback function,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    which will be called receiving the result from the async operation&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;helloCatAsync&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 5. Received the result from the async function,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//    now do whatever you want with it:&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(result);\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. The &quot;callback&quot; parameter is a reference to the function which&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    was passed as argument from the helloCatAsync call&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;helloCatAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 3. Start async operation:&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// 4. Finished async operation,&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//    call the callback passing the result as argument&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Nya&apos;&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Code snippet of the above example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Call helloCatAsync passing a callback function,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    which will be called receiving the result from the async operation&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1. function called...&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;helloCatAsync&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 5. Received the result from the async function,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//    now do whatever you want with it:&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;5. result is: &quot;&lt;/span&gt;, result);\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. The &quot;callback&quot; parameter is a reference to the function which&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    was passed as argument from the helloCatAsync call&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;helloCatAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2. callback here is the function passed as argument above...&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 3. Start async operation:&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3. start async operation...&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4. finished async operation, calling the callback, passing the result...&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// 4. Finished async operation,&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//    call the callback passing the result as argument&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Nya&apos;&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Most often in real use cases, the DOM API and most libraries already provide the callback functionality (the &lt;code&gt;helloCatAsync&lt;/code&gt; implementation in this demonstrative example). You only need to pass the callback function and understand that it will execute out of the synchronous flow, and restructure your code to accommodate for that.&lt;/p&gt;\n\n&lt;p&gt;You will also notice that due to the asynchronous nature, it is impossible to &lt;code&gt;return&lt;/code&gt; a value from an asynchronous flow back to the synchronous flow where the callback was defined, as the asynchronous callbacks are executed long after the synchronous code has already finished executing.&lt;/p&gt;\n\n&lt;p&gt;Instead of &lt;code&gt;return&lt;/code&gt;ing a value from an asynchronous callback, you will have to make use of the callback pattern, or... Promises.&lt;/p&gt;\n\n&lt;h3&gt;Promises&lt;/h3&gt;\n\n&lt;p&gt;Although there are ways to keep the &lt;a href=&quot;http://callbackhell.com/&quot; rel=&quot;noreferrer&quot;&gt;callback hell&lt;/a&gt; at bay with vanilla JS, promises are growing in popularity and are currently being standardized in ES6 (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise - MDN&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;Promises (a.k.a. Futures) provide a more linear, and thus pleasant, reading of the asynchronous code, but explaining their entire functionality is out of the scope of this question. Instead, I&apos;ll leave these excellent resources for the interested:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot; rel=&quot;noreferrer&quot;&gt;JavaScript Promises - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/&quot; rel=&quot;noreferrer&quot;&gt;You&apos;re Missing the Point of Promises - domenic.me&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;More reading material about JavaScript asynchronicity&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/maxogden/art-of-node#callbacks&quot; rel=&quot;noreferrer&quot;&gt;The Art of Node - Callbacks&lt;/a&gt; explains asynchronous code and callbacks very well with vanilla JS examples and Node.js code as well.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I&apos;ve marked this answer as Community Wiki, hence anyone with at least 100 reputations can edit and improve it! Please feel free to improve this answer, or submit a completely new answer if you&apos;d like as well.&lt;/p&gt;\n  \n  &lt;p&gt;I want to turn this question into a canonical topic to answer asynchronicity issues which are unrelated to Ajax (there is &lt;a href=&quot;https://stackoverflow.com/q/14220321/1331430&quot;&gt;How to return the response from an AJAX call?&lt;/a&gt; for that), hence this topic needs your help to be as good and helpful as possible!&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;em&gt;FabrÃ­cio&apos;s answer is spot on; but I wanted to complement his answer with something less technical, which focusses on an analogy to help explain the concept of asynchronicity&lt;/em&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;An Analogy...&lt;/h3&gt;\n\n&lt;p&gt;Yesterday, the work I was doing required some information from a colleague. I rang him up; here&apos;s how the conversation went:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Hi Bob, I need to know how we &lt;em&gt;foo&lt;/em&gt;&apos;d the &lt;em&gt;bar&lt;/em&gt;&apos;d last week. Jim wants a report on it, and you&apos;re the only one who knows the details about it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Bob&lt;/strong&gt;: Sure thing, but it&apos;ll take me around 30 minutes?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: That&apos;s great Bob. Give me a ring back when you&apos;ve got the information!&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;At this point, I hung up the phone. Since I needed information from Bob to complete my report, I left the report and went for a coffee instead, then I caught up on some email. 40 minutes later (Bob is slow), Bob called back and gave me the information I needed. At this point, I resumed my work with my report, as I had all the information I needed.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Imagine if the conversation had gone like this instead;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Hi Bob, I need to know how we &lt;em&gt;foo&lt;/em&gt;&apos;d the &lt;em&gt;bar&lt;/em&gt;&apos;d last week. Jim want&apos;s a report on it, and you&apos;re the only one who knows the details about it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Bob&lt;/strong&gt;: Sure thing, but it&apos;ll take me around 30 minutes?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: That&apos;s great Bob. I&apos;ll wait.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And I sat there and waited. And waited. And waited. For 40 minutes. Doing nothing but waiting. Eventually, Bob gave me the information, we hung up, and I completed my report. But I&apos;d lost 40 minutes of productivity.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;This is asynchronous vs. synchronous behavior&lt;/h3&gt;\n\n&lt;p&gt;This is exactly what is happening in all the examples in our question. Loading an image, loading a file off disk, and requesting a page via AJAX are all slow operations (in the context of modern computing). &lt;/p&gt;\n\n&lt;p&gt;Rather than &lt;em&gt;waiting&lt;/em&gt; for these slow operations to complete, JavaScript lets you register a callback function which will be executed when the slow operation has completed. In the meantime, however, JavaScript will continue to execute other code. The fact that JavaScript executes &lt;em&gt;other code&lt;/em&gt; whilst waiting for the slow operation to complete makes the behavior&lt;strong&gt;asynchronous&lt;/strong&gt;. Had JavaScript waited around for the operation to complete before executing any other code, this would have been &lt;strong&gt;synchronous&lt;/strong&gt; behavior.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar;    \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;img&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here we register the callback function.&lt;/span&gt;\nimg.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code within this function will be executed once the image has loaded.&lt;/span&gt;\n    outerScopeVar = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;width&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// But, while the image is loading, JavaScript continues executing, and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// processes the following lines of JavaScript.&lt;/span&gt;\nimg.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;lolcat.png&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerScopeVar);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the code above, we&apos;re asking JavaScript to load &lt;code&gt;lolcat.png&lt;/code&gt;, which is a &lt;em&gt;sloooow&lt;/em&gt; operation. The callback function will be executed once this slow operation has done, but in the meantime, JavaScript will keep processing the next lines of code; i.e. &lt;code&gt;alert(outerScopeVar)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;This is why we see the alert showing &lt;code&gt;undefined&lt;/code&gt;; since the &lt;code&gt;alert()&lt;/code&gt; is processed immediately, rather than after the image has been loaded. &lt;/p&gt;\n\n&lt;p&gt;In order to fix our code, all we have to do is move the &lt;code&gt;alert(outerScopeVar)&lt;/code&gt; code &lt;em&gt;into&lt;/em&gt; the callback function. As a consequence of this, we no longer need the &lt;code&gt;outerScopeVar&lt;/code&gt; variable declared as a global variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;img&apos;&lt;/span&gt;);\n\nimg.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; localScopeVar = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;width&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(localScopeVar);\n};\n\nimg.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;lolcat.png&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;ll &lt;strong&gt;&lt;em&gt;always&lt;/em&gt;&lt;/strong&gt; see a callback is specified as a function, because that&apos;s the only* way in JavaScript to define some code, but not execute it until later.&lt;/p&gt;\n\n&lt;p&gt;Therefore, in all of our examples, the &lt;code&gt;function() { /* Do something */ }&lt;/code&gt; is the callback; to fix &lt;strong&gt;all&lt;/strong&gt; the examples, all we have to do is move the code which needs the response of the operation into there!&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;* Technically you can use &lt;code&gt;eval()&lt;/code&gt; as well, but &lt;a href=&quot;https://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea&quot;&gt;&lt;code&gt;eval()&lt;/code&gt; is evil&lt;/a&gt; for this purpose&lt;/sup&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;How do I keep my caller waiting?&lt;/h3&gt;\n\n&lt;p&gt;You might currently have some code similar to this;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getWidthOfImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;src&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;img&apos;&lt;/span&gt;);\n    img.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        outerScopeVar = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;width&lt;/span&gt;;\n    };\n    img.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = src;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; outerScopeVar;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; width = &lt;span class=&quot;hljs-title function_&quot;&gt;getWidthOfImage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lolcat.png&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(width);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, we now know that the &lt;code&gt;return outerScopeVar&lt;/code&gt; happens immediately; before the &lt;code&gt;onload&lt;/code&gt; callback function has updated the variable. This leads to &lt;code&gt;getWidthOfImage()&lt;/code&gt; returning &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt; being alerted.&lt;/p&gt;\n\n&lt;p&gt;To fix this, we need to allow the function calling &lt;code&gt;getWidthOfImage()&lt;/code&gt; to register a callback, then move the alert&apos;ing of the width to be within that callback;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getWidthOfImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;src, cb&lt;/span&gt;) {     \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;img&apos;&lt;/span&gt;);\n    img.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;width&lt;/span&gt;);\n    };\n    img.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = src;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getWidthOfImage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lolcat.png&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;width&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(width);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... as before, note that we&apos;ve been able to remove the global variables (in this case &lt;code&gt;width&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a more concise answer for people that are looking for a quick reference as well as some examples using promises and async/await.&lt;/p&gt;\n\n&lt;p&gt;Start with the naive approach (that doesn&apos;t work) for a function that calls an asynchronous method (in this case &lt;code&gt;setTimeout&lt;/code&gt;) and returns a message:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    outerScopeVar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello asynchronous world!&apos;&lt;/span&gt;;\n  }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; outerScopeVar;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; gets logged in this case because &lt;code&gt;getMessage&lt;/code&gt; returns before the &lt;code&gt;setTimeout&lt;/code&gt; callback is called and updates &lt;code&gt;outerScopeVar&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The two main ways to solve it are using &lt;strong&gt;callbacks&lt;/strong&gt; and &lt;strong&gt;promises&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Callbacks&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The change here is that &lt;code&gt;getMessage&lt;/code&gt; accepts a &lt;code&gt;callback&lt;/code&gt; parameter that will be called to deliver the results back to the calling code once available.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello asynchronous world!&apos;&lt;/span&gt;);\n  }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(message);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/promises&quot; rel=&quot;noreferrer&quot;&gt;Promises&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Promises provide an alternative which is more flexible than callbacks because they can be naturally combined to coordinate multiple async operations. A &lt;a href=&quot;https://promisesaplus.com/&quot; rel=&quot;noreferrer&quot;&gt;Promises/A+&lt;/a&gt; standard implementation is natively provided in node.js (0.12+) and many current browsers, but is also implemented in libraries like &lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt; and &lt;a href=&quot;https://github.com/kriskowal/q&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello asynchronous world!&apos;&lt;/span&gt;);\n    }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(message);  \n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;jQuery &lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot; rel=&quot;noreferrer&quot;&gt;Deferreds&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;jQuery provides functionality that&apos;s similar to promises with its Deferreds.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deferred = $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;();\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    deferred.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello asynchronous world!&apos;&lt;/span&gt;);\n  }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; deferred.&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(message);  \n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;async/await&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If your JavaScript environment includes support for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; (like Node.js 7.6+), then you can use promises synchronously within &lt;code&gt;async&lt;/code&gt; functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello asynchronous world!&apos;&lt;/span&gt;);\n        }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(message);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To state the obvious, the cup represents &lt;code&gt;outerScopeVar&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Asynchronous functions be like...&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yCASc.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yCASc.jpg&quot; alt=&quot;asynchronous call for coffee&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The other answers are excellent and I just want to provide a straight forward answer to this. Just limiting to jQuery asynchronous calls&lt;/p&gt;\n\n&lt;p&gt;All ajax calls (including the &lt;code&gt;$.get&lt;/code&gt; or &lt;code&gt;$.post&lt;/code&gt; or &lt;code&gt;$.ajax&lt;/code&gt;) are asynchronous.&lt;/p&gt;\n\n&lt;p&gt;Considering your example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar;  &lt;span class=&quot;hljs-comment&quot;&gt;//line 1&lt;/span&gt;\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;loldog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;//line 2&lt;/span&gt;\n    outerScopeVar = response;\n});\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerScopeVar);  &lt;span class=&quot;hljs-comment&quot;&gt;//line 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code execution starts from line 1, declares the variable and triggers and asynchronous call on line 2, (i.e., the post request) and it continues its execution from line 3, without waiting for the post request to complete its execution.&lt;/p&gt;\n\n&lt;p&gt;Lets say that the post request takes 10 seconds to complete, the value of &lt;code&gt;outerScopeVar&lt;/code&gt; will only be set after those 10 seconds.&lt;/p&gt;\n\n&lt;p&gt;To try out,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar; &lt;span class=&quot;hljs-comment&quot;&gt;//line 1&lt;/span&gt;\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;loldog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;//line 2, takes 10 seconds to complete&lt;/span&gt;\n    outerScopeVar = response;\n});\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lets wait for some time here! Waiting is fun&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//line 3&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerScopeVar);  &lt;span class=&quot;hljs-comment&quot;&gt;//line 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now when you execute this, you would get an alert on line 3. Now wait for some time until you are sure the post request has returned some value. Then when you click OK, on the alert box, next alert would print the expected value, because you waited for it.&lt;/p&gt;\n\n&lt;p&gt;In real life scenario, the code becomes,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerScopeVar;\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;loldog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    outerScopeVar = response;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerScopeVar);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All the code that depends on the asynchronous calls, is moved inside the asynchronous block, or by waiting on the asynchronous calls.&lt;/p&gt;\n    ","\n&lt;p&gt;In all these scenarios &lt;code&gt;outerScopeVar&lt;/code&gt; is modified or assigned a value &lt;strong&gt;asynchronously&lt;/strong&gt; or &lt;strong&gt;happening in a later time(waiting or listening for some event to occur),for which the current execution will not wait&lt;/strong&gt;.So all these cases current execution flow results in &lt;code&gt;outerScopeVar = undefined&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s discuss each examples(I marked the portion which is called asynchronously or delayed for some events to occur):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Ck9q6.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ck9q6.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here we register an eventlistner which will be executed upon that particular event.Here loading of image.Then the current execution continuous with next lines &lt;code&gt;img.src = &apos;lolcat.png&apos;;&lt;/code&gt; and &lt;code&gt;alert(outerScopeVar);&lt;/code&gt; meanwhile the event may not occur. i.e, funtion &lt;code&gt;img.onload&lt;/code&gt; wait for the referred image to load, asynchrously. This will happen all the folowing example- the event may differ.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rOzdX.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rOzdX.png&quot; alt=&quot;2&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here the timeout event plays the role, which will invoke the handler after the specified time. Here it is &lt;code&gt;0&lt;/code&gt;, but still it registers an asynchronous event it will be added to the last position of the &lt;code&gt;Event Queue&lt;/code&gt; for execution, which makes the guaranteed delay.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/2VpYE.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/2VpYE.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;\nThis time ajax callback.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/p8ZrL.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/p8ZrL.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Node can be consider as a king of asynchronous coding.Here the marked function is registered as a callback handler which will be executed after reading the specified file.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/vpmGy.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/vpmGy.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Obvious promise (something will be done in future) is asynchronous. see &lt;a href=&quot;https://stackoverflow.com/questions/6801283/what-are-the-differences-between-deferred-promise-and-future-in-javascript&quot;&gt;What are the differences between Deferred, Promise and Future in JavaScript?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.quora.com/Whats-the-difference-between-a-promise-and-a-callback-in-Javascript&quot; rel=&quot;noreferrer&quot;&gt;https://www.quora.com/Whats-the-difference-between-a-promise-and-a-callback-in-Javascript&lt;/a&gt;&lt;/p&gt;\n    "],"20":["\n&lt;h2&gt;The Stack Overflow Regular Expressions FAQ&lt;/h2&gt;\n&lt;p&gt;See also a lot of general hints and useful links at the &lt;a href=&quot;/questions/tagged/regex&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;regex&apos;&quot; rel=&quot;tag&quot;&gt;regex&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/regex/info&quot;&gt;&lt;strong&gt;tag details page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Online tutorials&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://regexone.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;RegexOne &lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regular Expressions Info &lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Quantifiers&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Zero-or-more: &lt;a href=&quot;https://stackoverflow.com/a/10764399&quot;&gt;&lt;code&gt;*&lt;/code&gt;:greedy&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/7124976&quot;&gt;&lt;code&gt;*?&lt;/code&gt;:reluctant&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17064242&quot;&gt;&lt;code&gt;*+&lt;/code&gt;:possessive&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;One-or-more: &lt;a href=&quot;https://stackoverflow.com/a/10764399&quot;&gt;&lt;code&gt;+&lt;/code&gt;:greedy&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/7124976&quot;&gt;&lt;code&gt;+?&lt;/code&gt;:reluctant&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/4489551&quot;&gt;&lt;code&gt;++&lt;/code&gt;:possessive&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/17400486&quot;&gt;&lt;code&gt;?&lt;/code&gt;:optional (zero-or-one)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Min/max ranges (all inclusive): &lt;a href=&quot;https://stackoverflow.com/a/17032985&quot;&gt;&lt;code&gt;{n,m}&lt;/code&gt;:between n &amp;amp; m&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17120435&quot;&gt;&lt;code&gt;{n,}&lt;/code&gt;:n-or-more&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17829727&quot;&gt;&lt;code&gt;{n}&lt;/code&gt;:exactly n&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Differences between greedy, reluctant (a.k.a. &quot;lazy&quot;, &quot;ungreedy&quot;) and possessive quantifier:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/5319840&quot;&gt;Greedy vs. Reluctant vs. Possessive Quantifiers&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/3075532&quot;&gt;In-depth discussion on the differences between greedy versus non-greedy&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/18006093&quot;&gt;What&apos;s the difference between &lt;code&gt;{n}&lt;/code&gt; and &lt;code&gt;{n}?&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/1117467&quot;&gt;Can someone explain Possessive Quantifiers to me?&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/5537513&quot;&gt;Emulating possessive quantifiers&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Non-Stack Overflow references: From &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/regex/quant.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Oracle&lt;/a&gt;, &lt;a href=&quot;https://www.regular-expressions.info/possessive.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;regular-expressions.info&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Character Classes&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/9801630&quot;&gt;What is the difference between square brackets and parentheses?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/1553171&quot;&gt;&lt;code&gt;[...]&lt;/code&gt;&lt;/a&gt;: any one character, &lt;a href=&quot;https://stackoverflow.com/a/20802463&quot;&gt;&lt;code&gt;[^...]&lt;/code&gt;&lt;/a&gt;: negated/any character but&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/25950433&quot;&gt;&lt;code&gt;[^]&lt;/code&gt; matches any one character &lt;em&gt;including&lt;/em&gt; newlines&lt;/a&gt; &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/10738860&quot;&gt;&lt;code&gt;[\\w-[\\d]]&lt;/code&gt; / &lt;code&gt;[a-z-[qz]]&lt;/code&gt;&lt;/a&gt;: set subtraction &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/xml-schema&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;xml-schema&apos;&quot; rel=&quot;tag&quot;&gt;xml-schema&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/xpath&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;xpath&apos;&quot; rel=&quot;tag&quot;&gt;xpath&lt;/a&gt;, JGSoft&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/15935168&quot;&gt;&lt;code&gt;[\\w&amp;amp;&amp;amp;[^\\d]]&lt;/code&gt;: set intersection&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt; 1.9+&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/12276342&quot;&gt;&lt;code&gt;[[:alpha:]]&lt;/code&gt;&lt;/a&gt;:POSIX character classes&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[[:&amp;lt;:]]&lt;/code&gt; and &lt;code&gt;[[:&amp;gt;:]]&lt;/code&gt; Word boundaries&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/21934168&quot;&gt;Why do &lt;code&gt;[^\\\\D2]&lt;/code&gt;, &lt;code&gt;[^[^0-9]2]&lt;/code&gt;, &lt;code&gt;[^2[^0-9]]&lt;/code&gt; get different results in Java?&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Shorthand:\n&lt;ul&gt;\n&lt;li&gt;Digit: &lt;a href=&quot;https://stackoverflow.com/a/16621778&quot;&gt;&lt;code&gt;\\d&lt;/code&gt;:digit&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/19011185&quot;&gt;&lt;code&gt;\\D&lt;/code&gt;:non-digit&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Word character (Letter, digit, underscore): &lt;a href=&quot;https://stackoverflow.com/a/11874899&quot;&gt;&lt;code&gt;\\w&lt;/code&gt;:word character&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/19011185&quot;&gt;&lt;code&gt;\\W&lt;/code&gt;:non-word character&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Whitespace: &lt;a href=&quot;https://stackoverflow.com/a/21067350&quot;&gt;&lt;code&gt;\\s&lt;/code&gt;:whitespace&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/19011185&quot;&gt;&lt;code&gt;\\S&lt;/code&gt;:non-whitespace&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5969440/what-is-the-l-unicode-category&quot;&gt;Unicode categories (&lt;code&gt;\\p{L}, \\P{L}&lt;/code&gt;, etc.)&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Escape Sequences&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Horizontal whitespace: &lt;a href=&quot;https://stackoverflow.com/a/4910093&quot;&gt;&lt;code&gt;\\h&lt;/code&gt;:space-or-tab&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17950891&quot;&gt;&lt;code&gt;\\t&lt;/code&gt;:tab&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Newlines:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/3451192&quot;&gt;&lt;code&gt;\\r&lt;/code&gt;, &lt;code&gt;\\n&lt;/code&gt;:carriage return and line feed&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/18992691&quot;&gt;&lt;code&gt;\\R&lt;/code&gt;:generic newline&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java-8&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java-8&apos;&quot; rel=&quot;tag&quot;&gt;java-8&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Negated whitespace sequences: &lt;a href=&quot;https://stackoverflow.com/q/26972688&quot;&gt;&lt;code&gt;\\H&lt;/code&gt;:Non horizontal whitespace character, &lt;code&gt;\\V&lt;/code&gt;:Non vertical whitespace character, &lt;code&gt;\\N&lt;/code&gt;:Non line feed character&lt;/a&gt; &lt;a href=&quot;/questions/tagged/pcre&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;pcre&apos;&quot; rel=&quot;tag&quot;&gt;pcre&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php5&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php5&apos;&quot; rel=&quot;tag&quot;&gt;php5&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java-8&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java-8&apos;&quot; rel=&quot;tag&quot;&gt;java-8&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Other: &lt;a href=&quot;https://stackoverflow.com/q/12290224&quot;&gt;&lt;code&gt;\\v&lt;/code&gt;:vertical tab&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/4275788&quot;&gt;&lt;code&gt;\\e&lt;/code&gt;:the escape character&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Anchors&lt;/strong&gt;&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;anchor&lt;/th&gt;\n&lt;th&gt;matches&lt;/th&gt;\n&lt;th&gt;flavors&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Start of string&lt;/td&gt;\n&lt;td&gt;Common*&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Start of line&lt;/td&gt;\n&lt;td&gt;Common&lt;sup&gt;&lt;code&gt;m&lt;/code&gt;&lt;/sup&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;End of line&lt;/td&gt;\n&lt;td&gt;Common&lt;sup&gt;&lt;code&gt;m&lt;/code&gt;&lt;/sup&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;End of text&lt;/td&gt;\n&lt;td&gt;Common* except &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Very end of string&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;*, &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;&lt;sup&gt;&lt;code&gt;D&lt;/code&gt;&lt;/sup&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\A&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Start of string&lt;/td&gt;\n&lt;td&gt;Common except &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\Z&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;End of text&lt;/td&gt;\n&lt;td&gt;Common except &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\Z&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Very end of string&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\z&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Very end of string&lt;/td&gt;\n&lt;td&gt;Common except &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\b&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Word boundary&lt;/td&gt;\n&lt;td&gt;Common&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\B&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Not a word boundary&lt;/td&gt;\n&lt;td&gt;Common&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;\\G&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;End of previous match&lt;/td&gt;\n&lt;td&gt;Common except &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Term&lt;/th&gt;\n&lt;th&gt;Definition&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/6908745&quot;&gt;Start of string&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At the very start of the string.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/6908745&quot;&gt;Start of line&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At the very start of the string, and&lt;br&gt;after a non-terminal line terminator.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/48832215&quot;&gt;Very end of string&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At the very end of the string.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/4020821&quot;&gt;End of text&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At the very end of the string, and&lt;br&gt;at a terminal line terminator.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/6908745&quot;&gt;End of line&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At the very end of the string, and&lt;br&gt;at a line terminator.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/6664167&quot;&gt;Word boundary&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At a word character not preceded by a word character, and&lt;br&gt;at a non-word character not preceded by a non-word character.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/q/21971701&quot;&gt;End of previous match&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;At a previously set position, usually where a previous match ended.&lt;br&gt;At the very start of the string if no position was set.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;&quot;Common&quot; refers to the following: &lt;a href=&quot;/questions/tagged/icu&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;icu&apos;&quot; rel=&quot;tag&quot;&gt;icu&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt; &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt; &lt;a href=&quot;/questions/tagged/objective-c&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;objective-c&apos;&quot; rel=&quot;tag&quot;&gt;objective-c&lt;/a&gt; &lt;a href=&quot;/questions/tagged/pcre&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;pcre&apos;&quot; rel=&quot;tag&quot;&gt;pcre&lt;/a&gt; &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt; &lt;a href=&quot;/questions/tagged/swift&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;swift&apos;&quot; rel=&quot;tag&quot;&gt;swift&lt;/a&gt; &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;* Default &lt;a href=&quot;https://i.stack.imgur.com/D41QM.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;|&lt;/a&gt;\n&lt;sup&gt;&lt;code&gt;m&lt;/code&gt;&lt;/sup&gt; Multi-line mode. &lt;a href=&quot;https://i.stack.imgur.com/D41QM.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;|&lt;/a&gt;\n&lt;sup&gt;&lt;code&gt;D&lt;/code&gt;&lt;/sup&gt; Dollar end only mode.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Groups&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/21880127&quot;&gt;&lt;code&gt;(...)&lt;/code&gt;:capture group&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/3512471&quot;&gt;&lt;code&gt;(?:)&lt;/code&gt;:non-capture group&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/23062553&quot;&gt;Why is my repeating capturing group only capturing the last match?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/21880127&quot;&gt;&lt;code&gt;\\1&lt;/code&gt;:backreference and capture-group reference, &lt;code&gt;$1&lt;/code&gt;:capture group reference&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/8624345&quot;&gt;What&apos;s the meaning of a number after a backslash in a regular expression?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/5984633&quot;&gt;&lt;code&gt;\\g&amp;lt;1&amp;gt;123&lt;/code&gt;:How to follow a numbered capture group, such as &lt;code&gt;\\1&lt;/code&gt;, with a number?:&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/3812728&quot;&gt;What does a subpattern &lt;code&gt;(?i:regex)&lt;/code&gt; mean?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10059673/named-regular-expression-group-pgroup-nameregexp-what-does-p-stand-for&quot;&gt;What does the &apos;P&apos; in &lt;code&gt;(?P&amp;lt;group_name&amp;gt;regexp)&lt;/code&gt; mean?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/14411818&quot;&gt;&lt;code&gt;(?&amp;gt;)&lt;/code&gt;:atomic group&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/questions/50524/what-is-a-regex-independent-capturing-group&quot;&gt;independent group&lt;/a&gt;,  &lt;a href=&quot;https://stackoverflow.com/a/5333645&quot;&gt;&lt;code&gt;(?|)&lt;/code&gt;:branch reset&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/5378077&quot;&gt;Equivalent of branch reset in .NET/C#&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Named capture groups:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/named.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;General named capturing group reference at &lt;code&gt;regular-expressions.info&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;: &lt;code&gt;(?&amp;lt;groupname&amp;gt;regex)&lt;/code&gt;: &lt;a href=&quot;https://blogs.oracle.com/xuemingshen/entry/named_capturing_group_in_jdk7&quot; rel=&quot;nofollow noreferrer&quot;&gt;Overview&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#groupname&quot; rel=&quot;nofollow noreferrer&quot;&gt;naming rules&lt;/a&gt; &lt;em&gt;(Non-Stack Overflow links)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Other languages: &lt;a href=&quot;https://stackoverflow.com/q/10059673&quot;&gt;&lt;code&gt;(?P&amp;lt;groupname&amp;gt;regex)&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/20355718&quot;&gt;&lt;code&gt;(?&amp;lt;groupname&amp;gt;regex)&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/288989&quot;&gt;&lt;code&gt;(?&amp;lt;groupname&amp;gt;regex)&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;, &lt;code&gt;(?P&amp;lt;groupname&amp;gt;regex)&lt;/code&gt; and &lt;code&gt;(?&amp;lt;groupname&amp;gt;regex)&lt;/code&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Lookarounds&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Lookaheads: &lt;a href=&quot;https://stackoverflow.com/a/1570916&quot;&gt;&lt;code&gt;(?=...)&lt;/code&gt;:positive&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/12210820&quot;&gt;&lt;code&gt;(?!...)&lt;/code&gt;:negative&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Lookbehinds: &lt;a href=&quot;https://stackoverflow.com/a/11197672&quot;&gt;&lt;code&gt;(?&amp;lt;=...)&lt;/code&gt;:positive&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/11197672&quot;&gt;&lt;code&gt;(?&amp;lt;!...)&lt;/code&gt;:negative&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Lookbehind limits in:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/22821726&quot;&gt;Lookbehinds need to be constant-length&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/20994257&quot;&gt;Lookarounds of limited length &lt;code&gt;{0,n}&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/20994257&quot;&gt;Variable length lookbehinds are allowed&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Lookbehind alternatives:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/11640500&quot;&gt;Using &lt;code&gt;\\K&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/a/13543042&quot;&gt;Flavors that support &lt;code&gt;\\K&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/11641102&quot;&gt;Alternative regex module for Python&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/11640862&quot;&gt;The hacky way&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/35143111&quot;&gt;JavaScript negative lookbehind equivalents&lt;/a&gt; &lt;sup&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript&quot; rel=&quot;nofollow noreferrer&quot;&gt;External link&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Modifiers&lt;/strong&gt;&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;flag&lt;/th&gt;\n&lt;th&gt;modifier&lt;/th&gt;\n&lt;th&gt;flavors&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/61203075&quot;&gt;ASCII&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/11395687&quot;&gt;current position&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/2468483&quot;&gt;expression&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/9622110&quot;&gt;global&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;most&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/12411066&quot;&gt;case-insensitive&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;most&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/22438123&quot;&gt;multiline&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt; &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/4257912&quot;&gt;(non)multiline&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/13334823&quot;&gt;once&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt; &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/210027&quot;&gt;study&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;s&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/13594017&quot;&gt;single line&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;U&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/5978385&quot;&gt;ungreedy&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; &lt;a href=&quot;/questions/tagged/r&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;r&apos;&quot; rel=&quot;tag&quot;&gt;r&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/2553239&quot;&gt;unicode&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;most&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/a/2710390&quot;&gt;whitespace-extended&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;most&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;https://javascript.info/regexp-sticky&quot; rel=&quot;nofollow noreferrer&quot;&gt;sticky &lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/16367404&quot;&gt;How to convert preg_replace e to preg_replace_callback?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/43636&quot;&gt;What are inline modifiers?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28630936/what-is-mix-in-a-ruby-regular-expression&quot;&gt;What is &apos;?-mix&apos; in a Ruby Regular Expression&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Other:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/22187948&quot;&gt;&lt;code&gt;|&lt;/code&gt;:alternation (OR) operator&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/13594017&quot;&gt;&lt;code&gt;.&lt;/code&gt;:any character&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/21929764&quot;&gt;&lt;code&gt;[.]&lt;/code&gt;:literal dot character&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/399078&quot;&gt;What special characters must be escaped?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Control verbs (&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; and &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;): &lt;a href=&quot;https://stackoverflow.com/a/20008790&quot;&gt;&lt;code&gt;(*PRUNE)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/20008790&quot;&gt;&lt;code&gt;(*SKIP)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/20008790&quot;&gt;&lt;code&gt;(*FAIL)&lt;/code&gt; and &lt;code&gt;(*F)&lt;/code&gt;&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; only: &lt;a href=&quot;https://stackoverflow.com/a/7374702&quot;&gt;&lt;code&gt;(*BSR_ANYCRLF)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Recursion (&lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; and &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;): &lt;a href=&quot;https://stackoverflow.com/q/8440911&quot;&gt;&lt;code&gt;(?R)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/20569361&quot;&gt;&lt;code&gt;(?0)&lt;/code&gt; and &lt;code&gt;(?1)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/17845034&quot;&gt;&lt;code&gt;(?-1)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/18151617&quot;&gt;&lt;code&gt;(?&amp;amp;groupname)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Common Tasks&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/413077&quot;&gt;Get a string between two curly braces: &lt;code&gt;{...}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/23589174&quot;&gt;Match (or replace) a pattern except in situations s1, s2, s3...&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/5830387&quot;&gt;How do I find all YouTube video ids in a string using a regex?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Validation:\n&lt;ul&gt;\n&lt;li&gt;Internet: &lt;a href=&quot;https://stackoverflow.com/q/201323&quot;&gt;email addresses&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/190405&quot;&gt;URLs&lt;/a&gt; (host/port: &lt;a href=&quot;https://stackoverflow.com/a/22697740&quot;&gt;regex&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/24399003&quot;&gt;non-regex&lt;/a&gt; alternatives), &lt;a href=&quot;https://stackoverflow.com/a/3802238&quot;&gt;passwords&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Numeric: &lt;a href=&quot;https://stackoverflow.com/a/4247184&quot;&gt;a number&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/22131040&quot;&gt;min-max ranges (such as 1-31)&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/123559&quot;&gt;phone numbers&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/15491894&quot;&gt;date&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Parsing HTML with regex: See &quot;General Information &amp;gt; When not to use Regex&quot;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Advanced Regex-Fu&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Strings and numbers:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/406230&quot;&gt;Regular expression to match a line that doesn&apos;t contain a word&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/3746487&quot;&gt;How does this PCRE pattern detect palindromes?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://codegolf.stackexchange.com/q/19262&quot;&gt;Match strings whose length is a fourth power&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/3627681&quot;&gt;How does this regex find triangular numbers?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/2795065&quot;&gt;How to determine if a number is a prime with regex?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/28051651&quot;&gt;How to match the middle character in a string with regex?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Other:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/3644266&quot;&gt;How can we match a^n b^n?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Match nested brackets\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/17845034&quot;&gt;Using a recursive pattern&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/17004406&quot;&gt;Using balancing groups&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/17039670&quot;&gt;Vertical regex matching in an ASCII image&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://codegolf.stackexchange.com/questions/tagged/regular-expression?sort=votes&amp;amp;pageSize=50&quot;&gt;List of highly up-voted regex questions on Code Golf&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/23001137&quot;&gt;How to make two quantifiers repeat the same number of times?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/1723182&quot;&gt;An impossible-to-match regular expression: &lt;code&gt;(?!a)a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/23589174&quot;&gt;Match/delete/replace &lt;code&gt;this&lt;/code&gt; except in contexts A, B and C&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/47162099&quot;&gt;Match nested brackets with regex without using recursion or balancing groups?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Flavor-Specific Information&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(Except for those marked with &lt;code&gt;*&lt;/code&gt;, this section contains non-Stack Overflow links.)&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Java\n&lt;ul&gt;\n&lt;li&gt;Official documentation: &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pattern Javadoc &lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/regex/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Oracle&apos;s regular expressions tutorial &lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;The differences between functions in &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;java.util.regex.Matcher&lt;/code&gt;&lt;/a&gt;:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#matches--&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;matches()&lt;/code&gt;&lt;/a&gt;): The match must be anchored to both input-start and -end&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#find--&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;): A match may be anywhere in the input string (substrings)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#lookingAt--&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;lookingAt()&lt;/code&gt;&lt;/a&gt;: The match must be anchored to input-start only&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;(For anchors in general, see the section &quot;Anchors&quot;)&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The only &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;java.lang.String&lt;/code&gt;&lt;/a&gt; functions that accept regular expressions: &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#matches-java.lang.String-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;matches(s)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceAll-java.lang.String-java.lang.String-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;replaceAll(s,s)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceFirst-java.lang.String-java.lang.String-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;replaceFirst(s,s)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;split(s)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;split(s,i)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;*&lt;a href=&quot;https://stackoverflow.com/a/5771326&quot;&gt;An (opinionated and) detailed discussion of the disadvantages of and missing features in &lt;code&gt;java.util.regex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;.NET\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/36047988&quot;&gt;How to read a .NET regex with look-ahead, look-behind, capturing groups and back-references mixed together?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Official documentation:\n&lt;ul&gt;\n&lt;li&gt;Boost regex engine: &lt;a href=&quot;https://stackoverflow.com/a/5771326&quot;&gt;General syntax&lt;/a&gt;, &lt;a href=&quot;https://www.boost.org/doc/libs/1_55_0/libs/regex/doc/html/boost_regex/syntax.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Perl syntax&lt;/a&gt; &lt;em&gt;(used by TextPad, Sublime Text, UltraEdit, ...???)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;general info&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp&quot; rel=&quot;nofollow noreferrer&quot;&gt;RegExp object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hs600312.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;.NET&lt;/a&gt; &lt;img src=&quot;https://i.stack.imgur.com/D41QM.png&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/regexp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQL&lt;/a&gt; &lt;img src=&quot;https://i.stack.imgur.com/D41QM.png&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;https://docs.oracle.com/cd/B19306_01/appdev.102/b14251/adfns_regexp.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Oracle&lt;/a&gt; &lt;img src=&quot;https://i.stack.imgur.com/D41QM.png&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;https://perldoc.perl.org/perlre.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Perl5 version 18.2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;PHP: &lt;a href=&quot;https://www.php.net/manual/en/reference.pcre.pattern.syntax.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;pattern syntax&lt;/a&gt;, &lt;a href=&quot;https://us2.php.net/preg_match&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;preg_match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Python: &lt;a href=&quot;https://docs.python.org/3/library/re.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regular expression operations&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/re.html#search-vs-match&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;search&lt;/code&gt; vs &lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/howto/regex.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;how-to&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Rust: &lt;a href=&quot;https://docs.rs/regex/latest&quot; rel=&quot;nofollow noreferrer&quot;&gt;crate &lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.rs/regex/latest/regex/struct.Regex.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;struct &lt;code&gt;regex::Regex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Splunk: &lt;a href=&quot;https://docs.splunk.com/Documentation/Splunk/latest/Knowledge/AboutSplunkregularexpressions#Terminology_and_syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex terminology and syntax&lt;/a&gt; and &lt;a href=&quot;https://docs.splunk.com/Documentation/Splunk/latest/SearchReference/Regex&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex command&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Tcl: &lt;a href=&quot;https://www.tcl.tk/man/tcl8.6/TclCmd/re_syntax.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex syntax&lt;/a&gt;, &lt;a href=&quot;https://www.tcl.tk/man/tcl8.6/TclCmd/regexp.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;manpage&lt;/a&gt;, &lt;a href=&quot;http://wiki.tcl.tk/986&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;regexp&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Visual Studio Find and Replace&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;General information&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(Links marked with &lt;code&gt;*&lt;/code&gt; are non-Stack Overflow links.)&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Other general documentation resources: &lt;a href=&quot;https://stackoverflow.com/q/4736&quot;&gt;Learning Regular Expressions&lt;/a&gt;, *&lt;a href=&quot;https://www.regular-expressions.info&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regular-expressions.info&lt;/a&gt;, *&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia entry&lt;/a&gt;, *&lt;a href=&quot;http://www.rexegg.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;RexEgg&lt;/a&gt;, &lt;a href=&quot;http://www.dmoz.org/Computers/Programming/Languages/Regular_Expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Open-Directory Project&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/3978438&quot;&gt;DFA versus NFA&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22115/using-regex-to-generate-strings-rather-than-match-them&quot;&gt;Generating Strings matching regex&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Books: Jeffrey Friedl&apos;s &lt;em&gt;&lt;a href=&quot;http://regex.info/book.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mastering Regular Expressions&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;When to &lt;em&gt;not&lt;/em&gt; use regular expressions:\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Some people, when confronted with a problem, think &quot;I know, I&apos;ll use regular expressions.&quot; Now they have two problems.&lt;/a&gt;&lt;/em&gt; (blog post written by &lt;a href=&quot;https://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;&apos;s founder)*&lt;/li&gt;\n&lt;li&gt;Do not use regex to parse HTML:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/590747&quot;&gt;Don&apos;t&lt;/a&gt;. &lt;img src=&quot;https://i.stack.imgur.com/D41QM.png&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;https://stackoverflow.com/a/1732454&quot;&gt;Please, just don&apos;t&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/4234491&quot;&gt;Well, maybe...if you&apos;re &lt;em&gt;really&lt;/em&gt; determined&lt;/a&gt; (other answers in this question are also good)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Examples of regex that can cause regex engine to fail&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/288800/why-does-this-regular-expression-kill-the-java-regex-engine&quot;&gt;Why does this regular expression kill the Java regex engine?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Tools: Testers and Explainers&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(This section contains non-Stack Overflow links.)&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Online &lt;i&gt;(* includes replacement tester, + includes split tester)&lt;/i&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://debuggex.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;Debuggex&lt;/a&gt; (Also has a repository of useful regexes) &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/pcre&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;pcre&apos;&quot; rel=&quot;tag&quot;&gt;pcre&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;*&lt;a href=&quot;https://regex101.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regular Expressions 101&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/pcre&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;pcre&apos;&quot; rel=&quot;tag&quot;&gt;pcre&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;, &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://regexpal.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regex Pal&lt;/a&gt;, &lt;em&gt;&lt;a href=&quot;http://www.regular-expressions.info/javascriptexample.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;regular-expressions.info&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://rubular.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rubular&lt;/a&gt; &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt; &lt;img src=&quot;https://i.stack.imgur.com/D41QM.png&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;http://www.regexr.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;RegExr&lt;/a&gt;  &lt;img src=&quot;https://i.stack.imgur.com/D41QM.png&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;http://regexhero.net/tester&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regex Hero&lt;/a&gt; &lt;a href=&quot;/questions/tagged/dotnet&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;dotnet&apos;&quot; rel=&quot;tag&quot;&gt;dotnet&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;*+ &lt;a href=&quot;http://regexstorm.net/tester&quot; rel=&quot;nofollow noreferrer&quot;&gt;regexstorm.net&lt;/a&gt; &lt;a href=&quot;/questions/tagged/.net&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;.net&apos;&quot; rel=&quot;tag&quot;&gt;.net&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;*RegexPlanet: &lt;a href=&quot;http://www.regexplanet.com/advanced/java/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java&lt;/a&gt; &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/golang/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go&lt;/a&gt; &lt;a href=&quot;/questions/tagged/go&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;go&apos;&quot; rel=&quot;tag&quot;&gt;go&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/haskell/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Haskell&lt;/a&gt; &lt;a href=&quot;/questions/tagged/haskell&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;haskell&apos;&quot; rel=&quot;tag&quot;&gt;haskell&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/javascript/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript&lt;/a&gt; &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/dotnet/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;.NET&lt;/a&gt; &lt;a href=&quot;/questions/tagged/dotnet&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;dotnet&apos;&quot; rel=&quot;tag&quot;&gt;dotnet&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/perl/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Perl&lt;/a&gt; &lt;a href=&quot;/questions/tagged/perl&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;perl&apos;&quot; rel=&quot;tag&quot;&gt;perl&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; &lt;a href=&quot;http://www.regexplanet.com/advanced/php/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;PCRE&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/python/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python&lt;/a&gt; &lt;a href=&quot;/questions/tagged/python&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;python&apos;&quot; rel=&quot;tag&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/ruby/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ruby&lt;/a&gt; &lt;a href=&quot;/questions/tagged/ruby&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;ruby&apos;&quot; rel=&quot;tag&quot;&gt;ruby&lt;/a&gt;, &lt;a href=&quot;http://www.regexplanet.com/advanced/xregexp/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;XRegExp&lt;/a&gt; &lt;a href=&quot;/questions/tagged/xregexp&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;xregexp&apos;&quot; rel=&quot;tag&quot;&gt;xregexp&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.freeformatter.com/regex-tester.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;freeformatter.com&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/xregexp&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;xregexp&apos;&quot; rel=&quot;tag&quot;&gt;xregexp&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;*+&lt;a href=&quot;http://regex.larsolavtorvik.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;regex.larsolavtorvik.com&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;/questions/tagged/php&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;php&apos;&quot; rel=&quot;tag&quot;&gt;php&lt;/a&gt; PCRE and POSIX, &lt;a href=&quot;/questions/tagged/javascript&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;javascript&apos;&quot; rel=&quot;tag&quot;&gt;javascript&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Offline:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Microsoft Windows: &lt;a href=&quot;http://regexbuddy.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;RegexBuddy&lt;/a&gt; (analysis), &lt;a href=&quot;http://regexmagic.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;RegexMagic&lt;/a&gt; (creation), &lt;a href=&quot;http://www.ultrapico.com/expresso.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Expresso&lt;/a&gt; (analysis, creation, free)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n    "]},"page":"119","randomQuestions":[{"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922"},{"title":"Storing Images in DB - Yea or Nay?","slug":"storing-images-in-db-yea-or-nay-1657387248067"},{"title":"How to fix \"Headers already sent\" error in PHP","slug":"how-to-fix-\"headers-already-sent\"-error-in-php-1657384315553"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188"},{"title":"Deep cloning objects","slug":"deep-cloning-objects-1657387930865"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"How can I deserialize JSON with C#?","slug":"how-can-i-deserialize-json-with-c-1657388102941"},{"title":"How do I profile C++ code running on Linux?","slug":"how-do-i-profile-c++-code-running-on-linux-1657384754272"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"How do I compare strings in Java?","slug":"how-do-i-compare-strings-in-java-1657384243187"},{"title":"Sort ArrayList of custom Objects by property","slug":"sort-arraylist-of-custom-objects-by-property-1657387678339"},{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"Is List<Dog> a subclass of List<Animal>? Why are Java generics not implicitly polymorphic?","slug":"is-listlessdoggreater-a-subclass-of-listlessanimalgreater-why-are-java-generics-not-implicitly-polymorphic-1657384766724"}]},"__N_SSG":true}