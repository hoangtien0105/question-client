{"pageProps":{"data":{"count":610,"rows":[{"id":485,"title":"How do I install pip on Windows?","slug":"how-do-i-install-pip-on-windows-1657388147761","postType":"QUESTION","createdAt":"2022-07-09T17:35:47.000Z","updatedAt":"2022-07-09T17:35:47.000Z","tags":[{"id":2442,"name":"installation","slug":"installation","createdAt":"2022-07-09T17:35:47.000Z","updatedAt":"2022-07-09T17:35:47.000Z","Questions_Tags":{"questionId":485,"tagId":2442}},{"id":2443,"name":"pip","slug":"pip","createdAt":"2022-07-09T17:35:47.000Z","updatedAt":"2022-07-09T17:35:47.000Z","Questions_Tags":{"questionId":485,"tagId":2443}},{"id":2444,"name":"easy-install","slug":"easy-install","createdAt":"2022-07-09T17:35:47.000Z","updatedAt":"2022-07-09T17:35:47.000Z","Questions_Tags":{"questionId":485,"tagId":2444}}]},{"id":484,"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988","postType":"QUESTION","createdAt":"2022-07-09T17:35:43.000Z","updatedAt":"2022-07-09T17:35:43.000Z","tags":[{"id":2439,"name":"javafx","slug":"javafx","createdAt":"2022-07-09T17:35:44.000Z","updatedAt":"2022-07-09T17:35:44.000Z","Questions_Tags":{"questionId":484,"tagId":2439}}]},{"id":483,"title":"CSS margin terror; Margin adds space outside parent element [duplicate]","slug":"css-margin-terror-margin-adds-space-outside-parent-element-duplicate-1657388142199","postType":"QUESTION","createdAt":"2022-07-09T17:35:42.000Z","updatedAt":"2022-07-09T17:35:42.000Z","tags":[{"id":2437,"name":"overflow","slug":"overflow","createdAt":"2022-07-09T17:35:42.000Z","updatedAt":"2022-07-09T17:35:42.000Z","Questions_Tags":{"questionId":483,"tagId":2437}},{"id":2438,"name":"margin","slug":"margin","createdAt":"2022-07-09T17:35:42.000Z","updatedAt":"2022-07-09T17:35:42.000Z","Questions_Tags":{"questionId":483,"tagId":2438}}]},{"id":482,"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965","postType":"QUESTION","createdAt":"2022-07-09T17:35:39.000Z","updatedAt":"2022-07-09T17:35:39.000Z","tags":[{"id":2433,"name":"python-import","slug":"python-import","createdAt":"2022-07-09T17:35:40.000Z","updatedAt":"2022-07-09T17:35:40.000Z","Questions_Tags":{"questionId":482,"tagId":2433}}]},{"id":481,"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699","postType":"QUESTION","createdAt":"2022-07-09T17:35:36.000Z","updatedAt":"2022-07-09T17:35:36.000Z","tags":[{"id":2431,"name":"nosuchelementexception","slug":"nosuchelementexception","createdAt":"2022-07-09T17:35:36.000Z","updatedAt":"2022-07-09T17:35:36.000Z","Questions_Tags":{"questionId":481,"tagId":2431}}]}]},"answers":{"481":["\n&lt;h2&gt;NoSuchElementException&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;selenium.common.exceptions.NoSuchElementException&lt;/em&gt; popularly known as &lt;code&gt;NoSuchElementException&lt;/code&gt; is defined as :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;exception selenium.common.exceptions.NoSuchElementException(msg=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, screen=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stacktrace=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;NoSuchElementException&lt;/code&gt; is basically thrown in 2 cases as follows :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;When using :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;webdriver.find_element_by_*(&lt;span class=&quot;hljs-string&quot;&gt;&quot;expression&quot;&lt;/span&gt;)\n//example : my_element = driver.find_element_by_xpath(&lt;span class=&quot;hljs-string&quot;&gt;&quot;xpath_expression&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;element.find_element_by_*(&lt;span class=&quot;hljs-string&quot;&gt;&quot;expression&quot;&lt;/span&gt;)\n//example : my_element = element.find_element_by_*(&lt;span class=&quot;hljs-string&quot;&gt;&quot;expression&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;As per the API Docs just like any other &lt;code&gt;selenium.common.exceptions&lt;/code&gt;, &lt;code&gt;NoSuchElementException&lt;/code&gt; should contain the following parameters :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;msg, screen, stacktrace&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; exception_class(message, screen, stacktrace)\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&lt;span class=&quot;hljs-string&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;xpath&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;selector&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;.//*[@id=&apos;create-portal-popup&apos;]/div[4]/div[1]/button[3]&quot;&lt;/span&gt;}\n  (Session info: chrome=&lt;span class=&quot;hljs-number&quot;&gt;61.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.3163&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.100&lt;/span&gt;)\n  (Driver info: chromedriver=&lt;span class=&quot;hljs-number&quot;&gt;2.32&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.498550&lt;/span&gt; (9dec58e66c31bcc53a9ce3c7226f0c1c5810906a),platform=Windows NT &lt;span class=&quot;hljs-number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10240&lt;/span&gt; x86_64)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Reason&lt;/h2&gt;\n\n&lt;p&gt;The reason for &lt;em&gt;NoSuchElementException&lt;/em&gt; can be either of the following :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The &lt;em&gt;Locator Strategy&lt;/em&gt; you have adopted doesn&apos;t identifies any element in the &lt;a href=&quot;https://www.w3schools.com/js/js_htmldom.asp&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;HTML DOM&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;The &lt;em&gt;Locator Strategy&lt;/em&gt; you have adopted is unable to identify the element as it is not within the browser&apos;s &lt;a href=&quot;https://www.w3schools.com/css/css_rwd_viewport.asp&quot; rel=&quot;noreferrer&quot;&gt;Viewport&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;The &lt;em&gt;Locator Strategy&lt;/em&gt; you have adopted identifies the element but is invisible due to presence of the attribute &lt;strong&gt;style=&quot;display: none;&quot;&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;The &lt;em&gt;Locator Strategy&lt;/em&gt; you have adopted doesn&apos;t &lt;strong&gt;uniquely&lt;/strong&gt; identifies the desired element in the &lt;em&gt;HTML DOM&lt;/em&gt; and currently finds some other &lt;em&gt;hidden&lt;/em&gt; / &lt;em&gt;invisible&lt;/em&gt; element.&lt;/li&gt;\n&lt;li&gt;The &lt;em&gt;WebElement&lt;/em&gt; you are trying to locate is within an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;\n&lt;li&gt;The &lt;em&gt;WebDriver&lt;/em&gt; instance is looking out for the &lt;em&gt;WebElement&lt;/em&gt; even before the element is present/visibile within the &lt;em&gt;HTML DOM&lt;/em&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Solution&lt;/h2&gt;\n\n&lt;p&gt;The solution to address &lt;em&gt;NoSuchElementException&lt;/em&gt; can be either of the following :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Adopt a &lt;a href=&quot;https://stackoverflow.com/questions/48369043/official-locator-strategies-for-the-webdriver/48376890#48376890&quot;&gt;Locator Strategy&lt;/a&gt; which uniquely identifies the desired &lt;em&gt;WebElement&lt;/em&gt;. You can take help of the &lt;em&gt;Developer Tools&lt;/em&gt; (&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt; or &lt;kbd&gt;F12&lt;/kbd&gt;) and use &lt;em&gt;Element Inspector&lt;/em&gt;. &lt;/p&gt;\n\n&lt;p&gt;Here you will find a detailed discussion on &lt;a href=&quot;https://stackoverflow.com/questions/46700764/how-to-inspect-element-in-selenium3-6-as-firebug-is-not-an-option-any-more-for-f/46702281#46702281&quot;&gt;how to inspect element in selenium3.6 as firebug is not an option any more for FF 56?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;execute_script()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; method to scroll the element in to view as follows :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;elem = driver.find_element_by_xpath(&lt;span class=&quot;hljs-string&quot;&gt;&quot;element_xpath&quot;&lt;/span&gt;)\ndriver.execute_script(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arguments[0].scrollIntoView();&quot;&lt;/span&gt;, elem)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here you will find a detailed discussion on &lt;a href=&quot;https://stackoverflow.com/questions/45576958/scrolling-to-top-of-the-page-in-python-using-selenium/45581830#45581830&quot;&gt;Scrolling to top of the page in Python using Selenium&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Incase element is having the attribute &lt;strong&gt;style=&quot;display: none;&quot;&lt;/strong&gt;, remove the attribute  through &lt;code&gt;executeScript()&lt;/code&gt; method as follows :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;elem = driver.find_element_by_xpath(&lt;span class=&quot;hljs-string&quot;&gt;&quot;element_xpath&quot;&lt;/span&gt;)\ndriver.execute_script(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arguments[0].removeAttribute(&apos;style&apos;)&quot;&lt;/span&gt;, elem)\nelem.send_keys(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text_to_send&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To check if the element is within an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; traverse up the &lt;em&gt;HTML&lt;/em&gt; to locate the respective &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag and &lt;code&gt;switchTo()&lt;/code&gt; the desired &lt;em&gt;iframe&lt;/em&gt; through either of the following methods :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;driver.switch_to.frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;iframe_name&quot;&lt;/span&gt;)\ndriver.switch_to.frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;iframe_id&quot;&lt;/span&gt;)\ndriver.switch_to.frame(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) // &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; represents frame index\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here you can find a detailed discussion on &lt;a href=&quot;https://stackoverflow.com/questions/47770144/how-can-i-select-a-html-element-no-matter-what-frame-it-is-in-in-selenium/47771879#47771879&quot;&gt;How can I select a html element no matter what frame it is in in selenium?&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the element is not &lt;em&gt;present&lt;/em&gt;/&lt;em&gt;visible&lt;/em&gt; in the &lt;em&gt;HTML DOM&lt;/em&gt; immediately, induce &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html#module-selenium.webdriver.support.wait&quot; rel=&quot;noreferrer&quot;&gt;WebDriverWait&lt;/a&gt; with &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions&quot; rel=&quot;noreferrer&quot;&gt;expected_conditions&lt;/a&gt; set to proper method as follows :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;To wait for &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.presence_of_element_located&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;presence_of_element_located&lt;/strong&gt;&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;element = WebDriverWait(driver, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(expected_conditions.presence_of_element_located((By.XPATH, &lt;span class=&quot;hljs-string&quot;&gt;&quot;element_xpath&apos;]&quot;&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To wait for &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.visibility_of_element_located&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;visibility_of_element_located&lt;/strong&gt;&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;element = WebDriverWait(driver, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, &lt;span class=&quot;hljs-string&quot;&gt;&quot;element_css&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To wait for &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;element_to_be_clickable&lt;/strong&gt;&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;element = WebDriverWait(driver, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, &lt;span class=&quot;hljs-string&quot;&gt;&quot;element_link_text&quot;&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;This Usecase&lt;/h2&gt;\n\n&lt;p&gt;You are seeing &lt;code&gt;NoSuchElementException&lt;/code&gt; because the &lt;em&gt;id&lt;/em&gt; locator doesn&apos;t identifies the &lt;strong&gt;canvas&lt;/strong&gt; uniquely. To identify the canvas and &lt;code&gt;click()&lt;/code&gt; on it you have to wait for the &lt;strong&gt;canvas&lt;/strong&gt; to be &lt;code&gt;clickable&lt;/code&gt; and to achieve that you can use the following code block :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;WebDriverWait(driver, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(EC.element_to_be_clickable((By.XPATH, &lt;span class=&quot;hljs-string&quot;&gt;&quot;//canvas[@id=&apos;window1&apos;]&quot;&lt;/span&gt;))).click()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Reference&lt;/h2&gt;\n\n&lt;p&gt;You can find &lt;a href=&quot;https://stackoverflow.com/questions/54459701/what-is-selenium-and-what-is-webdriver/54482491#54482491&quot;&gt;Selenium&lt;/a&gt;&apos;s &lt;a href=&quot;/questions/tagged/java&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;java&apos;&quot; rel=&quot;tag&quot;&gt;java&lt;/a&gt; client based relevant discussion in:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/48471321/nosuchelementexception-selenium-unable-to-locate-element/48472940#48472940&quot;&gt;NoSuchElementException, Selenium unable to locate element&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    "],"482":["\n&lt;p&gt;For Python 3.5+ use (&lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib.util\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nspec = importlib.util.spec_from_file_location(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;)\nfoo = importlib.util.module_from_spec(spec)\nsys.modules[&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;] = foo\nspec.loader.exec_module(foo)\nfoo.MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For Python 3.3 and 3.4 use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.machinery &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SourceFileLoader\n\nfoo = SourceFileLoader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;).load_module()\nfoo.MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Although this has been deprecated in Python 3.4.)&lt;/p&gt;\n&lt;p&gt;For Python 2 use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; imp\n\nfoo = imp.load_source(&lt;span class=&quot;hljs-string&quot;&gt;&apos;module.name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/path/to/file.py&apos;&lt;/span&gt;)\nfoo.MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are equivalent convenience functions for compiled Python files and DLLs.&lt;/p&gt;\n&lt;p&gt;See also &lt;a href=&quot;http://bugs.python.org/issue21436&quot; rel=&quot;noreferrer&quot;&gt;http://bugs.python.org/issue21436&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-comment&quot;&gt;# the mock-0.3.1 dir contains testcase.py, testutils.py &amp;amp; mock.py&lt;/span&gt;\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo/bar/mock-0.3.1&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; testcase &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; TestCase\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; testutils &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; RunTests\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mock &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Mock, sentinel, patch\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To import your module, you need to add its directory to the environment variable, either temporarily or permanently.&lt;/p&gt;\n&lt;h1&gt;Temporarily&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/my/modules/&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; my_module\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Permanently&lt;/h1&gt;\n&lt;p&gt;Adding the following line to your &lt;code&gt;.bashrc&lt;/code&gt; (or alternative) file in Linux\nand excecute &lt;code&gt;source ~/.bashrc&lt;/code&gt; (or alternative) in the terminal:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;export PYTHONPATH=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${PYTHONPATH}:/path/to/my/modules/&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Credit/Source: &lt;a href=&quot;https://stackoverflow.com/users/2312075/saarrrr&quot;&gt;saarrrr&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/3402176/7428659&quot;&gt;another Stack&amp;nbsp;Exchange question&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with &apos;sys.modules&apos;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;MODULE_PATH = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/your/module/__init__.py&quot;&lt;/span&gt;\nMODULE_NAME = &lt;span class=&quot;hljs-string&quot;&gt;&quot;mymodule&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nspec = importlib.util.spec_from_file_location(MODULE_NAME, MODULE_PATH)\nmodule = importlib.util.module_from_spec(spec)\nsys.modules[spec.name] = module \nspec.loader.exec_module(module)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Without this line, when exec_module is executed, it tries to bind relative imports in your top level __init__.py to the top level module name -- in this case &quot;mymodule&quot;. But &quot;mymodule&quot; isn&apos;t loaded yet so you&apos;ll get the error &quot;SystemError: Parent module &apos;mymodule&apos; not loaded, cannot perform relative import&quot;. So you need to bind the name before you load it. The reason for this is the fundamental invariant of the relative import system: &quot;The invariant holding is that if you have sys.modules[&apos;spam&apos;] and sys.modules[&apos;spam.foo&apos;] (as you would after the above import), the latter must appear as the foo attribute of the former&quot; &lt;a href=&quot;https://docs.python.org/3/reference/import.html#submodules&quot; rel=&quot;noreferrer&quot;&gt;as discussed here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It sounds like you don&apos;t want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved). You just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of &lt;a href=&quot;https://docs.python.org/3/library/runpy.html#runpy.run_path&quot; rel=&quot;noreferrer&quot;&gt;runpy.run_path&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; runpy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; run_path\nsettings = run_path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That interface is available in Python 2.7 and Python 3.2+.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case &quot;config&quot;.&lt;/p&gt;\n\n&lt;p&gt;Messy, but it works.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;configfile = &lt;span class=&quot;hljs-string&quot;&gt;&apos;~/config.py&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n\nsys.path.append(os.path.dirname(os.path.expanduser(configfile)))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; config\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;load_source(module_name, path_to_file)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;method from the &lt;a href=&quot;https://docs.python.org/library/imp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;imp module&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Do you mean load or import?&lt;/p&gt;\n&lt;p&gt;You can manipulate the &lt;code&gt;sys.path&lt;/code&gt; list specify the path to your module, and then import your module. For example, given a module at:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;/foo/bar.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You could do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Puts the /foo directory at the start of your path&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; bar\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;config_file = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/tmp/config.py&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(config_file) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    code = &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(f.read(), config_file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;exec&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(code, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I tested it. It may be ugly, but so far it is the only one that works in all versions.&lt;/p&gt;\n    ","\n&lt;p&gt;I have come up with a slightly modified version of &lt;a href=&quot;https://stackoverflow.com/a/67692/2988730&quot;&gt;@SebastianRittau&apos;s wonderful answer&lt;/a&gt; (for Python &amp;gt; 3.4 I think), which will allow you to load a file with any extension as a module using &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;spec_from_loader&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_file_location&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;spec_from_file_location&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.util &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; spec_from_loader, module_from_spec\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.machinery &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SourceFileLoader \n\nspec = spec_from_loader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, SourceFileLoader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;))\nmod = module_from_spec(spec)\nspec.loader.exec_module(mod)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The advantage of encoding the path in an explicit &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;SourceFileLoader&lt;/code&gt;&lt;/a&gt; is that the &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#module-importlib.machinery&quot; rel=&quot;nofollow noreferrer&quot;&gt;machinery&lt;/a&gt; will not try to figure out the type of the file from the extension. This means that you can load something like a &lt;code&gt;.txt&lt;/code&gt; file using this method, but you could not do it with &lt;code&gt;spec_from_file_location&lt;/code&gt; without specifying the loader because &lt;code&gt;.txt&lt;/code&gt; is not in &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;importlib.machinery.SOURCE_SUFFIXES&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I&apos;ve placed an implementation based on this, and &lt;a href=&quot;https://stackoverflow.com/a/50395128/2988730&quot;&gt;@SamGrondahl&apos;s useful modification&lt;/a&gt; into my utility library, &lt;a href=&quot;https://haggis.readthedocs.io/en/stable/&quot; rel=&quot;nofollow noreferrer&quot;&gt;haggis&lt;/a&gt;. The function is called &lt;a href=&quot;https://haggis.readthedocs.io/en/latest/api.html#haggis.load.load_module&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;haggis.load.load_module&lt;/code&gt;&lt;/a&gt;. It adds a couple of neat tricks, like the ability to inject variables into the module namespace as it is loaded.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this using &lt;code&gt;__import__&lt;/code&gt; and &lt;code&gt;chdir&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;import_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;full_path_to_module&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n        save_cwd = os.getcwd()\n        os.chdir(module_dir)\n        module_obj = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(module_name)\n        module_obj.__file__ = full_path_to_module\n        &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[module_name] = module_obj\n        os.chdir(save_cwd)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ImportError(e)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; module_obj\n\n\nimport_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/somebody/somemodule.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we have scripts in the same project but in different directory means, we can solve this problem by the following method.&lt;/p&gt;\n\n&lt;p&gt;In this situation &lt;code&gt;utils.py&lt;/code&gt; is in &lt;code&gt;src/main/util/&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; src.main.util.utils\n&lt;span class=&quot;hljs-comment&quot;&gt;#or&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; src.main.util.utils &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json_converter &lt;span class=&quot;hljs-comment&quot;&gt;# json_converter is example method&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I believe you can use &lt;a href=&quot;https://docs.python.org/2/library/imp.html#imp.find_module&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;imp.find_module()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/2/library/imp.html#imp.load_module&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;imp.load_module()&lt;/code&gt;&lt;/a&gt; to load the specified module.  You&apos;ll need to split the module name off of the path, i.e. if you wanted to load &lt;code&gt;/home/mypath/mymodule.py&lt;/code&gt; you&apos;d need to do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;imp.find_module(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mymodule&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/mypath/&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...but that should get the job done.&lt;/p&gt;\n    ","\n&lt;p&gt;Create Python module &lt;em&gt;test.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;project-path&amp;gt;/lib/&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tes1 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tes2 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client2\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tes3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create Python module &lt;em&gt;test_check.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client2\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; test3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can import the imported module from module.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the &lt;code&gt;pkgutil&lt;/code&gt; module (specifically the &lt;a href=&quot;https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;walk_packages&lt;/code&gt;&lt;/a&gt; method) to get a list of the packages in the current directory. From there it&apos;s trivial to use the &lt;code&gt;importlib&lt;/code&gt; machinery to import the modules you want:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pkgutil\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\n\npackages = pkgutil.walk_packages(path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; importer, name, is_package &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; packages:\n    mod = importlib.import_module(name)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do whatever you want with module now, it&apos;s been imported!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There&apos;s a &lt;a href=&quot;https://pypi.org/project/thesmuggler/&quot; rel=&quot;noreferrer&quot;&gt;package&lt;/a&gt; that&apos;s dedicated to this specifically:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; thesmuggler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; smuggle\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# À la `import weapons`&lt;/span&gt;\nweapons = smuggle(&lt;span class=&quot;hljs-string&quot;&gt;&apos;weapons.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# À la `from contraband import drugs, alcohol`&lt;/span&gt;\ndrugs, alcohol = smuggle(&lt;span class=&quot;hljs-string&quot;&gt;&apos;drugs&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alcohol&apos;&lt;/span&gt;, source=&lt;span class=&quot;hljs-string&quot;&gt;&apos;contraband.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# À la `from contraband import drugs as dope, alcohol as booze`&lt;/span&gt;\ndope, booze = smuggle(&lt;span class=&quot;hljs-string&quot;&gt;&apos;drugs&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alcohol&apos;&lt;/span&gt;, source=&lt;span class=&quot;hljs-string&quot;&gt;&apos;contraband.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s tested across Python versions (Jython and PyPy too), but it might be overkill depending on the size of your project.&lt;/p&gt;\n    ","\n&lt;p&gt;This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here&apos;s the basic function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;import_module_from_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;full_path_to_module&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    Import a module given the full path/filename of the .py file\n\n    Python 3.4\n\n    &quot;&quot;&quot;&lt;/span&gt;\n\n    module = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Get module name and path from full path&lt;/span&gt;\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Get module &quot;spec&quot; from filename&lt;/span&gt;\n        spec = importlib.util.spec_from_file_location(module_name,full_path_to_module)\n\n        module = spec.loader.load_module()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ec:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Simple error printing&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Insert &quot;sophisticated&quot; stuff here&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ec)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; module\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This appears to use non-deprecated modules from Python 3.4. I don&apos;t pretend to understand why, but it seems to work from within a program. I found Chris&apos; solution worked on the command line but not from inside a program.&lt;/p&gt;\n    ","\n&lt;p&gt;I made a package that uses &lt;code&gt;imp&lt;/code&gt; for you. I call it &lt;code&gt;import_file&lt;/code&gt; and this is how it&apos;s used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; import_file &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; import_file\n&amp;gt;&amp;gt;&amp;gt;mylib = import_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c:\\\\mylib.py&apos;&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt;another = import_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;relative_subdir/another.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can get it at:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/import_file&quot; rel=&quot;nofollow&quot;&gt;http://pypi.python.org/pypi/import_file&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;or at&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/import-file/&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/import-file/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block &lt;a href=&quot;http://effbot.org/zone/import-string.htm&quot; rel=&quot;nofollow&quot;&gt;reference:&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filename = &lt;span class=&quot;hljs-string&quot;&gt;&quot;directory/module.py&quot;&lt;/span&gt;\n\ndirectory, module_name = os.path.split(filename)\nmodule_name = os.path.splitext(module_name)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\npath = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(sys.path)\nsys.path.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, directory)\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    module = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(module_name)\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n    sys.path[:] = path &lt;span class=&quot;hljs-comment&quot;&gt;# restore&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simple solution using &lt;code&gt;importlib&lt;/code&gt; instead of the &lt;code&gt;imp&lt;/code&gt; package (tested for Python 2.7, although it should work for Python 3 too):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\n\ndirname, basename = os.path.split(pyfilepath) &lt;span class=&quot;hljs-comment&quot;&gt;# pyfilepath: &apos;/my/path/mymodule.py&apos;&lt;/span&gt;\nsys.path.append(dirname) &lt;span class=&quot;hljs-comment&quot;&gt;# only directories should be added to PYTHONPATH&lt;/span&gt;\nmodule_name = os.path.splitext(basename)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;/my/path/mymodule.py&apos; --&amp;gt; &apos;mymodule&apos;&lt;/span&gt;\nmodule = importlib.import_module(module_name) &lt;span class=&quot;hljs-comment&quot;&gt;# name space of defined module (otherwise we would literally look for &quot;module_name&quot;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can directly use the namespace of the imported module, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = module.myvar\nb = module.myfunc(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The advantage of this solution is that &lt;strong&gt;we don&apos;t even need to know the actual name of the module we would like to import&lt;/strong&gt;, in order to use it in our code. This is useful, e.g. in case the path of the module is a configurable argument.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m not saying that it is better, but for the sake of completeness, I wanted to suggest the &lt;a href=&quot;https://docs.python.org/3/library/functions.html#exec&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; function, available in both Python&amp;nbsp;2 and Python&amp;nbsp;3.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary.&lt;/p&gt;\n&lt;p&gt;For example, if you have a module stored in &lt;code&gt;&quot;/path/to/module&lt;/code&gt;&quot; with the function &lt;code&gt;foo()&lt;/code&gt;, you could run it by doing the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;module = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/module&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(f.read(), module)\nmodule[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This makes it a bit more explicit that you&apos;re loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins.&lt;/p&gt;\n&lt;p&gt;And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyModuleClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;dict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.__getitem__(name)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To add to &lt;a href=&quot;https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path/67692#67692&quot;&gt;Sebastian Rittau&lt;/a&gt;&apos;s answer:\nAt least for &lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot; rel=&quot;nofollow noreferrer&quot;&gt;CPython&lt;/a&gt;, there&apos;s &lt;a href=&quot;https://docs.python.org/3/library/pydoc.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pydoc&lt;/a&gt;, and, while not officially declared, importing files is what it does:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pydoc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importfile\nmodule = importfile(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/path/to/module.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; For the sake of completeness, there&apos;s a reference to the current implementation at the moment of writing: &lt;a href=&quot;https://github.com/python/cpython/blob/9c3eaf88dc5d5bed80cc45936de06b7b3162bc6d/Lib/pydoc.py#L392&quot; rel=&quot;nofollow noreferrer&quot;&gt;pydoc.py&lt;/a&gt;, and I&apos;m pleased to say that in the vein of &lt;a href=&quot;https://xkcd.com/1987/&quot; rel=&quot;nofollow noreferrer&quot;&gt;xkcd 1987&lt;/a&gt; it uses neither of the implementations mentioned in &lt;a href=&quot;https://bugs.python.org/issue21436&quot; rel=&quot;nofollow noreferrer&quot;&gt;issue 21436&lt;/a&gt; -- at least, not verbatim.&lt;/p&gt;\n    ","\n&lt;p&gt;This should work&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;path = os.path.join(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./path/to/folder/with/py/files&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;*.py&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; infile &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.glob(path):\n    basename = os.path.basename(infile)\n    basename_without_extension = basename[:-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# http://docs.python.org/library/imp.html?highlight=imp#module-imp&lt;/span&gt;\n    imp.load_source(basename_without_extension, infile)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Import package modules at runtime (Python recipe)&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.activestate.com/recipes/223972/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://code.activestate.com/recipes/223972/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;###################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##                #&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;## classloader.py #&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##                #&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;###################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys, types\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_mod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;modulePath&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        aMod = sys.modules[modulePath]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(aMod, types.ModuleType):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; KeyError\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; KeyError:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# The last [&apos;&apos;] is very important!&lt;/span&gt;\n        aMod = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(modulePath, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;(), [&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;])\n        sys.modules[modulePath] = aMod\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aMod\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fullFuncName&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Retrieve a function object from a full dotted-package name.&quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Parse out the path, module, and function&lt;/span&gt;\n    lastDot = fullFuncName.rfind(&lt;span class=&quot;hljs-string&quot;&gt;u&quot;.&quot;&lt;/span&gt;)\n    funcName = fullFuncName[lastDot + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n    modPath = fullFuncName[:lastDot]\n\n    aMod = _get_mod(modPath)\n    aFunc = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(aMod, funcName)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Assert that the function is a *callable* attribute.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;callable&lt;/span&gt;(aFunc), &lt;span class=&quot;hljs-string&quot;&gt;u&quot;%s is not callable.&quot;&lt;/span&gt; % fullFuncName\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Return a reference to the function itself,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# not the results of the function.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aFunc\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_class&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fullClassName, parentClass=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Load a module and retrieve a class (NOT an instance).\n\n    If the parentClass is supplied, className must be of parentClass\n    or a subclass of parentClass (or None is returned).\n    &quot;&quot;&quot;&lt;/span&gt;\n    aClass = _get_func(fullClassName)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Assert that the class is a subclass of parentClass.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parentClass &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;issubclass&lt;/span&gt;(aClass, parentClass):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;u&quot;%s is not a subclass of %s&quot;&lt;/span&gt; %\n                            (fullClassName, parentClass))\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Return a reference to the class itself, not an instantiated object.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aClass\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;######################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##       Usage      ##&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;######################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StorageManager&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StorageManagerMySQL&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;StorageManager&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;storage_object&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;aFullClassName, allOptions={}&lt;/span&gt;):\n    aStoreClass = _get_class(aFullClassName, StorageManager)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aStoreClass(allOptions)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Linux, adding a symbolic link in the directory your Python script is located works.&lt;/p&gt;\n&lt;p&gt;I.e.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;ln -s /absolute/path/to/module/module.py /absolute/path/to/script/module.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The Python interpreter will create &lt;code&gt;/absolute/path/to/script/module.pyc&lt;/code&gt; and will update it if you change the contents of &lt;code&gt;/absolute/path/to/module/module.py&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Then include the following in file &lt;em&gt;mypythonscript.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; module &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will allow imports of compiled (pyd) Python modules in 3.4:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib.machinery\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load_module&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, filename&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# If the Loader finds the module name in this list it will use&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# module_name.__file__ instead so we need to delete it here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.modules:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; sys.modules[name]\n    loader = importlib.machinery.ExtensionFileLoader(name, filename)\n    module = loader.load_module()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[name] = module\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[name] = module\n\nload_module(&lt;span class=&quot;hljs-string&quot;&gt;&apos;something&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;r&apos;C:\\Path\\To\\something.pyd&apos;&lt;/span&gt;)\nsomething.do_something()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.py&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;libPath = &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../MyLibs&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; libPath &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.path: sys.path.append(libPath)\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pyfunc &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pf\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you make it without a guard you can finally get a very long path.&lt;/p&gt;\n    ","\n&lt;p&gt;I have written my own global and portable import function, based on &lt;code&gt;importlib&lt;/code&gt; module, for:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Be able to import both modules as submodules and to import the content of a module to a parent module (or into a globals if has no parent module).&lt;/li&gt;\n&lt;li&gt;Be able to import modules with a period characters in a file name.&lt;/li&gt;\n&lt;li&gt;Be able to import modules with any extension.&lt;/li&gt;\n&lt;li&gt;Be able to use a standalone name for a submodule instead of a file name without extension which is by default.&lt;/li&gt;\n&lt;li&gt;Be able to define the import order based on previously imported module instead of dependent on &lt;code&gt;sys.path&lt;/code&gt; or on a what ever search path storage.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The examples directory structure:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;root&amp;gt;\n |\n +- test.py\n |\n +- testlib.py\n |\n +- /std1\n |   |\n |   +- testlib.std1.py\n |\n +- /std2\n |   |\n |   +- testlib.std2.py\n |\n +- /std3\n     |\n     +- testlib.std3.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Inclusion dependency and order:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test.py\n  -&amp;gt; testlib.py\n    -&amp;gt; testlib.std1.py\n      -&amp;gt; testlib.std2.py\n    -&amp;gt; testlib.std3.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Implementation:&lt;/p&gt;\n&lt;p&gt;Latest changes store: &lt;a href=&quot;https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;test.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, sys, inspect, copy\n\nSOURCE_FILE = os.path.abspath(inspect.getsourcefile(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)\nSOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# portable import to the global space&lt;/span&gt;\nsys.path.append(TACKLELIB_ROOT) &lt;span class=&quot;hljs-comment&quot;&gt;# TACKLELIB_ROOT - path to the library directory&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tacklelib &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tkl\n\ntkl.tkl_init(tkl)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# cleanup&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; tkl &lt;span class=&quot;hljs-comment&quot;&gt;# must be instead of `tkl = None`, otherwise the variable would be still persist&lt;/span&gt;\nsys.path.pop()\n\ntkl_import_module(SOURCE_DIR, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().keys())\n\ntestlib.base_test()\ntestlib.testlib_std1.std1_test()\ntestlib.testlib_std1.testlib_std2.std2_test()\n&lt;span class=&quot;hljs-comment&quot;&gt;#testlib.testlib.std3.std3_test()                             # does not reachable directly ...&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3&apos;&lt;/span&gt;).std3_test()     &lt;span class=&quot;hljs-comment&quot;&gt;# ... but reachable through the `globals` + `getattr`&lt;/span&gt;\n\ntkl_import_module(SOURCE_DIR, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().keys())\n\nbase_test()\ntestlib_std1.std1_test()\ntestlib_std1.testlib_std2.std2_test()\n&lt;span class=&quot;hljs-comment&quot;&gt;#testlib.std3.std3_test()                                     # does not reachable directly ...&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3&apos;&lt;/span&gt;].std3_test()                         &lt;span class=&quot;hljs-comment&quot;&gt;# ... but reachable through the `globals` + `getattr`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 testlib::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/std1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std1.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# SOURCE_DIR is restored here&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 testlib::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/std3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 testlib::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;base_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;base_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.std1.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testlib.std1::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/../std2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std2.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std2&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;std1_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;std1_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.std2.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testlib.std2::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;std2_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;std2_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.std3.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testlib.std3::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;std3_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;std3_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; (&lt;code&gt;3.7.4&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/test.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/testlib.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib -&amp;gt; []\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/testlib.std1.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std1 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std2 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;]\ntestlib.std2::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib.std3 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\ntestlib.std3::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\ndict_keys([&lt;span class=&quot;hljs-string&quot;&gt;&apos;__name__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__package__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__loader__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__spec__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__annotations__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__builtins__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__file__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__cached__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;os&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sys&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;inspect&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_FILE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_DIR&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleGlobalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_membercopy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_merge_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_get_parent_imported_module_state&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_declare_global&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_import_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleSourceModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_source_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleLocalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;])\nbase_test\nstd1_test\nstd2_test\nstd3_test\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/testlib.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; . -&amp;gt; []\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/testlib.std1.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std1 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std2 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;]\ntestlib.std2::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib.std3 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\ntestlib.std3::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\ndict_keys([&lt;span class=&quot;hljs-string&quot;&gt;&apos;__name__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__package__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__loader__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__spec__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__annotations__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__builtins__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__file__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__cached__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;os&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sys&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;inspect&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_FILE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_DIR&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleGlobalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_membercopy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_merge_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_get_parent_imported_module_state&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_declare_global&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_import_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleSourceModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_source_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleLocalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;base_test&apos;&lt;/span&gt;])\nbase_test\nstd1_test\nstd2_test\nstd3_test\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Tested in Python &lt;code&gt;3.7.4&lt;/code&gt;, &lt;code&gt;3.2.5&lt;/code&gt;, &lt;code&gt;2.7.16&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Can import both module as a submodule and can import content of a module to a parent module (or into a globals if has no parent module).&lt;/li&gt;\n&lt;li&gt;Can import modules with periods in a file name.&lt;/li&gt;\n&lt;li&gt;Can import any extension module from any extension module.&lt;/li&gt;\n&lt;li&gt;Can use a standalone name for a submodule instead of a file name without extension which is by default (for example, &lt;code&gt;testlib.std.py&lt;/code&gt; as &lt;code&gt;testlib&lt;/code&gt;, &lt;code&gt;testlib.blabla.py&lt;/code&gt; as &lt;code&gt;testlib_blabla&lt;/code&gt; and so on).&lt;/li&gt;\n&lt;li&gt;Does not depend on a &lt;code&gt;sys.path&lt;/code&gt; or on a what ever search path storage.&lt;/li&gt;\n&lt;li&gt;Does not require to save/restore global variables like &lt;code&gt;SOURCE_FILE&lt;/code&gt; and &lt;code&gt;SOURCE_DIR&lt;/code&gt; between calls to &lt;code&gt;tkl_import_module&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;[for &lt;code&gt;3.4.x&lt;/code&gt; and higher] Can mix the module namespaces in nested &lt;code&gt;tkl_import_module&lt;/code&gt; calls (ex: &lt;code&gt;named-&amp;gt;local-&amp;gt;named&lt;/code&gt; or &lt;code&gt;local-&amp;gt;named-&amp;gt;local&lt;/code&gt; and so on).&lt;/li&gt;\n&lt;li&gt;[for &lt;code&gt;3.4.x&lt;/code&gt; and higher] Can auto export global variables/functions/classes from where being declared to all children modules imported through the &lt;code&gt;tkl_import_module&lt;/code&gt; (through the &lt;code&gt;tkl_declare_global&lt;/code&gt; function).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;[for &lt;code&gt;3.3.x&lt;/code&gt; and lower] Require to declare &lt;code&gt;tkl_import_module&lt;/code&gt; in all modules which calls to &lt;code&gt;tkl_import_module&lt;/code&gt; (code duplication)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Update 1,2&lt;/strong&gt; (for &lt;code&gt;3.4.x&lt;/code&gt; and higher only):&lt;/p&gt;\n&lt;p&gt;In Python 3.4 and higher you can bypass the requirement to declare &lt;code&gt;tkl_import_module&lt;/code&gt; in each module by declare &lt;code&gt;tkl_import_module&lt;/code&gt; in a top level module and the function would inject itself to all children modules in a single call (it&apos;s a kind of self deploy import).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update 3&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;Added function &lt;code&gt;tkl_source_module&lt;/code&gt; as analog to bash &lt;code&gt;source&lt;/code&gt; with support execution guard upon import (implemented through the module merge instead of import).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update 4&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;Added function &lt;code&gt;tkl_declare_global&lt;/code&gt; to auto export a module global variable to all children modules where a module global variable is not visible because is not a part of a child module.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update 5&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;All functions has moved into the tacklelib library, see the link above.&lt;/p&gt;\n    ","\n&lt;p&gt;These are my two utility functions using only pathlib. It infers the module name from the path.&lt;/p&gt;\n&lt;p&gt;By default, it recursively loads all Python files from folders and replaces &lt;strong&gt;init&lt;/strong&gt;.py by the parent folder name. But you can also give a Path and/or a glob to select some specific files.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.util &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; spec_from_file_location, module_from_spec\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; typing &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_module_from_path&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path: Path, relative_to: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;[Path] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; relative_to:\n        relative_to = Path.cwd()\n\n    abs_path = path.absolute()\n    relative_path = abs_path.relative_to(relative_to.absolute())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; relative_path.name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__init__.py&quot;&lt;/span&gt;:\n        relative_path = relative_path.parent\n    module_name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;.join(relative_path.with_suffix(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).parts)\n    mod = module_from_spec(spec_from_file_location(module_name, path))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mod\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_modules_from_folder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;folder: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;[Path] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, glob_str: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*/**/*.py&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; folder:\n        folder = Path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n\n    mod_list = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file_path &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(folder.glob(glob_str)):\n        mod_list.append(get_module_from_path(file_path))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mod_list\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a way of loading files sort of like C, etc.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.machinery &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SourceFileLoader\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;LOAD&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;MODULE_PATH&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (MODULE_PATH[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;):\n        FULL_PATH = MODULE_PATH;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        DIR_PATH = os.path.dirname (os.path.realpath (__file__))\n        FULL_PATH = os.path.normpath (DIR_PATH + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + MODULE_PATH)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SourceFileLoader (FULL_PATH, FULL_PATH).load_module ()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Implementations where:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Y = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../Z.py&quot;&lt;/span&gt;)\nA = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./A.py&quot;&lt;/span&gt;)\nD = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./C/D.py&quot;&lt;/span&gt;)\nA_ = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/IMPORTS/A.py&quot;&lt;/span&gt;)\n\nY.DEF();\nA.DEF();\nD.DEF();\nA_.DEF();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where each of the files looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DEF&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    "],"483":["\n&lt;p&gt;Add &lt;code&gt;overflow:auto&lt;/code&gt; to your &lt;code&gt;#page&lt;/code&gt; div.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/j08691/464jW/&quot;&gt;jsFiddle example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;And check out &lt;a href=&quot;http://www.w3.org/TR/CSS2/box.html#collapsing-margins&quot;&gt;collapsing margins&lt;/a&gt; while you&apos;re at it.&lt;/p&gt;\n    ","\n&lt;p&gt;Add any one of the following rules:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;float: left/right;\nposition: absolute;\ndisplay: inline-block;\noverflow: auto/scroll/hidden;\nclear: left/right/both;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is caused by &lt;code&gt;collapsing margins&lt;/code&gt;. See an article about this behavior &lt;a href=&quot;https://www.sitepoint.com/web-foundations/collapsing-margins/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;According to the article:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The W3C specification defines collapsing margins as follows:&lt;/p&gt;\n  \n  &lt;p&gt;In this specification, the expression collapsing margins means that adjoining  margins (no non-empty content, padding, or border areas, or clearance separate them) of two or more boxes (which may be next to one another or nested) combine to form a single margin.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is also true for parent-child elements.&lt;/p&gt;\n\n&lt;p&gt;All the answers include one of the possible solutions:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;There are other situations where elements do not have their margins collapsed:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;floated elements&lt;/li&gt;\n  &lt;li&gt;absolutely positioned elements&lt;/li&gt;\n  &lt;li&gt;inline-block elements&lt;/li&gt;\n  &lt;li&gt;elements with overflow set to anything other than visible (They do not collapse margins with their children.)&lt;/li&gt;\n  &lt;li&gt;cleared elements (They do not collapse their top margins with their parent blocks bottom margin.)&lt;/li&gt;\n  &lt;li&gt;the root element&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Problem was the parent not taking into account children for height. Adding &lt;code&gt;display:inline-block;&lt;/code&gt; did it for me.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Full CSS&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;#page {\n    margin:0;\n    background:#FF9;\n    display:inline-block;\n    width:100%;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/M3Mu6/&quot; rel=&quot;noreferrer&quot;&gt;See Fiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just add &lt;code&gt;border-top: 1px solid transparent;&lt;/code&gt; to your &lt;code&gt;#page&lt;/code&gt; element.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/box.html#collapsing-margins&quot; rel=&quot;nofollow noreferrer&quot;&gt;From w3.org&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Two margins are adjoining if and only if:&lt;br&gt;\n  - no line boxes, no clearance, no padding and no border separate them&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Add the following rule:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;overflow: hidden;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is caused by collapsing margins. See an article about this behavior &lt;a href=&quot;https://teamtreehouse.com/community/why-there-is-a-white-space-above-header&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;According to the article:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If a parent element does not have any top padding or less top margin then its first child, then elements are rendered in a way that makes the parent element appear to have the child element&apos;s margin. So this can happen anywhere on a page where these conditions are met, but it tends to be most obvious at the top of a page.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The solutions in the other answers didn&apos;t work for me. Transparent borders, inline-block, etc., all caused other problems. Instead, I added the following css to my ancestor element:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;parent::after{\n  content: &quot;&quot;;\n  display: inline-block;\n  clear: both;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Depending on your situation, this may cause its own problems because it adds extra space after the last child element.&lt;/p&gt;\n    ","\n&lt;p&gt;My approach when I was making styles for XenForo 2.1, but it should be useful for you:\n(Please replace those LESS variables to your actual values. Also, the absolute value of minor margins shall be as same as the height of before-after pseudo elements.)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;// The following two lines are to avoid top &amp;amp; bottom fieldset borders run out of the block body.\n// (Do not tweak the CSS overflow settings, otherwise the editor menu won&apos;t be float above the block border.)\n&amp;amp;:before {content: &quot;\\a0&quot;; display: block; width: auto; margin-bottom: floor(-1 * @xf-lineHeightDefault * @xf-fontSizeSmall - @xf-borderSizeMinorFeature);}\n&amp;amp;:after {content: &quot;\\a0&quot;; display: block; width: auto; margin-top: floor(-1 * @xf-lineHeightDefault * @xf-fontSizeSmall - @xf-borderSizeMinorFeature);}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;#page {\noverflow: hidden;\nmargin:0;\nbackground:#FF9;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"484":["\n&lt;h1&gt;Short version of answer:&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;Use &lt;code&gt;getClass().getResource(...)&lt;/code&gt; or &lt;code&gt;SomeOtherClass.class.getResource(...)&lt;/code&gt; to create a &lt;code&gt;URL&lt;/code&gt; to the resource&lt;/li&gt;\n&lt;li&gt;Pass either an absolute path (with a leading &lt;code&gt;/&lt;/code&gt;) or a relative path (without a leading &lt;code&gt;/&lt;/code&gt;) to the &lt;code&gt;getResource(...)&lt;/code&gt; method. The path is the &lt;em&gt;package&lt;/em&gt; containing the resource, with &lt;code&gt;.&lt;/code&gt; replaced with &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Do not use&lt;/strong&gt; &lt;code&gt;..&lt;/code&gt; in the resource path. If and when the application is bundled as a jar file, this will not work. If the resource is not in the same package or in a subpackage of the class, use an absolute path.&lt;/li&gt;\n&lt;li&gt;For FXML files, pass the &lt;code&gt;URL&lt;/code&gt; directly to the &lt;code&gt;FXMLLoader&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;For images and stylesheets, call &lt;code&gt;toExternalForm()&lt;/code&gt; on the &lt;code&gt;URL&lt;/code&gt; to generate the &lt;code&gt;String&lt;/code&gt; to pass to the &lt;code&gt;Image&lt;/code&gt; or &lt;code&gt;ImageView&lt;/code&gt; constructor, or to add to the &lt;code&gt;stylesheets&lt;/code&gt; list.&lt;/li&gt;\n&lt;li&gt;To troubleshoot, examine the content of your &lt;em&gt;build&lt;/em&gt; folder (or jar file), not your &lt;em&gt;source&lt;/em&gt; folder.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;Full Answer&lt;/h1&gt;\n&lt;h2&gt;Contents&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;Scope of this answer&lt;/li&gt;\n&lt;li&gt;Resources are loaded at runtime&lt;/li&gt;\n&lt;li&gt;JavaFX uses URLs to load resources&lt;/li&gt;\n&lt;li&gt;Rules for resource names&lt;/li&gt;\n&lt;li&gt;Creating a resource URL with &lt;code&gt;getClass().getResource(...)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Organizing code and resources&lt;/li&gt;\n&lt;li&gt;Maven (and similar) standard layouts&lt;/li&gt;\n&lt;li&gt;Troubleshooting&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;\nScope of this answer&lt;/h2&gt;\n&lt;p&gt;Note that this answer &lt;em&gt;only&lt;/em&gt; addresses loading resources (for example FXML files, images, and stylesheets) that are part of the application, and bundled with it. So, for example, loading images that the user chooses from the file system on the machine on which the application is running would require different techniques that are not covered here.&lt;/p&gt;\n&lt;h2&gt;\nResources are loaded at runtime&lt;/h2&gt;\n&lt;p&gt;The first thing to understand about loading resources is that they, of course, are loaded at runtime. Typically, during development, an application is run from the file system: that is, the class files and resources required to run it are individual files on the file system. However, once the application is built, it is usually executed from a jar file. In this case, the resources such as FXML files, stylesheets, and images, are no longer individual files on the filesystem but are entries in the jar file. Therefore:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Code cannot use &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;FileInputStream&lt;/code&gt;, or &lt;code&gt;file:&lt;/code&gt; URLs to load a resource&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;\nJavaFX uses URLs to load resources&lt;/h2&gt;\n&lt;p&gt;JavaFX loads FXML, Images, and CSS stylesheets using URLs.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;FXMLLoader&lt;/code&gt; explicitly expects a &lt;code&gt;java.net.URL&lt;/code&gt; object to be passed to it (either to the &lt;code&gt;static&lt;/code&gt; &lt;code&gt;FXMLLoader.load(...)&lt;/code&gt; method, to the &lt;code&gt;FXMLLoader&lt;/code&gt; constructor, or to the &lt;code&gt;setLocation()&lt;/code&gt; method).&lt;/p&gt;\n&lt;p&gt;Both &lt;code&gt;Image&lt;/code&gt; and &lt;code&gt;Scene.getStylesheets().add(...)&lt;/code&gt; expect &lt;code&gt;String&lt;/code&gt;s that represent URLs. If URLs are passed without a scheme, they are interpreted relative to the classpath. These strings can be created from a &lt;code&gt;URL&lt;/code&gt; in a robust way by calling &lt;code&gt;toExternalForm()&lt;/code&gt; on the &lt;code&gt;URL&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The recommended mechanism for creating the correct URL for a resource is to use &lt;code&gt;Class.getResource(...)&lt;/code&gt;, which is called on an appropriate &lt;code&gt;Class&lt;/code&gt; instance. Such a class instance can be obtained by calling &lt;code&gt;getClass()&lt;/code&gt; (which gives the class of the current object), or &lt;code&gt;ClassName.class&lt;/code&gt;. The &lt;code&gt;Class.getResource(...)&lt;/code&gt; method takes a &lt;code&gt;String&lt;/code&gt; representing the resource name.&lt;/p&gt;\n&lt;h2&gt;\nRules for resource names&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Resource names are &lt;code&gt;/&lt;/code&gt;-separated path names. Each component represents a package or sub-package name component.&lt;/li&gt;\n&lt;li&gt;Resource names are case-sensitive.&lt;/li&gt;\n&lt;li&gt;The individual components in the resource name &lt;strong&gt;must be valid Java identifiers&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The last point has an important consequence:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; are not valid Java identifiers, so they &lt;em&gt;&lt;strong&gt;cannot be used in resource names&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;These may actually work when the application is running from the filesystem, though this is really more of an accident of the implementation of &lt;code&gt;getResource()&lt;/code&gt;. They will fail when the application is bundled as a jar file.&lt;/p&gt;\n&lt;p&gt;Similarly, if you are running on an operating system that does not distinguish between filenames that differ only by case, then using the wrong case in a resource name might work while running from the filesystem, but will fail when running from a jar file.&lt;/p&gt;\n&lt;p&gt;Resource names beginning with a leading &lt;code&gt;/&lt;/code&gt; are &lt;em&gt;absolute&lt;/em&gt;: in other words they are interpreted relative to the classpath. Resource names without a leading &lt;code&gt;/&lt;/code&gt; are interpreted relative to the class on which &lt;code&gt;getResource()&lt;/code&gt; was called.&lt;/p&gt;\n&lt;p&gt;A slight variation on this is to use &lt;code&gt;getClass().getClassLoader().getResource(...)&lt;/code&gt;. The path supplied to &lt;code&gt;ClassLoader.getResource(...)&lt;/code&gt; &lt;strong&gt;must not&lt;/strong&gt; begin with a &lt;code&gt;/&lt;/code&gt; and is &lt;em&gt;always&lt;/em&gt; absolute, i.e. it is relative to the classpath. It should also be noted that in modular applications, access to resources using &lt;code&gt;ClassLoader.getResource()&lt;/code&gt; is, under some circumstances, subject to rules of strong encapsulation, and additionally the package containing the resource must be opened unconditionally. See the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getResource(java.lang.String)&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;\n&lt;h2&gt;\nCreating a resource URL with &lt;code&gt;getClass().getResource()&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;To create a resource URL, use &lt;code&gt;someClass.getResource(...)&lt;/code&gt;. Usually, &lt;code&gt;someClass&lt;/code&gt; represents the class of the current object, and is obtained using &lt;code&gt;getClass()&lt;/code&gt;. However, this doesn&apos;t have to be the case, as described in the next section.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If the resource is in the same package as the current class, or in a subpackage of that class, use a relative path to the resource:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// FXML file in the same package as the current class:&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyFile.fxml&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FXMLLoader.load(fxmlURL);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// FXML file in a subpackage called `fxml`:&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlURL2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fxml/MyFile.fxml&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FXMLLoader.load(fxmlURL2);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// Similarly for images:&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myimages/image.png&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;(imageURL.toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the resource is in a package that is not a subpackage of the current class, use an absolute path. For example, if the current class is in the package &lt;code&gt;org.jamesd.examples.view&lt;/code&gt;, and we need to load a CSS file &lt;code&gt;style.css&lt;/code&gt; which is in the package &lt;code&gt;org.jamesd.examples.css&lt;/code&gt;, we have to use an absolute path:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;cssURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/org/jamesd/examples/css/style.css&quot;&lt;/span&gt;);\n scene.getStylesheets().add(cssURL.toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s worth re-emphasizing for this example that the path &lt;code&gt;&quot;../css/style.css&quot;&lt;/code&gt; does not contain valid Java resource names, and &lt;strong&gt;will not work&lt;/strong&gt; if the application is bundled as a jar file.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;\nOrganizing code and resources&lt;/h2&gt;\n&lt;p&gt;I recommend organizing your code and resources into packages determined by the part of the UI they are associated with. The following source layout in Eclipse gives an example of this organization:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fPFmF.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fPFmF.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Using this structure, each resource has a class in the same package, so it is easy to generate the correct URL for any resource:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FXMLLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editorLoader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FXMLLoader&lt;/span&gt;(EditorController.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Editor.fxml&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; editorLoader.load();\n&lt;span class=&quot;hljs-type&quot;&gt;FXMLLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sidebarLoader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FXMLLoader&lt;/span&gt;(SidebarController.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sidebar.fxml&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sidebar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sidebarLoader.load();\n\n&lt;span class=&quot;hljs-type&quot;&gt;ImageView&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageView&lt;/span&gt;();\nlogo.setImage(newImage(SidebarController.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;).toExternalForm()));\n\nmainScene.getStylesheets().add(App.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style.css&quot;&lt;/span&gt;).toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you have a package with only resources and no classes, for example, the &lt;code&gt;images&lt;/code&gt; package in the layout below&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/s26lK.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/s26lK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;you can even consider creating a &quot;marker interface&quot; solely for the purposes of looking up the resource names:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; org.jamesd.examples.sample.images ;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageLocation&lt;/span&gt; { }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which now lets you find these resources easily:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;clubs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;(ImageLocation.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clubs.png&quot;&lt;/span&gt;).toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Loading resources from a subpackage of a class is also reasonably straightforward. Given the following layout:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/5VFSe.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5VFSe.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;we can load resources in the &lt;code&gt;App&lt;/code&gt; class as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; org.jamesd.examples.resourcedemo;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.URL;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.application.Application;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.fxml.FXMLLoader;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.scene.Parent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.scene.Scene;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.stage.Stage;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Application&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Stage primaryStage)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception {        \n        \n        &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlResource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fxml/MainView.fxml&quot;&lt;/span&gt;);\n        \n        \n        &lt;span class=&quot;hljs-type&quot;&gt;FXMLLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FXMLLoader&lt;/span&gt;();\n        loader.setLocation(fxmlResource);\n        &lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; loader.load();\n        &lt;span class=&quot;hljs-type&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scene&lt;/span&gt;(root);\n        scene.getStylesheets().add(getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style/main-style.css&quot;&lt;/span&gt;).toExternalForm());\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        Application.launch(args);\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To load resources which are not in the same package, or a subpackage, of the class from which you&apos;re loading them, you need to use the absolute path:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlResource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/org/jamesd/examples/resourcedemo/fxml/MainView.fxml&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;\nMaven (and similar) standard layouts&lt;/h2&gt;\n&lt;p&gt;Maven and other dependency management and build tools recommend a &lt;em&gt;source&lt;/em&gt; folder layout in which resources are separated from Java source files. The Maven layout version of the previous example looks like:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JW08B.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JW08B.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It is important to understand how this is built to assemble the application:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;*.java&lt;/code&gt; files in the &lt;em&gt;source&lt;/em&gt; folder &lt;code&gt;src/main/java&lt;/code&gt; are compiled to class files, which are deployed to the build folder or jar file.&lt;/li&gt;\n&lt;li&gt;Resources in the &lt;em&gt;resource&lt;/em&gt; folder &lt;code&gt;src/main/resources&lt;/code&gt; are &lt;em&gt;copied&lt;/em&gt; to the build folder or jar file.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In this example, because the resources are in folders that correspond to subpackages of the packages where the source code is defined, the resulting build (which, by default with Maven, is in &lt;code&gt;target/classes&lt;/code&gt;) consists of a single structure.&lt;/p&gt;\n&lt;p&gt;Note that both &lt;code&gt;src/main/java&lt;/code&gt; and &lt;code&gt;src/main/resources&lt;/code&gt; are considered the root for the corresponding structure in the build, so only their content, not the folders themselves, are part of the build. In other words, there is no &lt;code&gt;resources&lt;/code&gt; folder available at runtime. The build structure is shown below in the &quot;troubleshooting&quot; section.&lt;/p&gt;\n&lt;p&gt;Notice that the IDE in this case (Eclipse) displays the &lt;code&gt;src/main/java&lt;/code&gt; source folder differently to the &lt;code&gt;src/main/resources&lt;/code&gt; folder; in the first case it displays &lt;em&gt;packages&lt;/em&gt;, but for the resource folder it displays &lt;em&gt;folders&lt;/em&gt;. Make sure you know if you are creating packages (whose names are &lt;code&gt;.&lt;/code&gt;-delimited) or folders (whose names must not contain &lt;code&gt;.&lt;/code&gt;, or any other character not valid in a Java identifier) in your IDE.&lt;/p&gt;\n&lt;h2&gt;\nTroubleshooting&lt;/h2&gt;\n&lt;p&gt;If you get errors you do not expect, first check the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Make sure you are not using invalid names for your resources. This includes using &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; in the resource path.&lt;/li&gt;\n&lt;li&gt;Make sure you are using relative paths where expected, and absolute paths where expected. for &lt;code&gt;Class.getResource(...)&lt;/code&gt; the path is absolute if it has a leading &lt;code&gt;/&lt;/code&gt;, and relative otherwise. For &lt;code&gt;ClassLoader.getResource(...)&lt;/code&gt;, the path is always absolute, and &lt;strong&gt;must not&lt;/strong&gt; start with a &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Remember that absolute paths are defined relative to the &lt;em&gt;classpath&lt;/em&gt;. Typically the root of the classpath is the union of all source and resource folders in your IDE.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If all this seems correct, and you still see errors, check the &lt;em&gt;build&lt;/em&gt; or deployment folder. The exact location of this folder will vary by IDE and build tool. If you are using Maven, by default it is &lt;code&gt;target/classes&lt;/code&gt;. Other build tools and IDEs will deploy to folders named &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;classes&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, or &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Often, your IDE will not show the build folder, so you may need to check it with the system file explorer.&lt;/p&gt;\n&lt;p&gt;The combined source and build structure  for the Maven example above is&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qX18M.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qX18M.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you are generating a jar file, some IDEs may allow you to expand the jar file in a tree view to inspect its contents. You can also check the contents from the command line with &lt;code&gt;jar tf file.jar&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$ jar -tf resource-demo-0.0.1-SNAPSHOT.jar \nMETA-INF/\nMETA-INF/MANIFEST.MF\norg/\norg/jamesd/\norg/jamesd/examples/\norg/jamesd/examples/resourcedemo/\norg/jamesd/examples/resourcedemo/images/\norg/jamesd/examples/resourcedemo/style/\norg/jamesd/examples/resourcedemo/fxml/\norg/jamesd/examples/resourcedemo/images/so-logo.png\norg/jamesd/examples/resourcedemo/style/main-style.css\norg/jamesd/examples/resourcedemo/Controller.class\norg/jamesd/examples/resourcedemo/fxml/MainView.fxml\norg/jamesd/examples/resourcedemo/App.class\nmodule-info.class\nMETA-INF/maven/\nMETA-INF/maven/org.jamesd.examples/\nMETA-INF/maven/org.jamesd.examples/resource-demo/\nMETA-INF/maven/org.jamesd.examples/resource-demo/pom.xml\nMETA-INF/maven/org.jamesd.examples/resource-demo/pom.properties\n$ \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the resources are not being deployed, or are being deployed to an unexpected location, check the configuration of your build tool or IDE.&lt;/p&gt;\n&lt;h2&gt;Example image loading troubleshooting code&lt;/h2&gt;\n&lt;p&gt;This code is deliberately more verbose than is strictly necessarily to facilitate adding additional debugging information for the image loading process.  It also uses System.out rather than a logger for easier portability.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;resourcePathString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/img/wumpus.png&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; loadImage(resourcePathString);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Image &lt;span class=&quot;hljs-title function_&quot;&gt;loadImage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String resourcePathString)&lt;/span&gt; {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Attempting to load an image from the resourcePath: &quot;&lt;/span&gt; + resourcePathString);\n    &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; HelloApplication.class.getResource(resourcePathString);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (resource == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Resource does not exist: &quot;&lt;/span&gt; + resourcePathString);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; resource.toExternalForm();\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image path: &quot;&lt;/span&gt; + path);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;(path);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image load error?  &quot;&lt;/span&gt; + image.isError());\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image load exception? &quot;&lt;/span&gt; + image.getException());\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!image.isError()) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Successfully loaded an image from &quot;&lt;/span&gt; + resourcePathString);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; image;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;External Tutorial Reference&lt;/h2&gt;\n&lt;p&gt;A useful external tutorial for resource location is Eden coding&apos;s tutorial:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://edencoding.com/where-to-put-resource-files-in-javafx/&quot; rel=&quot;noreferrer&quot;&gt;Where to put resource files in JavaFX&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The nice thing about the Eden coding tutorial is that it is comprehensive.  In addition to covering the information on lookups from Java code which is in this question.  The Eden tutorial covers topics such as locating resources that are encoded as urls in CSS, or resource references in FXML using an &lt;code&gt;@&lt;/code&gt; specifier or &lt;code&gt;fx:include&lt;/code&gt; element (which are topics currently not directly covered in this answer).&lt;/p&gt;\n    "],"485":["\n&lt;h2&gt;Python 2.7.9+ and 3.4+&lt;/h2&gt;\n\n&lt;p&gt;Good news! &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.4.html&quot; rel=&quot;noreferrer&quot;&gt;Python 3.4&lt;/a&gt; (released March 2014) and &lt;a href=&quot;https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7&quot; rel=&quot;noreferrer&quot;&gt;Python 2.7.9&lt;/a&gt; (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community&apos;s wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins &lt;a href=&quot;http://en.wikipedia.org/wiki/Ruby_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot; rel=&quot;noreferrer&quot;&gt;Node.js&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Haskell_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Haskell&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot; rel=&quot;noreferrer&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Go_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Go&lt;/a&gt;almost every other contemporary language with a majority open-source community. Thank you, Python.&lt;/p&gt;\n\n&lt;p&gt;If you do find that pip is not available when using Python 3.4+ or Python 2.7.9+, simply execute e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;py -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; -m ensurepip\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, that doesn&apos;t mean Python packaging is problem solved. The experience remains frustrating. I discuss this &lt;a href=&quot;https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719&quot;&gt;in the Stack Overflow question &lt;em&gt;Does Python have a package/module management system?&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There&apos;s no plan to ship Pip to you. Manual instructions follow.&lt;/p&gt;\n\n&lt;h2&gt;Python 2  2.7.8 and Python 3  3.3&lt;/h2&gt;\n\n&lt;p&gt;Flying in the face of its &lt;a href=&quot;http://www.python.org/about/&quot; rel=&quot;noreferrer&quot;&gt;&apos;batteries included&apos;&lt;/a&gt; motto, Python ships without a package manager. To make matters worse, Pip wasuntil recentlyironically difficult to install.&lt;/p&gt;\n\n&lt;h3&gt;Official instructions&lt;/h3&gt;\n\n&lt;p&gt;Per &lt;a href=&quot;https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip&quot; rel=&quot;noreferrer&quot;&gt;https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;Download &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;get-pip.py&lt;/code&gt;&lt;/a&gt;, being careful to save it as a &lt;code&gt;.py&lt;/code&gt; file rather than &lt;code&gt;.txt&lt;/code&gt;. Then, run it from the command prompt:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You possibly need an administrator command prompt to do this. Follow &lt;em&gt;&lt;a href=&quot;http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx&quot; rel=&quot;noreferrer&quot;&gt;Start a Command Prompt as an Administrator&lt;/a&gt;&lt;/em&gt; (Microsoft TechNet).&lt;/p&gt;\n\n&lt;p&gt;This installs the pip package, which (in Windows) contains ...\\Scripts\\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of &apos;Alternative Instructions&apos; for adding it to your PATH,&lt;/p&gt;\n\n&lt;h3&gt;Alternative instructions&lt;/h3&gt;\n\n&lt;p&gt;The official documentation tells users to install Pip and each of its dependencies from source. That&apos;s tedious for the experienced and prohibitively difficult for newbies.&lt;/p&gt;\n\n&lt;p&gt;For our sake, Christoph Gohlke prepares Windows installers (&lt;code&gt;.msi&lt;/code&gt;) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools&quot; rel=&quot;noreferrer&quot;&gt;Install setuptools&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip&quot; rel=&quot;noreferrer&quot;&gt;Install pip&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For me, this installed Pip at &lt;code&gt;C:\\Python27\\Scripts\\pip.exe&lt;/code&gt;. Find &lt;code&gt;pip.exe&lt;/code&gt; on your computer, then add its folder (for example, &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt;) to your path (Start / Edit environment variables). Now you should be able to run &lt;code&gt;pip&lt;/code&gt; from the command line. Try installing a package:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install httpie\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There you go (hopefully)! Solutions for common problems are given below:&lt;/p&gt;\n\n&lt;h3&gt;Proxy problems&lt;/h3&gt;\n\n&lt;p&gt;If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables &lt;a href=&quot;http://docs.python.org/2/library/urllib.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;http_proxy&lt;/code&gt; and &lt;code&gt;https_proxy&lt;/code&gt;&lt;/a&gt;. Most Python applications (and other free software) respect these. Example syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;http://proxy_url:port\nhttp://username:password@proxy_url:port\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&apos;re really unlucky, your proxy might be a Microsoft &lt;a href=&quot;https://en.wikipedia.org/wiki/NT_LAN_Manager&quot; rel=&quot;noreferrer&quot;&gt;NTLM&lt;/a&gt; proxy. Free software can&apos;t cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. &lt;a href=&quot;http://cntlm.sourceforge.net/&quot; rel=&quot;noreferrer&quot;&gt;http://cntlm.sourceforge.net/&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;Unable to find vcvarsall.bat&lt;/h3&gt;\n\n&lt;p&gt;Python modules can be partly written in C or C++. Pip tries to compile from source. If you don&apos;t have a C/C++ compiler installed and configured, you&apos;ll see this cryptic error message.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Error: Unable to find vcvarsall.bat&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can fix that by &lt;a href=&quot;https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat&quot;&gt;installing a C++ compiler&lt;/a&gt; such as &lt;a href=&quot;http://en.wikipedia.org/wiki/MinGW&quot; rel=&quot;noreferrer&quot;&gt;MinGW&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions&quot; rel=&quot;noreferrer&quot;&gt;Visual C++&lt;/a&gt;. Microsoft actually ships one specifically for use with Python. Or try &lt;em&gt;&lt;a href=&quot;http://aka.ms/vcpython27&quot; rel=&quot;noreferrer&quot;&gt;Microsoft Visual C++ Compiler for Python 2.7&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Often though it&apos;s easier to check &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; rel=&quot;noreferrer&quot;&gt;Christoph&apos;s site&lt;/a&gt; for your package.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;s&gt;-- &lt;strong&gt;Outdated&lt;/strong&gt; -- use distribute, not setuptools as described here. --&lt;/s&gt;&lt;br&gt;\n-- &lt;strong&gt;Outdated #2&lt;/strong&gt; -- use setuptools as distribute is deprecated.&lt;/p&gt;\n\n&lt;p&gt;As you mentioned pip doesn&apos;t include an independent installer, but you can install it with its predecessor easy_install.&lt;/p&gt;\n\n&lt;p&gt;So:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Download the last pip version from here: &lt;a href=&quot;http://pypi.python.org/pypi/pip#downloads&quot; rel=&quot;noreferrer&quot;&gt;http://pypi.python.org/pypi/pip#downloads&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Uncompress it&lt;/li&gt;\n&lt;li&gt;Download the last easy installer for Windows: (&lt;strong&gt;download the .exe at the bottom of &lt;a href=&quot;http://pypi.python.org/pypi/setuptools&quot; rel=&quot;noreferrer&quot;&gt;http://pypi.python.org/pypi/setuptools&lt;/a&gt;&lt;/strong&gt; ). Install it.&lt;/li&gt;\n&lt;li&gt;copy the uncompressed pip folder &lt;strong&gt;content&lt;/strong&gt; into &lt;code&gt;C:\\Python2x\\&lt;/code&gt; folder (don&apos;t copy the whole folder into it, just the content), because python command doesn&apos;t work outside &lt;code&gt;C:\\Python2x&lt;/code&gt; folder and then run:  &lt;code&gt;python setup.py install&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Add your python &lt;code&gt;C:\\Python2x\\Scripts&lt;/code&gt; to the path&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You are done. &lt;/p&gt;\n\n&lt;p&gt;Now you can use &lt;code&gt;pip install package&lt;/code&gt; to easily install packages as in Linux :)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;2014 UPDATE:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;1) If you have installed Python 3.4 or later, pip is included with Python and should already be working on your system.&lt;/p&gt;\n\n&lt;p&gt;2) If you are running a version below Python 3.4 or if pip was not installed with Python 3.4 for some reason, then you&apos;d probably use pip&apos;s official installation script &lt;code&gt;get-pip.py&lt;/code&gt;. The pip installer now grabs setuptools for you, and works regardless of architecture (32-bit or 64-bit).&lt;/p&gt;\n\n&lt;p&gt;The installation &lt;a href=&quot;http://www.pip-installer.org/en/latest/installing.html&quot; rel=&quot;noreferrer&quot;&gt;instructions are detailed here&lt;/a&gt; and involve:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;To install or upgrade pip, securely download &lt;a href=&quot;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&quot; rel=&quot;noreferrer&quot;&gt;get-pip.py&lt;/a&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;Then run the following (which may require administrator access):&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;To upgrade an existing setuptools (or distribute), run &lt;code&gt;pip install -U setuptools&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&apos;ll leave the two sets of old instructions below for posterity.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;OLD Answers:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For Windows editions of the &lt;strong&gt;64 bit&lt;/strong&gt; variety - 64-bit Windows + Python used to require a separate installation method due to ez_setup, but I&apos;ve tested the new distribute method on 64-bit Windows running 32-bit Python and 64-bit Python, and you can now use the same method for all versions of Windows/Python 2.7X:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;OLD Method 2&lt;/strong&gt; using &lt;a href=&quot;https://pypi.python.org/pypi/distribute&quot; rel=&quot;noreferrer&quot;&gt;distribute&lt;/a&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Download &lt;a href=&quot;http://python-distribute.org/distribute_setup.py&quot; rel=&quot;noreferrer&quot;&gt;distribute&lt;/a&gt; - I threw mine in &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt; (feel free to create a &lt;code&gt;Scripts&lt;/code&gt; directory if it doesn&apos;t exist.&lt;/li&gt;\n&lt;li&gt;Open up a command prompt (on Windows you should check out &lt;a href=&quot;http://code.google.com/p/conemu-maximus5/&quot; rel=&quot;noreferrer&quot;&gt;conemu2&lt;/a&gt; if you don&apos;t use &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_PowerShell&quot; rel=&quot;noreferrer&quot;&gt;PowerShell&lt;/a&gt;) and change (&lt;code&gt;cd&lt;/code&gt;) to the directory you&apos;ve downloaded &lt;code&gt;distribute_setup.py&lt;/code&gt; to.&lt;/li&gt;\n&lt;li&gt;Run distribute_setup: &lt;code&gt;python distribute_setup.py&lt;/code&gt; (This will not work if your python installation directory is not added to your path - &lt;a href=&quot;https://stackoverflow.com/a/6318188/705198&quot;&gt;go here for help&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Change the current directory to the &lt;code&gt;Scripts&lt;/code&gt; directory for your Python installation (&lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt;) or add that directory, as well as the Python base installation directory to your %PATH% environment variable.&lt;/li&gt;\n&lt;li&gt;Install pip using the newly installed setuptools: &lt;code&gt;easy_install pip&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The last step will not work unless you&apos;re either in the directory &lt;code&gt;easy_install.exe&lt;/code&gt; is located in (C:\\Python27\\Scripts would be the default for Python 2.7), or you have that directory added to your path.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;OLD Method 1&lt;/strong&gt; using ez_setup:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/setuptools#windows&quot; rel=&quot;noreferrer&quot;&gt;from the setuptools page&lt;/a&gt; --&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Download &lt;a href=&quot;http://peak.telecommunity.com/dist/ez_setup.py&quot; rel=&quot;noreferrer&quot;&gt;ez_setup.py&lt;/a&gt; and run it; it will download the appropriate .egg file and install it for you. (Currently, the provided .exe installer does not support 64-bit versions of Python for Windows, due to a distutils installer compatibility issue.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;After this, you may continue with:&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Add &lt;code&gt;c:\\Python2x\\Scripts&lt;/code&gt; to the Windows path (replace the &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;Python2x&lt;/code&gt; with the actual version number you have installed)&lt;/li&gt;\n&lt;li&gt;Open a new (!) DOS prompt. From there run &lt;code&gt;easy_install pip&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;2016+ Update:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;These answers are outdated or otherwise wordy and difficult.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;ve got Python 3.4+ or 2.7.9+, it will be &lt;a href=&quot;https://docs.python.org/3.4/whatsnew/3.4.html#whatsnew-pep-453&quot; rel=&quot;noreferrer&quot;&gt;installed by default&lt;/a&gt; on Windows.  Otherwise, in short:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Download the pip installer: \n&lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;noreferrer&quot;&gt;https://bootstrap.pypa.io/get-pip.py&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;If paranoid, inspect file to confirm it isn&apos;t malicious\n(must b64 decode).&lt;/li&gt;\n&lt;li&gt;Open a console in the download folder as Admin and run\n&lt;code&gt;get-pip.py&lt;/code&gt;.  Alternatively, right-click its icon in Explorer and choose the &quot;run as Admin...&quot;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The new binaries &lt;code&gt;pip.exe&lt;/code&gt; (and the deprecated &lt;code&gt;easy_install.exe&lt;/code&gt;) will be found in the &lt;code&gt;&quot;%ProgramFiles%\\PythonXX\\Scripts&quot;&lt;/code&gt; folder (or similar), which is often not in your &lt;code&gt;PATH&lt;/code&gt; variable.  I recommend adding it.&lt;/p&gt;\n    ","\n&lt;p&gt;Python 3.4, which  was released in March 2014, comes with &lt;code&gt;pip&lt;/code&gt; included:&lt;br&gt;\n&lt;a href=&quot;http://docs.python.org/3.4/whatsnew/3.4.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.python.org/3.4/whatsnew/3.4.html&lt;/a&gt;&lt;br&gt;\nSo, since the release of Python 3.4, the up-to-date way to install pip on Windows is to just install Python.&lt;/p&gt;\n\n&lt;p&gt;The recommended way to use it is to call it as a module, especially with multiple python distributions or versions installed, to guarantee packages go to the correct place:&lt;br&gt;\n&lt;code&gt;python -m pip install --upgrade packageXYZ&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/installing/#work-with-multiple-versions-of-python-installed-in-parallel&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/3/installing/#work-with-multiple-versions-of-python-installed-in-parallel&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When I have to use Windows, I use ActivePython, which automatically adds everything to your PATH and includes a package manager called &lt;a href=&quot;http://code.activestate.com/pypm/&quot; rel=&quot;noreferrer&quot;&gt;PyPM&lt;/a&gt; which provides &lt;em&gt;binary&lt;/em&gt; package management making it faster and simpler to install packages.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;easy_install&lt;/code&gt; aren&apos;t exactly the same thing, so there are some things you can get through &lt;code&gt;pip&lt;/code&gt; but not &lt;code&gt;easy_install&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install/3224103#3224103&quot;&gt;and vice versa&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;My recommendation is that you get &lt;a href=&quot;http://www.activestate.com/activepython/downloads&quot; rel=&quot;noreferrer&quot;&gt;ActivePython Community Edition&lt;/a&gt; and don&apos;t worry about the huge hassle of getting everything set up for Python on Windows. Then, you can just use &lt;code&gt;pypm&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In case you want to use &lt;code&gt;pip&lt;/code&gt; you have to check the &lt;code&gt;PyPM&lt;/code&gt; option in the ActiveState installer. After installation you only need to logoff and log on again, and &lt;code&gt;pip&lt;/code&gt; will be available on the commandline, because it is contained in the ActiveState installer &lt;code&gt;PyPM&lt;/code&gt; option and the paths have been set by the installer for you already. &lt;code&gt;PyPM&lt;/code&gt; will also be available, but you do not have to use it.&lt;/p&gt;\n    ","\n&lt;p&gt;The up-to-date way is to use Windows&apos; package manager &lt;a href=&quot;http://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Once this is installed, all you have to do is open a command prompt and run the following the three commands below, which will install Python 2.7, easy_install and pip. It will automatically detect whether you&apos;re on x64 or x86 Windows.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cinst python\ncinst easy.install\ncinst pip\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All of the other Python packages on the Chocolatey Gallery can be found &lt;a href=&quot;http://chocolatey.org/packages?q=python&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Update March 2015&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Python 2.7.9 and later (on the Python 2 series), and Python 3.4 and later include pip by default, so you may have pip already.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t, run this one line command on your prompt (which may require administrator access):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -c &lt;span class=&quot;hljs-string&quot;&gt;&quot;exec(&apos;try: from urllib2 import urlopen \\nexcept: from urllib.request import urlopen&apos;);f=urlopen(&apos;https://bootstrap.pypa.io/get-pip.py&apos;).read();exec(f)&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will install &lt;a href=&quot;http://www.pip-installer.org/&quot; rel=&quot;noreferrer&quot;&gt;pip&lt;/a&gt;. If &lt;a href=&quot;https://bitbucket.org/pypa/setuptools/&quot; rel=&quot;noreferrer&quot;&gt;Setuptools&lt;/a&gt; is not already installed, &lt;code&gt;get-pip.py&lt;/code&gt; will install it for you too.&lt;/p&gt;\n\n&lt;p&gt;As mentioned in comments, the above command will download code from the Pip source code repository at &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot; rel=&quot;noreferrer&quot;&gt;GitHub&lt;/a&gt;, and dynamically run it at your environment. So be noticed that this is a shortcut of the steps download, inspect and run, &lt;strong&gt;all with a single command using Python itself&lt;/strong&gt;. If you trust Pip, proceed without doubt.&lt;/p&gt;\n\n&lt;p&gt;Be sure that your Windows environment variable PATH includes Python&apos;s folders (for Python 2.7.x default install: &lt;code&gt;C:\\Python27&lt;/code&gt; and &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt;, for Python 3.3x: &lt;code&gt;C:\\Python33&lt;/code&gt; and &lt;code&gt;C:\\Python33\\Scripts&lt;/code&gt;, and so on).&lt;/p&gt;\n    ","\n&lt;h2&gt;Installers&lt;/h2&gt;\n\n&lt;p&gt;I&apos;ve built Windows installers for both &lt;a href=&quot;http://pypi.python.org/pypi/distribute&quot; rel=&quot;noreferrer&quot;&gt;distribute&lt;/a&gt; and &lt;a href=&quot;http://www.pip-installer.org/&quot; rel=&quot;noreferrer&quot;&gt;pip&lt;/a&gt; here (the goal being to use &lt;code&gt;pip&lt;/code&gt; without having to either bootstrap with &lt;code&gt;easy_install&lt;/code&gt; or save and run Python scripts):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://download.sjsoft.com/opensource/distribute-0.6.27.win32.exe&quot; rel=&quot;noreferrer&quot;&gt;distribute-0.6.27.win32.exe&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://download.sjsoft.com/opensource/pip-1.1.win32.exe&quot; rel=&quot;noreferrer&quot;&gt;pip-1.1.win32.exe&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;On Windows, simply download and install first &lt;code&gt;distribute&lt;/code&gt;, then &lt;code&gt;pip&lt;/code&gt; from the above links. The &lt;code&gt;distribute&lt;/code&gt; link above does contain stub &lt;code&gt;.exe&lt;/code&gt; installers, and these are currently 32-bit only. I haven&apos;t tested the effect on 64-bit Windows.&lt;/p&gt;\n\n&lt;h2&gt;Building on Windows&lt;/h2&gt;\n\n&lt;p&gt;The process to redo this for new versions is not difficult, and I&apos;ve included it here for reference.&lt;/p&gt;\n\n&lt;h3&gt;Building &lt;code&gt;distribute&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;In order to get the stub &lt;code&gt;.exe&lt;/code&gt; files, you need to have a Visual C++ compiler (it is apparently compilable with MinGW as well)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;hg clone https://bitbucket.org/tarek/distribute\ncd distribute\nhg checkout 0.6.27\nrem optionally, comment out tag_build and tag_svn_revision in setup.cfg\nmsvc-build-launcher.cmd\npython setup.py bdist_win32\ncd ..\necho build is in distribute\\dist\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Building &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;git clone https://github.com/pypa/pip.git\ncd pip\ngit checkout 1.1\npython setup.py bdist_win32\ncd ..\necho build is in pip\\dist\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following works for Python 2.7. Save this script and launch it: &lt;br&gt; &lt;br&gt;\n&lt;a href=&quot;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&quot; rel=&quot;noreferrer&quot;&gt;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&lt;/a&gt; &lt;br&gt; &lt;br&gt;\nPip is installed, then add the path to your environment : &lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;C:\\Python27\\Scripts\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install virtualenv\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also you need Microsoft &lt;a href=&quot;http://go.microsoft.com/?linkid=7729279&quot; rel=&quot;noreferrer&quot;&gt;Visual C++ 2008 Express&lt;/a&gt; to get the good compiler and avoid these kind of messages when installing packages:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;error: Unable to find vcvarsall.bat\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have a 64-bit version of Windows 7, you may read &lt;em&gt;&lt;a href=&quot;http://tech.valgog.com/2010/01/after-installing-64-bit-windows-7-at.html&quot; rel=&quot;noreferrer&quot;&gt;64-bit Python installation issues on 64-bit Windows 7&lt;/a&gt;&lt;/em&gt; to successfully install the Python executable package (issue with registry entries).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;For the latest Python download - I have Python 3.6 on Windows. You don&apos;t have to wonder. Everything you need is there. Take a breath, and I will show you how to do it.&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Make sure where you install Python. For me, it was in the following directory&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ca5z1.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ca5z1.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Now, lets add the Python and pip into environment variable &lt;em&gt;path&lt;/em&gt; settings\nif you are on Windows, so that typing &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;python&lt;/code&gt; anywhere call\n&lt;code&gt;python&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt; from where they are installed.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So, PIP is found under the folder in the above screen &quot;&lt;strong&gt;SCRIPTS&lt;/strong&gt;&quot;\nLet&apos;s add Python and PIP in the environment variable &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/UETzB.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/UETzB.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Almost done. Let&apos;s test with CMD to install the &lt;em&gt;google&lt;/em&gt; package using pip.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; pip install google\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Pus98.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Pus98.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;To install pip &lt;em&gt;globally&lt;/em&gt; on Python 2.x, easy_install appears to be the best solution as Adrián states.&lt;/p&gt;\n\n&lt;p&gt;However the &lt;a href=&quot;http://www.pip-installer.org/en/latest/installing.html&quot; rel=&quot;noreferrer&quot;&gt;installation instructions&lt;/a&gt; for pip recommend using &lt;a href=&quot;http://www.virtualenv.org&quot; rel=&quot;noreferrer&quot;&gt;virtualenv&lt;/a&gt; since every virtualenv has pip installed in it automatically.  This does not require root access or modify your system Python installation.&lt;/p&gt;\n\n&lt;p&gt;Installing virtualenv still requires easy_install though.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;2018 update:&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;Python 3.3+ now includes the &lt;a href=&quot;https://docs.python.org/3/library/venv.html&quot; rel=&quot;noreferrer&quot;&gt;venv module&lt;/a&gt; for easily creating virtual environments like so:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;python3 -m venv /path/to/new/virtual/environment&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;See documentation for different platform methods of activating the environment after creation, but typically one of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ source &amp;lt;venv&amp;gt;/&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;/activate \n\nC:\\&amp;gt; &amp;lt;venv&amp;gt;\\Scripts\\activate.bat\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To use pip, it is not mandatory that you need to install pip in the system directly. You can use it through &lt;a href=&quot;https://pypi.python.org/pypi/virtualenv&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt;. What you can do is follow these steps:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Download virtualenv tar.gz file from &lt;a href=&quot;https://pypi.python.org/pypi/virtualenv&quot; rel=&quot;noreferrer&quot;&gt;https://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Unzip it with 7zip or some other tool&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;We normally need to install Python packages for one particular project. So, now create a project folder, lets say myproject.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Copy the &lt;strong&gt;virtualenv.py&lt;/strong&gt; file from the decompressed folder of &lt;code&gt;virtualenv&lt;/code&gt;, and paste inside the &lt;strong&gt;myproject&lt;/strong&gt; folder&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now create a virtual environment, lets say &lt;strong&gt;myvirtualenv&lt;/strong&gt; as follows, inside the &lt;strong&gt;myproject&lt;/strong&gt; folder:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python virtualenv.py myvirtualenv\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will show you:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;New python executable &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myvirtualenv\\Scripts\\python.exe\nInstalling setuptools....................................done.\nInstalling pip.........................done.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now your virtual environment, &lt;strong&gt;myvirtualenv&lt;/strong&gt;, is created inside your project folder. You might notice, pip is now installed inside you virtual environment. All you need to do is activate the virtual environment with the following command.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myvirtualenv\\Scripts\\activate\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will see the following at the command prompt:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(myvirtualenv) PATH\\TO\\YOUR\\PROJECT\\FOLDER&amp;gt;pip install package_name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can start using pip, but make sure you have activated the virtualenv looking at the left of your prompt.&lt;/p&gt;\n\n&lt;p&gt;This is one of the easiest way to install pip i.e. inside virtual environment, but you need to have virtualenv.py file with you.&lt;/p&gt;\n\n&lt;p&gt;For more ways to install pip/virtualenv/virtualenvwrapper, you can refer to &lt;a href=&quot;http://thegauraw.tumblr.com&quot; rel=&quot;noreferrer&quot;&gt;thegauraw.tumblr.com&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Updated at 2016 :&lt;/strong&gt; &lt;code&gt;Pip&lt;/code&gt; should already be included in &lt;code&gt;Python 2.7.9+ or 3.4+&lt;/code&gt;, but if for whatever reason it is not there, you can use the following one-liner.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Download &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;noreferrer&quot;&gt;https://bootstrap.pypa.io/get-pip.py&lt;/a&gt; and run it with Administrator permission &lt;code&gt;python get-pip.py&lt;/code&gt; (If you are on Linux, use &lt;code&gt;sudo python get-pip.py&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;PS:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;This should already be satisfied in most cases but, if necessary, be sure that your environment variable PATH includes Python&apos;s folders (for example, &lt;code&gt;Python 2.7.x&lt;/code&gt; on Windows default install: &lt;code&gt;C:\\Python27 and C:\\Python27\\Scripts&lt;/code&gt;, for &lt;code&gt;Python 3.3x&lt;/code&gt;: &lt;code&gt;C:\\Python33 and C:\\Python33\\Scripts&lt;/code&gt;, etc)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I encounter same problem and then found such perhaps easiest way (one liner!) mentioned on official website here: &lt;a href=&quot;http://www.pip-installer.org/en/latest/installing.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.pip-installer.org/en/latest/installing.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Can&apos;t believe there are so many lengthy (perhaps outdated?) answers out there. Feeling thankful to them but, please up-vote this short answer to help more new comers!&lt;/p&gt;\n    ","\n&lt;p&gt;I just wanted to add one more solution for those having issues installing setuptools from Windows 64-bit. The issue is discussed in this bug on python.org and is still unresolved as of the date of this comment. A simple workaround is mentioned and it works flawlessly. One registry change did the trick for me.&lt;/p&gt;\n\n&lt;p&gt;Link: &lt;a href=&quot;http://bugs.python.org/issue6792#&quot; rel=&quot;noreferrer&quot;&gt;http://bugs.python.org/issue6792#&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Solution that worked for me...:&lt;/p&gt;\n\n&lt;p&gt;Add this registry setting for 2.6+ versions of Python:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\&lt;span class=&quot;hljs-number&quot;&gt;2.6&lt;/span&gt;\\InstallPath]\n&lt;span class=&quot;hljs-meta&quot;&gt; @=&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\Python26\\\\&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is most likely the registry setting you will already have for Python 2.6+:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\&lt;span class=&quot;hljs-number&quot;&gt;2.6&lt;/span&gt;\\InstallPath]\n&lt;span class=&quot;hljs-meta&quot;&gt; @=&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\Python26\\\\&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clearly, you will need to replace the 2.6 version with whatever version of Python you are running.&lt;/p&gt;\n    ","\n&lt;p&gt;The best way I found so far, is just two lines of code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;curl http://python-distribute.org/distribute_setup.py | python\ncurl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It was tested on Windows 8 with &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_PowerShell&quot; rel=&quot;noreferrer&quot;&gt;PowerShell&lt;/a&gt;, Cmd, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Git_%28software%29&quot; rel=&quot;noreferrer&quot;&gt;Git&lt;/a&gt; Bash (&lt;a href=&quot;http://en.wikipedia.org/wiki/MinGW&quot; rel=&quot;noreferrer&quot;&gt;MinGW&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;And you probably want to add the path to your environment. It&apos;s somewhere like &lt;code&gt;C:\\Python33\\Scripts&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/pythonxy/&quot;&gt;PythonXY&lt;/a&gt; comes with &lt;code&gt;pip&lt;/code&gt; included, among &lt;a href=&quot;https://code.google.com/p/pythonxy/wiki/Welcome?tm=6&quot;&gt;others&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the cross-platform &lt;a href=&quot;https://www.continuum.io/downloads&quot; rel=&quot;noreferrer&quot;&gt;Anaconda&lt;/a&gt; package manager from continuum.io on Windows and it is reliable.  It has virtual environment management and a fully featured shell with common utilities (e.g. conda, pip).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;gt; conda install &amp;lt;package&amp;gt;               &lt;span class=&quot;hljs-comment&quot;&gt;# access distributed binaries&lt;/span&gt;\n\n&amp;gt; pip install &amp;lt;package&amp;gt;                 &lt;span class=&quot;hljs-comment&quot;&gt;# access PyPI packages &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;conda&lt;/code&gt; also comes with binaries for libraries with non-Python dependencies, e.g. &lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, etc.  This proves useful particularly on Windows as it can be  hard to correctly compile C dependencies.&lt;/p&gt;\n    ","\n&lt;p&gt;Here how to install pip the easy way.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Copy and paste &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;this content&lt;/a&gt; in a file as &lt;strong&gt;get-pip.py&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Copy and paste &lt;strong&gt;get-pip.py&lt;/strong&gt; into the Python folder.&lt;code&gt;C:\\Python27&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Double click on &lt;strong&gt;get-pip.py&lt;/strong&gt; file. It will install pip on your computer.&lt;/li&gt;\n&lt;li&gt;Now you have to add &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt; path to your environment variable. Because it includes the &lt;code&gt;pip.exe&lt;/code&gt; file.&lt;/li&gt;\n&lt;li&gt;Now you are ready to use pip. Open &lt;code&gt;cmd&lt;/code&gt; and type as &lt;br&gt;&lt;code&gt;pip install package_name&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I had some issues installing in different ways when I followed instructions here. I think it&apos;s very tricky to install in every Windows environment in the same way. In my case I need Python 2.6, 2.7 and 3.3 in the same machine for different purposes so that&apos;s why I think there&apos;re more problems.\nBut the following instructions worked perfectly for me, so might be depending on your environment you should try this one:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/starting/install/win/&quot; rel=&quot;noreferrer&quot;&gt;http://docs.python-guide.org/en/latest/starting/install/win/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also, due to the different environments I found incredible useful to use Virtual Environments, I had websites that use different libraries and it&apos;s much better to encapsulate them into a single folder, check out the instructions, briefly if PIP is installed you just install VirtualEnv:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install virtualenv\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Into the folder you have all your files run&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;virtualenv venv\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And seconds later you have a virtual environment with everything in venv folder, to activate it run venv/Scripts/activate.bat (deactivate the environment is easy, use deactivate.bat). Every library you install will end up in venv\\Lib\\site-packages and it&apos;s easy to move your whole environment somewhere.&lt;/p&gt;\n\n&lt;p&gt;The only downside I found is some code editors can&apos;t recognize this kind of environments, and you will see warnings in your code because imported libraries are not found. Of course there&apos;re tricky ways to do it but it would be nice editors keep in mind Virtual Environments are very normal nowadays.&lt;/p&gt;\n\n&lt;p&gt;Hope it helps.&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Download script: &lt;a href=&quot;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&quot; rel=&quot;noreferrer&quot;&gt;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Save it on drive somewhere like C:\\pip-script\\get-pip.py&lt;/li&gt;\n&lt;li&gt;Navigate to that path from command prompt and run &quot; python get-pip.py &quot;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Guide link: &lt;a href=&quot;http://www.pip-installer.org/en/latest/installing.html#install-pip&quot; rel=&quot;noreferrer&quot;&gt;http://www.pip-installer.org/en/latest/installing.html#install-pip&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Note: Make sure scripts path like this (C:\\Python27\\Scripts) is added int %PATH% environment variable as well.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s very simple:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Step &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\nStep &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py\nStep &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: python ez_setup.py\nStep &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: python get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Make sure your Python and Python script directory (for example, &lt;code&gt;C:\\Python27&lt;/code&gt; and &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt;) are in the PATH.)&lt;/p&gt;\n    ","\n&lt;p&gt;Working as of Feb 04 2014 :):&lt;/p&gt;\n\n&lt;p&gt;If you have tried installing pip through the Windows installer file from &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip&quot; rel=&quot;nofollow&quot;&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip&lt;/a&gt; as suggested by @Colonel Panic, you might have installed the pip package manager successfully, but you might be unable to install any packages with pip. You might also have got the same SSL error as I got when I tried to install &lt;a href=&quot;https://en.wikipedia.org/wiki/Beautiful_Soup&quot; rel=&quot;nofollow&quot;&gt;Beautiful Soup&amp;nbsp;4&lt;/a&gt; if you look in the pip.log file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Downloading/unpacking beautifulsoup4\n  Getting page https://pypi.python.org/simple/beautifulsoup4/\n  Could &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; fetch URL https://pypi.python.org/simple/beautifulsoup4/: **connection error: [Errno &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] _ssl.c:&lt;span class=&quot;hljs-number&quot;&gt;504&lt;/span&gt;: error:&lt;span class=&quot;hljs-number&quot;&gt;14090086&lt;/span&gt;:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed**\n  Will skip URL https://pypi.python.org/simple/beautifulsoup4/ when looking &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; download links &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; beautifulsoup4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem is an issue with an old version of &lt;a href=&quot;http://en.wikipedia.org/wiki/OpenSSL&quot; rel=&quot;nofollow&quot;&gt;OpenSSL&lt;/a&gt; being incompatible with pip 1.3.1 and above versions. The easy workaround for now, is to install pip 1.2.1, which does not require &lt;a href=&quot;http://en.wikipedia.org/wiki/Transport_Layer_Security&quot; rel=&quot;nofollow&quot;&gt;SSL&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;Installing Pip on Windows:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Download pip 1.2.1 from &lt;a href=&quot;https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz&quot; rel=&quot;nofollow&quot;&gt;https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Extract the pip-1.2.1.tar.gz file&lt;/li&gt;\n&lt;li&gt;Change directory to the extracted folder: &lt;code&gt;cd &amp;lt;path to extracted folder&amp;gt;/pip-1.2.1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Run &lt;code&gt;python setup.py install&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Now make sure &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt; is in PATH because pip is installed in the &lt;code&gt;C:\\Python27\\Scripts&lt;/code&gt; directory unlike &lt;code&gt;C:\\Python27\\Lib\\site-packages&lt;/code&gt; where Python packages are normally installed&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now try to install any package using pip.&lt;/p&gt;\n\n&lt;p&gt;For example, to install the &lt;code&gt;requests&lt;/code&gt; package using pip, run this from cmd:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install requests\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Whola! &lt;code&gt;requests&lt;/code&gt; will be successfully installed and you will get a success message.&lt;/p&gt;\n    ","\n&lt;h3&gt;Simple CMD way&lt;/h3&gt;\n&lt;p&gt;Use CURL to download &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;get-pip.py&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;curl --http1&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt; https://bootstrap.pypa.io/get-pip.py --output get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Execute the downloaded Python file&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then add &lt;code&gt;C:\\Python37\\Scripts&lt;/code&gt; path to your environment variable. &lt;em&gt;It assumes that there is a &lt;code&gt;Python37&lt;/code&gt; folder in your C drive. That folder name may vary according to the installed Python version&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Now you can install Python packages by running&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install awesome_package_name\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Installing Pip for Python&amp;nbsp;2 and Python&amp;nbsp;3&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;Download &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;get-pip.py&lt;/a&gt; to a folder on your computer.&lt;/li&gt;\n&lt;li&gt;Open a command prompt and navigate to the folder containing &lt;code&gt;get-pip.py&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Run the following command:&lt;code&gt;python get-pip.py&lt;/code&gt;, &lt;code&gt;python3 get-pip.py&lt;/code&gt; or  &lt;code&gt;python3.6 get-pip.py&lt;/code&gt;, depending on which version of Python you want to install &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Pip should be now installed!&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;p&gt;Old answer (still valid)&lt;/p&gt;\n&lt;p&gt;Try:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m ensurepip\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s probably the easiest way to install pip on any system.&lt;/p&gt;\n    ","\n&lt;p&gt;If you even have other problems with the pip version, you can try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install --trusted-host pypi.python.org --upgrade pip\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;pip&lt;/strong&gt; is already installed if you&apos;re using Python 2 &amp;gt;= 2.7.9 or Python 3 &amp;gt;= 3.4 binaries downloaded from &lt;a href=&quot;http://python.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;python.org&lt;/a&gt;, but you&apos;ll need to upgrade pip.&lt;/p&gt;\n&lt;p&gt;On Windows, the upgrade can be done easily:&lt;/p&gt;\n&lt;p&gt;Go to a Python command line and run the below Python command&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m pip install -U pip\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Installing with get-pip.py&lt;/p&gt;\n&lt;p&gt;Download &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;get-pip.py&lt;/a&gt; in the same folder or any other folder of your choice. I am assuming you will download it in the same folder from where you have the &lt;em&gt;python.exe&lt;/em&gt; file and run this command:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Pip&apos;s &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/&quot; rel=&quot;nofollow noreferrer&quot;&gt;installation guide&lt;/a&gt; is pretty clean and simple.&lt;/p&gt;\n&lt;p&gt;Using this, you should be able to get started with Pip in under two minutes.&lt;/p&gt;\n    ","\n&lt;p&gt;Now, it is bundled with Python. You don&apos;t need to install it.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip -V\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is how you can check whether pip is installed or not.&lt;/p&gt;\n&lt;p&gt;In rare cases, if it is not installed, download the &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;get-pip.py&lt;/a&gt; file and run it with Python as&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python get-pip.py\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think the question makes it seem like the answer is simpler than it really is.&lt;/p&gt;\n&lt;p&gt;Running of pip will sometimes require native compilation of a module (64-bit NumPy is a common example of that). In order for pip&apos;s compilation to succeed, you need Python which was compiled with the same version of Microsoft Visual C++ as the one pip is using.&lt;/p&gt;\n&lt;p&gt;Standard Python distributions are compiled with Microsoft Visual C++ 2008. You can install an Express version of Microsoft Visual C++ 2008, but it is not maintained. Your best bet is to get an express version of a later Microsoft Visual C++ and compile Python. Then PIP and Python will be using the same Microsoft Visual C++ version.&lt;/p&gt;\n    ","\n&lt;p&gt;Just download setuptools-15.2.zip (md5), from here &lt;a href=&quot;https://pypi.python.org/pypi/setuptools#windows-simplified&quot; rel=&quot;nofollow&quot;&gt;https://pypi.python.org/pypi/setuptools#windows-simplified&lt;/a&gt; , and run ez_setup.py.&lt;/p&gt;\n    "]},"page":"26","randomQuestions":[{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"How can I tell if a DOM element is visible in the current viewport?","slug":"how-can-i-tell-if-a-dom-element-is-visible-in-the-current-viewport-1657388316510"},{"title":"Sort array of objects by string property value","slug":"sort-array-of-objects-by-string-property-value-1657384860090"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"Select first row in each GROUP BY group?","slug":"select-first-row-in-each-group-by-group-1657384809388"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"What is the difference between #include <filename> and #include \"filename\"?","slug":"what-is-the-difference-between-include-lessfilenamegreater-and-include-\"filename\"-1657388489547"},{"title":"How to remove items from a list while iterating?","slug":"how-to-remove-items-from-a-list-while-iterating-1657384496375"},{"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093"},{"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432"},{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"How to fix java.lang.UnsupportedClassVersionError: Unsupported major.minor version","slug":"how-to-fix-java.lang.unsupportedclassversionerror:-unsupported-major.minor-version-1657384863422"},{"title":"Split array into chunks","slug":"split-array-into-chunks-1657387896420"},{"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935"},{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"}]},"__N_SSG":true}