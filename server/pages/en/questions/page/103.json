{"pageProps":{"data":{"count":610,"rows":[{"id":100,"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026","postType":"QUESTION","createdAt":"2022-07-09T16:36:41.000Z","updatedAt":"2022-07-09T16:36:41.000Z","tags":[]},{"id":99,"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444","postType":"QUESTION","createdAt":"2022-07-09T16:36:37.000Z","updatedAt":"2022-07-09T16:36:37.000Z","tags":[{"id":364,"name":"pdo","slug":"pdo","createdAt":"2022-07-09T16:36:37.000Z","updatedAt":"2022-07-09T16:36:37.000Z","Questions_Tags":{"questionId":99,"tagId":364}}]},{"id":98,"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944","postType":"QUESTION","createdAt":"2022-07-09T16:36:33.000Z","updatedAt":"2022-07-09T16:36:33.000Z","tags":[]},{"id":97,"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912","postType":"QUESTION","createdAt":"2022-07-09T16:36:30.000Z","updatedAt":"2022-07-09T16:36:30.000Z","tags":[{"id":355,"name":"layout","slug":"layout","createdAt":"2022-07-09T16:36:31.000Z","updatedAt":"2022-07-09T16:36:31.000Z","Questions_Tags":{"questionId":97,"tagId":355}},{"id":356,"name":"jtable","slug":"jtable","createdAt":"2022-07-09T16:36:31.000Z","updatedAt":"2022-07-09T16:36:31.000Z","Questions_Tags":{"questionId":97,"tagId":356}},{"id":357,"name":"layout-manager","slug":"layout-manager","createdAt":"2022-07-09T16:36:31.000Z","updatedAt":"2022-07-09T16:36:31.000Z","Questions_Tags":{"questionId":97,"tagId":357}},{"id":358,"name":"null-layout-manager","slug":"null-layout-manager","createdAt":"2022-07-09T16:36:31.000Z","updatedAt":"2022-07-09T16:36:31.000Z","Questions_Tags":{"questionId":97,"tagId":358}}]},{"id":96,"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888","postType":"QUESTION","createdAt":"2022-07-09T16:36:27.000Z","updatedAt":"2022-07-09T16:36:27.000Z","tags":[]}]},"answers":{"96":["\n&lt;p&gt;I think you want something like the following.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-container&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.row&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: auto;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid blue;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-item&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: tomato;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2em&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; \n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;See demo at: &lt;a href=&quot;http://jsfiddle.net/audetwebdesign/tFscL/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/audetwebdesign/tFscL/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Your &lt;code&gt;.flex-item&lt;/code&gt; elements should be block level (&lt;code&gt;div&lt;/code&gt; instead of &lt;code&gt;span&lt;/code&gt;) if you want the height and top/bottom padding to work properly.&lt;/p&gt;\n&lt;p&gt;Also, on &lt;code&gt;.row&lt;/code&gt;, set the width to &lt;code&gt;auto&lt;/code&gt; instead of &lt;code&gt;100%&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Your &lt;code&gt;.flex-container&lt;/code&gt; properties are fine.&lt;/p&gt;\n&lt;p&gt;If you want the &lt;code&gt;.row&lt;/code&gt; to be centered vertically in the view port, assign 100% height to &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;, and also zero out the &lt;code&gt;body&lt;/code&gt; margins.&lt;/p&gt;\n&lt;p&gt;Note that &lt;code&gt;.flex-container&lt;/code&gt; needs a height to see the vertical alignment effect, otherwise, the container computes the minimum height needed to enclose the content, which is less than the view port height in this example.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Footnote:&lt;/strong&gt;&lt;br&gt;\nThe &lt;code&gt;flex-flow&lt;/code&gt;, &lt;code&gt;flex-direction&lt;/code&gt;, &lt;code&gt;flex-wrap&lt;/code&gt; properties could have made this design easier to implement. I think that the &lt;code&gt;.row&lt;/code&gt; container is not needed unless you want to add some styling around the elements (background image, borders and so on).&lt;/p&gt;\n&lt;p&gt;A useful resource is: &lt;a href=&quot;http://demo.agektmr.com/flexbox/&quot; rel=&quot;noreferrer&quot;&gt;http://demo.agektmr.com/flexbox/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;How to Center Elements Vertically and Horizontally in Flexbox&lt;/h2&gt;\n\n&lt;p&gt;Below are two general centering solutions.&lt;/p&gt;\n\n&lt;p&gt;One for vertically-aligned flex items (&lt;code&gt;flex-direction: column&lt;/code&gt;) and the other for horizontally-aligned flex items (&lt;code&gt;flex-direction: row&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;In both cases the height of the centered divs can be variable, undefined, unknown, whatever. The height of the centered divs doesn&apos;t matter.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here&apos;s the HTML for both:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- flex container --&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bluebox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- flex item --&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;DIV #1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- flex item --&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;DIV #2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; (excluding decorative styles)&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;When flex items are stacked vertically:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;#container {\n    display: flex;           /* establish flex container */\n    flex-direction: column;  /* make main axis vertical */\n    justify-content: center; /* center items vertically, in this case */\n    align-items: center;     /* center items horizontally, in this case */\n    height: 300px;\n}\n\n.box {\n    width: 300px;\n    margin: 5px;\n    text-align: center;     /* will center text in &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;, which is not a flex item */\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/9Jbjt.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/9Jbjt.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/8o29y7pd/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;DEMO&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;When flex items are stacked horizontally:&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Adjust the &lt;code&gt;flex-direction&lt;/code&gt; rule from the code above.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;#container {\n    display: flex;\n    flex-direction: row;     /* make main axis horizontal (default setting) */\n    justify-content: center; /* center items horizontally, in this case */\n    align-items: center;     /* center items vertically, in this case */\n    height: 300px;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ccTOU.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ccTOU.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/8o29y7pd/3/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;DEMO&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Centering the content of the flex items&lt;/h3&gt;\n\n&lt;p&gt;The scope of a &lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/#flex-containers&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;flex formatting context&lt;/em&gt;&lt;/a&gt; is limited to a parent-child relationship. Descendants of a flex container beyond the children do not participate in flex layout and will ignore flex properties. Essentially, flex properties are not inheritable beyond the children.&lt;/p&gt;\n\n&lt;p&gt;Hence, you will always need to apply &lt;code&gt;display: flex&lt;/code&gt; or &lt;code&gt;display: inline-flex&lt;/code&gt; to a parent element in order to apply flex properties to the child.&lt;/p&gt;\n\n&lt;p&gt;In order to vertically and/or horizontally center text or other content contained in a flex item, make the item a (nested) flex container, and repeat the centering rules.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.box {\n    display: flex;\n    justify-content: center;\n    align-items: center;        /* for single line flex container */\n    align-content: center;      /* for multi-line flex container */\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More details here: &lt;a href=&quot;https://stackoverflow.com/q/25311541/3597276&quot;&gt;How to vertically align text inside a flexbox?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively, you can apply &lt;code&gt;margin: auto&lt;/code&gt; to the content element of the flex item.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;p { margin: auto; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Learn about flex &lt;code&gt;auto&lt;/code&gt; margins here: &lt;a href=&quot;https://stackoverflow.com/a/33856609/3597276&quot;&gt;Methods for Aligning Flex Items&lt;/a&gt; (see box#56).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Centering multiple lines of flex items&lt;/h3&gt;\n\n&lt;p&gt;When a flex container has multiple lines (due to wrapping) the &lt;code&gt;align-content&lt;/code&gt; property will be necessary for cross-axis alignment.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;From the spec:&lt;/em&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/#align-content-property&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;8.4. Packing Flex Lines: the &lt;code&gt;align-content&lt;/code&gt;\n  property&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;align-content&lt;/code&gt; property aligns a flex containers lines within the\n  flex container when there is extra space in the cross-axis, similar to\n  how &lt;code&gt;justify-content&lt;/code&gt; aligns individual items within the main-axis.\n  &lt;em&gt;Note, this property has no effect on a single-line flex container.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;More details here: &lt;a href=&quot;https://stackoverflow.com/q/42613359/3597276&quot;&gt;How does flex-wrap work with align-self, align-items and align-content?&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Browser support&lt;/h3&gt;\n\n&lt;p&gt;Flexbox is supported by all major browsers, &lt;a href=&quot;http://caniuse.com/#search=flex&quot; rel=&quot;noreferrer&quot;&gt;except IE &amp;lt; 10&lt;/a&gt;. Some recent browser versions, such as Safari 8 and IE10, require &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix&quot; rel=&quot;noreferrer&quot;&gt;vendor prefixes&lt;/a&gt;. For a quick way to add prefixes use &lt;a href=&quot;https://autoprefixer.github.io/&quot; rel=&quot;noreferrer&quot;&gt;Autoprefixer&lt;/a&gt;. More details in &lt;a href=&quot;https://stackoverflow.com/a/35137869/3597276&quot;&gt;this answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Centering solution for older browsers&lt;/h3&gt;\n\n&lt;p&gt;For an alternative centering solution using CSS table and positioning properties see this answer: &lt;a href=&quot;https://stackoverflow.com/a/31977476/3597276&quot;&gt;https://stackoverflow.com/a/31977476/3597276&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Add &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to the container element of whatever you want to center. Documentation:\n &lt;a href=&quot;https://developer.mozilla.org/de/docs/Web/CSS/justify-content&quot; rel=&quot;noreferrer&quot;&gt;justify-content&lt;/a&gt; and \n&lt;a href=&quot;https://developer.mozilla.org/de/docs/Web/CSS/align-items&quot; rel=&quot;noreferrer&quot;&gt;align-items&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can make use of&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;display: flex;\nalign-items: center;\njustify-content: center;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;on your parent component&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/sBAyt.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/sBAyt.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Don&apos;t forgot to use important browsers specific attributes:&lt;/p&gt;\n\n&lt;p&gt;align-items: center; --&amp;gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;-webkit-box-align: center;\n-moz-box-align: center;\n-ms-flex-align: center;\n-webkit-align-items: center;\nalign-items: center;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;justify-content: center; --&amp;gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;-webkit-box-pack: center;\n-moz-box-pack: center;\n-ms-flex-pack: center;\n-webkit-justify-content: center;\njustify-content: center;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could read this two links for better understanding flex:\n &lt;a href=&quot;http://css-tricks.com/almanac/properties/j/justify-content/&quot;&gt;http://css-tricks.com/almanac/properties/j/justify-content/&lt;/a&gt;  and\n &lt;a href=&quot;http://ptb2.me/flexbox/&quot;&gt;http://ptb2.me/flexbox/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Good Luck.&lt;/p&gt;\n    ","\n&lt;p&gt;1 - Set CSS on parent div to &lt;code&gt;display: flex;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;2 - Set CSS on parent div to &lt;code&gt;flex-direction: column;&lt;/code&gt;&lt;br&gt; &lt;em&gt;Note that this will make all content within that div line up top to bottom.  This will work best if the parent div only contains the child and nothing else.&lt;/em&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;3 - Set CSS on parent div to &lt;code&gt;justify-content: center;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is an example of what the CSS will look like:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.parentDivClass {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Use this:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;   &lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n   }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for some HTML markup like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt; abc &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; something &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;   &lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n      &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n   }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt; abc &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; something &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;diplay: flex;&lt;/code&gt; for it&apos;s container and &lt;code&gt;margin:auto;&lt;/code&gt; for it&apos;s item works perfect.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You have to setup the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; to see the effect.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#container&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/*width needs to be setup*/&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/*height needs to be setup*/&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto; &lt;span class=&quot;hljs-comment&quot;&gt;/*These will make the item in center*/&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#CCC&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;CENTER&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;margin: auto&lt;/code&gt; works &quot;perfectly&quot; with flexbox i.e. it allows to center item vertically and horizontally.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    \n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: green;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;JS&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;  \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;If you need to center a text in a link this will do the trick:&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: yellow;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center; &lt;span class=&quot;hljs-comment&quot;&gt;/* only important for multiple lines */&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: silver;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt; solid blue;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;text&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;text with two lines&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/Q3n7s.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Q3n7s.png&quot; alt=&quot;Code&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;CODE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;HTML:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;rows&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;  \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;CSS:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;html, body {\n  height: 100%;  \n}\n\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\n\n.rows {\n  display: flex;\n  flex-direction: column;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;flex-container&lt;/code&gt; div is used to center vertically and horizontally your &lt;code&gt;rows&lt;/code&gt; div, and &lt;code&gt;rows&lt;/code&gt; div is used to group your &quot;items&quot; and ordering them in a column based one.&lt;/p&gt;\n    ","\n&lt;p&gt;You can add &lt;code&gt;flex-direction:column&lt;/code&gt; to &lt;strong&gt;flex-container&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.flex-container {\n  flex-direction: column;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Add &lt;strong&gt;display:inline-block&lt;/strong&gt; to &lt;strong&gt;flex-item&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.flex-item {\n display: inline-block;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;because you added &lt;code&gt;width and height&lt;/code&gt; has no effect on this element since it has a display of &lt;code&gt;inline&lt;/code&gt;. Try adding &lt;code&gt;display:inline-block&lt;/code&gt; or &lt;code&gt;display:block&lt;/code&gt;.&lt;/strong&gt; Learn more about &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/width&quot; rel=&quot;nofollow noreferrer&quot;&gt;width&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/height&quot; rel=&quot;nofollow noreferrer&quot;&gt;height&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Also add to &lt;strong&gt;row&lt;/strong&gt; class( you are given &lt;strong&gt;row{}&lt;/strong&gt; not taken as style)&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.row{\n  width:100%;\n  margin:0 auto;\n  text-align:center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Working Demo in Row :&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;:center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;:column;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.row&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;:center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-item&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: tomato;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Working Demo in Column :&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.row&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-item&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: tomato;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Hope this will help.&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n}\nrow {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.flex-item&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: tomato;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;150px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;a href=&quot;http://www.css.plus&quot; rel=&quot;nofollow&quot;&gt;CSS+&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXTENDER&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;PADDER-CENTER&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;contentEditable&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Edit this text...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;take a look &lt;a href=&quot;http://codepen.io/hicTech/pen/emvMBw&quot; rel=&quot;nofollow&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;\n    "],"97":["\n&lt;h1&gt;Nested/Combination Layout Example&lt;/h1&gt;\n\n&lt;p&gt;The Java Tutorial has comprehensive information on using layout managers. See the &lt;a href=&quot;http://download.oracle.com/javase/tutorial/uiswing/layout/index.html&quot;&gt;Laying Out Components Within a Container&lt;/a&gt; lesson for further details.&lt;/p&gt;\n\n&lt;p&gt;One aspect of layouts that is &lt;em&gt;not&lt;/em&gt; covered well by the tutorial is that of nested layouts, putting one layout inside another to get complex effects.&lt;/p&gt;\n\n&lt;p&gt;The following code puts a variety of components into a frame to demonstrate how to use nested layouts.  All the layouts that are explicitly set are shown as a titled-border for the panel on which they are used.&lt;/p&gt;\n\n&lt;p&gt;Notable aspects of the code are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;There is a combo-box to change PLAF (Pluggable Look and Feel) at run-time.&lt;/li&gt;\n&lt;li&gt;The GUI is expandable to the user&apos;s need.&lt;/li&gt;\n&lt;li&gt;The image in the bottom of the split-pane is centered in the scroll-pane.&lt;/li&gt;\n&lt;li&gt;The label instances on the left are dynamically added using the button.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Nimbus PLAF&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/RljPH.png&quot; width=&quot;681&quot; height=&quot;580&quot; title=&quot;GUI screen shot with Nimbus PLAF&quot;&gt;&lt;/p&gt;\n\n&lt;h2&gt;NestedLayoutExample.java&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.image.BufferedImage;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.event.ActionListener;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.event.ActionEvent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.table.DefaultTableModel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.border.TitledBorder;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** A short example of a nested layout that can change PLAF at runtime.\nThe TitledBorder of each JPanel shows the layouts explicitly set.\n&lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Andrew Thompson\n&lt;span class=&quot;hljs-doctag&quot;&gt;@version&lt;/span&gt; 2011-04-12 */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NestedLayoutExample&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nested Layout Example&quot;&lt;/span&gt;);\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gui&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BorderLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n                gui.setBorder( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TitledBorder&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BorderLayout(5,5)&quot;&lt;/span&gt;) );\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;//JToolBar tb = new JToolBar();&lt;/span&gt;\n                &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;plafComponents&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlowLayout&lt;/span&gt;(FlowLayout.RIGHT, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\n                plafComponents.setBorder(\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TitledBorder&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;FlowLayout(FlowLayout.RIGHT, 3,3)&quot;&lt;/span&gt;) );\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; UIManager.LookAndFeelInfo[] plafInfos =\n                    UIManager.getInstalledLookAndFeels();\n                String[] plafNames = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[plafInfos.length];\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ii=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; ii&amp;lt;plafInfos.length; ii++) {\n                    plafNames[ii] = plafInfos[ii].getName();\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JComboBox&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;plafChooser&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JComboBox&lt;/span&gt;(plafNames);\n                plafComponents.add(plafChooser);\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JCheckBox&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JCheckBox&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pack on PLAF change&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n                plafComponents.add(pack);\n\n                plafChooser.addActionListener( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;(){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent ae)&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; plafChooser.getSelectedIndex();\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                            UIManager.setLookAndFeel(\n                                plafInfos[index].getClassName() );\n                            SwingUtilities.updateComponentTreeUI(frame);\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pack.isSelected()) {\n                                frame.pack();\n                                frame.setMinimumSize(frame.getSize());\n                            }\n                        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                } );\n\n                gui.add(plafComponents, BorderLayout.NORTH);\n\n                &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dynamicLabels&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BorderLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n                dynamicLabels.setBorder(\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TitledBorder&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BorderLayout(4,4)&quot;&lt;/span&gt;) );\n                gui.add(dynamicLabels, BorderLayout.WEST);\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\n                labels.setBorder(\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TitledBorder&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GridLayout(0,2,3,3)&quot;&lt;/span&gt;) );\n\n                &lt;span class=&quot;hljs-type&quot;&gt;JButton&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;addNew&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Add Another Label&quot;&lt;/span&gt;);\n                dynamicLabels.add( addNew, BorderLayout.NORTH );\n                addNew.addActionListener( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;(){\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;labelCount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent ae)&lt;/span&gt; {\n                        labels.add( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Label &quot;&lt;/span&gt; + ++labelCount) );\n                        frame.validate();\n                    }\n                } );\n\n                dynamicLabels.add( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(labels), BorderLayout.CENTER );\n\n                String[] header = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value&quot;&lt;/span&gt;};\n                String[] a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n                String[] names = System.getProperties().\n                    stringPropertyNames().toArray(a);\n                String[][] data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[names.length][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ii=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; ii&amp;lt;names.length; ii++) {\n                    data[ii][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = names[ii];\n                    data[ii][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = System.getProperty(names[ii]);\n                }\n                &lt;span class=&quot;hljs-type&quot;&gt;DefaultTableModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DefaultTableModel&lt;/span&gt;(data, header);\n                &lt;span class=&quot;hljs-type&quot;&gt;JTable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;(model);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// 1.6+&lt;/span&gt;\n                    table.setAutoCreateRowSorter(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception continuewithNoSort) {\n                }\n                &lt;span class=&quot;hljs-type&quot;&gt;JScrollPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tableScroll&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(table);\n                &lt;span class=&quot;hljs-type&quot;&gt;Dimension&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tablePreferred&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tableScroll.getPreferredSize();\n                tableScroll.setPreferredSize(\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dimension&lt;/span&gt;(tablePreferred.width, tablePreferred.height/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) );\n\n                &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;imagePanel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridBagLayout&lt;/span&gt;());\n                imagePanel.setBorder(\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TitledBorder&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GridBagLayout()&quot;&lt;/span&gt;) );\n\n                &lt;span class=&quot;hljs-type&quot;&gt;BufferedImage&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedImage&lt;/span&gt;(\n                    &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,BufferedImage.TYPE_INT_ARGB);\n                &lt;span class=&quot;hljs-type&quot;&gt;Graphics2D&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; bi.createGraphics();\n                &lt;span class=&quot;hljs-type&quot;&gt;GradientPaint&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GradientPaint&lt;/span&gt;(\n                    &lt;span class=&quot;hljs-number&quot;&gt;20f&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20f&lt;/span&gt;,Color.red, &lt;span class=&quot;hljs-number&quot;&gt;180f&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;180f&lt;/span&gt;,Color.yellow);\n                g.setPaint(gp);\n                g.fillRect(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);\n                &lt;span class=&quot;hljs-type&quot;&gt;ImageIcon&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageIcon&lt;/span&gt;(bi);\n                &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;imageLabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(ii);\n                imagePanel.add( imageLabel, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; );\n\n                &lt;span class=&quot;hljs-type&quot;&gt;JSplitPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;splitPane&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSplitPane&lt;/span&gt;(\n                    JSplitPane.VERTICAL_SPLIT,\n                    tableScroll,\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(imagePanel));\n                gui.add( splitPane, BorderLayout.CENTER );\n\n                frame.setContentPane(gui);\n\n                frame.pack();\n\n                frame.setLocationRelativeTo(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// 1.6+&lt;/span&gt;\n                    frame.setLocationByPlatform(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n                    frame.setMinimumSize(frame.getSize());\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Throwable ignoreAndContinue) {\n                }\n\n                frame.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            }\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Other Screen Shots&lt;/h2&gt;\n\n&lt;h3&gt;Windows PLAF&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/fHnCI.png&quot; width=&quot;681&quot; height=&quot;580&quot; title=&quot;GUI screen shot with Windows PLAF&quot;&gt;&lt;/p&gt;\n\n&lt;h3&gt;Mac OS X Aqua PLAF&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Jaqap.png&quot; width=&quot;681&quot; height=&quot;580&quot; title=&quot;GUI screen shot with Aqua PLAF&quot;&gt;&lt;/p&gt;\n\n&lt;h3&gt;Ubuntu GTK+ PLAF&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/521zz.png&quot; width=&quot;681&quot; height=&quot;580&quot; title=&quot;GUI screen shot with GTK+ PLAF&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Don&apos;t use a null layout.  Learn to use LayoutManagers:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://download.oracle.com/javase/tutorial/uiswing/layout/using.html&quot; rel=&quot;noreferrer&quot;&gt;http://download.oracle.com/javase/tutorial/uiswing/layout/using.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;LayoutManagers allow you to properly handle things window resizing or dynamic component counts.  They might seem intimidating at first, but they are worth the effort to learn.&lt;/p&gt;\n    ","\n&lt;p&gt;As I can remember, the &lt;strong&gt;null&lt;/strong&gt; layout means an absolute position so it will be pretty hard you to count the X point for your JTable left upper corner location. But if you just want to have all panel components one by one you can use FlowLayout() manager as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;JPanel panel=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlowLayout&lt;/span&gt;());\npanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;aComponent&lt;/span&gt;());\npanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;bComponent&lt;/span&gt;());\npanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you need to fill the panel you should use GridLayout() as...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,y=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\nJPanel panel=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridLayout&lt;/span&gt;(y,x));\npanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;aComponent&lt;/span&gt;());\npanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;bComponent&lt;/span&gt;());\npanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Good luck&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using null layout manager you always need to set the bounds of a component.\nThat is the problem in your case.&lt;/p&gt;\n\n&lt;p&gt;You should do what everyone suggest here and go and use some layout manager believe they save time.\nGo and check out the tutorial in @jzd&apos;s post.&lt;/p&gt;\n\n&lt;p&gt;Enjoy, Boro.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt; should be added into the &lt;code&gt;JScrollPane&lt;/code&gt; which actually should be added into the &lt;code&gt;JPanel&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;JPanel&lt;/code&gt; should have some layout manager.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t care about the precision of components size you can use pure &lt;code&gt;BorderLayout&lt;/code&gt; and combine it with &lt;code&gt;FlowLayout&lt;/code&gt; and &lt;code&gt;GridLayout&lt;/code&gt;. if you need precision - use jgoodies &lt;code&gt;FormLayout&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;FormLayout&lt;/code&gt; is really tricky one, but you can play a little with &lt;code&gt;WindowBuilder&lt;/code&gt; (which is embedded into Eclipse) and a look at the code it generates. It may look complicated but it is just an ignorance.&lt;/p&gt;\n\n&lt;p&gt;Good luck. &lt;/p&gt;\n    ","\n&lt;p&gt;First, you should seriously consider other Layout managers, for example the BorderLayoutManager (new JPanel(new BorderLayout())) is a good start. &lt;/p&gt;\n\n&lt;p&gt;Also when designing your dialog, remember that you can and should &lt;strong&gt;nest your layouts&lt;/strong&gt;: one JPanel inside another JPanel (e.g. a GridLayout inside a BorderLayout). Please note: a &apos;good&apos; dialog should &lt;strong&gt;resize properly&lt;/strong&gt;, so that if the user resizes your Frame, you want to automatically extend your information objects such as your table, and not show large areas of JPanel background. That&apos;s something you cannot achieve with a NullLayout.&lt;/p&gt;\n\n&lt;p&gt;But there are probably cases - somewhere in this big world - where a NullLayout is just the thing. So here&apos;s an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.Dimension;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JFrame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JPanel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JScrollPane;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JTable;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.table.DefaultTableModel;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTableInNullLayout&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] argv)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception {\n\n      &lt;span class=&quot;hljs-type&quot;&gt;DefaultTableModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DefaultTableModel&lt;/span&gt;(\n          &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[][] { { &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;123&quot;&lt;/span&gt;} , {&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;456&quot;&lt;/span&gt;} }, \n          &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt; } );\n\n      &lt;span class=&quot;hljs-type&quot;&gt;JTable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;(model);\n\n      &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-type&quot;&gt;JScrollPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scroll&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(t);\n      scroll.setBounds( &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; ); &lt;span class=&quot;hljs-comment&quot;&gt;// x, y, width, height&lt;/span&gt;\n      panel.add(scroll);\n\n      &lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;();\n      frame.add(panel);\n      frame.setPreferredSize( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dimension&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));\n      frame.pack();\n      frame.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When a component have a &quot;null&quot; layout, you have to manage the layout by yourself, that means you have to calculate the dimensions and locations for the children of the component to decide where they are drawn. Quite tedious unless it is absolutely necessary.&lt;/p&gt;\n\n&lt;p&gt;If you really want that fine-grained control, maybe try GridBagLayout first before going mudding with the UI arrangement.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;JTable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;(rowData, colData);\n&lt;span class=&quot;hljs-type&quot;&gt;JScrollPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scrollPane&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(table);\npanel.add(scrollPane, BorderLayout.CENTER);\npanel.setSize(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;);\npanel.add(table);\npanel.setLocationRelativeTo(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\npanel.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope this helps.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sample Frame&quot;&lt;/span&gt;);\nframe.setSize(&lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;DefaultTableModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dfm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DefaultTableModel&lt;/span&gt;(data, columnNames);\n        &lt;span class=&quot;hljs-type&quot;&gt;JTable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;(dfm);\n        &lt;span class=&quot;hljs-type&quot;&gt;JScrollPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scrollPane&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(table);\n    panel.add(scrollPane);\nframe.add(panel);\nframe.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;table model depends on your requirement&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.setTitle(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sample&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BorderLayout&lt;/span&gt;());\n        &lt;span class=&quot;hljs-type&quot;&gt;WindowEvent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WindowEvent&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, WindowEvent.WINDOW_CLOSED);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.addWindowListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WindowAdapter&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;windowClosing&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WindowEvent we)&lt;/span&gt; {\n                System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n            }\n        }); \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Create columns names&lt;/span&gt;\n        String columnNames[] = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;FirstCol&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SecondCol&quot;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;ThirdCol&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FourthCol&quot;&lt;/span&gt; };\n        dataModel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DefaultTableModel&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; col &amp;lt; columnNames.length; col++) {\n            dataModel.addColumn(columnNames[col]);\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Create a new table instance&lt;/span&gt;\n        table = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;(dataModel);\n        table.setPreferredScrollableViewportSize(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dimension&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;));\n        table.setFillsViewportHeight(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        table.setShowGrid(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        table.setAutoscrolls(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Add the table to a scrolling pane&lt;/span&gt;\n        scrollPane = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(table,\n                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,\n                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        scrollPane.setPreferredSize(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dimension&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt;));\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jpResultPanel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        jpResultPanel.setBorder(BorderFactory.createTitledBorder(\n                BorderFactory.createEtchedBorder(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;Result&quot;&lt;/span&gt;,\n                TitledBorder.CENTER, TitledBorder.TOP));\n        jpResultPanel.add(scrollPane);\n        add(jpResultPanel);\n        pack();\n        setSize(&lt;span class=&quot;hljs-number&quot;&gt;720&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;720&lt;/span&gt;);\n        setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try this.&lt;/p&gt;\n    ","\n&lt;p&gt;You can make use of the following code. To add JTable to JPanel.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.setContentPane(panel);\npanel.setLayout(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\nString data[][] = {{&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DEF&quot;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;GHI&quot;&lt;/span&gt; }};\nString col[] = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sr. No&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;JTable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTable&lt;/span&gt;(data,col);\ntable.setBounds(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;);\npanel.add(table);\nsetVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\nsetSize(&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    "],"98":["\n&lt;h2&gt;Background: Whats an Optional?&lt;/h2&gt;\n&lt;p&gt;In Swift, &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Optional&amp;lt;Wrapped&amp;gt;&lt;/code&gt;&lt;/a&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Option_type&quot; rel=&quot;noreferrer&quot;&gt;option type&lt;/a&gt;: it can contain any value from the original (&quot;Wrapped&quot;) type, or no value at all (the special value &lt;code&gt;nil&lt;/code&gt;). An optional value must be &lt;strong&gt;unwrapped&lt;/strong&gt; before it can be used.&lt;/p&gt;\n&lt;p&gt;Optional is a &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html&quot; rel=&quot;noreferrer&quot;&gt;generic type&lt;/a&gt;, which means that &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt; are distinct types  the type inside &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is called the Wrapped type. Under the hood, an Optional is an &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html&quot; rel=&quot;noreferrer&quot;&gt;enum&lt;/a&gt; with two cases: &lt;code&gt;.some(Wrapped)&lt;/code&gt; and &lt;code&gt;.none&lt;/code&gt;, where &lt;code&gt;.none&lt;/code&gt; is equivalent to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Optionals can be declared using the named type &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;, or (most commonly) as a shorthand with a &lt;code&gt;?&lt;/code&gt; suffix.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anInt: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalInt: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anotherOptionalInt: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?  &lt;span class=&quot;hljs-comment&quot;&gt;// `nil` is the default when no value is provided&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aVerboseOptionalInt: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;&amp;gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// equivalent to `Int?`&lt;/span&gt;\n\nanOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// now this variable contains nil instead of an integer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Optionals are a simple yet powerful tool to express your assumptions while writing code. The compiler can use this information to prevent you from making mistakes. From &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html&quot; rel=&quot;noreferrer&quot;&gt;The Swift Programming Language&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Swift is a &lt;em&gt;type-safe&lt;/em&gt; language, which means the language helps you to be clear about the types of values your code can work with. If part of your code requires a &lt;code&gt;String&lt;/code&gt;, type safety prevents you from passing it an &lt;code&gt;Int&lt;/code&gt; by mistake. &lt;strong&gt;Likewise, type safety prevents you from accidentally passing an optional &lt;code&gt;String&lt;/code&gt; to a piece of code that requires a non-optional &lt;code&gt;String&lt;/code&gt;.&lt;/strong&gt; Type safety helps you catch and fix errors as early as possible in the development process.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Some other programming languages also have generic &lt;a href=&quot;https://en.wikipedia.org/wiki/Option_type&quot; rel=&quot;noreferrer&quot;&gt;option types&lt;/a&gt;: for example, &lt;a href=&quot;https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Maybe.html&quot; rel=&quot;noreferrer&quot;&gt;Maybe&lt;/a&gt; in Haskell, &lt;a href=&quot;https://doc.rust-lang.org/std/option/&quot; rel=&quot;noreferrer&quot;&gt;option&lt;/a&gt; in Rust, and &lt;a href=&quot;https://en.cppreference.com/w/cpp/utility/optional&quot; rel=&quot;noreferrer&quot;&gt;optional&lt;/a&gt; in C++17.&lt;/p&gt;\n&lt;p&gt;In programming languages &lt;em&gt;without&lt;/em&gt; option types, a particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Sentinel_value&quot; rel=&quot;noreferrer&quot;&gt;&quot;sentinel&quot; value&lt;/a&gt; is often used to indicate the absence of a valid value. In Objective-C, for example, &lt;code&gt;nil&lt;/code&gt; (the &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_pointer&quot; rel=&quot;noreferrer&quot;&gt;null pointer&lt;/a&gt;) represents the lack of an object. For primitive types such as &lt;code&gt;int&lt;/code&gt;, a null pointer can&apos;t be used, so you would need either a separate variable (such as &lt;code&gt;value: Int&lt;/code&gt; and &lt;code&gt;isValid: Bool&lt;/code&gt;) or a designated sentinel value (such as &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt;). These approaches are error-prone because it&apos;s easy to forget to check &lt;code&gt;isValid&lt;/code&gt; or to check for the sentinel value. Also, if a particular value is chosen as the sentinel, that means it can no longer be treated as a &lt;em&gt;valid&lt;/em&gt; value.&lt;/p&gt;\n&lt;p&gt;Option types such as Swift&apos;s &lt;code&gt;Optional&lt;/code&gt; solve these problems by introducing a special, separate &lt;code&gt;nil&lt;/code&gt; value (so you don&apos;t have to designate a sentinel value), and by leveraging the strong type system so the compiler can help you remember to check for nil when necessary.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Why did I get &lt;em&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value&lt;/em&gt;?&lt;/h2&gt;\n&lt;p&gt;In order to access an optionals value (if it has one at all), you need to &lt;strong&gt;unwrap&lt;/strong&gt; it. An optional value can be unwrapped safely or forcibly. If you force-unwrap an optional, and it &lt;em&gt;didn&apos;t&lt;/em&gt; have a value, your program will crash with the above message.&lt;/p&gt;\n&lt;p&gt;Xcode will show you the crash by highlighting a line of code. The problem occurs on this line.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/dQelz.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/dQelz.png&quot; alt=&quot;crashed line&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This crash can occur with two different kinds of force-unwrap:&lt;/p&gt;\n&lt;h3&gt;1. Explicit Force Unwrapping&lt;/h3&gt;\n&lt;p&gt;This is done with the &lt;code&gt;!&lt;/code&gt; operator on an optional. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; anOptionalString: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(anOptionalString&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- CRASH&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As &lt;code&gt;anOptionalString&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; here, you will get a crash on the line where you force unwrap it.&lt;/p&gt;\n&lt;h3&gt;2. Implicitly Unwrapped Optionals&lt;/h3&gt;\n&lt;p&gt;These are defined with  a &lt;code&gt;!&lt;/code&gt;, rather than a &lt;code&gt;?&lt;/code&gt; after the type.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; optionalDouble: &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;!   &lt;span class=&quot;hljs-comment&quot;&gt;// this value is implicitly unwrapped wherever it&apos;s used&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These optionals are assumed to contain a value. Therefore whenever you access an implicitly unwrapped optional, it will automatically be force unwrapped for you. If it doesnt contain a value, it will crash.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(optionalDouble) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- CRASH&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Fatal error: Unexpectedly found nil while &lt;strong&gt;implicitly&lt;/strong&gt; unwrapping an Optional value&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In order to work out which variable caused the crash, you can hold &lt;kbd&gt;&lt;/kbd&gt; while clicking to show the definition, where you might find the optional type.&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/zZmlK.gif&quot; width=&quot;300&quot;&gt;\n&lt;p&gt;IBOutlets, in particular, are usually implicitly unwrapped optionals. This is because your xib or storyboard will link up the outlets at runtime, &lt;em&gt;after&lt;/em&gt; initialization. You should therefore ensure that youre not accessing outlets before they&apos;re loaded in. You also should check that the connections are correct in your storyboard/xib file, otherwise the values will be &lt;code&gt;nil&lt;/code&gt; at runtime, and therefore crash when they are implicitly unwrapped. When fixing connections, try deleting the lines of code that define your outlets, then reconnect them.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;When should I ever force unwrap an Optional?&lt;/h2&gt;\n&lt;h3&gt;Explicit Force Unwrapping&lt;/h3&gt;\n&lt;p&gt;As a general rule, you should never explicitly force unwrap an optional with the &lt;code&gt;!&lt;/code&gt; operator. There may be cases where using &lt;code&gt;!&lt;/code&gt; is acceptable  but you should only ever be using it if you are 100% sure that the optional contains a value.&lt;/p&gt;\n&lt;p&gt;While there &lt;em&gt;may&lt;/em&gt; be an occasion where you can use force unwrapping, as you know for a &lt;em&gt;fact&lt;/em&gt; that an optional contains a value  there is not a &lt;em&gt;single&lt;/em&gt; place where you cannot safely unwrap that optional instead.&lt;/p&gt;\n&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;h3&gt;Implicitly Unwrapped Optionals&lt;/h3&gt;\n&lt;p&gt;These variables are designed so that you can defer their assignment until later in your code. It is &lt;em&gt;your&lt;/em&gt; responsibility to ensure they have a value before you access them. However, because they involve force unwrapping, they are still inherently unsafe  as they &lt;em&gt;assume&lt;/em&gt; your value is non-nil, even though assigning nil is valid.&lt;/p&gt;\n&lt;p&gt;You should only be using implicitly unwrapped optionals as a &lt;em&gt;last resort&lt;/em&gt;. If you can use a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID255&quot; rel=&quot;noreferrer&quot;&gt;lazy variable&lt;/a&gt;, or provide a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID206&quot; rel=&quot;noreferrer&quot;&gt;default value&lt;/a&gt; for a variable  you should do so instead of using an implicitly unwrapped optional.&lt;/p&gt;\n&lt;p&gt;However, there are a &lt;a href=&quot;https://stackoverflow.com/a/24583157/2976878&quot;&gt;few scenarios where implicitly unwrapped optionals are beneficial&lt;/a&gt;, and you are still able to use various ways of safely unwrapping them as listed below  but you should &lt;em&gt;always&lt;/em&gt; use them with due caution.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;How can I safely deal with Optionals?&lt;/h2&gt;\n&lt;p&gt;The simplest way to check whether an optional contains a value, is to compare it to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Contains a value!&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Doesnt contain a value.&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, 99.9% of the time when working with optionals, youll actually want to access the value it contains, if it contains one at all. To do this, you can use &lt;em&gt;Optional Binding&lt;/em&gt;.&lt;/p&gt;\n&lt;h3&gt;Optional Binding&lt;/h3&gt;\n&lt;p&gt;Optional Binding allows you to check if an optional contains a value  and allows you to assign the unwrapped value to a new variable or constant. It uses the syntax &lt;code&gt;if let x = anOptional {...}&lt;/code&gt; or &lt;code&gt;if var x = anOptional {...}&lt;/code&gt;, depending if you need to modify the value of the new variable after binding it.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Contains a value! It is &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;!&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Doesnt contain a number&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What this does is first check that the optional contains a value. If it &lt;em&gt;does&lt;/em&gt;, then the unwrapped value is assigned to  a new variable (&lt;code&gt;number&lt;/code&gt;)  which you can then freely use as if it were non-optional. If the optional &lt;em&gt;doesnt&lt;/em&gt; contain a value, then the else clause will be invoked, as you would expect.&lt;/p&gt;\n&lt;p&gt;Whats neat about optional binding, is you can unwrap multiple optionals at the same time. You can just separate the statements with a comma. The statement will succeed if all the optionals were unwrapped.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalInt : &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalString : &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt, &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalString {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;anOptionalInt contains a value: &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;. And so does anOptionalString, its: &lt;span class=&quot;hljs-subst&quot;&gt;\\(text)&lt;/span&gt;&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One or more of the optionals dont contain a value&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Another neat trick is that you can also use commas to check for a certain condition on the value, after unwrapping it.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt, number &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;anOptionalInt contains a value: &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;, and its greater than zero!&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The only catch with using optional binding within an if statement, is that you can only access the unwrapped value from within the scope of the statement. If you need access to the value from outside of the scope of the statement, you can use a &lt;em&gt;guard statement&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;A &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/if-statement&quot; rel=&quot;noreferrer&quot;&gt;guard statement&lt;/a&gt; allows you to define a condition for success  and the current scope will only continue executing if that condition is met. They are defined with the syntax &lt;code&gt;guard condition else {...}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So, to use them with an optional binding, you can do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;(Note that within the guard body, you &lt;strong&gt;must&lt;/strong&gt; use one of the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID135&quot; rel=&quot;noreferrer&quot;&gt;control transfer statements&lt;/a&gt; in order to exit the scope of the currently executing code).&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;anOptionalInt&lt;/code&gt; contains a value, it will be unwrapped and assigned to the new &lt;code&gt;number&lt;/code&gt; constant. The code &lt;em&gt;after&lt;/em&gt; the guard will then continue executing. If it doesnt contain a value  the guard will execute the code within the brackets, which will lead to transfer of control, so that the code immediately after will not be executed.&lt;/p&gt;\n&lt;p&gt;The real neat thing about guard statements is the unwrapped value is now available to use in code that follows the statement (as we know that future code can &lt;em&gt;only&lt;/em&gt; execute if the optional has a value). This is a great for eliminating &lt;a href=&quot;https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)&quot; rel=&quot;noreferrer&quot;&gt;pyramids of doom&lt;/a&gt; created by nesting multiple if statements.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;anOptionalInt contains a value, and its: &lt;span class=&quot;hljs-subst&quot;&gt;\\(number)&lt;/span&gt;!&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Guards also support the same neat tricks that the if statement supported, such as unwrapping multiple optionals at the same time and using the &lt;code&gt;where&lt;/code&gt; clause.&lt;/p&gt;\n&lt;p&gt;Whether you use an if or guard statement completely depends on whether any future code &lt;em&gt;requires&lt;/em&gt; the optional to contain a value.&lt;/p&gt;\n&lt;h3&gt;Nil Coalescing Operator&lt;/h3&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID72&quot; rel=&quot;noreferrer&quot;&gt;Nil Coalescing Operator&lt;/a&gt; is a nifty shorthand version of the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID71&quot; rel=&quot;noreferrer&quot;&gt;ternary conditional operator&lt;/a&gt;, primarily designed to convert optionals to non-optionals. It has the syntax &lt;code&gt;a ?? b&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; is an optional type and &lt;code&gt;b&lt;/code&gt; is the same type as &lt;code&gt;a&lt;/code&gt; (although usually non-optional).&lt;/p&gt;\n&lt;p&gt;It essentially lets you say If &lt;code&gt;a&lt;/code&gt; contains a value, unwrap it. If it doesnt then return &lt;code&gt;b&lt;/code&gt; instead. For example, you could use it like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will define a &lt;code&gt;number&lt;/code&gt; constant of &lt;code&gt;Int&lt;/code&gt; type, that will either contain the value of &lt;code&gt;anOptionalInt&lt;/code&gt;, if it contains a value, or &lt;code&gt;0&lt;/code&gt; otherwise.&lt;/p&gt;\n&lt;p&gt;Its just shorthand for:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalInt &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt; anOptionalInt&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Optional Chaining&lt;/h3&gt;\n&lt;p&gt;You can use &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245&quot; rel=&quot;noreferrer&quot;&gt;Optional Chaining&lt;/a&gt; in order to call a method or access a property on an optional. This is simply done by suffixing the variable name with a &lt;code&gt;?&lt;/code&gt; when using it.&lt;/p&gt;\n&lt;p&gt;For example, say we have a variable &lt;code&gt;foo&lt;/code&gt;, of type an optional &lt;code&gt;Foo&lt;/code&gt; instance.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo : &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt;?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we wanted to call a method on &lt;code&gt;foo&lt;/code&gt; that doesnt return anything, we can simply do:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.doSomethingInteresting()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;foo&lt;/code&gt; contains a value, this method will be called on it. If it doesnt, nothing bad will happen  the code will simply continue executing.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;(This is similar behaviour to sending messages to &lt;code&gt;nil&lt;/code&gt; in Objective-C)&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;This can therefore also be used to set properties as well as call methods. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.bar &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bar&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, nothing bad will happen here if &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. Your code will simply continue executing.&lt;/p&gt;\n&lt;p&gt;Another neat trick that optional chaining lets you do is check whether setting a property or calling a method was successful. You can do this by comparing the return value to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;(This is because an optional value will return &lt;code&gt;Void?&lt;/code&gt; rather than &lt;code&gt;Void&lt;/code&gt; on a method that doesnt return anything)&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.bar &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bar&lt;/span&gt;()) &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar was set successfully&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar wasnt set successfully&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, things become a little bit more tricky when trying to access properties or call methods that return a value. Because &lt;code&gt;foo&lt;/code&gt; is optional, anything returned from it will also be optional. To deal with this, you can either unwrap the optionals that get returned using one of the above methods  or unwrap &lt;code&gt;foo&lt;/code&gt; itself before accessing methods or calling methods that return values.&lt;/p&gt;\n&lt;p&gt;Also, as the name suggests, you can chain these statements together. This means that if &lt;code&gt;foo&lt;/code&gt; has an optional property &lt;code&gt;baz&lt;/code&gt;, which has a property &lt;code&gt;qux&lt;/code&gt;  you could write the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; optionalQux &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.baz&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.qux\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, because &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; are optional, the value returned from &lt;code&gt;qux&lt;/code&gt; will always be an optional regardless of whether &lt;code&gt;qux&lt;/code&gt; itself is optional.&lt;/p&gt;\n&lt;h3&gt;&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;An often underused feature with optionals is the ability to use the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; functions. These allow you to apply non-optional transforms to optional variables. If an optional has a value, you can apply a given transformation to it. If it doesnt have a value, it will remain &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For example, lets say you have an optional string:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; anOptionalString:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;By applying the &lt;code&gt;map&lt;/code&gt; function to it  we can use the &lt;code&gt;stringByAppendingString&lt;/code&gt; function in order to concatenate it to another string.&lt;/p&gt;\n&lt;p&gt;Because &lt;code&gt;stringByAppendingString&lt;/code&gt; takes a non-optional string argument, we cannot input our optional string directly. However, by using &lt;code&gt;map&lt;/code&gt;, we can use allow &lt;code&gt;stringByAppendingString&lt;/code&gt; to be used if &lt;code&gt;anOptionalString&lt;/code&gt; has a value.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalString:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n\nanOptionalString &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalString.map {unwrappedString &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;.stringByAppendingString(unwrappedString)\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(anOptionalString) &lt;span class=&quot;hljs-comment&quot;&gt;// Optional(&quot;foobar&quot;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, if &lt;code&gt;anOptionalString&lt;/code&gt; doesnt have a value, &lt;code&gt;map&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt;. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anOptionalString:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n\nanOptionalString &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anOptionalString.map {unwrappedString &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;.stringByAppendingString(unwrappedString)\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(anOptionalString) &lt;span class=&quot;hljs-comment&quot;&gt;// nil&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;flatMap&lt;/code&gt; works similarly to &lt;code&gt;map&lt;/code&gt;, except it allows you to return &lt;em&gt;another&lt;/em&gt; optional from within the closure body. This means you can input an optional into a process that requires a non-optional input, but can output an optional itself.&lt;/p&gt;\n&lt;h2&gt;&lt;code&gt;try!&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;Swift&apos;s error handling system can be safely used with &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508&quot; rel=&quot;noreferrer&quot;&gt;Do-Try-Catch&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; someThrowingFunc() \n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;someThrowingFunc()&lt;/code&gt; throws an error, the error will be safely caught in the &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; constant you see in the &lt;code&gt;catch&lt;/code&gt; block has not been declared by us - it&apos;s automatically generated by &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You can also declare &lt;code&gt;error&lt;/code&gt; yourself, it has the advantage of being able to cast it to a useful format, for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; someThrowingFunc()    \n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error.debugDescription)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;try&lt;/code&gt; this way is the proper way to try, catch and handle errors coming from throwing functions.&lt;/p&gt;\n&lt;p&gt;There&apos;s also &lt;code&gt;try?&lt;/code&gt; which absorbs the error:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; someThrowingFunc() {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cool&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// handle the failure, but there&apos;s no error information available&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But Swift&apos;s error handling system also provides a way to &quot;force try&quot; with &lt;code&gt;try!&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try!&lt;/span&gt; someThrowingFunc()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The concepts explained in this post also apply here: if an error is thrown, the application will crash.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;You should only ever use &lt;code&gt;try!&lt;/code&gt; if you can prove that its result will never fail in your context - and this is very rare.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Most of the time you will use the complete Do-Try-Catch system - and the optional one, &lt;code&gt;try?&lt;/code&gt;, in the rare cases where handling the error is not important.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Resources&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330&quot; rel=&quot;noreferrer&quot;&gt;Apple documentation on Swift Optionals&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/24583157/2976878&quot;&gt;When to use and when not to use implicitly unwrapped optionals&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/10209/my-app-crashed-now-what-part-1&quot; rel=&quot;noreferrer&quot;&gt;Learn how to debug an iOS app crash&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;TL;DR answer&lt;/h1&gt;\n&lt;p&gt;With &lt;a href=&quot;https://stackoverflow.com/a/24583157/1311272&quot;&gt;very few exceptions&lt;/a&gt;, this rule is golden:&lt;/p&gt;\n&lt;h1&gt;Avoid use of &lt;code&gt;!&lt;/code&gt;&lt;/h1&gt;\n&lt;h3&gt;Declare variable optional (&lt;code&gt;?&lt;/code&gt;), not implicitly unwrapped optionals (IUO) (&lt;code&gt;!&lt;/code&gt;)&lt;/h3&gt;\n&lt;p&gt;In other words, rather use:&lt;br&gt;\n&lt;code&gt;var nameOfDaughter: String?&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Instead of:&lt;br&gt;\n&lt;code&gt;var nameOfDaughter: String!&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;Unwrap optional variable using &lt;code&gt;if let&lt;/code&gt; or &lt;code&gt;guard let&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;Either unwrap variable like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nameOfDaughter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; nameOfDaughter {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My daughters name is: &lt;span class=&quot;hljs-subst&quot;&gt;\\(nameOfDaughter)&lt;/span&gt;&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nameOfDaughter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; nameOfDaughter &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My daughters name is: &lt;span class=&quot;hljs-subst&quot;&gt;\\(nameOfDaughter)&lt;/span&gt;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This answer was intended to be concise, &lt;a href=&quot;https://stackoverflow.com/a/32170457/1311272&quot;&gt;for full comprehension read accepted answer&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Resources&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://blog.timac.org/2017/0628-swift-banning-force-unwrapping-optionals/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Avoiding force unwrapping&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This question comes up &lt;strong&gt;ALL THE TIME&lt;/strong&gt; on SO. It&apos;s one of the first things that new Swift developers struggle with.&lt;/p&gt;\n&lt;h2&gt;Background:&lt;/h2&gt;\n&lt;p&gt;Swift uses the concept of &quot;Optionals&quot; to deal with values that could contain a value, or not. In other languages like C, you might store a value of 0 in a variable to indicate that it contains no value. However, what if 0 is a valid value? Then you might use -1. What if -1 is a valid value? And so on.&lt;/p&gt;\n&lt;p&gt;Swift optionals let you set up a variable of any type to contain either a valid value, or no value.&lt;/p&gt;\n&lt;p&gt;You put a question mark after the type when you declare a variable to mean (type x, or no value).&lt;/p&gt;\n&lt;p&gt;An optional is actually a container than contains either a variable of a given type, or nothing.&lt;/p&gt;\n&lt;p&gt;An optional needs to be &quot;unwrapped&quot; in order to fetch the value inside.&lt;/p&gt;\n&lt;p&gt;The &quot;!&quot; operator is a &quot;force unwrap&quot; operator. It says &quot;trust me. I know what I am doing. I guarantee that when this code runs, the variable will not contain nil.&quot; If you are wrong, you crash.&lt;/p&gt;\n&lt;p&gt;Unless you really &lt;strong&gt;do&lt;/strong&gt; know what you are doing, avoid the &quot;!&quot; force unwrap operator. It is probably the largest source of crashes for beginning Swift programmers.&lt;/p&gt;\n&lt;h2&gt;How to deal with optionals:&lt;/h2&gt;\n&lt;p&gt;There are lots of other ways of dealing with optionals that are safer. Here are some (not an exhaustive list)&lt;/p&gt;\n&lt;p&gt;You can use &quot;optional binding&quot; or &quot;if let&quot; to say &quot;if this optional contains a value, save that value into a new, non-optional variable. If the optional does not contain a value, skip the body of this if statement&quot;.&lt;/p&gt;\n&lt;p&gt;Here is an example of optional binding with our &lt;code&gt;foo&lt;/code&gt; optional:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo &lt;span class=&quot;hljs-comment&quot;&gt;//If let is called optional binding. {&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo is not nil&quot;&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo is nil&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the variable you define when you use optional biding only exists (is only &quot;in scope&quot;) in the body of the if statement.&lt;/p&gt;\n&lt;p&gt;Alternately, you could use a guard statement, which lets you exit your function if the variable is nil:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;aFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; input &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n  &lt;span class=&quot;hljs-comment&quot;&gt;//For the rest of the function newFoo is a non-optional var&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Guard statements were added in Swift 2. Guard lets you preserve the &quot;golden path&quot; through your code, and avoid ever-increasing levels of nested ifs that sometimes result from using &quot;if let&quot; optional binding.&lt;/p&gt;\n&lt;p&gt;There is also a construct called the &quot;nil coalescing operator&quot;. It takes the form &quot;optional_var ?? replacement_val&quot;. It returns a non-optional variable with the same type as the data contained in the optional. If the optional contains nil, it returns the value of the expression after the &quot;??&quot; symbol.&lt;/p&gt;\n&lt;p&gt;So you could use code like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;nil&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;??&quot; is the nil coalescing operator&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo = &lt;span class=&quot;hljs-subst&quot;&gt;\\(newFoo)&lt;/span&gt;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You could also use try/catch or guard error handling, but generally one of the other techniques above is cleaner.&lt;/p&gt;\n&lt;h2&gt;EDIT:&lt;/h2&gt;\n&lt;p&gt;Another, slightly more subtle gotcha with optionals is &quot;implicitly unwrapped optionals. When we declare foo, we could say:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In that case foo is still an optional, but you don&apos;t have to unwrap it to reference it.  That means any time you try to reference foo, you crash if it&apos;s nil.&lt;/p&gt;\n&lt;p&gt;So this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;!\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; upperFoo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; foo.capitalizedString\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will crash on reference to foo&apos;s capitalizedString property even though we&apos;re not force-unwrapping foo. the print looks fine, but it&apos;s not.&lt;/p&gt;\n&lt;p&gt;Thus you want to be really careful with implicitly unwrapped optionals.  (and perhaps even avoid them completely until you have a solid understanding of optionals.)&lt;/p&gt;\n&lt;p&gt;Bottom line: When you are first learning Swift, pretend the &quot;!&quot; character is not part of the language. It&apos;s likely to get you into trouble.&lt;/p&gt;\n    ","\n&lt;p&gt;Since the above answers clearly explains how to play safely with Optionals.\nI will try explain what Optionals are really in swift.&lt;/p&gt;\n\n&lt;p&gt;Another way to declare an optional variable is &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var i : Optional&amp;lt;Int&amp;gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;And Optional type is nothing but an enumeration with two cases, i.e &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Optional&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Wrapped&lt;/span&gt;&amp;gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;ExpressibleByNilLiteral&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; none \n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Wrapped&lt;/span&gt;)\n    .\n    .\n    .\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So to assign a nil to our variable &apos;i&apos;. We can do \n&lt;code&gt;var i = Optional&amp;lt;Int&amp;gt;.none&lt;/code&gt;\nor to assign a value, we will pass some value \n&lt;code&gt;var i = Optional&amp;lt;Int&amp;gt;.some(28)&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;According to swift, &apos;nil&apos; is the absence of value.\nAnd to create an instance initialized with &lt;code&gt;nil&lt;/code&gt; We have to conform to a protocol called &lt;code&gt;ExpressibleByNilLiteral&lt;/code&gt; and great if you guessed it, only &lt;code&gt;Optionals&lt;/code&gt; conform to &lt;code&gt;ExpressibleByNilLiteral&lt;/code&gt; and conforming to other types is discouraged.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ExpressibleByNilLiteral&lt;/code&gt; has a single method called &lt;code&gt;init(nilLiteral:)&lt;/code&gt; which initializes an instace with nil. You usually wont call this method and according to swift documentation it is discouraged to call this initializer directly as the compiler calls it whenever you initialize an Optional type with &lt;code&gt;nil&lt;/code&gt; literal.&lt;/p&gt;\n\n&lt;p&gt;Even myself has to wrap (no pun intended) my head around Optionals :D\n&lt;em&gt;Happy Swfting All&lt;/em&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;First, you should know what an Optional value is.\nYou can step to &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Swift Programming Language&lt;/a&gt; for detail.&lt;/p&gt;\n\n&lt;p&gt;Second, you should know the optional value has two statuses. One is the full value, and the other is a nil value. So before you implement an optional value, you should check which state it is.&lt;/p&gt;\n\n&lt;p&gt;You can use &lt;code&gt;if let ...&lt;/code&gt; or &lt;code&gt;guard let ... else&lt;/code&gt; and so on.&lt;/p&gt;\n\n&lt;p&gt;One other way, if you don&apos;t want to check the variable state before your implementation, you can also use &lt;code&gt;var buildingName = buildingName ?? &quot;buildingName&quot;&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;I had this error once when I was trying to set my Outlets values from the prepare for segue method as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;segue&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIStoryboardSegue&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; destination &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; segue.destination &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DestinationVC&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sender &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataItem&lt;/span&gt;{\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This line pops up the error&lt;/span&gt;\n            destination.nameLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; item.name\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I found out that I can&apos;t set the values of the destination controller outlets because the controller hasn&apos;t been loaded or initialized yet.&lt;/p&gt;\n\n&lt;p&gt;So I solved it this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;segue&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIStoryboardSegue&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; destination &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; segue.destination &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DestinationVC&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sender &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataItem&lt;/span&gt;{\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Created this method in the destination Controller to update its outlets after it&apos;s being initialized and loaded&lt;/span&gt;\n            destination.updateView(itemData:  item)\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Destination Controller:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// This variable to hold the data received to update the Label text after the VIEW DID LOAD&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Outlets&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nameLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do any additional setup after loading the view.&lt;/span&gt;\n    nameLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; name\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;itemDate&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;ObjectModel&lt;/span&gt;) {\n    name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; itemDate.name\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I hope this answer helps anyone out there with the same issue as I found the marked answer is great resource to the understanding of optionals and how they work but hasn&apos;t addressed the issue itself directly.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically you tried to use a nil value in places where Swift allows only non-nil ones, by telling the compiler to trust you that there will never be nil value there, thus allowing your app to compile.&lt;/p&gt;\n\n&lt;p&gt;There are several scenarios that lead to this kind of fatal error:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;forced unwraps:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; user &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someVariable&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;someVariable&lt;/code&gt; is nil, then you&apos;ll get a crash. By doing a force unwrap you moved the nil check responsibility from the compiler to you, basically by doing a forced unwrap you&apos;re guaranteeing to the compiler that you&apos;ll never have nil values there. And guess what it happens if somehow a nil value ends in in &lt;code&gt;someVariable&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;Solution? Use optional binding (aka if-let), do the variable processing there:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; user &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someVariable {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do your stuff&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;forced (down)casts:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myRectangle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someShape &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Rectangle&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here by force casting you tell the compiler to no longer worry, as you&apos;ll always have a &lt;code&gt;Rectangle&lt;/code&gt; instance there. And as long as that holds, you don&apos;t have to worry. The problems start when you or your colleagues from the project start circulating non-rectangle values.&lt;/p&gt;\n\n&lt;p&gt;Solution? Use optional binding (aka if-let), do the variable processing there:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myRectangle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someShape &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Rectangle&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// yay, I have a rectangle&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Implicitly unwrapped optionals. Let&apos;s assume you have the following class definition:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;!\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;() {\n        name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(unnamed)&quot;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nicerName&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mr/Ms &quot;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; name\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if no-one messes up with the &lt;code&gt;name&lt;/code&gt; property by setting it to &lt;code&gt;nil&lt;/code&gt;, then it works as expected, however if &lt;code&gt;User&lt;/code&gt; is initialized from a JSON that lacks the &lt;code&gt;name&lt;/code&gt; key, then you get the fatal error when trying to use the property.&lt;/p&gt;\n\n&lt;p&gt;Solution? Don&apos;t use them :) Unless you&apos;re 102% sure that the property will always have a non-nil value by the time it needs to be used. In most cases converting to an optional or non-optional will work. Making it non-optional will also result in the compiler helping you by telling the code paths you missed giving a value to that property&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Unconnected, or not yet connected, outlets. This is a particular case of scenario #3. Basically you have some XIB-loaded class that you want to use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SignInViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; emailTextField: &lt;span class=&quot;hljs-type&quot;&gt;UITextField&lt;/span&gt;!\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if you missed connecting the outlet from the XIB editor, then the app will crash as soon as you&apos;ll want to use the outlet.\nSolution? Make sure all outlets are connected. Or use the &lt;code&gt;?&lt;/code&gt; operator on them: &lt;code&gt;emailTextField?.text = &quot;my@email.com&quot;&lt;/code&gt;. Or declare the outlet as optional, though in this case the compiler will force you to unwrap it all over the code.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Values coming from Objective-C, and that don&apos;t have nullability annotations. Let&apos;s assume we have the following Objective-C class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyUser&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSObject&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;name;\n&lt;span class=&quot;hljs-meta&quot;&gt;@end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if no nullability annotations are specified (either explicitly or via &lt;code&gt;NS_ASSUME_NONNULL_BEGIN&lt;/code&gt;/&lt;code&gt;NS_ASSUME_NONNULL_END&lt;/code&gt;), then the &lt;code&gt;name&lt;/code&gt; property will be imported in Swift as &lt;code&gt;String!&lt;/code&gt; (an IUO - implicitly unwrapped optional). As soon as some swift code will want to use the value, it will crash if &lt;code&gt;name&lt;/code&gt; is nil.&lt;/p&gt;\n\n&lt;p&gt;Solution? Add nullability annotations to your Objective-C code. Beware though, the Objective-C compiler is a little bit permissive when it comes to nullability, you might end up with nil values, even if you explicitly marked them as &lt;code&gt;nonnull&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;This is more of a important comment and that why implicitly unwrapped optionals can be deceptive when it comes to debugging &lt;code&gt;nil&lt;/code&gt; values.&lt;/p&gt;\n\n&lt;p&gt;Think of the following code: \nIt compiles with no errors/warnings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c3.address.city\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yet at runtime it gives the following error: &lt;em&gt;Fatal error: Unexpectedly found nil while unwrapping an Optional value&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Can you tell me which object is &lt;code&gt;nil&lt;/code&gt;?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;You can&apos;t!&lt;/p&gt;\n\n&lt;p&gt;The full code would be: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NormalContact&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c3 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BadContact&lt;/span&gt;()\n\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c3.address.city &lt;span class=&quot;hljs-comment&quot;&gt;// compiler hides the truth from you and then you sudden get a crash&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NormalContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;(city: &lt;span class=&quot;hljs-string&quot;&gt;&quot;defaultCity&quot;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BadContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;!\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Address&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; city : &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Long story short by using &lt;code&gt;var address : Address!&lt;/code&gt; you&apos;re &lt;strong&gt;hiding&lt;/strong&gt; the possibility that a variable can be &lt;code&gt;nil&lt;/code&gt; from other readers. And when it crashes you&apos;re like &quot;what the hell?! my &lt;code&gt;address&lt;/code&gt; isn&apos;t an optional, so why am I crashing?!. &lt;/p&gt;\n\n&lt;p&gt;Hence it&apos;s better to write as such: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.city  &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR:  Fatal error: Unexpectedly found nil while unwrapping an Optional value &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Can you now tell me which object it is that was &lt;code&gt;nil&lt;/code&gt;?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;This time the code has been made more clear to you. You can rationalize and think that likely it&apos;s the &lt;code&gt;address&lt;/code&gt; parameter that was forcefully unwrapped. &lt;/p&gt;\n\n&lt;p&gt;The full code would be :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NormalContact&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;GoodContact&lt;/span&gt;()\n\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.city\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.city &lt;span class=&quot;hljs-comment&quot;&gt;// not compile-able. No deceiving by the compiler&lt;/span&gt;\n        c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address.city &lt;span class=&quot;hljs-comment&quot;&gt;// not compile-able. No deceiving by the compiler&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c2.address&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.city {  &lt;span class=&quot;hljs-comment&quot;&gt;// safest approach. But that&apos;s not what I&apos;m talking about here. &lt;/span&gt;\n            c1.address.city &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; city\n        }\n\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NormalContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;(city: &lt;span class=&quot;hljs-string&quot;&gt;&quot;defaultCity&quot;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GoodContact&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address : &lt;span class=&quot;hljs-type&quot;&gt;Address&lt;/span&gt;?\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Address&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; city : &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The errors &lt;code&gt;EXC_BAD_INSTRUCTION&lt;/code&gt; and &lt;code&gt;fatal error: unexpectedly found nil while implicitly unwrapping an Optional value&lt;/code&gt; appears the most when you have declared an &lt;code&gt;@IBOutlet&lt;/code&gt;, but not connected to the &lt;strong&gt;storyboard&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You should also learn about how &lt;strong&gt;Optionals&lt;/strong&gt; work, mentioned in other answers, but this is the only time that mostly appears to me.&lt;/p&gt;\n    ","\n&lt;p&gt;If you get this error in CollectionView try to create CustomCell file and Custom xib also.&lt;/p&gt;\n\n&lt;p&gt;add this code in ViewDidLoad() at mainVC.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nib &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UINib&lt;/span&gt;(nibName: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CustomnibName&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.collectionView.register(nib, forCellWithReuseIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;cell&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Xcode 12 iOS 14 Swift 5&lt;/p&gt;\n&lt;p&gt;My problem was the type of navigation as I called the vie controller direct without instantiating the storyboard so that&apos;s mean data was not set yet from the storyboard.&lt;/p&gt;\n&lt;p&gt;When you navigate, navigate with&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; homeViewController &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIStoryboard&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Main&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;).instantiateViewController(withIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;home&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeEventsViewController&lt;/span&gt;\n    homeViewController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.modalTransitionStyle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .crossDissolve\n    homeViewController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.modalPresentationStyle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .fullScreen\n    view.present(homeViewController &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;(), animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, completion: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hopefully it works :-)&lt;/p&gt;\n    ","\n&lt;p&gt;I came across this error while making a segue from a table view controller to a view controller because I had forgotten to specify the custom class name for the view controller in the main storyboard.&lt;/p&gt;\n\n&lt;p&gt;Something simple that is worth checking if all else looks ok&lt;/p&gt;\n    ","\n&lt;p&gt;If my case I set a variable to UILabel which was nil.&lt;/p&gt;\n&lt;p&gt;So I fixed it and thereafter it did not throw the error.&lt;/p&gt;\n&lt;p&gt;Code snippet&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ResultViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bmiValue&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(bmiValue)\n        resultLabel.text&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;bmiValue &lt;span class=&quot;hljs-comment&quot;&gt;//where bmiValue was nil , I fixed it and problem was solved&lt;/span&gt;\n\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;recaculateBmi&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIButton&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.dismiss(animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, completion: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n    }\n    \n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;in simple words\nyou are trying to use a value of the optional variable which is nil.\nquick fix could be use &lt;code&gt;guard&lt;/code&gt; or &lt;code&gt;if let&lt;/code&gt; instead of force unwrap like putting &lt;code&gt;!&lt;/code&gt; at the end of variable&lt;/p&gt;\n    ","\n&lt;p&gt;This is because you are trying to use a value which can possible be nil, but you decided you don&apos;t want to have to check it, but instead assume its set when you uses it and define it as !, there are different philosophies on use of variable set as force unwrap, some people are against there use at all, I personal think they are ok for things that will crash all the time and are simple to reason about, usually references to resource, like outlets to xib files, or uses of images with you app that are part of your assets, if these are not set up properly, you app is going to crash straight away, for a very obvious reason, you can get into difficult when the order of objects being created can be uncertain, and trying to reason solutions to this can be difficult, it usually means a bad design as even it you make them optional, calls to you optional variable may not ever be executed, some projects can demand use of force unwraps for security reasons, things like banking apps, because they want the app to crash rather then continue to work in an unplanned way.&lt;/p&gt;\n    "],"99":["\n&lt;p&gt;No, you can&apos;t use &lt;code&gt;mysql&lt;/code&gt; and &lt;code&gt;mysqli&lt;/code&gt; together.  They are separate APIs and the resources they create are incompatible with one another.&lt;/p&gt;\n\n&lt;p&gt;There is a &lt;code&gt;mysqli_close&lt;/code&gt;, though.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to give a general answer here about all three MYSQL API&apos;s with a reference:&lt;/p&gt;\n\n&lt;p&gt;You can&apos;t mix any of the three (&lt;a href=&quot;http://php.net/manual/en/book.mysql.php&quot;&gt;&lt;code&gt;mysql_*&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;&lt;code&gt;mysqli_*&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;&lt;code&gt;PDO&lt;/code&gt;&lt;/a&gt;) MYSQL API&apos;s from PHP together, it just doesn&apos;t work. It&apos;s even in the &lt;a href=&quot;http://php.net/manual/en/faq.databases.php#faq.databases.mysql.deprecated&quot;&gt;manual FAQ&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It is &lt;strong&gt;not possible to mix the extensions&lt;/strong&gt;. So, for example, passing a mysqli connection to PDO_MySQL or ext/mysql &lt;strong&gt;will not work&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You need to use the same MySQL API and its related functions, from connection to querying.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;http://php.net/manual/en/mysqlinfo.api.choosing.php&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Technically you can use as many separate connections as you want, while your problem is caused by a mere typo - you only cannot use resources from one extension with functions from another, which is quite obviously.&lt;/p&gt;\n\n&lt;p&gt;However, you &lt;strong&gt;should avoid multiple connections from the same script&lt;/strong&gt;, no matter from single API or different ones. As it will burden your database server and exhaust its resources. So, although technically you can, you shouldn&apos;t mix different extensions in your code, save for the short period of refactoring.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;MySQLi&lt;/code&gt; is a lot more secure than &lt;code&gt;MySQL&lt;/code&gt; which is anyway now deprecated. That&apos;s why you should stick with &lt;code&gt;MySQLi&lt;/code&gt; and also you can&apos;t mix them as they are both different.&lt;/p&gt;\n    "],"100":["\n&lt;h1&gt;Native deep cloning&lt;/h1&gt;\n&lt;p&gt;There&apos;s now a JS standard called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; rel=&quot;noreferrer&quot;&gt;&quot;structured cloning&quot;&lt;/a&gt;, that works experimentally in Node 11 and later, will land in browsers, and which has &lt;a href=&quot;https://www.npmjs.com/package/@ungap/structured-clone&quot; rel=&quot;noreferrer&quot;&gt;polyfills for existing systems&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If needed, loading the polyfill first:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; structuredClone &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;@ungap/structured-clone&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838&quot;&gt;this answer&lt;/a&gt; for more details.&lt;/p&gt;\n&lt;h1&gt;Older answers&lt;/h1&gt;\n&lt;h2&gt;Fast cloning with data loss - JSON.parse/stringify&lt;/h2&gt;\n&lt;p&gt;If you do not use &lt;code&gt;Date&lt;/code&gt;s, functions, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, a very simple one liner to deep clone an object is:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;JSON.parse(JSON.stringify(object))&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;string&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;nul&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(),  &lt;span class=&quot;hljs-comment&quot;&gt;// stringified&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;undef&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// lost&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;inf&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Infinity&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// forced to &apos;null&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;re&lt;/span&gt;: &lt;span class=&quot;hljs-regexp&quot;&gt;/.*/&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// lost&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Date object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(clone);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// result of .toISOString()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074&quot;&gt;Corban&apos;s answer&lt;/a&gt; for benchmarks.&lt;/p&gt;\n&lt;h2&gt;Reliable cloning using a library&lt;/h2&gt;\n&lt;p&gt;Since cloning objects is not trivial (complex types, circular references, function etc.), most major libraries provide function to clone objects. &lt;strong&gt;Don&apos;t reinvent the wheel&lt;/strong&gt; - if you&apos;re already using a library, check if it has an object cloning function. For example,&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;lodash - &lt;a href=&quot;https://lodash.com/docs#cloneDeep&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;cloneDeep&lt;/code&gt;&lt;/a&gt;; can be imported separately via the &lt;a href=&quot;https://www.npmjs.com/package/lodash.clonedeep&quot; rel=&quot;noreferrer&quot;&gt;lodash.clonedeep&lt;/a&gt; module and is probably your best choice if you&apos;re not already using a library that provides a deep cloning function&lt;/li&gt;\n&lt;li&gt;AngularJS - &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;jQuery - &lt;a href=&quot;https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;jQuery.extend(true, { }, oldObject)&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;.clone()&lt;/code&gt; only clones DOM elements&lt;/li&gt;\n&lt;li&gt;just library - &lt;a href=&quot;https://www.npmjs.com/package/just-clone&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;just-clone&lt;/code&gt;&lt;/a&gt;; Part of a library of zero-dependency npm modules that do just do one thing.\nGuilt-free utilities for every occasion.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;ES6 (&lt;em&gt;shallow&lt;/em&gt; copy)&lt;/h2&gt;\n&lt;p&gt;For completeness, note that ES6 offers two shallow copy mechanisms: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;noreferrer&quot;&gt;spread syntax&lt;/a&gt;.\nwhich copies values of all enumerable own properties from one object to another. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;A1&lt;/span&gt; = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;A2&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, &lt;span class=&quot;hljs-variable constant_&quot;&gt;A1&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;A3&lt;/span&gt; = {...&lt;span class=&quot;hljs-variable constant_&quot;&gt;A1&lt;/span&gt;};  &lt;span class=&quot;hljs-comment&quot;&gt;// Spread Syntax&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Checkout this benchmark: &lt;a href=&quot;http://jsben.ch/#/bWfk9&quot; rel=&quot;noreferrer&quot;&gt;http://jsben.ch/#/bWfk9&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In my previous tests where speed was a main concern I found &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to be the slowest way to deep clone an object (it is slower than &lt;a href=&quot;https://api.jquery.com/jQuery.extend/&quot; rel=&quot;noreferrer&quot;&gt;jQuery.extend&lt;/a&gt; with &lt;code&gt;deep&lt;/code&gt; flag set true by 10-20%).&lt;/p&gt;\n\n&lt;p&gt;jQuery.extend is pretty fast when the &lt;code&gt;deep&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt; (shallow clone). It is a good option, because it includes some extra logic for type validation and doesn&apos;t copy over undefined properties, etc., but this will also slow you down a little.&lt;/p&gt;\n\n&lt;p&gt;If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple &lt;code&gt;for (var i in obj)&lt;/code&gt; loop to clone your object while checking hasOwnProperty and it will be much much faster than jQuery.&lt;/p&gt;\n\n&lt;p&gt;Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object.&lt;/p&gt;\n\n&lt;p&gt;JavaScript trace engines suck at optimizing &lt;code&gt;for..in&lt;/code&gt; loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clonedObject = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;knownProp&lt;/span&gt;: obj.&lt;span class=&quot;hljs-property&quot;&gt;knownProp&lt;/span&gt;,\n  ..\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Beware using the &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; method on &lt;code&gt;Date&lt;/code&gt; objects - &lt;code&gt;JSON.stringify(new Date())&lt;/code&gt; returns a string representation of the date in ISO format, which &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;strong&gt;doesn&apos;t&lt;/strong&gt; convert back to a &lt;code&gt;Date&lt;/code&gt; object. &lt;a href=&quot;https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993&quot;&gt;See this answer for more details&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Additionally, please note that, in Chrome 65 at least, native cloning is not the way to go. According to JSPerf, performing native cloning by creating a new function is nearly &lt;strong&gt;800x&lt;/strong&gt; slower than using JSON.stringify which is incredibly fast all the way across the board.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;Update for ES6&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you are using Javascript ES6 try this native method for cloning or shallow copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Structured Cloning&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;2022 update:&lt;/strong&gt; The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;structuredClone&lt;/code&gt; global function&lt;/a&gt; is already available in Firefox 94, Node 17 and Deno 1.14&lt;/p&gt;\n&lt;p&gt;The HTML standard includes &lt;a href=&quot;https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;an internal structured cloning/serialization algorithm&lt;/strong&gt;&lt;/a&gt; that can create deep clones of objects. It is still limited to certain built-in types, but in addition to the few types supported by JSON it also supports Dates, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays, and probably more in the future. It also preserves references within the cloned data, allowing it to support cyclical and recursive structures that would cause errors for JSON.&lt;/p&gt;\n&lt;h2&gt;Support in Node.js:&lt;/h2&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;structuredClone&lt;/code&gt; global function&lt;/a&gt; is provided by Node 17.0:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(original);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Previous versions: The &lt;code&gt;v8&lt;/code&gt; module in Node.js (as of Node 11) &lt;a href=&quot;https://nodejs.org/api/all.html#v8_serialization_api&quot; rel=&quot;noreferrer&quot;&gt;exposes the structured serialization API directly&lt;/a&gt;, but this functionality is still marked as &quot;experimental&quot;, and subject to change or removal in future versions. If you&apos;re using a compatible version, cloning an object is as simple as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; v8 = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;v8&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt; = obj =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v8.&lt;span class=&quot;hljs-title function_&quot;&gt;deserialize&lt;/span&gt;(v8.&lt;span class=&quot;hljs-title function_&quot;&gt;serialize&lt;/span&gt;(obj));\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Direct Support in Browsers: Available in Firefox 94&lt;/h2&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;structuredClone&lt;/code&gt; global function&lt;/a&gt; will soon be provided by all major browsers (having previously been discussed in &lt;a href=&quot;https://github.com/whatwg/html/issues/793&quot; rel=&quot;noreferrer&quot;&gt;whatwg/html#793 on GitHub&lt;/a&gt;). It looks / will look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(original);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Until this is shipped, browsers&apos; structured clone implementations are only exposed indirectly.&lt;/p&gt;\n&lt;h2&gt;Asynchronous Workaround: Usable. &lt;/h2&gt;\n&lt;p&gt;The lower-overhead way to create a structured clone with existing APIs is to post the data through one port of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot; rel=&quot;noreferrer&quot;&gt;MessageChannels&lt;/a&gt;. The other port will emit a &lt;code&gt;message&lt;/code&gt; event with a structured clone of the attached &lt;code&gt;.data&lt;/code&gt;. Unfortunately, listening for these events is necessarily asynchronous, and the synchronous alternatives are less practical.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StructuredCloner&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pendingClones_&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nextKey_&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; channel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MessageChannel&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;inPort_&lt;/span&gt; = channel.&lt;span class=&quot;hljs-property&quot;&gt;port1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;outPort_&lt;/span&gt; = channel.&lt;span class=&quot;hljs-property&quot;&gt;port2&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;outPort_&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onmessage&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{data: {key, value}}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; resolve = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pendingClones_&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(key);\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(value);\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pendingClones_&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;(key);\n    };\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;outPort_&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;start&lt;/span&gt;();\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;cloneAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nextKey_&lt;/span&gt;++;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pendingClones_&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(key, resolve);\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;inPort_&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;postMessage&lt;/span&gt;({key, value});\n    });\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; structuredCloneAsync = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;structuredCloneAsync&lt;/span&gt; =\n    &lt;span class=&quot;hljs-title class_&quot;&gt;StructuredCloner&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cloneAsync&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StructuredCloner&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Example Use:&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; original = { &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(), &lt;span class=&quot;hljs-attr&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() };\n  original.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; = original;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;structuredCloneAsync&lt;/span&gt;(original);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They&apos;re different objects:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original !== clone);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt; !== clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They&apos;re cyclical:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === original);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(clone.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === clone);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They contain equivalent values:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;number&lt;/span&gt; === clone.&lt;span class=&quot;hljs-property&quot;&gt;number&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;) === &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;));\n  \n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Assertions complete.&quot;&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Synchronous Workarounds: Awful! &lt;/h2&gt;\n&lt;p&gt;There are no good options for creating structured clones synchronously. Here are a couple of impractical hacks instead.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt; both create a structured clone of their first argument, and assign that value to &lt;code&gt;history.state&lt;/code&gt;. You can use this to create a structured clone of any object like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt; = obj =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; oldState = history.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;;\n  history.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceState&lt;/span&gt;(obj, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clonedObj = history.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;;\n  history.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceState&lt;/span&gt;(oldState, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; clonedObj;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Example Use:&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; original = { &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(), &lt;span class=&quot;hljs-attr&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() };\n  original.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; = original;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(original);\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// They&apos;re different objects:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original !== clone);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt; !== clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They&apos;re cyclical:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === original);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(clone.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === clone);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They contain equivalent values:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;number&lt;/span&gt; === clone.&lt;span class=&quot;hljs-property&quot;&gt;number&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;) === &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;));\n  \n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Assertions complete.&quot;&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt; = obj =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; oldState = history.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;;\n  history.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceState&lt;/span&gt;(obj, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clonedObj = history.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;;\n  history.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceState&lt;/span&gt;(oldState, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; clonedObj;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Though synchronous, this can be extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.&lt;/p&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Notification&lt;/code&gt; constructor&lt;/a&gt; creates a structured clone of its associated data. It also attempts to display a browser notification to the user, but this will silently fail unless you have requested notification permission. In case you have the permission for other purposes, we&apos;ll immediately close the notification we&apos;ve created.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt; = obj =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Notification&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: obj, &lt;span class=&quot;hljs-attr&quot;&gt;silent&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n  n.&lt;span class=&quot;hljs-property&quot;&gt;onshow&lt;/span&gt; = n.&lt;span class=&quot;hljs-property&quot;&gt;close&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(n);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Example Use:&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; original = { &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(), &lt;span class=&quot;hljs-attr&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() };\n  original.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; = original;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(original);\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// They&apos;re different objects:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original !== clone);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt; !== clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They&apos;re cyclical:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === original);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(clone.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === clone);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// They contain equivalent values:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;number&lt;/span&gt; === clone.&lt;span class=&quot;hljs-property&quot;&gt;number&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(original.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;) === &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;));\n  \n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Assertions complete.&quot;&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt; = obj =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Notification&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: obj, &lt;span class=&quot;hljs-attr&quot;&gt;silent&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n  n.&lt;span class=&quot;hljs-title function_&quot;&gt;close&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Assuming that you have only properties and not any functions in your object, you can  just use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(oldObject));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If there wasn&apos;t any builtin one, you could try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; (obj) !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || &lt;span class=&quot;hljs-string&quot;&gt;&apos;isActiveClone&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//or new Date(obj);&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;hasOwnProperty&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj, key)) {\n            obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;isActiveClone&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            temp[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj[key]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;isActiveClone&apos;&lt;/span&gt;];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;The efficient way to clone(not deep-clone) an object in one line of code&lt;/h1&gt;\n&lt;p&gt;An &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;polyfill&lt;/strong&gt; to support older browsers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assign&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;assign&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (target === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || target === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cannot convert first argument to object&apos;&lt;/span&gt;);\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; to = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(target);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextSource = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nextSource === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || nextSource === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        }\n        nextSource = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(nextSource);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keysArray = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(nextSource);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = keysArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; nextIndex &amp;lt; len; nextIndex++) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextKey = keysArray[nextIndex];\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; desc = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(nextSource, nextKey);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (desc !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; desc.&lt;span class=&quot;hljs-property&quot;&gt;enumerable&lt;/span&gt;) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; to;\n    }\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Deep copy by performance:&lt;/strong&gt;\nRanked from best to worst&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;spread operator &lt;code&gt;...&lt;/code&gt; (primitive arrays - only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;splice(0)&lt;/code&gt; (primitive arrays - only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;slice()&lt;/code&gt; (primitive arrays - only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;concat()&lt;/code&gt; (primitive arrays - only)&lt;/li&gt;\n&lt;li&gt;custom function, as seen below (any array)&lt;/li&gt;\n&lt;li&gt;jQuery&apos;s &lt;code&gt;$.extend()&lt;/code&gt; (any array)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JSON.parse(JSON.stringify())&lt;/code&gt; (primitive and literal arrays - only)&lt;/li&gt;\n&lt;li&gt;Underscore&apos;s &lt;code&gt;_.clone()&lt;/code&gt; (primitive and literal arrays - only)&lt;/li&gt;\n&lt;li&gt;Lodash&apos;s &lt;code&gt;_.cloneDeep()&lt;/code&gt; (any array)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Where:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;primitives = strings, numbers, and booleans&lt;/li&gt;\n&lt;li&gt;literals = object literals &lt;code&gt;{}&lt;/code&gt;, array literals &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;any = primitives, literals, and prototypes&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Deep copy an array of primitives:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To deep copy arrays with primitives only (i.e. numbers, strings, and booleans), reassignment, &lt;code&gt;slice()&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt;, and Underscore&apos;s &lt;code&gt;clone()&lt;/code&gt; can be used.&lt;/p&gt;\n&lt;p&gt;Where spread has the fastest performance:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1b = [...arr1a];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And where &lt;code&gt;slice()&lt;/code&gt; has better performance than &lt;code&gt;concat()&lt;/code&gt;: &lt;a href=&quot;https://jsbench.me/x5ktn7o94d/&quot; rel=&quot;noreferrer&quot;&gt;https://jsbench.me/x5ktn7o94d/&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1c = arr1a.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1d = arr1a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1e = arr1a.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Deep copy an array of primitive and object literals:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr2a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, []];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr2b = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr2a));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Deep copy an array of primitive, object literals, and prototypes:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr3a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, [], &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;()];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Write a custom function (has faster performance than &lt;code&gt;$.extend()&lt;/code&gt; or &lt;code&gt;JSON.parse&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;aObject&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Prevent undefined objects&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// if (!aObject) return aObject;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bObject = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(aObject) ? [] : {};\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; value;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; aObject) {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Prevent self-references to parent object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if (Object.is(aObject[key], aObject)) continue;&lt;/span&gt;\n    \n    value = aObject[key];\n\n    bObject[key] = (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) ? &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(value) : value;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bObject;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr3b = &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(arr3a);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or use third-party utility functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr3c = $.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, [], arr3a); &lt;span class=&quot;hljs-comment&quot;&gt;// jQuery Extend&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr3d = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(arr3a); &lt;span class=&quot;hljs-comment&quot;&gt;// Lodash&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: jQuery&apos;s &lt;code&gt;$.extend&lt;/code&gt; also has better performance than &lt;code&gt;JSON.parse(JSON.stringify())&lt;/code&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsbench.me/5kktn8f3ss&quot; rel=&quot;noreferrer&quot;&gt;js-deep-copy&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsbench.me/imktn8ppco&quot; rel=&quot;noreferrer&quot;&gt;jquery-extend-vs-json-parse&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This is what I&apos;m using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj[i])==&lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; &amp;amp;&amp;amp; obj[i] != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            clone[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(obj[i]);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            clone[i] = obj[i];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; clone;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// extends &apos;from&apos; object with members from &apos;to&apos;. If &apos;to&apos; is null, a deep clone of &apos;from&apos; is returned&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;, to&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; != &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; != &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; != &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ||\n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;);\n\n    to = to || &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;)\n    {\n        to[name] = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; to[name] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[name], &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) : to[name];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; to;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj =\n{\n    &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;q&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + q; },\n    &lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;asdasd&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;array&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;asd&quot;&lt;/span&gt;],\n    &lt;span class=&quot;hljs-attr&quot;&gt;regex&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/aaa/i&lt;/span&gt;),\n    &lt;span class=&quot;hljs-attr&quot;&gt;subobj&lt;/span&gt;:\n    {\n        &lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;asdsaD&quot;&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(obj);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Deep copying objects in JavaScript (I think the best and the simplest)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. Using JSON.parse(JSON.stringify(object));&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { \n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n  }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 2 } } &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;2.Using created method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj[i] != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp;  &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj[i])==&lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;)\n            clone[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(obj[i]);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            clone[i] = obj[i];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; clone;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { \n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n  }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(obj);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 2 } } &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;3. Using Lo-Dash&apos;s _.cloneDeep&lt;/strong&gt; link &lt;a href=&quot;https://lodash.com/docs/4.17.10#cloneDeep&quot; rel=&quot;noreferrer&quot;&gt;lodash&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { \n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(obj);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 2 } } &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;4. Using Object.assign() method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: 20 }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: 2 }  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;BUT WRONG WHEN&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { \n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } } --&amp;gt; WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Note: Properties on the prototype chain and non-enumerable properties cannot be copied.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;5.Using Underscore.js _.clone&lt;/strong&gt; link &lt;a href=&quot;https://underscorejs.org/#clone&quot; rel=&quot;noreferrer&quot;&gt;Underscore.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: 20 }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: 2 }  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;BUT WRONG WHEN&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { \n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { \n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(obj);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: { c: 20 } } --&amp;gt; WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (Create a shallow-copied clone of the provided plain object. Any nested objects or arrays will be copied by reference, not duplicated.)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;JSBEN.CH Performance Benchmarking Playground 1~3 &lt;a href=&quot;http://jsben.ch/KVQLd&quot; rel=&quot;noreferrer&quot;&gt;http://jsben.ch/KVQLd&lt;/a&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/Assgk.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Assgk.png&quot; alt=&quot;Performance Deep copying objects in JavaScript&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Cloning an object was always a concern in JS, but it was all about before ES6, I list different ways of copying an object in JavaScript below, imagine you have the Object below and would like to have a deep copy of that:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are few ways to copy this object, without changing the origin:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;ES5+, Using a simple function to do the copy for you:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopyObj&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n        copy.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) {\n            copy[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopyObj&lt;/span&gt;(obj[i]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr)) copy[attr] = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopyObj&lt;/span&gt;(obj[attr]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to copy obj this object.&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ES5+, using &lt;code&gt;JSON.parse&lt;/code&gt; and &lt;code&gt;JSON.stringify&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deepCopyObj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Angular:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deepCopyObj = angular.&lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(obj);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;jQuery:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deepCopyObj = jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, obj);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Underscore.js &amp;amp; Lodash:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deepCopyObj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;//latest version of Underscore.js makes shallow copy&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Hope these help&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) ? [] : {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n            newObj[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            newObj[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newObj;\n}; \n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;clone&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: clone, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Theres a &lt;a href=&quot;https://github.com/pvorb/node-clone&quot; rel=&quot;noreferrer&quot;&gt;library (called clone)&lt;/a&gt;, that does this quite well. It provides the most complete recursive cloning/copying of arbitrary objects that I know of. It also supports circular references, which is not covered by the other answers, yet.&lt;/p&gt;\n\n&lt;p&gt;You can &lt;a href=&quot;https://npmjs.org/package/clone&quot; rel=&quot;noreferrer&quot;&gt;find it on npm&lt;/a&gt;, too. It can be used for the browser as well as Node.js.&lt;/p&gt;\n\n&lt;p&gt;Here is an example on how to use it:&lt;/p&gt;\n\n&lt;p&gt;Install it with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;npm install clone\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or package it with &lt;a href=&quot;https://github.com/ender-js/Ender&quot; rel=&quot;noreferrer&quot;&gt;Ender&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;ender build clone [...]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also download the source code manually.&lt;/p&gt;\n\n&lt;p&gt;Then you can use it in your source code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;clone&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = { &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt; } };  &lt;span class=&quot;hljs-comment&quot;&gt;// inital value of a&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(a);                 &lt;span class=&quot;hljs-comment&quot;&gt;// clone a -&amp;gt; b&lt;/span&gt;\na.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;;                &lt;span class=&quot;hljs-comment&quot;&gt;// change a&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);                   &lt;span class=&quot;hljs-comment&quot;&gt;// { foo: { bar: &apos;foo&apos; } }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b);                   &lt;span class=&quot;hljs-comment&quot;&gt;// { foo: { bar: &apos;baz&apos; } }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Disclaimer: Im the author of the library.)&lt;/p&gt;\n    ","\n&lt;p&gt;I know this is an old post, but I thought this may be of some help to the next person who stumbles along.&lt;/p&gt;\n\n&lt;p&gt;As long as you don&apos;t assign an object to anything it maintains no reference in memory.  So to make an object that you want to share among other objects, you&apos;ll have to create a factory like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;father&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;zacharias&apos;&lt;/span&gt;\n    };\n},\nb = &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(),\nc = &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;();\nc.&lt;span class=&quot;hljs-property&quot;&gt;father&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;johndoe&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;father&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you&apos;re using it, the &lt;a href=&quot;https://underscorejs.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Underscore.js&lt;/a&gt; library has a &lt;a href=&quot;https://underscorejs.org/#clone&quot; rel=&quot;nofollow noreferrer&quot;&gt;clone&lt;/a&gt; method.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(oldObject);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a version of ConroyP&apos;s answer above that works even if the constructor has required parameters:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//If Object.create isn&apos;t already defined, we just do the simple shim,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//without the second argument, since that&apos;s all we need here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object_create = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;create&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; object_create !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n    object_create = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n        F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;();\n    };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj) !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//make sure the returned object has the same prototype as the original&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret = &lt;span class=&quot;hljs-title function_&quot;&gt;object_create&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj){\n        ret[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopy&lt;/span&gt;(obj[key]);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function is also available in my &lt;a href=&quot;https://github.com/mbrowne/simpleoo.js&quot; rel=&quot;noreferrer&quot;&gt;simpleoo&lt;/a&gt; library.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a more robust version (thanks to Justin McCandless this now supports cyclic references as well):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Deep copy an object (make copies of all its object properties, sub-properties, etc.)\n * An improved version of http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\n * that doesn&apos;t break if the constructor has required parameters\n * \n * It also borrows some code from http://stackoverflow.com/a/11621004/560114\n */&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;src, &lt;span class=&quot;hljs-comment&quot;&gt;/* INTERNAL */&lt;/span&gt; _visited, _copiesVisited&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(src === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(src) !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Honor native/custom clone methods&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; src.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Special cases:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Date&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(src &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(src.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//RegExp&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(src &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(src);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//DOM Element&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(src.&lt;span class=&quot;hljs-property&quot;&gt;nodeType&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; src.&lt;span class=&quot;hljs-property&quot;&gt;cloneNode&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneNode&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Initialize the visited objects arrays if needed.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This is used to detect cyclic references.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_visited === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){\n        _visited = [];\n        _copiesVisited = [];\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Check if this object has already been visited&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, len = _visited.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// If so, get the copy we already made&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (src === _visited[i]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _copiesVisited[i];\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Array]&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//[].slice() by itself would soft clone&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret = src.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//add it to the visited array&lt;/span&gt;\n        _visited.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(src);\n        _copiesVisited.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(ret);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {\n            ret[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopy&lt;/span&gt;(ret[i], _visited, _copiesVisited);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//If we&apos;ve reached here, we have a regular object&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//make sure the returned object has the same prototype as the original&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; proto = (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getPrototypeOf&lt;/span&gt; ? &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(src): src.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!proto) {\n        proto = src.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//this line would probably only be reached by very old browsers &lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dest = &lt;span class=&quot;hljs-title function_&quot;&gt;object_create&lt;/span&gt;(proto);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//add this object to the visited array&lt;/span&gt;\n    _visited.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(src);\n    _copiesVisited.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(dest);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; src) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Note: this does NOT preserve ES5 property attributes like &apos;writable&apos;, &apos;enumerable&apos;, etc.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//For an example of how this could be modified to do so, see the singleMixin() function&lt;/span&gt;\n        dest[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopy&lt;/span&gt;(src[key], _visited, _copiesVisited);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dest;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//If Object.create isn&apos;t already defined, we just do the simple shim,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//without the second argument, since that&apos;s all we need here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object_create = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;create&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; object_create !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n    object_create = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n        F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;();\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following creates two instances of the same object. I found it and am using it currently. It&apos;s simple and easy to use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objToCreate = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(cloneThis));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Crockford suggests (and I prefer) using this function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n    F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = &lt;span class=&quot;hljs-title function_&quot;&gt;object&lt;/span&gt;(oldObject);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s terse, works as expected and you don&apos;t need a library.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a polyfill for &lt;code&gt;Object.create&lt;/code&gt;, so you also can use this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(oldObject);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;  If you use some of this, you may have problems with some iteration who use &lt;code&gt;hasOwnProperty&lt;/code&gt;. Because, &lt;code&gt;create&lt;/code&gt; create new empty object who inherits &lt;code&gt;oldObject&lt;/code&gt;. But it is still useful and practical for cloning objects.&lt;/p&gt;\n\n&lt;p&gt;For exemple if  &lt;code&gt;oldObject.a = 5;&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;newObject.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// is 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;oldObject.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(a); &lt;span class=&quot;hljs-comment&quot;&gt;// is true&lt;/span&gt;\nnewObject.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(a); &lt;span class=&quot;hljs-comment&quot;&gt;// is false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Lodash has a nice &lt;a href=&quot;http://lodash.com/docs#cloneDeep&quot; rel=&quot;noreferrer&quot;&gt;_.cloneDeep(value)&lt;/a&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objects = [{ &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }, { &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; }];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deep = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(objects);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(deep[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] === objects[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;)\n { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = {};\n   clone.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = obj.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) clone[property] = obj[property];\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; clone;\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Shallow copy one-liner (&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#5th_Edition&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 5th edition&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; origin = { foo : {} };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(origin).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c,k&lt;/span&gt;){c[k]=origin[k];&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;},{});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(origin, copy);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(origin == copy); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(origin.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; == copy.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And shallow copy one-liner (&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 6th edition&lt;/a&gt;, 2015):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; origin = { foo : {} };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, origin);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(origin, copy);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(origin == copy); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(origin.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; == copy.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There seems to be no ideal deep clone operator yet for array-like objects.  As the code below illustrates, John Resig&apos;s jQuery cloner turns arrays with non-numeric properties into objects that are not arrays, and RegDwight&apos;s JSON cloner drops the non-numeric properties. The following tests illustrate these points on multiple browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;jQueryClone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, obj)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;JSONClone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj))\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayLikeObj = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;]];\narrayLikeObj.&lt;span class=&quot;hljs-property&quot;&gt;names&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;o&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;Copy = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;Clone(arrayLikeObj);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jQueryCopy = &lt;span class=&quot;hljs-title function_&quot;&gt;jQueryClone&lt;/span&gt;(arrayLikeObj);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is arrayLikeObj an array instance?&quot;&lt;/span&gt; + (arrayLikeObj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) +\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nIs the jQueryClone an array instance? &quot;&lt;/span&gt; + (jQueryCopy &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) +\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nWhat are the arrayLikeObj names? &quot;&lt;/span&gt; + arrayLikeObj.&lt;span class=&quot;hljs-property&quot;&gt;names&lt;/span&gt; +\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nAnd what are the JSONClone names? &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;Copy.&lt;span class=&quot;hljs-property&quot;&gt;names&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just because I didn&apos;t see &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot; rel=&quot;noreferrer&quot;&gt;AngularJS&lt;/a&gt; mentioned and thought that people might want to know...&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt; also provides a method of deep copying objects and arrays.&lt;/p&gt;\n    ","\n&lt;p&gt;I have two good answers depending on whether your objective is to clone a &quot;plain old JavaScript object&quot; or not.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s also assume that your intention is to create a complete clone with no prototype references back to the source object. If you&apos;re not interested in a complete clone, then you can use many of the Object.clone() routines provided in some of the other answers (Crockford&apos;s pattern).&lt;/p&gt;\n\n&lt;p&gt;For plain old JavaScript objects, a tried and true good way to clone an object in modern runtimes is quite simply:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the source object must be a pure JSON object. This is to say, all of its nested properties must be scalars (like boolean, string, array, object, etc). Any functions or special objects like RegExp or Date will not be cloned.&lt;/p&gt;\n\n&lt;p&gt;Is it efficient? Heck yes. We&apos;ve tried all kinds of cloning methods and this works best. I&apos;m sure some ninja could conjure up a faster method. But I suspect we&apos;re talking about marginal gains.&lt;/p&gt;\n\n&lt;p&gt;This approach is just simple and easy to implement. Wrap it into a convenience function and if you really need to squeeze out some gain, go for at a later time.&lt;/p&gt;\n\n&lt;p&gt;Now, for non-plain JavaScript objects, there isn&apos;t a really simple answer.  In fact, there can&apos;t be because of the dynamic nature of JavaScript functions and inner object state. Deep cloning a JSON structure with functions inside requires you recreate those functions and their inner context. And JavaScript simply doesn&apos;t have a standardized way of doing that.&lt;/p&gt;\n\n&lt;p&gt;The correct way to do this, once again, is via a convenience method that you declare and reuse within your code. The convenience method can be endowed with some understanding of your own objects so you can make sure to properly recreate the graph within the new object.&lt;/p&gt;\n\n&lt;p&gt;We&apos;re written our own, but the best general approach I&apos;ve seen is covered here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://davidwalsh.name/javascript-clone&quot; rel=&quot;noreferrer&quot;&gt;http://davidwalsh.name/javascript-clone&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the right idea. The author (David Walsh) has commented out the cloning of generalized functions. This is something you might choose to do, depending on your use case.&lt;/p&gt;\n\n&lt;p&gt;The main idea is that you need to special handle the instantiation of your functions (or prototypal classes, so to speak) on a per-type basis. Here, he&apos;s provided a few examples for RegExp and Date.&lt;/p&gt;\n\n&lt;p&gt;Not only is this code brief, but it&apos;s also very readable. It&apos;s pretty easy to extend.&lt;/p&gt;\n\n&lt;p&gt;Is this efficient? Heck yes. Given that the goal is to produce a true deep-copy clone, then you&apos;re going to have to walk the members of the source object graph. With this approach, you can tweak exactly which child members to treat and how to manually handle custom types.&lt;/p&gt;\n\n&lt;p&gt;So there you go. Two approaches. Both are efficient in my view.&lt;/p&gt;\n    ","\n&lt;p&gt;I am late to answer this question, but I have an another way of cloning the object:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj) !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// changed&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;hasOwnProperty&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj, key)) {\n            obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;isActiveClone&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            temp[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(obj[key]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;isActiveClone&apos;&lt;/span&gt;];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;});   &lt;span class=&quot;hljs-comment&quot;&gt;// calling&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is much better and faster then:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a));  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Deep copy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, a);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I have bench-marked the code and you can test the results &lt;a href=&quot;http://jsben.ch/vyEky&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;\n&lt;p&gt;and sharing the results:\n&lt;a href=&quot;https://i.stack.imgur.com/K8ztO.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/K8ztO.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;\nReferences: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t generally the most efficient solution, but it does what I need. Simple test cases below...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, clones&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Makes a deep copy of &apos;obj&apos;. Handles cyclic structures by&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// tracking cloned obj&apos;s in the &apos;clones&apos; parameter. Functions &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// are included, but not cloned. Functions members are cloned.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; new_obj,\n        already_cloned,\n        t = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj,\n        i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        l,\n        pair; \n\n    clones = clones || [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; || t === &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// check to see if we&apos;ve already cloned obj&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = clones.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++) {\n            pair = clones[i];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pair[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] === obj) {\n                already_cloned = pair[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            }\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (already_cloned) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; already_cloned; \n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// create new object&lt;/span&gt;\n                new_obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// Just use functions as is&lt;/span&gt;\n                new_obj = obj;\n            }\n\n            clones.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;([obj, new_obj]); &lt;span class=&quot;hljs-comment&quot;&gt;// keep track of objects we&apos;ve cloned&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) { &lt;span class=&quot;hljs-comment&quot;&gt;// clone object members&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(key)) {\n                    new_obj[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj[key], clones);\n                }\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new_obj || obj;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cyclic array test...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = []\na.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, a)\naa = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(a)\naa === a &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\naa[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] === a &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\naa[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] === a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\naa[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] === aa &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Function test...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\nf.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = a\nff = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(f)\nff === f &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; true&lt;/span&gt;\nff.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; === a &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Only when you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 6&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot; rel=&quot;nofollow noreferrer&quot;&gt;transpilers&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Features:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Won&apos;t trigger getter/setter while copying.&lt;/li&gt;\n&lt;li&gt;Preserves getter/setter.&lt;/li&gt;\n&lt;li&gt;Preserves prototype informations.&lt;/li&gt;\n&lt;li&gt;Works with both &lt;strong&gt;object-literal&lt;/strong&gt; and &lt;strong&gt;functional&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; rel=&quot;nofollow noreferrer&quot;&gt;OO&lt;/a&gt; writing styles.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, source&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; source){\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Use getOwnPropertyDescriptor instead of source[key] to prevent from trigering setter/getter.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; descriptor = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(source, key);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;){\n            target[key] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;){\n            target[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;([], descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; prototype = &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cloneObject = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;({}, descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setPrototypeOf&lt;/span&gt;(cloneObject, prototype);\n            target[key] = cloneObject;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(target, key, descriptor);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; prototype = &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(source);\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setPrototypeOf&lt;/span&gt;(target, prototype);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For the people who want to use the &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; version, but without losing the Date objects, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter&quot; rel=&quot;nofollow noreferrer&quot;&gt;second argument of &lt;code&gt;parse&lt;/code&gt; method&lt;/a&gt; to convert the strings back to Date:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; regExp = &lt;span class=&quot;hljs-regexp&quot;&gt;/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;k, v&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; v === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; &amp;amp;&amp;amp; regExp.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(v))\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(v)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n  })\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// usage:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; original = {\n &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;}, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;()],\n &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n   &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; }\n }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cloned = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(original)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cloned)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I disagree with the answer with the greatest votes &lt;a href=&quot;https://stackoverflow.com/a/5344074/1110941&quot;&gt;here&lt;/a&gt;. A &lt;strong&gt;Recursive Deep Clone&lt;/strong&gt; is &lt;strong&gt;much faster&lt;/strong&gt; than the &lt;em&gt;JSON.parse(JSON.stringify(obj))&lt;/em&gt; approach mentioned. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Jsperf&lt;/strong&gt; ranks it number one here: &lt;a href=&quot;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&quot; rel=&quot;noreferrer&quot;&gt;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Jsben&lt;/strong&gt; from the answer above updated to show that a recursive deep clone beats all the others mentioned: &lt;a href=&quot;http://jsben.ch/13YKQ&quot; rel=&quot;noreferrer&quot;&gt;http://jsben.ch/13YKQ&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And here&apos;s the function for quick reference:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt; (o) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newO\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; o !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!o) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(o) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Array]&apos;&lt;/span&gt;) {\n    newO = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; o.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n      newO[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(o[i])\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newO\n  }\n\n  newO = {}\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; o) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) {\n      newO[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(o[i])\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newO\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a comprehensive clone() method that can clone any JavaScript object. It handles almost all the cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;src, deep&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; toString = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!src &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; src != &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Any non-object (Boolean, String, Number), null, undefined, NaN&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Honor native/custom clone methods&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (src.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; &amp;amp;&amp;amp; toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Function]&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(deep);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// DOM elements&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (src.&lt;span class=&quot;hljs-property&quot;&gt;nodeType&lt;/span&gt; &amp;amp;&amp;amp; toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src.&lt;span class=&quot;hljs-property&quot;&gt;cloneNode&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Function]&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneNode&lt;/span&gt;(deep);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Date&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Date]&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(src.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RegExp&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object RegExp]&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(src);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Function&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Function]&quot;&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Wrap in another method to make sure == is not true;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Note: Huge performance issue due to closures, comment this :)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            src.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n        });\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret, index;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Array]&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//[].slice(0) would soft clone&lt;/span&gt;\n        ret = src.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (deep) {\n            index = ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (index--) {\n                ret[index] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(ret[index], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        ret = src.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; src.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) : {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; src) {\n            ret[prop] = deep\n                ? &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(src[prop], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n                : src[prop];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"103","randomQuestions":[{"title":"Get the row(s) which have the max value in groups using groupby","slug":"get-the-row(s)-which-have-the-max-value-in-groups-using-groupby-1657388014787"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988"},{"title":"Secure hash and salt for PHP passwords","slug":"secure-hash-and-salt-for-php-passwords-1657387363258"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"How to convert string representation of list to a list","slug":"how-to-convert-string-representation-of-list-to-a-list-1657387384181"},{"title":"Is there a JavaScript / jQuery DOM change listener?","slug":"is-there-a-javascript-jquery-dom-change-listener-1657387961200"},{"title":"Random number generator only generating one random number","slug":"random-number-generator-only-generating-one-random-number-1657385468315"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"\"Notice: Undefined variable\", \"Notice: Undefined index\", \"Warning: Undefined array key\", and \"Notice: Undefined offset\" using PHP","slug":"\"notice:-undefined-variable\"-\"notice:-undefined-index\"-\"warning:-undefined-array-key\"-and-\"notice:-undefined-offset\"-using-php-1657384250748"},{"title":"Why aren't variable-length arrays part of the C++ standard?","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"Why can't I store a value and a reference to that value in the same struct?","slug":"why-can't-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct-1657387506828"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"}]},"__N_SSG":true}