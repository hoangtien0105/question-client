{"pageProps":{"data":{"count":610,"rows":[{"id":430,"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188","postType":"QUESTION","createdAt":"2022-07-09T17:32:39.000Z","updatedAt":"2022-07-09T17:32:39.000Z","tags":[]},{"id":429,"title":"With arrays, why is it the case that a[5] == 5[a]?","slug":"with-arrays-why-is-it-the-case-that-a5-5a-1657387956216","postType":"QUESTION","createdAt":"2022-07-09T17:32:36.000Z","updatedAt":"2022-07-09T17:32:36.000Z","tags":[{"id":2254,"name":"pointer-arithmetic","slug":"pointer-arithmetic","createdAt":"2022-07-09T17:32:36.000Z","updatedAt":"2022-07-09T17:32:36.000Z","Questions_Tags":{"questionId":429,"tagId":2254}}]},{"id":428,"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056","postType":"QUESTION","createdAt":"2022-07-09T17:32:33.000Z","updatedAt":"2022-07-09T17:32:33.000Z","tags":[{"id":2249,"name":"dependency-injection","slug":"dependency-injection","createdAt":"2022-07-09T17:32:33.000Z","updatedAt":"2022-07-09T17:32:33.000Z","Questions_Tags":{"questionId":428,"tagId":2249}}]},{"id":427,"title":"Are global variables thread-safe in Flask? How do I share data between requests?","slug":"are-global-variables-thread-safe-in-flask-how-do-i-share-data-between-requests-1657387949951","postType":"QUESTION","createdAt":"2022-07-09T17:32:29.000Z","updatedAt":"2022-07-09T17:32:29.000Z","tags":[{"id":2246,"name":"thread-safety","slug":"thread-safety","createdAt":"2022-07-09T17:32:30.000Z","updatedAt":"2022-07-09T17:32:30.000Z","Questions_Tags":{"questionId":427,"tagId":2246}}]},{"id":426,"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844","postType":"QUESTION","createdAt":"2022-07-09T17:32:27.000Z","updatedAt":"2022-07-09T17:32:27.000Z","tags":[]}]},"answers":{"426":["\n&lt;p&gt;Converts &lt;code&gt;Object&lt;/code&gt; to &lt;code&gt;boolean&lt;/code&gt;. If it was falsey (e.g. &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, etc.), it will be &lt;code&gt;false&lt;/code&gt;, otherwise, &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;!object  &lt;span class=&quot;hljs-comment&quot;&gt;// inverted boolean&lt;/span&gt;\n!!object &lt;span class=&quot;hljs-comment&quot;&gt;// non inverted boolean so true boolean representation&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So &lt;code&gt;!!&lt;/code&gt; is not an operator, it&apos;s just the &lt;code&gt;!&lt;/code&gt; operator twice.&lt;/p&gt;\n&lt;p&gt;It may be simpler to do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(object) &lt;span class=&quot;hljs-comment&quot;&gt;// boolean&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Real World Example &quot;Test IE version&quot;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; isIE8 = !! navigator.&lt;span class=&quot;hljs-property&quot;&gt;userAgent&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/MSIE 8.0/&lt;/span&gt;);  \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(isIE8); &lt;span class=&quot;hljs-comment&quot;&gt;// returns true or false &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you &lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(navigator.&lt;span class=&quot;hljs-property&quot;&gt;userAgent&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/MSIE 8.0/&lt;/span&gt;));  \n&lt;span class=&quot;hljs-comment&quot;&gt;// returns either an Array or null  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you &lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!!navigator.&lt;span class=&quot;hljs-property&quot;&gt;userAgent&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/MSIE 8.0/&lt;/span&gt;));  \n&lt;span class=&quot;hljs-comment&quot;&gt;// returns either true or false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s a horribly obscure way to do a type conversion.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;!&lt;/code&gt; means &lt;em&gt;NOT&lt;/em&gt;.  So &lt;code&gt;!true&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;!false&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;!0&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;!1&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So you&apos;re converting a value to a boolean, then inverting it, then inverting it again.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Maximum Obscurity:&lt;/span&gt;\nval.&lt;span class=&quot;hljs-property&quot;&gt;enabled&lt;/span&gt; = !!userId;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Partial Obscurity:&lt;/span&gt;\nval.&lt;span class=&quot;hljs-property&quot;&gt;enabled&lt;/span&gt; = (userId != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// And finally, much easier to understand:&lt;/span&gt;\nval.&lt;span class=&quot;hljs-property&quot;&gt;enabled&lt;/span&gt; = (userId != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Or just&lt;/span&gt;\nval.&lt;span class=&quot;hljs-property&quot;&gt;enabled&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(userId);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the latter two expressions aren&apos;t exactly equivalent to the first expression when it comes to some edge case (when &lt;code&gt;userId&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;, for example), due to the way the &lt;code&gt;!=&lt;/code&gt; operator works and what values are considered &lt;em&gt;truthy&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;!!expr&lt;/code&gt; (two &lt;code&gt;!&lt;/code&gt; operators followed by an expression) returns a Boolean value (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) depending on the &lt;em&gt;truthiness&lt;/em&gt; of the expression. It makes more sense when used on non-boolean types. Consider these examples, especially the 3rd example and onward:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;          !!&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n           !!&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\n              !!&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n!!&lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// NaN is falsy&lt;/span&gt;\n              !!&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n             !!-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// -1 is truthy&lt;/span&gt;\n          !!(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Infinity is truthy&lt;/span&gt;\n\n             !!&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// empty string is falsy&lt;/span&gt;\n          !!&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// non-empty string is truthy&lt;/span&gt;\n        !!&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// ...even if it contains a falsy value&lt;/span&gt;\n\n     !!&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// undefined value is falsy&lt;/span&gt;\n      !!&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// undefined primitive is falsy&lt;/span&gt;\n           !!&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// null is falsy&lt;/span&gt;\n\n             !!{} === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// an (empty) object is truthy&lt;/span&gt;\n             !![] === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// an (empty) array is truthy; PHP programmers beware!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Brew some tea:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; is not an operator. It is the double-use of &lt;code&gt;!&lt;/code&gt; -- which is the logical &quot;not&quot; operator.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;In theory:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;!&lt;/code&gt;&lt;/strong&gt; determines the &quot;truth&quot; of what a value is not:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The truth is that &lt;code&gt;false&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt; (that&apos;s why &lt;code&gt;!false&lt;/code&gt; results\nin &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The truth is that &lt;code&gt;true&lt;/code&gt; is not &lt;code&gt;false&lt;/code&gt; (that&apos;s why &lt;code&gt;!true&lt;/code&gt; results\nin &lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;!!&lt;/code&gt;&lt;/strong&gt; determines the &quot;truth&quot; of what a value is &lt;em&gt;not&lt;/em&gt; not:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The truth is that &lt;code&gt;true&lt;/code&gt; is not &lt;em&gt;not&lt;/em&gt; &lt;code&gt;true&lt;/code&gt; (that&apos;s why &lt;code&gt;!!true&lt;/code&gt; results in &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The truth is that &lt;code&gt;false&lt;/code&gt; is not &lt;em&gt;not&lt;/em&gt; &lt;code&gt;false&lt;/code&gt; (that&apos;s why &lt;code&gt;!!false&lt;/code&gt; results in &lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;What we wish to determine in the comparison is the &quot;truth&quot; &lt;em&gt;about&lt;/em&gt; the value of a reference, not the &lt;em&gt;value of&lt;/em&gt; the reference itself. There is a use-case where we might want to know the truth about a value, even if we expect the value to be &lt;em&gt;&lt;code&gt;false&lt;/code&gt;&lt;/em&gt; (or falsey), or if we expect the value not to be typeof &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;In practice:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Consider a concise function which detects feature functionality (and in this case, platform compatibility) by way of &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Type_system#Dynamic_typing&quot; rel=&quot;noreferrer&quot;&gt;dynamic typing&lt;/a&gt;&lt;/strong&gt; (aka &quot;duck typing&quot;). We want to write a function that returns &lt;code&gt;true&lt;/code&gt; if a user&apos;s browser supports the HTML5 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element, but we don&apos;t want the function to throw an error if &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; is undefined; and we don&apos;t want to use &lt;code&gt;try ... catch&lt;/code&gt; to handle any possible errors (because they&apos;re gross); &lt;em&gt;and also&lt;/em&gt; we don&apos;t want to use a check inside the function that won&apos;t consistently reveal the truth about the feature (for example, &lt;code&gt;document.createElement(&apos;audio&apos;)&lt;/code&gt; will still create an element called &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; even if HTML5 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; is not supported).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Here are the three approaches:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// this won&apos;t tell us anything about HTML5 `&amp;lt;audio&amp;gt;` as a feature&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, atr&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(tag)[atr]; }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// this won&apos;t return true if the feature is detected (although it works just fine)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, atr&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(tag)[atr]; }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// this is the concise, feature-detecting solution we want&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; baz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, atr&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !!&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(tag)[atr]; }\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;audio&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;preload&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;auto&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;audio&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;preload&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns false&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;audio&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;preload&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Each function accepts an argument for a &lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; and an &lt;code&gt;attribute&lt;/code&gt; to look for, but they each return different values based on what the comparisons determine.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;But wait, there&apos;s more!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Some of you probably noticed that in this specific example, one could simply check for a property using the slightly &lt;strong&gt;&lt;a href=&quot;http://jsperf.com/hasownproperty-vs-comparison&quot; rel=&quot;noreferrer&quot;&gt;more performant&lt;/a&gt;&lt;/strong&gt; means of checking if the object in question &lt;em&gt;has&lt;/em&gt; a property. There are two ways to do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the native `hasOwnProperty` method&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; qux = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, atr&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(tag).&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(atr); }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the `in` operator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; quux = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, atr&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; atr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(tag); }\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;qux&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;audio&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;preload&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// returns true&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;quux&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;audio&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;preload&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;We digress...&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;However rare these situations may be, there may exist a few scenarios where the most concise, most performant, and thus most preferred means of getting &lt;code&gt;true&lt;/code&gt; from a non-boolean, possibly undefined value is indeed by using &lt;code&gt;!!&lt;/code&gt;. Hopefully this ridiculously clears it up.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; converts the value to the right of it to its equivalent boolean value. (Think poor man&apos;s way of &quot;type-casting&quot;). Its &lt;em&gt;intent&lt;/em&gt; is usually to convey to the reader that the code does not care &lt;em&gt;what&lt;/em&gt; value is in the variable, but what it&apos;s &lt;a href=&quot;http://11heavens.com/falsy-and-truthy-in-javascript&quot; rel=&quot;noreferrer&quot;&gt;&quot;truth&quot; value&lt;/a&gt; is.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;!!foo&lt;/code&gt; applies the unary not operator twice and is used to cast to boolean type similar to the use of unary plus &lt;code&gt;+foo&lt;/code&gt; to cast to number and concatenating an empty string &lt;code&gt;&apos;&apos;+foo&lt;/code&gt; to cast to string.&lt;/p&gt;\n\n&lt;p&gt;Instead of these hacks, you can also use the constructor functions corresponding to the primitive types (&lt;em&gt;without&lt;/em&gt; using &lt;code&gt;new&lt;/code&gt;) to explicitly cast values, ie&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(foo) === !!foo\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(foo)  === +foo\n&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(foo)  === &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;+foo\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So many answers doing half the work. Yes, &lt;code&gt;!!X&lt;/code&gt; could be read as &quot;the truthiness of X [represented as a boolean]&quot;. But &lt;code&gt;!!&lt;/code&gt; isn&apos;t, practically speaking, so important for figuring out whether a single variable is (or even if many variables are) truthy or falsy. &lt;code&gt;!!myVar === true&lt;/code&gt; is the same as just &lt;code&gt;myVar&lt;/code&gt;. Comparing &lt;code&gt;!!X&lt;/code&gt; to a &quot;real&quot; boolean isn&apos;t really useful.&lt;/p&gt;\n&lt;p&gt;The only thing you gain with &lt;code&gt;!!&lt;/code&gt; is the ability to check the truthiness of multiple variables &lt;em&gt;against each other&lt;/em&gt; in a repeatable, standardized (and JSLint friendly) fashion.&lt;/p&gt;\n&lt;h3 id=&quot;simply-casting-0vbq&quot;&gt;Simply casting :(&lt;/h3&gt;\n&lt;p&gt;That is...&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;0 === false&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;!!0 === false&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The above&apos;s not so useful. &lt;code&gt;if (!0)&lt;/code&gt; gives you the same results as &lt;code&gt;if (!!0 === false)&lt;/code&gt;. I can&apos;t think of a good case for casting a variable to boolean and then comparing to a &quot;true&quot; boolean.&lt;/p&gt;\n&lt;p&gt;See &quot;== and !=&quot; from &lt;a href=&quot;http://old.jslint.com/lint.html&quot; rel=&quot;noreferrer&quot;&gt;JSLint&apos;s directions&lt;/a&gt; (note: Crockford is moving his site around a bit; that link is liable to die at some point) for a little on why:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The == and != operators do type coercion before comparing. This is bad because it causes &apos; \\t\\r\\n&apos; == 0 to be true. This can mask type errors. JSLint cannot reliably determine if == is being used correctly, so it is best to not use == and != at all and to always use the more reliable === and !== operators instead.&lt;/p&gt;\n&lt;p&gt;If you only care that a value is truthy or falsy, then use the short form. Instead of&lt;br&gt;\n&lt;code&gt;    (foo != 0)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;just say&lt;br&gt;\n&lt;code&gt;    (foo)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;and instead of&lt;br&gt;\n&lt;code&gt;    (foo == 0)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;say&lt;br&gt;\n&lt;code&gt;     (!foo)&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note that there are some &lt;a href=&quot;https://stackoverflow.com/a/3619813/1028230&quot;&gt;unintuitive cases&lt;/a&gt; where a boolean will be cast to a number (&lt;code&gt;true&lt;/code&gt; is cast to &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;) when comparing a boolean to a number. In this case, &lt;code&gt;!!&lt;/code&gt; might be mentally useful. Though, again, &lt;strong&gt;these are cases where you&apos;re comparing a non-boolean to a hard-typed boolean, which is, imo, a serious mistake.&lt;/strong&gt; &lt;code&gt;if (-1)&lt;/code&gt; is still the way to go here.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;\n               Original                    Equivalent       Result   \n\n if (-1 == true) console.log(&quot;spam&quot;)    if (-1 == 1)       undefined \n if (-1 == false) console.log(&quot;spam&quot;)   if (-1 == 0)       undefined \n   Order doesn&apos;t matter...                                           \n if (true == -1) console.log(&quot;spam&quot;)    if (1 == -1)       undefined \n\n if (!!-1 == true) console.log(&quot;spam&quot;)  if (true == true)  spam       better\n\n if (-1) console.log(&quot;spam&quot;)            if (truthy)        spam       still best\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And things get even crazier depending on your engine. WScript, for instance, wins the prize.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;WScript&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because of &lt;a href=&quot;https://stackoverflow.com/a/14462348/1028230&quot;&gt;some historical Windows jive&lt;/a&gt;, that&apos;ll output -1 in a message box! Try it in a cmd.exe prompt and see! But &lt;code&gt;WScript.echo(-1 == test())&lt;/code&gt; still gives you 0, or WScript&apos;s &lt;code&gt;false&lt;/code&gt;. &lt;a href=&quot;https://www.google.com/search?q=look+away+I%27m+hideous&quot; rel=&quot;noreferrer&quot;&gt;Look away. It&apos;s hideous.&lt;/a&gt;&lt;/p&gt;\n&lt;h3 id=&quot;comparing-truthiness-b8hy&quot;&gt;Comparing truthiness :)&lt;/h3&gt;\n&lt;p&gt;But what if I have two values I need to check for equal truthi/falsi-ness?&lt;/p&gt;\n&lt;p&gt;Pretend we have &lt;code&gt;myVar1 = 0;&lt;/code&gt; and &lt;code&gt;myVar2 = undefined;&lt;/code&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;myVar1 === myVar2&lt;/code&gt; is &lt;code&gt;0 === undefined&lt;/code&gt; and is obviously false.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;!!myVar1 === !!myVar2&lt;/code&gt; is &lt;code&gt;!!0 === !!undefined&lt;/code&gt; and is true! Same truthiness! (In this case, both &quot;have a truthiness of falsy&quot;.)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So the only place you&apos;d really need to use &quot;boolean-cast variables&quot; would be if you had a situation where you&apos;re checking if both variables have the &lt;em&gt;same&lt;/em&gt; truthiness, right? That is, &lt;b&gt;use &lt;code&gt;!!&lt;/code&gt; if you need to see if two vars are &lt;em&gt;both truthy or both falsy&lt;/em&gt; (or not), that is, &lt;em&gt;of equal&lt;/em&gt; (or not) &lt;em&gt;truthiness&lt;/em&gt;.&lt;/b&gt;&lt;/p&gt;\n&lt;p&gt;I can&apos;t think of a great, non-contrived use case for that offhand. Maybe you have &quot;linked&quot; fields in a form?&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!!customerInput.&lt;span class=&quot;hljs-property&quot;&gt;spouseName&lt;/span&gt; !== !!customerInput.&lt;span class=&quot;hljs-property&quot;&gt;spouseAge&lt;/span&gt; ) {\n    errorObjects.&lt;span class=&quot;hljs-property&quot;&gt;spouse&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Please either enter a valid name AND age &quot;&lt;/span&gt; \n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;for your spouse or leave all spouse fields blank.&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So now if you have a truthy for both &lt;em&gt;or&lt;/em&gt; a falsy for both spouse name and age, you can continue. Otherwise you&apos;ve only got one field with a value (or a very early arranged marriage) and need to create an extra error on your &lt;code&gt;errorObjects&lt;/code&gt; collection.&lt;/p&gt;\n&lt;p&gt;Though even in this case, the &lt;code&gt;!!&lt;/code&gt; really is superfluous. One &lt;code&gt;!&lt;/code&gt; was enough to cast to a boolean, and you&apos;re just checking equality.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;EDIT 24 Oct 2017, 6 Feb 19:&lt;/strong&gt;&lt;/p&gt;\n&lt;h2 id=&quot;rd-party-libraries-that-expect-explicit-boolean-values-858l&quot;&gt;3rd party libraries that expect explicit Boolean values&lt;/h2&gt;\n&lt;p&gt;Here&apos;s an interesting case... &lt;code&gt;!!&lt;/code&gt; might be useful when 3rd party libs expect explicit Boolean values.&lt;/p&gt;\n&lt;h3 id=&quot;react-i9z0&quot;&gt;React&lt;/h3&gt;\n&lt;p&gt;For instance, &lt;a href=&quot;https://react-cn.github.io/react/tips/false-in-jsx.html&quot; rel=&quot;noreferrer&quot;&gt;False in JSX (React) has a special meaning&lt;/a&gt; that&apos;s not triggered on simple falsiness. If you tried returning something like the following in your JSX, expecting an int in &lt;code&gt;messageCount&lt;/code&gt;...&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;{messageCount &amp;amp;&amp;amp; &amp;lt;div&amp;gt;You have messages!&amp;lt;/div&amp;gt;}&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;... you might be surprised to see React render a &lt;code&gt;0&lt;/code&gt; when you have zero messages. You have to explicitly return false for JSX not to render. The above statement returns &lt;code&gt;0&lt;/code&gt;, which JSX happily renders, as it should. It can&apos;t tell you didn&apos;t have &lt;code&gt;Count: {messageCount}&lt;/code&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;One fix involves the bangbang, which coerces &lt;code&gt;0&lt;/code&gt; into &lt;code&gt;!!0&lt;/code&gt;, which is &lt;code&gt;false&lt;/code&gt;:&lt;br&gt;\n&lt;code&gt;{!!messageCount &amp;amp;&amp;amp; &amp;lt;div&amp;gt;You have messages!&amp;lt;/div&amp;gt;}&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;JSX&apos; docs suggest you be more explicit, write self-commenting code, and use a comparison to force to a Boolean.&lt;br&gt;\n&lt;code&gt;{messageCount &amp;gt; 0 &amp;amp;&amp;amp; &amp;lt;div&amp;gt;You have messages!&amp;lt;/div&amp;gt;}&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I&apos;m more comfortable handling falsiness myself with a ternary --&lt;br&gt;\n&lt;code&gt;{messageCount ? &amp;lt;div&amp;gt;You have messages!&amp;lt;/div&amp;gt; : false}&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3 id=&quot;typescript-dg8f&quot;&gt;Typescript&lt;/h3&gt;\n&lt;p&gt;Same deal in Typescript: If you have a function that returns a boolean (or you&apos;re assigning a value to a boolean variable), you [usually] can&apos;t return/assign a boolean-y value; it has to be a strongly typed boolean. This means, &lt;strong&gt;iff &lt;code&gt;myObject&lt;/code&gt; is strongly typed&lt;/strong&gt;, &lt;code&gt;return !myObject;&lt;/code&gt; works for a function returning a boolean, but &lt;code&gt;return myObject;&lt;/code&gt; doesn&apos;t. You have to &lt;code&gt;return !!myObject&lt;/code&gt; (or cast to the proper boolean another way) to match Typescript&apos;s expectations.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The exception for Typescript? If &lt;code&gt;myObject&lt;/code&gt; was an &lt;code&gt;any&lt;/code&gt;, you&apos;re back in JavaScript&apos;s Wild West and can return it without &lt;code&gt;!!&lt;/code&gt;, even if your return type is a boolean.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Keep in mind that &lt;strong&gt;these &lt;em&gt;are JSX &amp;amp; Typescript conventions&lt;/em&gt;, not ones inherent to JavaScript&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;But if you see strange &lt;code&gt;0&lt;/code&gt;s in your rendered JSX, think loose falsy management.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s just the logical NOT operator, twice - it&apos;s used to convert something to boolean, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; === !!&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; === !!&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It converts the suffix to a Boolean value. &lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a double &lt;code&gt;not&lt;/code&gt; operation.  The first &lt;code&gt;!&lt;/code&gt; converts the value to boolean and inverts its logical value.  The second &lt;code&gt;!&lt;/code&gt; inverts the logical value back.&lt;/p&gt;\n    ","\n&lt;p&gt;It seems that the &lt;code&gt;!!&lt;/code&gt; operator results in a double negation.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;;\n\n!foo &lt;span class=&quot;hljs-comment&quot;&gt;// Result: false&lt;/span&gt;\n!!foo &lt;span class=&quot;hljs-comment&quot;&gt;// Result: true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It simulates the behavior of the &lt;code&gt;Boolean()&lt;/code&gt; casting function.\nThe first &lt;code&gt;NOT&lt;/code&gt; returns a Boolean value no matter what operand it is given. The second &lt;code&gt;NOT&lt;/code&gt; negates that &lt;code&gt;Boolean&lt;/code&gt; value and so gives the &lt;code&gt;true&lt;/code&gt; Boolean value of a variable. The end result is the same as using the &lt;code&gt;Boolean()&lt;/code&gt; function on a value.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; it&apos;s using &lt;code&gt;NOT&lt;/code&gt; operation twice together, &lt;code&gt;!&lt;/code&gt; convert the value to a &lt;code&gt;boolean&lt;/code&gt; and reverse it, so using it twice, showing the boolean(false or true) of that value. here is a simple example to see how &lt;code&gt;!!&lt;/code&gt; works:&lt;/p&gt;\n&lt;p&gt;At first, the place you have:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; zero = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you do &lt;code&gt;!0&lt;/code&gt;, it will be converted to boolean and be evaluated to &lt;code&gt;true&lt;/code&gt;, because 0 is &lt;code&gt;falsy&lt;/code&gt;, so you get the reversed value and converted to boolean, so it gets evaluated to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;!zero; &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but we don&apos;t want the reversed &lt;strong&gt;boolean version&lt;/strong&gt; of the value, so we can reverse it again to get our result! That&apos;s why we use another &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Basically, &lt;code&gt;!!&lt;/code&gt; make us sure, the value we get is boolean, not falsy, truthy or string etc...&lt;/p&gt;\n&lt;p&gt;So  it&apos;s like using &lt;code&gt;Boolean&lt;/code&gt; function in javascript, but easy and shorter way to convert a value to boolean:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; zero = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n!!zero; &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;! is &quot;boolean not&quot;, which essentially typecasts the value of &quot;enable&quot; to its boolean opposite. The second ! flips this value. So, &lt;code&gt;!!enable&lt;/code&gt; means &quot;not not enable,&quot; giving you the value of &lt;code&gt;enable&lt;/code&gt; as a boolean.&lt;/p&gt;\n    ","\n&lt;p&gt;I think worth mentioning is, that a condition combined with logical AND/OR will not return a boolean value but last success or first fail in case of &amp;amp;&amp;amp; and \nfirst success or last fail in case of || of condition chain.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;res = (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// res is 2&lt;/span&gt;\nres = (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; alert) &lt;span class=&quot;hljs-comment&quot;&gt;// res is function alert()&lt;/span&gt;\nres = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; || alert) &lt;span class=&quot;hljs-comment&quot;&gt;// res is &apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In order to cast the condition to a true boolean literal we can use the double negation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;res = !!(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// res is true&lt;/span&gt;\nres = !!(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; alert) &lt;span class=&quot;hljs-comment&quot;&gt;// res is true&lt;/span&gt;\nres = !!(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; || alert) &lt;span class=&quot;hljs-comment&quot;&gt;// res is true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s not a single operator, it&apos;s two.  It&apos;s equivalent to the following and is a quick way to cast a value to boolean. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;val.&lt;span class=&quot;hljs-property&quot;&gt;enabled&lt;/span&gt; = !(!enable);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;!!&lt;/code&gt; construct is a simple way of turning any JavaScript expression into\nits Boolean equivalent. &lt;/p&gt;\n\n&lt;p&gt;For example: &lt;code&gt;!!&quot;he shot me down&quot; === true&lt;/code&gt; and &lt;code&gt;!!0 === false&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This question has been answered quite thoroughly, but I&apos;d like to add an answer that I hope is as simplified as possible, making the meaning of !! as simple to grasp as can be.&lt;/p&gt;\n\n&lt;p&gt;Because javascript has what are called &quot;truthy&quot; and &quot;falsey&quot; values, there are expressions that when evaluated in other expressions will result in a true or false condition, even though the value or expression being examined is not actually &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For instance: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myElement&apos;&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code block&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If that element does in fact exist, the expression will evaluate as true, and the code block will be executed.&lt;/p&gt;\n\n&lt;p&gt;However:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myElement&apos;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code block&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...will NOT result in a true condition, and the code block will not be executed, even if the element does exist.  &lt;/p&gt;\n\n&lt;p&gt;Why?  Because &lt;code&gt;document.getElementById()&lt;/code&gt; is a &quot;truthy&quot; expression that will evaluate as true in this &lt;code&gt;if()&lt;/code&gt; statement, but it is not an actual boolean value of &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The double &quot;not&quot; in this case is quite simple.  It is simply two &lt;code&gt;not&lt;/code&gt;s back to back. &lt;/p&gt;\n\n&lt;p&gt;The first one simply &quot;inverts&quot; the truthy or falsey value, resulting in an actual boolean type, and then the second one &quot;inverts&quot; it back again to it&apos;s original state, but now in an actual boolean value.  That way you have consistency:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!!&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myElement&apos;&lt;/span&gt;)) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!!&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myElement&apos;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will BOTH return true, as expected.&lt;/p&gt;\n    ","\n&lt;p&gt;I suspect this is a leftover from C++ where people override the ! operator but not the bool operator.&lt;/p&gt;\n\n&lt;p&gt;So to get a negative(or positive) answer in that case you would first need to use the ! operator to get a boolean, but if you wanted to check the positive case would use !!.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; statements and the &lt;code&gt;?&lt;/code&gt; operator use truth values to determine which branch of code to run. For example, zero and NaN numbers and the empty string are false, but other numbers and strings are true. Objects are true, but the undefined value and &lt;code&gt;null&lt;/code&gt; are both false.&lt;/p&gt;\n\n&lt;p&gt;The double negation operator &lt;code&gt;!!&lt;/code&gt; calculates the truth value of a value. It&apos;s actually two operators, where &lt;code&gt;!!x&lt;/code&gt; means &lt;code&gt;!(!x)&lt;/code&gt;, and behaves as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If &lt;code&gt;x&lt;/code&gt; is a false value, &lt;code&gt;!x&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;!!x&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;x&lt;/code&gt; is a true value, &lt;code&gt;!x&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;!!x&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;When used at the top level of a Boolean context (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;?&lt;/code&gt;), the &lt;code&gt;!!&lt;/code&gt; operator is behaviorally a no-op. For example, &lt;code&gt;if (x)&lt;/code&gt; and &lt;code&gt;if (!!x)&lt;/code&gt; mean the same thing.&lt;/p&gt;\n\n&lt;h2&gt;Practical uses&lt;/h2&gt;\n\n&lt;p&gt;However it has several practical uses.&lt;/p&gt;\n\n&lt;p&gt;One use is to lossily compress an object to its truth value, so that your code isn&apos;t holding a reference to a big object and keeping it alive. Assigning &lt;code&gt;!!some_big_object&lt;/code&gt; to a variable instead of &lt;code&gt;some_big_object&lt;/code&gt; lets go of it for the garbage collector. This is useful for cases that produce either an object or a false value such as &lt;code&gt;null&lt;/code&gt; or the undefined value, such as browser feature detection.&lt;/p&gt;\n\n&lt;p&gt;Another use, which I mentioned in an &lt;a href=&quot;https://stackoverflow.com/a/35525827/2738262&quot;&gt;answer about C&apos;s corresponding &lt;code&gt;!!&lt;/code&gt; operator&lt;/a&gt;, is with &quot;lint&quot; tools that look for common typos and print diagnostics. For example, in both C and JavaScript, a few common typos for Boolean operations produce other behaviors whose output isn&apos;t quite as Boolean:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;if (a = b)&lt;/code&gt; is assignment followed by use of the truth value of &lt;code&gt;b&lt;/code&gt;; &lt;code&gt;if (a == b)&lt;/code&gt; is an equality comparison.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if (a &amp;amp; b)&lt;/code&gt; is a bitwise AND; &lt;code&gt;if (a &amp;amp;&amp;amp; b)&lt;/code&gt; is a logical AND. &lt;code&gt;2 &amp;amp; 5&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; (a false value); &lt;code&gt;2 &amp;amp;&amp;amp; 5&lt;/code&gt; is true.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The &lt;code&gt;!!&lt;/code&gt; operator reassures the lint tool that what you wrote is what you meant: do this operation, then take the truth value of the result.&lt;/p&gt;\n\n&lt;p&gt;A third use is to produce logical XOR and logical XNOR. In both C and JavaScript, &lt;code&gt;a &amp;amp;&amp;amp; b&lt;/code&gt; performs a logical AND (true if both sides are true), and &lt;code&gt;a &amp;amp; b&lt;/code&gt; performs a bitwise AND. &lt;code&gt;a || b&lt;/code&gt; performs a logical OR (true if at least one are true), and &lt;code&gt;a | b&lt;/code&gt; performs a bitwise OR. There&apos;s a bitwise XOR (exclusive OR) as &lt;code&gt;a ^ b&lt;/code&gt;, but there&apos;s no built-in operator for logical XOR (true if exactly one side is true). You might, for example, want to allow the user to enter text in exactly one of two fields. What you can do is convert each to a truth value and compare them: &lt;code&gt;!!x !== !!y&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Double boolean negation. Often used to check if value is not undefined.&lt;/p&gt;\n    ","\n&lt;p&gt;I just wanted to add that&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(variableThing){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is the same as&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!!variableThing){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But this can be an issue when something is undefined.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// a === undefined, b is an empty object (eg. b.asdf === undefined)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a, b = {};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Both of these give error a.foo is not defined etc.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// you&apos;d see the same behavior for !!a.foo and !!b.foo.bar&lt;/span&gt;\n\na.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; \nb.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This works -- these return undefined&lt;/span&gt;\n\na &amp;amp;&amp;amp; a.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;\nb.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; &amp;amp;&amp;amp; b.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;\nb &amp;amp;&amp;amp; b.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; &amp;amp;&amp;amp; b.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The trick here is the chain of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;s will return &lt;strong&gt;the first falsey value&lt;/strong&gt; it finds -- and this can be fed to an if statement etc.  So if b.foo is undefined, it will return undefined and skip the &lt;code&gt;b.foo.bar&lt;/code&gt; statement, and we get no error.&lt;/p&gt;\n&lt;p&gt;The above return undefined but if you have an empty string, false, null, 0, undefined those values will return and soon as we encounter them in the chain -- &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; are both &quot;truthy&quot; and we will continue down the so-called &quot;&amp;amp;&amp;amp; chain&quot; to the next value to the right.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Another way of doing the above (&lt;code&gt;b &amp;amp;&amp;amp; b.foo&lt;/code&gt;) is &lt;code&gt;(b || {}).foo&lt;/code&gt;.  Those are equivalent, because if b is undefined then &lt;code&gt;b || {}&lt;/code&gt; will be &lt;code&gt;{}&lt;/code&gt;, and you&apos;ll be accessing a value in an empty object (no error) instead of trying to access a value within &quot;undefined&quot; (causes an error).&lt;/p&gt;\n&lt;p&gt;So, &lt;code&gt;(b || {}).foo&lt;/code&gt; is the same as &lt;code&gt;b &amp;amp;&amp;amp; b.foo&lt;/code&gt; and &lt;code&gt;((b || {}).foo || {}).bar&lt;/code&gt; is the same as &lt;code&gt;b &amp;amp;&amp;amp; b.foo &amp;amp;&amp;amp; b.foo.bar&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;!!x&lt;/code&gt; is shorthand for &lt;code&gt;Boolean(x)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The first bang forces the js engine to run &lt;code&gt;Boolean(x)&lt;/code&gt; but also has the side effect of inverting the value.  So the second bang undoes the side effect.&lt;/p&gt;\n    ","\n&lt;p&gt;It forces all things to boolean. &lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!!&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; abc&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!!&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; false&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!!&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Tons of great answers here, but if you&apos;ve read down this far, this helped me to &apos;get it&apos;. Open the console on Chrome (etc), and start typing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;!(!(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n!(!(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n!(!(&lt;span class=&quot;hljs-string&quot;&gt;&apos;truthy&apos;&lt;/span&gt;)) \n!(!(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;))\n!(!(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))\n!(!(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;))\n!(!(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;())\n!(!({}))\nwoo = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hoo&apos;&lt;/span&gt;\n!(!(woo))\n...etc, etc, until the light goes on ;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Naturally, these are all the same as merely typing !!someThing, but the added parentheses might help make it more understandable.&lt;/p&gt;\n    ","\n&lt;p&gt;After seeing all these great answers, I would like to add another reason for using  &lt;code&gt;!!&lt;/code&gt;. Currenty I&apos;m working in Angular 2-4 (TypeScript) and I want to return a boolean as &lt;code&gt;false&lt;/code&gt; when my user is not authenticated. If he isn&apos;t authenticated, the token-string would be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt;. I can do this by using the next block of code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;public &lt;span class=&quot;hljs-title function_&quot;&gt;isAuthenticated&lt;/span&gt;(): boolean {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getToken&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;here is a piece of code from angular js &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; requestAnimationFrame = $window.&lt;span class=&quot;hljs-property&quot;&gt;requestAnimationFrame&lt;/span&gt; ||\n                                $window.&lt;span class=&quot;hljs-property&quot;&gt;webkitRequestAnimationFrame&lt;/span&gt; ||\n                                $window.&lt;span class=&quot;hljs-property&quot;&gt;mozRequestAnimationFrame&lt;/span&gt;;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rafSupported = !!requestAnimationFrame;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;their intention is to set rafSupported to true or false based on the availability of function in requestAnimationFrame &lt;/p&gt;\n\n&lt;p&gt;it can be achieved by checking in following way in general:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;  requestAnimationFrame === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)\nrafSupported =&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\nrafSupported =&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the short way could be using !!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;rafSupported = !!requestAnimationFrame ;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so if requestAnimationFrame was assigned a function\n then\n!requestAnimationFrame would be false and one more ! of it would be true&lt;/p&gt;\n\n&lt;p&gt;if requestAnimationFrame was assinged undefined then\n!requestAnimationFrame would be true and one more ! of it would be false&lt;/p&gt;\n    ","\n&lt;p&gt;Returns boolean value of a variable.&lt;/p&gt;\n\n&lt;p&gt;Instead, &lt;code&gt;Boolean&lt;/code&gt; class can be used.&lt;/p&gt;\n\n&lt;p&gt;(please read code descriptions)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; X = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// X value is &quot;test&quot; as a String value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; booleanX = !!X &lt;span class=&quot;hljs-comment&quot;&gt;// booleanX is `true` as a Boolean value beacuse non-empty strings evaluates as `true` in boolean&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; whatIsXValueInBoolean = &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(X) &lt;span class=&quot;hljs-comment&quot;&gt;// whatIsXValueInBoolean is `true` again&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(X) === !!X) &lt;span class=&quot;hljs-comment&quot;&gt;// writes `true`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Namely, &lt;code&gt;Boolean(X) = !!X&lt;/code&gt; in use.&lt;/p&gt;\n\n&lt;p&gt;Please check code snippet out below &lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a: &quot;&lt;/span&gt;, a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes a value in its kind&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!a: &quot;&lt;/span&gt;, !a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes &apos;0 is NOT true in boolean&apos; value as boolean - So that&apos;s true.In boolean 0 means false and 1 means true.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!!a: &quot;&lt;/span&gt;, !!a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes 0 value in boolean. 0 means false.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Boolean(a): &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(a)) &lt;span class=&quot;hljs-comment&quot;&gt;// equals to `!!a`&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// newline&lt;/span&gt;\n\na = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a: &quot;&lt;/span&gt;, a)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!a: &quot;&lt;/span&gt;, !a)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!!a: &quot;&lt;/span&gt;, !!a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes 1 value in boolean&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// newline&lt;/span&gt;\n\na = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a: &quot;&lt;/span&gt;, a)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!a: &quot;&lt;/span&gt;, !a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes &apos;&quot;&quot; is NOT true in boolean&apos; value as boolean - So that&apos;s true.In boolean empty strings, null and undefined values mean false and if there is a string it means true.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!!a: &quot;&lt;/span&gt;, !!a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes &quot;&quot; value in boolean&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// newline&lt;/span&gt;\n\na = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a: &quot;&lt;/span&gt;, a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes a value in its kind&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!a: &quot;&lt;/span&gt;, !a)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!!a: &quot;&lt;/span&gt;, !!a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes &quot;test&quot; value in boolean&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Boolean(a) === !!a: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;(a) === !!a) &lt;span class=&quot;hljs-comment&quot;&gt;// writes true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Use logical not operator two times&lt;br&gt;\n&lt;strong&gt;it means&lt;/strong&gt; &lt;code&gt;!true = false&lt;/code&gt;\n&lt;strong&gt;and&lt;/strong&gt;  &lt;code&gt;!!true = true&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It is important to remember the evaluations to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in &lt;strong&gt;JavaScript&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Everything with a &quot;Value&quot; is &lt;code&gt;true&lt;/code&gt; (namely &lt;strong&gt;truthy&lt;/strong&gt;), for example:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;101&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;3.1415&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-11&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&quot;Lucky Brain&quot;&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;new Object()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;and, of course, &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Everything without a &quot;Value&quot; is &lt;code&gt;false&lt;/code&gt; (namely &lt;strong&gt;falsy&lt;/strong&gt;), for example:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;0&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-0&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt; (empty string),&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;null&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; (not a number)&lt;/li&gt;\n&lt;li&gt;and, of course, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Applying the &quot;&lt;strong&gt;logical not&lt;/strong&gt;&quot; operator (&lt;code&gt;!&lt;/code&gt;) evaluates the operand, converting it to &lt;code&gt;boolean&lt;/code&gt; and then negating it.  Applying it twice will negate the negation, effectively converting the value to &lt;code&gt;boolean&lt;/code&gt;.  Not applying the operator will just be a regular assignment of the exact value.  Examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// number&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valueAsNegatedBoolean = !value; &lt;span class=&quot;hljs-comment&quot;&gt;// boolean falsy (because 23 is truthy)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valueAsBoolean = !!value; &lt;span class=&quot;hljs-comment&quot;&gt;// boolean truthy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copyOfValue = value; &lt;span class=&quot;hljs-comment&quot;&gt;// number 23&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value2AsNegatedBoolean = !value2; &lt;span class=&quot;hljs-comment&quot;&gt;// boolean truthy (because 0 is falsy)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value2AsBoolean = !!value2; &lt;span class=&quot;hljs-comment&quot;&gt;// boolean falsy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copyOfValue2 = value2; &lt;span class=&quot;hljs-comment&quot;&gt;// number 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;value2 = value;&lt;/code&gt; assigns the exact object &lt;code&gt;value&lt;/code&gt; even if it is not &lt;code&gt;boolean&lt;/code&gt; hence &lt;code&gt;value2&lt;/code&gt; won&apos;t necessarily end up being &lt;code&gt;boolean&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;value2 = !!value;&lt;/code&gt; assigns a guaranteed &lt;code&gt;boolean&lt;/code&gt; as the result of the double negation of the operand &lt;code&gt;value&lt;/code&gt; and it is equivalent to the following but much shorter and readable:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value) {\n  value2 = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n  value2 = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"427":["\n&lt;p&gt;You can&apos;t use global variables to hold this sort of data. Not only is it not thread safe, it&apos;s not &lt;em&gt;process&lt;/em&gt; safe, and WSGI servers in production spawn multiple processes. Not only would your counts be wrong if you were using threads to handle requests, they would also vary depending on which process handled the request.&lt;/p&gt;\n\n&lt;p&gt;Use a data source outside of Flask to hold global data. A database, memcached, or redis are all appropriate separate storage areas, depending on your needs. If you need to load and access Python data, consider &lt;a href=&quot;https://stackoverflow.com/a/28426819&quot;&gt;&lt;code&gt;multiprocessing.Manager&lt;/code&gt;&lt;/a&gt;. You could also use the session for simple data that is per-user.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The development server may run in single thread and process. You won&apos;t see the behavior you describe since each request will be handled synchronously. Enable threads or processes and you will see it. &lt;code&gt;app.run(threaded=True)&lt;/code&gt; or &lt;code&gt;app.run(processes=10)&lt;/code&gt;. (In 1.0 the server is threaded by default.)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Some WSGI servers may support gevent or another async worker. Global variables are still not thread safe because there&apos;s still no protection against most race conditions. You can still have a scenario where one worker gets a value, yields, another modifies it, yields, then the first worker also modifies it.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you need to store some global data &lt;em&gt;during&lt;/em&gt; a request, you may use Flask&apos;s &lt;a href=&quot;http://flask.pocoo.org/docs/1.0/api/#flask.g&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;g&lt;/code&gt; object&lt;/a&gt;. Another common case is some top-level object that manages database connections. The distinction for this type of &quot;global&quot; is that it&apos;s unique to each request, not used &lt;em&gt;between&lt;/em&gt; requests, and there&apos;s something managing the set up and teardown of the resource.&lt;/p&gt;\n    ","\n&lt;p&gt;This is not really an answer to thread safety of globals.&lt;/p&gt;\n\n&lt;p&gt;But I think it is important to mention sessions here.\nYou are looking for a way to store client-specific data. Every connection should have access to its own pool of data, in a threadsafe way.&lt;/p&gt;\n\n&lt;p&gt;This is possible with server-side sessions, and they are available in a very neat flask plugin: &lt;a href=&quot;https://pythonhosted.org/Flask-Session/&quot; rel=&quot;noreferrer&quot;&gt;https://pythonhosted.org/Flask-Session/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you set up sessions, a &lt;code&gt;session&lt;/code&gt; variable is available in all your routes and it behaves like a dictionary. The data stored in this dictionary is individual for each connecting client.&lt;/p&gt;\n\n&lt;p&gt;Here is a short demo:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, session\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask_session &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Session\n\napp = Flask(__name__)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Check Configuration section for more details&lt;/span&gt;\nSESSION_TYPE = &lt;span class=&quot;hljs-string&quot;&gt;&apos;filesystem&apos;&lt;/span&gt;\napp.config.from_object(__name__)\nSession(app)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reset&lt;/span&gt;():\n    session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;counter was reset&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/inc&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;routeA&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; session:\n        session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;]+=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;counter is {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/dec&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;routeB&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; session:\n        session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;] -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;counter is {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(session[&lt;span class=&quot;hljs-string&quot;&gt;&quot;counter&quot;&lt;/span&gt;])\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    app.run()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After &lt;code&gt;pip install Flask-Session&lt;/code&gt;, you should be able to run this. Try accessing it from different browsers, you&apos;ll see that the counter is not shared between them.&lt;/p&gt;\n    ","\n&lt;p&gt;Another example of a data source external to requests is a cache, such as what&apos;s provided by &lt;a href=&quot;https://flask-caching.readthedocs.io/en/latest/index.html&quot; rel=&quot;noreferrer&quot;&gt;Flask-Caching&lt;/a&gt; or another extension.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Create a file &lt;code&gt;common.py&lt;/code&gt; and place in it the following:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask_caching &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Cache\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Instantiate the cache&lt;/span&gt;\ncache = Cache()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;In the file where your &lt;code&gt;flask app&lt;/code&gt; is created, register your cache with the following code:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Import cache&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; common &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cache\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# ...&lt;/span&gt;\napp = Flask(__name__)\n\ncache.init_app(app=app, config={&lt;span class=&quot;hljs-string&quot;&gt;&quot;CACHE_TYPE&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;filesystem&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;CACHE_DIR&apos;&lt;/span&gt;: Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/tmp&apos;&lt;/span&gt;)})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Now use throughout your application by importing the cache and executing as follows:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Import cache&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; common &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cache\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# store a value&lt;/span&gt;\ncache.&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_value&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1_000_000&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Get a value&lt;/span&gt;\nmy_value = cache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_value&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While totally accepting the previous upvoted answers, and discouraging use of global variables for production and scalable Flask storage, for the purpose of prototyping or really simple servers, running under the flask &apos;development server&apos;...&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n&lt;p&gt;The Python built-in data types, and I personally used and tested the global &lt;code&gt;dict&lt;/code&gt;, &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-global-interpreter-lock&quot; rel=&quot;nofollow noreferrer&quot;&gt;as per Python documentation&lt;/a&gt; are &lt;strong&gt;thread&lt;/strong&gt; safe. Not &lt;strong&gt;process&lt;/strong&gt; safe.&lt;/p&gt;\n&lt;p&gt;The insertions, lookups, and reads from such a (server global) dict will be OK from each (possibly concurrent) Flask session running under the development server.&lt;/p&gt;\n&lt;p&gt;When such a global dict is keyed with a unique Flask session key, it can be rather useful for server-side storage of session specific data otherwise not fitting into the cookie (max size 4 kB).&lt;/p&gt;\n&lt;p&gt;Of course, such a server global dict should be carefully guarded for growing too large, being in-memory. Some sort of expiring the &apos;old&apos; key/value pairs can be coded during request processing.&lt;/p&gt;\n&lt;p&gt;Again, it is not recommended for production or scalable deployments, but it is possibly OK for local task-oriented servers where a separate database is too much for the given task.&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n    "],"428":["\n&lt;p&gt;The best definition I&apos;ve found so far is &lt;a href=&quot;http://jamesshore.com/Blog/Dependency-Injection-Demystified.html&quot; rel=&quot;noreferrer&quot;&gt;one by James Shore&lt;/a&gt;: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;Dependency Injection&quot; is a 25-dollar\n  term for a 5-cent concept. [...]\n  Dependency injection means giving an\n  object its instance variables. [...].&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot; rel=&quot;noreferrer&quot;&gt;an article by Martin Fowler&lt;/a&gt; that may prove useful, too.&lt;/p&gt;\n\n&lt;p&gt;Dependency injection is basically providing the objects that an object needs (its dependencies) instead of having it construct them itself. It&apos;s a very useful technique for testing, since it allows dependencies to be mocked or stubbed out.&lt;/p&gt;\n\n&lt;p&gt;Dependencies can be injected into objects by many means (such as constructor injection or setter injection). One can even use specialized dependency injection frameworks (e.g. Spring) to do that, but they certainly aren&apos;t required. You don&apos;t need those frameworks to have dependency injection. Instantiating and passing objects (dependencies) explicitly is just as good an injection as injection by framework.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt; is passing dependency to other &lt;strong&gt;objects&lt;/strong&gt; or &lt;strong&gt;framework&lt;/strong&gt;( dependency injector).&lt;/p&gt;\n\n&lt;p&gt;Dependency injection makes testing easier. The injection can be done through &lt;strong&gt;constructor&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;SomeClass()&lt;/code&gt; has its constructor as following:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;public &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;SomeClass&lt;/span&gt;&lt;/span&gt;() {\n    myObject = Factory.getObject();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;:\nIf &lt;code&gt;myObject&lt;/code&gt; involves complex tasks such as disk access or network access, it is &lt;strong&gt;hard&lt;/strong&gt; to do unit test on &lt;code&gt;SomeClass()&lt;/code&gt;. Programmers have to mock &lt;code&gt;myObject&lt;/code&gt; and might &lt;strong&gt;intercept&lt;/strong&gt; the factory call.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Alternative solution&lt;/strong&gt;: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Passing &lt;code&gt;myObject&lt;/code&gt; in as an argument to the constructor&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;public SomeClass (MyClass myObject) {\n    this.myObject = myObject;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;myObject&lt;/code&gt; can be passed directly which makes testing easier. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;One common alternative is defining a &lt;strong&gt;do-nothing constructor&lt;/strong&gt;. Dependency injection can be done through setters. (h/t @MikeVella). &lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://martinfowler.com/articles/injection.html#InterfaceInjection&quot; rel=&quot;noreferrer&quot;&gt;Martin Fowler&lt;/a&gt; documents a third alternative (h/t @MarcDix), where &lt;strong&gt;classes explicitly implement an interface&lt;/strong&gt; for the dependencies programmers wish injected.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It is harder to isolate components in unit testing without dependency injection. &lt;/p&gt;\n\n&lt;p&gt;In 2013, when I wrote this answer, this was a major theme on the &lt;a href=&quot;http://googletesting.blogspot.com/&quot; rel=&quot;noreferrer&quot;&gt;Google Testing Blog&lt;/a&gt;. It remains the biggest advantage to me, as programmers not always need the extra flexibility in their run-time design (for instance, for service locator or similar patterns). Programmers often need to isolate the classes during testing.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;I found this funny example in terms of &lt;a href=&quot;https://en.wikipedia.org/wiki/Loose_coupling&quot; rel=&quot;noreferrer&quot;&gt;loose coupling&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Source: &lt;em&gt;&lt;a href=&quot;http://ganeshtiwaridotcomdotnp.blogspot.com/2011/05/understanding-dependency-injection-and.html&quot; rel=&quot;noreferrer&quot;&gt;Understanding dependency injection&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Any application is composed of many objects that collaborate with each other to perform some useful stuff. Traditionally each object is responsible for obtaining its own references to the dependent objects (dependencies) it collaborate with. This leads to highly coupled classes and hard-to-test code.&lt;/p&gt;\n&lt;p&gt;For example, consider a &lt;code&gt;Car&lt;/code&gt; object.&lt;/p&gt;\n&lt;p&gt;A &lt;code&gt;Car&lt;/code&gt; depends on wheels, engine, fuel, battery, etc. to run. Traditionally we define the brand of such dependent objects along with the definition of the &lt;code&gt;Car&lt;/code&gt; object.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Without Dependency Injection (DI):&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Wheel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;wh&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NepaliRubberWheel&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Battery&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bt&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExcideBattery&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//The rest&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, the &lt;code&gt;Car&lt;/code&gt; object &lt;em&gt;is responsible for creating the dependent objects.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;What if we want to change the type of its dependent object - say &lt;code&gt;Wheel&lt;/code&gt; - after the initial &lt;code&gt;NepaliRubberWheel()&lt;/code&gt; punctures?\nWe need to recreate the Car object with its new dependency say &lt;code&gt;ChineseRubberWheel()&lt;/code&gt;, but only the &lt;code&gt;Car&lt;/code&gt; manufacturer can do that.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Then what does the &lt;code&gt;Dependency Injection&lt;/code&gt; do for us...?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;When using dependency injection, objects are given their dependencies &lt;em&gt;at run time rather than compile time (car manufacturing time)&lt;/em&gt;.\nSo that we can now change the &lt;code&gt;Wheel&lt;/code&gt; whenever we want. Here, the &lt;code&gt;dependency&lt;/code&gt; (&lt;code&gt;wheel&lt;/code&gt;) can be injected into &lt;code&gt;Car&lt;/code&gt; at run time.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;After using dependency injection:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Here, we are &lt;strong&gt;injecting&lt;/strong&gt; the &lt;strong&gt;dependencies&lt;/strong&gt; (Wheel and Battery) at runtime. Hence the term : &lt;em&gt;Dependency Injection.&lt;/em&gt; We normally rely on DI frameworks such as Spring, Guice, Weld to create the dependencies and inject where needed.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Wheel wh; &lt;span class=&quot;hljs-comment&quot;&gt;// Inject an Instance of Wheel (dependency of car) at runtime&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Battery bt; &lt;span class=&quot;hljs-comment&quot;&gt;// Inject an Instance of Battery (dependency of car) at runtime&lt;/span&gt;\n  Car(Wheel wh,Battery bt) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.wh = wh;\n      &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.bt = bt;\n  }\n  &lt;span class=&quot;hljs-comment&quot;&gt;//Or we can have setters&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setWheel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Wheel wh)&lt;/span&gt; {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.wh = wh;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;The advantages are:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;decoupling the creation of object (in other word, separate usage from the creation of object)&lt;/li&gt;\n&lt;li&gt;ability to replace dependencies (eg: Wheel, Battery) without changing the class that uses it(Car)&lt;/li&gt;\n&lt;li&gt;promotes &quot;Code to interface not to implementation&quot; principle&lt;/li&gt;\n&lt;li&gt;ability to create and use mock dependency during test (if we want to use a Mock of Wheel during test instead of a real instance.. we can create Mock Wheel object and let DI framework inject to Car)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Dependency Injection is a practice where objects are designed in a manner where they receive instances of the objects from other pieces of code, instead of constructing them internally. This means that any object implementing the interface which is required by the object can be substituted in without changing the code, which simplifies testing, and improves decoupling.&lt;/p&gt;\n\n&lt;p&gt;For example, consider these clases:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;public class PersonService {\n  public void addManager( Person employee, Person newManager ) { ... }\n  public void removeManager( Person employee, Person oldManager ) { ... }\n  public Group getGroupByManager( Person manager ) { ... }\n}\n\npublic class &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;GroupMembershipService&lt;/span&gt;&lt;/span&gt;() {\n  public void addPersonToGroup( Person person, Group group ) { ... }\n  public void removePersonFromGroup( Person person, Group group ) { ... }\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example, the implementation of &lt;code&gt;PersonService::addManager&lt;/code&gt; and &lt;code&gt;PersonService::removeManager&lt;/code&gt; would need an instance of the &lt;code&gt;GroupMembershipService&lt;/code&gt; in order to do its work. Without Dependency Injection, the traditional way of doing this would be to instantiate a new &lt;code&gt;GroupMembershipService&lt;/code&gt; in the constructor of &lt;code&gt;PersonService&lt;/code&gt; and use that instance attribute in both functions. However, if the constructor of &lt;code&gt;GroupMembershipService&lt;/code&gt; has multiple things it requires, or worse yet, there are some initialization &quot;setters&quot; that need to be called on the &lt;code&gt;GroupMembershipService&lt;/code&gt;, the code grows rather quickly, and the &lt;code&gt;PersonService&lt;/code&gt; now depends not only on the &lt;code&gt;GroupMembershipService&lt;/code&gt; but also everything else that &lt;code&gt;GroupMembershipService&lt;/code&gt; depends on. Furthermore, the linkage to &lt;code&gt;GroupMembershipService&lt;/code&gt; is hardcoded into the &lt;code&gt;PersonService&lt;/code&gt; which means that you can&apos;t &quot;dummy up&quot; a &lt;code&gt;GroupMembershipService&lt;/code&gt; for testing purposes, or to use a strategy pattern in different parts of your application.   &lt;/p&gt;\n\n&lt;p&gt;With Dependency Injection, instead of instantiating the &lt;code&gt;GroupMembershipService&lt;/code&gt; within your &lt;code&gt;PersonService&lt;/code&gt;, you&apos;d either pass it in to the &lt;code&gt;PersonService&lt;/code&gt; constructor, or else add a Property (getter and setter) to set a local instance of it. This means that your &lt;code&gt;PersonService&lt;/code&gt; no longer has to worry about how to create a &lt;code&gt;GroupMembershipService&lt;/code&gt;, it just accepts the ones it&apos;s given, and works with them.  This also means that anything which is a subclass of &lt;code&gt;GroupMembershipService&lt;/code&gt;, or implements the &lt;code&gt;GroupMembershipService&lt;/code&gt; interface can be &quot;injected&quot; into the &lt;code&gt;PersonService&lt;/code&gt;, and the &lt;code&gt;PersonService&lt;/code&gt; doesn&apos;t need to know about the change.&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted answer is a good one - but I would like to add to this that DI is very much like the classic avoiding of hardcoded constants in the code.  &lt;/p&gt;\n\n&lt;p&gt;When you use some constant like a database name you&apos;d quickly move it from the inside of the code to some config file and pass a variable containing that value to the place where it is needed.  The reason to do that is that these constants usually change more frequently than the rest of the code.  For example if you&apos;d like to test the code in a test database.  &lt;/p&gt;\n\n&lt;p&gt;DI is analogous to this in the world of Object Oriented programming.  The values there instead of constant literals are whole objects - but the reason to move the code creating them out from the class code is similar - the objects change more frequently then the code that uses them.  One important case where such a change is needed is tests.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s try simple example with &lt;strong&gt;Car&lt;/strong&gt; and &lt;strong&gt;Engine&lt;/strong&gt; classes, any car need an engine to go anywhere, at least for now. So below how code will look without dependency injection.&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;public class Car\n{\n    public &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;Car&lt;/span&gt;&lt;/span&gt;()\n    {\n        GasEngine engine = new GasEngine();\n        engine.Start();\n    }\n}\n\npublic class GasEngine\n{\n    public void &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;Start&lt;/span&gt;&lt;/span&gt;()\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I use gas as my fuel!&quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And to instantiate the Car class we will use next code:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;Car car = new Car();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The issue with this code that we tightly coupled to GasEngine and if we decide to change it to ElectricityEngine then we will need to rewrite Car class. And the bigger the application the more issues and headache we will have to add and use new type of engine. &lt;/p&gt;\n\n&lt;p&gt;In other words with this approach is that our high level Car class is dependent on the lower level GasEngine class which violate Dependency Inversion Principle(DIP) from SOLID. DIP suggests that we should depend on abstractions, not concrete classes. So to satisfy this we introduce IEngine interface and rewrite code like below:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;    public interface IEngine\n    {\n        void Start();\n    }\n\n    public class GasEngine : IEngine\n    {\n        public void &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;Start&lt;/span&gt;&lt;/span&gt;()\n        {\n            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I use gas as my fuel!&quot;&lt;/span&gt;);\n        }\n    }\n\n    public class ElectricityEngine : IEngine\n    {\n        public void &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;Start&lt;/span&gt;&lt;/span&gt;()\n        {\n            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am electrocar&quot;&lt;/span&gt;);\n        }\n    }\n\n    public class Car\n    {\n        private &lt;span class=&quot;hljs-built_in&quot;&gt;readonly&lt;/span&gt; IEngine _engine;\n        public Car(IEngine engine)\n        {\n            _engine = engine;\n        }\n\n        public void &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;Run&lt;/span&gt;&lt;/span&gt;()\n        {\n            _engine.Start();\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now our Car class is dependent on only the IEngine interface, not a specific implementation of engine. \nNow, the only trick is how do we create an instance of the Car and give it an actual concrete Engine class like GasEngine or ElectricityEngine. That&apos;s where &lt;strong&gt;Dependency Injection&lt;/strong&gt; comes in. &lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;   Car gasCar = new Car(new GasEngine());\n   gasCar.Run();\n   Car electroCar = new Car(new ElectricityEngine());\n   electroCar.Run();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here we basically inject(pass) our dependency(Engine instance) to Car constructor. So now our classes have loose coupling between objects and their dependencies, and we can easily add new types of engines without changing the Car class.&lt;/p&gt;\n\n&lt;p&gt;The main benefit of the &lt;strong&gt;Dependency Injection&lt;/strong&gt; that classes are more loosely coupled, because they do not have hard-coded dependencies. This follows the Dependency Inversion Principle, which was mentioned above. Instead of referencing specific implementations, classes request abstractions (usually &lt;strong&gt;interfaces&lt;/strong&gt;) which are provided to them when the class is constructed.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;So in the end &lt;strong&gt;Dependency injection&lt;/strong&gt; is just a technique for\n  achieving loose coupling between objects and their dependencies.\n  Rather than directly instantiating dependencies that class needs in\n  order to perform its actions, dependencies are provided to the class\n  (most often) via constructor injection.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Also when we have many dependencies it is very good practice to use Inversion of Control(IoC) containers which we can tell which interfaces should be mapped to which concrete implementations for all our dependencies and we can have it resolve those dependencies for us when it constructs our object. For example, we could specify in the mapping for the IoC container that the &lt;strong&gt;IEngine&lt;/strong&gt; dependency should be mapped to the &lt;strong&gt;GasEngine&lt;/strong&gt; class and when we ask the IoC container for an instance of our &lt;strong&gt;Car&lt;/strong&gt; class, it will automatically construct our &lt;strong&gt;Car&lt;/strong&gt; class with a &lt;strong&gt;GasEngine&lt;/strong&gt; dependency passed in. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Watched course about EF Core from Julie Lerman recently and also liked her short definition about DI.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Dependency injection is a pattern to allow your application to inject\n  objects on the fly to classes that need them, without forcing those\n  classes to be responsible for those objects. It allows your code to be\n  more loosely coupled, and Entity Framework Core plugs in to this same\n  system of services.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Let&apos;s imagine that you want to go fishing:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Without dependency injection, you need to take care of everything yourself. You need to find a boat, to buy a fishing rod, to look for bait, etc. It&apos;s possible, of course, but it puts a lot of responsibility on you. In software terms, it means that you have to perform a lookup for all these things.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;With dependency injection, someone else takes care of all the preparation and makes the required equipment available to you. You will receive (&quot;be injected&quot;) the boat, the fishing rod and the bait - all ready to use.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;This&lt;/a&gt; is the most simple explanation about &lt;strong&gt;Dependency Injection&lt;/strong&gt; and &lt;strong&gt;Dependency Injection Container&lt;/strong&gt; I have ever seen:&lt;/p&gt;\n\n&lt;h1&gt;Without Dependency Injection&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Application needs Foo (e.g. a controller), so:&lt;/li&gt;\n&lt;li&gt;Application creates Foo&lt;/li&gt;\n&lt;li&gt;Application calls Foo\n\n&lt;ul&gt;\n&lt;li&gt;Foo needs Bar (e.g. a service), so:&lt;/li&gt;\n&lt;li&gt;Foo creates Bar&lt;/li&gt;\n&lt;li&gt;Foo calls Bar\n\n&lt;ul&gt;\n&lt;li&gt;Bar needs Bim (a service, a repository,\n), so:&lt;/li&gt;\n&lt;li&gt;Bar creates Bim&lt;/li&gt;\n&lt;li&gt;Bar does something&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;With Dependency Injection&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Application needs Foo, which needs Bar, which needs Bim, so:&lt;/li&gt;\n&lt;li&gt;Application creates Bim&lt;/li&gt;\n&lt;li&gt;Application creates Bar and gives it Bim&lt;/li&gt;\n&lt;li&gt;Application creates Foo and gives it Bar&lt;/li&gt;\n&lt;li&gt;Application calls Foo\n\n&lt;ul&gt;\n&lt;li&gt;Foo calls Bar\n\n&lt;ul&gt;\n&lt;li&gt;Bar does something&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Using a Dependency Injection Container&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Application needs Foo so:&lt;/li&gt;\n&lt;li&gt;Application gets Foo from the Container, so:\n\n&lt;ul&gt;\n&lt;li&gt;Container creates Bim&lt;/li&gt;\n&lt;li&gt;Container creates Bar and gives it Bim&lt;/li&gt;\n&lt;li&gt;Container creates Foo and gives it Bar&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Application calls Foo\n\n&lt;ul&gt;\n&lt;li&gt;Foo calls Bar\n\n&lt;ul&gt;\n&lt;li&gt;Bar does something&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt; and &lt;strong&gt;dependency Injection Containers&lt;/strong&gt; are different things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Dependency Injection is a method for writing better code&lt;/li&gt;\n&lt;li&gt;a DI Container is a tool to help injecting dependencies&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You don&apos;t need a container to do dependency injection. However a container can help you.&lt;/p&gt;\n    ","\n&lt;p&gt;Before going to the technical description first visualize it with a real-life example because you will find a lot of technical stuff to learn dependency injection but the majority of the people can&apos;t get the core concept of it.&lt;/p&gt;\n&lt;p&gt;In the first picture,  assume that you have a &lt;strong&gt;car factory&lt;/strong&gt; with a lot of units. A car is actually built in the &lt;strong&gt;assembly unit&lt;/strong&gt; but it needs &lt;strong&gt;engine&lt;/strong&gt;, &lt;strong&gt;seats&lt;/strong&gt; as well as &lt;strong&gt;wheels&lt;/strong&gt;. So an &lt;strong&gt;assembly unit&lt;/strong&gt; is dependent on these all units and they are the &lt;strong&gt;dependencies&lt;/strong&gt; of the factory.&lt;/p&gt;\n&lt;p&gt;You can feel that now it is too complicated to maintain all of the tasks in this factory because along with the main task (assembling a car in the Assembly unit) you have to also focus on &lt;strong&gt;other units&lt;/strong&gt;. It is now very costly to maintain and the factory building is huge so it takes your extra bucks for rent.&lt;/p&gt;\n&lt;p&gt;Now, look at the second picture. If you find some provider companies that will provide you with the &lt;strong&gt;wheel&lt;/strong&gt;, &lt;strong&gt;seat&lt;/strong&gt;, and &lt;strong&gt;engine&lt;/strong&gt; for cheaper than your self-production cost then now you don&apos;t need to make them in your factory. You can rent a smaller building now just for your &lt;strong&gt;assembly unit&lt;/strong&gt; which will lessen your maintenance task and reduce your extra rental cost. Now you can also focus only on your main task (Car assembly).&lt;/p&gt;\n&lt;p&gt;Now we can say that all the &lt;strong&gt;dependencies&lt;/strong&gt; for assembling a car are &lt;strong&gt;injected&lt;/strong&gt; on the factory from the &lt;strong&gt;providers&lt;/strong&gt;. It is an example of a real-life &lt;em&gt;&lt;strong&gt;Dependency Injection (DI)&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Now in the technical word, dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. So, transferring the task of creating the object to someone else and directly using the dependency is called dependency injection.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/&quot; rel=&quot;noreferrer&quot;&gt;This&lt;/a&gt; will help you now to learn DI with a technical explanation. &lt;a href=&quot;http://tutorials.jenkov.com/dependency-injection/when-to-use-dependency-injection.html&quot; rel=&quot;noreferrer&quot;&gt;This&lt;/a&gt; will show when to use DI and when you should &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/135971/when-is-it-not-appropriate-to-use-the-dependency-injection-pattern&quot;&gt;not&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/E7OWM.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/E7OWM.png&quot; alt=&quot;All in one car factory&quot;&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/auqDX.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/auqDX.png&quot; alt=&quot;Simple car factory&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Doesn&apos;t &quot;dependency injection&quot; just mean using parameterized constructors and public setters?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html&quot; rel=&quot;noreferrer&quot;&gt;James Shore&apos;s article shows the following examples for comparison&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Constructor without dependency injection:&lt;/p&gt;\n  \n  \n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;public class Example { \n  private DatabaseThingie myDatabase; \n\n  public &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;Example&lt;/span&gt;&lt;/span&gt;() { \n    myDatabase = new DatabaseThingie(); \n  } \n\n  public void &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;doStuff&lt;/span&gt;&lt;/span&gt;() { \n    ... \n    myDatabase.getData(); \n    ... \n  } \n} \n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Constructor with dependency injection:&lt;/p&gt;\n  \n  \n\n&lt;pre class=&quot;lang-csh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;public class Example { \n  private DatabaseThingie myDatabase; \n\n  public Example(DatabaseThingie useThisDatabaseInstead) { \n    myDatabase = useThisDatabaseInstead; \n  }\n\n  public void &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;doStuff&lt;/span&gt;&lt;/span&gt;() { \n    ... \n    myDatabase.getData(); \n    ... \n  } \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;To make Dependency Injection concept simple to understand. Let&apos;s take an example of switch button to toggle(on/off) a bulb.&lt;/p&gt;\n\n&lt;h2&gt;Without Dependency Injection&lt;/h2&gt;\n\n&lt;p&gt;Switch needs to know beforehand which bulb I am connected to (hard-coded dependency). So,&lt;/p&gt;\n\n&lt;p&gt;Switch -&amp;gt; PermanentBulb &lt;em&gt;//switch is directly connected to permanent bulb, testing not possible easily&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/cIt97.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cIt97.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Switch(){\nPermanentBulb = new Bulb();\nPermanentBulb.Toggle();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;With Dependency Injection&lt;/h2&gt;\n\n&lt;p&gt;Switch only knows I need to turn on/off whichever Bulb is passed to me. So,&lt;/p&gt;\n\n&lt;p&gt;Switch -&amp;gt; Bulb1 OR Bulb2 OR NightBulb (injected dependency)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/NrXaF.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/NrXaF.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Switch(AnyBulb){ //pass it whichever bulb you like\nAnyBulb.Toggle();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Modifying &lt;a href=&quot;http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html&quot;&gt;James&lt;/a&gt; Example for Switch and Bulb:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class SwitchTest { \n  TestToggleBulb() { \n    MockBulb mockbulb = new MockBulb(); \n\n    // MockBulb is a subclass of Bulb, so we can \n    // &quot;inject&quot; it here: \n    Switch switch = new Switch(mockBulb); \n\n    switch.ToggleBulb(); \n    mockBulb.AssertToggleWasCalled(); \n  } \n}\n\npublic class Switch { \n  private Bulb myBulb; \n\n  public Switch() { \n    myBulb = new Bulb(); \n  } \n\n  public Switch(Bulb useThisBulbInstead) { \n    myBulb = useThisBulbInstead; \n  } \n\n  public void ToggleBulb() { \n    ... \n    myBulb.Toggle(); \n    ... \n  } \n}`\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;What is Dependency Injection (DI)?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As others have said, &lt;em&gt;Dependency Injection(DI)&lt;/em&gt; removes the responsibility of direct creation, and management of the lifespan, of other object instances upon which our class of interest (consumer class) is dependent (in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_diagram#Dependency&quot; rel=&quot;noreferrer&quot;&gt;UML sense&lt;/a&gt;). These instances are instead passed to our consumer class, typically as constructor parameters or via property setters (the management of the dependency object instancing and passing to the consumer class is usually performed by an &lt;em&gt;Inversion of Control (IoC)&lt;/em&gt; container, but that&apos;s another topic).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;DI, DIP and SOLID&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Specifically, in the paradigm of Robert C Martin&apos;s &lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot; rel=&quot;noreferrer&quot;&gt;SOLID principles of Object Oriented Design&lt;/a&gt;, &lt;code&gt;DI&lt;/code&gt; is one of the possible implementations of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_inversion_principle&quot; rel=&quot;noreferrer&quot;&gt;Dependency Inversion Principle (DIP)&lt;/a&gt;. The &lt;a href=&quot;https://stackoverflow.com/q/27978841/314291&quot;&gt;DIP is the &lt;code&gt;D&lt;/code&gt; of the &lt;code&gt;SOLID&lt;/code&gt; mantra&lt;/a&gt;  - other DIP implementations include the Service Locator, and Plugin patterns.&lt;/p&gt;\n\n&lt;p&gt;The objective of the DIP is to decouple tight, concrete dependencies between classes, and instead, to loosen the coupling by means of an abstraction, which can be achieved via an &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;abstract class&lt;/code&gt; or &lt;code&gt;pure virtual class&lt;/code&gt;, depending on the language and approach used.&lt;/p&gt;\n\n&lt;p&gt;Without the DIP, our code (I&apos;ve called this &apos;consuming class&apos;) is directly coupled to a concrete dependency and is also often burdened with the responsibility of knowing how to obtain, and manage, an instance of this dependency, i.e. conceptually:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&quot;I need to create/use a Foo and invoke method `GetBar()`&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Whereas after application of the DIP, the requirement is loosened, and the concern of obtaining and managing the lifespan of the &lt;code&gt;Foo&lt;/code&gt; dependency has been removed:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&quot;I need to invoke something which offers `GetBar()`&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Why use DIP (and DI)?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Decoupling dependencies between classes in this way allows for &lt;em&gt;easy substitution&lt;/em&gt; of these dependency classes with other implementations which also fulfil the prerequisites of the abstraction (e.g. the dependency can be switched with another implementation of the same interface). Moreover, as others have mentioned, possibly &lt;em&gt;the&lt;/em&gt; most common reason to decouple classes via the DIP is to allow a consuming class to be tested in isolation, as these same dependencies can now be stubbed and/or mocked.&lt;/p&gt;\n\n&lt;p&gt;One consequence of DI is that the lifespan management of dependency object instances is no longer controlled by a consuming class, as the dependency object is now passed into the consuming class (via constructor or setter injection).&lt;/p&gt;\n\n&lt;p&gt;This can be viewed in different ways:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If lifespan control of dependencies by the consuming class needs to be retained, control can be re-established by injecting an (abstract) factory for creating the dependency class instances, into the consumer class. The consumer will be able to obtain instances via a &lt;code&gt;Create&lt;/code&gt; on the factory as needed, and dispose of these instances once complete.&lt;/li&gt;\n&lt;li&gt;Or, lifespan control of dependency instances can be relinquished to an IoC container (more about this below).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;When to use DI?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Where there likely will be a need to substitute a dependency for an equivalent implementation, &lt;/li&gt;\n&lt;li&gt;Any time where you will need to unit test the methods of a class in isolation of its dependencies, &lt;/li&gt;\n&lt;li&gt;Where uncertainty of the lifespan of a dependency may warrant experimentation (e.g. Hey, &lt;code&gt;MyDepClass&lt;/code&gt; is thread safe - what if we make it a singleton and inject the same instance into all consumers?)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a simple C# implementation. Given the below Consuming class:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class MyLogger\n{\n   public void LogRecord(string somethingToLog)\n   {\n      Console.WriteLine(&quot;{0:HH:mm:ss} - {1}&quot;, DateTime.Now, somethingToLog);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although seemingly innocuous, it has two &lt;code&gt;static&lt;/code&gt; dependencies on two other classes, &lt;code&gt;System.DateTime&lt;/code&gt; and &lt;code&gt;System.Console&lt;/code&gt;, which not only limit the logging output options (logging to console will be worthless if no one is watching), but worse, it is difficult to automatically test given the dependency on a non-deterministic system clock.&lt;/p&gt;\n\n&lt;p&gt;We can however apply &lt;code&gt;DIP&lt;/code&gt; to this class, by abstracting out the the concern of timestamping as a dependency, and coupling &lt;code&gt;MyLogger&lt;/code&gt; only to a simple interface:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public interface IClock\n{\n    DateTime Now { get; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can also loosen the dependency on &lt;code&gt;Console&lt;/code&gt; to an abstraction, such as a &lt;code&gt;TextWriter&lt;/code&gt;. Dependency Injection is typically implemented as either &lt;code&gt;constructor&lt;/code&gt; injection (passing an abstraction to a dependency as a parameter to the constructor of a consuming class) or &lt;code&gt;Setter Injection&lt;/code&gt; (passing the dependency via a &lt;code&gt;setXyz()&lt;/code&gt; setter or a .Net Property with &lt;code&gt;{set;}&lt;/code&gt; defined). Constructor Injection is preferred, as this guarantees the class will be in a correct state after construction, and allows the internal dependency fields to be marked as &lt;code&gt;readonly&lt;/code&gt; (C#) or &lt;code&gt;final&lt;/code&gt; (Java). So using constructor injection on the above example, this leaves us with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class MyLogger : ILogger // Others will depend on our logger.\n{\n    private readonly TextWriter _output;\n    private readonly IClock _clock;\n\n    // Dependencies are injected through the constructor\n    public MyLogger(TextWriter stream, IClock clock)\n    {\n        _output = stream;\n        _clock = clock;\n    }\n\n    public void LogRecord(string somethingToLog)\n    {\n        // We can now use our dependencies through the abstraction \n        // and without knowledge of the lifespans of the dependencies\n        _output.Write(&quot;{0:yyyy-MM-dd HH:mm:ss} - {1}&quot;, _clock.Now, somethingToLog);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(A concrete &lt;code&gt;Clock&lt;/code&gt; needs to be provided, which of course could revert to &lt;code&gt;DateTime.Now&lt;/code&gt;, and the two dependencies need to be provided by an IoC container via constructor injection)&lt;/p&gt;\n\n&lt;p&gt;An automated Unit Test can be built, which definitively proves that our logger is working correctly, as we now have control over the dependencies - the time, and we can spy on the written output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[Test]\npublic void LoggingMustRecordAllInformationAndStampTheTime()\n{\n    // Arrange\n    var mockClock = new Mock&amp;lt;IClock&amp;gt;();\n    mockClock.Setup(c =&amp;gt; c.Now).Returns(new DateTime(2015, 4, 11, 12, 31, 45));\n    var fakeConsole = new StringWriter();\n\n    // Act\n    new MyLogger(fakeConsole, mockClock.Object)\n        .LogRecord(&quot;Foo&quot;);\n\n    // Assert\n    Assert.AreEqual(&quot;2015-04-11 12:31:45 - Foo&quot;, fakeConsole.ToString());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Dependency injection is invariably associated with an &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot; rel=&quot;noreferrer&quot;&gt;Inversion of Control container(IoC)&lt;/a&gt;, to inject (provide) the concrete dependency instances, and to manage lifespan instances. During the configuration / bootstrapping process, &lt;code&gt;IoC&lt;/code&gt; containers allow the following to be defined:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;mapping between each abstraction and the configured concrete implementation (e.g. &lt;em&gt;&quot;any time a consumer requests an &lt;code&gt;IBar&lt;/code&gt;, return a &lt;code&gt;ConcreteBar&lt;/code&gt; instance&quot;&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;policies can be set up for the lifespan management of each dependency, e.g. to create a new object for each consumer instance, to share a singleton dependency instance across all consumers, to share the same dependency instance only across the same thread, etc.&lt;/li&gt;\n&lt;li&gt;In .Net, IoC containers are aware of protocols such as &lt;code&gt;IDisposable&lt;/code&gt; and will take on the responsibility of &lt;code&gt;Disposing&lt;/code&gt; dependencies in line with the configured lifespan management.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Typically, once IoC containers have been configured / bootstrapped, they operate seamlessly in the background allowing the coder to focus on the code at hand rather than worrying about dependencies.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The key to DI-friendly code is to avoid static coupling of classes, and not to use new() for the creation of Dependencies&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As per above example, decoupling of dependencies does require some design effort, and for the developer, there is a paradigm shift needed to break the habit of &lt;code&gt;new&lt;/code&gt;ing dependencies directly, and instead trusting the container to manage dependencies. &lt;/p&gt;\n\n&lt;p&gt;But the benefits are many, especially in the ability to thoroughly test your class of interest.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : The creation / mapping / projection (via &lt;code&gt;new ..()&lt;/code&gt;) of POCO / POJO / Serialization DTOs / Entity Graphs / Anonymous JSON projections et al - i.e. &quot;Data only&quot; classes or records - used or returned from methods are &lt;em&gt;not&lt;/em&gt; regarded as Dependencies (in the UML sense) and not subject to DI. Using &lt;code&gt;new&lt;/code&gt; to project these is just fine.&lt;/p&gt;\n    ","\n&lt;p&gt;The whole point of Dependency Injection (DI) is to keep application source code &lt;strong&gt;clean&lt;/strong&gt; and &lt;strong&gt;stable&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;clean&lt;/strong&gt; of dependency initialization code&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;stable&lt;/strong&gt; regardless of dependency used&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Practically, every design pattern separates concerns to make future changes affect minimum files.&lt;/p&gt;\n\n&lt;p&gt;The specific domain of DI is delegation of dependency configuration and initialization.&lt;/p&gt;\n\n&lt;h2&gt;Example: DI with shell script&lt;/h2&gt;\n\n&lt;p&gt;If you occasionally work outside of Java, recall how &lt;code&gt;source&lt;/code&gt; is often used in many scripting languages (Shell, Tcl, etc., or even &lt;code&gt;import&lt;/code&gt; in Python misused for this purpose).&lt;/p&gt;\n\n&lt;p&gt;Consider simple &lt;code&gt;dependent.sh&lt;/code&gt; script:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/bin/sh\n# Dependent\ntouch         &quot;one.txt&quot; &quot;two.txt&quot;\narchive_files &quot;one.txt&quot; &quot;two.txt&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The script is dependent: it won&apos;t execute successfully on its own (&lt;code&gt;archive_files&lt;/code&gt; is not defined).&lt;/p&gt;\n\n&lt;p&gt;You define &lt;code&gt;archive_files&lt;/code&gt; in &lt;code&gt;archive_files_zip.sh&lt;/code&gt; implementation script (using &lt;code&gt;zip&lt;/code&gt; in this case):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/bin/sh\n# Dependency\nfunction archive_files {\n    zip files.zip &quot;$@&quot;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of &lt;code&gt;source&lt;/code&gt;-ing implementation script directly in the dependent one, you use an &lt;code&gt;injector.sh&lt;/code&gt; &quot;container&quot; which wraps both &quot;components&quot;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/bin/sh \n# Injector\nsource ./archive_files_zip.sh\nsource ./dependent.sh\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;archive_files&lt;/code&gt; &lt;em&gt;dependency&lt;/em&gt; has just been &lt;em&gt;injected&lt;/em&gt; into &lt;em&gt;dependent&lt;/em&gt; script.&lt;/p&gt;\n\n&lt;p&gt;You could have injected dependency which implements &lt;code&gt;archive_files&lt;/code&gt; using &lt;code&gt;tar&lt;/code&gt; or &lt;code&gt;xz&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Example: removing DI&lt;/h2&gt;\n\n&lt;p&gt;If &lt;code&gt;dependent.sh&lt;/code&gt; script used dependencies directly, the approach would be called &lt;em&gt;dependency lookup&lt;/em&gt; (which is opposite to &lt;em&gt;dependency injection&lt;/em&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/bin/sh\n# Dependent\n\n# dependency look-up\nsource ./archive_files_zip.sh\n\ntouch         &quot;one.txt&quot; &quot;two.txt&quot;\narchive_files &quot;one.txt&quot; &quot;two.txt&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the problem is that dependent &quot;component&quot; has to perform initialization itself.&lt;/p&gt;\n\n&lt;p&gt;The &quot;component&quot;&apos;s source code is neither &lt;strong&gt;clean&lt;/strong&gt; nor &lt;strong&gt;stable&lt;/strong&gt; because every changes in initialization of dependencies requires new release for &quot;components&quot;&apos;s source code file as well.&lt;/p&gt;\n\n&lt;h2&gt;Last words&lt;/h2&gt;\n\n&lt;p&gt;DI is not as largely emphasized and popularized as in Java frameworks.&lt;/p&gt;\n\n&lt;p&gt;But it&apos;s a generic approach to split concerns of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;application &lt;strong&gt;development&lt;/strong&gt; (&lt;strong&gt;single&lt;/strong&gt; source code release lifecycle)&lt;/li&gt;\n&lt;li&gt;application &lt;strong&gt;deployment&lt;/strong&gt; (&lt;strong&gt;multiple&lt;/strong&gt; target environments with independent lifecycles)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Using configuration only with &lt;em&gt;dependency lookup&lt;/em&gt; does not help as number of configuration parameters may change per dependency (e.g. new authentication type) as well as number of supported types of dependencies (e.g. new database type).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;All the above answers are good, my aim is to explain the concept in a simple way so that anyone without a programming knowledge can also understand concept&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Dependency injection is one of the design pattern that help us to create complex systems in a simpler manner.&lt;/p&gt;\n&lt;p&gt;We can see a wide variety of application of this pattern in our day to day life.\nSome of the examples are Tape recorder, VCD, CD Drive etc.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Ubcrh.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ubcrh.jpg&quot; alt=&quot;Reel-to-reel portable tape recorder, mid-20th century.&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The above image is an image of Reel-to-reel portable tape recorder, mid-20th century. &lt;a href=&quot;https://www.britannica.com/technology/tape-recorder&quot; rel=&quot;noreferrer&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The primary intention of a tape recorder machine is to record or playback sound.&lt;/p&gt;\n&lt;p&gt;While designing a system it require a reel to record or playback sound or music. There are two possibilities for designing this system&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;we can place the reel inside the machine&lt;/li&gt;\n&lt;li&gt;we can provide a hook for the reel where it can be placed.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If we use the first one we need to open the machine to change the reel.\nif we opt for the second one, that is placing a hook for reel, we are getting an added benefit of playing any music by changing the reel. and also reducing the function only to playing whatever in the reel.&lt;/p&gt;\n&lt;p&gt;Like wise dependency injection is the  process of externalizing the dependencies to focus only on the specific functionality of the component so that independent components can be coupled together to form a complex system.&lt;/p&gt;\n&lt;p&gt;The main benefits we achieved by using dependency injection.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;High cohesion and loose coupling.&lt;/li&gt;\n&lt;li&gt;Externalizing dependency and looking only on responsibility.&lt;/li&gt;\n&lt;li&gt;Making things as components and to combine to form a large systems with high capabilities.&lt;/li&gt;\n&lt;li&gt;It helps to develop high quality components since they are independently developed they are properly tested.&lt;/li&gt;\n&lt;li&gt;It helps to replace the component with another if one fails.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Now a days these concept forms the basis of well known frameworks in programming world.\nThe Spring Angular etc are the well-known software frameworks built on the top of this concept&lt;/p&gt;\n&lt;p&gt;Dependency injection is a pattern used to create instances of objects that other objects rely upon without knowing at compile time which class will be used to provide that functionality or simply the way of injecting properties to an object is called dependency injection.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example for Dependency injection&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Previously we are writing code like this&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Public MyClass{\n DependentClass dependentObject\n /*\n  At somewhere in our code we need to instantiate \n  the object with new operator  inorder to use it or perform some method.\n  */ \n  dependentObject= new DependentClass();\n  dependentObject.someMethod();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With Dependency injection, the dependency injector will take off the instantiation for us&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Public MyClass{\n /* Dependency injector will instantiate object*/\n DependentClass dependentObject\n\n /*\n  At somewhere in our code we perform some method. \n  The process of  instantiation will be handled by the dependency injector\n */ \n   \n  dependentObject.someMethod();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also read&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/26884881/difference-between-inversion-of-control-dependency-injection/41519414#41519414&quot;&gt;Difference between Inversion of Control &amp;amp; Dependency Injection&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Example, we have 2 class &lt;code&gt;Client&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt;. &lt;code&gt;Client&lt;/code&gt; will use &lt;code&gt;Service&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Service {\n    public void doSomeThingInService() {\n        // ...\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Without Dependency Injection&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Way 1)&lt;/strong&gt;    &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Client {\n    public void doSomeThingInClient() {\n        Service service = new Service();\n        service.doSomeThingInService();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Way 2)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Client {\n    Service service = new Service();\n    public void doSomeThingInClient() {\n        service.doSomeThingInService();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Way 3)&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Client {\n    Service service;\n    public Client() {\n        service = new Service();\n    }\n    public void doSomeThingInClient() {\n        service.doSomeThingInService();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;1) 2) 3) Using&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Client client = new Client();\nclient.doSomeThingInService();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Simple&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Hard for test &lt;code&gt;Client&lt;/code&gt; class&lt;/li&gt;\n&lt;li&gt;When we change &lt;code&gt;Service&lt;/code&gt; constructor, we need to change code in all place create &lt;code&gt;Service&lt;/code&gt; object&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Use Dependency Injection&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Way 1)&lt;/strong&gt; Constructor injection&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Client {\n    Service service;\n\n    Client(Service service) {\n        this.service = service;\n    }\n\n    // Example Client has 2 dependency \n    // Client(Service service, IDatabas database) {\n    //    this.service = service;\n    //    this.database = database;\n    // }\n\n    public void doSomeThingInClient() {\n        service.doSomeThingInService();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Using&lt;/em&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Client client = new Client(new Service());\n// Client client = new Client(new Service(), new SqliteDatabase());\nclient.doSomeThingInClient();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Way 2)&lt;/strong&gt; Setter injection&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Client {\n    Service service;\n\n    public void setService(Service service) {\n        this.service = service;\n    }\n\n    public void doSomeThingInClient() {\n        service.doSomeThingInService();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Using&lt;/em&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Client client = new Client();\nclient.setService(new Service());\nclient.doSomeThingInClient();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Way 3)&lt;/strong&gt; Interface injection&lt;/p&gt;\n\n&lt;p&gt;Check &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot; rel=&quot;noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Dependency_injection&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;=== &lt;/p&gt;\n\n&lt;p&gt;Now, this code is already follow &lt;code&gt;Dependency Injection&lt;/code&gt; and it is easier for test &lt;code&gt;Client&lt;/code&gt; class.&lt;br&gt;\nHowever, we still use &lt;code&gt;new Service()&lt;/code&gt; many time and it is not good when change &lt;code&gt;Service&lt;/code&gt; constructor. To prevent it, we can use DI injector like&lt;br&gt;\n1) Simple manual &lt;code&gt;Injector&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Injector {\n    public static Service provideService(){\n        return new Service();\n    }\n\n    public static IDatabase provideDatatBase(){\n        return new SqliteDatabase();\n    }\n    public static ObjectA provideObjectA(){\n        return new ObjectA(provideService(...));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Service service = Injector.provideService();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2) Use library: For Android &lt;a href=&quot;https://github.com/google/dagger&quot; rel=&quot;noreferrer&quot;&gt;dagger2&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Make test easier&lt;/li&gt;\n&lt;li&gt;When you change the &lt;code&gt;Service&lt;/code&gt;, you only need to change it in Injector class&lt;/li&gt;\n&lt;li&gt;If you use use &lt;code&gt;Constructor Injection&lt;/code&gt;, when you look at constructor of &lt;code&gt;Client&lt;/code&gt;, you will see how many dependency of &lt;code&gt;Client&lt;/code&gt; class&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt; &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you use use &lt;code&gt;Constructor Injection&lt;/code&gt;, the &lt;code&gt;Service&lt;/code&gt; object is created when &lt;code&gt;Client&lt;/code&gt; created, sometime we use function in &lt;code&gt;Client&lt;/code&gt; class without use &lt;code&gt;Service&lt;/code&gt; so created &lt;code&gt;Service&lt;/code&gt; is wasted&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Dependency Injection definition&lt;/h3&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot; rel=&quot;noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Dependency_injection&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A dependency is an object that can be used (&lt;code&gt;Service&lt;/code&gt;)&lt;br&gt;\n  An injection is the passing of a dependency (&lt;code&gt;Service&lt;/code&gt;) to a dependent object (&lt;code&gt;Client&lt;/code&gt;) that would use it&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h2&gt;What is dependency Injection?&lt;/h2&gt;\n\n&lt;p&gt;Dependency Injection(DI) means to decouple the objects which are dependent on each other. Say object A is dependent on Object B so the idea is to decouple these object from each other. We dont need to hard code the object using new keyword rather sharing dependencies to objects at runtime in spite of compile time.\nIf we talk about &lt;/p&gt;\n\n&lt;h2&gt;How Dependency Injection works in Spring:&lt;/h2&gt;\n\n&lt;p&gt;We dont need to hard code the object using new keyword rather define the bean dependency in the configuration file. The spring container will be responsible for hooking up all.&lt;/p&gt;\n\n&lt;h2&gt;Inversion of Control (IOC)&lt;/h2&gt;\n\n&lt;p&gt;IOC is a general concept and it can be expressed in many different ways and Dependency Injection is one concrete example of IOC.&lt;/p&gt;\n\n&lt;h2&gt;Two types of Dependency Injection:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Constructor Injection&lt;/li&gt;\n&lt;li&gt;Setter Injection&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;1.    Constructor-based dependency injection:&lt;/h2&gt;\n\n&lt;p&gt;Constructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, each representing a dependency on other class.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Triangle {\n\nprivate String type;\n\npublic String getType(){\n    return type;\n }\n\npublic Triangle(String type){   //constructor injection\n    this.type=type;\n }\n}\n&amp;lt;bean id=triangle&quot; class =&quot;com.test.dependencyInjection.Triangle&quot;&amp;gt;\n        &amp;lt;constructor-arg value=&quot;20&quot;/&amp;gt;\n  &amp;lt;/bean&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;2.    Setter-based dependency injection:&lt;/h2&gt;\n\n&lt;p&gt;Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Triangle{\n\n private String type;\n\n public String getType(){\n    return type;\n  }\n public void setType(String type){          //setter injection\n    this.type = type;\n  }\n }\n\n&amp;lt;!-- setter injection --&amp;gt;\n &amp;lt;bean id=&quot;triangle&quot; class=&quot;com.test.dependencyInjection.Triangle&quot;&amp;gt;\n        &amp;lt;property name=&quot;type&quot; value=&quot;equivialteral&quot;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NOTE:\nIt is a good rule of thumb to use constructor arguments for mandatory dependencies and setters for optional dependencies. Note that the if we use annotation based than @Required annotation on a setter can be used to make setters as a required dependencies.&lt;/p&gt;\n    ","\n&lt;p&gt;The best analogy I can think of is the surgeon and his assistant(s) in an operation theater, where the surgeon is the main person and his assistant who provides the various surgical components when he needs it so that the surgeon can concentrate on the one thing he does best (surgery). Without the assistant the surgeon has to get the components himself every time he needs one.&lt;/p&gt;\n\n&lt;p&gt;DI for short, is a technique to remove a common additional responsibility (burden) on components to fetch the dependent components, by providing them to it.&lt;/p&gt;\n\n&lt;p&gt;DI brings you closer to the Single Responsibility (SR) principle, like the &lt;code&gt;surgeon who can concentrate on surgery&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;When to use DI : I would recommend using DI in almost all production projects ( small/big), particularly in ever changing business environments :)&lt;/p&gt;\n\n&lt;p&gt;Why : Because you want your code to be easily testable, mockable etc so that you can quickly test your changes and push it to the market. Besides why would you not when you there are lots of awesome free tools/frameworks to support you in your journey to a codebase where you have more control.&lt;/p&gt;\n    ","\n&lt;p&gt;It means that objects should only have as many dependencies as is needed to do their job and the dependencies should be few. Furthermore, an objects dependencies should be on interfaces and not on concrete objects, when possible. (A concrete object is any object created with the keyword new.) Loose coupling promotes greater reusability, easier maintainability, and allows you to easily provide mock objects in place of expensive services.&lt;/p&gt;\n\n&lt;p&gt;The Dependency Injection (DI) is also known as Inversion of Control (IoC), can be used as a technique for encouraging this loose coupling.&lt;/p&gt;\n\n&lt;p&gt;There are two primary approaches to implementing DI:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Constructor injection &lt;/li&gt;\n&lt;li&gt;Setter injection&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Constructor injection&lt;/h2&gt;\n\n&lt;p&gt;Its the technique of passing objects dependencies to its constructor.&lt;/p&gt;\n\n&lt;p&gt;Note that the constructor accepts an interface and not concrete object. Also, note that an exception is thrown if the orderDao parameter is null. This emphasizes the importance of receiving a valid dependency. Constructor Injection is, in my opinion, the preferred mechanism for giving an object its dependencies. It is clear to the developer while invoking the object which dependencies need to be given to the Person object for proper execution.&lt;/p&gt;\n\n&lt;h2&gt;Setter Injection&lt;/h2&gt;\n\n&lt;p&gt;But consider the following example Suppose you have a class with ten methods that have no dependencies, but youre adding a new method that does have a dependency on IDAO. You could change the constructor to use Constructor Injection, but this may force you to changes to all constructor calls all over the place. Alternatively, you could just add a new constructor that takes the dependency, but then how does a developer easily know when to use one constructor over the other. Finally, if the dependency is very expensive to create, why should it be created and passed to the constructor when it may only be used rarely? Setter Injection is another DI technique that can be used in situations such as this.&lt;/p&gt;\n\n&lt;p&gt;Setter Injection does not force dependencies to be passed to the constructor. Instead, the dependencies are set onto public properties exposed by the object in need. As implied previously, the primary motivators for doing this include:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Supporting dependency injection without having to modify the constructor of a legacy class.&lt;/li&gt;\n&lt;li&gt;Allowing expensive resources or services to be created as late as possible and only when needed.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here is the example of how the above code would look like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Person {\n    public Person() {}\n\n    public IDAO Address {\n        set { addressdao = value; }\n        get {\n            if (addressdao == null)\n              throw new MemberAccessException(&quot;addressdao&quot; +\n                             &quot; has not been initialized&quot;);\n            return addressdao;\n        }\n    }\n\n    public Address GetAddress() {\n       // ... code that uses the addressdao object\n       // to fetch address details from the datasource ...\n    }\n\n    // Should not be called directly;\n    // use the public property instead\n    private IDAO addressdao;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know there are already many answers, but I found this very helpful: &lt;a href=&quot;http://tutorials.jenkov.com/dependency-injection/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://tutorials.jenkov.com/dependency-injection/index.html&lt;/a&gt; &lt;/p&gt;\n\n&lt;h3&gt;No Dependency:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyDao&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataSourceImpl&lt;/span&gt;(\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;driver&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//data access methods...&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;hljs-title function_&quot;&gt;readPerson&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primaryKey)&lt;/span&gt; {...}     \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Dependency:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyDao&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyDao&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String driver, String url, String user, String password)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.dataSource = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataSourceImpl&lt;/span&gt;(driver, url, user, password);\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//data access methods...&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;hljs-title function_&quot;&gt;readPerson&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primaryKey)&lt;/span&gt; {...}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice how the &lt;code&gt;DataSourceImpl&lt;/code&gt; instantiation is moved into a constructor. The constructor takes four parameters which are the four values needed by the &lt;code&gt;DataSourceImpl&lt;/code&gt;. Though the &lt;code&gt;MyDao&lt;/code&gt; class still depends on these four values, it no longer satisfies these dependencies itself. They are provided by whatever class creating a &lt;code&gt;MyDao&lt;/code&gt; instance.&lt;/p&gt;\n    ","\n&lt;p&gt;I think since everyone has written for DI, let me ask a few questions..&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;When you have a configuration of DI where all the actual implementations(not interfaces) that are going to be injected into a class (for e.g services to a controller) why is that not some sort of hard-coding? &lt;/li&gt;\n&lt;li&gt;What if I want to change the object at runtime? For example, my config already says when I instantiate MyController, inject for FileLogger as ILogger. But I might want to inject DatabaseLogger. &lt;/li&gt;\n&lt;li&gt;Every time I want to change what objects my AClass needs, I need to now look into two places - The class itself and the configuration file. How does that make life easier?&lt;/li&gt;\n&lt;li&gt;If Aproperty of AClass is not injected, is it harder to mock it out? &lt;/li&gt;\n&lt;li&gt;Going back to the first question. If using new object() is bad, how come we inject the implementation and not the interface? I think a lot of you are saying we&apos;re in fact injecting the interface but the configuration makes you specify the implementation of that interface ..not at runtime .. it is hardcoded during compile time.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This is based on the answer @Adam N posted.&lt;/p&gt;\n\n&lt;p&gt;Why does PersonService no longer have to worry about GroupMembershipService? You just mentioned GroupMembership has multiple things(objects/properties) it depends on. If GMService was required in PService, you&apos;d have it as a property. You can mock that out regardless of whether you injected it or not. The only time I&apos;d like it to be injected is if GMService had more specific child classes, which you wouldn&apos;t know until runtime. Then you&apos;d want to inject the subclass. Or if you wanted to use that as either singleton or prototype. To be honest, the configuration file has everything hardcoded as far as what subclass for a type (interface) it is going to inject during compile time.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/dependency-injection-makes&quot; rel=&quot;nofollow noreferrer&quot;&gt;A nice comment by Jose Maria Arranz on DI&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;DI increases cohesion by removing any need to determine the direction of dependency and write any glue code.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;False. The direction of dependencies is in XML form or as annotations, your dependencies are written as XML code and annotations. XML and annotations ARE source code.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;DI reduces coupling by making all of your components modular (i.e. replaceable) and have well-defined interfaces to each other.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;False. You do not need a DI framework to build a modular code based on interfaces.&lt;/p&gt;\n\n&lt;p&gt;About replaceable: with a very simple .properties archive and Class.forName you can define which classes can change. If ANY class of your code can be changed, Java is not for you, use an scripting language.  By the way: annotations cannot be changed without recompiling.&lt;/p&gt;\n\n&lt;p&gt;In my opinion there is one only reason for DI frameworks: boiler plate reduction. With a well done factory system you can do the same, more controlled and more predictable as your preferred DI framework, DI frameworks promise code reduction (XML and annotations are source code too). The problem is this boiler plate reduction is just real in very very simple cases (one instance-per class and similar), sometimes in the real world picking the appropriated service object is not as easy as mapping a class to a singleton object.&lt;/p&gt;\n    ","\n&lt;p&gt;The popular answers are unhelpful, because they define dependency injection in a way that isn&apos;t useful. Let&apos;s agree that by &quot;dependency&quot; we mean some pre-existing other object that our object X needs. But we don&apos;t say we&apos;re doing &quot;dependency injection&quot; when we say&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$foo = Foo-&amp;gt;new($bar);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We just call that passing parameters into the constructor. We&apos;ve been doing that regularly ever since constructors were invented.&lt;/p&gt;\n\n&lt;p&gt;&quot;Dependency injection&quot; is considered a type of &quot;inversion of control&quot;, which means that some logic is taken out of the caller. That isn&apos;t the case when the caller passes in parameters, so if that were DI, DI would not imply inversion of control.&lt;/p&gt;\n\n&lt;p&gt;DI means there is an intermediate level between the caller and the constructor which manages dependencies. A Makefile is a simple example of dependency injection. The &quot;caller&quot; is the person typing &quot;make bar&quot; on the command line, and the &quot;constructor&quot; is the compiler. The Makefile specifies that bar depends on foo, and it does a&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;gcc -c foo.cpp; gcc -c bar.cpp\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before doing a&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;gcc foo.o bar.o -o bar\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The person typing &quot;make bar&quot; doesn&apos;t need to know that bar depends on foo. The dependency was injected between &quot;make bar&quot; and gcc.&lt;/p&gt;\n\n&lt;p&gt;The main purpose of the intermediate level is not just to pass in the dependencies to the constructor, but to list all the dependencies in &lt;em&gt;just one place&lt;/em&gt;, and to hide them from the coder (not to make the coder provide them).&lt;/p&gt;\n\n&lt;p&gt;Usually the intermediate level provides factories for the constructed objects, which must provide a role that each requested object type must satisfy. That&apos;s because by having an intermediate level that hides the details of construction, you&apos;ve already incurred the abstraction penalty imposed by factories, so you might as well use factories.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; means a way (actually &lt;strong&gt;any-way&lt;/strong&gt;) for one part of code (e.g a class) to have access to dependencies (other parts of code, e.g other classes, it depends upon) in a modular way without them being hardcoded (so they can change or be overriden freely, or even be loaded at another time, as needed)&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(and ps , yes it has become an overly-hyped 25$ name for a rather simple, concept)&lt;/em&gt;, my &lt;code&gt;.25&lt;/code&gt; cents&lt;/p&gt;\n    ","\n&lt;p&gt;From the Book, &apos;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1617290068&quot; rel=&quot;noreferrer&quot;&gt;Well-Grounded Java Developer: Vital techniques of Java 7 and polyglot programming&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;DI is a particular form of IoC, whereby the process of finding your dependencies is\n  outside the direct control of your currently executing code.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Dependency injection is one possible solution to what could generally be termed the &quot;Dependency Obfuscation&quot; requirement. Dependency Obfuscation is a method of taking the &apos;obvious&apos; nature out of the process of providing a dependency to a class that requires it and therefore obfuscating, in some way, the provision of said dependency to said class. This is not necessarily a bad thing. In fact, by obfuscating the manner by which a dependency is provided to a class then something outside the class is responsible for creating the dependency which means, in various scenarios, a different implementation of the dependency can be supplied to the class without making any changes to the class. This is great for switching between production and testing modes (eg., using a &apos;mock&apos; service dependency).&lt;/p&gt;\n\n&lt;p&gt;Unfortunately the bad part is that some people have assumed you need a specialized framework to do dependency obfuscation and that you are somehow a &apos;lesser&apos; programmer if you choose not to use a particular framework to do it. Another, extremely disturbing myth, believed by many, is that dependency injection is the only way of achieving dependency obfuscation. This is demonstrably and historically and obviously 100% wrong but you will have trouble convincing some people that there are alternatives to dependency injection for your dependency obfuscation requirements.&lt;/p&gt;\n\n&lt;p&gt;Programmers have understood the dependency obfuscation requirement for years and many alternative solutions have evolved both before and after dependency injection was conceived. There are Factory patterns but there are also many options using ThreadLocal where no injection to a particular instance is needed - the dependency is effectively injected into the thread which has the benefit of making the object available (via convenience static getter methods) to &lt;em&gt;any&lt;/em&gt; class that requires it without having to add annotations to the classes that require it and set up intricate XML &apos;glue&apos; to make it happen. When your dependencies are required for persistence (JPA/JDO or whatever) it allows you to achieve &apos;tranaparent persistence&apos; much easier and with domain model and business model classes made up purely of POJOs (i.e. no framework specific/locked in annotations).&lt;/p&gt;\n    ","\n&lt;p&gt;Dependency Injection for 5 year olds.&lt;/p&gt;\n\n&lt;p&gt;When you go and get things out of the refrigerator for yourself, you can cause problems. You might leave the door open, you might get something Mommy or Daddy doesn&apos;t want you to have. You might be even looking for something we don&apos;t even have or which has expired.&lt;/p&gt;\n\n&lt;p&gt;What you should be doing is stating a need, &quot;I need something to drink with lunch,&quot; and then we will make sure you have something when you sit down to eat.&lt;/p&gt;\n    ","\n&lt;p&gt;In simple words dependency injection (DI) is the way to remove dependencies or tight coupling between different object. Dependency Injection gives a cohesive behavior to each object. &lt;/p&gt;\n\n&lt;p&gt;DI is the implementation of IOC principal of Spring which says &quot;Don&apos;t call us we will call you&quot;. Using dependency injection programmer doesn&apos;t need to create object using the new keyword. &lt;/p&gt;\n\n&lt;p&gt;Objects are once loaded in Spring container and then we reuse them whenever we need them by fetching those objects from Spring container using getBean(String beanName) method.&lt;/p&gt;\n    ","\n&lt;p&gt;from Book &lt;strong&gt;Apress.Spring.Persistence.with.Hibernate.Oct.2010&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The purpose of dependency injection is to decouple the work of\n  resolving external software components from your application business\n  logic.Without dependency injection, the details of how a component\n  accesses required services can get muddled in with the components\n  code. This not only increases the potential for errors, adds code\n  bloat, and magnifies maintenance complexities; it couples components\n  together more closely, making it difficult to modify dependencies when\n  refactoring or testing.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Dependency Injection (DI) is part of Dependency Inversion Principle (DIP) practice, which is also called Inversion of Control (IoC). Basically you need to do DIP because you want to make your code more modular and unit testable, instead of just one monolithic system. So you start identifying parts of the code that can be separated from the class and abstracted away. Now the implementation of the abstraction need to be injected from outside of the class. Normally this can be done via constructor. So you create a constructor that accepts the abstraction as a parameter, and this is called dependency injection (via constructor). For more explanation about DIP, DI, and IoC container you can read &lt;a href=&quot;http://kusnaditjung.blogspot.co.uk/2016/05/dependency-inversion-principle-dip.html&quot; rel=&quot;nofollow&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Dependency Injection (DI) is one from Design Patterns, which uses the basic feature of OOP - the relationship in one object with another object. While inheritance inherits one object to do more complex and specific another object, relationship or association simply creates a pointer to another object from one object using attribute. The power of DI is in combination with other features of OOP as are interfaces and hiding code.\nSuppose, we have a customer (subscriber) in the library, which can borrow only one book for simplicity.&lt;/p&gt;\n\n&lt;p&gt;Interface of book:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package com.deepam.hidden;\n\npublic interface BookInterface {\n\npublic BookInterface setHeight(int height);\npublic BookInterface setPages(int pages);   \npublic int getHeight();\npublic int getPages();  \n\npublic String toString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Next we can have many kind of books; one of type is fiction:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package com.deepam.hidden;\n\npublic class FictionBook implements BookInterface {\nint height = 0; // height in cm\nint pages = 0; // number of pages\n\n/** constructor */\npublic FictionBook() {\n    // TODO Auto-generated constructor stub\n}\n\n@Override\npublic FictionBook setHeight(int height) {\n  this.height = height;\n  return this;\n}\n\n@Override\npublic FictionBook setPages(int pages) {\n  this.pages = pages;\n  return this;      \n}\n\n@Override\npublic int getHeight() {\n    // TODO Auto-generated method stub\n    return height;\n}\n\n@Override\npublic int getPages() {\n    // TODO Auto-generated method stub\n    return pages;\n}\n\n@Override\npublic String toString(){\n    return (&quot;height: &quot; + height + &quot;, &quot; + &quot;pages: &quot; + pages);\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now subscriber can have association to the book:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package com.deepam.hidden;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\npublic class Subscriber {\nBookInterface book;\n\n/** constructor*/\npublic Subscriber() {\n    // TODO Auto-generated constructor stub\n}\n\n// injection I\npublic void setBook(BookInterface book) {\n    this.book = book;\n}\n\n// injection II\npublic BookInterface setBook(String bookName) {\n    try {\n        Class&amp;lt;?&amp;gt; cl = Class.forName(bookName);\n        Constructor&amp;lt;?&amp;gt; constructor = cl.getConstructor(); // use it for parameters in constructor\n        BookInterface book = (BookInterface) constructor.newInstance();\n        //book = (BookInterface) Class.forName(bookName).newInstance();\n    } catch (InstantiationException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (NoSuchMethodException e) {\n        e.printStackTrace();\n    } catch (SecurityException e) {\n        e.printStackTrace();\n    } catch (IllegalArgumentException e) {\n        e.printStackTrace();\n    } catch (InvocationTargetException e) {\n        e.printStackTrace();\n    }\n    return book;\n}\n\npublic BookInterface getBook() {\n  return book;\n}\n\npublic static void main(String[] args) {\n\n}\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All the three classes can be hidden for it&apos;s own implementation. Now we can use this code for DI:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package com.deepam.implement;\n\nimport com.deepam.hidden.Subscriber;\nimport com.deepam.hidden.FictionBook;\n\npublic class CallHiddenImplBook {\n\npublic CallHiddenImplBook() {\n    // TODO Auto-generated constructor stub\n}\n\npublic void doIt() {\n    Subscriber ab = new Subscriber();\n\n    // injection I\n    FictionBook bookI = new FictionBook();\n    bookI.setHeight(30); // cm\n    bookI.setPages(250);\n    ab.setBook(bookI); // inject\n    System.out.println(&quot;injection I &quot; + ab.getBook().toString());\n\n    // injection II\n    FictionBook bookII = ((FictionBook) ab.setBook(&quot;com.deepam.hidden.FictionBook&quot;)).setHeight(5).setPages(108); // inject and set\n    System.out.println(&quot;injection II &quot; + ab.getBook().toString());      \n}\n\npublic static void main(String[] args) {\n    CallHiddenImplBook kh = new CallHiddenImplBook();\n    kh.doIt();\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are many different ways how to use dependency injection. It is possible to combine it with Singleton, etc., but still in basic it is only association realized by creating attribute of object type inside another object.\nThe usefulness is only and only in feature, that code, which we should write again and again is always prepared and done for us forward. This is why DI so closely binded with Inversion of Control (IoC) which means, that our program passes control another running module, which does injections of beans to our code. (Each object, which can be injected can be signed or considered as a Bean.) For example in Spring it is done by creating and initialization &lt;em&gt;ApplicationContext&lt;/em&gt; container, which does this work for us. We simply in our code create the Context and invoke initialization the beans. In that moment injection has been done automatically.&lt;/p&gt;\n    ","\n&lt;p&gt;I would propose a slightly different, short and precise definition of what Dependency Injection is, focusing on the primary goal, not on the technical means (following along from &lt;a href=&quot;https://blog.softwaremill.com/what-is-dependency-injection-8c9e7805502f&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Dependency Injection is the process of creating the static, stateless\n  graph of service objects, where each service is parametrised by its\n  dependencies.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The objects that we create in our applications (regardless if we use Java, C# or other object-oriented language) usually fall into one of two categories: stateless, static and global service objects (modules), and stateful, dynamic and local data objects.&lt;/p&gt;\n\n&lt;p&gt;The module graph - the graph of service objects - is typically created on application startup. This can be done using a container, such as Spring, but can also be done manually, by passing parameters to object constructors. Both ways have their pros and cons, but a framework definitely isnt necessary to use DI in your application.&lt;/p&gt;\n\n&lt;p&gt;One requirement is that the services must be parametrised by their dependencies. What this means exactly depends on the language and approach taken in a given system. Usually, this takes the form of constructor parameters, but using setters is also an option. This also means that the dependencies of a service are hidden (when invoking a service method) from the users of the service.&lt;/p&gt;\n\n&lt;p&gt;When to use? I would say whenever the application is large enough that encapsulating logic into separate modules, with a dependency graph between the modules gives a gain in readability and explorability of the code.&lt;/p&gt;\n    "],"429":["\n&lt;p&gt;The C standard defines the &lt;code&gt;[]&lt;/code&gt; operator as follows:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a[b] == *(a + b)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Therefore &lt;code&gt;a[5]&lt;/code&gt; will evaluate to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;*(a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;code&gt;5[a]&lt;/code&gt; will evaluate to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;*(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is a pointer to the first element of the array. &lt;code&gt;a[5]&lt;/code&gt; is the value that&apos;s 5 &lt;strong&gt;elements&lt;/strong&gt; further from &lt;code&gt;a&lt;/code&gt;, which is the same as &lt;code&gt;*(a + 5)&lt;/code&gt;, and from elementary school math we know those are equal (addition is &lt;a href=&quot;https://en.wikipedia.org/wiki/commutative&quot; rel=&quot;noreferrer&quot;&gt;commutative&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Because array access is defined in terms of pointers.  &lt;code&gt;a[i]&lt;/code&gt; is defined to mean &lt;code&gt;*(a + i)&lt;/code&gt;, which is commutative.&lt;/p&gt;\n    ","\n&lt;p&gt;I think something is being missed by the other answers.&lt;/p&gt;\n\n&lt;p&gt;Yes, &lt;code&gt;p[i]&lt;/code&gt; is by definition equivalent to &lt;code&gt;*(p+i)&lt;/code&gt;, which (because addition is commutative) is equivalent to &lt;code&gt;*(i+p)&lt;/code&gt;, which (again, by the definition of the &lt;code&gt;[]&lt;/code&gt; operator) is equivalent to &lt;code&gt;i[p]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;(And in &lt;code&gt;array[i]&lt;/code&gt;, the array name is implicitly converted to a pointer to the array&apos;s first element.)&lt;/p&gt;\n\n&lt;p&gt;But the commutativity of addition is not all that obvious in this case.&lt;/p&gt;\n\n&lt;p&gt;When both operands are of the same type, or even of different numeric types that are promoted to a common type, commutativity makes perfect sense: &lt;code&gt;x + y == y + x&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;But in this case we&apos;re talking specifically about pointer arithmetic, where one operand is a pointer and the other is an integer. (Integer + integer is a different operation, and pointer + pointer is nonsense.)&lt;/p&gt;\n\n&lt;p&gt;The C standard&apos;s description of the &lt;code&gt;+&lt;/code&gt; operator (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;N1570&lt;/a&gt; 6.5.6) says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For addition, either both operands shall have arithmetic type, or one\n  operand shall be a pointer to a complete object type and the other\n  shall have integer type.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It could just as easily have said:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For addition, either both operands shall have arithmetic type, or &lt;em&gt;the left&lt;/em&gt;\n  operand shall be a pointer to a complete object type and the &lt;em&gt;right operand&lt;/em&gt;\n  shall have integer type.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;in which case both &lt;code&gt;i + p&lt;/code&gt; and &lt;code&gt;i[p]&lt;/code&gt; would be illegal.&lt;/p&gt;\n\n&lt;p&gt;In C++ terms, we really have two sets of overloaded &lt;code&gt;+&lt;/code&gt; operators, which can be loosely described as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;pointer operator+(pointer p, integer i);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;pointer operator+(integer i, pointer p);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;of which only the first is really necessary.&lt;/p&gt;\n\n&lt;p&gt;So why is it this way?&lt;/p&gt;\n\n&lt;p&gt;C++ inherited this definition from C, which got it from B (the commutativity of array indexing is explicitly mentioned in the 1972 &lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/kbman.html&quot;&gt;Users&apos; Reference to B&lt;/a&gt;), which got it from &lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/bcpl.html&quot;&gt;BCPL&lt;/a&gt; (manual dated 1967), which may well have gotten it from even earlier languages (CPL? Algol?).&lt;/p&gt;\n\n&lt;p&gt;So the idea that array indexing is defined in terms of addition, and that addition, even of a pointer and an integer, is commutative, goes back many decades, to C&apos;s ancestor languages.&lt;/p&gt;\n\n&lt;p&gt;Those languages were much less strongly typed than modern C is. In particular, the distinction between pointers and integers was often ignored. (Early C programmers sometimes used pointers as unsigned integers, before the &lt;code&gt;unsigned&lt;/code&gt; keyword was added to the language.) So the idea of making addition non-commutative because the operands are of different types probably wouldn&apos;t have occurred to the designers of those languages. If a user wanted to add two &quot;things&quot;, whether those &quot;things&quot; are integers, pointers, or something else, it wasn&apos;t up to the language to prevent it.&lt;/p&gt;\n\n&lt;p&gt;And over the years, any change to that rule would have broken existing code (though the 1989 ANSI C standard might have been a good opportunity).&lt;/p&gt;\n\n&lt;p&gt;Changing C and/or C++ to require putting the pointer on the left and the integer on the right might break some existing code, but there would be no loss of real expressive power.&lt;/p&gt;\n\n&lt;p&gt;So now we have &lt;code&gt;arr[3]&lt;/code&gt; and &lt;code&gt;3[arr]&lt;/code&gt; meaning exactly the same thing, though the latter form should never appear outside the &lt;a href=&quot;http://ioccc.org/&quot;&gt;IOCCC&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;And, of course&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;]) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The main reason for this was that back in the 70&apos;s when C was designed, computers didn&apos;t have much memory (64KB was a lot), so the C compiler didn&apos;t do much syntax checking.  Hence &quot;&lt;code&gt;X[Y]&lt;/code&gt;&quot; was rather blindly translated into &quot;&lt;code&gt;*(X+Y)&lt;/code&gt;&quot;  &lt;/p&gt;\n\n&lt;p&gt;This also explains the &quot;&lt;code&gt;+=&lt;/code&gt;&quot; and &quot;&lt;code&gt;++&lt;/code&gt;&quot; syntaxes.  Everything in the form &quot;&lt;code&gt;A = B + C&lt;/code&gt;&quot; had the same compiled form.  But, if B was the same object as A, then an assembly level optimization was available.  But the compiler wasn&apos;t bright enough to recognize it, so the developer had to (&lt;code&gt;A += C&lt;/code&gt;).   Similarly, if &lt;code&gt;C&lt;/code&gt; was &lt;code&gt;1&lt;/code&gt;, a different assembly level optimization was available, and again the developer had to make it explicit, because the compiler didn&apos;t recognize it.   (More recently compilers do, so those syntaxes are largely unnecessary these days)&lt;/p&gt;\n    ","\n&lt;p&gt;One thing no-one seems to have mentioned about Dinah&apos;s problem with &lt;code&gt;sizeof&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;You can only add an integer to a pointer, you can&apos;t add two pointers together. That way when adding a pointer to an integer, or an integer to a pointer, the compiler always knows which bit has a size that needs to be taken into account.&lt;/p&gt;\n    ","\n&lt;p&gt;To answer the question literally. It is not always true that &lt;code&gt;x == x&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; zero = &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; a[] = { &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, zero/zero}; &lt;span class=&quot;hljs-comment&quot;&gt;// NaN&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; (a[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;[a] ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;endl&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;prints&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just find out this ugly syntax could be &quot;useful&quot;, or at least very fun to play with when you want to deal with an array of indexes which refer to positions into the same array. It can replace nested square brackets and make the code more readable !&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[] = { &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; };\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; a / &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; *a;  &lt;span class=&quot;hljs-comment&quot;&gt;//  s == 5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; s ; ++i) {  \n           \n    &lt;span class=&quot;hljs-built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; a[a[a[i]]] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;endl&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ... is equivalent to ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; i[a][a][a] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// but I prefer this one, it&apos;s easier to increase the level of indirection (without loop)&lt;/span&gt;\n    \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, I&apos;m quite sure that there is no use case for that in real code, but I found it interesting anyway :)&lt;/p&gt;\n    ","\n&lt;p&gt;Nice question/answers.&lt;/p&gt;\n\n&lt;p&gt;Just want to point out that C pointers and arrays are not the &lt;em&gt;same&lt;/em&gt;, although in this case the difference is not essential. &lt;/p&gt;\n\n&lt;p&gt;Consider the following declarations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p = a;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &lt;code&gt;a.out&lt;/code&gt;, the symbol &lt;code&gt;a&lt;/code&gt; is at an address that&apos;s the beginning of the array, and symbol &lt;code&gt;p&lt;/code&gt; is at an address where a pointer is stored, and the value of the pointer at that memory location is the beginning of the array. &lt;/p&gt;\n    ","\n&lt;p&gt;For pointers in C, we have&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] == *(a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and also&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;[a] == *(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hence it is true that &lt;code&gt;a[5] == 5[a].&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Not an answer, but just some food for thought.\nIf class is having overloaded index/subscript operator, the expression &lt;code&gt;0[x]&lt;/code&gt; will not work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sub&lt;/span&gt;\n{&lt;/span&gt;\npublic:\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; operator [](&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; nIndex)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }   \n};\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    Sub s;\n    s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;[s]; &lt;span class=&quot;hljs-comment&quot;&gt;// ERROR &lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since we dont have access to &lt;strong&gt;int&lt;/strong&gt; class, this cannot be done:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;\n{&lt;/span&gt;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; operator[](&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; Sub&amp;amp;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It has very good explanation in &lt;em&gt;A TUTORIAL ON POINTERS AND ARRAYS IN C&lt;/em&gt;\nby Ted Jensen.&lt;/p&gt;\n\n&lt;p&gt;Ted Jensen explained it as:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In fact, this is true, i.e wherever one writes &lt;code&gt;a[i]&lt;/code&gt; it can be\n  replaced with &lt;code&gt;*(a + i)&lt;/code&gt;  without any problems. In fact, the compiler\n  will create the same code in either case. Thus we see that pointer\n  arithmetic is the same thing as array indexing. Either syntax produces\n  the same result.&lt;/p&gt;\n  \n  &lt;p&gt;This is NOT saying that pointers and arrays\n  are the same thing, they are not. We are only saying that to identify\n  a given element of an array we have the choice of two syntaxes, one\n  using array indexing and the other using pointer arithmetic, which\n  yield identical results.&lt;/p&gt;\n  \n  &lt;p&gt;Now, looking at this last\n  expression, part of it.. &lt;code&gt;(a + i)&lt;/code&gt;, is a simple addition using the +\n  operator and the rules of C state that such an expression is\n  commutative. That is (a + i) is identical to &lt;code&gt;(i + a)&lt;/code&gt;. Thus we could\n  write &lt;code&gt;*(i + a)&lt;/code&gt; just as easily as &lt;code&gt;*(a + i)&lt;/code&gt;.\n  But &lt;code&gt;*(i + a)&lt;/code&gt; could have come from &lt;code&gt;i[a]&lt;/code&gt; ! From all of this comes the curious\n  truth that if:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;writing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;is the same as writing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;[a] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I know the question is answered, but I couldn&apos;t resist sharing this explanation.&lt;/p&gt;\n\n&lt;p&gt;I remember Principles of Compiler design,\nLet&apos;s assume &lt;code&gt;a&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; array and size of &lt;code&gt;int&lt;/code&gt; is 2 bytes,\n&amp;amp; Base address for &lt;code&gt;a&lt;/code&gt; is 1000.&lt;/p&gt;\n\n&lt;p&gt;How &lt;code&gt;a[5]&lt;/code&gt; will work -&amp;gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Base Address of your Array a + (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*size of(data type &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; a))\ni.e. &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; + (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1010&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, &lt;/p&gt;\n\n&lt;p&gt;Similarly when the c code is broken down into 3-address code, \n&lt;code&gt;5[a]&lt;/code&gt; will become -&amp;gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Base Address of your Array a + (size of(data type &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; a)*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\ni.e. &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; + (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1010&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So basically both the statements are pointing to the same location in memory and hence, &lt;code&gt;a[5] = 5[a]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This explanation is also the reason why negative indexes in arrays work in C.&lt;/p&gt;\n\n&lt;p&gt;i.e. if I access &lt;code&gt;a[-5]&lt;/code&gt; it will give me&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Base Address of your Array a + (&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt; * size of(data type &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; a))\ni.e. &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; + (&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;990&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will return me object at location 990.&lt;/p&gt;\n    ","\n&lt;p&gt;in c compiler &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;a[i]\ni[a]\n*(a+i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;are different ways to refer to  an element in an array ! (NOT AT ALL WEIRD)&lt;/p&gt;\n    ","\n&lt;p&gt;In C arrays, &lt;code&gt;arr[3]&lt;/code&gt; and &lt;code&gt;3[arr]&lt;/code&gt; are the same, and their equivalent pointer notations are &lt;code&gt;*(arr + 3)&lt;/code&gt; to &lt;code&gt;*(3 + arr)&lt;/code&gt;. But on the contrary &lt;code&gt;[arr]3&lt;/code&gt; or &lt;code&gt;[3]arr&lt;/code&gt; is not correct and will result into syntax error, as &lt;code&gt;(arr + 3)*&lt;/code&gt; and &lt;code&gt;(3 + arr)*&lt;/code&gt; are not valid expressions. The reason is dereference operator should be placed before the address yielded by the expression, not after the address.&lt;/p&gt;\n    ","\n&lt;p&gt;A little bit of history now.  Among other languages, BCPL had a fairly major influence on C&apos;s early development.  If you declared an array in BCPL with something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;let V = vec &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;that actually allocated 11 words of memory, not 10.  Typically V was the first, and contained the address of the immediately following word.  So unlike C, naming V went to that location and picked up the address of the zeroeth element of the array.  Therefore array indirection in BCPL, expressed as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;let J = V!&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;really did have to do &lt;code&gt;J = !(V + 5)&lt;/code&gt; (using BCPL syntax) since it was necessary to fetch V to get the base address of the array.  Thus &lt;code&gt;V!5&lt;/code&gt; and &lt;code&gt;5!V&lt;/code&gt; were synonymous.  As an anecdotal observation, WAFL (Warwick Functional Language) was written in BCPL, and to the best of my memory tended to use the latter syntax rather than the former for accessing the nodes used as data storage.  Granted this is from somewhere between 35 and 40 years ago, so my memory is a little rusty. :)&lt;/p&gt;\n\n&lt;p&gt;The innovation of dispensing with the extra word of storage and having the compiler insert the base address of the array when it was named came later.  According to the C history paper this happened at about the time structures were added to C.&lt;/p&gt;\n\n&lt;p&gt;Note that &lt;code&gt;!&lt;/code&gt; in BCPL was both a unary prefix operator and a binary infix operator, in both cases doing indirection. just that the binary form included an addition of the two operands before doing the indirection.  Given the word oriented nature of BCPL (and B) this actually made a lot of sense.  The restriction of &quot;pointer and integer&quot; was made necessary in C when it gained data types, and &lt;code&gt;sizeof&lt;/code&gt; became a thing.&lt;/p&gt;\n    ","\n&lt;p&gt;Well, this is a feature that is only possible because of the language support.&lt;/p&gt;\n\n&lt;p&gt;The compiler interprets &lt;code&gt;a[i]&lt;/code&gt; as &lt;code&gt;*(a+i)&lt;/code&gt; and the expression &lt;code&gt;5[a]&lt;/code&gt; evaluates to &lt;code&gt;*(5+a)&lt;/code&gt;. Since addition is commutative it turns out that both are equal. Hence the expression evaluates to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In C&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[]={&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;};\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p=a;\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;,*p++);&lt;span class=&quot;hljs-comment&quot;&gt;//output will be 10&lt;/span&gt;\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;,*a++);&lt;span class=&quot;hljs-comment&quot;&gt;//will give an error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Pointer &lt;code&gt;p&lt;/code&gt; is a &quot;variable&quot;, array name &lt;code&gt;a&lt;/code&gt; is a &quot;mnemonic&quot; or &quot;synonym&quot;,\nso &lt;code&gt;p++&lt;/code&gt; is valid but &lt;code&gt;a++&lt;/code&gt; is invalid.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;a[2]&lt;/code&gt; is equals to &lt;code&gt;2[a]&lt;/code&gt; because the internal operation on both of this is &quot;Pointer Arithmetic&quot; internally calculated as &lt;code&gt;*(a+2)&lt;/code&gt; equals &lt;code&gt;*(2+a)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Because C compiler always convert array notation in pointer notation.\n&lt;code&gt;a[5] = *(a + 5)&lt;/code&gt;  also &lt;code&gt;5[a] = *(5 + a) = *(a + 5)&lt;/code&gt;\nSo, both are equal.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it&apos;s useful to avoid confusing nesting.&lt;/p&gt;\n&lt;p&gt;Would you rather read this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[head].next].prev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;head[&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;].next[&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;].prev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Incidentally, C++ has a similar commutative property for function calls. Rather than writing &lt;code&gt;g(f(x))&lt;/code&gt; as you must in C, you may use member functions to write &lt;code&gt;x.f().g()&lt;/code&gt;. Replace f and g with lookup tables and you can write &lt;code&gt;g[f[x]]&lt;/code&gt; (functional style) or &lt;code&gt;(x[f])[g]&lt;/code&gt; (oop style). The latter gets really nice with structs containing indices: &lt;code&gt;x[xs].y[ys].z[zs]&lt;/code&gt;. Using the more common notation that&apos;s &lt;code&gt;zs[ys[xs[x].y].z]&lt;/code&gt;.&lt;/p&gt;\n    "],"430":["\n&lt;p&gt;You can check directly at the &lt;a href=&quot;http://www.w3.org/TR/CSS21/grammar.html#scanner&quot; rel=&quot;noreferrer&quot;&gt;CSS grammar&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Basically&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt;, a name must begin with an underscore (&lt;code&gt;_&lt;/code&gt;), a hyphen (&lt;code&gt;-&lt;/code&gt;), or a letter(&lt;code&gt;a&lt;/code&gt;&lt;code&gt;z&lt;/code&gt;), followed by any number of hyphens, underscores, letters, or numbers. There is a catch: if the first character is a hyphen, the second character must&lt;sup&gt;2&lt;/sup&gt; be a  letter or underscore, and the name must be at least 2 characters long.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;-?&lt;span class=&quot;hljs-selector-attr&quot;&gt;[_a-zA-Z]&lt;/span&gt;+&lt;span class=&quot;hljs-selector-attr&quot;&gt;[_a-zA-Z0-9-]&lt;/span&gt;*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In short, the previous rule translates to the following, extracted from the &lt;a href=&quot;https://www.w3.org/TR/CSS21/syndata.html#characters&quot; rel=&quot;noreferrer&quot;&gt;W3C spec.&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In CSS, identifiers (including element names, classes, and IDs in\nselectors) can contain only the characters [a-z0-9] and ISO 10646\ncharacters U+00A0 and higher, plus the hyphen (-) and the underscore\n(_); they cannot start with a digit, or a hyphen followed by a digit.\nIdentifiers can also contain escaped characters and any ISO 10646\ncharacter as a numeric code (see next item). For instance, the\nidentifier &quot;B&amp;amp;W?&quot; may be written as &quot;B&amp;amp;W?&quot; or &quot;B\\26 W\\3F&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Identifiers beginning with a hyphen or underscore are typically reserved for browser-specific extensions, as in &lt;code&gt;-moz-opacity&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; It&apos;s all made a bit more complicated by the inclusion of escaped unicode characters (that no one really uses).&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Note that, according to the grammar I linked, a rule starting with TWO hyphens, e.g. &lt;code&gt;--indent1&lt;/code&gt;, is invalid.  However, I&apos;m pretty sure I&apos;ve seen this in practice.&lt;/p&gt;\n    ","\n&lt;p&gt;To my surprise most answers here are wrong. It turns out that:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Any character except NUL is allowed in CSS class names in CSS.&lt;/strong&gt; (If CSS contains NUL (escaped or not), the result is undefined. [&lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#characters&quot; rel=&quot;noreferrer&quot;&gt;CSS-characters&lt;/a&gt;])&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/6592488/8554766&quot;&gt;Mathias Bynens&apos; answer&lt;/a&gt; links to &lt;a href=&quot;http://mathiasbynens.be/notes/css-escapes&quot; rel=&quot;noreferrer&quot;&gt;explanation&lt;/a&gt; and &lt;a href=&quot;http://mathiasbynens.be/demo/crazy-class&quot; rel=&quot;noreferrer&quot;&gt;demos&lt;/a&gt; showing how to use these names. &lt;em&gt;Written down&lt;/em&gt; in CSS code, a class name &lt;em&gt;may need escaping&lt;/em&gt;, but that doesnt change the class name. E.g. an unnecessarily over-escaped representation will look different from other representations of that name, but it still refers to the same class name.&lt;/p&gt;\n\n&lt;p&gt;Most other (programming) languages dont have that concept of escaping variable names (identifiers), so all representations of a variable have to look the same. This is not the case in CSS.&lt;/p&gt;\n\n&lt;p&gt;Note that in HTML there is no way to include &lt;a href=&quot;http://www.w3.org/TR/html/infrastructure.html#space-character&quot; rel=&quot;noreferrer&quot;&gt;space characters (space, tab, line feed, form feed and carriage return)&lt;/a&gt; in a &lt;a href=&quot;http://www.w3.org/TR/html/dom.html#classes&quot; rel=&quot;noreferrer&quot;&gt;class name attribute&lt;/a&gt;, because they already separate classes from each other.&lt;/p&gt;\n\n&lt;p&gt;So, if you need to turn a random string into a CSS class name: take care of NUL and space, and escape (accordingly for CSS or HTML). Done.&lt;/p&gt;\n    ","\n&lt;p&gt;Ive answered your question in-depth here: &lt;a href=&quot;http://mathiasbynens.be/notes/css-escapes&quot; rel=&quot;noreferrer&quot;&gt;http://mathiasbynens.be/notes/css-escapes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The article also explains how to escape any character in CSS (and JavaScript), and I made &lt;a href=&quot;http://mothereff.in/css-escapes#0~!%40%24%25%5E%26%2a%28%29%5f%2B-%3D%2C.%2F%27%3B%3A%22%3F%3E%3C%5B%5D%5C%7B%7D%7C%60%23&quot; rel=&quot;noreferrer&quot;&gt;a handy tool&lt;/a&gt; for this as well. From that page:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If you were to give an element an ID value of &lt;code&gt;~!@$%^&amp;amp;*()_+-=,./&apos;;:&quot;?&amp;gt;&amp;lt;[]{}|`#&lt;/code&gt;, the selector would look like this:&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&amp;lt;style&amp;gt;\n  #\\~\\!\\@\\$\\%\\^\\&amp;amp;\\*\\(\\)\\_\\+-\\=\\,\\.\\/\\&apos;\\;\\:\\&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\?\\&amp;gt;\\&amp;lt;\\[\\]\\\\\\{\\}\\|\\`\\#\n  {\n    background: hotpink;\n  }\n&amp;lt;/style&amp;gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&lt;strong&gt;JavaScript:&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// document.getElementById or similar&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;~!@$%^&amp;amp;*()_+-=,./\\&apos;;:&quot;?&amp;gt;&amp;lt;[]\\\\{}|`#&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// document.querySelector or similar&lt;/span&gt;\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#\\\\~\\\\!\\\\@\\\\$\\\\%\\\\^\\\\&amp;amp;\\\\*\\\\(\\\\)\\\\_\\\\+-\\\\=\\\\,\\\\.\\\\/\\\\\\&apos;\\\\;\\\\:\\\\&quot;\\\\?\\\\&amp;gt;\\\\&amp;lt;\\\\[\\\\]\\\\\\\\\\\\{\\\\}\\\\|\\\\`\\\\#&apos;&lt;/span&gt;);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Read the &lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#characters&quot; rel=&quot;noreferrer&quot;&gt;W3C spec&lt;/a&gt;. (this is CSS 2.1, find the appropriate version for your assumption of browsers)&lt;/p&gt;\n\n&lt;p&gt;edit: relevant paragraph follows:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In CSS, identifiers  (including\n  element names, classes, and IDs in\n  selectors) can contain only the\n  characters [a-z0-9] and ISO 10646\n  characters U+00A1 and higher, plus the\n  hyphen (-) and the underscore (_);\n  they cannot start with a digit, or a\n  hyphen followed by a digit.\n  Identifiers can also contain escaped\n  characters and any ISO 10646 character\n  as a numeric code (see next item). For\n  instance, the identifier &quot;B&amp;amp;W?&quot; may be\n  written as &quot;B\\&amp;amp;W\\?&quot; or &quot;B\\26 W\\3F&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;edit 2: as @mipadi points out in Triptych&apos;s answer, there&apos;s this &lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords&quot; rel=&quot;noreferrer&quot;&gt;caveat&lt;/a&gt;, also in the same webpage:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In CSS, identifiers may begin with &apos;-&apos;\n  (dash) or &apos;_&apos; (underscore). Keywords\n  and property names beginning with &apos;-&apos;\n  or &apos;_&apos; are reserved for\n  vendor-specific extensions. Such\n  vendor-specific extensions should have\n  one of the following formats:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; + vendor identifier + &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; + meaningful &lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; \n&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt; + vendor identifier + &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; + meaningful &lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Example(s):&lt;/p&gt;\n  \n  &lt;p&gt;For example, if XYZ organization added\n  a property to describe the color of\n  the border on the East side of the\n  display, they might call it\n  -xyz-border-east-color.&lt;/p&gt;\n  \n  &lt;p&gt;Other known examples:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt; -moz-&lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;\n -moz-&lt;span class=&quot;hljs-attribute&quot;&gt;border-radius&lt;/span&gt;\n -wap-accesskey\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;An initial dash or underscore is\n  guaranteed never to be used in a\n  property or keyword by any current or\n  future level of CSS. Thus typical CSS\n  implementations may not recognize such\n  properties and may ignore them\n  according to the rules for handling\n  parsing errors. However, because the\n  initial dash or underscore is part of\n  the grammar, CSS 2.1 implementers\n  should always be able to use a\n  CSS-conforming parser, whether or not\n  they support any vendor-specific\n  extensions.&lt;/p&gt;\n  \n  &lt;p&gt;Authors should avoid vendor-specific\n  extensions&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The complete regular expression is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;-&lt;span class=&quot;hljs-string&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;?:&lt;/span&gt;[_a-z]|&lt;span class=&quot;hljs-params&quot;&gt;[\\200-\\377]&lt;/span&gt;|\\\\[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-9a-f]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}(\\r\\n|&lt;span class=&quot;hljs-params&quot;&gt;[ \\t\\r\\n\\f])?&lt;/span&gt;|\\\\[^\\r\\n\\f0-9a-f])(&lt;span class=&quot;hljs-string&quot;&gt;?:&lt;/span&gt;[_a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]|&lt;span class=&quot;hljs-params&quot;&gt;[\\200-\\377]&lt;/span&gt;|\\\\[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-9a-f]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}(\\r\\n|&lt;span class=&quot;hljs-params&quot;&gt;[ \\t\\r\\n\\f])?&lt;/span&gt;|\\\\[^\\r\\n\\f0-9a-f])*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So all of your listed character except &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; are not allowed if used directly. But you can encode them using a backslash &lt;code&gt;foo\\~bar&lt;/code&gt; or using the unicode notation &lt;code&gt;foo\\7E bar&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For those looking for a workaround, you can use an attribute selector, for instance, if your class begins with a number. Change:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;.&lt;span class=&quot;hljs-number&quot;&gt;000000&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;../../images/common/000000-0.8.png&lt;/span&gt;);} &lt;span class=&quot;hljs-comment&quot;&gt;/* DOESN&apos;T WORK!! */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;to this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;000000-8&quot;&lt;/span&gt;]&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;../../images/common/000000-0.8.png&lt;/span&gt;);} &lt;span class=&quot;hljs-comment&quot;&gt;/* WORKS :) */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also, if there are multiple classes, you will need to specify them in selector or use the &lt;code&gt;~=&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[class~=&lt;span class=&quot;hljs-string&quot;&gt;&quot;000000-8&quot;&lt;/span&gt;]&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;../../images/common/000000-0.8.png&lt;/span&gt;);}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Sources:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://benfrain.com/when-and-where-you-can-use-numbers-in-id-and-class-names/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://benfrain.com/when-and-where-you-can-use-numbers-in-id-and-class-names/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21227702/is-there-a-workaround-to-make-css-classes-with-names-that-start-with-numbers-val&quot;&gt;Is there a workaround to make CSS classes with names that start with numbers valid?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;My understanding is that the underscore is technically valid. Check out:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/underscores_in_class_and_id_names&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en/underscores_in_class_and_id_names&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&quot;...errata to the specification published in early 2001 made underscores legal for the first time.&quot;&lt;/p&gt;\n\n&lt;p&gt;The article linked above says never use them, then gives a list of browsers that don&apos;t support them, all of which are, in terms of numbers of users at least, long-redundant.&lt;/p&gt;\n    ","\n&lt;p&gt;For HTML5/CSS3 classes and IDs can start with numbers.&lt;/p&gt;\n    ","\n&lt;p&gt;We can use all characters as class name. Even like &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; Just we have to escape it with &lt;code&gt;\\&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\.&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\&lt;span class=&quot;hljs-selector-id&quot;&gt;#123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\&lt;span class=&quot;hljs-keyword&quot;&gt;@123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: green;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: brown;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\`&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: purple;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.test&lt;/span&gt;\\~&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: tomato;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test.123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test.123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test#123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test#123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test@123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test@123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&amp;lt;123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&amp;lt;123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test`123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test`123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test~123&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test~123&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Going off of @Triptych&apos;s answer, you can use the following 2 regex matches to make a string valid:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[^a-z0-9A-Z_-]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a reverse match that selects anything that isn&apos;t a letter, number, dash or underscore for easy removal.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;^-*&lt;span class=&quot;hljs-selector-attr&quot;&gt;[0-9]&lt;/span&gt;+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This matches 0 or 1 dashes followed by 1 or more numbers at the beginning of a string, also for easy removal.&lt;/p&gt;\n\n&lt;p&gt;How I use it in PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Make alphanumeric with dashes and underscores (removes all other characters)&lt;/span&gt;\n$&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;preg_replace&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/[^a-z0-9A-Z_-]/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, $&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//Classes only begin with an underscore or letter&lt;/span&gt;\n$&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;preg_replace&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/^-*[0-9]+/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, $&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//Make sure the string is 2 or more characters long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt;= strlen($&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;) ? $&lt;span class=&quot;hljs-title&quot;&gt;class&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;&apos;&apos;;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I &lt;strong&gt;would not recommend to use anything except A-z, _- and 0-9&lt;/strong&gt;, while it&apos;s just easier to code with those symbols. Also do not start classes with &lt;code&gt;-&lt;/code&gt; while those classes are usually browser-specific flags. To avoid any issues with IDE autocompletion, less complexity when you may need to generate those class names with some other code for whatever reason. Maybe some transpiling software may not work etc. etc.&lt;/p&gt;\n&lt;p&gt;Yet CSS is quite loose on this. You can use any symbols, even emoji works.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n.{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt; solid blue;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: hidden;\n}\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/oMC5Q.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/oMC5Q.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "]},"page":"37","randomQuestions":[{"title":"scanf() leaves the newline character in the buffer","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202"},{"title":"\"is\" operator behaves unexpectedly with integers","slug":"\"is\"-operator-behaves-unexpectedly-with-integers-1657387563823"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"},{"title":"\"Notice: Undefined variable\", \"Notice: Undefined index\", \"Warning: Undefined array key\", and \"Notice: Undefined offset\" using PHP","slug":"\"notice:-undefined-variable\"-\"notice:-undefined-index\"-\"warning:-undefined-array-key\"-and-\"notice:-undefined-offset\"-using-php-1657384250748"},{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"How do I format a date in JavaScript?","slug":"how-do-i-format-a-date-in-javascript-1657384649498"},{"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894"},{"title":"What is a debugger and how can it help me diagnose problems?","slug":"what-is-a-debugger-and-how-can-it-help-me-diagnose-problems-1657384472469"},{"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"RegEx match open tags except XHTML self-contained tags","slug":"regex-match-open-tags-except-xhtml-self-contained-tags-1657384228245"},{"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"What is the \"N+1 selects problem\" in ORM (Object-Relational Mapping)?","slug":"what-is-the-\"n+1-selects-problem\"-in-orm-(object-relational-mapping)-1657388055597"},{"title":"Why is using 'eval' a bad practice?","slug":"why-is-using-'eval'-a-bad-practice-1657387348760"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"How do you use bcrypt for hashing passwords in PHP? [duplicate]","slug":"how-do-you-use-bcrypt-for-hashing-passwords-in-php-duplicate-1657387318517"}]},"__N_SSG":true}