{"pageProps":{"data":{"count":610,"rows":[{"id":495,"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604","postType":"QUESTION","createdAt":"2022-07-09T17:36:24.000Z","updatedAt":"2022-07-09T17:36:24.000Z","tags":[]},{"id":494,"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803","postType":"QUESTION","createdAt":"2022-07-09T17:36:20.000Z","updatedAt":"2022-07-09T17:36:20.000Z","tags":[{"id":2475,"name":"decorator","slug":"decorator","createdAt":"2022-07-09T17:36:20.000Z","updatedAt":"2022-07-09T17:36:20.000Z","Questions_Tags":{"questionId":494,"tagId":2475}},{"id":2476,"name":"python-decorators","slug":"python-decorators","createdAt":"2022-07-09T17:36:20.000Z","updatedAt":"2022-07-09T17:36:20.000Z","Questions_Tags":{"questionId":494,"tagId":2476}}]},{"id":493,"title":"How can I do a FULL OUTER JOIN in MySQL?","slug":"how-can-i-do-a-full-outer-join-in-mysql-1657388175444","postType":"QUESTION","createdAt":"2022-07-09T17:36:15.000Z","updatedAt":"2022-07-09T17:36:15.000Z","tags":[{"id":2473,"name":"full-outer-join","slug":"full-outer-join","createdAt":"2022-07-09T17:36:15.000Z","updatedAt":"2022-07-09T17:36:15.000Z","Questions_Tags":{"questionId":493,"tagId":2473}}]},{"id":492,"title":"Randomize a List<T>","slug":"randomize-a-listlesstgreater-1657388172793","postType":"QUESTION","createdAt":"2022-07-09T17:36:12.000Z","updatedAt":"2022-07-09T17:36:12.000Z","tags":[{"id":2468,"name":"generic-list","slug":"generic-list","createdAt":"2022-07-09T17:36:12.000Z","updatedAt":"2022-07-09T17:36:12.000Z","Questions_Tags":{"questionId":492,"tagId":2468}}]},{"id":491,"title":"How does JavaScript .prototype work?","slug":"how-does-javascript-.prototype-work-1657388169270","postType":"QUESTION","createdAt":"2022-07-09T17:36:09.000Z","updatedAt":"2022-07-09T17:36:09.000Z","tags":[{"id":2466,"name":"prototype-oriented","slug":"prototype-oriented","createdAt":"2022-07-09T17:36:09.000Z","updatedAt":"2022-07-09T17:36:09.000Z","Questions_Tags":{"questionId":491,"tagId":2466}}]}]},"answers":{"491":["\n&lt;p&gt;In a language implementing classical inheritance like Java, C# or C++ you start by creating a class--a blueprint for your objects--and then you can create new objects from that class or you can extend the class, defining a new class that augments the original class.&lt;/p&gt;\n\n&lt;p&gt;In JavaScript you first create an object (there is no concept of class), then you can augment your own object or create new objects from it. It&apos;s not difficult, but a little foreign and hard to metabolize for somebody used to the classical way.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Define a functional object to hold persons in JavaScript&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Add dynamically to the already defined object a new getter&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Create a new object of type Person&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; john = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Try the getter&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(john.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//If now I modify person, also John gets the updates&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayMyName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, my name is &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;());\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Call the new method on john&lt;/span&gt;\njohn.&lt;span class=&quot;hljs-title function_&quot;&gt;sayMyName&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Until now I&apos;ve been extending the base object, now I create another object and then inheriting from Person.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Create a new object of type Customer by defining its constructor. It&apos;s not &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//related to Person for now.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Now I link the objects and to do so, we link the prototype of Customer to &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//a new instance of Person. The prototype is the base that will be used to &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//construct all new instances and also, will modify dynamically all already &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//constructed objects because in JavaScript objects retain a pointer to the &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();     \n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Now I can call the methods of Person on the Customer, let&apos;s try, first &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//I need to create a Customer.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myCustomer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dream Inc.&apos;&lt;/span&gt;);\nmyCustomer.&lt;span class=&quot;hljs-title function_&quot;&gt;sayMyName&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//If I add new methods to Person, they will be added to Customer, but if I&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//add new methods to Customer they won&apos;t be added to Person. Example:&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setAmountDue&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;amountDue&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;amountDue&lt;/span&gt; = amountDue;\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getAmountDue&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;amountDue&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Let&apos;s try:       &lt;/span&gt;\nmyCustomer.&lt;span class=&quot;hljs-title function_&quot;&gt;setAmountDue&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(myCustomer.&lt;span class=&quot;hljs-title function_&quot;&gt;getAmountDue&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; john = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(john.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;());\n&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sayMyName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, my name is &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;());\n};\njohn.&lt;span class=&quot;hljs-title function_&quot;&gt;sayMyName&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myCustomer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dream Inc.&apos;&lt;/span&gt;);\nmyCustomer.&lt;span class=&quot;hljs-title function_&quot;&gt;sayMyName&lt;/span&gt;();\n&lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setAmountDue&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;amountDue&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;amountDue&lt;/span&gt; = amountDue;\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getAmountDue&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;amountDue&lt;/span&gt;;\n};\nmyCustomer.&lt;span class=&quot;hljs-title function_&quot;&gt;setAmountDue&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(myCustomer.&lt;span class=&quot;hljs-title function_&quot;&gt;getAmountDue&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;While as said I can&apos;t call setAmountDue(), getAmountDue() on a Person.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//The following statement generates an error.&lt;/span&gt;\njohn.&lt;span class=&quot;hljs-title function_&quot;&gt;setAmountDue&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Every JavaScript object &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots&quot; rel=&quot;noreferrer&quot;&gt;has an internal &quot;slot&quot;&lt;/a&gt; called &lt;code&gt;[[Prototype]]&lt;/code&gt; whose value is either &lt;code&gt;null&lt;/code&gt; or an &lt;code&gt;object&lt;/code&gt;. You can think of a slot as a property on an object, internal to the JavaScript engine, hidden from the code you write. The square brackets around &lt;code&gt;[[Prototype]]&lt;/code&gt; are deliberate, and are an ECMAScript specification convention to denote internal slots. &lt;/p&gt;\n\n&lt;p&gt;The value pointed at by the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object, is colloquially known as &quot;the prototype of that object.&quot; &lt;/p&gt;\n\n&lt;p&gt;If you access a property via the dot (&lt;code&gt;obj.propName&lt;/code&gt;) or bracket (&lt;code&gt;obj[&apos;propName&apos;]&lt;/code&gt;) notation, and the object does not directly have such a property (ie. an &lt;em&gt;own property&lt;/em&gt;, checkable via &lt;code&gt;obj.hasOwnProperty(&apos;propName&apos;)&lt;/code&gt;), the runtime looks for a property with that name on the object referenced by the &lt;code&gt;[[Prototype]]&lt;/code&gt; instead. If the &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;em&gt;also&lt;/em&gt; does not have such a property, its &lt;code&gt;[[Prototype]]&lt;/code&gt; is checked in turn, and so on. In this way, the original object&apos;s &lt;em&gt;prototype chain&lt;/em&gt; is walked until a match is found, or its end is reached. At the top of the prototype chain is the &lt;code&gt;null&lt;/code&gt; value.&lt;/p&gt;\n\n&lt;p&gt;Modern JavaScript implementations allow read and/or write access to the &lt;code&gt;[[Prototype]]&lt;/code&gt; in the following ways:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The &lt;code&gt;new&lt;/code&gt; operator (configures the prototype chain on the default object returned from a constructor function),&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;extends&lt;/code&gt; keyword (configures the prototype chain when using the class syntax),&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Object.create&lt;/code&gt; will set the supplied argument as the &lt;code&gt;[[Prototype]]&lt;/code&gt; of the resulting object,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt; and &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; (get/set the &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; object creation), and&lt;/li&gt;\n&lt;li&gt;The standardized accessor (ie. getter/setter) property named &lt;code&gt;__proto__&lt;/code&gt; (similar to 4.)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt; and &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; are preferred over &lt;code&gt;__proto__&lt;/code&gt;, in part because the behavior of &lt;code&gt;o.__proto__&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/35458348/38522&quot;&gt;is unusual&lt;/a&gt; when an object has a prototype of &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;An object&apos;s &lt;code&gt;[[Prototype]]&lt;/code&gt; is initially set during object creation.&lt;/p&gt;\n\n&lt;p&gt;If you create a new object via &lt;code&gt;new Func()&lt;/code&gt;, the object&apos;s &lt;code&gt;[[Prototype]]&lt;/code&gt; will, by default, be set to the object referenced by &lt;code&gt;Func.prototype&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Note that, therefore, &lt;strong&gt;all classes, and all functions that can be used with the &lt;code&gt;new&lt;/code&gt; operator, have a property named &lt;code&gt;.prototype&lt;/code&gt; in addition to their own &lt;code&gt;[[Prototype]]&lt;/code&gt; internal slot.&lt;/strong&gt; This dual use of the word &quot;prototype&quot; is the source of endless confusion amongst newcomers to the language.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;new&lt;/code&gt; with constructor functions allows us to simulate classical inheritance in JavaScript; although JavaScript&apos;s inheritance system is - as we have seen - prototypical, and not class-based.&lt;/p&gt;\n\n&lt;p&gt;Prior to the introduction of class syntax to JavaScript, constructor functions were the only way to simulate classes. We can think of properties of the object referenced by the constructor function&apos;s &lt;code&gt;.prototype&lt;/code&gt; property as shared members; ie. members which are the same for each instance. In class-based systems, methods are implemented the same way for each instance, so methods are conceptually added to the &lt;code&gt;.prototype&lt;/code&gt; property; an object&apos;s fields, however, are instance-specific and are therefore added to the object itself during construction.&lt;/p&gt;\n\n&lt;p&gt;Without the class syntax, developers had to manually configure the prototype chain to achieve similar functionality to classical inheritance. This led to a preponderance of different ways to achieve this. &lt;/p&gt;\n\n&lt;p&gt;Here&apos;s one way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;inheritedMethod&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;this is inherited&apos;&lt;/span&gt; }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inherit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;child, parent&lt;/span&gt;) {\n  child.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(parent.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)\n  child.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; = child\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; child;\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;inherit&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(o.&lt;span class=&quot;hljs-title function_&quot;&gt;inheritedMethod&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;this is inherited&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...and here&apos;s another way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;inheritedMethod&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;this is inherited&apos;&lt;/span&gt; }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inherit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;child, parent&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n    tmp.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = parent.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; proto = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tmp&lt;/span&gt;()\n    proto.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; = child\n    child.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = proto\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; child\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;inherit&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(o.&lt;span class=&quot;hljs-title function_&quot;&gt;inheritedMethod&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;this is inherited&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The class syntax introduced in ES2015 simplifies things, by providing &lt;code&gt;extends&lt;/code&gt; as the &quot;one true way&quot; to configure the prototype chain in order to simulate classical inheritance in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;So, similar to the code above, if you use the class syntax to create a new object like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Parent&lt;/span&gt; { &lt;span class=&quot;hljs-title function_&quot;&gt;inheritedMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;this is inherited&apos;&lt;/span&gt; } }\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Parent&lt;/span&gt; {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(o.&lt;span class=&quot;hljs-title function_&quot;&gt;inheritedMethod&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;this is inherited&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...the resulting object&apos;s &lt;code&gt;[[Prototype]]&lt;/code&gt; will be set to an instance of &lt;code&gt;Parent&lt;/code&gt;, whose &lt;code&gt;[[Prototype]]&lt;/code&gt;, in turn, is &lt;code&gt;Parent.prototype&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Finally, if you create a new object via &lt;code&gt;Object.create(foo)&lt;/code&gt;, the resulting object&apos;s &lt;code&gt;[[Prototype]]&lt;/code&gt; will be set to &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This is a very simple prototype based object model that would be considered as a sample during the explanation, with no comment yet:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;There are some crucial points that we have to consider before going through the prototype concept.&lt;/p&gt;\n\n&lt;h1&gt;1- How JavaScript functions actually work:&lt;/h1&gt;\n\n&lt;p&gt;To take the first step we have to figure out, how JavaScript functions actually work , as a class like function using &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword in it or just as a regular function with its arguments, what it does and what it returns.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s say we want to create a &lt;code&gt;Person&lt;/code&gt; object model. but in this step I&apos;m gonna be trying to &lt;strong&gt;do the same exact thing without using &lt;code&gt;prototype&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; keyword&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So in this step &lt;strong&gt;&lt;code&gt;functions&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword, are all we have.&lt;/p&gt;\n\n&lt;p&gt;The first question would be &lt;strong&gt;how &lt;code&gt;this&lt;/code&gt; keyword could be useful without using &lt;code&gt;new&lt;/code&gt; keyword&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So to answer that let&apos;s say we have an empty object, and two functions like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and now &lt;strong&gt;without using &lt;code&gt;new&lt;/code&gt; keyword&lt;/strong&gt; how we could use these functions. So JavaScript has 3 different ways to do that:&lt;/p&gt;\n\n&lt;h2&gt;a. first way is just to call the function as a regular function:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();&lt;span class=&quot;hljs-comment&quot;&gt;//would print the &quot;George&quot; in the console&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in this case, this would be the current context object, which is usually is the global  &lt;code&gt;window&lt;/code&gt; object in the browser or &lt;code&gt;GLOBAL&lt;/code&gt; in &lt;code&gt;Node.js&lt;/code&gt;. It means we would have, window.name in browser or GLOBAL.name in Node.js, with &quot;George&quot; as its value.&lt;/p&gt;\n\n&lt;h2&gt;b. We can &lt;strong&gt;attach&lt;/strong&gt; them to an object, as its properties&lt;/h2&gt;\n\n&lt;p&gt;-&lt;strong&gt;The easiest way&lt;/strong&gt; to do this is modifying the empty &lt;code&gt;person&lt;/code&gt; object, like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;person.&lt;span class=&quot;hljs-property&quot;&gt;Person&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;;\nperson.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt; = getName;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this way we can call them like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;person.&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;);\nperson.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();&lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt;&quot;George&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and now the &lt;code&gt;person&lt;/code&gt; object is like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;-&lt;strong&gt;The other way to attach a property&lt;/strong&gt; to an object is using the &lt;code&gt;prototype&lt;/code&gt; of that object that can be find in any JavaScript object with the name of &lt;code&gt;__proto__&lt;/code&gt;, and I have tried to explain it a bit on the summary part. So we could get the similar result by doing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;person.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Person&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;;\nperson.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt; = getName;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; this way what we actually are doing is modifying the &lt;code&gt;Object.prototype&lt;/code&gt;, because whenever we create a JavaScript object using literals (&lt;code&gt;{ ... }&lt;/code&gt;), it gets created based on &lt;code&gt;Object.prototype&lt;/code&gt;, which means it gets attached to the newly created object as an attribute named &lt;strong&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/strong&gt; , so if we change it, as we have done on our previous code snippet, all the JavaScript objects would get changed, not a good practice. So what could be the better practice now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;person.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getName&lt;/span&gt;: getName\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and now other objects are in peace, but it still doesn&apos;t seem to be a good practice. So we have still one more solutions, but to use this solution we should get back to that line of code where &lt;code&gt;person&lt;/code&gt; object got created (&lt;code&gt;var person = {};&lt;/code&gt;) then change it like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; propertiesObject = {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getName&lt;/span&gt;: getName\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(propertiesObject);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;what it does is creating a new JavaScript &lt;code&gt;Object&lt;/code&gt; and attach the &lt;code&gt;propertiesObject&lt;/code&gt; to the &lt;code&gt;__proto__&lt;/code&gt; attribute. So to make sure you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(person.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;===propertiesObject); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But the tricky point here is you have access to all the properties defined in &lt;code&gt;__proto__&lt;/code&gt; on the first level of the &lt;code&gt;person&lt;/code&gt; object(read the summary part for more detail).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;as you see using any of these two way &lt;code&gt;this&lt;/code&gt; would exactly point to the &lt;code&gt;person&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;h2&gt;c. JavaScript has another way to provide the function with &lt;code&gt;this&lt;/code&gt;, which is using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot; rel=&quot;noreferrer&quot;&gt;call&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot; rel=&quot;noreferrer&quot;&gt;apply&lt;/a&gt; to invoke the function.&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The apply() method calls a function with a given this value and\n  arguments provided as an array (or an array-like object).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The call() method calls a function with a given this value and\n  arguments provided individually.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;this way which is my favorite, we can easily call our functions like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(person, &lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//apply is more useful when params count is not fixed&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(person, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;]);\n\ngetName.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(person);   \ngetName.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(person);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;these 3 methods are the important initial steps to figure out the .prototype functionality.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;2- How does the &lt;code&gt;new&lt;/code&gt; keyword work?&lt;/h1&gt;\n\n&lt;p&gt;this is the second step to understand the &lt;code&gt;.prototype&lt;/code&gt; functionality.this is what I use to simulate the process:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;  }\nmy_person_prototype = { &lt;span class=&quot;hljs-attr&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); } };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in this part I&apos;m gonna be trying to take all the steps which JavaScript takes, without using the &lt;code&gt;new&lt;/code&gt; keyword and &lt;code&gt;prototype&lt;/code&gt;, when you use &lt;code&gt;new&lt;/code&gt; keyword. so when we do &lt;code&gt;new Person(&quot;George&quot;)&lt;/code&gt;, &lt;code&gt;Person&lt;/code&gt; function serves as a constructor, These are what JavaScript does, one by one:&lt;/p&gt;\n\n&lt;h2&gt;a. first of all it makes an empty object, basically an empty hash like:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;b. the next step that JavaScript takes is to &lt;strong&gt;attach&lt;/strong&gt; the all prototype objects to the newly created object&lt;/h2&gt;\n\n&lt;p&gt;we have &lt;code&gt;my_person_prototype&lt;/code&gt; here similar to the prototype object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_person_prototype){\n    newObject[key] = my_person_prototype[key];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is not the way that JavaScript actually attaches the properties that are defined in the prototype. The actual way is related to the prototype chain concept.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;a. &amp;amp; b. Instead of these two steps you can have the exact same result by doing:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObject = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(my_person_prototype);\n&lt;span class=&quot;hljs-comment&quot;&gt;//here you can check out the __proto__ attribute&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newObject.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === my_person_prototype); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//and also check if you have access to your desired properties&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; newObject.&lt;span class=&quot;hljs-property&quot;&gt;getName&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;function&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;now we can call the &lt;code&gt;getName&lt;/code&gt; function in our &lt;code&gt;my_person_prototype&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;newObject.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;c. then it gives that object to the constructor,&lt;/h2&gt;\n\n&lt;p&gt;we can do this with our sample like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(newObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(newObject, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;George&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then the constructor can do whatever it wants, because &lt;strong&gt;this&lt;/strong&gt; inside of that constructor is the object that was just created.&lt;/p&gt;\n\n&lt;p&gt;now the end result before simulating the other steps:\n    Object {name: &quot;George&quot;}&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Summary:&lt;/h2&gt;\n\n&lt;p&gt;Basically, when you use the &lt;strong&gt;new&lt;/strong&gt; keyword on a function, you are calling on that and that function serves as a constructor, so when you say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FunctionName&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JavaScript internally makes an object, an empty hash and then it gives that object to the constructor, then the constructor can do whatever it wants, because &lt;strong&gt;this&lt;/strong&gt; inside of that constructor is the object that was just created and then it gives you that object of course if you haven&apos;t used the return statement in your function or if you&apos;ve put a &lt;code&gt;return undefined;&lt;/code&gt; at the end of your function body.&lt;/p&gt;\n\n&lt;p&gt;So when JavaScript goes to look up a property on an object, the first thing it does, is it looks it up on that object. And then there is a secret property &lt;strong&gt;&lt;code&gt;[[prototype]]&lt;/code&gt;&lt;/strong&gt; which we usually have it like &lt;strong&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/strong&gt; and that property is what JavaScript looks at next. And when it looks through the &lt;strong&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/strong&gt;, as far as it is again another JavaScript object, it has its own &lt;strong&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/strong&gt; attribute, it goes up and up until it gets to the point where the next &lt;strong&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/strong&gt; is null. The point is the only object in JavaScript that its &lt;strong&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/strong&gt; attribute is null is &lt;code&gt;Object.prototype&lt;/code&gt; object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;===&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and that&apos;s how inheritance works in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/JnpBV.png&quot; alt=&quot;The prototype chain&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;In other words, when you have a prototype property on a function and you call a new on that, after JavaScript finishes looking at that newly created object for properties, it will go look at the function&apos;s &lt;code&gt;.prototype&lt;/code&gt; and also it is possible that this object has its own internal prototype. and so on.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;prototype&lt;/code&gt; allows you to make classes. if you do not use &lt;code&gt;prototype&lt;/code&gt; then it becomes a static.&lt;/p&gt;\n\n&lt;p&gt;Here is a short example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;();\nobj.&lt;span class=&quot;hljs-property&quot;&gt;test&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello?&apos;&lt;/span&gt;); };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above case, you have static funcation call test. This function can be accessed only by obj.test where you can imagine obj to be a class.&lt;/p&gt;\n\n&lt;p&gt;where as in the below code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;obj&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n}\n\nobj.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;test&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello?&apos;&lt;/span&gt;); };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;obj&lt;/span&gt;();\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The obj has become a class which can now be instantiated. Multiple instances of obj can exist and they all have the &lt;code&gt;test&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;The above is my understanding. I am making it a community wiki, so people can correct me if I am wrong.&lt;/p&gt;\n    ","\n&lt;h2&gt;The seven Koans of prototype&lt;/h2&gt;\n\n&lt;p&gt;As Ciro San descended Mount Fire Fox after deep meditation, his mind was clear and peaceful.&lt;/p&gt;\n\n&lt;p&gt;His hand however, was restless, and by itself grabbed a brush and jotted down the following notes.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;0)&lt;/strong&gt; Two different things can be called &quot;prototype&quot;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;the prototype property, as in &lt;code&gt;obj.prototype&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;the prototype internal property, denoted as &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2&quot; rel=&quot;noreferrer&quot;&gt;in ES5&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;It can be retrieved via the ES5 &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Firefox makes it accessible through the &lt;code&gt;__proto__&lt;/code&gt; property as an extension. &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-additional-ecmascript-features-for-web-browsers&quot; rel=&quot;noreferrer&quot;&gt;ES6 now mentions&lt;/a&gt; some optional requirements for &lt;code&gt;__proto__&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Those concepts exist to answer the question:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When I do &lt;code&gt;obj.property&lt;/code&gt;, where does JS look for &lt;code&gt;.property&lt;/code&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Intuitively, classical inheritance should affect property lookup.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;__proto__&lt;/code&gt; is used for the dot &lt;code&gt;.&lt;/code&gt; property lookup as in &lt;code&gt;obj.property&lt;/code&gt;. &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;.prototype&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; used for lookup directly, only indirectly as it determines &lt;code&gt;__proto__&lt;/code&gt; at object creation with &lt;code&gt;new&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Lookup order is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;obj&lt;/code&gt; properties added with &lt;code&gt;obj.p = ...&lt;/code&gt; or &lt;code&gt;Object.defineProperty(obj, ...)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;properties of &lt;code&gt;obj.__proto__&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;properties of &lt;code&gt;obj.__proto__.__proto__&lt;/code&gt;, and so on&lt;/li&gt;\n&lt;li&gt;if some &lt;code&gt;__proto__&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, return &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This is the so-called &lt;em&gt;prototype chain&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can avoid &lt;code&gt;.&lt;/code&gt; lookup with &lt;code&gt;obj.hasOwnProperty(&apos;key&apos;)&lt;/code&gt; and &lt;code&gt;Object.getOwnPropertyNames(f)&lt;/code&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; There are two main ways to set &lt;code&gt;obj.__proto__&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then &lt;code&gt;new&lt;/code&gt; has set:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;f.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is where &lt;code&gt;.prototype&lt;/code&gt; gets used.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; f = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(proto)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sets:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;f.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === proto\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;4)&lt;/strong&gt; The code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; = i }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Corresponds to the following diagram (some &lt;code&gt;Number&lt;/code&gt; stuff is omitted):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;)       (  F  )                                      (f)-----&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n |  ^             | | ^                                        |   i    |\n |  |             | | |                                        |        |\n |  |             | | +-------------------------+              |        |\n |  |constructor  | |                           |              |        |\n |  |             | +--------------+            |              |        |\n |  |             |                |            |              |        |\n |  |             |                |            |              |        |\n |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]   |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]   |prototype   |constructor   |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]\n |  |             |                |            |              |        |\n |  |             |                |            |              |        |\n |  |             |                | +----------+              |        |\n |  |             |                | |                         |        |\n |  |             |                | | +-----------------------+        |\n |  |             |                | | |                                |\n v  |             v                v | v                                |\n(&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)              (F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)                         |\n |                                 |                                    |\n |                                 |                                    |\n |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]                    |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]          [[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]|\n |                                 |                                    |\n |                                 |                                    |\n | +-------------------------------+                                    |\n | |                                                                    |\n v v                                                                    v\n(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)                                       (&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)\n | | ^\n | | |\n | | +---------------------------+\n | |                             |\n | +--------------+              |\n |                |              |\n |                |              |\n |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]   |constructor   |prototype\n |                |              |\n |                |              |\n |                | -------------+\n |                | |\n v                v |\n(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)           (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This diagram shows many language predefined object nodes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Number.prototype&lt;/code&gt; (can be found with &lt;code&gt;(1).__proto__&lt;/code&gt;, parenthesis mandatory to satisfy syntax)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Our 2 lines of code only created the following new objects:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;f&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;F&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;F.prototype&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;i&lt;/code&gt; is now a property of &lt;code&gt;f&lt;/code&gt; because when you do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it evaluates &lt;code&gt;F&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; being the value that &lt;code&gt;new&lt;/code&gt; will return, which then gets assigned to &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;5)&lt;/strong&gt; &lt;code&gt;.constructor&lt;/code&gt; normally comes from &lt;code&gt;F.prototype&lt;/code&gt; through the &lt;code&gt;.&lt;/code&gt; lookup:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;f.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === F\n!f.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;constructor&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(f) === F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\nF.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;constructor&apos;&lt;/span&gt;)\nF.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === f.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When we write &lt;code&gt;f.constructor&lt;/code&gt;, JavaScript does the &lt;code&gt;.&lt;/code&gt; lookup as:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;f&lt;/code&gt; does not have &lt;code&gt;.constructor&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;f.__proto__ === F.prototype&lt;/code&gt; has &lt;code&gt;.constructor === F&lt;/code&gt;, so take it&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The result &lt;code&gt;f.constructor == F&lt;/code&gt; is intuitively correct, since &lt;code&gt;F&lt;/code&gt; is used to construct &lt;code&gt;f&lt;/code&gt;, e.g. set fields, much like in classic OOP languages. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;6)&lt;/strong&gt; Classical inheritance syntax can be achieved by manipulating prototypes chains.&lt;/p&gt;\n\n&lt;p&gt;ES6 adds the &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords, which are mostly syntax sugar for previously possible prototype manipulation madness.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; = i\n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;C&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;(i)\n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;inc2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Inheritance syntax works as expected.&lt;/span&gt;\nc = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;C&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nc.&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;() === &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;() === &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;inc2&lt;/span&gt;() === &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Classes&quot; are just function objects.&lt;/span&gt;\nC.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\nC.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\nD.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// D is a function &quot;indirectly&quot; through the chain.&lt;/span&gt;\nD.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === C\nD.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;extends&quot; sets up the prototype chain so that base class&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// lookups will work as expected&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nd.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === D.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\nD.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === C.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is what `d.inc` actually does.&lt;/span&gt;\nd.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;inc&lt;/span&gt; === C.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;inc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Class variables&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// No ES6 syntax sugar apparently:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// http://stackoverflow.com/questions/22528967/es6-class-variable-alternatives&lt;/span&gt;\nC.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nC.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Because `D.__proto__ === C`.&lt;/span&gt;\nD.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Nothing makes this work.&lt;/span&gt;\nd.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simplified diagram without all predefined objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(c)-----&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n |   i\n |\n |\n |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]\n |\n |\n v    __proto__\n(C)&amp;lt;--------------(D)         (d)\n| |                |           |\n| |                |           |\n| |prototype       |prototype  |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]] \n| |                |           |\n| |                |           |\n| |                | +---------+\n| |                | |\n| |                | |\n| |                v v\n|[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]    (D.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)--------&amp;gt; (inc2 &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; object)\n| |                |             inc2\n| |                |\n| |                |[[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]\n| |                |\n| |                |\n| | +--------------+\n| | |\n| | |\n| v v\n| (C.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)-------&amp;gt;(inc &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; object)\n|                inc\nv\n&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s take a moment to study how the following works:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;C&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nc.&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;() === &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first line sets &lt;code&gt;c.i&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; as explained in &quot;4)&quot;.&lt;/p&gt;\n\n&lt;p&gt;On the second line, when we do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;c.&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.inc&lt;/code&gt; is found through the &lt;code&gt;[[Prototype]]&lt;/code&gt; chain: &lt;code&gt;c&lt;/code&gt; -&amp;gt; &lt;code&gt;C&lt;/code&gt; -&amp;gt; &lt;code&gt;C.prototype&lt;/code&gt; -&amp;gt; &lt;code&gt;inc&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;when we call a function in Javascript as &lt;code&gt;X.Y()&lt;/code&gt;, JavaScript automatically sets &lt;code&gt;this&lt;/code&gt; to equal &lt;code&gt;X&lt;/code&gt; inside the &lt;code&gt;Y()&lt;/code&gt; function call! &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The exact same logic also explains &lt;code&gt;d.inc&lt;/code&gt; and &lt;code&gt;d.inc2&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This article &lt;a href=&quot;https://javascript.info/class#not-just-a-syntax-sugar&quot; rel=&quot;noreferrer&quot;&gt;https://javascript.info/class#not-just-a-syntax-sugar&lt;/a&gt; mentions further effects of &lt;code&gt;class&lt;/code&gt; worth knowing. Some of them may not be achievable without the &lt;code&gt;class&lt;/code&gt; keyword (TODO check which):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[[FunctionKind]]:&quot;classConstructor&quot;&lt;/code&gt;, which forces the constructor to be called with new: &lt;a href=&quot;https://stackoverflow.com/questions/44446650/what-is-the-reason-es6-class-constructors-cant-be-called-as-normal-functions&quot;&gt;What is the reason ES6 class constructors can&apos;t be called as normal functions?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Class methods are non-enumerable. Can be done with &lt;code&gt;Object.defineProperty&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Classes always &lt;code&gt;use strict&lt;/code&gt;. Can be done with an explicit &lt;code&gt;use strict&lt;/code&gt; for every function, which is admittedly tedious.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;After reading this thread, I feel confused with JavaScript Prototype Chain, then I found these charts &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://iwiki.readthedocs.org/en/latest/javascript/js_core.html#inheritance&quot; rel=&quot;noreferrer&quot;&gt;http://iwiki.readthedocs.org/en/latest/javascript/js_core.html#inheritance&lt;/a&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/rcGmc.png&quot; alt=&quot;*[[protytype]]* and &lt;code&gt;prototype&lt;/code&gt; property of function objects&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;it&apos;s a clear chart to show JavaScript Inheritance by Prototype Chain&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.javascriptbank.com/javascript/article/JavaScript_Classical_Inheritance/&quot; rel=&quot;noreferrer&quot;&gt;http://www.javascriptbank.com/javascript/article/JavaScript_Classical_Inheritance/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;this one contains a example with code and several nice diagrams.&lt;/em&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;prototype chain ultimately falls back to Object.prototype. &lt;/p&gt;\n  \n  &lt;p&gt;prototype chain can be technically extended as long as you want, each time by setting the prototype of the subclass equal to an object of the parent class.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Hope it&apos;s also helpful for you to understand JavaScript Prototype Chain.&lt;/p&gt;\n    ","\n&lt;p&gt;Every object has an internal property, &lt;em&gt;[[Prototype]]&lt;/em&gt;, linking it to another object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;object [[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]  anotherObject\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In traditional javascript, the linked object is the &lt;code&gt;prototype&lt;/code&gt; property of a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;object [[&lt;span class=&quot;hljs-title class_&quot;&gt;Prototype&lt;/span&gt;]]  aFunction.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some environments expose &lt;em&gt;[[Prototype]]&lt;/em&gt; as &lt;code&gt;__proto__&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;anObject.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === anotherObject\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You create the &lt;em&gt;[[Prototype]]&lt;/em&gt; link when creating an object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// (1) Object.create:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(anotherObject)\n&lt;span class=&quot;hljs-comment&quot;&gt;// object.__proto__ = anotherObject&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// (2) ES6 object initializer:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = { &lt;span class=&quot;hljs-attr&quot;&gt;__proto__&lt;/span&gt;: anotherObject };\n&lt;span class=&quot;hljs-comment&quot;&gt;// object.__proto__ = anotherObject&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// (3) Traditional JavaScript:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; aFunction;\n&lt;span class=&quot;hljs-comment&quot;&gt;// object.__proto__ = aFunction.prototype&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So these statements are equivalent:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = { &lt;span class=&quot;hljs-attr&quot;&gt;__proto__&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; }; &lt;span class=&quot;hljs-comment&quot;&gt;// ES6 only&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can&apos;t actually see the link target (&lt;code&gt;Object.prototype&lt;/code&gt;) in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&quot; rel=&quot;nofollow noreferrer&quot;&gt;new&lt;/a&gt; statement; instead the target is implied by the constructor (&lt;code&gt;Object&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Remember:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Every object has a link, &lt;em&gt;[[Prototype]]&lt;/em&gt;, sometimes exposed as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto&quot; rel=&quot;nofollow noreferrer&quot;&gt;__proto__&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Every function has a &lt;code&gt;prototype&lt;/code&gt; property, initially holding an empty object.&lt;/li&gt;\n&lt;li&gt;Objects created with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&quot; rel=&quot;nofollow noreferrer&quot;&gt;new&lt;/a&gt; are linked to the &lt;code&gt;prototype&lt;/code&gt; property of their constructor.&lt;/li&gt;\n&lt;li&gt;If a function is never used as a constructor, its &lt;code&gt;prototype&lt;/code&gt; property will go unused.&lt;/li&gt;\n&lt;li&gt;If you don&apos;t need a constructor, use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object.create&lt;/a&gt; instead of &lt;code&gt;new&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Javascript doesn&apos;t have inheritance in the usual sense, but it has the prototype chain.&lt;/p&gt;\n\n&lt;h2&gt;prototype chain&lt;/h2&gt;\n\n&lt;p&gt;If a member of an object can&apos;t be found in the object it looks for it in the prototype chain. The chain consists of other objects. The prototype of a given instance can be accessed with the &lt;code&gt;__proto__&lt;/code&gt; variable. Every object has one, as there is no difference between classes and instances in javascript.&lt;/p&gt;\n\n&lt;p&gt;The advantage of adding a function / variable to the prototype is that it has to be in the memory only once, not for every instance.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also useful for inheritance, because the prototype chain can consist of many other objects.&lt;/p&gt;\n    ","\n&lt;p&gt;This article is long. But I am sure it will clear most of your queries \nregarding the &quot;prototypical&quot; nature of JavaScript Inheritance. And even more. Please read the complete article.&lt;/p&gt;\n\n&lt;p&gt;JavaScript basically has two kinds of data types&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;Non objects&lt;/em&gt;&lt;/strong&gt; &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;Objects&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Non objects&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Following are the &lt;strong&gt;&lt;em&gt;Non object&lt;/em&gt;&lt;/strong&gt; data types&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;number (including NaN and Infinity)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;boolean values(true,false)&lt;/strong&gt; &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;undefined&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These data types return following when you use the &lt;strong&gt;typeof&lt;/strong&gt; operator &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; &lt;em&gt;&quot;string literal&quot;&lt;/em&gt; (or a variable containing string literal)  === &lt;strong&gt;&apos;string&apos;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; &lt;em&gt;5&lt;/em&gt; (or any numeric literal or a variable containing numeric literal or &lt;strong&gt;&lt;em&gt;NaN or Infynity&lt;/em&gt;&lt;/strong&gt;)  === &lt;strong&gt;&apos;number&apos;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; &lt;em&gt;true&lt;/em&gt; (or &lt;em&gt;false&lt;/em&gt; or a variable containing &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;)  === &lt;strong&gt;&apos;boolean&apos;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; &lt;em&gt;undefined&lt;/em&gt; (or an undefined variable or a variable containing &lt;em&gt;undefined&lt;/em&gt;) === &lt;strong&gt;&apos;undefined&apos;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;strong&gt;string&lt;/strong&gt;,&lt;strong&gt;number&lt;/strong&gt; and &lt;strong&gt;boolean&lt;/strong&gt; data types can be represented both as &lt;strong&gt;Objects&lt;/strong&gt; and &lt;strong&gt;Non objects&lt;/strong&gt;.When they are represented as objects their typeof is always === &apos;object&apos;. We shall come back to this once we understand the object data types.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Objects&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The object datatypes can be further divided into two types&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Function type objects&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Non Function type objects&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The &lt;strong&gt;Function type objects&lt;/strong&gt; are the ones that return the string &lt;strong&gt;&apos;function&apos;&lt;/strong&gt; with &lt;strong&gt;typeof&lt;/strong&gt; operator. \nAll the user defined functions and all the JavaScript built in objects that can create new objects by using new operator fall into this category. For eg.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Object&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt; &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt;  &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt; &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Typed Arrays&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;RegExp&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Function&lt;/strong&gt; &lt;/li&gt;\n&lt;li&gt;All the other built in objects that can create new objects by using new operator&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;function&lt;/em&gt; &lt;strong&gt;UserDefinedFunction&lt;/strong&gt;(){ /*user defined code */ }&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So,\n&lt;strong&gt;typeof(Object)&lt;/strong&gt; === &lt;strong&gt;typeof(String)&lt;/strong&gt; === &lt;strong&gt;typeof(Number)&lt;/strong&gt; === &lt;strong&gt;typeof(Boolean)&lt;/strong&gt; === &lt;strong&gt;typeof(Array)&lt;/strong&gt;  === &lt;strong&gt;typeof(RegExp)&lt;/strong&gt; === &lt;strong&gt;typeof(Function)&lt;/strong&gt;  === &lt;strong&gt;typeof(UserDefinedFunction)&lt;/strong&gt; === &lt;strong&gt;&apos;function&apos;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;All the &lt;strong&gt;&lt;em&gt;Function type objects&lt;/em&gt;&lt;/strong&gt; are actually instances of the built in JavaScript object &lt;strong&gt;Function&lt;/strong&gt; (including the &lt;strong&gt;Function&lt;/strong&gt; object i.e it is recursively defined). It is as if the these objects have been defined in the following way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ([native code  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;user defined code&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As mentioned, the &lt;strong&gt;&lt;em&gt;Function type objects&lt;/em&gt;&lt;/strong&gt; can further create new objects using the &lt;strong&gt;new operator&lt;/strong&gt;. For e.g an object of type &lt;strong&gt;Object&lt;/strong&gt;, &lt;strong&gt;String&lt;/strong&gt;, &lt;strong&gt;Number&lt;/strong&gt;, &lt;strong&gt;Boolean&lt;/strong&gt;, &lt;strong&gt;Array&lt;/strong&gt;, &lt;strong&gt;RegExp&lt;/strong&gt;  Or &lt;strong&gt;UserDefinedFunction&lt;/strong&gt; can be created by using&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;() or &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;() or &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a={} &lt;span class=&quot;hljs-comment&quot;&gt;//Create object of type Object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//Create object of type String&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//Create object of type Number&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//Create object of type Boolean&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;() or &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;() or &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=[]  &lt;span class=&quot;hljs-comment&quot;&gt;//Create object of type Array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;() or &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//Create object of type RegExp&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;() \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The objects thus created are all &lt;strong&gt;&lt;em&gt;Non Function type objects&lt;/em&gt;&lt;/strong&gt; and return their &lt;strong&gt;typeof&lt;/strong&gt;===&lt;strong&gt;&apos;object&apos;&lt;/strong&gt;. In all these cases the object &quot;a&quot; cannot further create \nobjects using operator new. So the following is wrong&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//error. a is not typeof===&apos;function&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The built in object &lt;strong&gt;Math&lt;/strong&gt; is &lt;strong&gt;typeof&lt;/strong&gt;===&lt;strong&gt;&apos;object&apos;&lt;/strong&gt;. Hence a new object of type Math cannot be created by new operator.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//error. Math is not typeof===&apos;function&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also notice that &lt;strong&gt;Object&lt;/strong&gt;,&lt;strong&gt;Array&lt;/strong&gt; and &lt;strong&gt;RegExp&lt;/strong&gt; functions can create a new object without even using &lt;strong&gt;operator new&lt;/strong&gt;. However the follwing ones don&apos;t.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Create a new Non Object string. returns a typeof===&apos;string&apos; &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Create a new Non Object Number. returns a typeof===&apos;number&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//Create a new Non Object Boolean. returns a typeof===&apos;boolean&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The user defined functions are special case. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//may or may not create an object of type UserDefinedFunction() based on how it is defined.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the &lt;strong&gt;&lt;em&gt;Function type objects&lt;/em&gt;&lt;/strong&gt; can create new objects they are also called &lt;strong&gt;&lt;em&gt;Constructors&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Every &lt;strong&gt;Constructor/Function&lt;/strong&gt; (whether built in or user defined) when defined automatically has a property called &lt;strong&gt;&quot;prototype&quot;&lt;/strong&gt; whose value by default is set as an object. This object itself has a property called &lt;strong&gt;&quot;constructor&quot;&lt;/strong&gt; which by default references back the &lt;strong&gt;Constructor/Function&lt;/strong&gt; .&lt;/p&gt;\n\n&lt;p&gt;For example when we define a function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;following automatically happens&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;={&lt;span class=&quot;hljs-attr&quot;&gt;constructor&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This &lt;strong&gt;&quot;prototype&quot; property&lt;/strong&gt; is only present in the &lt;strong&gt;Function type objects&lt;/strong&gt; \n(and never in &lt;strong&gt;Non Function type objects&lt;/strong&gt;). &lt;/p&gt;\n\n&lt;p&gt;This is because &lt;strong&gt;when a new object is created (using new operator)it inherits all properties and methods from Constructor function&apos;s current prototype object i.e. an&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;internal reference&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;is created in the newly created object that references the object referenced by Constructor function&apos;s current prototype object.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This &lt;strong&gt;&quot;internal reference&quot;&lt;/strong&gt; that is created in the object for referencing inherited properties is known as the &lt;strong&gt;object&apos;s prototype&lt;/strong&gt; (which references the object referenced by Constructor&apos;s &lt;strong&gt;&quot;prototype&quot;&lt;/strong&gt; property but is different from it). For any object (Function or Non Function) this can be retrieved using &lt;strong&gt;Object.getPrototypeOf()&lt;/strong&gt; method. Using this method one can trace the prototype chain of an object. &lt;/p&gt;\n\n&lt;p&gt;Also, &lt;strong&gt;every object that is created&lt;/strong&gt; (&lt;strong&gt;Function type&lt;/strong&gt; or &lt;strong&gt;Non Function type&lt;/strong&gt;) has a &lt;strong&gt;&quot;constructor&quot;&lt;/strong&gt; property which is inherited from the object referenced by prototype  property of the Constructor function. By default this &lt;strong&gt;&quot;constructor&quot;&lt;/strong&gt; property references the &lt;strong&gt;Constructor function&lt;/strong&gt; that created it (if the &lt;strong&gt;Constructor Function&apos;s&lt;/strong&gt; default &quot;prototype&quot; is not changed). &lt;/p&gt;\n\n&lt;p&gt;For all &lt;strong&gt;&lt;em&gt;Function type objects&lt;/em&gt;&lt;/strong&gt; the constructor function is always\n&lt;strong&gt;&lt;em&gt;function Function(){}&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For &lt;strong&gt;&lt;em&gt;Non Function type objects&lt;/em&gt;&lt;/strong&gt; (e.g Javascript Built in  Math object) the constructor function is the function that created it.\nFor &lt;strong&gt;Math&lt;/strong&gt; object it is &lt;strong&gt;&lt;em&gt;function Object(){}&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;All the concept explained above can be a little daunting to understand without any supporting code. Please go through the following code line by line to understand the concept. Try to execute it to have a better understanding.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{ \n\n} \n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* creating the above function automatically does the following as mentioned earlier\n\nUserDefinedFunction.prototype={constructor:UserDefinedFunction}\n\n*/&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj_1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_1)===&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;//Displays true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_1.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays function UserDefinedFunction&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Create a new property in UserDefinedFunction.prototype object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;TestProperty&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_1.&lt;span class=&quot;hljs-property&quot;&gt;TestProperty&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays &quot;test&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_1).&lt;span class=&quot;hljs-property&quot;&gt;TestProperty&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;// Displays &quot;test&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Create a new Object&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objA = {\n        property1 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;Property1&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;constructor&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;\n\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//assign a new object to UserDefinedFunction.prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;=objA\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_1)===&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;//Displays false. The object referenced by UserDefinedFunction.prototype has changed&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//The internal reference does not change&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_1.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// This shall still Display function UserDefinedFunction&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_1.&lt;span class=&quot;hljs-property&quot;&gt;TestProperty&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//This shall still Display &quot;test&quot; &lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_1).&lt;span class=&quot;hljs-property&quot;&gt;TestProperty&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//This shall still Display &quot;test&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Create another object of type UserDefinedFunction&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj_2= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_2)===objA) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays true.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_2.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays function Array()&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_2.&lt;span class=&quot;hljs-property&quot;&gt;property1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays &quot;Property1&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_2).&lt;span class=&quot;hljs-property&quot;&gt;property1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays &quot;Property1&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Create a new property in objA&lt;/span&gt;\nobjA.&lt;span class=&quot;hljs-property&quot;&gt;property2&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;property2&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(objA.&lt;span class=&quot;hljs-property&quot;&gt;property2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays &quot;Property2&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;property2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays &quot;Property2&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(newObj_2.&lt;span class=&quot;hljs-property&quot;&gt;property2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Displays Property2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(newObj_2).&lt;span class=&quot;hljs-property&quot;&gt;property2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays  &quot;Property2&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The prototype chain of every object ultimately traces back to Object.prototype (which itself does not have any prototype object) .\nFollowing code can be used for tracing the prototype chain of an object&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o=&lt;span class=&quot;hljs-title class_&quot;&gt;Starting&lt;/span&gt; object;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(o + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyNames&lt;/span&gt;(o))\n\n}&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(o=&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(o))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The prototype chain for various objects work out as follows.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Every Function object (including built in Function object)-&amp;gt;\nFunction.prototype -&amp;gt; Object.prototype -&amp;gt; null   &lt;/li&gt;\n&lt;li&gt;Simple Objects (created By new Object() or {} including built in Math  object)-&amp;gt;   Object.prototype -&amp;gt; null&lt;/li&gt;\n&lt;li&gt;Object created with new or Object.create -&amp;gt; One or More prototype chains -&amp;gt; Object.prototype -&amp;gt; null&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For creating an object without any prototype use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o=&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(o)) &lt;span class=&quot;hljs-comment&quot;&gt;//Displays null&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One might think that setting the prototype property of the Constructor to null shall create an object with a null prototype. However in such cases the newly created object&apos;s prototype is set to Object.prototype and its constructor is set to function Object. This is demonstrated by the following code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UserDefinedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Can be set to any non object value (number,string,undefined etc.)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserDefinedFunction&lt;/span&gt;()\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(o)==&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;//Displays true&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(o.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;//Displays Function Object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Following in the summary of this article&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;There are two types of objects &lt;strong&gt;Function types&lt;/strong&gt; and &lt;strong&gt;Non Function types&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only &lt;strong&gt;Function type objects&lt;/strong&gt; can create a new object using the &lt;strong&gt;operator new&lt;/strong&gt;. The objects thus created are &lt;strong&gt;Non Function type&lt;/strong&gt; objects. The &lt;strong&gt;Non Function type objects&lt;/strong&gt; cannot further create an object using &lt;strong&gt;operator new&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All &lt;strong&gt;Function type objects&lt;/strong&gt; by default have a &lt;strong&gt;&quot;prototype&quot;&lt;/strong&gt; property. This &lt;strong&gt;&quot;prototype&quot;&lt;/strong&gt; property references an object that has a &lt;strong&gt;&quot;constructor&quot;&lt;/strong&gt; property that by default references the &lt;strong&gt;Function type object&lt;/strong&gt; itself.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All objects (&lt;strong&gt;Function type&lt;/strong&gt; and &lt;strong&gt;Non Function type&lt;/strong&gt;) have a &quot;constructor&quot; property that by default references the &lt;strong&gt;Function type object&lt;/strong&gt;/&lt;strong&gt;Constructor&lt;/strong&gt; that created it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Every object that gets created internally references the object referenced by\n&lt;strong&gt;&quot;prototype&quot;&lt;/strong&gt; property of the Constructor that created it. This object is known as the created &lt;strong&gt;&lt;em&gt;object&apos;s prototype&lt;/em&gt;&lt;/strong&gt; (which is different from Function type objects &quot;prototype&quot; property which it references) . This way the created object can directly access the methods and properties defined in object referenced by the Constructor&apos;s &quot;prototype&quot; property (at the time of object creation).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An &lt;strong&gt;object&apos;s prototype&lt;/strong&gt; (and hence its inherited property names) can be retrieved using the &lt;strong&gt;Object.getPrototypeOf()&lt;/strong&gt;   method. In fact this method \ncan be used for navigating the entire prototype chain of the object.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The prototype chain of every object ultimately traces back to Object.prototype (Unless the object is created using Object.create(null) in which case the object has no prototype).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;typeof(new Array())===&apos;object&apos;&lt;/strong&gt; is by design of language and not a mistake as pointed by &lt;a href=&quot;http://javascript.crockford.com/survey.html&quot;&gt;Douglas Crockford&lt;/a&gt;  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Setting the prototype property of the Constructor to null(or undefined,number,true,false,string) shall not create an object with a null prototype. In such cases the newly created object&apos;s prototype is set to Object.prototype and its constructor is set to function Object. &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Hope this helps.&lt;/p&gt;\n    ","\n&lt;p&gt;It may help to categorise prototype chains into two categories.&lt;/p&gt;\n\n&lt;p&gt;Consider the constructor:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The value of &lt;code&gt;Object.getPrototypeOf(Person)&lt;/code&gt; is a function. In fact, it is &lt;code&gt;Function.prototype&lt;/code&gt;. Since &lt;code&gt;Person&lt;/code&gt; was created as a function, it shares the same prototype function object that all functions have. It is the same as &lt;code&gt;Person.__proto__&lt;/code&gt;, but that property should not be used. Anyway, with &lt;code&gt;Object.getPrototypeOf(Person)&lt;/code&gt; you effectively walk up the ladder of what is called the prototype chain.&lt;/p&gt;\n\n&lt;p&gt;The chain in upward direction looks like this:&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;Person&lt;/code&gt;  &lt;code&gt;Function.prototype&lt;/code&gt;  &lt;code&gt;Object.prototype&lt;/code&gt; (end point)&lt;/p&gt;\n\n&lt;p&gt;Important is that this prototype chain has little to do with the objects that &lt;code&gt;Person&lt;/code&gt; can &lt;em&gt;construct&lt;/em&gt;. Those constructed objects have their own prototype chain, and this chain can potentially have no close ancestor in common with the one mentioned above.&lt;/p&gt;\n\n&lt;p&gt;Take for example this object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;p&lt;/em&gt; has no direct prototype-chain relationship with &lt;em&gt;Person&lt;/em&gt;. Their relationship is a different one. The object &lt;em&gt;p&lt;/em&gt; has its own prototype chain. Using &lt;code&gt;Object.getPrototypeOf&lt;/code&gt;, you&apos;ll find the chain is as follows:&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;p&lt;/code&gt;  &lt;code&gt;Person.prototype&lt;/code&gt;  &lt;code&gt;Object.prototype&lt;/code&gt; (end point)&lt;/p&gt;\n\n&lt;p&gt;There is no function object in this chain (although that could be).&lt;/p&gt;\n\n&lt;p&gt;So &lt;code&gt;Person&lt;/code&gt; seems related to two kinds of chains, which live their own lives. To &quot;jump&quot; from one chain to the other, you use:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;.prototype&lt;/code&gt;: jump from the constructor&apos;s chain to the created-object&apos;s chain. This property is thus only defined for function objects (as &lt;code&gt;new&lt;/code&gt; can only be used on functions).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;.constructor&lt;/code&gt;: jump from the created-object&apos;s chain to the constructor&apos;s chain.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here is a visual presentation of the two prototype chains involved, represented as columns:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/FPPdI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/FPPdI.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To summarise:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;code&gt;prototype&lt;/code&gt; property gives no information of the &lt;em&gt;subject&apos;s&lt;/em&gt; prototype chain, but of objects &lt;em&gt;created by&lt;/em&gt; the subject. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It is no surprise that the name of the property &lt;code&gt;prototype&lt;/code&gt; can lead to confusion. It would maybe have been clearer if this property had been named &lt;code&gt;prototypeOfConstructedInstances&lt;/code&gt; or something along that line.&lt;/p&gt;\n\n&lt;p&gt;You can jump back and forth between the two prototype chains:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This symmetry can be broken by explicitly assigning a different object to the &lt;code&gt;prototype&lt;/code&gt; property (more about that later).&lt;/p&gt;\n\n&lt;h3&gt;Create one Function, Get Two Objects&lt;/h3&gt;\n\n&lt;p&gt;&lt;code&gt;Person.prototype&lt;/code&gt; is an object that was created at the same time the function &lt;code&gt;Person&lt;/code&gt; was created. It has &lt;code&gt;Person&lt;/code&gt; as constructor, even though that constructor did not actually execute yet. So two objects are created at the same time:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The function &lt;code&gt;Person&lt;/code&gt; itself&lt;/li&gt;\n&lt;li&gt;The object that will act as prototype when the function is called as a constructor&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Both are objects, but they have different roles: the function object &lt;em&gt;constructs&lt;/em&gt;, while the other object represents the prototype of any object that function will construct. The prototype object will become the parent of the constructed object in its prototype chain.&lt;/p&gt;\n\n&lt;p&gt;Since a function is also an object, it also has its own parent in its own prototype chain, but recall that these two chains are about different things. &lt;/p&gt;\n\n&lt;p&gt;Here are some equalities that could help grasp the issue -- all of these print &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is prototype chain info for the constructor (the function object):&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;) === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Step further up in the same hierarchy:&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;) === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here we swap lanes, and look at the constructor of the constructor&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Person.prototype was created by Person (at the time of its creation)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here we swap lanes back and forth:&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Although it is not an instance of it:&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(!(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// Instances are objects created by the constructor:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Similarly to what was shown for the constructor, here we have&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the same for the object created by the constructor:&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(p) === &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(p.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here we swap lanes, and look at the constructor&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(p.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(p &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h3&gt;Adding levels to the prototype chain&lt;/h3&gt;\n\n&lt;p&gt;Although a prototype object is created when you create a constructor function, you can ignore that object, and assign another object that should be used as prototype for any subsequent instances created by that constructor.&lt;/p&gt;\n\n&lt;p&gt;For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Thief&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n&lt;span class=&quot;hljs-title class_&quot;&gt;Thief&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = p; &lt;span class=&quot;hljs-comment&quot;&gt;// this determines the prototype for any new Thief objects:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thief&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the prototype chain of &lt;em&gt;t&lt;/em&gt; is one step longer than that of &lt;em&gt;p&lt;/em&gt;:&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;t&lt;/code&gt;  &lt;code&gt;p&lt;/code&gt;  &lt;code&gt;Person.prototype&lt;/code&gt;  &lt;code&gt;Object.prototype&lt;/code&gt; (end point)&lt;/p&gt;\n\n&lt;p&gt;The other prototype chain is not longer: &lt;code&gt;Thief&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; are siblings sharing the same parent in their prototype chain:&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;Person&lt;/code&gt;}&lt;br&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;Thief&lt;/code&gt;&amp;nbsp; }  &lt;code&gt;Function.prototype&lt;/code&gt;  &lt;code&gt;Object.prototype&lt;/code&gt; (end point)&lt;/p&gt;\n\n&lt;p&gt;The earlier presented graphic can then be extended to this (the original &lt;code&gt;Thief.prototype&lt;/code&gt; is left out):&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/m5DXc.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/m5DXc.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The blue lines represent prototype chains, the other coloured lines represent other relationships:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;between an object and its constructor&lt;/li&gt;\n&lt;li&gt;between a constructor and the prototype object that will be used for constructing objects&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The concept of &lt;code&gt;prototypal&lt;/code&gt; inheritance is one of the most complicated for many developers. Let&apos;s try to understand the root of problem to understand &lt;code&gt;prototypal inheritance&lt;/code&gt; better. Let&apos;s start with a &lt;code&gt;plain&lt;/code&gt; function. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/BsHT0.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BsHT0.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If we use a &lt;code&gt;new&lt;/code&gt; operator on the &lt;code&gt;Tree function&lt;/code&gt;, we call it as a &lt;code&gt;constructor&lt;/code&gt; function. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/cU6Qh.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cU6Qh.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Every &lt;code&gt;JavaScript&lt;/code&gt; function has a &lt;code&gt;prototype&lt;/code&gt;. When you log the &lt;code&gt;Tree.prototype&lt;/code&gt;, you get...&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Xop8c.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Xop8c.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you look at the above &lt;code&gt;console.log()&lt;/code&gt; output, you could a see a constructor property on &lt;code&gt;Tree.prototype&lt;/code&gt; and a &lt;code&gt;__proto__&lt;/code&gt; property too. The &lt;code&gt;__proto__&lt;/code&gt; represents the &lt;code&gt;prototype&lt;/code&gt; that this &lt;code&gt;function&lt;/code&gt; is based off, and since this is just a plain &lt;code&gt;JavaScript function&lt;/code&gt; with no &lt;code&gt;inheritance&lt;/code&gt; set up yet, it refers to the &lt;code&gt;Object prototype&lt;/code&gt; which is something just built in to JavaScript...&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This has things like &lt;code&gt;.toString, .toValue, .hasOwnProperty&lt;/code&gt; etc...&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__proto__&lt;/code&gt; which was brought my mozilla is deprecated and is replaced by &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; method to get the &lt;code&gt;object&apos;s prototype&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GtcJO.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GtcJO.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Tree&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Object {} &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s add a method to our &lt;code&gt;Tree&lt;/code&gt; &lt;code&gt;prototype&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/BsHT0.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BsHT0.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;We have modified the &lt;code&gt;Root&lt;/code&gt; and added a &lt;code&gt;function&lt;/code&gt; branch to it. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/cU6Qh.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cU6Qh.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;That means when you create an &lt;code&gt;instance&lt;/code&gt; of &lt;code&gt;Tree&lt;/code&gt;, you can call it&apos;s &lt;code&gt;branch&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Xop8c.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Xop8c.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;We can also add &lt;code&gt;primitives&lt;/code&gt; or &lt;code&gt;objects&lt;/code&gt; to our &lt;code&gt;Prototype&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GtcJO.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GtcJO.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s add a &lt;code&gt;child-tree&lt;/code&gt; to our &lt;code&gt;Tree&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ggFON.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ggFON.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here the &lt;code&gt;Child&lt;/code&gt; inherits its &lt;code&gt;prototype&lt;/code&gt; from Tree, what we are doing here is using &lt;code&gt;Object.create()&lt;/code&gt; method to create a new object based off what you pass, here it is &lt;code&gt;Tree.prototype&lt;/code&gt;. In this case what we&apos;re doing is setting the prototype of Child to a new object that looks identical to the &lt;code&gt;Tree&lt;/code&gt; prototype. Next we are setting the &lt;code&gt;Child&apos;s constructor to Child&lt;/code&gt;, if we don&apos;t it would point to &lt;code&gt;Tree()&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yiZcY.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yiZcY.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Child&lt;/code&gt; now has its own &lt;code&gt;prototype&lt;/code&gt;, its &lt;code&gt;__proto__&lt;/code&gt; points to &lt;code&gt;Tree&lt;/code&gt; and &lt;code&gt;Tree&apos;s prototype&lt;/code&gt; points to base &lt;code&gt;Object&lt;/code&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;  \n|\n \\\n  \\\n   &lt;span class=&quot;hljs-title class_&quot;&gt;Tree&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n   - branch\n   |\n   |\n    \\\n     \\\n      &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n      -toString\n      -valueOf\n      -etc., etc.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you create an &lt;code&gt;instance&lt;/code&gt; of &lt;code&gt;Child&lt;/code&gt; and call &lt;code&gt;branch&lt;/code&gt; which is originally available in &lt;code&gt;Tree&lt;/code&gt;. We haven&apos;t actually defined our &lt;code&gt;branch&lt;/code&gt; on the &lt;code&gt;Child prototype&lt;/code&gt;. BUT, in the &lt;code&gt;Root prototype&lt;/code&gt; which Child inherits from. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/k6BNb.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/k6BNb.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;In JS everything is not an object, everything can act like an object.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Javascript&lt;/code&gt; has primitives like &lt;code&gt;strings, number, booleans, undefined, null.&lt;/code&gt; They are not &lt;code&gt;object(i.e reference types)&lt;/code&gt;, but certainly can act like an &lt;code&gt;object&lt;/code&gt;. Let&apos;s look at an example here.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/WVjiv.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/WVjiv.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In the first line of this listing, a &lt;code&gt;primitive&lt;/code&gt; string value is assigned to name. The second line treats name like an &lt;code&gt;object&lt;/code&gt; and calls &lt;code&gt;charAt(0)&lt;/code&gt; using dot notation.&lt;/p&gt;\n\n&lt;p&gt;This is what happens behind the scenes:\n// what the &lt;code&gt;JavaScript&lt;/code&gt; engine does&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/l6MHc.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/l6MHc.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;String object&lt;/code&gt; exists only for one statement before its destroyed (a process called &lt;code&gt;autoboxing&lt;/code&gt;). Let&apos;s again get back to our &lt;code&gt;prototypal&lt;/code&gt; &lt;code&gt;inheritance&lt;/code&gt;. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;Javascript&lt;/code&gt; supports inheritance via &lt;code&gt;delegation&lt;/code&gt; based on\n&lt;code&gt;prototypes&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Each &lt;code&gt;Function&lt;/code&gt; has a &lt;code&gt;prototype&lt;/code&gt; property, which refers to another\nobject.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;properties/functions&lt;/code&gt; are looked from the &lt;code&gt;object&lt;/code&gt; itself or via\n&lt;code&gt;prototype&lt;/code&gt; chain if it does not exist&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A &lt;code&gt;prototype&lt;/code&gt; in JS is an object which &lt;code&gt;yields&lt;/code&gt; you to the parent of another &lt;code&gt;object&lt;/code&gt;. &lt;strong&gt;[ie.. delegation]&lt;/strong&gt; &lt;code&gt;Delegation&lt;/code&gt; means that if you are unable to do something, youll tell someone else to do it for you.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/W0NUA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/W0NUA.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/say0tzpL/1/&quot; rel=&quot;noreferrer&quot;&gt;https://jsfiddle.net/say0tzpL/1/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you look up the above fiddle, dog has access to &lt;code&gt;toString&lt;/code&gt; method, but its not available in it, but available via the prototype chain which delegates to &lt;code&gt;Object.prototype&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/lWILf.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lWILf.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you look at the below one, we are trying to access the &lt;code&gt;call&lt;/code&gt; method which is available in every &lt;code&gt;function&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/iF4RN.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/iF4RN.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/rknffckc/&quot; rel=&quot;noreferrer&quot;&gt;https://jsfiddle.net/rknffckc/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you look up the above fiddle, &lt;code&gt;Profile&lt;/code&gt; Function has access to &lt;code&gt;call&lt;/code&gt; method, but its not available in it, but available via the prototype chain which delegates to &lt;code&gt;Function.prototype&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Mijkj.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Mijkj.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;prototype&lt;/code&gt; is a property of the function constructor, whereas &lt;code&gt;__proto__&lt;/code&gt; is a property of the objects constructed from the function constructor. Every function comes with a &lt;code&gt;prototype&lt;/code&gt; property whose value is an empty &lt;code&gt;object&lt;/code&gt;. When we create an instance of the function, we get an internal property &lt;code&gt;[[Prototype]]&lt;/code&gt; or &lt;code&gt;__proto__&lt;/code&gt; whose reference is the prototype of the Function &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/HvzDP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HvzDP.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The above diagram looks bit complicated, but brings out the whole picture on how &lt;code&gt;prototype chaining&lt;/code&gt; works. Let&apos;s walk through this slowly:&lt;/p&gt;\n\n&lt;p&gt;There are two instance &lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt;, whose constructor is &lt;code&gt;Bar&lt;/code&gt; and parent is Foo and has two methods from prototype chain &lt;code&gt;identify&lt;/code&gt; and &lt;code&gt;speak&lt;/code&gt; via &lt;code&gt;Bar&lt;/code&gt; and &lt;code&gt;Foo&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/EllEL.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/EllEL.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/kbp7jr7n/&quot; rel=&quot;noreferrer&quot;&gt;https://jsfiddle.net/kbp7jr7n/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you look up the code above, we have &lt;code&gt;Foo&lt;/code&gt; constructor who has the method &lt;code&gt;identify()&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; constructor which has &lt;code&gt;speak&lt;/code&gt; method. We create two &lt;code&gt;Bar&lt;/code&gt; instance &lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt; whose parent type is &lt;code&gt;Foo&lt;/code&gt;. Now while calling &lt;code&gt;speak&lt;/code&gt; method of &lt;code&gt;Bar&lt;/code&gt;, we are able to identify the who is calling the speak via &lt;code&gt;prototype&lt;/code&gt; chain. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/V7fH7.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/V7fH7.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Bar&lt;/code&gt; now has all the methods of &lt;code&gt;Foo&lt;/code&gt; which are defined in its &lt;code&gt;prototype&lt;/code&gt;. Let&apos;s dig further in understanding the &lt;code&gt;Object.prototype&lt;/code&gt; and &lt;code&gt;Function.prototype&lt;/code&gt; and how they are related. If you look up the constructor of &lt;code&gt;Foo&lt;/code&gt;, &lt;code&gt;Bar&lt;/code&gt; and &lt;code&gt;Object&lt;/code&gt; are &lt;code&gt;Function constructor&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/wzzRu.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/wzzRu.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;prototype&lt;/code&gt; of &lt;code&gt;Bar&lt;/code&gt; is &lt;code&gt;Foo&lt;/code&gt;, &lt;code&gt;prototype&lt;/code&gt; of &lt;code&gt;Foo&lt;/code&gt; is &lt;code&gt;Object&lt;/code&gt; and if you look closely the &lt;code&gt;prototype&lt;/code&gt; of &lt;code&gt;Foo&lt;/code&gt; is related to &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/wEOxo.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/wEOxo.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Before we close this down, let&apos;s just wrap with a small piece of code here to &lt;strong&gt;summarize everything above&lt;/strong&gt;. We are using &lt;code&gt;instanceof&lt;/code&gt; operator here to check whether an &lt;code&gt;object&lt;/code&gt; has in its &lt;code&gt;prototype&lt;/code&gt; chain the &lt;code&gt;prototype&lt;/code&gt; property of a &lt;code&gt;constructor&lt;/code&gt; which below summarizes the entire big diagram. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/n84uV.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/n84uV.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope this add&apos;s some information, I know this kinda could be big to grasp... in simple words its &lt;strong&gt;it&apos;s just objects linked to objects!!!!&lt;/strong&gt; &lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;what is the exact purpose of this &quot;.prototype&quot; property?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The interface to standard classes become extensible. For example, you are using the &lt;code&gt;Array&lt;/code&gt; class and you also need to add a custom serializer for all your array objects. Would you spend time coding up a subclass, or use composition or ... The prototype property solves this by letting the users control the exact set of members/methods available to a class.&lt;/p&gt;\n\n&lt;p&gt;Think of prototypes as an extra vtable-pointer. When some members are missing from the original class, the prototype is looked up at runtime.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PMfcsYzj-9M&quot;&gt;The Definitive Guide to Object-Oriented JavaScript&lt;/a&gt; - a very concise and clear ~30min video explanation of the asked question (Prototypal Inheritance topic begins from &lt;a href=&quot;https://youtu.be/PMfcsYzj-9M?t=344&quot;&gt;5:45&lt;/a&gt;, although I&apos;d rather listen to the whole video). The author of this video also made JavaScript object visualizer website &lt;a href=&quot;http://www.objectplayground.com/&quot;&gt;http://www.objectplayground.com/&lt;/a&gt;.&lt;a href=&quot;https://i.stack.imgur.com/Vf4qR.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Vf4qR.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/xcRpT.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/xcRpT.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I found it helpful to explain the &quot;prototype chain&quot; as recursive convention when &lt;code&gt;obj_n.prop_X&lt;/code&gt; is being referenced:&lt;/p&gt;\n\n&lt;p&gt;if &lt;code&gt;obj_n.prop_X&lt;/code&gt; doesn&apos;t exist, check &lt;code&gt;obj_n+1.prop_X&lt;/code&gt; where &lt;code&gt;obj_n+1 = obj_n.[[prototype]]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;If the &lt;code&gt;prop_X&lt;/code&gt; is finally found in the k-th prototype object then&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;obj_1.prop_X = obj_1.[[prototype]].[[prototype]]..(k-times)..[[prototype]].prop_X&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;You can find a graph of the relation of Javascript objects by their properties here:&lt;/p&gt;\n\n&lt;p&gt; &lt;img src=&quot;https://i.stack.imgur.com/2tGyY.jpg&quot; alt=&quot;js objects graph&quot;&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsobjects.org&quot; rel=&quot;noreferrer&quot;&gt;http://jsobjects.org&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When a constructor creates an object, that object implicitly references the constructors prototype property for the purpose of resolving property references. The constructors prototype property can be referenced by the program expression constructor.prototype, and properties added to an objects prototype are shared, through inheritance, by all objects sharing the prototype.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s two distinct but related entities here that need explaining:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The &lt;code&gt;.prototype&lt;/code&gt; property of functions.&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;[[Prototype]]&lt;/code&gt;&lt;sup&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/sup&gt; property of all objects&lt;sup&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/sup&gt;. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These are two different things. &lt;/p&gt;\n\n&lt;h2&gt;The &lt;code&gt;[[Prototype]]&lt;/code&gt; property:&lt;/h2&gt;\n\n&lt;p&gt;This is a property that exists on all&lt;sup&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/sup&gt; objects.&lt;/p&gt;\n\n&lt;p&gt;What&apos;s stored here is another object, which, as an object itself, has a &lt;code&gt;[[Prototype]]&lt;/code&gt; of its own that points to another object. That other object has a &lt;code&gt;[[Prototype]]&lt;/code&gt; of its own. This story continues until you reach the prototypical object that provides methods that are accessible on all objects (like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.toString&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;[[Prototype]]&lt;/code&gt; property is part of what forms the &lt;code&gt;[[Prototype]]&lt;/code&gt; chain. This chain of &lt;code&gt;[[Prototype]]&lt;/code&gt; objects is what is examined when, for example, &lt;code&gt;[[Get]]&lt;/code&gt; or &lt;code&gt;[[Set]]&lt;/code&gt; operations are performed on an object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {}\nobj.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;hljs-comment&quot;&gt;// [[Get]] consults prototype chain&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// [[Set]] consults prototype chain&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;The &lt;code&gt;.prototype&lt;/code&gt; property:&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;This is a property that is only found on functions.&lt;/em&gt; Using a very simple function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;.prototype&lt;/code&gt; property &lt;em&gt;holds an object&lt;/em&gt; that will be assigned to &lt;code&gt;b.[[Prototype]]&lt;/code&gt; when you do &lt;code&gt;var b = new Bar&lt;/code&gt;. You can easily examine this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Both assign Bar.prototype to b1/b2[[Prototype]]&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Object.getPrototypeOf grabs the objects [[Prototype]]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(b) === &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One of the most important &lt;code&gt;.prototype&lt;/code&gt;s is that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype&quot; rel=&quot;noreferrer&quot;&gt;of the &lt;code&gt;Object&lt;/code&gt; function&lt;/a&gt;. This prototype holds the prototypical object that all &lt;code&gt;[[Prototype]]&lt;/code&gt; chains contain. On it, all the available methods for new objects are defined:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get properties that are defined on this object&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, since &lt;code&gt;.prototype&lt;/code&gt; is an object, it has a &lt;code&gt;[[Prototype]]&lt;/code&gt; property. When you don&apos;t make any assignments to &lt;code&gt;Function.prototype&lt;/code&gt;, the &lt;code&gt;.prototype&lt;/code&gt;&apos;s &lt;code&gt;[[Prototype]]&lt;/code&gt; points to the prototypical object (&lt;code&gt;Object.prototype&lt;/code&gt;). This is automatically performed anytime you create a new function. &lt;/p&gt;\n\n&lt;p&gt;This way, any time you do &lt;code&gt;new Bar;&lt;/code&gt; the prototype chain is set up for you, you get everything defined on &lt;code&gt;Bar.prototype&lt;/code&gt; and everything defined on &lt;code&gt;Object.prototype&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get all Bar.prototype properties&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get all Object.prototype properties&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you &lt;em&gt;do&lt;/em&gt; make assignments to &lt;code&gt;Function.prototype&lt;/code&gt; all you are doing is extending the prototype chain to include another object. It&apos;s like an insertion in a singly linked list. &lt;/p&gt;\n\n&lt;p&gt;This basically alters the &lt;code&gt;[[Prototype]]&lt;/code&gt; chain allowing properties that are defined on the object assigned to &lt;code&gt;Function.prototype&lt;/code&gt; to be seen by any object created by the function.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;[1: That won&apos;t confuse anyone; made available via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto&quot; rel=&quot;noreferrer&quot;&gt;the &lt;code&gt;__proto__&lt;/code&gt; property&lt;/a&gt; in many implementations.&lt;/sup&gt;&lt;br&gt;\n&lt;sup&gt;[2]: All except &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let me tell you my understanding of prototypes. I am not going to compare the inheritance here with other languages. I wish people would stop comparing languages, and just understand the language as itself. Understanding prototypes and prototypal inheritance is so simple, as I will show you below.&lt;/p&gt;\n\n&lt;p&gt;Prototype is like a model, based on which you create a product. The crucial point to understand is that when you create an object using another object as it&apos;s prototype, the link between the prototype and the product is ever-lasting. For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; model = {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; product = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(model);\nmodel.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\nproduct.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;\n=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Every object contains an internal property called the [[prototype]], which can be accessed by the &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; function. &lt;code&gt;Object.create(model)&lt;/code&gt; creates a new object and sets it&apos;s [[prototype]] property to the object &lt;strong&gt;model&lt;/strong&gt;. Hence when you do &lt;code&gt;Object.getPrototypeOf(product)&lt;/code&gt;, you will get the object &lt;strong&gt;model&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Properties in the &lt;strong&gt;product&lt;/strong&gt; are handled in the following way:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;When a property is accessed to just read it&apos;s value, its looked up in the scope chain. The search for the variable starts from the &lt;strong&gt;product&lt;/strong&gt; upwards to it&apos;s prototype. If such a variable is found in the search, the search is stopped right there, and the value is returned. If such a variable cannot be found in the scope chain, undefined is returned.&lt;/li&gt;\n&lt;li&gt;When a property is written(altered), then the property is always written on the &lt;strong&gt;product&lt;/strong&gt; object. If the &lt;strong&gt;product&lt;/strong&gt; does not have such a property already, it is implicitly created and written.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Such a linking of objects using the prototype property is called prototypal inheritance. There, it is so simple, agree?&lt;/p&gt;\n    ","\n&lt;p&gt;Another attempt to explain &lt;a href=&quot;https://github.com/rus0000/jsinheritance&quot; rel=&quot;noreferrer&quot;&gt;JavaScript prototype-based inheritance&lt;/a&gt; with better pictures&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/rus0000/jsinheritance&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/6gEKe.png&quot; alt=&quot;Simple objects inheritanse&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Consider the following &lt;code&gt;keyValueStore&lt;/code&gt; object :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keyValueStore = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; kvs = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        count++;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = {};\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;get&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[key]; };\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;set&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[key] = value; };\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;delete&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[key]; };\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getLength&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; l = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;) l++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l;\n        }\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  { &lt;span class=&quot;hljs-comment&quot;&gt;// Singleton public properties&lt;/span&gt;\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;create&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;kvs&lt;/span&gt;(); },\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;count&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count; }\n    };\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I can create a new instance of this object by doing this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;kvs = keyValueStore.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each instance of this object would have the following public properties :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;get&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;getLength&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now, suppose we create 100 instances of this &lt;code&gt;keyValueStore&lt;/code&gt; object. Even though &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;getLength&lt;/code&gt; will do the exact same thing for each of these 100 instances, every instance has its own copy of this function.&lt;/p&gt;\n\n&lt;p&gt;Now, imagine if you could have just a single &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;getLength&lt;/code&gt; copy, and each instance would reference that same function. This would be better for performance and require less memory.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s where prototypes come in. A prototype is a &quot;blueprint&quot; of properties that is inherited but not copied by instances. So this means that it exists only once in memory for all instances of an object and is shared by all of those instances.&lt;/p&gt;\n\n&lt;p&gt;Now, consider the &lt;code&gt;keyValueStore&lt;/code&gt; object again. I could rewrite it like this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keyValueStore = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; kvs = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        count++;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = {};\n    };\n\n    kvs.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[key]; },\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;set&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[key] = value; },\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;delete&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[key]; },\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;getLength&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; l = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;) l++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l;\n        }\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;create&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;kvs&lt;/span&gt;(); },\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;count&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count; }\n    };\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This does EXACTLY the same as the previous version of the &lt;code&gt;keyValueStore&lt;/code&gt; object, except that all of its methods are now put in a prototype. What this means, is that all of the 100 instances now share these four methods instead of each having their own copy.&lt;/p&gt;\n    ","\n&lt;h2&gt;Summary:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Functions are objects in javascript and thus can have properties&lt;/li&gt;\n&lt;li&gt;(Constructor) functions &lt;strong&gt;always&lt;/strong&gt; have a prototype property&lt;/li&gt;\n&lt;li&gt;When a function is used as a constructor with the &lt;code&gt;new&lt;/code&gt; keyword the object gets  prototype. A reference to this prototype can be found on the &lt;code&gt;__proto__&lt;/code&gt; property of the newly created object.&lt;/li&gt;\n&lt;li&gt;This &lt;code&gt;__proto__&lt;/code&gt; property refers to the &lt;code&gt;prototype&lt;/code&gt; property of the constructor function.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example:&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt; (name) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; me = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;willem&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Person has a prototype property&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; === me.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// the __proto__ property of the instance refers to prototype property of the function.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Why is this usefull:&lt;/h2&gt;\n\n&lt;p&gt;Javascript has a mechanism when looking up properties on Objects which is called &lt;strong&gt;&apos;prototypal inheritance&apos;&lt;/strong&gt;, here is what is basically does:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;First is checked if the property is located on the Object itself. If so this property is returned.&lt;/li&gt;\n&lt;li&gt;If the property is not located on the object itself it will &apos;climb up the protochain&apos;. It basically looks at the object referred to by the &lt;strong&gt;proto&lt;/strong&gt; property. There it checks if the property is available on the object referred to by &lt;strong&gt;proto&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;If the property isn&apos;t located on the &lt;strong&gt;proto&lt;/strong&gt; object it will climb up the &lt;strong&gt;proto&lt;/strong&gt; chain all the way up to Object object.&lt;/li&gt;\n&lt;li&gt;If it cannot find the property nowhere on the object and its prototype chain it will return undefined.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; mySelf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Willem&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mySelf.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mySelf.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The  &lt;code&gt;__proto__&lt;/code&gt; property has been deprecated, although it is implemented in most modern browsers a better way to obtain the prototype object reference would be:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I always like analogies when it comes to understand this type of stuff. &apos;Prototypical inheritance&apos; is pretty confusing in comparison to class bass inheritance in my opinion, even though prototypes are much simpler paradigm. In fact with prototypes, there really is no inheritance, so the name in and of itself misleading, it&apos;s more a type of &apos;delegation&apos;.&lt;/p&gt;\n\n&lt;p&gt;Imagine this ....&lt;/p&gt;\n\n&lt;p&gt;You&apos;re in high-school, and you&apos;re in class and have a quiz that&apos;s due today, but you don&apos;t have a pen to fill out your answers. Doh!&lt;/p&gt;\n\n&lt;p&gt;You&apos;re sitting next to your friend Finnius, who might have a pen. You ask, and he looks around his desk unsuccessfully, but instead of saying &quot;I don&apos;t have a pen&quot;, he&apos;s a nice friend he checks with his other friend Derp if he has a pen. Derp does indeed have a spare pen and passes it back to Finnius, who passes it over to you to complete your quiz. Derp has entrusted the pen to Finnius, who has delegated the pen to you for use.&lt;/p&gt;\n\n&lt;p&gt;What is important here is that Derp does not give the pen to you, as you don&apos;t have a direct &lt;em&gt;relationship&lt;/em&gt; with him.&lt;/p&gt;\n\n&lt;p&gt;This, is a simplified example of how prototypes work, where a tree of data is searched for the thing you&apos;re looking for.&lt;/p&gt;\n    ","\n&lt;p&gt;another scheme showing &lt;strong&gt;__proto__&lt;/strong&gt;, &lt;strong&gt;prototype&lt;/strong&gt; and &lt;strong&gt;constructor&lt;/strong&gt; relations:\n&lt;a href=&quot;https://i.stack.imgur.com/uy5ce.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uy5ce.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s just that you already have an object with &lt;code&gt;Object.new&lt;/code&gt; but you still don&apos;t have an object when using the constructor syntax.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s important to understand that there is a distinction between an object&apos;s prototype (which is available via &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt;, or via the deprecated &lt;code&gt;__proto__&lt;/code&gt; property) and the &lt;code&gt;prototype&lt;/code&gt; property on constructor functions. The former is the property on each instance, and the latter is the property on the constructor. That is, &lt;code&gt;Object.getPrototypeOf(new Foobar())&lt;/code&gt; refers to the same object as &lt;code&gt;Foobar.prototype&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Reference: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;Prototype&lt;/strong&gt; creates &lt;strong&gt;new object&lt;/strong&gt; by cloning existing &lt;strong&gt;object&lt;/strong&gt;. So really when we think about prototype we can really think &lt;strong&gt;cloning or making&lt;/strong&gt; a copy of something instead of making it up.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to understand the concept of prototype and prototype based inheritance from the basics, check the official &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot; rel=&quot;nofollow noreferrer&quot;&gt;MDN&lt;/a&gt; docs, they explain it pretty well.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;When it comes to inheritance, JavaScript only has one construct:\nobjects. Each object has a private property which holds a link to\nanother object called its prototype. That prototype object has a\nprototype of its own, and so on until an object is reached with null\nas its prototype. By definition, null has no prototype, and acts as\nthe final link in this prototype chain.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Also, here&apos;s another good resource that explains using simple examples - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes&lt;/a&gt;&lt;/p&gt;\n    "],"492":["\n&lt;p&gt;Shuffle any &lt;code&gt;(I)List&lt;/code&gt; with an extension method based on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Fisher-Yates_shuffle&quot; rel=&quot;noreferrer&quot;&gt;Fisher-Yates shuffle&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random rng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();  \n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;  \n{  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = list.Count;  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {  \n        n--;  \n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = rng.Next(n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);  \n        T &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = list[k];  \n        list[k] = list[n];  \n        list[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;  \n    }  \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Product&amp;gt; products = GetProducts();\nproducts.Shuffle();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code above uses the much criticised System.Random method to select swap candidates. It&apos;s fast but not as random as it should be. If you need a better quality of randomness in your shuffles use the random number generator in System.Security.Cryptography like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Security.Cryptography;\n...\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;\n{\n    RNGCryptoServiceProvider provider = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RNGCryptoServiceProvider();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = list.Count;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] box = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; provider.GetBytes(box);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!(box[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;lt; n * (Byte.MaxValue / n)));\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = (box[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] % n);\n        n--;\n        T &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = list[k];\n        list[k] = list[n];\n        list[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A simple comparison is available &lt;a href=&quot;https://web.archive.org/web/20150801085341/http://blog.thijssen.ch/2010/02/when-random-is-too-consistent.html&quot; rel=&quot;noreferrer&quot;&gt;at this blog&lt;/a&gt; (WayBack Machine).&lt;/p&gt;\n\n&lt;p&gt;Edit: Since writing this answer a couple years back, many people have commented or written to me, to point out the big silly flaw in my comparison. They are of course right. There&apos;s nothing wrong with System.Random if it&apos;s used in the way it was intended. In my first example above, I instantiate the rng variable inside of the Shuffle method, which is asking for trouble if the method is going to be called repeatedly. Below is a fixed, full example based on a really useful comment received today from @weston here on SO.&lt;/p&gt;\n\n&lt;p&gt;Program.cs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Threading;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SimpleLottery&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Program&lt;/span&gt;\n  {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numbers = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;(Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;));\n      numbers.Shuffle();\n      Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The winning numbers are: {0}&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,  &quot;&lt;/span&gt;, numbers.GetRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)));\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ThreadSafeRandom&lt;/span&gt;\n  {\n      [&lt;span class=&quot;hljs-meta&quot;&gt;ThreadStatic&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random Local;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random ThisThreadsRandom\n      {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Local ?? (Local = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(&lt;span class=&quot;hljs-keyword&quot;&gt;unchecked&lt;/span&gt;(Environment.TickCount * &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId))); }\n      }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyExtensions&lt;/span&gt;\n  {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;\n    {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = list.Count;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n      {\n        n--;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = ThreadSafeRandom.ThisThreadsRandom.Next(n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        T &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = list[k];\n        list[k] = list[n];\n        list[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we only need to shuffle items in a completely random order (just to mix the items in a list), I prefer this simple yet effective code that orders items by guid...&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shuffledcards = cards.OrderBy(a =&amp;gt; Guid.NewGuid()).ToList();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;As people have pointed out in the comments, GUIDs are not guaranteed to be random, so we should be using a real random number generator instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random rng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n...\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shuffledcards = cards.OrderBy(a =&amp;gt; rng.Next()).ToList();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m bit surprised by all the clunky versions of this simple algorithm here. Fisher-Yates (or Knuth shuffle) is bit tricky but very compact. Why is it tricky? Because your need to pay attention to whether your random number generator &lt;code&gt;r(a,b)&lt;/code&gt; returns value where &lt;code&gt;b&lt;/code&gt; is inclusive or exclusive. I&apos;ve also edited &lt;a href=&quot;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia description&lt;/a&gt; so people don&apos;t blindly follow pseudocode there and create hard to detect bugs. For .Net, &lt;code&gt;Random.Next(a,b)&lt;/code&gt; returns number exclusive of &lt;code&gt;b&lt;/code&gt; so without further ado, here&apos;s how it can be implemented in C#/.Net:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list, Random rnd&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=list.Count; i &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--)\n        list.Swap(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, rnd.Next(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i));\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Swap&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; j&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = list[i];\n    list[i] = list[j];\n    list[j] = temp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://dotnetfiddle.net/f7aG0o#&quot; rel=&quot;noreferrer&quot;&gt;Try this code&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Extension method for IEnumerable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Randomize&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; source&lt;/span&gt;)&lt;/span&gt;\n{\n    Random rnd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; source.OrderBy&amp;lt;T, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;((item) =&amp;gt; rnd.Next());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Idea is get anonymous object with item and random order and then reorder items by this order and return value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = items.Select(x =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = x, order = rnd.Next() })\n            .OrderBy(x =&amp;gt; x.order).Select(x =&amp;gt; x.&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;).ToList()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Randomize&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;\n    {\n        List&amp;lt;T&amp;gt; randomizedList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;();\n        Random rnd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (list.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; index = rnd.Next(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, list.Count); &lt;span class=&quot;hljs-comment&quot;&gt;//pick a random item from the master list&lt;/span&gt;\n            randomizedList.Add(list[index]); &lt;span class=&quot;hljs-comment&quot;&gt;//place it at the end of the randomized list&lt;/span&gt;\n            list.RemoveAt(index);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; randomizedList;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;\nThe &lt;code&gt;RemoveAt&lt;/code&gt; is a weakness in my previous version. This solution overcomes that.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; source,\n        Random generator = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (generator == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n    {\n        generator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elements = source.ToArray();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = elements.Length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; swapIndex = generator.Next(i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; elements[swapIndex];\n        elements[swapIndex] = elements[i];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the optional &lt;code&gt;Random generator&lt;/code&gt;, if the base framework implementation of &lt;code&gt;Random&lt;/code&gt; is not thread-safe or cryptographically strong enough for your needs, you can inject your implementation into the operation.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/24648788/659190&quot;&gt;A suitable implementation for a thread-safe cryptographically strong &lt;code&gt;Random&lt;/code&gt; implementation can be found in this answer.&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;s&gt;Here&apos;s an idea, extend IList in a (hopefully) efficient way.&lt;/s&gt;&lt;/p&gt;&lt;s&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; choices = Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, list.Count).ToList();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = choices.Count; n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; n--)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = rng.Next(n);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list[choices[k]];\n        choices.RemoveAt(k);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list[choices[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;/s&gt;&lt;p&gt;&lt;s&gt;&lt;/s&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is my preferred method of a shuffle when it&apos;s desirable to not modify the original. It&apos;s a variant of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_.22inside-out.22_algorithm&quot; rel=&quot;noreferrer&quot;&gt;FisherYates &quot;inside-out&quot; algorithm&lt;/a&gt; that works on any enumerable sequence (the length of &lt;code&gt;source&lt;/code&gt; does not need to be known from start).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;NextList&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; Random r, IEnumerable&amp;lt;T&amp;gt; source&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; source)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = r.Next(list.Count + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == list.Count)\n    {\n      list.Add(item);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = list[i];\n      list[i] = item;\n      list.Add(temp);\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This algorithm can also be implemented by allocating a range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length - 1&lt;/code&gt; and randomly exhausting the indices by swapping the randomly chosen index with the last index until all indices have been chosen exactly once. This above code accomplishes the exact same thing but without the additional allocation. Which is pretty neat.&lt;/p&gt;\n\n&lt;p&gt;With regards to the &lt;code&gt;Random&lt;/code&gt; class it&apos;s a general purpose number generator (and If I was running a lottery I&apos;d consider using something different). It also relies on a time based seed value by default. A small alleviation of the problem is to seed the &lt;code&gt;Random&lt;/code&gt; class with the &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; or you could use the &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; in a method similar to this (see below) to generate uniformly chosen random double floating point values but running a lottery pretty much requires understanding randomness and the nature of the randomness source.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n_secureRng.GetBytes(bytes);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; v = BitConverter.ToUInt64(bytes, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt;)v / ((&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt;)&lt;span class=&quot;hljs-built_in&quot;&gt;ulong&lt;/span&gt;.MaxValue + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The point of generating a random double (between 0 and 1 exclusively) is to use to scale to an integer solution. If you need to pick something from a list based on a random double &lt;code&gt;x&lt;/code&gt; that&apos;s always going to be &lt;code&gt;0 &amp;lt;= x &amp;amp;&amp;amp; x &amp;lt; 1&lt;/code&gt; is straight forward.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list[(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)(x * list.Count)];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Enjoy!&lt;/p&gt;\n    ","\n&lt;p&gt;If you don&apos;t mind using two &lt;code&gt;Lists&lt;/code&gt;, then this is probably the easiest way to do it, but probably not the most efficient or unpredictable one: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; xList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;() { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; };\nList&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; deck = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; xInt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xList)\n    deck.Insert(random.Next(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, deck.Count + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), xInt);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I usually use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt; ();\nfillList (list);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; randomizedList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt; ();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rnd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random ();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (list.Count != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = rnd.Next (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, list.Count);\n    randomizedList.Add (list [index]);\n    list.RemoveAt (index);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you have a fixed number (75), you could create an array with 75 elements, then enumerate your list, moving the elements to randomized positions in the array.  You can generate the mapping of list number to array index using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Knuth_shuffle&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;Fisher-Yates shuffle&quot;&gt;Fisher-Yates shuffle&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can achieve that be using this simple extension method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerableExtensions&lt;/span&gt;\n{\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;t&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Randomize&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;t&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;t&amp;gt; target&lt;/span&gt;)&lt;/span&gt;\n    {\n        Random r = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target.OrderBy(x=&amp;gt;(r.Next()));\n    }        \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and you can use it by doing the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// use this on any collection that implements IEnumerable!&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// List, Array, HashSet, Collection, etc&lt;/span&gt;\n\nList&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; myList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;random&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bat&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myList.Randomize())\n{\n    Console.WriteLine(s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just wanted to suggest a variant using an &lt;code&gt;IComparer&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;List.Sort()&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RandomIntComparer&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;IComparer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; Random _random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Compare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; y&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _random.Next(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;list.Sort(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RandomIntComparer());\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have found an interesting solution online.&lt;/p&gt;\n\n&lt;p&gt;Courtesy: &lt;a href=&quot;https://improveandrepeat.com/2018/08/a-simple-way-to-shuffle-your-lists-in-c/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://improveandrepeat.com/2018/08/a-simple-way-to-shuffle-your-lists-in-c/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;var shuffled = myList.OrderBy(x =&amp;gt; Guid.NewGuid()).ToList();&lt;/p&gt;\n    ","\n&lt;p&gt;One can use the Shuffle extension methond from morelinq package, it works on IEnumerables&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;install-package morelinq&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; MoreLinq;\n...    \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; randomized = list.Shuffle();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simple modification of the &lt;a href=&quot;https://stackoverflow.com/a/1262619/&quot;&gt;accepted answer&lt;/a&gt; that returns a new list instead of working in-place, and accepts the more general &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; as many other Linq methods do.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random rng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Returns a new list where the elements are randomly shuffled.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Based on the Fisher-Yates shuffle, which has O(n) complexity.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; source = list.ToList();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = source.Count;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shuffled = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;(n);\n    shuffled.AddRange(source);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        n--;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = rng.Next(n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        T &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = shuffled[k];\n        shuffled[k] = shuffled[n];\n        shuffled[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; shuffled;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    List&amp;lt;T&amp;gt; OriginalList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;();\n    List&amp;lt;T&amp;gt; TempList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;();\n    Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; length = OriginalList.Count;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; TempIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        TempIndex = random.Next(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length);  &lt;span class=&quot;hljs-comment&quot;&gt;// get random value between 0 and original length&lt;/span&gt;\n        TempList.Add(OriginalList[TempIndex]); &lt;span class=&quot;hljs-comment&quot;&gt;// add to temp list&lt;/span&gt;\n        OriginalList.RemoveAt(TempIndex); &lt;span class=&quot;hljs-comment&quot;&gt;// remove from original list&lt;/span&gt;\n        length = OriginalList.Count;  &lt;span class=&quot;hljs-comment&quot;&gt;// get new list &amp;lt;T&amp;gt; length.&lt;/span&gt;\n    }\n\n    OriginalList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;();\n    OriginalList = TempList; &lt;span class=&quot;hljs-comment&quot;&gt;// copy all items from temp list to original list.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an implementation of the Fisher-Yates shuffle that allows specification of the number of elements to return; hence, it is not necessary to first sort the whole collection before taking your desired number of elements.&lt;/p&gt;\n&lt;p&gt;The sequence of swapping elements is reversed from default; and proceeds from the first element to the last element, so that retrieving a subset of the collection yields the same (partial) sequence as shuffling the whole collection:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;collection.TakeRandom(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;).SequenceEqual(collection.Shuffle().Take(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This algorithm is based on Durstenfeld&apos;s (modern) version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fisher-Yates shuffle&lt;/a&gt; on Wikipedia.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;TakeRandom&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; collection, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; count, Random random&lt;/span&gt;)&lt;/span&gt; =&amp;gt; shuffle(collection, count, random);\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; collection, Random random&lt;/span&gt;)&lt;/span&gt; =&amp;gt; shuffle(collection, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, random);\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;IEnumerable&amp;lt;T&amp;gt; collection, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;? take, Random random&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = collection.ToArray();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = a.Length;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (take &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || take &amp;gt; n) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid number of elements to return.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; end = take ?? n;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; end; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = random.Next(i, n);\n        (a[i], a[j]) = (a[j], a[i]);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (take.HasValue) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArraySegment&amp;lt;T&amp;gt;(a, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, take.Value);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can make the Fisher-Yates shuffle more terse and expressive by using tuples for the swap.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = list.Count;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    {\n        n--;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = random.Next(n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        (list[k], list[n]) = (list[n], list[k]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s an efficient Shuffler that returns a byte array of shuffled values. It never shuffles more than is needed. It can be restarted from where it previously left off. My actual implementation (not shown) is a MEF component that allows a user specified replacement shuffler.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] array, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; count&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = array.Length - start;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] shuffled = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[count];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++, start++)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = UniformRandomGenerator.Next(n--) + start;\n            shuffled[i] = array[k];\n            array[k] = array[start];\n            array[start] = shuffled[i];\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; shuffled;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;`&lt;/p&gt;\n    ","\n&lt;p&gt;Your question is how to &lt;strong&gt;randomize&lt;/strong&gt; a list. This means:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;All unique combinations should be possible of happening&lt;/li&gt;\n&lt;li&gt;All unique combinations should occur with the same distribution (AKA being non-biased).&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;A large number of the answers posted for this question do NOT satisfy the two requirements above for being &quot;random&quot;.&lt;/p&gt;\n&lt;p&gt;Here&apos;s a compact, non-biased pseudo-random function following the Fisher-Yates shuffle method.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list, Random rnd&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = list.Count&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;; i &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; randomIndex = rnd.Next(i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//maxValue (i + 1) is EXCLUSIVE&lt;/span&gt;\n        list.Swap(i, randomIndex); \n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Swap&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; indexA, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; indexB&lt;/span&gt;)&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = list[indexA];\n   list[indexA] = list[indexB];\n   list[indexB] = temp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;We can use an extension method for List and use a thread-safe random generator combination.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ListExtensions&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IList&amp;lt;T&amp;gt; list&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (list == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-keyword&quot;&gt;nameof&lt;/span&gt;(list));\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n = list.Count;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        {\n            n--;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; k = ThreadSafeRandom.Next(n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            (list[n], list[k]) = (list[k], list[n]);\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ThreadSafeRandom&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; Random _global = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt; _local = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Random&amp;gt;(() =&amp;gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; seed;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;lock&lt;/span&gt; (_global)\n        {\n            seed = _global.Next();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(seed);\n    });\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; maxValue&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _local.Value.Next(maxValue);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;ve packaged this on &lt;a href=&quot;https://www.nuget.org/packages/ListShuffle&quot; rel=&quot;nofollow noreferrer&quot;&gt;NuGet&lt;/a&gt; with the source code available on &lt;a href=&quot;https://github.com/MarkCiliaVincenti/ListShuffle&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a thread-safe way to do this:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EnumerableExtension&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random globalRng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;ThreadStatic&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random _rng;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Random rng \n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_rng == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; seed;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;lock&lt;/span&gt; (globalRng)\n                {\n                    seed = globalRng.Next();\n                }\n                _rng = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(seed);\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _rng;\n         }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; items&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items.OrderBy (i =&amp;gt; rng.Next());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Deck&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IEnumerable&amp;lt;Card&amp;gt; initialCards&lt;/span&gt;)&lt;/span&gt; \n    {\n    cards = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Card&amp;gt;(initialCards);\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Shuffle&lt;/span&gt;() \n     }&lt;/span&gt;\n    {\n        List&amp;lt;Card&amp;gt; NewCards = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Card&amp;gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (cards.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) \n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; CardToMove = random.Next(cards.Count);\n            NewCards.Add(cards[CardToMove]);\n            cards.RemoveAt(CardToMove);\n        }\n        cards = NewCards;\n    }\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;GetCardNames&lt;/span&gt;()&lt;/span&gt; \n\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] CardNames = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[cards.Count];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; cards.Count; i++)\n    CardNames[i] = cards[i].Name;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CardNames;\n}\n\nDeck deck1;\nDeck deck2;\nRandom random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Form1&lt;/span&gt;()&lt;/span&gt; \n{\n\nInitializeComponent();\nResetDeck(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\nResetDeck(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\nRedrawDeck(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n RedrawDeck(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\n}\n\n\n\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ResetDeck&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; deckNumber&lt;/span&gt;)&lt;/span&gt; \n    {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (deckNumber == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) \n{\n      &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; numberOfCards = random.Next(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;);\n      deck1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Deck(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Card[] { });\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numberOfCards; i++)\n           deck1.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Card((Suits)random.Next(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(Values)random.Next(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)));\n       deck1.Sort();\n}\n\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    deck2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Deck();\n }\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;reset1_Click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt; {\nResetDeck(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\nRedrawDeck(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shuffle1_Click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt; \n{\n    deck1.Shuffle();\n    RedrawDeck(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveToDeck1_Click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt; \n{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (listBox2.SelectedIndex &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (deck2.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    deck1.Add(deck2.Deal(listBox2.SelectedIndex));\n\n}\n\n    RedrawDeck(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    RedrawDeck(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;GameObject&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;ShuffleList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;GameObject&amp;gt; ActualList&lt;/span&gt;)&lt;/span&gt; {\n\n\n    List&amp;lt;GameObject&amp;gt; newList = ActualList;\n    List&amp;lt;GameObject&amp;gt; outList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;GameObject&amp;gt;();\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; count = newList.Count;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (newList.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; rando = Random.Range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, newList.Count);\n\n        outList.Add(newList[rando]);\n\n        newList.RemoveAt(rando);\n\n     \n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (outList);\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;usage :&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;GameObject&amp;gt; GetShuffle = ShuffleList(ActualList);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Old post for sure, but I just use a GUID.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Items = Items.OrderBy(o =&amp;gt; Guid.NewGuid().ToString()).ToList();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A GUID is always unique, and since it is regenerated every time the result changes each time.  &lt;/p&gt;\n    ","\n&lt;p&gt;A very simple approach to this kind of problem is to use a number of random element swap in the list.&lt;/p&gt;\n\n&lt;p&gt;In pseudo-code this would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; \n    r1 = randomPositionInList()\n    r2 = randomPositionInList()\n    swap elements at index r1 &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; index r2 \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a certain number of times\n&lt;/code&gt;&lt;/pre&gt;\n    "],"493":["\n&lt;p&gt;You don&apos;t have &lt;em&gt;full joins&lt;/em&gt; in MySQL, but you can sure &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/outer-join-simplification.html&quot; rel=&quot;noreferrer&quot;&gt;emulate them&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;For a code &lt;em&gt;sample&lt;/em&gt; transcribed from &lt;a href=&quot;https://stackoverflow.com/questions/2384298/mysql-full-outer-join-syntax-error&quot;&gt;this Stack&amp;nbsp;Overflow question&lt;/a&gt; you have:&lt;/p&gt;\n&lt;p&gt;With two tables t1, t2:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;The query above works for special cases where a &lt;em&gt;full outer join&lt;/em&gt; operation would not produce any duplicate rows. The query above depends on the &lt;code&gt;UNION&lt;/code&gt; set operator to remove duplicate rows introduced by the query pattern.  We can avoid introducing duplicate rows by using an &lt;em&gt;anti-join&lt;/em&gt; pattern for the second query, and then use a UNION ALL set operator to combine the two sets. In the more general case, where a full outer join would return duplicate rows, we can do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answer that &lt;a href=&quot;https://stackoverflow.com/a/4796911/662581&quot;&gt;Pablo Santa Cruz&lt;/a&gt; gave is correct; however, in case anybody stumbled on this page and wants more clarification, here is a detailed breakdown.&lt;/p&gt;\n\n&lt;h2&gt;Example Tables&lt;/h2&gt;\n\n&lt;p&gt;Suppose we have the following tables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- t1&lt;/span&gt;\nid  name\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Tim\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Marta\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- t2&lt;/span&gt;\nid  name\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Tim\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Katarina\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Inner Joins&lt;/h2&gt;\n\n&lt;p&gt;An inner join, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Would get us only records that appear in both tables, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Tim  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Tim\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Inner joins don&apos;t have a direction (like left or right) because they are explicitly bidirectional - we require a match on both sides.&lt;/p&gt;\n\n&lt;h2&gt;Outer Joins&lt;/h2&gt;\n\n&lt;p&gt;Outer joins, on the other hand, are for finding records that may not have a match in the other table. As such, you have to specify &lt;strong&gt;which side&lt;/strong&gt; of the join is allowed to have a missing record.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;LEFT JOIN&lt;/code&gt; and &lt;code&gt;RIGHT JOIN&lt;/code&gt; are shorthand for &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; and &lt;code&gt;RIGHT OUTER JOIN&lt;/code&gt;; I will use their full names below to reinforce the concept of outer joins vs inner joins.&lt;/p&gt;\n\n&lt;h3&gt;Left Outer Join&lt;/h3&gt;\n\n&lt;p&gt;A left outer join, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...would get us all the records from the left table regardless of whether or not they have a match in the right table, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Tim   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    Tim\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Marta &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Right Outer Join&lt;/h3&gt;\n\n&lt;p&gt;A right outer join, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...would get us all the records from the right table regardless of whether or not they have a match in the left table, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    Tim   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Tim\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  Katarina\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Full Outer Join&lt;/h3&gt;\n\n&lt;p&gt;A full outer join would give us all records from both tables, whether or not they have a match in the other table, with NULLs on both sides where there is no match. The result would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    Tim   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    Tim\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    Marta &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    Katarina\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, as Pablo Santa Cruz pointed out, MySQL doesn&apos;t support this. We can emulate it by doing a UNION of a left join and a right join, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can think of a &lt;code&gt;UNION&lt;/code&gt; as meaning &quot;run both of these queries, then stack the results on top of each other&quot;; some of the rows will come from the first query and some from the second.&lt;/p&gt;\n\n&lt;p&gt;It should be noted that a &lt;code&gt;UNION&lt;/code&gt; in MySQL will eliminate exact duplicates: Tim would appear in both of the queries here, but the result of the &lt;code&gt;UNION&lt;/code&gt; only lists him once. My database guru colleague feels that this behavior should not be relied upon. So to be more explicit about it, we could add a &lt;code&gt;WHERE&lt;/code&gt; clause to the second query:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `t1`\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; `t2` &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; `t2`.`id`\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; `t1`.`id` &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand, if you &lt;strong&gt;wanted&lt;/strong&gt; to see duplicates for some reason, you could use &lt;code&gt;UNION ALL&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Using a &lt;em&gt;union&lt;/em&gt; query will remove duplicates, and this is different than the behavior of &lt;em&gt;full outer join&lt;/em&gt; that never removes any duplicates:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;[&lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt;: t1]        [&lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt;: t2]\n&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-----------        -------&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;                  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;                  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;                  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;                  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is the expected result of a &lt;em&gt;full outer join&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;------+-------&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Null&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Null&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Null&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is the result of using &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right join&lt;/em&gt; with &lt;em&gt;union&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;------+-------&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Null&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Null&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.sqlfiddle.com/#!9/13db1/2&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Fiddle&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;My suggested query is:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    t1.value, t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; t2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; t1.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;-- Using `union all` instead of `union`&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    t1.value, t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t2\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; t1.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;\n    t1.value &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result of the above query that is as the same as the expected result:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;------+-------&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.sqlfiddle.com/#!9/13db1/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Fiddle&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/1063716/steve-chambers&quot;&gt;@Steve Chambers&lt;/a&gt;: &lt;sup&gt;[From comments, with many thanks!]&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This may be the best solution, both for efficiency and for generating the same results as a &lt;code&gt;FULL OUTER JOIN&lt;/code&gt;. &lt;a href=&quot;http://www.xaprb.com/blog/2006/05/26/how-to-write-full-outer-join-in-mysql&quot; rel=&quot;nofollow noreferrer&quot;&gt;This blog post&lt;/a&gt; also explains it well - to quote from Method 2: &lt;em&gt;&quot;This handles duplicate rows correctly and doesnt include anything it shouldnt. Its necessary to use &lt;code&gt;UNION ALL&lt;/code&gt; instead of plain &lt;code&gt;UNION&lt;/code&gt;, which would eliminate the duplicates I want to keep. This may be significantly more efficient on large result sets, since theres no need to sort and remove duplicates.&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I decided to add another solution that comes from &lt;em&gt;full outer join&lt;/em&gt; visualization and math. It is not better than the above, but it is more readable:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Full outer join means &lt;code&gt;(t1  t2)&lt;/code&gt;: all in &lt;code&gt;t1&lt;/code&gt; or in &lt;code&gt;t2&lt;/code&gt;\n&lt;code&gt;(t1  t2) = (t1  t2) + t1_only + t2_only&lt;/code&gt;: all in both &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt; plus all in &lt;code&gt;t1&lt;/code&gt; that aren&apos;t in &lt;code&gt;t2&lt;/code&gt; and plus all in &lt;code&gt;t2&lt;/code&gt; that aren&apos;t in &lt;code&gt;t1&lt;/code&gt;:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- (t1  t2): all in both t1 and t2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t1.value, t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; t1.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;-- And plus&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-- all in t1 that not exists in t2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t1.value, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; t2.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.value)\n&lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;-- and plus&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-- all in t2 that not exists in t1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t2\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; t2.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.sqlfiddle.com/#!9/13db1/5&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Fiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;MySQL does not have FULL-OUTER-JOIN syntax. You have to emulate it by doing both LEFT JOIN and RIGHT JOIN as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But MySQL also does not have a RIGHT JOIN syntax. According to MySQL&apos;s &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/outer-join-simplification.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;outer join simplification&lt;/a&gt;, the right join is converted to the equivalent left join by switching the t1 and t2 in the &lt;code&gt;FROM&lt;/code&gt; and &lt;code&gt;ON&lt;/code&gt; clause in the query. Thus, the MySQL query optimizer translates the original query into the following -&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, there is no harm in writing the original query as is, but say if you have predicates like the WHERE clause, which is a &lt;a href=&quot;https://www.ibm.com/developerworks/data/library/techarticle/purcell/0112purcell.html#beforejoinpredicates&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;before-join&lt;/strong&gt;&lt;/a&gt; predicate or an AND predicate on the &lt;code&gt;ON&lt;/code&gt; clause, which is a &lt;a href=&quot;https://www.ibm.com/developerworks/data/library/techarticle/purcell/0112purcell.html#duringjoinpredicates&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;during-join&lt;/strong&gt;&lt;/a&gt; predicate, then you might want to take a look at the devil; which is in details.&lt;/p&gt;\n&lt;p&gt;The MySQL query optimizer routinely checks the predicates if they are &lt;em&gt;null-rejected&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/NioBX.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/NioBX.png&quot; alt=&quot;Null-Rejected Definition and Examples&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Now, if you have done the RIGHT JOIN, but with WHERE predicate on the column from t1, then you might be at a risk of running into a &lt;em&gt;null-rejected&lt;/em&gt; scenario.&lt;/p&gt;\n&lt;p&gt;For example, the query&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.col1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;someValue&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.col1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;someValue&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;gets translated to the following by the query optimizer:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.col1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;someValue&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.col1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;someValue&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So the order of tables has changed, but the predicate is still applied to t1, but t1 is now in the &apos;ON&apos; clause. If t1.col1 is defined as &lt;code&gt;NOT NULL&lt;/code&gt;\ncolumn, then this query will be &lt;em&gt;null-rejected&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Any outer-join (left, right, full) that is &lt;em&gt;null-rejected&lt;/em&gt; is converted to an inner-join by MySQL.&lt;/p&gt;\n&lt;p&gt;Thus the results you might be expecting might be completely different from what the MySQL is returning. You might think its a bug with MySQL&apos;s RIGHT JOIN, but thats not right. Its just how the MySQL query optimizer works. So the developer in charge has to pay attention to these nuances when he/she is constructing the query.&lt;/p&gt;\n    ","\n&lt;p&gt;None of the previous answers are actually correct, because they do not follow the semantics when there are duplicated values.&lt;/p&gt;\n&lt;p&gt;For a query such as (from &lt;a href=&quot;https://stackoverflow.com/questions/41650214/sql-full-join-syntax-error&quot;&gt;this duplicate&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.Name;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The correct equivalent is:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, t2.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;-- This is intentionally UNION to remove duplicates&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2\n     ) n &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n     t1\n     &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; n.name &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n     t2\n     &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; n.name;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need this to work with &lt;code&gt;NULL&lt;/code&gt; values (which may also be necessary), then use the &lt;code&gt;NULL&lt;/code&gt;-safe comparison operator, &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; rather than &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In SQLite you should do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; leftTable lt \n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; rightTable rt &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; lt.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rt.lrid \n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; lt.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, rl.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;-- To match column set&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; rightTable rt \n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;  leftTable lt &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; lt.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rt.lrid\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    table1 t1\n        &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    table2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;\n    t2.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    table1 t1\n        &lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    table2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;\n    t1.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I modified &lt;a href=&quot;https://stackoverflow.com/questions/4796872/how-can-i-do-a-full-outer-join-in-mysql/30497590#30497590&quot;&gt;shA.t&apos;s query&lt;/a&gt; for more clarity:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- t1 left join t2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.value, t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.value   \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- include duplicates&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- t1 right exclude join t2 (records found only in t2)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.value, t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.value &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.value\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.value &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    a.name,\n    b.title\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    author &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    book &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; b\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.author_id\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    a.name,\n    b.title\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    author &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; a\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    book &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; b\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.author_id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can just convert a full outer join, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; fields\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; firsttable\n&lt;span class=&quot;hljs-keyword&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; secondtable &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; joincondition\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;into:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; fields\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; firsttable\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; secondtable &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; joincondition\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; fields (replacing &lt;span class=&quot;hljs-keyword&quot;&gt;any&lt;/span&gt; fields &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; firsttable &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; secondtable\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;EXISTS&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; firsttable &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; joincondition)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or if you have at least one column, say &lt;code&gt;foo&lt;/code&gt;, in &lt;code&gt;firsttable&lt;/code&gt; that is NOT NULL, you can do:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; fields\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; firsttable\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; secondtable &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; joincondition\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; fields\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; firsttable\n&lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; secondtable &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; joincondition\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; firsttable.foo &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I fix the response, and works include all rows (based on the response of Pavle Lekic):&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; tablea a\n    &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; tableb b &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.`key` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.key\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; b.`key` &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;\n    )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; tablea a\n    &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; tableb b &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.`key` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.key\n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;  a.`key` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.`key`\n    )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; b.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; tablea a\n    &lt;span class=&quot;hljs-keyword&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; tableb b &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; b.`key` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a.key\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; a.`key` &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;\n    );\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It can be recreated as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, t2.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2) tmp\n &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tmp.id\n &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tmp.id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using a UNION or UNION ALL answer does not cover the edge case where the base tables have duplicated entries.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There is an edge case that a UNION or UNION ALL cannot cover. We cannot test this on MySQL as it doesn&apos;t support full outer joins, but we can illustrate this on a database that does support it:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; cte_t1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id1\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n ),\ncte_t2 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n(\n &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id2\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;cte_t1 t1 &lt;span class=&quot;hljs-keyword&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; cte_t2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id2;\n\nThis gives us this answer:\n\nid1id2\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The UNION solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;cte_t1 t1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; cte_t2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id2\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; cte_t1 t1 &lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; cte_t2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives an incorrect answer:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; id1id2\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The UNION ALL solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; cte_t1 t1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; cte_t2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id2\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;cte_t1 t1 &lt;span class=&quot;hljs-keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; cte_t2 t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is also incorrect.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id1id2\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Whereas this query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, t2.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2) tmp\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tmp.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tmp.id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id1id2\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The order is different, but otherwise matches the correct answer.&lt;/p&gt;\n    ","\n&lt;p&gt;Use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Join_(SQL)#Cross_join&quot; rel=&quot;nofollow noreferrer&quot;&gt;cross join&lt;/a&gt; solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, t2.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; table1 t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; table2 t2 \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is also possible, but you have to mention the same field names in select. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.name, t2.name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.name, t2.name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The SQL standard says &lt;code&gt;full join on&lt;/code&gt; is &lt;code&gt;inner join on&lt;/code&gt; rows &lt;code&gt;union all&lt;/code&gt; unmatched left table rows extended by nulls &lt;code&gt;union all&lt;/code&gt; right table rows extended by nulls. Ie &lt;code&gt;inner join on&lt;/code&gt; rows &lt;code&gt;union all&lt;/code&gt; rows in &lt;code&gt;left join on&lt;/code&gt; but not &lt;code&gt;inner join on&lt;/code&gt; &lt;code&gt;union all&lt;/code&gt; rows in &lt;code&gt;right join on&lt;/code&gt; but not &lt;code&gt;inner join on&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Ie &lt;code&gt;left join on&lt;/code&gt; rows &lt;code&gt;union all&lt;/code&gt; &lt;code&gt;right join on&lt;/code&gt; rows not in &lt;code&gt;inner join on&lt;/code&gt;. Or if you know your &lt;code&gt;inner join on&lt;/code&gt; result can&apos;t have null in a particular right table column then &quot;&lt;code&gt;right join on&lt;/code&gt; rows not in &lt;code&gt;inner join on&lt;/code&gt;&quot; are rows in &lt;code&gt;right join on&lt;/code&gt; with the &lt;code&gt;on&lt;/code&gt; condition extended by &lt;code&gt;and&lt;/code&gt; that column &lt;code&gt;is null&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Ie similarly &lt;code&gt;right join on&lt;/code&gt; &lt;code&gt;union all&lt;/code&gt; appropriate &lt;code&gt;left join on&lt;/code&gt; rows.&lt;/p&gt;\n&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/a/46091641/3404097&quot;&gt;What is the difference between INNER JOIN and OUTER JOIN?&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(SQL Standard 2006 SQL/Foundation 7.7 Syntax Rules 1, General Rules 1 b, 3 c &amp;amp; d, 5 b.)&lt;/p&gt;\n&lt;/blockquote&gt;\n    "],"494":["\n&lt;p&gt;If you are not into long explanations, see &lt;a href=&quot;https://stackoverflow.com/questions/739654/understanding-python-decorators#answer-739665&quot;&gt;Paolo Bergantinos answer&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;Decorator Basics&lt;/h1&gt;\n&lt;h2&gt;Pythons functions are objects&lt;/h2&gt;\n&lt;p&gt;To understand decorators, you must first understand that functions are objects in Python. This has important consequences. Lets see why with a simple example :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;shout&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;word=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; word.capitalize()+&lt;span class=&quot;hljs-string&quot;&gt;&quot;!&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(shout())\n&lt;span class=&quot;hljs-comment&quot;&gt;# outputs : &apos;Yes!&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# As an object, you can assign the function to a variable like any other object &lt;/span&gt;\nscream = shout\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Notice we don&apos;t use parentheses: we are not calling the function,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# we are putting the function &quot;shout&quot; into the variable &quot;scream&quot;.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# It means you can then call &quot;shout&quot; from &quot;scream&quot;:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(scream())\n&lt;span class=&quot;hljs-comment&quot;&gt;# outputs : &apos;Yes!&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# More than that, it means you can remove the old name &apos;shout&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;nbsp;and the function will still be accessible from &apos;scream&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; shout\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(shout())\n&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; NameError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(e)\n    &lt;span class=&quot;hljs-comment&quot;&gt;#outputs: &quot;name &apos;shout&apos; is not defined&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(scream())\n&lt;span class=&quot;hljs-comment&quot;&gt;# outputs: &apos;Yes!&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keep this in mind. Well circle back to it shortly.&lt;/p&gt;\n&lt;p&gt;Another interesting property of Python functions is they can be defined inside another function!&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;talk&lt;/span&gt;():\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# You can define a function on the fly in &quot;talk&quot; ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;whisper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;word=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; word.lower()+&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ... and use it right away!&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(whisper())\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# You call &quot;talk&quot;, that defines &quot;whisper&quot; EVERY TIME you call it, then&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &quot;whisper&quot; is called in &quot;talk&quot;. &lt;/span&gt;\ntalk()\n&lt;span class=&quot;hljs-comment&quot;&gt;# outputs: &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &quot;yes...&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# But &quot;whisper&quot; DOES NOT EXIST outside &quot;talk&quot;:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(whisper())\n&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; NameError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(e)\n    &lt;span class=&quot;hljs-comment&quot;&gt;#outputs : &quot;name &apos;whisper&apos; is not defined&quot;*&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#Python&apos;s functions are objects&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Functions references&lt;/h2&gt;\n&lt;p&gt;Okay, still here? Now the fun part...&lt;/p&gt;\n&lt;p&gt;Youve seen that functions are objects. Therefore, functions:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;can be assigned to a variable&lt;/li&gt;\n&lt;li&gt;can be defined in another function&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;That means that &lt;strong&gt;a function can &lt;code&gt;return&lt;/code&gt; another function&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getTalk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;kind=&lt;span class=&quot;hljs-string&quot;&gt;&quot;shout&quot;&lt;/span&gt;&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# We define functions on the fly&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;shout&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;word=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; word.capitalize()+&lt;span class=&quot;hljs-string&quot;&gt;&quot;!&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;whisper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;word=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;/span&gt;) :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; word.lower()+&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Then we return one of them&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; kind == &lt;span class=&quot;hljs-string&quot;&gt;&quot;shout&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# We don&apos;t use &quot;()&quot;, we are not calling the function,&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# we are returning the function object&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; shout  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; whisper\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# How do you use this strange beast?&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Get the function and assign it to a variable&lt;/span&gt;\ntalk = getTalk()      \n\n&lt;span class=&quot;hljs-comment&quot;&gt;# You can see that &quot;talk&quot; is here a function object:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(talk)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs : &amp;lt;function shout at 0xb7ea817c&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# The object is the one returned by the function:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(talk())\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs : Yes!&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# And you can even use it directly if you feel wild:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(getTalk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;whisper&quot;&lt;/span&gt;)())\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs : yes...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Theres more!&lt;/p&gt;\n&lt;p&gt;If you can &lt;code&gt;return&lt;/code&gt; a function, you can pass one as a parameter:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingBefore&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;): \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I do something before then I call the function you gave me&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(func())\n\ndoSomethingBefore(scream)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I do something before then I call the function you gave me&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Yes!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Well, you just have everything needed to understand decorators. You see, decorators are wrappers, which means that &lt;strong&gt;they let you execute code before and after the function they decorate&lt;/strong&gt; without modifying the function itself.&lt;/p&gt;\n&lt;h2&gt;Handcrafted decorators&lt;/h2&gt;\n&lt;p&gt;How youd do it manually:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# A decorator is a function that expects ANOTHER function as parameter&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;my_shiny_new_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a_function_to_decorate&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Inside, the decorator defines a function on the fly: the wrapper.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# This function is going to be wrapped around the original function&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# so it can execute code before and after it.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;the_wrapper_around_the_original_function&lt;/span&gt;():\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Put here the code you want to be executed BEFORE the original function is called&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Before the function runs&quot;&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Call the function here (using parentheses)&lt;/span&gt;\n        a_function_to_decorate()\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Put here the code you want to be executed AFTER the original function is called&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After the function runs&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# At this point, &quot;a_function_to_decorate&quot; HAS NEVER BEEN EXECUTED.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# We return the wrapper function we have just created.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# The wrapper contains the function and the code to execute before and after. Its ready to use!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; the_wrapper_around_the_original_function\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Now imagine you create a function you don&apos;t want to ever touch again.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a_stand_alone_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a stand alone function, don&apos;t you dare modify me&quot;&lt;/span&gt;)\n\na_stand_alone_function() \n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: I am a stand alone function, don&apos;t you dare modify me&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Well, you can decorate it to extend its behavior.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Just pass it to the decorator, it will wrap it dynamically in &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# any code you want and return you a new function ready to be used:&lt;/span&gt;\n\na_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)\na_stand_alone_function_decorated()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Before the function runs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am a stand alone function, don&apos;t you dare modify me&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#After the function runs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, you probably want that every time you call &lt;code&gt;a_stand_alone_function&lt;/code&gt;, &lt;code&gt;a_stand_alone_function_decorated&lt;/code&gt; is called instead. Thats easy, just overwrite &lt;code&gt;a_stand_alone_function&lt;/code&gt; with the function returned by &lt;code&gt;my_shiny_new_decorator&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)\na_stand_alone_function()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Before the function runs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am a stand alone function, don&apos;t you dare modify me&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#After the function runs&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thats EXACTLY what decorators do!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Decorators demystified&lt;/h2&gt;\n&lt;p&gt;The previous example, using the decorator syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@my_shiny_new_decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;another_stand_alone_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Leave me alone&quot;&lt;/span&gt;)\n\nanother_stand_alone_function()  \n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:  &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Before the function runs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Leave me alone&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#After the function runs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Yes, thats all, its that simple. &lt;code&gt;@decorator&lt;/code&gt; is just a shortcut to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Decorators are just a pythonic variant of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot; rel=&quot;noreferrer&quot;&gt;decorator design pattern&lt;/a&gt;. There are several classic design patterns embedded in Python to ease development (like iterators).&lt;/p&gt;\n&lt;p&gt;Of course, you can accumulate decorators:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bread&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/&apos;&apos;&apos;&apos;&apos;&apos;\\&amp;gt;&quot;&lt;/span&gt;)\n        func()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;\\______/&amp;gt;&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ingredients&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#tomatoes#&quot;&lt;/span&gt;)\n        func()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;~salad~&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sandwich&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;food=&lt;span class=&quot;hljs-string&quot;&gt;&quot;--ham--&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(food)\n\nsandwich()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: --ham--&lt;/span&gt;\nsandwich = bread(ingredients(sandwich))\nsandwich()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;/&apos;&apos;&apos;&apos;&apos;&apos;\\&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# #tomatoes#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# --ham--&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ~salad~&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;\\______/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using the Python decorator syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@bread&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@ingredients&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sandwich&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;food=&lt;span class=&quot;hljs-string&quot;&gt;&quot;--ham--&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(food)\n\nsandwich()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;/&apos;&apos;&apos;&apos;&apos;&apos;\\&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# #tomatoes#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# --ham--&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ~salad~&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;\\______/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The order you set the decorators MATTERS:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@ingredients&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@bread&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strange_sandwich&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;food=&lt;span class=&quot;hljs-string&quot;&gt;&quot;--ham--&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(food)\n\nstrange_sandwich()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##tomatoes#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;/&apos;&apos;&apos;&apos;&apos;&apos;\\&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# --ham--&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;\\______/&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ~salad~&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;Now: to answer the question...&lt;/h1&gt;\n&lt;p&gt;As a conclusion, you can easily see how to answer the question:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# The decorator to make it bold&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makebold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# The new function the decorator returns&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Insertion of some code before and after&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + fn() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# The decorator to make it italic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# The new function the decorator returns&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Insertion of some code before and after&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; + fn() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(say())\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# This is the exact equivalent to &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;\nsay = makebold(makeitalic(say))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(say())\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can now just leave happy, or burn your brain a little bit more and see advanced uses of decorators.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Taking decorators to the next level&lt;/h1&gt;\n&lt;h2&gt;Passing arguments to the decorated function&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Its not black magic, you just have to let the wrapper &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# pass the argument:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a_decorator_passing_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_to_decorate&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a_wrapper_accepting_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1, arg2&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I got args! Look: {0}, {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(arg1, arg2))\n        function_to_decorate(arg1, arg2)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a_wrapper_accepting_arguments\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Since when you are calling the function returned by the decorator, you are&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# calling the wrapper, passing arguments to the wrapper will let it pass them to &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# the decorated function&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@a_decorator_passing_arguments&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_full_name&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;first_name, last_name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is {0} {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(first_name, last_name))\n    \nprint_full_name(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Venkman&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I got args! Look: Peter Venkman&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#My name is Peter Venkman&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Decorating methods&lt;/h2&gt;\n&lt;p&gt;One nifty thing about Python is that methods and functions are really the same.  The only difference is that methods expect that their first argument is a reference to the current object (&lt;code&gt;self&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;That means you can build a decorator for methods the same way! Just remember to take &lt;code&gt;self&lt;/code&gt; into consideration:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method_friendly_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;method_to_decorate&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, lie&lt;/span&gt;):\n        lie = lie - &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# very friendly, decrease age even more :-)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; method_to_decorate(self, lie)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n    \n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Lucy&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.age = &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;\n    \n&lt;span class=&quot;hljs-meta&quot;&gt;    @method_friendly_decorator&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayYourAge&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, lie&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am {0}, what did you think?&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(self.age + lie))\n        \nl = Lucy()\nl.sayYourAge(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: I am 26, what did you think?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If youre making general-purpose decorator--one youll apply to any function or method, no matter its arguments--then just use &lt;code&gt;*args, **kwargs&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a_decorator_passing_arbitrary_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_to_decorate&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# The wrapper accepts any arguments&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a_wrapper_accepting_arbitrary_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Do I have args?:&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(args)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(kwargs)\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Then you unpack the arguments, here *args, **kwargs&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# If you are not familiar with unpacking, check:&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/&lt;/span&gt;\n        function_to_decorate(*args, **kwargs)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a_wrapper_accepting_arbitrary_arguments\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_with_no_argument&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Python is cool, no argument here.&quot;&lt;/span&gt;)\n\nfunction_with_no_argument()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Do I have args?:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#()&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#{}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Python is cool, no argument here.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_with_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, c&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, b, c)\n    \nfunction_with_arguments(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Do I have args?:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#(1, 2, 3)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#{}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#1 2 3 &lt;/span&gt;\n \n&lt;span class=&quot;hljs-meta&quot;&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;function_with_named_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, c, platypus=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Why not ?&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Do {0}, {1} and {2} like platypus? {3}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(a, b, c, platypus))\n\nfunction_with_named_arguments(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Linus&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Steve&quot;&lt;/span&gt;, platypus=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Indeed!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Do I have args ? :&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#(&apos;Bill&apos;, &apos;Linus&apos;, &apos;Steve&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#{&apos;platypus&apos;: &apos;Indeed!&apos;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Do Bill, Linus and Steve like platypus? Indeed!&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Mary&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.age = &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;\n    \n&lt;span class=&quot;hljs-meta&quot;&gt;    @a_decorator_passing_arbitrary_arguments&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayYourAge&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, lie=-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# You can now add a default value&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am {0}, what did you think?&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(self.age + lie))\n\nm = Mary()\nm.sayYourAge()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Do I have args?:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#(&amp;lt;__main__.Mary object at 0xb7d303ac&amp;gt;,)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#{}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am 28, what did you think?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Passing arguments to the decorator&lt;/h2&gt;\n&lt;p&gt;Great, now what would you say about passing arguments to the decorator itself?&lt;/p&gt;\n&lt;p&gt;This can get somewhat twisted, since a decorator must accept a function as an argument. Therefore, you cannot pass the decorated functions arguments directly to the decorator.&lt;/p&gt;\n&lt;p&gt;Before rushing to the solution, lets write a little reminder:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Decorators are ORDINARY functions&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;my_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am an ordinary function&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am function returned by the decorator&quot;&lt;/span&gt;)\n        func()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Therefore, you can call it without any &quot;@&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lazy_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;zzzzzzzz&quot;&lt;/span&gt;)\n\ndecorated_function = my_decorator(lazy_function)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: I am an ordinary function&lt;/span&gt;\n            \n&lt;span class=&quot;hljs-comment&quot;&gt;# It outputs &quot;I am an ordinary function&quot;, because thats just what you do:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# calling a function. Nothing magic.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@my_decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lazy_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;zzzzzzzz&quot;&lt;/span&gt;)\n    \n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: I am an ordinary function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Its exactly the same. &quot;&lt;code&gt;my_decorator&lt;/code&gt;&quot; is called. So when you &lt;code&gt;@my_decorator&lt;/code&gt;, you are telling Python to call the function &apos;labelled by the variable &quot;&lt;code&gt;my_decorator&lt;/code&gt;&quot;&apos;.&lt;/p&gt;\n&lt;p&gt;This is important! The label you give can point directly to the decorator&lt;strong&gt;or not&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Lets get evil. &lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator_maker&lt;/span&gt;():\n    \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I make decorators! I am executed only once: &quot;&lt;/span&gt;\n          &lt;span class=&quot;hljs-string&quot;&gt;&quot;when you make me create a decorator.&quot;&lt;/span&gt;)\n            \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;my_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n        \n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a decorator! I am executed only when you decorate a function.&quot;&lt;/span&gt;)\n               \n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;():\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the wrapper around the decorated function. &quot;&lt;/span&gt;\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am called when you call the decorated function. &quot;&lt;/span&gt;\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;As the wrapper, I return the RESULT of the decorated function.&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func()\n        \n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;As the decorator, I return the wrapped function.&quot;&lt;/span&gt;)\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n    \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;As a decorator maker, I return a decorator&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_decorator\n            \n&lt;span class=&quot;hljs-comment&quot;&gt;# Lets create a decorator. Its just a new function after all.&lt;/span&gt;\nnew_decorator = decorator_maker()       \n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I make decorators! I am executed only once: when you make me create a decorator.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As a decorator maker, I return a decorator&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Then we decorate the function&lt;/span&gt;\n            \n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the decorated function.&quot;&lt;/span&gt;)\n   \ndecorated_function = new_decorator(decorated_function)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As the decorator, I return the wrapped function&lt;/span&gt;\n     \n&lt;span class=&quot;hljs-comment&quot;&gt;# Lets call the function:&lt;/span&gt;\ndecorated_function()\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the wrapper around the decorated function. I am called when you call the decorated function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorated function.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;No surprise here.&lt;/p&gt;\n&lt;p&gt;Lets do EXACTLY the same thing, but skip all the pesky intermediate variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the decorated function.&quot;&lt;/span&gt;)\ndecorated_function = decorator_maker()(decorated_function)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I make decorators! I am executed only once: when you make me create a decorator.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As a decorator maker, I return a decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As the decorator, I return the wrapped function.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finally:&lt;/span&gt;\ndecorated_function()    \n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the wrapper around the decorated function. I am called when you call the decorated function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorated function.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Lets make it &lt;em&gt;even shorter&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@decorator_maker()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the decorated function.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I make decorators! I am executed only once: when you make me create a decorator.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As a decorator maker, I return a decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As the decorator, I return the wrapped function.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Eventually: &lt;/span&gt;\ndecorated_function()    \n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the wrapper around the decorated function. I am called when you call the decorated function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorated function.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hey, did you see that? We used a function call with the &quot;&lt;code&gt;@&lt;/code&gt;&quot; syntax! :-)&lt;/p&gt;\n&lt;p&gt;So, back to decorators with arguments. If we can use functions to generate the decorator on the fly, we can pass arguments to that function, right?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator_maker_with_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;decorator_arg1, decorator_arg2&lt;/span&gt;):\n    \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I make decorators! And I accept arguments: {0}, {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(decorator_arg1, decorator_arg2))\n            \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;my_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n        &lt;span class=&quot;hljs-comment&quot;&gt;# The ability to pass arguments here is a gift from closures.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# If you are not comfortable with closures, you can assume its ok,&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# or read: https://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the decorator. Somehow you passed me arguments: {0}, {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(decorator_arg1, decorator_arg2))\n               \n        &lt;span class=&quot;hljs-comment&quot;&gt;# Don&apos;t confuse decorator arguments and function arguments!&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_arg1, function_arg2&lt;/span&gt;) :\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the wrapper around the decorated function.\\n&quot;&lt;/span&gt;\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;I can access all the variables\\n&quot;&lt;/span&gt;\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t- from the decorator: {0} {1}\\n&quot;&lt;/span&gt;\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t- from the function call: {2} {3}\\n&quot;&lt;/span&gt;\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Then I can pass them to the decorated function&quot;&lt;/span&gt;\n                  .&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(decorator_arg1, decorator_arg2,\n                          function_arg1, function_arg2))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func(function_arg1, function_arg2)\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_decorator\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@decorator_maker_with_arguments(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Leonard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheldon&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_function_with_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_arg1, function_arg2&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the decorated function and only knows about my arguments: {0}&quot;&lt;/span&gt;\n           &lt;span class=&quot;hljs-string&quot;&gt;&quot; {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(function_arg1, function_arg2))\n          \ndecorated_function_with_arguments(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rajesh&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Howard&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I make decorators! And I accept arguments: Leonard Sheldon&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorator. Somehow you passed me arguments: Leonard Sheldon&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the wrapper around the decorated function. &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I can access all the variables &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   - from the decorator: Leonard Sheldon &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   - from the function call: Rajesh Howard &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Then I can pass them to the decorated function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorated function and only knows about my arguments: Rajesh Howard&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here it is: a decorator with arguments. Arguments can be set as variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;c1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Penny&quot;&lt;/span&gt;\nc2 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Leslie&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@decorator_maker_with_arguments(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Leonard&quot;&lt;/span&gt;, c1&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_function_with_arguments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_arg1, function_arg2&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am the decorated function and only knows about my arguments:&quot;&lt;/span&gt;\n           &lt;span class=&quot;hljs-string&quot;&gt;&quot; {0} {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(function_arg1, function_arg2))\n\ndecorated_function_with_arguments(c2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Howard&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I make decorators! And I accept arguments: Leonard Penny&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorator. Somehow you passed me arguments: Leonard Penny&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the wrapper around the decorated function. &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I can access all the variables &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   - from the decorator: Leonard Penny &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   - from the function call: Leslie Howard &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Then I can pass them to the decorated function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#I am the decorated function and only know about my arguments: Leslie Howard&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, you can pass arguments to the decorator like any function using this trick. You can even use &lt;code&gt;*args, **kwargs&lt;/code&gt; if you wish. But remember decorators are called &lt;strong&gt;only once&lt;/strong&gt;. Just when Python imports the script. You can&apos;t dynamically set the arguments afterwards. When you do &quot;import x&quot;, &lt;strong&gt;the function is already decorated&lt;/strong&gt;, so you can&apos;t\nchange anything.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Lets practice: decorating a decorator&lt;/h1&gt;\n&lt;p&gt;Okay, as a bonus, I&apos;ll give you a snippet to make any decorator accept generically any argument. After all, in order to accept arguments, we created our decorator using another function.&lt;/p&gt;\n&lt;p&gt;We wrapped the decorator.&lt;/p&gt;\n&lt;p&gt;Anything else we saw recently that wrapped function?&lt;/p&gt;\n&lt;p&gt;Oh yes, decorators!&lt;/p&gt;\n&lt;p&gt;Lets have some fun and write a decorator for the decorators:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator_with_args&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;decorator_to_enhance&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; \n    This function is supposed to be used as a decorator.\n    It must decorate an other function, that is intended to be used as a decorator.\n    Take a cup of coffee.\n    It will allow any decorator to accept an arbitrary number of arguments,\n    saving you the headache to remember how to do that every time.\n    &quot;&quot;&quot;&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;# We use the same trick we did to pass arguments&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator_maker&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n       \n        &lt;span class=&quot;hljs-comment&quot;&gt;# We create on the fly a decorator that accepts only a function&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# but keeps the passed arguments from the maker.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator_wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n       \n            &lt;span class=&quot;hljs-comment&quot;&gt;# We return the result of the original decorator, which, after all, &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# IS JUST AN ORDINARY FUNCTION (which returns a function).&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Only pitfall: the decorator must have this specific signature or it won&apos;t work:&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator_to_enhance(func, *args, **kwargs)\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator_wrapper\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator_maker\n       \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It can be used as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# You create the function you will use as a decorator. And stick a decorator on it :-)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Don&apos;t forget, the signature is &quot;decorator(func, *args, **kwargs)&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@decorator_with_args &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func, *args, **kwargs&lt;/span&gt;): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_arg1, function_arg2&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Decorated with {0} {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(args, kwargs))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func(function_arg1, function_arg2)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n    \n&lt;span class=&quot;hljs-comment&quot;&gt;# Then you decorate the functions you wish with your brand new decorated decorator.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@decorated_decorator(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorated_function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function_arg1, function_arg2&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello {0} {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(function_arg1, function_arg2))\n\ndecorated_function(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Universe and&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;everything&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Decorated with (42, 404, 1024) {}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Hello Universe and everything&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Whoooot!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I know, the last time you had this feeling, it was after listening a guy saying: &quot;before understanding recursion, you must first understand recursion&quot;. But now, don&apos;t you feel good about mastering this?&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Best practices: decorators&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;Decorators were introduced in Python 2.4, so be sure your code will be run on &amp;gt;= 2.4.&lt;/li&gt;\n&lt;li&gt;Decorators slow down the function call. Keep that in mind.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;You cannot un-decorate a function.&lt;/strong&gt; (There &lt;em&gt;are&lt;/em&gt; hacks to create decorators that can be removed, but nobody uses them.) So once a function is decorated, its decorated &lt;em&gt;for all the code&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Decorators wrap functions, which can make them hard to debug.  (This gets better from Python &amp;gt;= 2.5; see below.)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The &lt;code&gt;functools&lt;/code&gt; module was introduced in Python 2.5. It includes the function &lt;code&gt;functools.wraps()&lt;/code&gt;, which copies the name, module, and docstring of the decorated function to its wrapper.&lt;/p&gt;\n&lt;p&gt;(Fun fact: &lt;code&gt;functools.wraps()&lt;/code&gt; is a decorator! )&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# For debugging, the stacktrace prints you the function __name__&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)\n    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo.__name__)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: foo&lt;/span&gt;\n    \n&lt;span class=&quot;hljs-comment&quot;&gt;# With a decorator, it gets messy    &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@bar&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo.__name__)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: wrapper&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# &quot;functools&quot; can help for that&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; functools\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# We say that &quot;wrapper&quot;, is wrapping &quot;func&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# and the magic begins&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;    @functools.wraps(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@bar&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo.__name__)\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs: foo&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;How can the decorators be useful?&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;Now the big question:&lt;/strong&gt; What can I use decorators for?&lt;/p&gt;\n&lt;p&gt;Seem cool and powerful, but a practical example would be great. Well, there are 1000 possibilities. Classic uses are extending a function behavior from an external lib (you can&apos;t modify it), or for debugging (you don&apos;t want to modify it because its temporary).&lt;/p&gt;\n&lt;p&gt;You can use them to extend several functions in a DRYs way, like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;benchmark&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    A decorator that prints the time a function takes\n    to execute.\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        t = time.clock()\n        res = func(*args, **kwargs)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0} {1}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(func.__name__, time.clock()-t))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;logging&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    A decorator that logs the activity of the script.\n    (it actually just prints it, but it could be logging!)\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        res = func(*args, **kwargs)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0} {1} {2}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(func.__name__, args, kwargs))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    A decorator that counts and prints the number of times a function has been executed\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        wrapper.count = wrapper.count + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        res = func(*args, **kwargs)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0} has been used: {1}x&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(func.__name__, wrapper.count))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n    wrapper.count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@counter&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@benchmark&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@logging&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reverse_string&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(string))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(reverse_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Able was I ere I saw Elba&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(reverse_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!&quot;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#reverse_string (&apos;Able was I ere I saw Elba&apos;,) {}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper 0.0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper has been used: 1x &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#ablE was I ere I saw elbA&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#reverse_string (&apos;A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!&apos;,) {}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper 0.0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper has been used: 2x&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course the good thing with decorators is that you can use them right away on almost anything without rewriting. DRY, I said:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@counter&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@benchmark&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@logging&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_random_futurama_quote&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; urllib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; urlopen\n    result = urlopen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://subfusion.net/cgi-bin/quote.pl?quote=futurama&quot;&lt;/span&gt;).read()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        value = result.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;hr&amp;gt;&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value.strip()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;No, I&apos;m ... doesn&apos;t!&quot;&lt;/span&gt;\n\n    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(get_random_futurama_quote())\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(get_random_futurama_quote())\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#outputs:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#get_random_futurama_quote () {}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper 0.02&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper has been used: 1x&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#The laws of science be a harsh mistress.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#get_random_futurama_quote () {}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#wrapper has been used: 2x&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#Curse you, merciful Poseidon!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python itself provides several decorators: &lt;code&gt;property&lt;/code&gt;, &lt;code&gt;staticmethod&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Django uses decorators to manage caching and view permissions.&lt;/li&gt;\n&lt;li&gt;Twisted to fake inlining asynchronous functions calls.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This really is a large playground.&lt;/p&gt;\n    ","\n&lt;p&gt;Check out &lt;a href=&quot;http://docs.python.org/reference/compound_stmts.html#function&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt; to see how decorators work. Here is what you asked for:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; wraps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makebold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; hello()        &lt;span class=&quot;hljs-comment&quot;&gt;# returns &quot;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; hello.__name__ &lt;span class=&quot;hljs-comment&quot;&gt;# with functools.wraps() this returns &quot;hello&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; log(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;# returns &quot;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; wraps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrap_in_tag&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;factory&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;        @wraps(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator&lt;/span&gt;():\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;%(tag)s&amp;gt;%(rv)s&amp;lt;/%(tag)s&amp;gt;&apos;&lt;/span&gt; % (\n                {&lt;span class=&quot;hljs-string&quot;&gt;&apos;tag&apos;&lt;/span&gt;: tag, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rv&apos;&lt;/span&gt;: func()})\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; factory\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This enables you to write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@wrap_in_tag(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@wrap_in_tag(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;makebold = wrap_in_tag(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)\nmakeitalic = wrap_in_tag(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Personally I would have written the decorator somewhat differently:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; wraps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrap_in_tag&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;factory&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;        @wraps(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;%(tag)s&amp;gt;%(val)s&amp;lt;/%(tag)s&amp;gt;&apos;&lt;/span&gt; %\n                        {&lt;span class=&quot;hljs-string&quot;&gt;&apos;tag&apos;&lt;/span&gt;: tag, &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;: val})\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; factory\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which would yield:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@wrap_in_tag(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@wrap_in_tag(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val\nsay(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t forget the construction for which decorator syntax is a shorthand:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;say = wrap_in_tag(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)(wrap_in_tag(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;)(say)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It looks like the other people have already told you how to solve the problem. I hope this will help you understand what decorators are.&lt;/p&gt;\n\n&lt;p&gt;Decorators are just syntactical sugar.&lt;/p&gt;\n\n&lt;p&gt;This&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;():\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;expands to    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;():\n    ...\nfunc = decorator(func)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;And of course you can return lambdas as well from a decorator function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makebold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + f() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; + f() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; say()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python decorators add extra functionality to another function&lt;/p&gt;\n\n&lt;p&gt;An italics decorator could be like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;newFunc&lt;/span&gt;():\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; + fn() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newFunc\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that a function is defined inside a function.\nWhat it basically does is replace a function with the newly defined one. For example, I have this class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;foo&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi again&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now say, I want both functions to print &quot;---&quot; after and before they are done.\nI could add a print &quot;---&quot; before and after each print statement.\nBut because I don&apos;t like repeating myself, I will make a decorator&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addDashes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# notice it takes a function as an argument&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;newFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# define a new function&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;---&quot;&lt;/span&gt;\n        fn(self) &lt;span class=&quot;hljs-comment&quot;&gt;# call the original function&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;---&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newFunction\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Return the newly defined function - it will &quot;replace&quot; the original&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So now I can change my class to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;foo&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;    @addDashes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @addDashes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi again&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more on decorators, check\n&lt;a href=&quot;http://www.ibm.com/developerworks/linux/library/l-cpdecor.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.ibm.com/developerworks/linux/library/l-cpdecor.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; make two separate decorators that do what you want as illustrated directly below. Note the use of &lt;code&gt;*args, **kwargs&lt;/code&gt; in the declaration of the &lt;code&gt;wrapped()&lt;/code&gt; function which supports the decorated function having multiple arguments (which isn&apos;t really necessary for the example &lt;code&gt;say()&lt;/code&gt; function, but is included for generality).&lt;/p&gt;\n\n&lt;p&gt;For similar reasons, the &lt;code&gt;functools.wraps&lt;/code&gt; decorator is used to change the meta attributes of the wrapped function to be those of the one being decorated. This makes error messages and embedded function documentation (&lt;code&gt;func.__doc__&lt;/code&gt;) be those of the decorated function instead of &lt;code&gt;wrapped()&lt;/code&gt;&apos;s.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; wraps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makebold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(say())  &lt;span class=&quot;hljs-comment&quot;&gt;# -&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Refinements&lt;/h2&gt;\n\n&lt;p&gt;As you can see there&apos;s a lot of duplicate code in these two decorators. Given this similarity it would be better for you to instead make a generic one that was actually a &lt;em&gt;decorator factory&lt;/em&gt;in other words, a decorator function that makes other decorators. That way there would be less code repetitionand allow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Don&apos;t_repeat_yourself&quot; rel=&quot;noreferrer&quot;&gt;DRY&lt;/a&gt; principle to be followed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;html_deco&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;        @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;%s&amp;gt;&apos;&lt;/span&gt; % tag + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/%s&amp;gt;&apos;&lt;/span&gt; % tag\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@html_deco(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@html_deco(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;whom=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt; + (&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + whom) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; whom &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(greet(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# -&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To make the code more readable, you can assign a more descriptive name to the factory-generated decorators:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;makebold = html_deco(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)\nmakeitalic = html_deco(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;whom=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt; + (&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + whom) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; whom &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(greet(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# -&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or even combine them like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;makebolditalic = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; fn: makebold(makeitalic(fn))\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebolditalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;whom=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt; + (&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + whom) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; whom &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(greet(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# -&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Efficiency&lt;/h3&gt;\n\n&lt;p&gt;While the above examples do all work, the code generated involves a fair amount of overhead in the form of extraneous function calls when multiple decorators are applied at once. This may not matter, depending the exact usage (which might be I/O-bound, for instance).&lt;/p&gt;\n\n&lt;p&gt;If speed of the decorated function is important, the overhead can be kept to a single extra function call by writing a slightly different decorator factory-function which implements adding all the tags at once, so it can generate code that avoids the addtional function calls incurred by using separate decorators for each tag.&lt;/p&gt;\n\n&lt;p&gt;This requires more code in the decorator itself, but this only runs when it&apos;s being applied to function definitions, not later when they themselves are called. This also applies when creating more readable names by using &lt;code&gt;lambda&lt;/code&gt; functions as previously illustrated. Sample:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multi_html_deco&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*tags&lt;/span&gt;):\n    start_tags, end_tags = [], []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tag &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; tags:\n        start_tags.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;%s&amp;gt;&apos;&lt;/span&gt; % tag)\n        end_tags.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/%s&amp;gt;&apos;&lt;/span&gt; % tag)\n    start_tags = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;.join(start_tags)\n    end_tags = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;.join(&lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(end_tags))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;        @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; start_tags + fn(*args, **kwargs) + end_tags\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator\n\nmakebolditalic = multi_html_deco(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makebolditalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;whom=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt; + (&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + whom) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; whom &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(greet(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# -&amp;gt; &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way of doing the same thing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;bol&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, f&lt;/span&gt;):\n    self.f = f\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;{}&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(self.f())\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ita&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, f&lt;/span&gt;):\n    self.f = f\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;{}&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(self.f())\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@bol&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@ita&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayhi&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, more flexibly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;sty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, tag&lt;/span&gt;):\n    self.tag = tag\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, f&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;newf&lt;/span&gt;():\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;{tag}&amp;gt;{res}&amp;lt;/{tag}&amp;gt;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(res=f(), tag=self.tag)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newf\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@sty(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@sty(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayhi&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h1&gt;How can I make two decorators in Python that would do the following?&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You want the following function, when called:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;To return:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Simple solution&lt;/h2&gt;\n\n&lt;p&gt;To most simply do this, make decorators that return lambdas (anonymous functions) that close over the function (closures) and call it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;i&amp;gt;&apos;&lt;/span&gt; + fn() + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/i&amp;gt;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makebold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;b&amp;gt;&apos;&lt;/span&gt; + fn() + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/b&amp;gt;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now use them as desired:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;say()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Problems with the simple solution&lt;/h2&gt;\n\n&lt;p&gt;But we seem to have nearly lost the original function. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;say\n&amp;lt;function &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;&amp;gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x4ACFA070&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To find it, we&apos;d need to dig into the closure of each lambda, one of which is buried in the other:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;say.__closure__[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].cell_contents\n&amp;lt;function &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;&amp;gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x4ACFA030&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;say.__closure__[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].cell_contents.__closure__[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].cell_contents\n&amp;lt;function say at &lt;span class=&quot;hljs-number&quot;&gt;0x4ACFA730&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So if we put documentation on this function, or wanted to be able to decorate functions that take more than one argument, or we just wanted to know what function we were looking at in a debugging session, we need to do a bit more with our wrapper.&lt;/p&gt;\n\n&lt;h2&gt;Full featured solution - overcoming most of these problems&lt;/h2&gt;\n\n&lt;p&gt;We have the decorator &lt;code&gt;wraps&lt;/code&gt; from the &lt;code&gt;functools&lt;/code&gt; module in the standard library! &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; wraps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeitalic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# must assign/update attributes from wrapped function to wrapper&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# __module__, __name__, __doc__, and __dict__ by default&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# explicitly give function whose attributes it is applying&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;i&amp;gt;&apos;&lt;/span&gt; + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/i&amp;gt;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makebold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;b&amp;gt;&apos;&lt;/span&gt; + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/b&amp;gt;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is unfortunate that there&apos;s still some boilerplate, but this is about as simple as we can make it. &lt;/p&gt;\n\n&lt;p&gt;In Python 3, you also get &lt;code&gt;__qualname__&lt;/code&gt; and &lt;code&gt;__annotations__&lt;/code&gt; assigned by default.&lt;/p&gt;\n\n&lt;p&gt;So now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@makebold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeitalic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;This function returns a bolded, italicized &apos;hello&apos;&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;say\n&amp;lt;function say at &lt;span class=&quot;hljs-number&quot;&gt;0x14BB8F70&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt;(say)\nHelp on function say &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; module __main__:\n\nsay(*args, **kwargs)\n    This function returns a bolded, italicized &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Conclusion&lt;/h2&gt;\n\n&lt;p&gt;So we see that &lt;code&gt;wraps&lt;/code&gt; makes the wrapping function do almost everything except tell us exactly what the function takes as arguments. &lt;/p&gt;\n\n&lt;p&gt;There are other modules that may attempt to tackle the problem, but the solution is not yet in the standard library.&lt;/p&gt;\n    ","\n&lt;p&gt;A decorator takes the function definition and creates a new function that executes this function and transforms the result.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@deco&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do&lt;/span&gt;():\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is equivalent to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;do = deco(do)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deco&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;letter&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func(letter).upper()  &lt;span class=&quot;hljs-comment&quot;&gt;#upper&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@deco&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(number)  &lt;span class=&quot;hljs-comment&quot;&gt;# number to letter&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is equivalent to this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(number)\n\ndo2 = deco(do2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;65 &amp;lt;=&amp;gt; &apos;a&apos;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(do(&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(do2(&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;B\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;B\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To understand the decorator, it is important to notice, that decorator created a new function do which is inner that executes function and transforms the result.&lt;/p&gt;\n    ","\n&lt;p&gt;This answer has long been answered, but I thought I would share my Decorator class which makes writing new decorators easy and compact.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; abc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ABCMeta, abstractclassmethod\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Decorator&lt;/span&gt;(metaclass=ABCMeta):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; Acts as a base class for all decorators &quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.method = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, method&lt;/span&gt;):\n        self.method = method\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.call\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @abstractclassmethod&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.method(*args, **kwargs)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For one I think this makes the behavior of decorators very clear, but it also makes it easy to define new decorators very concisely. For the example listed above, you could then solve it as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MakeBold&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Decorator&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;():\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + self.method() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MakeItalic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Decorator&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;():\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; + self.method() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@MakeBold()&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@MakeItalic()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say&lt;/span&gt;():\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could also use it to do more complex tasks, like for instance a decorator which automatically makes the function get applied recursively to all arguments in an iterator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ApplyRecursive&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Decorator&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *types&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__init__()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(types):\n            types = (&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;)\n        self._types = types\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, arg&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self._types &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(arg, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {key: self.call(value) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arg.items()}\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self._types &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(arg, &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(self.call(value) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arg)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self._types &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(arg, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(self.call(value) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arg)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self._types &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(arg, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(self.call(value) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arg)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.method(arg)\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@ApplyRecursive(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;double&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*arg\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(double(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(double({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(double({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(double((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(double([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which prints:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that this example didn&apos;t include the &lt;code&gt;list&lt;/code&gt; type in the instantiation of the decorator, so in the final print statement the method gets applied to the list itself, not the elements of the list.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#decorator.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeHtmlTag&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, *args, **kwds&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;real_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n        css_class = &lt;span class=&quot;hljs-string&quot;&gt;&quot; class=&apos;{0}&apos;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(kwds[&lt;span class=&quot;hljs-string&quot;&gt;&quot;css_class&quot;&lt;/span&gt;]) \\\n                                 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;css_class&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; kwds &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwds&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;+tag+css_class+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt; + fn(*args, **kwds) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/&quot;&lt;/span&gt;+tag+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n    &lt;span class=&quot;hljs-comment&quot;&gt;# return decorator dont call it&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; real_decorator\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeHtmlTag(&lt;span class=&quot;hljs-params&quot;&gt;tag=&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, css_class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bold_css&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeHtmlTag(&lt;span class=&quot;hljs-params&quot;&gt;tag=&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;, css_class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;italic_css&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; hello()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also write decorator in Class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#class.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;makeHtmlTagClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, tag, css_class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;):\n        self._tag = tag\n        self._css_class = &lt;span class=&quot;hljs-string&quot;&gt;&quot; class=&apos;{0}&apos;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(css_class) \\\n                                       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; css_class != &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, fn&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt; + self._tag + self._css_class+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;  \\\n                       + fn(*args, **kwargs) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/&quot;&lt;/span&gt; + self._tag + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeHtmlTagClass(&lt;span class=&quot;hljs-params&quot;&gt;tag=&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, css_class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bold_css&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makeHtmlTagClass(&lt;span class=&quot;hljs-params&quot;&gt;tag=&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;, css_class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;italic_css&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(name)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; hello(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Your name&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a simple example of chaining decorators.  Note the last line - it shows what is going on under the covers.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;############################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    decorators&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;############################################################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bold&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorate&lt;/span&gt;():\n        &lt;span class=&quot;hljs-comment&quot;&gt;# surround with bold tags before calling original function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + fn() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorate\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uk&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorate&lt;/span&gt;():\n        &lt;span class=&quot;hljs-comment&quot;&gt;# swap month and day&lt;/span&gt;\n        fields = fn().split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)\n        date = fields[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + fields[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + fields[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; date\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorate\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDate&lt;/span&gt;():\n    now = datetime.datetime.now()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d/%d/%d&quot;&lt;/span&gt; % (now.day, now.month, now.year)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@bold&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getBoldDate&lt;/span&gt;(): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getDate()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@uk&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUkDate&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getDate()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@bold&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@uk&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getBoldUkDate&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getDate()\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; getDate()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; getBoldDate()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; getUkDate()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; getBoldUkDate()\n&lt;span class=&quot;hljs-comment&quot;&gt;# what is happening under the covers&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; bold(uk(getDate))()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;\n&amp;lt;b&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;&amp;lt;/b&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;\n&amp;lt;b&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;&amp;lt;/b&amp;gt;\n&amp;lt;b&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;&amp;lt;/b&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Speaking of the counter example - as given above, the counter will be shared between all functions that use the decorator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kws&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Called #%i&apos;&lt;/span&gt; % wrapped.count\n        wrapped.count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func(*args, **kws)\n    wrapped.count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That way, your decorator can be reused for different functions (or used to decorate the same function multiple times: &lt;code&gt;func_counter1 = counter(func); func_counter2 = counter(func)&lt;/code&gt;), and the counter variable will remain private to each. &lt;/p&gt;\n    ","\n&lt;h1&gt;Decorate functions with different number of arguments:&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;frame_tests&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nStart: %s&quot;&lt;/span&gt; %(fn.__name__)\n        fn(*args)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;End: %s\\n&quot;&lt;/span&gt; %(fn.__name__)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@frame_tests&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_fn1&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is only a test!&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@frame_tests&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_fn2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s1&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is only a test! %s&quot;&lt;/span&gt; %(s1)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@frame_tests&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_fn3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s1, s2&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is only a test! %s %s&quot;&lt;/span&gt; %(s1, s2)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    test_fn1()\n    test_fn2(&lt;span class=&quot;hljs-string&quot;&gt;&apos;OK!&apos;&lt;/span&gt;)\n    test_fn3(&lt;span class=&quot;hljs-string&quot;&gt;&apos;OK!&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Just a test!&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Start: test_fn1  \nThis &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; only a test!  \nEnd: test_fn1  \n  \n  \nStart: test_fn2  \nThis &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; only a test! OK!  \nEnd: test_fn2  \n  \n  \nStart: test_fn3  \nThis &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; only a test! OK! Just a test!  \nEnd: test_fn3  \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/739665/7262247&quot;&gt;Paolo Bergantino&apos;s answer&lt;/a&gt; has the great advantage of only using the stdlib, and works for this simple example where there are no &lt;em&gt;decorator&lt;/em&gt; arguments nor &lt;em&gt;decorated function&lt;/em&gt; arguments. &lt;/p&gt;\n\n&lt;p&gt;However it has 3 major limitations if you want to tackle more general cases:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;as already noted in several answers, you can not easily modify the code to &lt;strong&gt;add optional decorator arguments&lt;/strong&gt;. For example creating a &lt;code&gt;makestyle(style=&apos;bold&apos;)&lt;/code&gt; decorator is non-trivial.&lt;/li&gt;\n&lt;li&gt;besides, wrappers created with &lt;code&gt;@functools.wraps&lt;/code&gt; &lt;strong&gt;do not preserve the signature&lt;/strong&gt;, so if bad arguments are provided they will start executing, and might raise a different kind of error than the usual &lt;code&gt;TypeError&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;finally, it is quite difficult in wrappers created with &lt;code&gt;@functools.wraps&lt;/code&gt; to &lt;strong&gt;access an argument based on its name&lt;/strong&gt;. Indeed the argument can appear in &lt;code&gt;*args&lt;/code&gt;, in &lt;code&gt;**kwargs&lt;/code&gt;, or may not appear at all (if it is optional).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I wrote &lt;a href=&quot;https://smarie.github.io/python-decopatch/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;decopatch&lt;/code&gt;&lt;/a&gt; to solve the first issue, and wrote &lt;a href=&quot;https://smarie.github.io/python-makefun/#signature-preserving-function-wrappers&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;makefun.wraps&lt;/code&gt;&lt;/a&gt; to solve the other two. Note that &lt;code&gt;makefun&lt;/code&gt; leverages the same trick than the famous &lt;a href=&quot;https://github.com/micheles/decorator&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;decorator&lt;/code&gt;&lt;/a&gt; lib.&lt;/p&gt;\n\n&lt;p&gt;This is how you would create a decorator with arguments, returning truly signature-preserving wrappers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; decopatch &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; function_decorator, DECORATED\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; makefun &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; wraps\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@function_decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makestyle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;st=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, fn=DECORATED&lt;/span&gt;):\n    open_tag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;%s&amp;gt;&quot;&lt;/span&gt; % st\n    close_tag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/%s&amp;gt;&quot;&lt;/span&gt; % st\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapped&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; open_tag + fn(*args, **kwargs) + close_tag\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapped\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;decopatch&lt;/code&gt; provides you with two other development styles that hide or show the various python concepts, depending on your preferences. The most compact style is the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; decopatch &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; function_decorator, WRAPPED, F_ARGS, F_KWARGS\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@function_decorator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makestyle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;st=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, fn=WRAPPED, f_args=F_ARGS, f_kwargs=F_KWARGS&lt;/span&gt;):\n    open_tag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;%s&amp;gt;&quot;&lt;/span&gt; % st\n    close_tag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/%s&amp;gt;&quot;&lt;/span&gt; % st\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; open_tag + fn(*f_args, **f_kwargs) + close_tag\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In both cases you can check that the decorator works as expected:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@makestyle&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@makestyle(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;who&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello %s&quot;&lt;/span&gt; % who\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; hello(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&apos;&lt;/span&gt;    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please refer to the &lt;a href=&quot;https://smarie.github.io/python-decopatch/&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;\n    ","\n&lt;p&gt;I add a case when you need to add custom parameters in decorator, pass it to final function and then work it with.&lt;/p&gt;\n&lt;p&gt;the very decorators:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;jwt_or_redirect&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;  @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n    ...\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn(*args, **kwargs)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;jwt_refresh&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;  @wraps(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n    ...\n    new_kwargs = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;refreshed_jwt&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxx-xxxxxx&apos;&lt;/span&gt;}\n    new_kwargs.update(kwargs)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn(*args, **new_kwargs)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; decorator\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and the final function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@jwt_or_redirect&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@jwt_refresh&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;home_page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kwargs[&lt;span class=&quot;hljs-string&quot;&gt;&apos;refreched_jwt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Yet another example of nested decorators for plotting an image:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; matplotlib.pylab &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; plt\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_axis&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;img, alpha&lt;/span&gt;):\n        plt.axis(&lt;span class=&quot;hljs-string&quot;&gt;&apos;off&apos;&lt;/span&gt;)\n        func(img, alpha)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;plot_gray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;img, alpha&lt;/span&gt;):\n        plt.gray()\n        func(img, alpha)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@remove_axis&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@plot_gray&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;plot_image&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;img, alpha&lt;/span&gt;):\n    plt.imshow(img, alpha=alpha)\n    plt.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, let&apos;s show a color image first without axis labels using the nested decorators:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;plot_image(plt.imread(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lena_color.jpg&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/n6Pbn.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/n6Pbn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Next, let&apos;s show a gray scale image without axis labels using the nested decorators &lt;code&gt;remove_axis&lt;/code&gt; and &lt;code&gt;plot_gray&lt;/code&gt; (we need to &lt;code&gt;cmap=&apos;gray&apos;&lt;/code&gt;, otherwise the default colormap is &lt;code&gt;viridis&lt;/code&gt;, so a grayscale image is by default not displayed in black and white shades, unless explicitly specified)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;plot_image(plt.imread(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lena_bw.jpg&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JAhvK.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JAhvK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The above function call reduces down to the following nested call&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;remove_axis(plot_gray(plot_image))(img, alpha)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"495":["\n&lt;p&gt;Read it backwards (as driven by &lt;a href=&quot;http://c-faq.com/decl/spiral.anderson.html&quot; rel=&quot;noreferrer&quot;&gt;Clockwise/Spiral Rule&lt;/a&gt;):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;int*&lt;/code&gt; - pointer to int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int const *&lt;/code&gt; - pointer to const int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int * const&lt;/code&gt; - const pointer to int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int const * const&lt;/code&gt; - const pointer to const int&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now the first &lt;code&gt;const&lt;/code&gt; can be on either side of the type so:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;const int *&lt;/code&gt; == &lt;code&gt;int const *&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;const int * const&lt;/code&gt; == &lt;code&gt;int const * const&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you want to go really crazy you can do things like this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;int **&lt;/code&gt; - pointer to pointer to int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int ** const&lt;/code&gt; - a const pointer to a pointer to an int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int * const *&lt;/code&gt; - a pointer to a const pointer to an int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int const **&lt;/code&gt; - a pointer to a pointer to a const int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int * const * const&lt;/code&gt; - a const pointer to a const pointer to an int&lt;/li&gt;\n&lt;li&gt;...&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And to make sure we are clear on the meaning of &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, c = &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;* foo;     &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to constant int.&lt;/span&gt;\nfoo = &amp;amp;a;           &lt;span class=&quot;hljs-comment&quot;&gt;// assignment to where foo points to.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* dummy statement*/&lt;/span&gt;\n*foo = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;           &lt;span class=&quot;hljs-comment&quot;&gt;// the value of a can´t get changed through the pointer.&lt;/span&gt;\n\nfoo = &amp;amp;b;           &lt;span class=&quot;hljs-comment&quot;&gt;// the pointer foo can be changed.&lt;/span&gt;\n\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bar = &amp;amp;c;  &lt;span class=&quot;hljs-comment&quot;&gt;// constant pointer to int &lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// note, you actually need to set the pointer &lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// here because you can&apos;t change it later ;)&lt;/span&gt;\n\n*bar = &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;            &lt;span class=&quot;hljs-comment&quot;&gt;// the value of c can be changed through the pointer.    &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* dummy statement*/&lt;/span&gt;\nbar = &amp;amp;a;             &lt;span class=&quot;hljs-comment&quot;&gt;// not possible because bar is a constant pointer.           &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; is a variable pointer to a constant integer. This lets you change what you point to but not the value that you point to. Most often this is seen with C-style strings where you have a pointer to a &lt;code&gt;const char&lt;/code&gt;. You may change which string you point to but you can&apos;t change the content of these strings. This is important when the string itself is in the data segment of a program and shouldn&apos;t be changed.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bar&lt;/code&gt; is a constant or fixed pointer to a value that can be changed. This is like a reference without the extra syntactic sugar. Because of this fact, usually you would use a reference where you would use a &lt;code&gt;T* const&lt;/code&gt; pointer unless you need to allow &lt;code&gt;NULL&lt;/code&gt; pointers.&lt;/p&gt;\n    ","\n&lt;p&gt;For those who don&apos;t know about Clockwise/Spiral Rule:\nStart from the name of the variable, move clockwisely (in this case, move backward) to the next &lt;strong&gt;pointer&lt;/strong&gt; or &lt;strong&gt;type&lt;/strong&gt;. Repeat until expression ends.&lt;/p&gt;\n\n&lt;p&gt;Here is a demo:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/sT6ng.png&quot; alt=&quot;pointer to int&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Zt0G2.png&quot; alt=&quot;const pointer to int const&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/kXH8P.png&quot; alt=&quot;pointer to int const&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/UeqZO.png&quot; alt=&quot;pointer to const int&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/f5ftV.png&quot; alt=&quot;const pointer to int&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think everything is answered here already, but I just want to add that you should beware of &lt;code&gt;typedef&lt;/code&gt;s! They&apos;re NOT just text replacements.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ASTRING;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; ASTRING astring;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The type of &lt;code&gt;astring&lt;/code&gt; is &lt;code&gt;char * const&lt;/code&gt;, not &lt;code&gt;const char *&lt;/code&gt;. This is one reason I always tend to put &lt;code&gt;const&lt;/code&gt; to the right of the type, and never at the start.&lt;/p&gt;\n    ","\n&lt;p&gt;Like pretty much everyone pointed out:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/const-correctness#const-ptr-vs-ptr-const&quot; rel=&quot;noreferrer&quot;&gt;Whats the difference between &lt;code&gt;const X* p&lt;/code&gt;, &lt;code&gt;X* const p&lt;/code&gt; and &lt;code&gt;const X* const p&lt;/code&gt;?&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;You have to read pointer declarations\n  right-to-left.&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;&lt;code&gt;const X* p&lt;/code&gt; means &quot;p points to an X that is const&quot;: the X object can&apos;t be changed via p.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;&lt;code&gt;X* const p&lt;/code&gt; means &quot;p is a const pointer to an X that is non-const&quot;: you can&apos;t change the pointer p itself, but you can change the X object via p.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;&lt;code&gt;const X* const p&lt;/code&gt; means &quot;p is a const pointer to an X that is const&quot;: you can&apos;t change the pointer p itself, nor can you change the X object via p.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constant reference:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A reference to a variable (here int), which is constant. We pass the variable as a reference mainly, because references are smaller in size than the actual value, but there is a side effect and that is because it is like an alias to the actual variable. We may accidentally change the main variable through our full access to the alias, so we make it constant to prevent this side effect.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var0 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &amp;amp;ptr1 = var0;\nptr1 = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\nvar0 = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constant pointers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Once a constant pointer points to a variable then it cannot point to any other variable. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr2 = &amp;amp;var1;\nptr2 = &amp;amp;var2; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pointer to constant&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A pointer through which one cannot change the value of a variable it points is known as a pointer to constant.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * ptr3 = &amp;amp;var2;\n*ptr3 = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constant pointer to a constant&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A constant pointer to a constant is a pointer that can neither change the address it&apos;s pointing to and nor can it change the value kept at that address.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var3 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var4 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr4 = &amp;amp;var3;\n*ptr4 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n ptr4 = &amp;amp;var4; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The general rule is that the &lt;code&gt;const&lt;/code&gt; keyword applies to what precedes it immediately. Exception, a starting &lt;code&gt;const&lt;/code&gt; applies to what follows.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;const int*&lt;/code&gt; is the same as &lt;code&gt;int const*&lt;/code&gt; and means &lt;strong&gt;&quot;pointer to constant int&quot;&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;const int* const&lt;/code&gt; is the same as &lt;code&gt;int const* const&lt;/code&gt; and means &lt;strong&gt;&quot;constant pointer to constant int&quot;&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;\nFor the Dos and Don&apos;ts, if &lt;a href=&quot;https://stackoverflow.com/questions/1142191/how-to-return-const-float-from-a-c-function/1142323#1142323&quot;&gt;this answer&lt;/a&gt; isn&apos;t enough, could you be more precise about what you want?&lt;/p&gt;\n    ","\n&lt;p&gt;This question shows &lt;strong&gt;precisely&lt;/strong&gt; why I like to do things the way I mentioned in my question &lt;a href=&quot;https://stackoverflow.com/questions/988069/in-c-is-const-after-type-id-acceptable&quot;&gt;is const after type id acceptable?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In short, I find the easiest way to remember the rule is that the &quot;const&quot; goes &lt;em&gt;after&lt;/em&gt; the thing it applies to. So in your question, &quot;int const *&quot; means that the int is constant, while &quot;int * const&quot; would mean that the pointer is constant.&lt;/p&gt;\n\n&lt;p&gt;If someone decides to put it at the very front (eg: &quot;const int *&quot;), as a special exception in that case it applies to the thing after it.&lt;/p&gt;\n\n&lt;p&gt;Many people like to use that special exception because they think it looks nicer. I dislike it, because it is an exception, and thus confuses things.&lt;/p&gt;\n    ","\n&lt;p&gt;Simple Use of &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The simplest use is to declare a named constant. To do this, one declares a constant as if it was a variable but add &lt;code&gt;const&lt;/code&gt; before it. One has to initialize it immediately in the constructor because, of course, one cannot set the value later as that would be altering it. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Constant1=&lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will create an integer constant, unimaginatively called &lt;code&gt;Constant1&lt;/code&gt;, with the value 96.&lt;/p&gt;\n\n&lt;p&gt;Such constants are useful for parameters which are used in the program but are do not need to be changed after the program is compiled. It has an advantage for programmers over the C preprocessor &lt;code&gt;#define&lt;/code&gt; command in that it is understood &amp;amp; used by the compiler itself, not just substituted into the program text by the preprocessor before reaching the main compiler, so error messages are much more helpful.&lt;/p&gt;\n\n&lt;p&gt;It also works with pointers but one has to be careful where &lt;code&gt;const&lt;/code&gt; to determine whether the pointer or what it points to is constant or both. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * Constant2 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;declares that &lt;code&gt;Constant2&lt;/code&gt; is variable pointer to a constant integer and:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * Constant2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is an alternative syntax which does the same, whereas&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; Constant3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;declares that &lt;code&gt;Constant3&lt;/code&gt; is constant pointer to a variable integer and&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; Constant4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;declares that &lt;code&gt;Constant4&lt;/code&gt; is constant pointer to a constant integer. Basically const applies to whatever is on its immediate left (other than if there is nothing there in which case it applies to whatever is its immediate right).&lt;/p&gt;\n\n&lt;p&gt;ref: &lt;a href=&quot;http://duramecho.com/ComputerInformation/WhyHowCppConst.html&quot; rel=&quot;noreferrer&quot;&gt;http://duramecho.com/ComputerInformation/WhyHowCppConst.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s simple but tricky. Please note that we can apply the &lt;code&gt;const&lt;/code&gt; qualifier to any data type (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, etc.).&lt;/p&gt;\n&lt;p&gt;Let&apos;s see the below examples.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;const int *p&lt;/code&gt; ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only [&lt;code&gt;p&lt;/code&gt; is a pointer to a constant integer]&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const *p&lt;/code&gt; ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only [&lt;code&gt;p&lt;/code&gt; is a pointer to a constant integer]&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;int *p const&lt;/code&gt; ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int *const p&lt;/code&gt; ==&amp;gt; &lt;code&gt;p&lt;/code&gt; is read-only [&lt;code&gt;p&lt;/code&gt; is a constant pointer to an integer].\nAs pointer &lt;code&gt;p&lt;/code&gt; here is read-only, the declaration and definition should be in same place.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;const int *p const&lt;/code&gt;  ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;const int const *p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;const int *const p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; are read-only [&lt;code&gt;p&lt;/code&gt; is a constant pointer to a constant integer]. As pointer &lt;code&gt;p&lt;/code&gt; here is read-only, the declaration and definition should be in same place.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;int const *p const&lt;/code&gt;  ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const int *p&lt;/code&gt;    ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const const *p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only and is equivalent to &lt;code&gt;int const *p&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const *const p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; are read-only [&lt;code&gt;p&lt;/code&gt; is a constant pointer to a constant integer]. As pointer &lt;code&gt;p&lt;/code&gt; here is read-only, the declaration and definition should be in same place.&lt;/p&gt;\n    ","\n&lt;p&gt;I had the same doubt as you until I came across this &lt;a href=&quot;http://www.amazon.in/Effective-Specific-Addison-Wesley-Professional-Computing/dp/0321334876&quot; rel=&quot;noreferrer&quot;&gt;book&lt;/a&gt; by the C++ Guru Scott Meyers. Refer the third Item in this book where he talks in details about using &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just follow this advice&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If the word &lt;code&gt;const&lt;/code&gt; appears to the left of the asterisk, what&apos;s pointed to is constant&lt;/li&gt;\n&lt;li&gt;If the word &lt;code&gt;const&lt;/code&gt; appears to the right of the asterisk, the pointer itself is constant&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;const&lt;/code&gt; appears on both sides, both are constant&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;To remember in easy way :&lt;/h2&gt;\n&lt;p&gt;If const is before * then value is constant.&lt;/p&gt;\n&lt;p&gt;If const is after * then address is constant.&lt;/p&gt;\n&lt;p&gt;if const are available both before and after * then both value and address are constant.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;int * const var;    //here address is constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;int const * var;    //here value is constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;int const * const var; // both value and address are constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The C and C++ declaration syntax has repeatedly been described as a failed experiment, by the original designers.&lt;/p&gt;\n&lt;p&gt;Instead, let&apos;s &lt;em&gt;name&lt;/em&gt; the type pointer to &lt;code&gt;Type&lt;/code&gt;; Ill call it &lt;code&gt;Ptr_&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt; &amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Ptr_ = Type*;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now &lt;code&gt;Ptr_&amp;lt;char&amp;gt;&lt;/code&gt; is a pointer to &lt;code&gt;char&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;Ptr_&amp;lt;const char&amp;gt;&lt;/code&gt; is a pointer to &lt;code&gt;const char&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;And &lt;code&gt;const Ptr_&amp;lt;const char&amp;gt;&lt;/code&gt; is a &lt;code&gt;const&lt;/code&gt; pointer to &lt;code&gt;const char&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For me, the position of &lt;code&gt;const&lt;/code&gt; i.e. whether it appears to the LEFT or RIGHT or on both LEFT and RIGHT relative to the &lt;code&gt;*&lt;/code&gt; helps me figure out the actual meaning.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;const&lt;/code&gt; to the LEFT of &lt;code&gt;*&lt;/code&gt; indicates that the object pointed by the pointer is a &lt;code&gt;const&lt;/code&gt; object.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;const&lt;/code&gt; to the RIGHT of &lt;code&gt;*&lt;/code&gt; indicates that the pointer is a &lt;code&gt;const&lt;/code&gt; pointer.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The following table is taken from Stanford CS106L Standard C++ Programming Laboratory Course Reader.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/aijhB.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/aijhB.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There are many other subtle points surrounding const correctness in C++.  I suppose the question here has simply been about C, but I&apos;ll give some related examples since the tag is C++ :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You often pass large arguments like strings as &lt;code&gt;TYPE const &amp;amp;&lt;/code&gt; which prevents the object from being either modified or copied.  Example :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;TYPE&amp;amp; TYPE::operator=(const TYPE &amp;amp;rhs) { ... return *this; }&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;But &lt;code&gt;TYPE &amp;amp;  const&lt;/code&gt; is meaningless because references are always const.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You should always label class methods that do not modify the class as &lt;code&gt;const&lt;/code&gt;, otherwise you cannot call the method from a &lt;code&gt;TYPE const &amp;amp;&lt;/code&gt; reference.  Example :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bool TYPE::operator==(const TYPE &amp;amp;rhs) const { ... }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There are common situations where both the return value and the method should be const.  Example :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const TYPE TYPE::operator+(const TYPE &amp;amp;rhs) const { ... }&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;In fact, const methods must not return internal class data as a reference-to-non-const.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As a result, one must often create both a const and a non-const method using const overloading.  For example, if you define &lt;code&gt;T const&amp;amp; operator[] (unsigned i) const;&lt;/code&gt;, then you&apos;ll probably also want the non-const version given by :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;inline T&amp;amp; operator[] (unsigned i) {\n  return const_cast&amp;lt;char&amp;amp;&amp;gt;( \n     static_cast&amp;lt;const TYPE&amp;amp;&amp;gt;(*this)[](i)\n  );\n}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Afaik, there are no const functions in C, non-member functions cannot themselves be const in C++, const methods might have side effects, and the compiler cannot use const functions to avoid duplicate function calls.  In fact, even a simple &lt;code&gt;int const &amp;amp;&lt;/code&gt; reference might witness the value to which it refers be changed elsewhere.&lt;/p&gt;\n    ","\n&lt;p&gt;The const with the int on either sides will make &lt;strong&gt;pointer to constant int&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *ptr=&amp;amp;i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *ptr=&amp;amp;i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; after &lt;code&gt;*&lt;/code&gt; will make &lt;strong&gt;constant pointer to int&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr=&amp;amp;i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case all of these are &lt;strong&gt;pointer to constant integer&lt;/strong&gt;, but none of these are constant pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *ptr1=&amp;amp;i, *ptr2=&amp;amp;j;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case all are &lt;strong&gt;pointer to constant integer&lt;/strong&gt; and ptr2 is &lt;strong&gt;constant pointer to constant integer&lt;/strong&gt;. But ptr1 is not constant pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *ptr1=&amp;amp;i, *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr2=&amp;amp;j;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;if &lt;code&gt;const&lt;/code&gt; is &lt;em&gt;to the left&lt;/em&gt; of &lt;code&gt;*&lt;/code&gt;, it refers to the value (it doesn&apos;t matter whether it&apos;s &lt;code&gt;const int&lt;/code&gt; or &lt;code&gt;int const&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;if &lt;code&gt;const&lt;/code&gt; is &lt;em&gt;to the right&lt;/em&gt; of &lt;code&gt;*&lt;/code&gt;, it refers to the pointer itself&lt;/li&gt;\n&lt;li&gt;it can be both at the same time&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;An important point: &lt;code&gt;const int *p&lt;/code&gt; &lt;strong&gt;does not mean the value you are referring to is constant!!&lt;/strong&gt;. It means that you can&apos;t change it &lt;strong&gt;through that pointer&lt;/strong&gt; (meaning, you can&apos;t assign $*p = ...`). The value itself may be changed in other ways. Eg&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p = &amp;amp;x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//legal&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, *p) &lt;span class=&quot;hljs-comment&quot;&gt;// prints 6&lt;/span&gt;\n*p = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//error &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is meant to be used mostly in function signatures, to guarantee that the function can&apos;t accidentally change the arguments passed.&lt;/p&gt;\n    ","\n&lt;p&gt;This mostly addresses the second line: best practices, assignments, function parameters etc.&lt;/p&gt;\n\n&lt;p&gt;General practice.  Try to make everything &lt;code&gt;const&lt;/code&gt; that you can.  Or to put that another way, make everything &lt;code&gt;const&lt;/code&gt; to begin with, and then remove exactly the minimum set of &lt;code&gt;const&lt;/code&gt;s necessary to allow the program to function.  This will be a big help in attaining const-correctness, and will help ensure that subtle bugs don&apos;t get introduced when people try and assign into things they&apos;re not supposed to modify.&lt;/p&gt;\n\n&lt;p&gt;Avoid const_cast&amp;lt;&amp;gt; like the plague.  There are one or two legitimate use cases for it, but they are very few and far between.  If you&apos;re trying to change a &lt;code&gt;const&lt;/code&gt; object, you&apos;ll do a lot better to find whoever declared it &lt;code&gt;const&lt;/code&gt; in the first pace and talk the matter over with them to reach a consensus as to what should happen.&lt;/p&gt;\n\n&lt;p&gt;Which leads very neatly into assignments.  You can assign into something only if it is non-const.  If you want to assign into something that is const, see above.  Remember that in the declarations &lt;code&gt;int const *foo;&lt;/code&gt; and &lt;code&gt;int * const bar;&lt;/code&gt; different things are &lt;code&gt;const&lt;/code&gt; - other answers here have covered that issue admirably, so I won&apos;t go into it.&lt;/p&gt;\n\n&lt;p&gt;Function parameters:&lt;/p&gt;\n\n&lt;p&gt;Pass by value: e.g. &lt;code&gt;void func(int param)&lt;/code&gt; you don&apos;t care one way or the other at the calling site.  The argument can be made that there are use cases for declaring the function as &lt;code&gt;void func(int const param)&lt;/code&gt; but that has no effect on the caller, only on the function itself, in that whatever value is passed cannot be changed by the function during the call.&lt;/p&gt;\n\n&lt;p&gt;Pass by reference: e.g. &lt;code&gt;void func(int &amp;amp;param)&lt;/code&gt; Now it does make a difference.  As just declared &lt;code&gt;func&lt;/code&gt; is allowed to change &lt;code&gt;param&lt;/code&gt;, and any calling site should be ready to deal with the consequences.  Changing the declaration to &lt;code&gt;void func(int const &amp;amp;param)&lt;/code&gt; changes the contract, and guarantees that &lt;code&gt;func&lt;/code&gt; can now not change &lt;code&gt;param&lt;/code&gt;, meaning what is passed in is what will come back out.  As other have noted this is very useful for cheaply passing a large object that you don&apos;t want to change.  Passing a reference is a lot cheaper than passing a large object by value.&lt;/p&gt;\n\n&lt;p&gt;Pass by pointer: e.g. &lt;code&gt;void func(int *param)&lt;/code&gt; and &lt;code&gt;void func(int const *param)&lt;/code&gt; These two are pretty much synonymous with their reference counterparts, with the caveat that the called function now needs to check for &lt;code&gt;nullptr&lt;/code&gt; unless some other contractual guarantee assures &lt;code&gt;func&lt;/code&gt; that it will never receive a &lt;code&gt;nullptr&lt;/code&gt; in &lt;code&gt;param&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Opinion piece on that topic.  Proving correctness in a case like this is hellishly difficult, it&apos;s just too damn easy to make a mistake.  So don&apos;t take chances, and always check pointer parameters for &lt;code&gt;nullptr&lt;/code&gt;.  You will save yourself pain and suffering and hard to find bugs in the long term.  And as for the cost of the check, it&apos;s dirt cheap, and in cases where the static analysis built into the compiler can manage it, the optimizer will elide it anyway.  Turn on Link Time Code Generation for MSVC, or WOPR (I think) for GCC, and you&apos;ll get it program wide, i.e. even in function calls that cross a source code module boundary.&lt;/p&gt;\n\n&lt;p&gt;At the end of the day all of the above makes a very solid case to always prefer references to pointers.  They&apos;re just safer all round.&lt;/p&gt;\n    ","\n&lt;p&gt;Just for the sake of completeness for C following the others explanations, not sure for C++.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;pp - pointer to pointer&lt;/li&gt;\n&lt;li&gt;p - pointer&lt;/li&gt;\n&lt;li&gt;data - the thing pointed, in examples &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;bold&lt;/strong&gt; - read-only variable&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Pointer&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;p data - &lt;code&gt;int *p;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;p &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const *p;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; data - &lt;code&gt;int * const p;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const * const p;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Pointer to pointer&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;pp p data - &lt;code&gt;int **pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; p data - &lt;code&gt;int ** const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;pp &lt;strong&gt;p&lt;/strong&gt; data - &lt;code&gt;int * const *pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;pp p &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const **pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt; data - &lt;code&gt;int * const * const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; p &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const ** const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;pp &lt;strong&gt;p&lt;/strong&gt; &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const * const *pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt; &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const * const * const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; **pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ** &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 4&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; **pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 5&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ** &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 7&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 8&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;N-levels of Dereference&lt;/h1&gt;\n\n&lt;p&gt;Just keep going, but may the humanity excommunicate you.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; **pp = &amp;amp;p;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ***ppp = &amp;amp;pp;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ****pppp = &amp;amp;ppp;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d \\n&quot;&lt;/span&gt;, ****pppp);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;const int*&lt;/code&gt; - pointer to constant &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can change the value of the pointer; you can not change the value of the &lt;code&gt;int&lt;/code&gt; object, the pointer points to.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;code&gt;const int * const&lt;/code&gt; - constant pointer to constant &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can not change the value of the pointer nor the value of the &lt;code&gt;int&lt;/code&gt; object the pointer points to.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;code&gt;int const *&lt;/code&gt; - pointer to constant &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This statement is equivalent to 1. &lt;code&gt;const int*&lt;/code&gt; - You can change the value of the pointer but you can not change the value of the &lt;code&gt;int&lt;/code&gt; object, the pointer points to.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Actually, there is a 4th option:&lt;/p&gt;\n\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;&lt;code&gt;int * const&lt;/code&gt; - constant pointer to &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can change the value of the object the pointer points to but you can not change the value of the pointer itself. The pointer will always point to the same &lt;code&gt;int&lt;/code&gt; object but this value of this &lt;code&gt;int&lt;/code&gt; object can be changed.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you want to determine a certain type of C or C++ construct you can use the &lt;a href=&quot;http://c-faq.com/decl/spiral.anderson.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Clockwise/Spiral Rule&lt;/a&gt; made by David Anderson; but not to confuse with &lt;a href=&quot;https://en.wikipedia.org/wiki/Anderson%27s_rule_(computer_science)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Anderson`s Rule&lt;/a&gt; made by Ross J. Anderson, which is something quite distinct.&lt;/p&gt;\n    ","\n&lt;p&gt;simple mnemonic:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; pointer &amp;lt;- &lt;code&gt;*&lt;/code&gt; -&amp;gt; pointee &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I like to think of &lt;code&gt;int *i&lt;/code&gt; as declaring &quot;the dereference of &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;&quot;; in this sense, &lt;code&gt;const int *i&lt;/code&gt; means &quot;the deref of &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;const int&lt;/code&gt;&quot;, while &lt;code&gt;int *const i&lt;/code&gt; means &quot;deref of &lt;code&gt;const i&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;&quot;.&lt;/p&gt;\n&lt;p&gt;(the one danger of thinking like this is it may lead to favoring &lt;code&gt;int const *i&lt;/code&gt; style of declaration, which people might hate/disallow)&lt;/p&gt;\n    ","\n&lt;p&gt;I drew an image below to explain this, maybe helpful.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const v&lt;/code&gt; and &lt;code&gt;const int v&lt;/code&gt; are identical.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JwWMu.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JwWMu.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Lot of people answered correctly I will just organize well here and put some Extra info which is missing in given Answers.&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Const is keyword in C language also known as qualifier. Const can\napplied to the declaration of any variable to specify that it&apos;s value\nwill not changed&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int a=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,b;\n\na=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// give error&lt;/span&gt;\nb=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// give error as b is also const int &lt;/span&gt;\n\nyou have &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; intialize &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; declaring itself &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; no way &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; assign\nit afterwards.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;How to read ?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;just read from right to left every statement works smoothly&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;3 main things&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a.    p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; b.    p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; int \n \n&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; c.    p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;[Error]&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; * comes before &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;two types&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *\n\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;we look first&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Major type 1. const int&lt;/strong&gt;*&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;ways to arrange 3 things at 3 places 3!=6&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;i. * at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;*&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; p      [Error]\n*&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p      [Error]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;ii. const at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p      type a. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; p      [Error]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;iii. int at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-go&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p      &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a. \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; b. p is &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Major type 2. const const int&lt;/strong&gt;*&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;ways to arrange 4 things at 4 places in which 2 are alike 4!/2!=12&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;i. * at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     [Error]\n* &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     [Error]\n* &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; p     [Error]\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;ii. int at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p      type a. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     type c. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     type b. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;iii. const at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p     &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a.\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p    [Error]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p      &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a.\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; c.\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p    [Error]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p    [Error]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;squeezing all in one&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;type a. p is ptr to const int  (5)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  *p\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;type b.  p is const ptr to int (2)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;type c. p is const ptr to const int (2)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;just little calculation&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;. const int * &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;        total arrangemets (&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)   &lt;span class=&quot;hljs-selector-attr&quot;&gt;[Errors]&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;. const const int * &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;  total arrangemets (&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)  &lt;span class=&quot;hljs-selector-attr&quot;&gt;[Errors]&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;little Extra&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;int const * p,p2 ;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;here p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  (type a.) \nbut p2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; just &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; please note that it &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; not ptr\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;int * const p,p2 ;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;similarly \nhere p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; const ptr to &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  (&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; b.)   \nbut p2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; just &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; even cost &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;int const * const p,p2 ;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;here p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  (type c.)\nbut p2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; just &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;. \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Finished&lt;/strong&gt;&lt;/p&gt;\n    "]},"page":"24","randomQuestions":[{"title":"How to append text to an existing file in Java?","slug":"how-to-append-text-to-an-existing-file-in-java-1657388492377"},{"title":"Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference","slug":"why-is-my-variable-unaltered-after-i-modify-it-inside-of-a-function-asynchronous-code-reference-1657384288966"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"},{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"How do I return the response from an asynchronous call?","slug":"how-do-i-return-the-response-from-an-asynchronous-call-1657384208012"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"Query based on multiple where clauses in Firebase","slug":"query-based-on-multiple-where-clauses-in-firebase-1657387494547"},{"title":"String.equals versus == [duplicate]","slug":"string.equals-versus-duplicate-1657387599972"},{"title":"Detecting a mobile browser","slug":"detecting-a-mobile-browser-1657388460071"},{"title":"How do I merge two dictionaries in a single expression?","slug":"how-do-i-merge-two-dictionaries-in-a-single-expression-1657387593160"},{"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983"},{"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197"},{"title":"Reference - What does this error mean in PHP?","slug":"reference-what-does-this-error-mean-in-php-1657384301782"},{"title":"Dynamic tabs with user-click chosen components","slug":"dynamic-tabs-with-user-click-chosen-components-1657388465232"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"Is there a JavaScript / jQuery DOM change listener?","slug":"is-there-a-javascript-jquery-dom-change-listener-1657387961200"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"console.log() async or sync?","slug":"console.log()-async-or-sync-1657388401087"}]},"__N_SSG":true}