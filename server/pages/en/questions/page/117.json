{"pageProps":{"data":{"count":610,"rows":[{"id":30,"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981","postType":"QUESTION","createdAt":"2022-07-09T16:32:17.000Z","updatedAt":"2022-07-09T16:32:17.000Z","tags":[{"id":101,"name":"quotes","slug":"quotes","createdAt":"2022-07-09T16:32:18.000Z","updatedAt":"2022-07-09T16:32:18.000Z","Questions_Tags":{"questionId":30,"tagId":101}}]},{"id":29,"title":"How can I access and process nested objects, arrays, or JSON?","slug":"how-can-i-access-and-process-nested-objects-arrays-or-json-1657384332823","postType":"QUESTION","createdAt":"2022-07-09T16:32:12.000Z","updatedAt":"2022-07-09T16:32:12.000Z","tags":[{"id":97,"name":"nested","slug":"nested","createdAt":"2022-07-09T16:32:13.000Z","updatedAt":"2022-07-09T16:32:13.000Z","Questions_Tags":{"questionId":29,"tagId":97}},{"id":98,"name":"object","slug":"object","createdAt":"2022-07-09T16:32:13.000Z","updatedAt":"2022-07-09T16:32:13.000Z","Questions_Tags":{"questionId":29,"tagId":98}},{"id":99,"name":"data-manipulation","slug":"data-manipulation","createdAt":"2022-07-09T16:32:13.000Z","updatedAt":"2022-07-09T16:32:13.000Z","Questions_Tags":{"questionId":29,"tagId":99}}]},{"id":28,"title":"Why does jQuery or a DOM method such as getElementById not find the element?","slug":"why-does-jquery-or-a-dom-method-such-as-getelementbyid-not-find-the-element-1657384326458","postType":"QUESTION","createdAt":"2022-07-09T16:32:06.000Z","updatedAt":"2022-07-09T16:32:06.000Z","tags":[{"id":94,"name":"dom","slug":"dom","createdAt":"2022-07-09T16:32:06.000Z","updatedAt":"2022-07-09T16:32:06.000Z","Questions_Tags":{"questionId":28,"tagId":94}}]},{"id":27,"title":"UTF-8 all the way through","slug":"utf-8-all-the-way-through-1657384323434","postType":"QUESTION","createdAt":"2022-07-09T16:32:03.000Z","updatedAt":"2022-07-09T16:32:03.000Z","tags":[{"id":89,"name":"linux","slug":"linux","createdAt":"2022-07-09T16:32:03.000Z","updatedAt":"2022-07-09T16:32:03.000Z","Questions_Tags":{"questionId":27,"tagId":89}},{"id":90,"name":"apache","slug":"apache","createdAt":"2022-07-09T16:32:03.000Z","updatedAt":"2022-07-09T16:32:03.000Z","Questions_Tags":{"questionId":27,"tagId":90}},{"id":91,"name":"utf-8","slug":"utf-8","createdAt":"2022-07-09T16:32:03.000Z","updatedAt":"2022-07-09T16:32:03.000Z","Questions_Tags":{"questionId":27,"tagId":91}}]},{"id":26,"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828","postType":"QUESTION","createdAt":"2022-07-09T16:31:59.000Z","updatedAt":"2022-07-09T16:31:59.000Z","tags":[{"id":83,"name":"methods","slug":"methods","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":83}},{"id":84,"name":"parameter-passing","slug":"parameter-passing","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":84}},{"id":85,"name":"pass-by-reference","slug":"pass-by-reference","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":85}},{"id":86,"name":"pass-by-value","slug":"pass-by-value","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":86}}]}]},"answers":{"26":["\n&lt;p&gt;Java is always &lt;strong&gt;pass-by-value&lt;/strong&gt;.  Unfortunately, when we deal with objects we are really dealing with object-handles called &lt;em&gt;references&lt;/em&gt; which are passed-by-value as well.  This terminology and semantics easily confuse many beginners.&lt;/p&gt;\n&lt;p&gt;It goes like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;oldDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aDog;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// we pass the object to foo&lt;/span&gt;\n    foo(aDog);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// aDog variable is still pointing to the &quot;Max&quot; dog when foo(...) returns&lt;/span&gt;\n    aDog.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    aDog.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n    aDog == oldDog; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog d)&lt;/span&gt; {\n    d.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// change d inside of foo() to point to a new Dog instance &quot;Fifi&quot;&lt;/span&gt;\n    d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;);\n    d.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the example above &lt;code&gt;aDog.getName()&lt;/code&gt; will still return &lt;code&gt;&quot;Max&quot;&lt;/code&gt;. The value &lt;code&gt;aDog&lt;/code&gt; within &lt;code&gt;main&lt;/code&gt; is not changed in the function &lt;code&gt;foo&lt;/code&gt; with the &lt;code&gt;Dog&lt;/code&gt; &lt;code&gt;&quot;Fifi&quot;&lt;/code&gt; as the object reference is passed by value. If it were passed by reference, then the &lt;code&gt;aDog.getName()&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt; would return &lt;code&gt;&quot;Fifi&quot;&lt;/code&gt; after the call to &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Likewise:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;oldDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aDog;\n\n    foo(aDog);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// when foo(...) returns, the name of the dog has been changed to &quot;Fifi&quot;&lt;/span&gt;\n    aDog.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// but it is still the same dog:&lt;/span&gt;\n    aDog == oldDog; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog d)&lt;/span&gt; {\n    d.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this changes the name of d to be &quot;Fifi&quot;&lt;/span&gt;\n    d.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the above example, &lt;code&gt;Fifi&lt;/code&gt; is the dog&apos;s name after call to &lt;code&gt;foo(aDog)&lt;/code&gt; because the object&apos;s name was set inside of &lt;code&gt;foo(...)&lt;/code&gt;. Any operations that &lt;code&gt;foo&lt;/code&gt; performs on &lt;code&gt;d&lt;/code&gt; are such that, for all practical purposes, they are performed on &lt;code&gt;aDog&lt;/code&gt;, but it is &lt;strong&gt;not&lt;/strong&gt; possible to change the value of the variable &lt;code&gt;aDog&lt;/code&gt; itself.&lt;/p&gt;\n&lt;p&gt;For more information on pass by reference and pass by value, consult the following SO answer: &lt;a href=&quot;https://stackoverflow.com/a/430958/6005228&quot;&gt;https://stackoverflow.com/a/430958/6005228&lt;/a&gt;. This explains more thoroughly the semantics and history behind the two and also explains why Java and many other modern languages appear to do both in certain cases.&lt;/p&gt;\n    ","\n&lt;p&gt;I just noticed you referenced &lt;a href=&quot;http://javadude.com/articles/passbyvalue.htm&quot; rel=&quot;noreferrer&quot;&gt;my article&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The Java Spec says that everything in Java is pass-by-value. There is no such thing as &quot;pass-by-reference&quot; in Java.&lt;/p&gt;\n&lt;p&gt;The key to understanding this is that something like&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Dog myDog;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is &lt;em&gt;not&lt;/em&gt; a Dog; it&apos;s actually a &lt;em&gt;pointer&lt;/em&gt; to a Dog. The use of the term &quot;reference&quot; in Java is very misleading and is what causes most of the confusion here. What they call &quot;references&quot; act/feel more like what we&apos;d call &quot;pointers&quot; in most other languages.&lt;/p&gt;\n&lt;p&gt;What that means, is when you have&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rover&quot;&lt;/span&gt;);\nfoo(myDog);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you&apos;re essentially passing the &lt;em&gt;address&lt;/em&gt; of the created &lt;code&gt;Dog&lt;/code&gt; object to the &lt;code&gt;foo&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;(I say essentially because Java pointers/references aren&apos;t direct addresses, but it&apos;s easiest to think of them that way.)&lt;/p&gt;\n&lt;p&gt;Suppose the &lt;code&gt;Dog&lt;/code&gt; object resides at memory address 42. This means we pass 42 to the method.&lt;/p&gt;\n&lt;p&gt;if the Method were defined as&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog someDog)&lt;/span&gt; {\n    someDog.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// AAA&lt;/span&gt;\n    someDog = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// BBB&lt;/span&gt;\n    someDog.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rowlf&quot;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// CCC&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;let&apos;s look at what&apos;s happening.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the parameter &lt;code&gt;someDog&lt;/code&gt; is set to the value 42&lt;/li&gt;\n&lt;li&gt;at line &quot;AAA&quot;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;someDog&lt;/code&gt; is followed to the &lt;code&gt;Dog&lt;/code&gt; it points to (the &lt;code&gt;Dog&lt;/code&gt; object at address 42)&lt;/li&gt;\n&lt;li&gt;that &lt;code&gt;Dog&lt;/code&gt; (the one at address 42) is asked to change his name to Max&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;at line &quot;BBB&quot;\n&lt;ul&gt;\n&lt;li&gt;a new &lt;code&gt;Dog&lt;/code&gt; is created. Let&apos;s say he&apos;s at address 74&lt;/li&gt;\n&lt;li&gt;we assign the parameter &lt;code&gt;someDog&lt;/code&gt; to 74&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;at line &quot;CCC&quot;\n&lt;ul&gt;\n&lt;li&gt;someDog is followed to the &lt;code&gt;Dog&lt;/code&gt; it points to (the &lt;code&gt;Dog&lt;/code&gt; object at address 74)&lt;/li&gt;\n&lt;li&gt;that &lt;code&gt;Dog&lt;/code&gt; (the one at address 74) is asked to change his name to Rowlf&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;then, we return&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Now let&apos;s think about what happens outside the method:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Did &lt;code&gt;myDog&lt;/code&gt; change?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;There&apos;s the key.&lt;/p&gt;\n&lt;p&gt;Keeping in mind that &lt;code&gt;myDog&lt;/code&gt; is a &lt;em&gt;pointer&lt;/em&gt;, and not an actual &lt;code&gt;Dog&lt;/code&gt;, the answer is NO. &lt;code&gt;myDog&lt;/code&gt; still has the value 42; it&apos;s still pointing to the original &lt;code&gt;Dog&lt;/code&gt; (but note that because of line &quot;AAA&quot;, its name is now &quot;Max&quot; - still the same Dog; &lt;code&gt;myDog&lt;/code&gt;&apos;s value has not changed.)&lt;/p&gt;\n&lt;p&gt;It&apos;s perfectly valid to &lt;em&gt;follow&lt;/em&gt; an address and change what&apos;s at the end of it; that does not change the variable, however.&lt;/p&gt;\n&lt;p&gt;Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, the caller will not see any changes you make to where that pointer points. (In a language with pass-by-reference semantics, the method function &lt;em&gt;can&lt;/em&gt; change the pointer and the caller will see that change.)&lt;/p&gt;\n&lt;p&gt;In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.&lt;/p&gt;\n&lt;p&gt;If Java had pass-by-reference semantics, the &lt;code&gt;foo&lt;/code&gt; method we defined above would have changed where &lt;code&gt;myDog&lt;/code&gt; was pointing when it assigned &lt;code&gt;someDog&lt;/code&gt; on line BBB.&lt;/p&gt;\n&lt;p&gt;Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.&lt;/p&gt;\n    ","\n&lt;p&gt;Java always passes arguments &lt;em&gt;by value&lt;/em&gt;, NOT by reference.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Let me explain this through an &lt;a href=&quot;https://stackoverflow.com/a/9404727/597657&quot;&gt;example&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Main&lt;/span&gt; {\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n          &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;);\n          changeReference(f); &lt;span class=&quot;hljs-comment&quot;&gt;// It won&apos;t change the reference!&lt;/span&gt;\n          modifyReference(f); &lt;span class=&quot;hljs-comment&quot;&gt;// It will modify the object that the reference variable &quot;f&quot; refers to!&lt;/span&gt;\n     }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeReference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Foo a)&lt;/span&gt; {\n          &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;);\n          a = b;\n     }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modifyReference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Foo c)&lt;/span&gt; {\n          c.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;);\n     }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I will explain this in steps:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Declaring a reference named &lt;code&gt;f&lt;/code&gt; of type &lt;code&gt;Foo&lt;/code&gt; and assign it a new object of type &lt;code&gt;Foo&lt;/code&gt; with an attribute &lt;code&gt;&quot;f&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/arXpP.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;From the method side, a reference of type &lt;code&gt;Foo&lt;/code&gt; with a name &lt;code&gt;a&lt;/code&gt; is declared and it&apos;s initially assigned &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeReference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Foo a)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/k2LBD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As you call the method &lt;code&gt;changeReference&lt;/code&gt;, the reference &lt;code&gt;a&lt;/code&gt; will be assigned the object which is passed as an argument.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;changeReference(f);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/1Ez74.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declaring a reference named &lt;code&gt;b&lt;/code&gt; of type &lt;code&gt;Foo&lt;/code&gt; and assign it a new object of type &lt;code&gt;Foo&lt;/code&gt; with an attribute &lt;code&gt;&quot;b&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Krx4N.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;a = b&lt;/code&gt; makes a new assignment to the reference &lt;code&gt;a&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;f&lt;/code&gt;, of the object whose attribute is &lt;code&gt;&quot;b&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/rCluu.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As you call &lt;code&gt;modifyReference(Foo c)&lt;/code&gt; method, a reference &lt;code&gt;c&lt;/code&gt; is created and assigned the object with attribute &lt;code&gt;&quot;f&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/PRZPg.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;c.setAttribute(&quot;c&quot;);&lt;/code&gt; will change the attribute of the object that reference &lt;code&gt;c&lt;/code&gt; points to it, and it&apos;s the same object that reference &lt;code&gt;f&lt;/code&gt; points to it.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/H9Qsf.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;I hope you understand now how passing objects as arguments works in Java :)&lt;/p&gt;\n    ","\n&lt;p&gt;Java is always pass by value, with no exceptions, &lt;strong&gt;ever&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java &lt;strong&gt;never&lt;/strong&gt; provides direct access to the values of &lt;em&gt;objects themselves&lt;/em&gt;, in &lt;em&gt;any&lt;/em&gt; circumstances. The only access to objects is through a &lt;em&gt;reference&lt;/em&gt; to that object. Because Java objects are &lt;em&gt;always&lt;/em&gt; accessed through a reference, rather than directly, it is common to talk about fields and variables &lt;em&gt;and method arguments&lt;/em&gt; as being &lt;em&gt;objects&lt;/em&gt;, when pedantically they are only &lt;em&gt;references to objects&lt;/em&gt;. &lt;strong&gt;The confusion stems from this (strictly speaking, incorrect) change in nomenclature.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So, when calling a method&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;For primitive arguments (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, etc.), the pass by value is &lt;em&gt;the actual value&lt;/em&gt; of the primitive (for example, 3).&lt;/li&gt;\n&lt;li&gt;For objects, the pass by value is the value of &lt;em&gt;the reference to the object&lt;/em&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So if you have &lt;code&gt;doSomething(foo)&lt;/code&gt; and &lt;code&gt;public void doSomething(Foo foo) { .. }&lt;/code&gt; the two Foos have copied &lt;em&gt;references&lt;/em&gt; that point to the same objects.&lt;/p&gt;\n\n&lt;p&gt;Naturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you&apos;ll just smile :-)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Step one please erase from your mind that word that starts with &apos;p&apos; &quot;_ _ _ _ _ _ _&quot;, especially if you come from other programming languages. Java and &apos;p&apos; cannot be written in the same book, forum, or even txt.&lt;/p&gt;\n\n&lt;p&gt;Step two remember that when you pass an Object into a method you&apos;re passing the Object reference and not the Object itself.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;Student&lt;/em&gt;: Master, does this mean that Java is pass-by-reference?&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Master&lt;/em&gt;: Grasshopper, No.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now think of what an Object&apos;s reference/variable does/is:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;A variable holds the bits that tell the JVM how to get to the referenced Object in memory (Heap).&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;When passing arguments to a method &lt;strong&gt;you ARE NOT passing the reference variable, but a copy of the bits in the reference variable&lt;/strong&gt;. Something like this: 3bad086a. 3bad086a represents a way to get to the passed object.&lt;/li&gt;\n&lt;li&gt;So you&apos;re just passing 3bad086a that it&apos;s the value of the reference.&lt;/li&gt;\n&lt;li&gt;You&apos;re passing the value of the reference and not the reference itself (and not the object).&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;This value is actually COPIED and given to the method&lt;/em&gt;&lt;/strong&gt;. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In the following (please don&apos;t try to compile/execute this...):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; Person person;\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; person = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; changeName(person);\n&lt;span class=&quot;hljs-number&quot;&gt;4.&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5.&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//I didn&apos;t use Person person below as an argument to be nice&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6.&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Person anotherReferenceToTheSamePersonObject)&lt;/span&gt; {\n&lt;span class=&quot;hljs-number&quot;&gt;7.&lt;/span&gt;     anotherReferenceToTheSamePersonObject.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jerry&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-number&quot;&gt;8.&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What happens?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The variable &lt;em&gt;person&lt;/em&gt; is created in line #1 and it&apos;s null at the beginning.&lt;/li&gt;\n&lt;li&gt;A new Person Object is created in line #2, stored in memory, and the variable &lt;em&gt;person&lt;/em&gt; is given the reference to the Person object. That is, its address. Let&apos;s say 3bad086a.&lt;/li&gt;\n&lt;li&gt;The variable &lt;em&gt;person&lt;/em&gt; holding the address of the Object is passed to the function in line #3.&lt;/li&gt;\n&lt;li&gt;In line #4 you can listen to the sound of silence &lt;/li&gt;\n&lt;li&gt;Check the comment on line #5&lt;/li&gt;\n&lt;li&gt;A method local variable -&lt;em&gt;anotherReferenceToTheSamePersonObject&lt;/em&gt;- is created and then comes the magic in line #6:\n\n&lt;ul&gt;\n&lt;li&gt;The variable/reference &lt;em&gt;person&lt;/em&gt; is copied bit-by-bit and passed to &lt;em&gt;anotherReferenceToTheSamePersonObject&lt;/em&gt; inside the function.&lt;/li&gt;\n&lt;li&gt;No new instances of Person are created.&lt;/li&gt;\n&lt;li&gt;Both &quot;&lt;em&gt;person&lt;/em&gt;&quot; and &quot;&lt;em&gt;anotherReferenceToTheSamePersonObject&lt;/em&gt;&quot; hold the same value of 3bad086a.&lt;/li&gt;\n&lt;li&gt;Don&apos;t try this but person==anotherReferenceToTheSamePersonObject would be true.&lt;/li&gt;\n&lt;li&gt;Both variables have IDENTICAL COPIES of the reference and they both refer to the same Person Object, the SAME Object on the Heap and NOT A COPY.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A picture is worth a thousand words:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ba3hJ.jpg&quot; alt=&quot;Pass by Value&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you didn&apos;t get it then just trust me and remember that it&apos;s better to say that &lt;strong&gt;Java is pass by value&lt;/strong&gt;. Well, &lt;strong&gt;pass by reference value&lt;/strong&gt;. Oh well, even better is &lt;strong&gt;&lt;em&gt;pass-by-copy-of-the-variable-value! ;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Now feel free to hate me but note that given this &lt;strong&gt;there is no difference between passing primitive data types and Objects&lt;/strong&gt; when talking about method arguments.&lt;/p&gt;\n\n&lt;p&gt;You always pass a copy of the bits of the value of the reference!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If it&apos;s a primitive data type these bits will contain the value of the primitive data type itself.&lt;/li&gt;\n&lt;li&gt;If it&apos;s an Object the bits will contain the value of the address that tells the JVM how to get to the Object.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you&apos;ll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what!&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Of course you can cut it short and just say that  &lt;strong&gt;Java is pass-by-value!&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Java passes references by value.&lt;/p&gt;\n\n&lt;p&gt;So you can&apos;t change the reference that gets passed in.&lt;/p&gt;\n    ","\n&lt;p&gt;I feel like arguing about &quot;pass-by-reference vs pass-by-value&quot; is not super-helpful.&lt;/p&gt;\n\n&lt;p&gt;If you say, &quot;Java is pass-by-whatever (reference/value)&quot;, in either case, you&apos;re not provide a complete answer. Here&apos;s some additional information that will hopefully aid in understanding what&apos;s happening in memory.&lt;/p&gt;\n\n&lt;p&gt;Crash course on stack/heap before we get to the Java implementation:\nValues go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria.\nMemory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed.&lt;/p&gt;\n\n&lt;p&gt;Okay. First off, local primitives go on the stack. So this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;101.1f&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;amIAwesome&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;results in this:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/7nGKU.png&quot; alt=&quot;primitives on the stack&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are against the word &quot;pointer&quot;. Whatever. Just know that the address of the object goes on the stack.&lt;/p&gt;\n\n&lt;p&gt;Like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;problems&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jay-Z&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/yTIYp.png&quot; alt=&quot;a b*7ch aint one!&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;JButton[] marxBros = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\nmarxBros[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Groucho&quot;&lt;/span&gt;);\nmarxBros[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Zeppo&quot;&lt;/span&gt;);\nmarxBros[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Harpo&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/v2b33.png&quot; alt=&quot;marx brothers&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So, what gets passed in when you call a method? If you pass in an object, what you&apos;re actually passing in is the address of the object. Some might say the &quot;value&quot; of the address, and some say it&apos;s just a reference to the object. This is the genesis of the holy war between &quot;reference&quot; and &quot;value&quot; proponents. What you call it isn&apos;t as important as that you understand that what&apos;s getting passed in is the address to the object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt;{\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;There goes &quot;&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;!&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hisName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;John J. Jingleheimerschmitz&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; hisName;\n    shout(myName);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier &lt;code&gt;hisName&lt;/code&gt;, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call &lt;code&gt;shout()&lt;/code&gt;: a new stack frame is created and a new identifier, &lt;code&gt;name&lt;/code&gt; is created and assigned the address of the already-existing String.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/q0prc.png&quot; alt=&quot;la da di da da da da&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So, value, reference? You say &quot;potato&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically, reassigning Object parameters doesn&apos;t affect the argument, e.g.,&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object bar)&lt;/span&gt; {\n    bar = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hah!&quot;&lt;/span&gt;;\n    foo(baz);\n    System.out.println(baz);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will print out &lt;code&gt;&quot;Hah!&quot;&lt;/code&gt; instead of &lt;code&gt;null&lt;/code&gt;. The reason this works is because &lt;code&gt;bar&lt;/code&gt; is a copy of the value of &lt;code&gt;baz&lt;/code&gt;, which is just a reference to &lt;code&gt;&quot;Hah!&quot;&lt;/code&gt;. If it were the actual reference itself, then &lt;code&gt;foo&lt;/code&gt; would have redefined &lt;code&gt;baz&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to show the contrast, compare the following &lt;a href=&quot;https://en.wikipedia.org/wiki/C++&quot; rel=&quot;noreferrer&quot;&gt;C++&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; snippets:&lt;/p&gt;\n\n&lt;p&gt;In C++: &lt;strong&gt;Note: Bad code - memory leaks!&lt;/strong&gt;  But it demonstrates the point.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cppMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;ref, Dog obj, Dog &amp;amp;objRef, Dog *objPtr, Dog *&amp;amp;objPtrRef)&lt;/span&gt;\n{\n    val = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy&lt;/span&gt;\n    ref = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original variable&lt;/span&gt;\n    obj.SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy of Dog passed&lt;/span&gt;\n    objRef.SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objRef&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog passed&lt;/span&gt;\n    objPtr-&amp;gt;SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objPtr&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog pointed to &lt;/span&gt;\n                               &lt;span class=&quot;hljs-comment&quot;&gt;// by the copy of the pointer passed.&lt;/span&gt;\n    objPtr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newObjPtr&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy of the pointer, &lt;/span&gt;\n                                   &lt;span class=&quot;hljs-comment&quot;&gt;// leaving the original object alone.&lt;/span&gt;\n    objPtrRef-&amp;gt;SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objRefPtr&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog pointed to &lt;/span&gt;\n                                    &lt;span class=&quot;hljs-comment&quot;&gt;// by the original pointer passed. &lt;/span&gt;\n    objPtrRef = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newObjPtrRef&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original pointer passed&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dog(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d0&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dog(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d1&quot;&lt;/span&gt;);\n    Dog *d2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d2&quot;&lt;/span&gt;);\n    Dog *d3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d3&quot;&lt;/span&gt;);\n    cppMethod(a, b, d0, d1, d2, d3);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// a is still set to 0&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// b is now set to 7&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d0 still have name &quot;d0&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d1 now has name &quot;objRef&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d2 now has name &quot;objPtr&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d3 now has name &quot;newObjPtrRef&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Java, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;javaMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val, Dog objPtr)&lt;/span&gt;\n{\n   val = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy&lt;/span&gt;\n   objPtr.SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objPtr&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog pointed to &lt;/span&gt;\n                            &lt;span class=&quot;hljs-comment&quot;&gt;// by the copy of the pointer passed.&lt;/span&gt;\n   objPtr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newObjPtr&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy of the pointer, &lt;/span&gt;\n                                  &lt;span class=&quot;hljs-comment&quot;&gt;// leaving the original object alone.&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d0&quot;&lt;/span&gt;);\n    javaMethod(a, d0);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// a is still set to 0&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d0 now has name &quot;objPtr&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.&lt;/p&gt;\n    ","\n&lt;p&gt;Java passes references to objects by value.&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term &lt;em&gt;call by sharing&lt;/em&gt; (also known as &lt;em&gt;call by object-sharing&lt;/em&gt; and &lt;em&gt;call by object&lt;/em&gt;) for this specific case of &quot;call by value where the value is a reference&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;The crux of the matter is that the word &lt;em&gt;reference&lt;/em&gt; in the expression &quot;pass by reference&quot; means something completely different from the usual meaning of the word &lt;em&gt;reference&lt;/em&gt; in Java. &lt;/p&gt;\n\n&lt;p&gt;Usually in Java &lt;em&gt;reference&lt;/em&gt; means a a &lt;em&gt;reference to an object&lt;/em&gt;. But the technical terms &lt;em&gt;pass by reference/value&lt;/em&gt; from programming language theory is talking about a &lt;em&gt;reference to the memory cell holding the variable&lt;/em&gt;, which is something completely different.&lt;/p&gt;\n    ","\n&lt;p&gt;In java everything is reference, so when you have something like:\n    &lt;code&gt;Point pnt1 = new Point(0,0);&lt;/code&gt; Java does following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Creates new Point object&lt;/li&gt;\n&lt;li&gt;Creates new Point reference and initialize that reference to &lt;em&gt;point (refer to)&lt;/em&gt; on previously created Point object.&lt;/li&gt;\n&lt;li&gt;From here, through Point object life, you will access to that object through pnt1\n reference. So we can say that in Java you manipulate object through its reference.&lt;br&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/jM54f.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Java doesn&apos;t pass method arguments by reference; it passes them by value.&lt;/strong&gt; I will use example from &lt;a href=&quot;http://www.javaworld.com/javaqa/2000-05/03-qa-0526-pass.html&quot; rel=&quot;noreferrer&quot;&gt;this site&lt;/a&gt;: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tricky&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Point arg1, Point arg2)&lt;/span&gt; {\n  arg1.x = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n  arg1.y = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arg1;\n  arg1 = arg2;\n  arg2 = temp;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String [] args)&lt;/span&gt; {\n  &lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1: &quot;&lt;/span&gt; + pnt1.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y1: &quot;&lt;/span&gt; +pnt1.y); \n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2: &quot;&lt;/span&gt; + pnt2.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y2: &quot;&lt;/span&gt; +pnt2.y);\n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n  tricky(pnt1,pnt2);\n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1: &quot;&lt;/span&gt; + pnt1.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y1:&quot;&lt;/span&gt; + pnt1.y); \n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2: &quot;&lt;/span&gt; + pnt2.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y2: &quot;&lt;/span&gt; +pnt2.y);  \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Flow of the program:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Creating two different Point object with two different reference associated.\n&lt;img src=&quot;https://i.stack.imgur.com/5LIKC.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1: &quot;&lt;/span&gt; + pnt1.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y1: &quot;&lt;/span&gt; +pnt1.y); \nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2: &quot;&lt;/span&gt; + pnt2.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y2: &quot;&lt;/span&gt; +pnt2.y);\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As expected output will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;X1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     Y1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nX2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     Y2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;On this line &apos;pass-by-value&apos; goes into the play...&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;tricky(pnt1,pnt2);           &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tricky&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Point arg1, Point arg2)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;References &lt;code&gt;pnt1&lt;/code&gt; and &lt;code&gt;pnt2&lt;/code&gt; are &lt;strong&gt;passed by value&lt;/strong&gt; to the tricky method, which means that now yours references &lt;code&gt;pnt1&lt;/code&gt; and &lt;code&gt;pnt2&lt;/code&gt; have their &lt;code&gt;copies&lt;/code&gt; named &lt;code&gt;arg1&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;.So &lt;code&gt;pnt1&lt;/code&gt; and &lt;code&gt;arg1&lt;/code&gt; &lt;em&gt;points&lt;/em&gt; to the same object. (Same for the &lt;code&gt;pnt2&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;)\n&lt;img src=&quot;https://i.stack.imgur.com/qd1GH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;In the &lt;code&gt;tricky&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; arg1.x = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n arg1.y = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/o4WT0.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Next in the &lt;code&gt;tricky&lt;/code&gt; method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arg1;\narg1 = arg2;\narg2 = temp;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, you first create new &lt;code&gt;temp&lt;/code&gt; Point reference which will &lt;em&gt;point&lt;/em&gt; on same place like &lt;code&gt;arg1&lt;/code&gt; reference. Then you move reference &lt;code&gt;arg1&lt;/code&gt; to &lt;em&gt;point&lt;/em&gt; to the same place like &lt;code&gt;arg2&lt;/code&gt; reference.\nFinally &lt;code&gt;arg2&lt;/code&gt; will &lt;em&gt;point&lt;/em&gt; to the same place like &lt;code&gt;temp&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/fX5Q3.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;From here scope of &lt;code&gt;tricky&lt;/code&gt; method is gone and you don&apos;t have access any more to the references: &lt;code&gt;arg1&lt;/code&gt;, &lt;code&gt;arg2&lt;/code&gt;, &lt;code&gt;temp&lt;/code&gt;. &lt;strong&gt;But important note is that everything you do with these references when they are &apos;in life&apos; will permanently affect object on which they are &lt;em&gt;point&lt;/em&gt; to.&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;So after executing method &lt;code&gt;tricky&lt;/code&gt;, when you return to &lt;code&gt;main&lt;/code&gt;, you have this situation:\n&lt;img src=&quot;https://i.stack.imgur.com/LRETe.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So now, completely execution of program will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;X1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         Y1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nX2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         Y2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nX1: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;       Y1: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\nX2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         Y2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Java is always pass by value, not pass by reference&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;First of all, we need to understand what pass by value and pass by reference are.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pass by value means that you are making a copy in memory of the actual parameter&apos;s value that is passed in. This is a copy of the contents of the actual parameter&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pass by reference (also called pass by address) means that a copy of the address of the actual parameter is stored&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Sometimes Java can give the illusion of pass by reference. Let&apos;s see how it works by using the example below:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;();\n        t.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;initialvalue&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt;().changeValue(t);\n        System.out.println(t.name);\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Test f)&lt;/span&gt; {\n        f.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;changevalue&quot;&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n    String name;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output of this program is:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;changevalue\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Let&apos;s understand step by step:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As we all know it will create an object in the heap and return the reference value back to t. For example, suppose the value of t is &lt;code&gt;0x100234&lt;/code&gt; (we don&apos;t know the actual JVM internal value, this is just an example) .&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/AVrhI.png&quot; alt=&quot;first illustration&quot;&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt;().changeValue(t);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When passing reference t to the function it will not directly pass the actual reference value of object test,  but it will create a copy of t and then pass it to the function. Since it is &lt;strong&gt;passing by value&lt;/strong&gt;, it passes a copy of the variable rather than the actual reference of it. Since we said the value of t was &lt;code&gt;0x100234&lt;/code&gt;, both t and f will have the same value and hence they will point to the same object.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/WwdPh.png&quot; alt=&quot;second illustration&quot;&gt;&lt;/p&gt;\n&lt;p&gt;If you change anything in the function using reference f it will modify the existing contents of the object. That is why we got the output &lt;code&gt;changevalue&lt;/code&gt;,   which is updated in the function.&lt;/p&gt;\n&lt;p&gt;To understand this more clearly, consider the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;();\n        t.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;initialvalue&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt;().changeRefence(t);\n        System.out.println(t.name);\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeRefence&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Test f)&lt;/span&gt; {\n        f = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n    String name;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will this throw a &lt;code&gt;NullPointerException&lt;/code&gt;? No, because it only passes a copy of the reference.\nIn the case of passing by reference, it could have thrown a &lt;code&gt;NullPointerException&lt;/code&gt;, as seen below:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/jH6KP.png&quot; alt=&quot;third illustration&quot;&gt;&lt;/p&gt;\n&lt;p&gt;Hopefully this will help.&lt;/p&gt;\n    ","\n&lt;p&gt;There are already great answers that cover this. I wanted to make a small contribution by sharing a &lt;strong&gt;very simple example&lt;/strong&gt; (which will compile) contrasting the behaviors between Pass-by-reference in c++ and Pass-by-value in Java.&lt;/p&gt;\n\n&lt;p&gt;A few points:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The term &quot;reference&quot; is a overloaded with two separate meanings. In Java it simply means a pointer, but in the context of &quot;Pass-by-reference&quot; it means a handle to the original variable which was passed in.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Java is Pass-by-value&lt;/strong&gt;. Java is a descendent of C (among other languages). Before C, several (but not all) earlier languages like FORTRAN and COBOL supported PBR, but C did not. PBR allowed these other languages to make changes to the passed variables inside sub-routines. In order to accomplish the same thing (i.e. change the values of variables inside functions), C programmers passed pointers to variables into functions. Languages inspired by C, such as Java, borrowed this idea and continue to pass pointer to methods as C did, except that Java calls its pointers References. Again, this is a different use of the word &quot;Reference&quot; than in &quot;Pass-By-Reference&quot;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;C++ allows Pass-by-reference&lt;/strong&gt; by declaring a reference parameter using the &quot;&amp;amp;&quot; character (which happens to be the same character used to indicate &quot;the address of a variable&quot; in both C and C++). For example, if we pass in a pointer by reference, the parameter and the argument are not just pointing to the same object. Rather, they are the same variable. If one gets set to a different address or to null, so does the other.&lt;/li&gt;\n&lt;li&gt;In the C++ example below I&apos;m passing a &lt;strong&gt;pointer&lt;/strong&gt; to a null terminated string &lt;strong&gt;by reference&lt;/strong&gt;. And in the Java example below I&apos;m passing a Java reference to a String (again, the same as a pointer to a String) by value. Notice the output in the comments.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;C++ pass by reference example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;using namespace std;\n#include &amp;lt;iostream&amp;gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&amp;amp;str)&lt;/span&gt;{   &lt;span class=&quot;hljs-comment&quot;&gt;// the &apos;&amp;amp;&apos; makes this a reference parameter&lt;/span&gt;\n    str = NULL;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;not Null&quot;&lt;/span&gt;;\n    change(str);\n    cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;str is &quot;&lt;/span&gt; &amp;lt;&amp;lt; str;      &lt;span class=&quot;hljs-comment&quot;&gt;// ==&amp;gt;str is &amp;lt;null&amp;gt;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Java pass &quot;a Java reference&quot; by value example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueDemo&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String str)&lt;/span&gt;{\n        str = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;ValueDemo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueDemo&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;not null&quot;&lt;/span&gt;;\n        vd.change(str);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str is &quot;&lt;/span&gt; + str);    &lt;span class=&quot;hljs-comment&quot;&gt;// ==&amp;gt; str is not null!!&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// Note that if &quot;str&quot; was&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// passed-by-reference, it&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// WOULD BE NULL after the&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// call to change().&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Several people have written comments which seem to indicate that either they are not looking at my examples or they don&apos;t get the c++ example. Not sure where the disconnect is, but guessing the c++ example is not clear. I&apos;m posting the same example in pascal because I think pass-by-reference looks cleaner in pascal, but I could be wrong. I might just be confusing people more; I hope not.&lt;/p&gt;\n\n&lt;p&gt;In pascal, parameters passed-by-reference are called &quot;var parameters&quot;. In the procedure setToNil below, please note the keyword &apos;var&apos; which precedes the parameter &apos;ptr&apos;. When a pointer is passed to this procedure, it will be passed &lt;strong&gt;by reference&lt;/strong&gt;. Note the behavior: when this procedure sets ptr to nil (that&apos;s pascal speak for NULL), it will set the argument to nil--you can&apos;t do that in Java.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;program passByRefDemo;\n&lt;span class=&quot;hljs-type&quot;&gt;type&lt;/span&gt; \n   &lt;span class=&quot;hljs-variable&quot;&gt;iptr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ^integer;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;\n   ptr: iptr;\n\n   procedure &lt;span class=&quot;hljs-title function_&quot;&gt;setToNil&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ptr : iptr)&lt;/span&gt;;\n   begin\n       ptr := nil;\n   end;\n\nbegin\n   &lt;span class=&quot;hljs-title function_&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ptr)&lt;/span&gt;;\n   ptr^ := &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n   setToNil(ptr);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ptr = nil) then\n       &lt;span class=&quot;hljs-title function_&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ptr seems to be nil&apos;&lt;/span&gt;)&lt;/span&gt;;     { ptr should be nil, so &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; line will run. }\nend.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Some excerpts from &lt;strong&gt;&quot;THE Java Programming Language&quot;&lt;/strong&gt; by Ken Arnold, &lt;strong&gt;James Gosling (the guy who invented Java)&lt;/strong&gt;, and David Holmes, chapter 2, section 2.6.5&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;All parameters to methods are passed &quot;by value&quot;&lt;/strong&gt;. In other words,\n  values of parameter variables in a method are copies of the invoker\n  specified as arguments.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;He goes on to make the same point regarding objects . . . &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;You should note that when the parameter is an object reference, it is\n  the object reference-not the object itself-that is &lt;strong&gt;passed &quot;by value&quot;&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And towards the end of the same section he makes a broader statement about java being only pass by value and never pass by reference.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The Java programming language &lt;strong&gt;does not pass objects by reference; it&lt;/strong&gt;\n  &lt;strong&gt;passes object references by value&lt;/strong&gt;. Because two copies of the same\n  reference refer to the same actual object, changes made through one\n  reference variable are visible through the other. There is exactly one\n  parameter passing mode-&lt;strong&gt;pass by value&lt;/strong&gt;-and that helps keep things\n  simple.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This section of the book has a great explanation of parameter passing in Java and of the distinction between pass-by-reference and pass-by-value and it&apos;s by the creator of Java. I would encourage anyone to read it, especially if you&apos;re still not convinced.&lt;/p&gt;\n\n&lt;p&gt;I think the difference between the two models is very subtle and unless you&apos;ve done programming where you actually used pass-by-reference, it&apos;s easy to miss where two models differ.&lt;/p&gt;\n\n&lt;p&gt;I hope this settles the debate, but probably won&apos;t.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I might be a little obsessed with this post. Probably because I feel that the makers of Java inadvertently spread misinformation. If instead of using the word &quot;reference&quot; for pointers they had used something else, say \ndingleberry, there would&apos;ve been no problem. You could say, &quot;Java passes dingleberries by value and not by reference&quot;, and nobody would be confused.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s the reason only Java developers have issue with this. They look at the word &quot;reference&quot; and think they know exactly what that means, so they don&apos;t even bother to consider the opposing argument.&lt;/p&gt;\n\n&lt;p&gt;Anyway, I noticed a comment in an older post, which made a balloon analogy which I really liked. So much so that I decided to glue together some clip-art to make a set of cartoons to illustrate the point.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Passing a reference by value&lt;/strong&gt;--Changes to the reference are not reflected in the caller&apos;s scope, but the changes to the object are. This is because the reference is copied, but the both the original and the copy refer to the same object.\n&lt;a href=&quot;https://i.stack.imgur.com/RvkqU.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RvkqU.png&quot; alt=&quot;Passing Object references By Value&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Pass by reference&lt;/strong&gt;--There is no copy of the reference. Single reference is shared by both the caller and the function being called. Any changes to the reference or the Object&apos;s data are reflected in the caller&apos;s scope.\n&lt;a href=&quot;https://i.stack.imgur.com/SHXkC.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SHXkC.png&quot; alt=&quot;Pass by reference&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 4&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I have seen posts on this topic which describe the low level implementation of parameter passing in Java, which I think is great and very helpful because it makes an abstract idea concrete. However, to me the question is more about &lt;strong&gt;the behavior described in the language specification&lt;/strong&gt; than about the technical implementation of the behavior. This is an exerpt from the &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1&quot; rel=&quot;noreferrer&quot;&gt;Java Language Specification, section 8.4.1&lt;/a&gt; :&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When the method or constructor is invoked (§15.12), &lt;strong&gt;the values of the\n  actual argument expressions initialize newly created parameter\n  variables, each of the declared type, before execution of the body of\n  the method or constructor.&lt;/strong&gt; The Identifier that appears in the\n  DeclaratorId may be used as a simple name in the body of the method or\n  constructor to refer to the formal parameter.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Which means, java creates a copy of the passed parameters before executing a method. Like most people who studied compilers in college, I used &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201100886&quot; rel=&quot;noreferrer&quot;&gt;&quot;The Dragon Book&quot;&lt;/a&gt; which is &lt;strong&gt;THE&lt;/strong&gt; compilers book. It has a good description of &quot;Call-by-value&quot; and &quot;Call-by-Reference&quot; in Chapter 1. The Call-by-value description matches up with Java Specs exactly.&lt;/p&gt;\n\n&lt;p&gt;Back when I studied compilers-in the 90&apos;s, I used the first edition of the book from 1986 which pre-dated Java by about 9 or 10 years. However, I just ran across a copy of the &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B009TGD06W&quot; rel=&quot;noreferrer&quot;&gt;2nd Eddition&lt;/a&gt; from 2007 &lt;strong&gt;which actually mentions Java!&lt;/strong&gt; Section 1.6.6 labeled &quot;Parameter Passing Mechanisms&quot; describes parameter passing pretty nicely. Here is an excerpt under the heading &quot;Call-by-value&quot; which mentions Java:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In call-by-value, the actual parameter is evaluated (if it is an\n  expression) or copied (if it is a variable). The value is placed in\n  the location belonging to the corresponding formal parameter of the\n  called procedure. &lt;strong&gt;This method is used in C and Java, and is a common\n  option in C++ , as well as in most other languages.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Java is a pass by value(stack memory)&lt;/p&gt;\n&lt;p&gt;How it works&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Let&apos;s first understand that where java stores primitive data type and object data type.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Primitive data types itself and object references are stored in the stack.\nObjects themselves are stored in the heap.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It means, Stack memory stores primitive data types and also the\naddresses of objects.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And you always pass a copy of the bits of the value of the reference.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it&apos;s a primitive data type then these copied bits contain the value of the primitive data type itself, That&apos;s why when we change the value of argument inside the method then it does not reflect the changes outside.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it&apos;s an object data type like &lt;strong&gt;Foo foo=new Foo()&lt;/strong&gt; then in this case copy of the address of the object passes like file shortcut  , suppose we have a text file &lt;strong&gt;abc.txt&lt;/strong&gt; at &lt;strong&gt;C:\\desktop&lt;/strong&gt; and suppose we make shortcut of the same file and put this inside &lt;strong&gt;C:\\desktop\\abc-shortcut&lt;/strong&gt; so when you access the file from &lt;strong&gt;C:\\desktop\\abc.txt&lt;/strong&gt; and write &lt;strong&gt;&apos;Stack Overflow&apos;&lt;/strong&gt; and close the file and again you open the file from shortcut then you write &lt;strong&gt;&apos; is the largest online community for programmers to learn&apos;&lt;/strong&gt; then total file change will be &lt;strong&gt;&apos;Stack Overflow is the largest online community for programmers to learn&apos;&lt;/strong&gt; which means it doesn&apos;t matter from where you open the file , each time we were accessing the same file , here we can assume &lt;strong&gt;Foo&lt;/strong&gt; as a file and suppose foo stored at &lt;strong&gt;123hd7h&lt;/strong&gt;(original address like &lt;strong&gt;C:\\desktop\\abc.txt&lt;/strong&gt; ) address and &lt;strong&gt;234jdid&lt;/strong&gt;(copied address like &lt;strong&gt;C:\\desktop\\abc-shortcut&lt;/strong&gt; which actually contains the original address of the file inside) ..\nSo for better understanding make shortcut file and feel.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;A reference is always a value when represented, no matter what language you use.&lt;/h2&gt;\n\n&lt;p&gt;Getting an outside of the box view, let&apos;s look at Assembly or some low level memory management. At the CPU level a &lt;em&gt;reference&lt;/em&gt; to anything immediately becomes a &lt;em&gt;value&lt;/em&gt; if it gets written to memory or to one of the CPU registers. (That is why &lt;em&gt;pointer&lt;/em&gt; is a good definition. It is a value, which has a purpose at the same time).&lt;/p&gt;\n\n&lt;p&gt;Data in memory has a &lt;strong&gt;Location&lt;/strong&gt; and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a &lt;strong&gt;Name&lt;/strong&gt; to certain &lt;strong&gt;Location&lt;/strong&gt; (aka variable), but when compiling the code, the assembler simply replaces &lt;strong&gt;Name&lt;/strong&gt; with the designated location just like your browser replaces domain names with IP addresses.&lt;/p&gt;\n\n&lt;p&gt;Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value).&lt;/p&gt;\n\n&lt;p&gt;Lets say we have a variable Foo, its &lt;strong&gt;Location&lt;/strong&gt; is at the 47th byte in memory and its &lt;strong&gt;Value&lt;/strong&gt; is 5. We have another variable &lt;strong&gt;Ref2Foo&lt;/strong&gt; which is at 223rd byte in memory, and its value will be 47. This Ref2Foo might be a technical variable, not explicitly created by the program. If you just look at 5 and 47 without any other information, you will see just two &lt;strong&gt;Values&lt;/strong&gt;.\nIf you use them as references then to reach to &lt;code&gt;5&lt;/code&gt; we have to travel:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;(Name)[Location] -&amp;gt; [Value at the Location]\n---------------------\n(Ref2Foo)[&lt;span class=&quot;hljs-number&quot;&gt;223&lt;/span&gt;]  -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;\n(Foo)[&lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;]       -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is how jump-tables work. &lt;/p&gt;\n\n&lt;p&gt;If we want to call a method/function/procedure with Foo&apos;s value, there are a few possible way to pass the variable to the method, depending on the &lt;strong&gt;language&lt;/strong&gt; and its several method invocation modes:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;5 gets copied to one of the CPU registers (ie. EAX).&lt;/li&gt;\n&lt;li&gt;5 gets PUSHd to the stack.&lt;/li&gt;\n&lt;li&gt;47 gets copied to one of the CPU registers&lt;/li&gt;\n&lt;li&gt;47 PUSHd to the stack.&lt;/li&gt;\n&lt;li&gt;223 gets copied to one of the CPU registers.&lt;/li&gt;\n&lt;li&gt;223 gets PUSHd to the stack.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In every cases above a value - a &lt;strong&gt;copy&lt;/strong&gt; of an existing value - has been created, it is now upto the receiving method to handle it. When you write &quot;Foo&quot; inside the method, it is either read out from EAX, or automatically  &lt;strong&gt;dereferenced&lt;/strong&gt;, or double dereferenced, the process depends on how the language works and/or what the type of Foo dictates. This is hidden from the developer until she circumvents the dereferencing process. So a &lt;em&gt;reference&lt;/em&gt; is a &lt;em&gt;value&lt;/em&gt; when represented, because a reference is a value that has to be processed (at language level).&lt;/p&gt;\n\n&lt;p&gt;Now we have passed Foo to the method:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;in case 1. and 2. if you change Foo (&lt;code&gt;Foo = 9&lt;/code&gt;) it only affects local scope as you have a copy of the Value. From inside the method we cannot even determine where in memory the original Foo was located.&lt;/li&gt;\n&lt;li&gt;in case 3. and 4. if you use default language constructs and change Foo (&lt;code&gt;Foo = 11&lt;/code&gt;), it could change Foo globally (depends on the language, ie. Java or like Pascal&apos;s &lt;code&gt;procedure findMin(x, y, z: integer;&lt;/code&gt;&lt;strong&gt;var m&lt;/strong&gt;&lt;code&gt;: integer);&lt;/code&gt;). However if the language allows you to circumvent the dereference process, you can change &lt;code&gt;47&lt;/code&gt;, say to &lt;code&gt;49&lt;/code&gt;. At that point Foo seems to have been changed if you read it, because you have changed the &lt;strong&gt;local pointer&lt;/strong&gt; to it. And if you were to modify this Foo inside the method (&lt;code&gt;Foo = 12&lt;/code&gt;) you will probably FUBAR the execution of the program (aka. segfault) because you will write to a different memory than expected, you can even modify an area that is destined to hold executable program and writing to it will modify running code (Foo is now not at &lt;code&gt;47&lt;/code&gt;). BUT Foo&apos;s value of &lt;code&gt;47&lt;/code&gt; did not change globally, only the one inside the method, because &lt;code&gt;47&lt;/code&gt; was also a copy to the method.&lt;/li&gt;\n&lt;li&gt;in case 5. and 6. if you modify &lt;code&gt;223&lt;/code&gt; inside the method it creates the same mayhem as in 3. or 4. (a pointer, pointing to a now bad value, that is again used as a pointer) but this is still a local problem, as 223 was &lt;strong&gt;copied&lt;/strong&gt;. However if you are able to dereference &lt;code&gt;Ref2Foo&lt;/code&gt; (that is &lt;code&gt;223&lt;/code&gt;), reach to and modify the pointed value &lt;code&gt;47&lt;/code&gt;, say, to &lt;code&gt;49&lt;/code&gt;, it will affect Foo &lt;strong&gt;globally&lt;/strong&gt;, because in this case the methods got a copy of &lt;code&gt;223&lt;/code&gt;  but the referenced &lt;code&gt;47&lt;/code&gt; exists only once, and changing that to &lt;code&gt;49&lt;/code&gt; will lead every &lt;code&gt;Ref2Foo&lt;/code&gt; double-dereferencing to a wrong value.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only &lt;em&gt;pass-by-reference&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Strict &lt;em&gt;pass-by-value&lt;/em&gt; is also useless, it would mean that a 100 Mbyte array should have to be copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller&apos;s view) and a few languages allows to modify the Value of the reference itself.&lt;/p&gt;\n\n&lt;p&gt;So in short and in Java&apos;s own terminology, Java is &lt;em&gt;pass-by-value&lt;/em&gt; where &lt;em&gt;value&lt;/em&gt; can be: either a &lt;strong&gt;real value&lt;/strong&gt; or a &lt;strong&gt;value&lt;/strong&gt; that is a representation of a &lt;strong&gt;reference&lt;/strong&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In Java, method arguments are all passed by value :&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Java arguments are &lt;strong&gt;all passed by value&lt;/strong&gt; (the value  or reference is copied when used by the method) :&lt;/p&gt;\n&lt;p&gt;In the case of primitive types, Java behaviour is simple:\nThe value is copied in another instance of the primitive type.&lt;/p&gt;\n&lt;p&gt;In case of Objects, this is the same:\nObject variables are references (mem buckets holding only Objects &lt;strong&gt;address&lt;/strong&gt; instead of a primitive value) that was created using the &quot;new&quot; keyword, and are copied like primitive types.&lt;/p&gt;\n&lt;p&gt;The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object).\nObject&apos;s &lt;strong&gt;content/members&lt;/strong&gt; might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference.&lt;/p&gt;\n&lt;p&gt;&quot;String&quot; Objects appear to be a good &lt;strong&gt;counter-example&lt;/strong&gt; to the urban legend saying that &quot;Objects are passed by reference&quot;:&lt;/p&gt;\n&lt;p&gt;In effect, using a method, you will never be able, to update the value of a String passed as argument:&lt;/p&gt;\n&lt;p&gt;A String Object, holds characters by an array declared &lt;strong&gt;final&lt;/strong&gt; that can&apos;t be modified.\nOnly the address of the Object might be replaced by another using &quot;new&quot;.\nUsing &quot;new&quot; to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.&lt;/p&gt;\n    ","\n&lt;p&gt;As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(StringBuffer s1, StringBuffer s2)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s1;\n    s1 = s2;\n    s2 = temp;\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;);\n    swap(s1, s2);\n    System.out.println(s1);\n    System.out.println(s2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendWorld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(StringBuffer s1)&lt;/span&gt; {\n    s1.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot; World&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    appendWorld(s);\n    System.out.println(s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendWorld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s)&lt;/span&gt;{\n    s = s+&lt;span class=&quot;hljs-string&quot;&gt;&quot; World&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    appendWorld(s);\n    System.out.println(s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However you could make a wrapper for String like this which would make it able to use it with Strings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringWrapper&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String value;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;StringWrapper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.value = value;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendWorld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(StringWrapper s)&lt;/span&gt;{\n    s.value = s.value +&lt;span class=&quot;hljs-string&quot;&gt;&quot; World&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringWrapper&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    appendWorld(s);\n    System.out.println(s.value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit: i believe this is also the reason to use StringBuffer when it comes to &quot;adding&quot; two Strings because you can modifie the original object which u can&apos;t with immutable objects like String is.&lt;/p&gt;\n    ","\n&lt;p&gt;No, it&apos;s not pass by reference.&lt;/p&gt;\n\n&lt;p&gt;Java is pass by value according to the Java Language Specification:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When the method or constructor is invoked (§15.12), &lt;strong&gt;the values of the actual argument expressions initialize newly created parameter variables&lt;/strong&gt;, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.1&quot; rel=&quot;noreferrer&quot;&gt;formal parameter&lt;/a&gt;. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference&lt;/p&gt;\n\n&lt;p&gt;/**&lt;/p&gt;\n\n&lt;p&gt;Pass By Value&lt;/p&gt;\n\n&lt;p&gt;In Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller.&lt;/p&gt;\n\n&lt;p&gt;*/&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueString&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueString&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;valueflag&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(value, valueflag);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;value&apos; and &apos;valueflag&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value : &quot;&lt;/span&gt; + value);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;valueflag : &quot;&lt;/span&gt; + valueflag);\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value, &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; valueflag)&lt;/span&gt; {\n        value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;;\n        valueflag = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nvalue : Nikhil\nvalueflag : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;/**\n * \n * Pass By Value\n *\n */&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueNewString&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueNewString&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;valueflag&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(value, valueflag);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;value&apos; and &apos;valueflag&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value : &quot;&lt;/span&gt; + value);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;valueflag : &quot;&lt;/span&gt; + valueflag);\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value, &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; valueflag)&lt;/span&gt; {\n        value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;;\n        valueflag = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nvalue : Nikhil\nvalueflag : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;/**\n  This &apos;Pass By Value has a feeling of &apos;Pass By Reference&apos;&lt;/p&gt;\n\n&lt;p&gt;Some people say primitive types and &apos;String&apos; are &apos;pass by value&apos;\n  and objects are &apos;pass by reference&apos;.&lt;/p&gt;\n\n&lt;p&gt;But from this example, we can understand that it is infact pass by value only,\n  keeping in mind that here we are passing the reference as the value.\n  ie: reference is passed by value.\n  That&apos;s why are able to change and still it holds true after the local scope.\n  But we cannot change the actual reference outside the original scope.\n  what that means is demonstrated by next example of PassByValueObjectCase2.&lt;/p&gt;\n\n&lt;p&gt;*/&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase1&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n        String name;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id, String name)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; id;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        }\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Student [id=&quot;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, name=&quot;&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase1&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(student);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;student&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;student : &quot;&lt;/span&gt; + student);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Student student)&lt;/span&gt; {\n        student.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nstudent : Student [id=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, name=Anand]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;/**&lt;/p&gt;\n\n&lt;p&gt;In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope.&quot;&lt;/p&gt;\n\n&lt;p&gt;Note: I am not pasting the code for &lt;code&gt;private class Student&lt;/code&gt;. The class definition for &lt;code&gt;Student&lt;/code&gt; is same as Example3.&lt;/p&gt;\n\n&lt;p&gt;*/&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase2&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase2&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// student has the actual reference to a Student object created&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// can we change this actual reference outside the local scope? Let&apos;s see&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(student);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;student&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;student : &quot;&lt;/span&gt; + student); &lt;span class=&quot;hljs-comment&quot;&gt;// Will it print Nikhil or Anand?&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Student student)&lt;/span&gt; {\n        student = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nstudent : Student [id=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, name=Nikhil]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I thought I&apos;d contribute this answer to add more details from the Specifications.&lt;/p&gt;\n&lt;p&gt;First, &lt;a href=&quot;https://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value&quot;&gt;What&apos;s the difference between passing by reference vs. passing by value?&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Passing by reference means the called functions&apos; parameter will be the\nsame as the callers&apos; passed argument (not the value, but the identity&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the variable itself).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Pass by value means the called functions&apos; parameter will be a copy of\nthe callers&apos; passed argument.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Or from wikipedia, &lt;a href=&quot;http://en.wikipedia.org/wiki/Call_by_reference#Call_by_reference&quot; rel=&quot;nofollow noreferrer&quot;&gt;on the subject of pass-by-reference&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In call-by-reference evaluation (also referred to as\npass-by-reference), a function receives an implicit reference to a\nvariable used as argument, rather than a copy of its value. This\ntypically means that the function can modify (i.e. assign to) the\nvariable used as argumentsomething that will be seen by its caller.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And &lt;a href=&quot;http://en.wikipedia.org/wiki/Call_by_value#Call_by_value&quot; rel=&quot;nofollow noreferrer&quot;&gt;on the subject of pass-by-value&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In call-by-value, the argument expression is evaluated, and the\nresulting value is bound to the corresponding variable in the function [...].\nIf the function or procedure is able to assign values to its\nparameters, only its local copy is assigned [...].&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Second, we need to know what Java uses in its method invocations. The &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Language Specification&lt;/a&gt; states&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;When the method or constructor is invoked (§15.12), &lt;strong&gt;the values of the\nactual argument expressions initialize newly created parameter\nvariables&lt;/strong&gt;, each of the declared type, before execution of the body of\nthe method or constructor.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So it assigns (or binds) the value of the argument to the corresponding parameter variable.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;What is the value of the argument?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s consider reference types, the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.4&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Virtual Machine Specification&lt;/a&gt; states&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There are three kinds of &lt;strong&gt;reference types&lt;/strong&gt;: class types, array types,\nand interface types. &lt;strong&gt;Their values are references to dynamically\ncreated class instances, arrays, or class instances or arrays that\nimplement interfaces, respectively.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Language Specification&lt;/a&gt; also states&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;The reference values (often just references) are pointers to these objects&lt;/strong&gt;, and a special null reference, which refers to no object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (&lt;code&gt;new ...&lt;/code&gt;) all resolve to a reference type value.&lt;/p&gt;\n&lt;p&gt;So&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String param)&lt;/span&gt; {}\n...\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ref&quot;&lt;/span&gt;);\nmethod(variable);\nmethod(variable.toString());\nmethod(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ref&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;all bind the value of a reference to a &lt;code&gt;String&lt;/code&gt; instance to the method&apos;s newly created parameter, &lt;code&gt;param&lt;/code&gt;. This is exactly what the definition of pass-by-value describes. As such, &lt;strong&gt;Java is pass-by-value&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation.&lt;/strong&gt; The definition of pass-by-reference was&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This typically means that the function can modify (i.e. assign to) the\nvariable used as argumentsomething that will be seen by its caller.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. &lt;strong&gt;Modifying the object referenced by the variable is a different concept entirely.&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Primitive values are also defined in the Java Virtual Machine Specification, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.3&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;. The value of the type is the corresponding integral or floating point value, encoded appropriately (8, 16, 32, 64, etc. bits).&lt;/p&gt;\n    ","\n&lt;p&gt;You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; arg1, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; arg2)&lt;/span&gt; {\n    arg1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    arg2 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y;\n    getValues(x, y);\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Result: &quot;&lt;/span&gt; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sometimes you want to use the same pattern in Java, but you can&apos;t; at least not directly. Instead you could do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arg1, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arg2)&lt;/span&gt; {\n    arg1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    arg2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] x = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] y = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    getValues(x, y);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result: &quot;&lt;/span&gt; + x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + y[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As was explained in previous answers, in Java you&apos;re passing a pointer to the array as a value into &lt;code&gt;getValues&lt;/code&gt;. That is enough, because the method then modifies the array element, and by convention you&apos;re expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn&apos;t necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.&lt;/p&gt;\n    ","\n&lt;p&gt;The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.&lt;/p&gt;\n    ","\n&lt;p&gt;As many people mentioned it before, &lt;a href=&quot;http://academic.regis.edu/dbahr/GeneralPages/IntroToProgramming/JavaPassByValue.htm&quot; rel=&quot;noreferrer&quot;&gt;Java is always pass-by-value&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is another example that will help you understand the difference (&lt;a href=&quot;http://www.javaranch.com/campfire/StoryPassBy.jsp&quot; rel=&quot;noreferrer&quot;&gt;the classic swap example&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Before: a = &quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, b = &quot;&lt;/span&gt; + b);\n    swap(a,b);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After: a = &quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, b = &quot;&lt;/span&gt; + b);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer iA, Integer iB)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iA;\n    iA = iB;\n    iB = tmp;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Prints:  &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Before: a = 2, b = 3&lt;br&gt;\n  After: a = 2, b = 3&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.&lt;/p&gt;\n    ","\n&lt;p&gt;I always think of it as &quot;pass by copy&quot;. It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByCopy&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog d)&lt;/span&gt;{\n        d.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Fido&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Maxx&quot;&lt;/span&gt;);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name= &quot;&lt;/span&gt;+ d.name);\n        changeName(d);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name= &quot;&lt;/span&gt;+ d.name);\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String name;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = s;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output of java PassByCopy:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;name= Maxx&lt;br&gt;\n  name= Fido&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Primitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.&lt;/p&gt;\n    ","\n&lt;p&gt;Unlike some other languages, Java does not allow you to choose between pass-by-value and pass-by-referenceall arguments are passed by value. A method call can pass two types of values to a methodcopies of primitive values (e.g., values of int and double) and copies of references to objects.&lt;/p&gt;\n\n&lt;p&gt;When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method.&lt;/p&gt;\n\n&lt;p&gt;When it comes to objects, objects themselves cannot be passed to methods. So we pass the reference(address) of the object. We can manipulate the original object using this reference.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How Java creates and stores objects:&lt;/strong&gt; When we create an object we store the objects address in a reference variable. Let&apos;s analyze the following statement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;account1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Account&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Account account1 is the type and name of the reference variable, = is the assignment operator, new asks for the required amount of space from the system. The constructor to the right of keyword new which creates the object is called implicitly by the keyword new. Address of the created object(result of right value, which is an expression called &quot;class instance creation expression&quot;) is assigned to the left value (which is a reference variable with a name and a type specified) using the assign operator.&lt;/p&gt;\n\n&lt;p&gt;Although an objects reference is passed by value, a method can still interact with the referenced object by calling its public methods using the copy of the objects reference. Since the reference stored in the parameter is a copy of the reference that was passed as an argument, the parameter in the called method and the argument in the calling method refer to the same object in memory.&lt;/p&gt;\n\n&lt;p&gt;Passing references to arrays, instead of the array objects themselves, makes sense for performance reasons. Because everything in Java is passed by value, if array objects were passed,\na copy of each element would be passed. For large arrays, this would waste time and consume\nconsiderable storage for the copies of the elements.&lt;/p&gt;\n\n&lt;p&gt;In the image below you can see we have two reference variables(These are called pointers in C/C++, and I think that term makes it easier to understand this feature.) in the main method. Primitive and reference variables are kept in stack memory(left side in images below). array1 and array2 reference variables &quot;point&quot; (as C/C++ programmers call it) or reference to a and b arrays respectively, which are objects (values these reference variables hold are addresses of objects) in heap memory (right side in images below).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/sF7QZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/sF7QZ.png&quot; alt=&quot;Pass by value example 1&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If we pass the value of array1 reference variable as an argument to the reverseArray method, a reference variable is created in the method and that reference variable starts pointing to the same array (a). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reverseArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1 = { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; };\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array2 = { &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; };\n\n        reverseArray(array1);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/W1wgZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/W1wgZ.png&quot; alt=&quot;Pass by value example 2&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So, if we say &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;array1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in reverseArray method, it will make a change in array a.&lt;/p&gt;\n\n&lt;p&gt;We have another reference variable in reverseArray method (array2) that points to an array c. If we were to say &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;array1 = array2;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in reverseArray method, then the reference variable array1 in method reverseArray would stop pointing to array a and start pointing to array c (Dotted line in second image).&lt;/p&gt;\n\n&lt;p&gt;If we return value of reference variable array2 as the return value of method reverseArray and assign this value to reference variable array1 in main method, array1 in main will start pointing to array c.&lt;/p&gt;\n\n&lt;p&gt;So let&apos;s write all the things we have done at once now.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] reverseArray(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array2 = { -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n\n        array1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// array a becomes 5, 10, -7&lt;/span&gt;\n\n        array1 = array2; &lt;span class=&quot;hljs-comment&quot;&gt;/* array1 of reverseArray starts\n          pointing to c instead of a (not shown in image below) */&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array2;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1 = { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; };\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array2 = { &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; };\n\n        array1 = reverseArray(array1); &lt;span class=&quot;hljs-comment&quot;&gt;/* array1 of \n         main starts pointing to c instead of a */&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/5hRyX.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5hRyX.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And now that reverseArray method is over, its reference variables(array1 and array2) are gone. Which means we now only have the two reference variables in main method array1 and array2 which point to c and b arrays respectively. No reference variable is pointing to object (array) a. So it is eligible for garbage collection.&lt;/p&gt;\n\n&lt;p&gt;You could also assign value of array2 in main to array1. array1 would start pointing to b.&lt;/p&gt;\n    ","\n&lt;p&gt;Java has only pass by value. A very simple example to validate this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    init(obj);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//After calling init method, obj still points to null&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//this is because obj is passed as value and not as reference.&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(MyClass objVar)&lt;/span&gt; {\n    objVar = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To make a long story short, &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; objects have some very peculiar properties.&lt;/p&gt;\n\n&lt;p&gt;In general, Java has primitive types (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc) that are passed directly by value. Then Java has objects (everything that derives from &lt;code&gt;java.lang.Object&lt;/code&gt;). Objects are actually always handled through a reference (a reference being a pointer that you can&apos;t touch). That means that in effect, objects are passed by reference, as the references are normally not interesting. It does however mean that you cannot change which object is pointed to as the reference itself is passed by value.&lt;/p&gt;\n\n&lt;p&gt;Does this sound strange and confusing? Let&apos;s consider how C implements pass by reference and pass by value. In C, the default convention is pass by value. &lt;code&gt;void foo(int x)&lt;/code&gt; passes an int by value. &lt;code&gt;void foo(int *x)&lt;/code&gt; is a function that does not want an &lt;code&gt;int a&lt;/code&gt;, but a pointer to an int: &lt;code&gt;foo(&amp;amp;a)&lt;/code&gt;. One would use this with the &lt;code&gt;&amp;amp;&lt;/code&gt; operator to pass a variable address.&lt;/p&gt;\n\n&lt;p&gt;Take this to C++, and we have references. References are basically (in this context) syntactic sugar that hide the pointer part of the equation: &lt;code&gt;void foo(int &amp;amp;x)&lt;/code&gt; is called by &lt;code&gt;foo(a)&lt;/code&gt;, where the compiler itself knows that it is a reference and the address of the non-reference &lt;code&gt;a&lt;/code&gt; should be passed. In Java, all variables referring to objects are actually of reference type, in effect forcing call by reference for most intends and purposes without the fine grained control (and complexity) afforded by, for example, C++.&lt;/p&gt;\n    ","\n&lt;p&gt;I have created a thread devoted to these kind of questions for &lt;em&gt;any&lt;/em&gt; programming languages &lt;a href=&quot;https://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value#2028&quot;&gt;Java is also mentioned&lt;/a&gt;. Here is the short summary:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Java passes it parameters by value&lt;/li&gt;\n&lt;li&gt;&quot;by value&quot; is the only way in java to pass a parameter to a method&lt;/li&gt;\n&lt;li&gt;using methods from the object given as parameter will alter the\nobject as the references point to\nthe original objects. (if that\nmethod itself alters some values)&lt;/li&gt;\n&lt;/ul&gt;\n    "],"27":["\n&lt;p&gt;&lt;strong&gt;Data Storage&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Specify the &lt;code&gt;utf8mb4&lt;/code&gt; character set on all tables and text columns in your database.  This makes MySQL physically store and retrieve values encoded natively in UTF-8.  Note that MySQL will implicitly use &lt;code&gt;utf8mb4&lt;/code&gt; encoding if a &lt;code&gt;utf8mb4_*&lt;/code&gt; collation is specified (without any explicit character set).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In older versions of MySQL (&amp;lt; 5.5.3), you&apos;ll unfortunately be forced to use simply &lt;code&gt;utf8&lt;/code&gt;, which only supports a subset of Unicode characters.  I wish I were kidding.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Data Access&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In your application code (e.g. PHP), in whatever DB access method you use, you&apos;ll need to set the connection charset to &lt;code&gt;utf8mb4&lt;/code&gt;.  This way, MySQL does no conversion from its native UTF-8 when it hands data off to your application and vice versa.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Some drivers provide their own mechanism for configuring the connection character set, which both updates its own internal state and informs MySQL of the encoding to be used on the connectionthis is usually the preferred approach.   In PHP:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re using the &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; abstraction layer with PHP  5.3.6, you can specify &lt;code&gt;charset&lt;/code&gt; in the &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot; rel=&quot;noreferrer&quot;&gt;DSN&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:charset=utf8mb4&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re using &lt;a href=&quot;http://www.php.net/manual/en/book.mysqli.php&quot; rel=&quot;noreferrer&quot;&gt;mysqli&lt;/a&gt;, you can call &lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;set_charset()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8mb4&apos;&lt;/span&gt;);       &lt;span class=&quot;hljs-comment&quot;&gt;// object oriented style&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8mb4&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// procedural style&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re stuck with plain &lt;a href=&quot;http://php.net/manual/en/book.mysql.php&quot; rel=&quot;noreferrer&quot;&gt;mysql&lt;/a&gt; but happen to be running PHP  5.2.3, you can call &lt;a href=&quot;http://php.net/manual/en/function.mysql-set-charset.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_set_charset&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the driver does not provide its own mechanism for setting the connection character set, you may have to issue a query to tell MySQL how your application expects data on the connection to be encoded: &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-connection.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SET NAMES &apos;utf8mb4&apos;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The same consideration regarding &lt;code&gt;utf8mb4&lt;/code&gt;/&lt;code&gt;utf8&lt;/code&gt; applies as above.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;UTF-8 should be set in the HTTP header, such as &lt;code&gt;Content-Type: text/html; charset=utf-8&lt;/code&gt;. You can achieve that either by setting &lt;a href=&quot;http://www.php.net/manual/en/ini.core.php#ini.default-charset&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;default_charset&lt;/code&gt;&lt;/a&gt; in php.ini (preferred), or manually using &lt;code&gt;header()&lt;/code&gt; function.&lt;/li&gt;\n&lt;li&gt;If your application transmits text to other systems, they will also need to be informed of the character encoding.  With web applications, the browser must be informed of the encoding in which data is sent (through HTTP response headers or &lt;a href=&quot;https://stackoverflow.com/q/4696499&quot;&gt;HTML metadata&lt;/a&gt;).&lt;/li&gt;\n&lt;li&gt;When encoding the output using &lt;code&gt;json_encode()&lt;/code&gt;, add &lt;code&gt;JSON_UNESCAPED_UNICODE&lt;/code&gt; as a second parameter.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Browsers will submit data in the character set specified for the document, hence nothing particular has to be done on the input.&lt;/li&gt;\n&lt;li&gt;In case you have doubts about request encoding (in case it could be tampered with), you may verify every received string as being valid UTF-8 before you try to store it or use it anywhere.  PHP&apos;s &lt;a href=&quot;http://php.net/manual/en/function.mb-check-encoding.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mb_check_encoding()&lt;/code&gt;&lt;/a&gt; does the trick, but you have to use it religiously.  There&apos;s really no way around this, as malicious clients can submit data in whatever encoding they want, and I haven&apos;t found a trick to get PHP to do this for you reliably.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Other Code Considerations&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Obviously enough, all files you&apos;ll be serving (PHP, HTML, JavaScript, etc.) should be encoded in valid UTF-8.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You need to make sure that every time you process a UTF-8 string, you do so safely.  This is, unfortunately, the hard part.  You&apos;ll probably want to make extensive use of PHP&apos;s &lt;a href=&quot;http://www.php.net/manual/en/book.mbstring.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mbstring&lt;/code&gt;&lt;/a&gt; extension.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;PHP&apos;s built-in string operations are &lt;em&gt;not&lt;/em&gt; by default UTF-8 safe.&lt;/strong&gt;  There are some things you can safely do with normal PHP string operations (like concatenation), but for most things you should use the equivalent &lt;code&gt;mbstring&lt;/code&gt; function.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To know what you&apos;re doing (read: not mess it up), you really need to know UTF-8 and how it works on the lowest possible level.  Check out any of the links from &lt;a href=&quot;http://www.utf8.com/&quot; rel=&quot;noreferrer&quot;&gt;utf8.com&lt;/a&gt; for some good resources to learn everything you need to know.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I&apos;d like to add one thing to &lt;a href=&quot;https://stackoverflow.com/questions/279170/utf-8-all-the-way-through#279279&quot;&gt;chazomaticus&apos; excellent answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t forget the META tag either (like this, or &lt;a href=&quot;http://www.w3.org/International/questions/qa-html-encoding-declarations#quicklookup&quot; rel=&quot;noreferrer&quot;&gt;the HTML4 or XHTML version of it&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That seems trivial, but IE7 has given me problems with that before.&lt;/p&gt;\n\n&lt;p&gt;I was doing everything right; the database, database connection and Content-Type HTTP header were all set to UTF-8, and it worked fine in all other browsers, but Internet Explorer still insisted on using the &quot;Western European&quot; encoding.&lt;/p&gt;\n\n&lt;p&gt;It turned out the page was missing the META tag. Adding that solved the problem.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The W3C actually has a rather large &lt;a href=&quot;http://www.w3.org/International/&quot; rel=&quot;noreferrer&quot;&gt;section dedicated to I18N&lt;/a&gt;. They have a number of articles related to this issue  describing the HTTP, (X)HTML and CSS side of things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/International/questions/qa-changing-encoding&quot; rel=&quot;noreferrer&quot;&gt;FAQ: Changing (X)HTML page encoding to UTF-8&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/International/questions/qa-html-encoding-declarations&quot; rel=&quot;noreferrer&quot;&gt;Declaring character encodings in HTML&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/International/tutorials/tutorial-char-enc/&quot; rel=&quot;noreferrer&quot;&gt;Tutorial: Character sets &amp;amp; encodings in XHTML, HTML and CSS&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/International/O-HTTP-charset&quot; rel=&quot;noreferrer&quot;&gt;Setting the HTTP charset parameter&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;They recommend using both the HTTP header and HTML meta tag (or XML declaration in case of XHTML served as XML).&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to setting &lt;code&gt;default_charset&lt;/code&gt; in php.ini, you can send the correct charset using &lt;code&gt;header()&lt;/code&gt; from within your code, before any output:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Type: text/html; charset=utf-8&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Working with Unicode in PHP is easy as long as you realize that most of the &lt;strong&gt;string functions don&apos;t work with Unicode, and some might mangle strings completely&lt;/strong&gt;. PHP considers &quot;characters&quot; to be 1 byte long. Sometimes this is okay (for example, &lt;a href=&quot;https://www.php.net/manual/en/function.explode.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;explode()&lt;/a&gt; only looks for a byte sequence and uses it as a separator -- so it doesn&apos;t matter what actual characters you look for). But other times, when the function is actually designed to work on &lt;em&gt;characters&lt;/em&gt;, PHP has no idea that your text has multi-byte characters that are found with Unicode.&lt;/p&gt;\n&lt;p&gt;A good library to check into is &lt;a href=&quot;http://phputf8.sourceforge.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;phputf8&lt;/a&gt;. This rewrites all of the &quot;bad&quot; functions so you can safely work on UTF8 strings. There are extensions like the &lt;a href=&quot;https://www.php.net/manual/en/book.mbstring.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;mb_string&lt;/a&gt; extension that try to do this for you, too, but I prefer using the library because it&apos;s more portable (but I write mass-market products, so that&apos;s important for me). But phputf8 can use mb_string behind the scenes, anyway, to increase performance.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This answer applies to PHP 5.3.5 and lower. Do not use it for PHP version 5.3.6 (released in March 2011) or later.&lt;/p&gt;\n&lt;p&gt;Compare with &lt;a href=&quot;https://stackoverflow.com/a/21373793/367456&quot;&gt;Palec&apos;s answer to &lt;em&gt;PDO + MySQL and broken UTF-8 encoding&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;I found an issue with someone using &lt;a href=&quot;https://en.wikipedia.org/wiki/PHP#Development_and_community&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDO&lt;/a&gt; and the answer was to use this for the PDO connection string:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=mysql.example.com;dbname=example_db&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;MYSQL_ATTR_INIT_COMMAND&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SET NAMES utf8&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In my case, I was using &lt;code&gt;mb_split&lt;/code&gt;, which uses regular expressions.  Therefore I also had to manually make sure the regular expression  encoding was UTF-8 by doing &lt;code&gt;mb_regex_encoding(&apos;UTF-8&apos;);&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;As a side note, I also discovered by running &lt;code&gt;mb_internal_encoding()&lt;/code&gt; that the internal encoding wasn&apos;t UTF-8, and I changed that by running &lt;code&gt;mb_internal_encoding(&quot;UTF-8&quot;);&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;First of all, if you are in PHP before 5.3 then no. You&apos;ve got a ton of problems to tackle.&lt;/p&gt;\n&lt;p&gt;I am surprised that none has mentioned the &lt;a href=&quot;http://php.net/intl&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;intl&lt;/strong&gt;&lt;/a&gt; library, the one that has good support for &lt;strong&gt;Unicode&lt;/strong&gt;, &lt;strong&gt;graphemes&lt;/strong&gt;, &lt;strong&gt;string operations&lt;/strong&gt;, &lt;strong&gt;localisation&lt;/strong&gt; and many more, see below.&lt;/p&gt;\n&lt;p&gt;I will quote some information about Unicode support in PHP by &lt;strong&gt;Elizabeth Smith&apos;s&lt;/strong&gt; &lt;a href=&quot;http://www.slideshare.net/auroraeosrose/using-unicode-with-php&quot; rel=&quot;nofollow noreferrer&quot;&gt;slides&lt;/a&gt; at &lt;strong&gt;PHPBenelux&apos;14&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;&lt;strong&gt;INTL&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;Good:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Wrapper around ICU library&lt;/li&gt;\n&lt;li&gt;Standardised locales, set locale per script&lt;/li&gt;\n&lt;li&gt;Number formatting&lt;/li&gt;\n&lt;li&gt;Currency formatting&lt;/li&gt;\n&lt;li&gt;Message formatting (replaces gettext)&lt;/li&gt;\n&lt;li&gt;Calendars, dates, time zone and time&lt;/li&gt;\n&lt;li&gt;Transliterator&lt;/li&gt;\n&lt;li&gt;Spoofchecker&lt;/li&gt;\n&lt;li&gt;Resource bundles&lt;/li&gt;\n&lt;li&gt;Convertors&lt;/li&gt;\n&lt;li&gt;IDN support&lt;/li&gt;\n&lt;li&gt;Graphemes&lt;/li&gt;\n&lt;li&gt;Collation&lt;/li&gt;\n&lt;li&gt;Iterators&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Bad:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Does not support zend_multibyte&lt;/li&gt;\n&lt;li&gt;Does not support HTTP input output conversion&lt;/li&gt;\n&lt;li&gt;Does not support function overloading&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;&lt;strong&gt;mb_string&lt;/strong&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Enables zend_multibyte support&lt;/li&gt;\n&lt;li&gt;Supports transparent HTTP in/out encoding&lt;/li&gt;\n&lt;li&gt;Provides some wrappers for functionality such as strtoupper&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;&lt;strong&gt;ICONV&lt;/strong&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Primary for charset conversion&lt;/li&gt;\n&lt;li&gt;Output buffer handler&lt;/li&gt;\n&lt;li&gt;mime encoding functionality&lt;/li&gt;\n&lt;li&gt;conversion&lt;/li&gt;\n&lt;li&gt;some string helpers (len, substr, strpos, strrpos)&lt;/li&gt;\n&lt;li&gt;Stream Filter &lt;code&gt;stream_filter_append($fp, &apos;convert.iconv.ISO-2022-JP/EUC-JP&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;&lt;strong&gt;DATABASES&lt;/strong&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;MySQL: Charset and collation on tables and on the connection (not the collation). Also, don&apos;t use mysql - mysqli or PDO&lt;/li&gt;\n&lt;li&gt;postgresql: pg_set_client_encoding&lt;/li&gt;\n&lt;li&gt;sqlite(3): Make sure it was compiled with Unicode and intl support&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;&lt;strong&gt;Some other gotchas&lt;/strong&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;You cannot use Unicode filenames with PHP and windows unless you use a 3rd part extension.&lt;/li&gt;\n&lt;li&gt;Send everything in ASCII if you are using exec, proc_open and other command line calls&lt;/li&gt;\n&lt;li&gt;Plain text is not plain text, files have encodings&lt;/li&gt;\n&lt;li&gt;You can convert files on the fly with the iconv filter&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The only thing I would add to these amazing answers is to emphasize on saving your files in UTF-8 encoding, I have noticed that browsers accept this property over setting UTF-8 as your code encoding. Any decent text editor will show you this. For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Notepad%2B%2B&quot; rel=&quot;nofollow noreferrer&quot;&gt;Notepad++&lt;/a&gt; has a menu option for file encoding, and it shows you the current encoding and enables you to change it. For all my PHP files I use UTF-8 without a &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark&quot; rel=&quot;nofollow noreferrer&quot;&gt;BOM&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Sometime ago I had someone ask me to add UTF-8 support for a PHP and MySQL application designed by someone else. I noticed that all files were encoded in ANSI, so I had to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Iconv&quot; rel=&quot;nofollow noreferrer&quot;&gt;iconv&lt;/a&gt; to convert all files, change the database tables to use the UTF-8 character set and &lt;em&gt;utf8_general_ci&lt;/em&gt; collate, add &apos;SET NAMES utf8&apos; to the database abstraction layer after the connection (if using 5.3.6 or earlier. Otherwise, you have to use charset=utf8 in the connection string) and change string functions to use the PHP multibyte string functions equivalent.&lt;/p&gt;\n    ","\n&lt;p&gt;I recently discovered that using &lt;code&gt;strtolower()&lt;/code&gt; can cause issues where the data is truncated after a special character.&lt;/p&gt;\n\n&lt;p&gt;The solution was to use &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;mb_strtolower(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;mb_ uses MultiByte. It supports more characters but in general is a little slower.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In PHP, you&apos;ll need to either use the &lt;a href=&quot;http://us2.php.net/manual/en/ref.mbstring.php&quot; rel=&quot;noreferrer&quot;&gt;multibyte functions&lt;/a&gt;, or turn on &lt;a href=&quot;http://us2.php.net/manual/en/mbstring.configuration.php&quot; rel=&quot;noreferrer&quot;&gt;mbstring.func_overload&lt;/a&gt;. That way things like strlen will work if you have characters that take more than one byte.&lt;/p&gt;\n\n&lt;p&gt;You&apos;ll also need to identify the character set of your responses. You can either use AddDefaultCharset, as above, or write PHP code that returns the header. (Or you can add a META tag to your HTML documents.)&lt;/p&gt;\n    ","\n&lt;p&gt;I have just gone through the same issue and found a good solution at PHP manuals.&lt;/p&gt;\n&lt;p&gt;I changed all my files&apos; encoding to UTF8 and then the default encoding on my connection. This solved all the problems.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!$mysqli-&amp;gt;set_charset(&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error loading character set utf8: %s\\n&quot;&lt;/span&gt;, $mysqli-&amp;gt;error);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Current character set: %s\\n&quot;&lt;/span&gt;, $mysqli-&amp;gt;character_set_name());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;View Source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Unicode support in PHP is still a huge mess. While it&apos;s capable of converting an &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO/IEC_8859-1&quot; rel=&quot;nofollow noreferrer&quot;&gt;ISO&amp;nbsp;8859&lt;/a&gt; string (which it uses internally) to UTF-8, it lacks the capability to work with Unicode strings natively, which means all the string processing functions will mangle and corrupt your strings.&lt;/p&gt;\n&lt;p&gt;So you have to either use a separate library for proper UTF-8 support, or rewrite all the string handling functions yourself.&lt;/p&gt;\n&lt;p&gt;The easy part is just specifying the charset in HTTP headers and in the database and such, but none of that matters if your PHP code doesn&apos;t output valid UTF-8. That&apos;s the hard part, and PHP gives you virtually no help there. (I think PHP&amp;nbsp;6 is supposed to fix the worst of this, but that&apos;s still a while away.)&lt;/p&gt;\n    ","\n&lt;p&gt;If you want a MySQL server to decide the character set, and not PHP as a client (old behaviour; preferred, in my opinion), try adding &lt;code&gt;skip-character-set-client-handshake&lt;/code&gt; to your &lt;code&gt;my.cnf&lt;/code&gt;, under &lt;code&gt;[mysqld]&lt;/code&gt;, and restart &lt;code&gt;mysql&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This may cause trouble in case you&apos;re using anything other than UTF-8.&lt;/p&gt;\n    ","\n&lt;p&gt;The top answer is excellent. Here is what I had to on a regular &lt;a href=&quot;https://en.wikipedia.org/wiki/Debian&quot; rel=&quot;nofollow noreferrer&quot;&gt;Debian&lt;/a&gt;, PHP, and &lt;a href=&quot;https://en.wikipedia.org/wiki/MySQL&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQL&lt;/a&gt; setup:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Storage&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Debian. Apparently already UTF-8&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Retrieval&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The MySQL database was stored in UTF-8,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// but apparently PHP was requesting ISO 8859-1. This worked:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***notice &quot;utf8&quot;, without dash, this is a MySQL encoding***&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;mysql_set_charset&lt;/span&gt;(&apos;utf8&apos;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Delivery&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// File *php.ini* did not have a default charset,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (it was commented out, shared host) and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// no HTTP encoding was specified in the Apache headers.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// This made Apache send out a UTF-8 header&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (and perhaps made PHP actually send out UTF-8)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***notice &quot;utf-8&quot;, with dash, this is a php encoding***&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;ini_set&lt;/span&gt;(&apos;default_charset&apos;,&apos;utf-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&apos;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Submission&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// This worked in all major browsers once Apache&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// was sending out the UTF-8 header. I didnt add&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the accept-charset attribute.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Processing&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Changed a few commands in PHP, like substr(),&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// to mb_substr()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That was all!&lt;/p&gt;\n    "],"28":["\n&lt;p&gt;The element you were trying to find wasnt in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&quot; rel=&quot;noreferrer&quot;&gt;DOM&lt;/a&gt; when your script ran.&lt;/p&gt;\n&lt;p&gt;The position of your DOM-reliant script can have a profound effect on its behavior. Browsers parse HTML documents from top to bottom. Elements are added to the DOM and scripts are (generally) executed as they&apos;re encountered. &lt;strong&gt;This means that order matters.&lt;/strong&gt; Typically, scripts can&apos;t find elements that appear later in the markup because those elements have yet to be added to the DOM.&lt;/p&gt;\n&lt;p&gt;Consider the following markup; script #1 fails to find the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; while script #2 succeeds:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script #1:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// null&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test div&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script #2:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;div id=&quot;test&quot; ...&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;So, what should you do? You&apos;ve got a few options:&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Option 1: Move your script&lt;/h2&gt;\n&lt;p&gt;Given what we&apos;ve seen in the example above, an intuitive solution might be to simply move your script down the markup, past the elements you&apos;d like to access. In fact, for a long time, placing scripts at the bottom of the page was considered a &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#js_bottom&quot; rel=&quot;noreferrer&quot;&gt;best practice&lt;/a&gt; for a variety of reasons. Organized in this fashion, the rest of the document would be parsed before executing your script:\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    });\n  &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- closing body tag --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;While this makes sense and is a solid option for legacy browsers, it&apos;s limited and there are more flexible, modern approaches available.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Option 2: The &lt;code&gt;defer&lt;/code&gt; attribute&lt;/h2&gt;\n&lt;p&gt;While we did say that scripts are, &lt;em&gt;&quot;(generally) executed as they&apos;re encountered,&quot;&lt;/em&gt; modern browsers allow you to specify a different behavior. If you&apos;re linking an external script, you can make use of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;[&lt;code&gt;defer&lt;/code&gt;, a Boolean attribute,] is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/web/api/window/domcontentloaded_event&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This means that you can place a script tagged with &lt;code&gt;defer&lt;/code&gt; anywhere, even the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, and it should have access to the fully realized DOM.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://gh-canon.github.io/misc-demos/log-test-click.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Just keep in mind...&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;defer&lt;/code&gt; can only be used for external scripts, i.e.: those having a &lt;code&gt;src&lt;/code&gt; attribute.&lt;/li&gt;\n&lt;li&gt;be aware of &lt;a href=&quot;https://caniuse.com/script-defer&quot; rel=&quot;noreferrer&quot;&gt;browser support&lt;/a&gt;, i.e.: buggy implementation in IE &amp;lt; 10&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;h2&gt;Option 3: Modules&lt;/h2&gt;\n&lt;p&gt;Depending upon your requirements, you may be able to utilize &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#applying_the_module_to_your_html&quot; rel=&quot;noreferrer&quot;&gt;JavaScript modules&lt;/a&gt;. Among other important distinctions from standard scripts (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#other_differences_between_modules_and_standard_scripts&quot; rel=&quot;noreferrer&quot;&gt;noted here&lt;/a&gt;), modules are deferred automatically and are not limited to external sources.&lt;/p&gt;\n&lt;p&gt;Set your script&apos;s &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;module&lt;/code&gt;, e.g.:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;module&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n  });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Option 4: Defer with event handling&lt;/h2&gt;\n&lt;p&gt;Add a listener to an event that fires after your document has been parsed.&lt;/p&gt;\n&lt;h3&gt;DOMContentLoaded event&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/web/api/window/domcontentloaded_event&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/a&gt; fires after the DOM has been completely constructed from the initial parse, without waiting for things like stylesheets or images to load.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    });\n  });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Window: load event&lt;/h3&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; event fires after &lt;code&gt;DOMContentLoaded&lt;/code&gt; and additional resources like stylesheets and images have been loaded. For that reason, it fires later than desired for our purposes. Still, if you&apos;re considering older browsers like IE8, the support is nearly universal. Granted, you may want a &lt;a href=&quot;https://vanillajstoolkit.com/polyfills/addeventlistener/&quot; rel=&quot;noreferrer&quot;&gt;polyfill for &lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    });\n  });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;jQuery&apos;s &lt;code&gt;ready()&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; and &lt;code&gt;window:load&lt;/code&gt; each have their caveats. jQuery&apos;s &lt;a href=&quot;https://api.jquery.com/ready/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; delivers a hybrid solution, using &lt;code&gt;DOMContentLoaded&lt;/code&gt; when possible, failing over to &lt;code&gt;window:load&lt;/code&gt; when necessary, and firing its callback immediately if the DOM is already complete.&lt;/p&gt;\n&lt;p&gt;You can pass your ready handler directly to jQuery as &lt;code&gt;$(&lt;em&gt;handler&lt;/em&gt;)&lt;/code&gt;, e.g.:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://code.jquery.com/jquery-3.6.0.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;integrity&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;crossorigin&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  $(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#test&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    });\n  });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Option 5: Event Delegation&lt;/h2&gt;\n&lt;p&gt;Delegate the event handling to an ancestor of the target element.&lt;/p&gt;\n&lt;p&gt;When an element raises an event (provided that it&apos;s a &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling&quot; rel=&quot;noreferrer&quot;&gt;bubbling&lt;/a&gt; event and nothing stops its propagation), each parent in that element&apos;s ancestry, all the way up to &lt;code&gt;window&lt;/code&gt;, receives the event as well. That allows us to attach a handler to an existing element and sample events as they bubble up from its descendants... even from descendants added after the handler was attached. All we have to do is check the event to see whether it was raised by the desired element and, if so, run our code.&lt;/p&gt;\n&lt;p&gt;Typically, this pattern is reserved for elements that don&apos;t exist at load time or to avoid attaching a large number of duplicate handlers. For efficiency, select the nearest reliable ancestor of the target element rather than attaching it to the &lt;code&gt;document&lt;/code&gt;.&lt;/p&gt;\n&lt;h3&gt;Native JavaScript&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ancestor&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- nearest ancestor available to our script --&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ancestor&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;descendant&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked:&quot;&lt;/span&gt;, e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;);\n      }\n    });\n  &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;descendant&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;jQuery&apos;s &lt;code&gt;on()&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;jQuery makes this functionality available through &lt;a href=&quot;https://api.jquery.com/on/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;on()&lt;/code&gt;&lt;/a&gt;. Given an event name, a selector for the desired descendant, and an event handler, it will resolve your delegated event handling and manage your &lt;code&gt;this&lt;/code&gt; context:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://code.jquery.com/jquery-3.6.0.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;integrity&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;crossorigin&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ancestor&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- nearest ancestor available to our script --&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#ancestor&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;#descendant&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    });\n  &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;descendant&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Short and simple:&lt;/strong&gt; Because the elements you are looking for do not exist in the document (yet).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;For the remainder of this answer I will use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementById&lt;/code&gt;&lt;/a&gt; for examples, but the same applies to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagName&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsByTagName&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/Document.querySelector&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;querySelector&lt;/code&gt;&lt;/a&gt;, and any other DOM method that selects elements.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Possible Reasons&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There are three reasons why an element might not exist:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;An element with the passed ID really does not exist in the document. You should double check that the ID you pass to &lt;code&gt;getElementById&lt;/code&gt; really matches an ID of an existing element in the (generated) HTML and that you have not &lt;em&gt;misspelled&lt;/em&gt; the ID (IDs are &lt;em&gt;case-sensitive&lt;/em&gt;!).&lt;/p&gt;\n&lt;p&gt;If you&apos;re using &lt;code&gt;getElementById&lt;/code&gt;, be sure you&apos;re &lt;strong&gt;only&lt;/strong&gt; giving the ID of the element (e.g., &lt;code&gt;document.getElemntById(&quot;the-id&quot;)&lt;/code&gt;). If you&apos;re using a method that accepts a CSS selector (like &lt;code&gt;querySelector&lt;/code&gt;), be sure you&apos;re including the &lt;code&gt;#&lt;/code&gt; before the ID to indicate you&apos;re looking for an ID (e.g., &lt;code&gt;document.querySelector(&quot;#the-id&quot;)&lt;/code&gt;). You must &lt;strong&gt;not&lt;/strong&gt; use the &lt;code&gt;#&lt;/code&gt; with &lt;code&gt;getElementById&lt;/code&gt;, and &lt;strong&gt;must&lt;/strong&gt; use it with &lt;code&gt;querySelector&lt;/code&gt; and similar. Also note that if the ID has characters in it that aren&apos;t valid in &lt;a href=&quot;https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier&quot; rel=&quot;noreferrer&quot;&gt;CSS identifiers&lt;/a&gt; (such as a &lt;code&gt;.&lt;/code&gt;; &lt;code&gt;id&lt;/code&gt; attributes containing &lt;code&gt;.&lt;/code&gt; characters are poor practice, but valid), you have to escape those when using &lt;code&gt;querySelector&lt;/code&gt; (&lt;code&gt;document.querySelector(&quot;#the\\\\.id&quot;)&lt;/code&gt;)) but not when using &lt;code&gt;getElementById&lt;/code&gt; (&lt;code&gt;document.getElementById(&quot;the.id&quot;)&lt;/code&gt;).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The element does not exist &lt;em&gt;at the moment&lt;/em&gt; you call &lt;code&gt;getElementById&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The element isn&apos;t in the document you&apos;re querying even though you can see it on the page, because it&apos;s in an &lt;code&gt;iframe&lt;/code&gt; (which is its own document). Elements in &lt;code&gt;iframes&lt;/code&gt; aren&apos;t searched when you search the document that contains them.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If the problem is reason 3 (it&apos;s in an &lt;code&gt;iframe&lt;/code&gt; or similar), you need to look through the document in the &lt;code&gt;iframe&lt;/code&gt;, not the parent document, perhaps by getting the &lt;code&gt;iframe&lt;/code&gt; element and using its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;contentDocument&lt;/code&gt;&lt;/a&gt; property to access its document (same-origin only). The rest of this answer addresses the first two reasons.&lt;/p&gt;\n&lt;p&gt;The second reason&amp;nbsp; it&apos;s not there &lt;em&gt;yet&lt;/em&gt;&amp;nbsp; is quite common. Browsers parse and process the HTML from top to bottom. That means that any call to a DOM element which occurs before that DOM element appears in the HTML, will fail.&lt;/p&gt;\n&lt;p&gt;Consider the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_element&apos;&lt;/span&gt;);\n&amp;lt;/script&amp;gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_element&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;div&lt;/code&gt; appears &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;script&lt;/code&gt;. At the moment the script is executed, the element does not exist &lt;em&gt;yet&lt;/em&gt; and &lt;code&gt;getElementById&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The same applies to all selectors with jQuery. jQuery won&apos;t find elements if you &lt;em&gt;misspelled&lt;/em&gt; your selector or you are trying to select them &lt;em&gt;before they actually exist&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;An added twist is when jQuery is not found because you have loaded the script without protocol and are running from file system:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script src=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//somecdn.somewhere.com/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this syntax is used to allow the script to load via HTTPS on a page with protocol https:// and to load the HTTP version on a page with protocol http://&lt;/p&gt;\n&lt;p&gt;It has the unfortunate side effect of attempting and failing to load &lt;code&gt;file://somecdn.somewhere.com...&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Before you make a call to &lt;code&gt;getElementById&lt;/code&gt; (or any DOM method for that matter), make sure the elements you want to access exist, i.e. the DOM is loaded.&lt;/p&gt;\n&lt;p&gt;This can be ensured by simply putting your JavaScript &lt;em&gt;after&lt;/em&gt; the corresponding DOM element&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_element&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_element&apos;&lt;/span&gt;);\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in which case you can also put the code just before the closing body tag (&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;) (all DOM elements will be available at the time the script is executed).&lt;/p&gt;\n&lt;p&gt;Other solutions include listening to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.onload&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;load&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/DOMContentLoaded_%28event%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; events. In these cases it does not matter where in the document you place the JavaScript code, you just have to remember to put all DOM processing code in the event handlers.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// process DOM elements here&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// does not work IE 8 and below&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;DOMContentLoaded&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// process DOM elements here&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Please see the &lt;a href=&quot;http://www.quirksmode.org/js/introevents.html&quot; rel=&quot;noreferrer&quot;&gt;articles at quirksmode.org&lt;/a&gt; for more information regarding event handling and browser differences.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;First make sure that jQuery is loaded properly. &lt;a href=&quot;http://www.netmagazine.com/tutorials/javascript-debugging-beginners&quot; rel=&quot;noreferrer&quot;&gt;Use the browser&apos;s developer tools&lt;/a&gt; to find out whether the jQuery file was found and correct the URL if it wasn&apos;t (e.g. add the &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt; scheme at the beginning, adjust the path, etc.)&lt;/p&gt;\n&lt;p&gt;Listening to the &lt;code&gt;load&lt;/code&gt;/&lt;code&gt;DOMContentLoaded&lt;/code&gt;  events is exactly what jQuery is doing with &lt;a href=&quot;http://api.jquery.com/ready/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.ready()&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt;. All your jQuery code that affects DOM element should be inside that event handler.&lt;/p&gt;\n&lt;p&gt;In fact, the &lt;a href=&quot;http://docs.jquery.com/Tutorials:Getting_Started_with_jQuery&quot; rel=&quot;noreferrer&quot;&gt;jQuery tutorial&lt;/a&gt; explicitly states:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;As almost everything we do when using jQuery reads or manipulates the document object model (DOM), we need to make sure that we start adding events etc. as soon as the DOM is ready.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To do this, we register a ready event for the document.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// do stuff when DOM is ready&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively you can also use the shorthand syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do stuff when DOM is ready&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Both are equivalent.&lt;/p&gt;\n    ","\n&lt;p&gt;If the element you are trying to access is inside an &lt;code&gt;iframe&lt;/code&gt; and you try to access it outside the context of the &lt;code&gt;iframe&lt;/code&gt; this will also cause it to fail.&lt;/p&gt;\n\n&lt;p&gt;If you want to get an element in an iframe you can find out how &lt;a href=&quot;https://stackoverflow.com/a/1088569/1435985&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Reasons why id based selectors don&apos;t work&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The element/DOM with id specified doesn&apos;t exist yet.&lt;/li&gt;\n&lt;li&gt;The element exists, but it is not registered in DOM [in case of HTML nodes appended dynamically from Ajax responses].&lt;/li&gt;\n&lt;li&gt;More than one element with the same id is present which is causing a conflict.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Try to access the element after its declaration or alternatively use stuff like &lt;code&gt;$(document).ready();&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For elements coming from Ajax responses, use the &lt;code&gt;.bind()&lt;/code&gt; method of jQuery. Older versions of jQuery had &lt;code&gt;.live()&lt;/code&gt; for the same.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use tools [for example, webdeveloper plugin for browsers] to find duplicate ids and remove them.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;As @FelixKling pointed out, the most likely scenario is that the nodes you are looking for do not exist (yet).&lt;/p&gt;\n\n&lt;p&gt;However, modern development practices can often manipulate document elements outside of the document tree either with DocumentFragments or simply detaching/reattaching current elements directly.  Such techniques may be used as part of JavaScript templating or to avoid excessive repaint/reflow operations while the elements in question are being heavily altered.&lt;/p&gt;\n\n&lt;p&gt;Similarly, the new &quot;Shadow DOM&quot; functionality being rolled out across modern browsers allows elements to be part of the document, but not query-able by document.getElementById and all of its sibling methods (querySelector, etc.). This is done to encapsulate functionality and specifically hide it.&lt;/p&gt;\n\n&lt;p&gt;Again, though, it is most likely that the element you are looking for simply is not (yet) in the document, and you should do as Felix suggests. However, you should also be aware that that is increasingly not the only reason that an element might be unfindable (either temporarily or permanently).&lt;/p&gt;\n    ","\n&lt;p&gt;If script execution order is not the issue, another possible cause of the problem is that the element is not being selected properly:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;getElementById&lt;/code&gt; requires the passed string to be the ID &lt;em&gt;verbatim&lt;/em&gt;, and nothing else. If you prefix the passed string with a &lt;code&gt;#&lt;/code&gt;, and the ID does not start with a &lt;code&gt;#&lt;/code&gt;, nothing will be selected:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Error, selected element will be null:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#foo&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Fix:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Similarly, for &lt;code&gt;getElementsByClassName&lt;/code&gt;, don&apos;t prefix the passed string with a &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Error, selected element will be undefined:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.bar&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Fix:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;With querySelector, querySelectorAll, and jQuery, to match an element with a particular class name, put a &lt;code&gt;.&lt;/code&gt; directly before the class. Similarly, to match an element with a particular ID, put a &lt;code&gt;#&lt;/code&gt; directly before the ID:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Error, selected element will be null:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Fix:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.baz&apos;&lt;/span&gt;)\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.baz&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The rules here are, in most cases, identical to those for CSS selectors, and can be seen in detail &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To match an element which has two or more attributes (like two class names, or a class name and a &lt;code&gt;data-&lt;/code&gt; attribute), put the selectors for each attribute next to each other in the selector string, &lt;em&gt;without&lt;/em&gt; a space separating them (because a space indicates the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator&quot; rel=&quot;nofollow noreferrer&quot;&gt;descendant selector&lt;/a&gt;). For example, to select:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;use the query string &lt;code&gt;.foo.bar&lt;/code&gt;. To select&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; data-bar=&lt;span class=&quot;hljs-string&quot;&gt;&quot;someData&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;use the query string &lt;code&gt;.foo[data-bar=&quot;someData&quot;]&lt;/code&gt;. To select the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; below:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-username&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bob&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n  &amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;use &lt;code&gt;div.parent &amp;gt; span[data-username=&quot;bob&quot;]&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Capitalization and spelling &lt;strong&gt;does matter&lt;/strong&gt; for all of the above. If the capitalization is different, or the spelling is different, the element will not be selected:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Error, selected element will be null:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.results&apos;&lt;/span&gt;)\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.Result&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Fix:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.result&apos;&lt;/span&gt;)\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.result&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You also need to make sure the methods have the proper capitalization and spelling. Use one of:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(selector)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelector&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelectorAll&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getElementsByClassName&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getElementsByTagName&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getElementById&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Any other spelling or capitalization will not work. For example, &lt;code&gt;document.getElementByClassName&lt;/code&gt; will throw an error.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure you pass a string to these selector methods. If you pass something that isn&apos;t a string to &lt;code&gt;querySelector&lt;/code&gt;, &lt;code&gt;getElementById&lt;/code&gt;, etc, it almost certainly won&apos;t work.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the HTML attributes on elements you want to select are surrounded by quotes, they must be plain straight quotes (either single or double); curly quotes like &lt;code&gt;&lt;/code&gt; or &lt;code&gt;&lt;/code&gt; will not work if you&apos;re trying to select by ID, class, or attribute.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    "],"29":["\n&lt;h2&gt;Preliminaries&lt;/h2&gt;\n\n&lt;p&gt;JavaScript has only one data type which can contain multiple values: &lt;strong&gt;Object&lt;/strong&gt;. An &lt;strong&gt;Array&lt;/strong&gt; is a special form of object.&lt;/p&gt;\n\n&lt;p&gt;(Plain) Objects have the form&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{&lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: value, &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: value, ...}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Arrays have the form&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[value, value, ...]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both arrays and objects expose a &lt;code&gt;key -&amp;gt; value&lt;/code&gt; structure. Keys in an array must be numeric, whereas any string can be used as key in objects. The key-value pairs are also called the &lt;strong&gt;&quot;properties&quot;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Properties can be accessed either using &lt;strong&gt;dot notation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj.&lt;span class=&quot;hljs-property&quot;&gt;someProperty&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;strong&gt;bracket notation&lt;/strong&gt;, if the property name would not be a valid JavaScript &lt;a href=&quot;http://es5.github.com/#x7.6&quot; rel=&quot;noreferrer&quot;&gt;identifier name &lt;em&gt;&lt;sup&gt;[spec]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt;, or the name is the value of a variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the space is not a valid character in identifier names&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj[&lt;span class=&quot;hljs-string&quot;&gt;&quot;some Property&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// property name as variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;some Property&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj[name];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For that reason, array elements can only be accessed using bracket notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = arr[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// arr.5 would be a syntax error&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// property name / index as variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = arr[x];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Wait... what about JSON?&lt;/h3&gt;\n\n&lt;p&gt;JSON is a textual representation of data, just like XML, YAML, CSV, and others. To work with such data, it first has to be converted to JavaScript data types, i.e. arrays and objects (and how to work with those was just explained). How to parse JSON is explained in the question &lt;a href=&quot;https://stackoverflow.com/questions/4935632/how-to-parse-json-in-javascript&quot;&gt;Parse JSON in JavaScript?&lt;/a&gt; .&lt;/p&gt;\n\n&lt;h3&gt;Further reading material&lt;/h3&gt;\n\n&lt;p&gt;How to access arrays and objects is fundamental JavaScript knowledge and therefore it is advisable to read the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide&quot; rel=&quot;noreferrer&quot;&gt;MDN JavaScript Guide&lt;/a&gt;, especially the sections&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Working_with_Objects&quot; rel=&quot;noreferrer&quot;&gt;Working with Objects&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_object&quot; rel=&quot;noreferrer&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/04_data.html&quot; rel=&quot;noreferrer&quot;&gt;Eloquent JavaScript - Data Structures&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Accessing nested data structures&lt;/h2&gt;\n\n&lt;p&gt;A nested data structure is an array or object which refers to other arrays or objects, i.e. its values are arrays or objects. Such structures can be accessed by consecutively applying dot or bracket notation. &lt;/p&gt;\n\n&lt;p&gt;Here is an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n    }]\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s assume we want to access the &lt;code&gt;name&lt;/code&gt; of the second item. &lt;/p&gt;\n\n&lt;p&gt;Here is how we can do it step-by-step:&lt;/p&gt;\n\n&lt;p&gt;As we can see &lt;code&gt;data&lt;/code&gt; is an object, hence we can access its properties using dot notation. The &lt;code&gt;items&lt;/code&gt; property is accessed as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The value is an array, to access its second element, we have to use bracket notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This value is an object and we use dot notation again to access the &lt;code&gt;name&lt;/code&gt; property. So we eventually get:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item_name = data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, we could have used bracket notation for any of the properties, especially if the name contained characters that would have made it invalid for dot notation usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item_name = data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;I&apos;m trying to access a property but I get only &lt;code&gt;undefined&lt;/code&gt; back?&lt;/h3&gt;\n\n&lt;p&gt;Most of the time when you are getting &lt;code&gt;undefined&lt;/code&gt;, the object/array simply doesn&apos;t have a property with that name.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = {&lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;}};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo.&lt;span class=&quot;hljs-property&quot;&gt;baz&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/console.log&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;console.log&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/console.dir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;console.dir&lt;/code&gt;&lt;/a&gt; and inspect the structure of object / array. The property you are trying to access might be actually defined on a nested object / array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foo.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;baz&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;What if the property names are dynamic and I don&apos;t know them beforehand?&lt;/h3&gt;\n\n&lt;p&gt;If the property names are unknown or we want to access all properties of an object / elements of an array, we can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...in&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;for...in&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; loop for objects and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;for&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; loop for arrays to iterate over all properties / elements.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To iterate over all properties of &lt;code&gt;data&lt;/code&gt;, we can iterate over the &lt;strong&gt;object&lt;/strong&gt; like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; data) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `prop` contains the name of each property, i.e. `&apos;code&apos;` or `&apos;items&apos;`&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// consequently, `data[prop]` refers to the value of each property, i.e.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// either `42` or the array&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Depending on where the object comes from (and what you want to do), you might have to test in each iteration whether the property is really a property of the object, or it is an inherited property. You can do this with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object#hasOwnProperty&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;As alternative to &lt;code&gt;for...in&lt;/code&gt; with &lt;code&gt;hasOwnProperty&lt;/code&gt;, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; to get an &lt;em&gt;array of property names&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(data).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prop&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// `prop` is the property name&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// `data[prop]` is the property value&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To iterate over all elements of the &lt;code&gt;data.items&lt;/code&gt; &lt;strong&gt;array&lt;/strong&gt;, we use a &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `i` will take on the values `0`, `1`, `2`,..., i.e. in each iteration&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// we can access the next element in the array with `data.items[i]`, example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// var obj = data.items[i];&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Since each element is an object (in our example),&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// we can now access the objects properties with `obj.id` and `obj.name`. &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// We could also use `data.items[i].id`.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One could also use &lt;code&gt;for...in&lt;/code&gt; to iterate over arrays, but there are reasons why this should be avoided: &lt;a href=&quot;https://stackoverflow.com/questions/2265167/why-is-forvar-item-in-list-with-arrays-considered-bad-practice-in-javascript&quot;&gt;Why is &apos;for(var item in list)&apos; with arrays considered bad practice in JavaScript?&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;With the increasing browser support of ECMAScript 5, the array method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;forEach&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; becomes an interesting alternative as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index, array&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The callback is executed for each element in the array.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `value` is the element itself (equivalent to `array[index]`)&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `index` will be the index of the element in the array&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `array` is a reference to the array itself (i.e. `data.items` in this case)&lt;/span&gt;\n}); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In environments supporting ES2015 (ES6), you can also use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; loop, which not only works for arrays, but for any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// `item` is the array element, **not** the index&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In each iteration, &lt;code&gt;for...of&lt;/code&gt; directly gives us the next element of the iterable, there is no &quot;index&quot; to access or use.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;What if the &quot;depth&quot; of the data structure is unknown to me?&lt;/h3&gt;\n\n&lt;p&gt;In addition to unknown keys, the &quot;depth&quot; of the data structure (i.e. how many nested objects) it has, might be unknown as well. How to access deeply nested properties usually depends on the exact data structure.&lt;/p&gt;\n\n&lt;p&gt;But if the data structure contains repeating patterns, e.g. the representation of a binary tree, the solution typically includes to &lt;a href=&quot;https://en.wikipedia.org/wiki/Recursion_%28computer_science%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;recursively&lt;/strong&gt; &lt;em&gt;&lt;sup&gt;[Wikipedia]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; access each level of the data structure.&lt;/p&gt;\n\n&lt;p&gt;Here is an example to get the first leaf node of a binary tree:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;node&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node.&lt;span class=&quot;hljs-property&quot;&gt;leftChild&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(node.&lt;span class=&quot;hljs-property&quot;&gt;leftChild&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- recursive call&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node.&lt;span class=&quot;hljs-property&quot;&gt;rightChild&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(node.&lt;span class=&quot;hljs-property&quot;&gt;rightChild&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- recursive call&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// node must be a leaf node&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; node;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; first_leaf = &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(root);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; root = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n        }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;leftChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;rightChild&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n        }\n    }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;node&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node.&lt;span class=&quot;hljs-property&quot;&gt;leftChild&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(node.&lt;span class=&quot;hljs-property&quot;&gt;leftChild&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node.&lt;span class=&quot;hljs-property&quot;&gt;rightChild&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(node.&lt;span class=&quot;hljs-property&quot;&gt;rightChild&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// node must be a leaf node&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; node;\n    }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getLeaf&lt;/span&gt;(root).&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;A more generic way to access a nested data structure with unknown keys and depth is to test the type of the value and act accordingly.&lt;/p&gt;\n\n&lt;p&gt;Here is an example which adds all primitive values inside a nested data structure into an array (assuming it does not contain any functions). If we encounter an object (or array) we simply call &lt;code&gt;toArray&lt;/code&gt; again on that value (recursive call).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj[prop];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n            result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;toArray&lt;/span&gt;(value)); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- recursive call&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(value);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n  }]\n};\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj[prop];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n      result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;toArray&lt;/span&gt;(value));\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(value);\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;toArray&lt;/span&gt;(data));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Helpers&lt;/h2&gt;\n\n&lt;p&gt;Since the structure of a complex object or array is not necessarily obvious, we can inspect the value at each step to decide how to move further. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/console.log&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;console.log&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/console.dir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;console.dir&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; help us doing this. For example (output of the Chrome console):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;)\n [ &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here we see that that &lt;code&gt;data.items&lt;/code&gt; is an array with two elements which are both objects. In Chrome console the objects can even be expanded and inspected immediately.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n     &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n     &lt;span class=&quot;hljs-attr&quot;&gt;__proto__&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This tells us that &lt;code&gt;data.items[1]&lt;/code&gt; is an object, and after expanding it we see that it has three properties, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;__proto__&lt;/code&gt;. The latter is an internal property used for the prototype chain of the object. The prototype chain and inheritance is out of scope for this answer, though.&lt;/p&gt;\n    ","\n&lt;p&gt;You can access it this way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data[&lt;span class=&quot;hljs-string&quot;&gt;&quot;items&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both ways are equal.&lt;/p&gt;\n    ","\n&lt;p&gt;Objects and arrays has a lot of built-in methods that can help you with processing data.&lt;/p&gt;\n\n&lt;p&gt;Note: in many of the examples I&apos;m using &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;arrow functions&lt;/a&gt;. They are similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot; rel=&quot;noreferrer&quot;&gt;function expressions&lt;/a&gt;, but they bind the &lt;code&gt;this&lt;/code&gt; value lexically.&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.values()&lt;/code&gt;&lt;/a&gt; (ES 2017) and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt; (ES 2017)&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;Object.keys()&lt;/code&gt; returns an array of object&apos;s keys, &lt;code&gt;Object.values()&lt;/code&gt; returns an array of object&apos;s values, and &lt;code&gt;Object.entries()&lt;/code&gt; returns an array of object&apos;s keys and corresponding values in a format &lt;code&gt;[key, value]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n ,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n ,&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(obj)) &lt;span class=&quot;hljs-comment&quot;&gt;// [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(obj)) &lt;span class=&quot;hljs-comment&quot;&gt;// [1, 2, 3]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(obj)) &lt;span class=&quot;hljs-comment&quot;&gt;// [[&apos;a&apos;, 1], [&apos;b&apos;, 2], [&apos;c&apos;, 3]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h3&gt;&lt;code&gt;Object.entries()&lt;/code&gt; with a for-of loop and destructuring assignment&lt;/h3&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n ,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n ,&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [key, value] &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(obj)) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`key: &lt;span class=&quot;hljs-subst&quot;&gt;${key}&lt;/span&gt;, value: &lt;span class=&quot;hljs-subst&quot;&gt;${value}&lt;/span&gt;`&lt;/span&gt;)\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s very convenient to iterate the result of &lt;code&gt;Object.entries()&lt;/code&gt; with a &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of&quot; rel=&quot;noreferrer&quot;&gt;for-of loop&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; rel=&quot;noreferrer&quot;&gt;destructuring assignment&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For-of loop lets you iterate array elements. The syntax is &lt;code&gt;for (const element of array)&lt;/code&gt; (we can replace &lt;code&gt;const&lt;/code&gt; with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;, but it&apos;s better to use &lt;code&gt;const&lt;/code&gt; if we don&apos;t intend to modify &lt;code&gt;element&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Destructuring assignment lets you extract values from an array or an object and assign them to variables. In this case &lt;code&gt;const [key, value]&lt;/code&gt; means that instead of assigning the &lt;code&gt;[key, value]&lt;/code&gt; array to &lt;code&gt;element&lt;/code&gt;, we assign the first element of that array to &lt;code&gt;key&lt;/code&gt; and the second element to &lt;code&gt;value&lt;/code&gt;. It is equivalent to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(obj)) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key = element[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n       ,value = element[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, destructuring makes this a lot simpler.&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.every()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;every()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the specified callback function returns &lt;code&gt;true&lt;/code&gt; for &lt;em&gt;every&lt;/em&gt; element of the array. The &lt;code&gt;some()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the specified callback function returns &lt;code&gt;true&lt;/code&gt; for &lt;em&gt;some&lt;/em&gt; (at least one) element.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// true, because every element is greater than 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// false, because 3^2 is greater than 5&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(x, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// true, because 2 is even (the remainder from dividing by 2 is 0)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// false, because none of the elements is equal to 5&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x === &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.find()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;find()&lt;/code&gt; methods returns &lt;em&gt;the first&lt;/em&gt; element which satisfies the provided callback function. The &lt;code&gt;filter()&lt;/code&gt; method returns an array of &lt;em&gt;all&lt;/em&gt; elements which satisfies the provided callback function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2, because 2^2 !== 2&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x !== &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(x, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1, because it&apos;s the first element&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// undefined, because none of the elements equals 7&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x === &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// [2, 3], because these elements are greater than 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [1, 2, 3], because the function returns true for all elements&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [], because none of the elements equals neither 6 nor 7&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x === &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; || x === &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method returns an array with the results of calling a provided callback function on the array elements.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// [2, 3, 4]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;fromCharCode&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt; + x))) &lt;span class=&quot;hljs-comment&quot;&gt;// [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x)) &lt;span class=&quot;hljs-comment&quot;&gt;// [1, 2, 3] (no-op)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(x, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))) &lt;span class=&quot;hljs-comment&quot;&gt;// [1, 4, 9]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method reduces an array to a single value by calling the provided callback function with two elements.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sum of array elements.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a + b)) &lt;span class=&quot;hljs-comment&quot;&gt;// 6&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The largest number in the array.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a &amp;gt; b ? a : b)) &lt;span class=&quot;hljs-comment&quot;&gt;// 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method takes an optional second parameter, which is the initial value. This is useful when the array on which you call &lt;code&gt;reduce()&lt;/code&gt; can has zero or one elements. For example, if we wanted to create a function &lt;code&gt;sum()&lt;/code&gt; which takes an array as an argument and returns the sum of all elements, we could write it like that:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; = arr =&amp;gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a + b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;([]))     &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]))    &lt;span class=&quot;hljs-comment&quot;&gt;// 4&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;])) &lt;span class=&quot;hljs-comment&quot;&gt;// 7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In case you&apos;re trying to access an &lt;code&gt;item&lt;/code&gt; from the example structure by &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt;, without knowing it&apos;s position in the array, the easiest way to do it would be to use &lt;a href=&quot;http://underscorejs.org/&quot; rel=&quot;noreferrer&quot;&gt;underscore.js&lt;/a&gt; library:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n    }]\n};\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n});\n&lt;span class=&quot;hljs-comment&quot;&gt;// Object {id: 2, name: &quot;bar&quot;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From my experience, using higher order functions instead of &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;for..in&lt;/code&gt; loops results in code that is easier to reason about, and hence more maintainable.&lt;/p&gt;\n\n&lt;p&gt;Just my 2 cents.&lt;/p&gt;\n    ","\n&lt;p&gt;At times, accessing a nested object using a string can be desirable. The simple approach is the first level, for example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;hello&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(obj[key]);&lt;span class=&quot;hljs-comment&quot;&gt;//world&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this is often not the case with complex json. As json becomes more complex, the approaches for finding values inside of the json also become complex. A recursive approach for navigating the json is best, and how that recursion is leveraged will depend on the type of data being searched for. If there are conditional statements involved, a &lt;a href=&quot;https://stackoverflow.com/a/11657379/1026459&quot;&gt;json search&lt;/a&gt; can be a good tool to use.&lt;/p&gt;\n\n&lt;p&gt;If the property being accessed is already known, but the path is complex, for example in this object&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;larry&quot;&lt;/span&gt; },    \n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;curly&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;moe&quot;&lt;/span&gt; }\n ]\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you know you want to get the first result of the array in the object, perhaps you would like to use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; moe = obj[&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr[0].name&quot;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, that will cause an exception as there is no property of object with that name. The solution to be able to use this would be to flatten the tree aspect of the object. This can be done recursively.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;){\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; root = {};\n (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tree&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, index&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; suffix = toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Array]&quot;&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(key))&lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n    root[index+key+suffix] = obj[key];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj[key]) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Array]&quot;&lt;/span&gt; )&lt;span class=&quot;hljs-title function_&quot;&gt;tree&lt;/span&gt;(obj[key],index+key+suffix+&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj[key]) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt; )&lt;span class=&quot;hljs-title function_&quot;&gt;tree&lt;/span&gt;(obj[key],index+key+suffix+&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);   \n   }\n })(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, the complex object can be flattened&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = previous definition;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; flat = &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(obj);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; moe = flat[&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr[0].name&quot;&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;//moe&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is a &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://jsfiddle.net/73172hr0/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;jsFiddle Demo&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; of this approach being used.&lt;/p&gt;\n    ","\n&lt;p&gt;To access a nested attribute, you need to specify its name and then search through the object.&lt;/p&gt;\n\n&lt;p&gt;If you already know the exact path, then you can hardcode it in your script like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;these also work -&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\ndata[&lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you don&apos;t know the exact name before hand, or a user is the one who provides the name for you. Then dynamically searching through the data structure is required. Some suggested here that the search can be done using a &lt;code&gt;for&lt;/code&gt; loop, but there is a very simple way to traverse a path using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.reduce&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = { &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt; }] }\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; path = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = path.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,v&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a[v], data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The path is a way to say: First take the object with key &lt;code&gt;items&lt;/code&gt;, which happens to be an array. Then take the &lt;code&gt;1&lt;/code&gt;-st element (0 index arrays). Last take the object with key &lt;code&gt;name&lt;/code&gt; in that array element, which happens to be the string &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you have a very long path, you might even use &lt;code&gt;String.split&lt;/code&gt; to make all of this easier -&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;items.1.name&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,v&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a[v], data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is just plain JavaScript, without using any third party libraries like jQuery or lodash.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s simple explanation:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n    }]\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n1. `data` is object contain `items` object*/&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n2. `items` object contain array of two objects as elements*/&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n3. you need 2nd element of array - the `1` from `[0, 1]`*/&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n4. and you need value of `name` property of 2nd object-element of array)*/&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;Here are 4 different methods mentioned to get the javascript object property:&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n  }]\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Method 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; method1 = data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(method1);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Method 2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; method2 = data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(method2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Method 3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; method3 = data[&lt;span class=&quot;hljs-string&quot;&gt;&quot;items&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(method3);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Method 4  Destructuring&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [, { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: second_name }] } = data;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(second_name);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This question is quite old, so as a contemporary update. With the onset of ES2015 there are alternatives to get a hold of the data you require. There is now a feature called &lt;strong&gt;object destructuring&lt;/strong&gt; for accessing nested objects.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n  }]\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: secondName\n  }]\n} = data;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(secondName);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The above example creates a variable called &lt;code&gt;secondName&lt;/code&gt; from the &lt;code&gt;name&lt;/code&gt; key from an array called &lt;code&gt;items&lt;/code&gt;, the lonely &lt;code&gt;,&lt;/code&gt; says skip the first object in the array. &lt;/p&gt;\n\n&lt;p&gt;Notably it&apos;s probably overkill for this example, as simple array acccess is easier to read, but it comes in useful when breaking apart objects in general. &lt;/p&gt;\n\n&lt;p&gt;This is very brief intro to your specific use case, destructuring can be an unusual syntax to get used to at first. I&apos;d recommend reading &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; rel=&quot;noreferrer&quot;&gt;Mozilla&apos;s Destructuring Assignment documentation&lt;/a&gt; to learn more.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use &lt;code&gt;lodash _get&lt;/code&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: [{ &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; } }] };\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a[0].b.c&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ourStorage = {\n\n\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;desk&quot;&lt;/span&gt;:    {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;drawer&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;stapler&quot;&lt;/span&gt;\n  },\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;cabinet&quot;&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;top drawer&quot;&lt;/span&gt;: { \n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;folder1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a file&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;folder2&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;secrets&quot;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bottom drawer&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;soda&quot;&lt;/span&gt;\n  }\n};\nourStorage.&lt;span class=&quot;hljs-property&quot;&gt;cabinet&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;top drawer&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;folder2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Outputs -&amp;gt; &quot;secrets&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//parent.subParent.subsubParent[&quot;almost there&quot;][&quot;final property&quot;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically, use a dot between each descendant that unfolds underneath it and when you have object names made out of two strings, you must use the [&quot;obj Name&quot;] notation. Otherwise, just a dot would suffice;&lt;/p&gt;\n\n&lt;p&gt;Source:  &lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects&quot; rel=&quot;noreferrer&quot;&gt;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;to add to this, accessing nested Arrays would happen like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ourPets = [\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;animalType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;names&lt;/span&gt;: [\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meowzer&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Fluffy&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kit-Cat&quot;&lt;/span&gt;\n    ]\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;animalType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;names&lt;/span&gt;: [\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Spot&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bowser&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Frankie&quot;&lt;/span&gt;\n    ]\n  }\n];\nourPets[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;names&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Outputs &quot;Fluffy&quot;&lt;/span&gt;\nourPets[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;names&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Outputs &quot;Spot&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays/&quot; rel=&quot;noreferrer&quot;&gt;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Another more useful document depicting the situation above: \n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics#Bracket_notation&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics#Bracket_notation&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Property access via dot walking: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just in case, anyone&apos;s visiting this question in 2017 or later and looking for an &lt;strong&gt;easy-to-remember&lt;/strong&gt; way, here&apos;s an elaborate blog post on &lt;a href=&quot;https://dev.to/flexdinesh/accessing-nested-objects-in-javascript--9m4&quot; rel=&quot;noreferrer&quot;&gt;Accessing Nested Objects in JavaScript&lt;/a&gt; without being bamboozled by &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Cannot read property &apos;foo&apos; of undefined&lt;/em&gt; error&lt;/p&gt;\n\n&lt;h2&gt;1. Oliver Steele&apos;s nested object access pattern&lt;/h2&gt;\n\n&lt;p&gt;The easiest and the cleanest way is to use Oliver Steele&apos;s nested object access pattern&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = ((user || {}).&lt;span class=&quot;hljs-property&quot;&gt;personalInfo&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this notation, you&apos;ll never run into&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Cannot read property &apos;name&apos; of undefined&lt;/em&gt;. &lt;/p&gt;\n\n&lt;p&gt;You basically check if user exists, if not, you create an empty object on the fly. This way, the next level key will &lt;strong&gt;always be accessed from an object that exists or an empty object&lt;/strong&gt;, but never from undefined.&lt;/p&gt;\n\n&lt;h2&gt;2. Access Nested Objects Using Array Reduce&lt;/h2&gt;\n\n&lt;p&gt;To be able to access nested arrays, you can write your own array reduce util.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;nestedObj, pathArr&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pathArr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        (obj &amp;amp;&amp;amp; obj[key] !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;) ? obj[key] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, nestedObj);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// pass in your object structure as array elements&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt;(user, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// to access nested array, just pass in array index as an element the path array.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; city = &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt;(user, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;addresses&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;city&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// this will return the city from the first address item.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is also an excellent type handling minimal library &lt;a href=&quot;https://www.npmjs.com/package/typy&quot; rel=&quot;noreferrer&quot;&gt;typy&lt;/a&gt; that does all this for you.&lt;/p&gt;\n    ","\n&lt;p&gt;Accessing dynamically multi levels object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;john doe&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;subobj&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;subsubobj&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;names&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am sub sub obj&quot;&lt;/span&gt;\n    }\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; level = &lt;span class=&quot;hljs-string&quot;&gt;&quot;subobj.subsubobj.names&quot;&lt;/span&gt;;\nlevel = level.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; currentObjState = obj;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; level.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n  currentObjState = currentObjState[level[i]];\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(currentObjState);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Working fiddle: &lt;a href=&quot;https://jsfiddle.net/andreitodorut/3mws3kjL/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/andreitodorut/3mws3kjL/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;strong&gt;JSONPath&lt;/strong&gt; would be one of the most flexible solutions if you are willing to include a library:\n&lt;a href=&quot;https://github.com/s3u/JSONPath&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/s3u/JSONPath&lt;/a&gt; (node and browser)&lt;/p&gt;\n\n&lt;p&gt;For your use case the json path would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$..&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; secondName = jsonPath.&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$..items[1].name&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I prefer JQuery. It&apos;s cleaner and easy to read.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;($.&lt;span class=&quot;hljs-title function_&quot;&gt;parseJSON&lt;/span&gt;(data), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(value.&amp;lt;propertyname&amp;gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are looking for one or more objects that meets certain criteria you have a few options using &lt;a href=&quot;https://www.npmjs.com/package/query-js&quot; rel=&quot;noreferrer&quot;&gt;query-js&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//will return all elements with an id larger than 1&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;where&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;});\n&lt;span class=&quot;hljs-comment&quot;&gt;//will return the first element with an id larger than 1&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;first&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;});\n&lt;span class=&quot;hljs-comment&quot;&gt;//will return the first element with an id larger than 1 &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//or the second argument if non are found&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;first&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;},{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There&apos;s also a &lt;code&gt;single&lt;/code&gt; and a &lt;code&gt;singleOrDefault&lt;/code&gt; they work much like &lt;code&gt;first&lt;/code&gt;and &lt;code&gt;firstOrDefault&lt;/code&gt;respectively. The only difference is that they will throw if &lt;em&gt;more&lt;/em&gt; than one match is found.&lt;/p&gt;\n\n&lt;p&gt;for further explanation of query-js you can start with this &lt;a href=&quot;http://runefs.com/2015/06/04/working-with-data-in-javascript/&quot; rel=&quot;noreferrer&quot;&gt;post&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;The Underscore js Way&lt;/h2&gt;\n&lt;p&gt;Which is a JavaScript library that provides a whole mess of useful &lt;code&gt;functional programming&lt;/code&gt; helpers without extending any built-in objects.&lt;/p&gt;\n&lt;h3&gt;Solution:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n  }]\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item = _.&lt;span class=&quot;hljs-title function_&quot;&gt;findWhere&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n});\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!_.&lt;span class=&quot;hljs-title function_&quot;&gt;isUndefined&lt;/span&gt;(item)) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;NAME =&amp;gt;&apos;&lt;/span&gt;, item.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//using find - &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item = _.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!_.&lt;span class=&quot;hljs-title function_&quot;&gt;isUndefined&lt;/span&gt;(item)) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;NAME =&amp;gt;&apos;&lt;/span&gt;, item.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Old question but as nobody mentioned lodash (just underscore).&lt;/p&gt;\n\n&lt;p&gt;In case you are already using lodash in your project, I think an elegant way to do this in a complex example:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Opt 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(response, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;output&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fund&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;children&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;group&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;myValue&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;same as:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Opt 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;response.&lt;span class=&quot;hljs-property&quot;&gt;output&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;fund&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;children&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;group&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myValue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The difference between the first and second option is that in the &lt;strong&gt;Opt 1&lt;/strong&gt; if you have one of the properties missing (undefined) in the path you don&apos;t get an error, it returns you the third parameter.&lt;/p&gt;\n\n&lt;p&gt;For array filter lodash has &lt;code&gt;_.find()&lt;/code&gt; but I&apos;d rather use the regular &lt;code&gt;filter()&lt;/code&gt;. But I still think the above method &lt;code&gt;_.get()&lt;/code&gt; is super useful when working with really complex data. I faced in the past really complex APIs and it was handy!&lt;/p&gt;\n\n&lt;p&gt;I hope it can be useful for who&apos;s looking for options to manipulate really complex data which the title implies.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t think questioner just only concern one level nested object, so I present the following demo to demonstrate how to access the node of deeply nested json object. All right, let&apos;s find the node with id &apos;5&apos;.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;aaa&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ccc&apos;&lt;/span&gt;\n      }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ddd&apos;&lt;/span&gt;\n      }]\n    }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bbb&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;eee&apos;&lt;/span&gt;\n      }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;fff&apos;&lt;/span&gt;\n      }]\n    }]\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonloop = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;Loop(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;);\n\njsonloop.&lt;span class=&quot;hljs-title function_&quot;&gt;findNodeById&lt;/span&gt;(data, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, node&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(err);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(node, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n  }\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://rawgit.com/dabeng/JSON-Loop/master/JSONLoop.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In 2020, you can use @babel/plugin-proposal-optional-chaining it is very easy to access nested values in an object. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: {\n   &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: {\n     &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; {\n   },\n  },\n },\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; baz = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj?.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;?.&lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// baz instance&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; safe = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj?.&lt;span class=&quot;hljs-property&quot;&gt;qux&lt;/span&gt;?.&lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; safe2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj?.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;qux&lt;/span&gt;?.(); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining&quot; rel=&quot;noreferrer&quot;&gt;https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-optional-chaining&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/tc39/proposal-optional-chaining&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;Dynamic approach&lt;/h2&gt;\n\n&lt;p&gt;In below &lt;code&gt;deep(data,key)&lt;/code&gt; function, you can use arbitrary &lt;code&gt;key&lt;/code&gt; string - in your case &lt;code&gt;items[1].name&lt;/code&gt; (you can use array notation &lt;code&gt;[i]&lt;/code&gt; at any level) - if key is invalid then undefined is return.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deep&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;o,k&lt;/span&gt;) =&amp;gt; k.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,c,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; m=c.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(.*?)\\[(\\d*)\\]/&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m &amp;amp;&amp;amp; a!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; a[m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a[m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]][+m[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a==&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: a[c];\n},o);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// TEST&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[1].name&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// arbitrary deep-key&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;}, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;},]\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( key,&lt;span class=&quot;hljs-string&quot;&gt;&apos;=&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;deep&lt;/span&gt;(data,key) );&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://api.jquery.com/jQuery.grep/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery&apos;s grep&lt;/a&gt; function lets you filter through an array:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n    }]\n};\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;grep&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//console id of item&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//console name of item&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item); &lt;span class=&quot;hljs-comment&quot;&gt;//console item object&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item; &lt;span class=&quot;hljs-comment&quot;&gt;//returns item object&lt;/span&gt;\n    }\n\n});\n&lt;span class=&quot;hljs-comment&quot;&gt;// Object {id: 2, name: &quot;bar&quot;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the syntax &lt;code&gt;jsonObject.key&lt;/code&gt; to access the the value. And if you want access a value from an array, then you can use the syntax &lt;code&gt;jsonObjectArray[index].key&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Here are the code examples to access various values to give you the idea.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n    }]\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// if you want &apos;bar&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// if you want array of item names&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// get the id of the item where name = &apos;bar&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; (x.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;) ? x.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// const path = &apos;info.value[0].item&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const obj = { info: { value: [ { item: &apos;it works!&apos; } ], randominfo: 3 }  }&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// getValue(path, obj)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt; path , obj&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newPath = path.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayPath = newPath.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\[\\.]+/&lt;/span&gt;) || newPath;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; final = arrayPath.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, k&lt;/span&gt;) =&amp;gt;&lt;/span&gt; obj ?  obj[k] : obj, obj)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; final;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an answer using &lt;a href=&quot;https://www.npmjs.com/package/object-scan&quot; rel=&quot;nofollow noreferrer&quot;&gt;object-scan&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;When accessing a single entry, this answer doesn&apos;t really provide much benefit over vanilla javascript. However interacting with multiple fields at the same time this answer can be more performant.&lt;/p&gt;\n&lt;p&gt;Here is how you could interact with a single field&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// const objectScan = require(&apos;object-scan&apos;);&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = { &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt; }] };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;haystack, needle&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectScan&lt;/span&gt;([needle], {\n  &lt;span class=&quot;hljs-attr&quot;&gt;abort&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;rtn&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;\n})(haystack);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;haystack, needle, value&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectScan&lt;/span&gt;([needle], {\n  &lt;span class=&quot;hljs-attr&quot;&gt;abort&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;rtn&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bool&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;filterFn&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ parent, property }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    parent[property] = value;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n  }\n})(haystack);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[1].name&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; bar&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[1].name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo2&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; { code: 42, items: [ { id: 1, name: &apos;foo&apos; }, { id: 2, name: &apos;foo2&apos; } ] }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://bundle.run/object-scan@13.8.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I&apos;m the author of &lt;a href=&quot;https://www.npmjs.com/package/object-scan&quot; rel=&quot;nofollow noreferrer&quot;&gt;object-scan&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;and here is how you could interact with multiple fields at the same time&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// const objectScan = require(&apos;object-scan&apos;);&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = { &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt; }] };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;haystack, ...needles&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectScan&lt;/span&gt;(needles, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;joined&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;rtn&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;entry&apos;&lt;/span&gt;\n})(haystack);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;haystack, actions&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectScan&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(actions), {\n  &lt;span class=&quot;hljs-attr&quot;&gt;rtn&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;count&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;filterFn&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ matchedBy, parent, property }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    matchedBy.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      parent[property] = actions[m];\n    })\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n  }\n})(haystack);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[0].name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[1].name&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; [ [ &apos;items[1].name&apos;, &apos;bar&apos; ], [ &apos;items[0].name&apos;, &apos;foo&apos; ] ]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(data, {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[0].name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo1&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;items[1].name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo2&apos;&lt;/span&gt;\n}));\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; { code: 42, items: [ { id: 1, name: &apos;foo1&apos; }, { id: 2, name: &apos;foo2&apos; } ] }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://bundle.run/object-scan@13.8.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I&apos;m the author of &lt;a href=&quot;https://www.npmjs.com/package/object-scan&quot; rel=&quot;nofollow noreferrer&quot;&gt;object-scan&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;And here is how one could find an entity in a deeply nested object searching by id (as asked in comment)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// const objectScan = require(&apos;object-scan&apos;);&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myData = { &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;aaa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ccc&apos;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ddd&apos;&lt;/span&gt; }] }, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bbb&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;items&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;eee&apos;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;fff&apos;&lt;/span&gt; }] }] };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;findItemById&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;haystack, id&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectScan&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;**(^items$).id&apos;&lt;/span&gt;], {\n  &lt;span class=&quot;hljs-attr&quot;&gt;abort&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;useArraySelector&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;rtn&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;parent&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;filterFn&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ value }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; value === id\n})(haystack);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;findItemById&lt;/span&gt;(myData, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; { id: 5, name: &apos;eee&apos; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.as-console-wrapper&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://bundle.run/object-scan@13.8.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I&apos;m the author of &lt;a href=&quot;https://www.npmjs.com/package/object-scan&quot; rel=&quot;nofollow noreferrer&quot;&gt;object-scan&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;this is how i have done this.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; groups = [\n        {\n            &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Group 1&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;members&lt;/span&gt;:[\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aftab&quot;&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;battry&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;10%&apos;&lt;/span&gt;\n                },\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jamal&quot;&lt;/span&gt;,\n                },\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hamid&quot;&lt;/span&gt;,\n                },\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aqeel&quot;&lt;/span&gt;,\n                },\n            ]\n        },\n        {\n            &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Group 2&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;members&lt;/span&gt;:[\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aftab&quot;&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;battry&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;10%&apos;&lt;/span&gt;\n                },\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jamal&quot;&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;battry&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;10%&apos;&lt;/span&gt;\n                },\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hamid&quot;&lt;/span&gt;,\n                },\n               \n            ]\n        },\n        {\n            &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Group 3&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;members&lt;/span&gt;:[\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aftab&quot;&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;battry&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;10%&apos;&lt;/span&gt;\n                },\n                \n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hamid&quot;&lt;/span&gt;,\n                },\n                {\n                    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aqeel&quot;&lt;/span&gt;,\n                },\n            ]\n        }\n    ]\n    \n    groups.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;//  if(item.id == 2){&lt;/span&gt;\n        item.&lt;span class=&quot;hljs-property&quot;&gt;members&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n                 element.&lt;span class=&quot;hljs-property&quot;&gt;battry&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;20%&quot;&lt;/span&gt;\n             }\n         })\n        &lt;span class=&quot;hljs-comment&quot;&gt;//}&lt;/span&gt;\n    })\n    \n    groups.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        item.&lt;span class=&quot;hljs-property&quot;&gt;members&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item)\n    })\n    })\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you&apos;re trying to find a path in a JSON string, you can dump your data into &lt;a href=&quot;https://jsonpathfinder.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsonpathfinder.com&lt;/a&gt; and click on the GUI elements. It&apos;ll generate the JS syntax for the path to the element.&lt;/p&gt;\n&lt;p&gt;Beyond that, for any arrays you might want to iterate, replace the relevant array offset indices like &lt;code&gt;[0]&lt;/code&gt; with a loop.&lt;/p&gt;\n&lt;p&gt;Here&apos;s a simpler version of the tool you can run here, or at &lt;a href=&quot;https://ggorlen.github.io/json-dive/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://ggorlen.github.io/json-dive/&lt;/a&gt;. Click the node you want to copy the path to your clipboard.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* code minified to make the tool easier to run without having to scroll */&lt;/span&gt;                                                         &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bracketsOnly=!&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,lastHighlighted={&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;:{}};&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;keyToStr&lt;/span&gt;=t=&amp;gt;!bracketsOnly&amp;amp;&amp;amp;&lt;span class=&quot;hljs-regexp&quot;&gt;/^[a-zA-Z_$][a-zA-Z$_\\d]*$/&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(t)?&lt;span class=&quot;hljs-string&quot;&gt;`.&lt;span class=&quot;hljs-subst&quot;&gt;${toHTML(t)}&lt;/span&gt;`&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;`[&amp;amp;quot;&lt;span class=&quot;hljs-subst&quot;&gt;${toHTML(t)}&lt;/span&gt;&amp;amp;quot;]`&lt;/span&gt;,pathToData=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`data-path=&quot;data&lt;span class=&quot;hljs-subst&quot;&gt;${t.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;/span&gt;&quot;`&lt;/span&gt;,htmlSpecialChars={&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;amp;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;lt;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;quot;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;#039;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\t&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\r&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\n&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;nbsp;&quot;&lt;/span&gt;},toHTML=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;+t).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[&amp;amp;&amp;lt;&amp;gt;&quot;&apos;\\t\\r\\n ]/g&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;htmlSpecialChars[t]),makeArray=&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t,e&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`\\n  [&amp;lt;ul &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(e)}&lt;/span&gt;&amp;gt;\\n    &lt;span class=&quot;hljs-subst&quot;&gt;${t.map((t,a)=&amp;gt;{e.push(&lt;span class=&quot;hljs-string&quot;&gt;`[&lt;span class=&quot;hljs-subst&quot;&gt;${a}&lt;/span&gt;]`&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n=&lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;li &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(e)}&lt;/span&gt;&amp;gt;\\n        &lt;span class=&quot;hljs-subst&quot;&gt;${pathify(t,e).trim()}&lt;/span&gt;,\\n      &amp;lt;/li&amp;gt;`&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.pop(),n}).join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;/span&gt;\\n  &amp;lt;/ul&amp;gt;]\\n`&lt;/span&gt;,makeObj=&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t,e&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`\\n  {&amp;lt;ul &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(e)}&lt;/span&gt;&amp;gt;\\n    &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.entries(t).map(([t,a])=&amp;gt;{e.push(keyToStr(t));&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n=&lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;li &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(e)}&lt;/span&gt;&amp;gt;\\n        &quot;&lt;span class=&quot;hljs-subst&quot;&gt;${toHTML(t)}&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-subst&quot;&gt;${pathify(a,e).trim()}&lt;/span&gt;,\\n      &amp;lt;/li&amp;gt;`&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.pop(),n}).join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;/span&gt;\\n  &amp;lt;/ul&amp;gt;}\\n`&lt;/span&gt;,pathify=&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t,e=[]&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(t)?&lt;span class=&quot;hljs-title function_&quot;&gt;makeArray&lt;/span&gt;(t,e):&lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;==&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; t&amp;amp;&amp;amp;t!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;?&lt;span class=&quot;hljs-title function_&quot;&gt;makeObj&lt;/span&gt;(t,e):&lt;span class=&quot;hljs-title function_&quot;&gt;toHTML&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;==&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; t?&lt;span class=&quot;hljs-string&quot;&gt;`&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${t}&lt;/span&gt;&quot;`&lt;/span&gt;:t),defaultJSON=&lt;span class=&quot;hljs-string&quot;&gt;&apos;{\\n  &quot;corge&quot;: &quot;test JSON... \\\\n   asdf\\\\t asdf&quot;,\\n  &quot;foo-bar&quot;: [\\n    {&quot;id&quot;: 42},\\n    [42, {&quot;foo&quot;: {&quot;baz&quot;: {&quot;ba  r&amp;lt;&amp;gt;!\\\\t&quot;: true, &quot;4quux&quot;: &quot;garply&quot;}}}]\\n  ]\\n}&apos;&lt;/span&gt;,$=&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelector&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;),$$=&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelectorAll&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;),resultEl=$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#result&quot;&lt;/span&gt;),pathEl=$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#path&quot;&lt;/span&gt;),tryToJSON=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{resultEl.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt;=&lt;span class=&quot;hljs-title function_&quot;&gt;pathify&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(t)),$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#error&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerText&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(t){resultEl.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#error&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerText&lt;/span&gt;=t}},copyToClipboard=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; e=&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;);e.&lt;span class=&quot;hljs-property&quot;&gt;innerText&lt;/span&gt;=t,&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(e),e.&lt;span class=&quot;hljs-title function_&quot;&gt;select&lt;/span&gt;(),&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;execCommand&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt;),&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeChild&lt;/span&gt;(e)},flashAlert=&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t,e=&lt;span class=&quot;hljs-number&quot;&gt;2e3&lt;/span&gt;&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a=&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;);a.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt;=t,a.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alert&quot;&lt;/span&gt;),&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(a),&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(),e)},handleClick=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{t.&lt;span class=&quot;hljs-title function_&quot;&gt;stopPropagation&lt;/span&gt;(),&lt;span class=&quot;hljs-title function_&quot;&gt;copyToClipboard&lt;/span&gt;(t.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataset&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;),&lt;span class=&quot;hljs-title function_&quot;&gt;flashAlert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;copied!&quot;&lt;/span&gt;),$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#path-out&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt;=t.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataset&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;},handleMouseOut=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{lastHighlighted.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;transparent&quot;&lt;/span&gt;,pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;},handleMouseOver=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{pathEl.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt;=t.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataset&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;,pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${t.pageX+&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;}&lt;/span&gt;px`&lt;/span&gt;,pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${t.pageY}&lt;/span&gt;px`&lt;/span&gt;,pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;block&quot;&lt;/span&gt;,lastHighlighted.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;transparent&quot;&lt;/span&gt;,(lastHighlighted=t.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;closest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;li&quot;&lt;/span&gt;)).&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#0ff&quot;&lt;/span&gt;},handleNewJSON=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{&lt;span class=&quot;hljs-title function_&quot;&gt;tryToJSON&lt;/span&gt;(t.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;),[...$$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#result *&quot;&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{t.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,handleClick),t.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mouseout&quot;&lt;/span&gt;,handleMouseOut),t.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mouseover&quot;&lt;/span&gt;,handleMouseOver)})};$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change&quot;&lt;/span&gt;,handleNewJSON),$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;keyup&quot;&lt;/span&gt;,handleNewJSON),$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;=defaultJSON,$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#brackets&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;=&amp;gt;&lt;/span&gt;{bracketsOnly=!bracketsOnly,&lt;span class=&quot;hljs-title function_&quot;&gt;handleNewJSON&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;}})}),&lt;span class=&quot;hljs-title function_&quot;&gt;handleNewJSON&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:defaultJSON}});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**/&lt;/span&gt;                                                                                       *{&lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;:border-box;&lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;:monospace;&lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;}&lt;span class=&quot;hljs-selector-id&quot;&gt;#path-out&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#0f0&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;3em&lt;/span&gt;}&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:relative;&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#f8f8f8&lt;/span&gt;}&lt;span class=&quot;hljs-selector-tag&quot;&gt;textarea&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;110px&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;resize&lt;/span&gt;:vertical}&lt;span class=&quot;hljs-selector-id&quot;&gt;#opts&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#e8e8e8&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;3em&lt;/span&gt;}&lt;span class=&quot;hljs-selector-id&quot;&gt;#opts&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;label&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;3em&lt;/span&gt;}&lt;span class=&quot;hljs-selector-id&quot;&gt;#path&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;transition&lt;/span&gt;:all &lt;span class=&quot;hljs-number&quot;&gt;50ms&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#fff&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;2em&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:absolute;&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:none}&lt;span class=&quot;hljs-selector-id&quot;&gt;#error&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;5em&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:red}&lt;span class=&quot;hljs-selector-id&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;:none}&lt;span class=&quot;hljs-selector-id&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;:pointer;&lt;span class=&quot;hljs-attribute&quot;&gt;border-left&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt; solid transparent}&lt;span class=&quot;hljs-selector-id&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;border-color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#ff0&lt;/span&gt;}&lt;span class=&quot;hljs-selector-class&quot;&gt;.alert&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#f0f&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;2em&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:fixed;&lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- --&amp;gt;&lt;/span&gt;                                                                                                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;opts&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;brackets only: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;brackets&quot;&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path-out&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click a node to copy path to clipboard&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;error&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Unminified (also available on &lt;a href=&quot;https://github.com/ggorlen/json-dive&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;):&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bracketsOnly = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; lastHighlighted = {&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: {}};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;keyToStr&lt;/span&gt; = k =&amp;gt;\n  !bracketsOnly &amp;amp;&amp;amp; &lt;span class=&quot;hljs-regexp&quot;&gt;/^[a-zA-Z_$][a-zA-Z$_\\d]*$/&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(k) \n    ? &lt;span class=&quot;hljs-string&quot;&gt;`.&lt;span class=&quot;hljs-subst&quot;&gt;${toHTML(k)}&lt;/span&gt;`&lt;/span&gt;\n    : &lt;span class=&quot;hljs-string&quot;&gt;`[&amp;amp;quot;&lt;span class=&quot;hljs-subst&quot;&gt;${toHTML(k)}&lt;/span&gt;&amp;amp;quot;]`&lt;/span&gt;\n;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pathToData&lt;/span&gt; = p =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;`data-path=&quot;data&lt;span class=&quot;hljs-subst&quot;&gt;${p.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;/span&gt;&quot;`&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; htmlSpecialChars = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;amp;&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;lt;&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;gt;&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;quot;&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;#039;&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\t&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\r&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\n&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;nbsp;&quot;&lt;/span&gt;,\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toHTML&lt;/span&gt; = x =&amp;gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; + x)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[&amp;amp;&amp;lt;&amp;gt;&quot;&apos;\\t\\r\\n ]/g&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt; =&amp;gt;&lt;/span&gt; htmlSpecialChars[m])\n;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeArray&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;x, path&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;`\n  [&amp;lt;ul &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(path)}&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;hljs-subst&quot;&gt;${x.map((e, i) =&amp;gt; {\n      path.push(&lt;span class=&quot;hljs-string&quot;&gt;`[&lt;span class=&quot;hljs-subst&quot;&gt;${i}&lt;/span&gt;]`&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; html = &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;li &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(path)}&lt;/span&gt;&amp;gt;\n        &lt;span class=&quot;hljs-subst&quot;&gt;${pathify(e, path).trim()}&lt;/span&gt;,\n      &amp;lt;/li&amp;gt;`&lt;/span&gt;;\n      path.pop();\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; html;\n    }).join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;/span&gt;\n  &amp;lt;/ul&amp;gt;]\n`&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeObj&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;x, path&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;`\n  {&amp;lt;ul &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(path)}&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.entries(x).map(([k, v]) =&amp;gt; {\n      path.push(keyToStr(k));\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; html = &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;li &lt;span class=&quot;hljs-subst&quot;&gt;${pathToData(path)}&lt;/span&gt;&amp;gt;\n        &quot;&lt;span class=&quot;hljs-subst&quot;&gt;${toHTML(k)}&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-subst&quot;&gt;${pathify(v, path).trim()}&lt;/span&gt;,\n      &amp;lt;/li&amp;gt;`&lt;/span&gt;;\n      path.pop();\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; html;\n    }).join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;/span&gt;\n  &amp;lt;/ul&amp;gt;}\n`&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pathify&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;x, path=[]&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(x)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeArray&lt;/span&gt;(x, path);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; &amp;amp;&amp;amp; x !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeObj&lt;/span&gt;(x, path);\n  }\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toHTML&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x === &lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;`&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${x}&lt;/span&gt;&quot;`&lt;/span&gt; : x);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; defaultJSON = &lt;span class=&quot;hljs-string&quot;&gt;`{\n  &quot;corge&quot;: &quot;test JSON... \\\\n   asdf\\\\t asdf&quot;,\n  &quot;foo-bar&quot;: [\n    {&quot;id&quot;: 42},\n    [42, {&quot;foo&quot;: {&quot;baz&quot;: {&quot;ba  r&amp;lt;&amp;gt;!\\\\t&quot;: true, &quot;4quux&quot;: &quot;garply&quot;}}}]\n  ]\n}`&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; $ = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelector&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; $$ = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelectorAll&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; resultEl = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#result&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; pathEl = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#path&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tryToJSON&lt;/span&gt; = v =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    resultEl.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;pathify&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(v));\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#error&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerText&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (err) {\n    resultEl.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#error&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerText&lt;/span&gt; = err;\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copyToClipboard&lt;/span&gt; = text =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ta = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;);\n  ta.&lt;span class=&quot;hljs-property&quot;&gt;innerText&lt;/span&gt; = text;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(ta);\n  ta.&lt;span class=&quot;hljs-title function_&quot;&gt;select&lt;/span&gt;();\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;execCommand&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeChild&lt;/span&gt;(ta);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flashAlert&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;text, timeoutMS=&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; alert = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;);\n  alert.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = text;\n  alert.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alert&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(alert);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; alert.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(), timeoutMS);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleClick&lt;/span&gt; = e =&amp;gt; {\n  e.&lt;span class=&quot;hljs-title function_&quot;&gt;stopPropagation&lt;/span&gt;();\n  &lt;span class=&quot;hljs-title function_&quot;&gt;copyToClipboard&lt;/span&gt;(e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataset&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;flashAlert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;copied!&quot;&lt;/span&gt;);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#path-out&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataset&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleMouseOut&lt;/span&gt; = e =&amp;gt; {\n  lastHighlighted.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;transparent&quot;&lt;/span&gt;;\n  pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleMouseOver&lt;/span&gt; = e =&amp;gt; {\n  pathEl.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataset&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;;\n  pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${e.pageX + &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;}&lt;/span&gt;px`&lt;/span&gt;;\n  pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${e.pageY}&lt;/span&gt;px`&lt;/span&gt;;\n  pathEl.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;block&quot;&lt;/span&gt;;\n  lastHighlighted.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;transparent&quot;&lt;/span&gt;;\n  lastHighlighted = e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;closest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;li&quot;&lt;/span&gt;);\n  lastHighlighted.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;#0ff&quot;&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleNewJSON&lt;/span&gt; = e =&amp;gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;tryToJSON&lt;/span&gt;(e.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n  [...$$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#result *&quot;&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    e.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, handleClick);\n    e.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mouseout&quot;&lt;/span&gt;, handleMouseOut);\n    e.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mouseover&quot;&lt;/span&gt;, handleMouseOver);\n  });\n};\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change&quot;&lt;/span&gt;, handleNewJSON);\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;keyup&quot;&lt;/span&gt;, handleNewJSON);\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = defaultJSON;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#brackets&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  bracketsOnly = !bracketsOnly;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;handleNewJSON&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;}});\n});\n&lt;span class=&quot;hljs-title function_&quot;&gt;handleNewJSON&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: defaultJSON}});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;* {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: monospace;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#path-out&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#0f0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.3em&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#f8f8f8&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;textarea&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;110px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;resize&lt;/span&gt;: vertical;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#opts&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#e8e8e8&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.3em&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#opts&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;label&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.3em&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#path&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transition&lt;/span&gt;: all &lt;span class=&quot;hljs-number&quot;&gt;0.05s&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.2em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#error&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ul&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n}\n\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border-left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt; solid transparent;\n}\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ff0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.alert&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#f0f&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.2em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: fixed;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;opts&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      brackets only: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;brackets&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path-out&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click a node to copy path to clipboard&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;error&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;This isn&apos;t intended as a substitute for &lt;a href=&quot;https://stackoverflow.com/a/11922384/6243352&quot;&gt;learning how to fish&lt;/a&gt; but can save time once you do know.&lt;/p&gt;\n    ","\n&lt;p&gt;what you need to do is really simple and it can be achieved trough recursivity:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; json_object = {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;item1&quot;&lt;/span&gt;:{\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        },\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;item2&quot;&lt;/span&gt;:{\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;pear&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n        },\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;item3&quot;&lt;/span&gt;:{\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;prices&quot;&lt;/span&gt;: {\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;9$&quot;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;59$&quot;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1$&quot;&lt;/span&gt;\n            }\n        }\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;walkJson&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json_object&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(obj &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; json_object){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; json_object[obj] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${obj}&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-subst&quot;&gt;${json_object[obj]}&lt;/span&gt;`&lt;/span&gt;);\n            }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${obj}&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-subst&quot;&gt;${json_object[obj]}&lt;/span&gt;`&lt;/span&gt;);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;walkJson&lt;/span&gt;(json_object[obj]);\n            }\n        }           \n    }\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;walkJson&lt;/span&gt;(json_object);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A pythonic, recursive and functional approach to unravel arbitrary JSON trees:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;handlers = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;list&lt;/span&gt;:  iterate,\n    &lt;span class=&quot;hljs-attr&quot;&gt;dict&lt;/span&gt;:  delve,\n    &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;:   emit_li,\n    &lt;span class=&quot;hljs-attr&quot;&gt;float&lt;/span&gt;: emit_li,\n}\n\ndef &lt;span class=&quot;hljs-title function_&quot;&gt;emit_li&lt;/span&gt;(stuff, strong=&lt;span class=&quot;hljs-title class_&quot;&gt;False&lt;/span&gt;):\n    emission = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;%s&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; strong &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;li&amp;gt;%s&amp;lt;/li&amp;gt;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(emission % stuff)\n\ndef &lt;span class=&quot;hljs-title function_&quot;&gt;iterate&lt;/span&gt;(a_list):\n    &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;ul&amp;gt;&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(unravel, a_list)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/ul&amp;gt;&apos;&lt;/span&gt;)\n\ndef &lt;span class=&quot;hljs-title function_&quot;&gt;delve&lt;/span&gt;(a_dict):\n    &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;ul&amp;gt;&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a_dict.&lt;span class=&quot;hljs-title function_&quot;&gt;items&lt;/span&gt;():\n        &lt;span class=&quot;hljs-title function_&quot;&gt;emit_li&lt;/span&gt;(key, strong=&lt;span class=&quot;hljs-title class_&quot;&gt;True&lt;/span&gt;)\n        &lt;span class=&quot;hljs-title function_&quot;&gt;unravel&lt;/span&gt;(value)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/ul&amp;gt;&apos;&lt;/span&gt;)\n\ndef &lt;span class=&quot;hljs-title function_&quot;&gt;unravel&lt;/span&gt;(structure):\n    h = handlers[&lt;span class=&quot;hljs-title function_&quot;&gt;type&lt;/span&gt;(structure)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(structure)\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;unravel&lt;/span&gt;(data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;em&gt;data&lt;/em&gt; is a python list (parsed from a JSON text string):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data = [\n    {&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;customKey1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;customValue1&apos;&lt;/span&gt;,\n           &lt;span class=&quot;hljs-string&quot;&gt;&apos;customKey2&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;customSubKey1&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;customSubSubKey1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;keyvalue&apos;&lt;/span&gt;}}},\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;geometry&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;location&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;lat&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;37.3860517&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;lng&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;122.0838511&lt;/span&gt;},\n               &lt;span class=&quot;hljs-string&quot;&gt;&apos;viewport&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;northeast&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;lat&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;37.4508789&lt;/span&gt;,\n                                          &lt;span class=&quot;hljs-string&quot;&gt;&apos;lng&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;122.0446721&lt;/span&gt;},\n                            &lt;span class=&quot;hljs-string&quot;&gt;&apos;southwest&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;lat&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;37.3567599&lt;/span&gt;,\n                                          &lt;span class=&quot;hljs-string&quot;&gt;&apos;lng&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;122.1178619&lt;/span&gt;}}},\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mountain View&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;scope&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;GOOGLE&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;types&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;locality&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;political&apos;&lt;/span&gt;]}\n]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My &lt;code&gt;stringdata&lt;/code&gt; is coming from PHP file but still, I indicate here in &lt;code&gt;var&lt;/code&gt;. When i directly take my json into &lt;code&gt;obj&lt;/code&gt; it will nothing show thats why i put my json file as&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var obj=JSON.parse(stringdata);&lt;/code&gt; \nso after that i get &lt;code&gt;message&lt;/code&gt; obj and show in alert box then I get &lt;code&gt;data&lt;/code&gt; which is json array and store in one varible &lt;code&gt;ArrObj&lt;/code&gt; then i read first object of that array with key value like this &lt;code&gt;ArrObj[0].id&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; stringdata={\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;working&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;: [{\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n         }]\n      };\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj=&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(stringdata);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(obj[key]);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keyobj = &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrObj&lt;/span&gt; =obj[keyobj];\n\n                &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;ArrObj&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    "],"30":["\n&lt;p&gt;Backticks are to be used for table and column identifiers, but are only necessary when the identifier is a &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot; rel=&quot;noreferrer&quot;&gt;MySQL reserved keyword&lt;/a&gt;, or when the identifier contains whitespace characters or characters beyond a limited set (see below) It is often recommended to avoid using reserved keywords as column or table identifiers when possible, avoiding the quoting issue.&lt;/p&gt;\n&lt;p&gt;Single quotes should be used for string values like in the &lt;code&gt;VALUES()&lt;/code&gt; list.  Double quotes are supported by MySQL for string values as well, but single quotes are more widely accepted by other RDBMS, so it is a good habit to use single quotes instead of double.&lt;/p&gt;\n&lt;p&gt;MySQL also expects &lt;code&gt;DATE&lt;/code&gt; and &lt;code&gt;DATETIME&lt;/code&gt; literal values to be single-quoted as strings like &lt;code&gt;&apos;2001-01-01 00:00:00&apos;&lt;/code&gt;. Consult &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/date-and-time-literals.html&quot; rel=&quot;noreferrer&quot;&gt;the Date and Time Literals&lt;/a&gt; documentation for more details, in particular alternatives to using the hyphen &lt;code&gt;-&lt;/code&gt; as a segment delimiter in date strings.&lt;/p&gt;\n&lt;p&gt;So using your example, I would double-quote the PHP string and use single quotes on the values &lt;code&gt;&apos;val1&apos;, &apos;val2&apos;&lt;/code&gt;.  &lt;code&gt;NULL&lt;/code&gt; is a MySQL keyword, and a special (non)-value, and is therefore unquoted.&lt;/p&gt;\n&lt;p&gt;None of these table or column identifiers are reserved words or make use of characters requiring quoting, but I&apos;ve quoted them anyway with backticks (more on this later...).&lt;/p&gt;\n&lt;p&gt;Functions native to the RDBMS (for example, &lt;code&gt;NOW()&lt;/code&gt; in MySQL) should not be quoted, although their arguments are subject to the same string or identifier quoting rules already mentioned.&lt;/p&gt;\n&lt;pre&gt;Backtick (`)\ntable &amp;amp; column \n                                                          \n$query = &quot;&lt;b&gt;INSERT INTO `table` (`id`, `col1`, `col2`, `date`, `updated`) \n                       VALUES (NULL, &apos;val1&apos;, &apos;val2&apos;, &apos;2001-01-01&apos;, NOW())&lt;/b&gt;&quot;;\n                                                          \nUnquoted keyword                                    \nSingle-quoted (&apos;) strings               \nSingle-quoted (&apos;) DATE      \nUnquoted function             \n&lt;/pre&gt;\n&lt;h3&gt;Variable interpolation&lt;/h3&gt;\n&lt;p&gt;The quoting patterns for variables do not change, although if you intend to interpolate the variables directly in a string, it must be double-quoted in PHP. Just make sure that you have properly escaped the variables for use in SQL. (&lt;a href=&quot;https://stackoverflow.com/questions/60174/how-to-prevent-sql-injection-in-php&quot;&gt;It is recommended to use an API supporting prepared statements instead, as protection against SQL injection&lt;/a&gt;).&lt;/p&gt;\n&lt;pre&gt;// Same thing with some variable replacements\n// Here, a variable table name $table is backtick-quoted, and variables\n// in the VALUES list are single-quoted \n$query = &quot;INSERT INTO &lt;b&gt;`$table`&lt;/b&gt; (`id`, `col1`, `col2`, `date`) VALUES (NULL, &lt;b&gt;&apos;$val1&apos;&lt;/b&gt;, &lt;b&gt;&apos;$val2&apos;&lt;/b&gt;, &lt;b&gt;&apos;$date&apos;&lt;/b&gt;)&quot;;\n&lt;/pre&gt;\n&lt;h3&gt;Prepared statements&lt;/h3&gt;\n&lt;p&gt;When working with prepared statements, consult the documentation to determine whether or not the statement&apos;s placeholders must be quoted.  The most popular APIs available in PHP, PDO and MySQLi, expect &lt;em&gt;unquoted&lt;/em&gt; placeholders, as do most prepared statement APIs in other languages:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; PDO example &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; named parameters, unquoted\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `table` (`id`, `col1`, `col2`, `date`) VALUES (:id, :col1, :col2, :date)&quot;;\n\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; MySQLi example &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; ? parameters, unquoted\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `table` (`id`, `col1`, `col2`, `date`) VALUES (?, ?, ?, ?)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Characters requring backtick quoting in identifiers:&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/identifiers.html&quot; rel=&quot;noreferrer&quot;&gt;According to MySQL documentation&lt;/a&gt;, you do not need to quote (backtick) identifiers using the following character set:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;ASCII: &lt;code&gt;[0-9,a-z,A-Z$_]&lt;/code&gt; (basic Latin letters, digits 0-9, dollar, underscore)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;You can use characters beyond that set as table or column identifiers, including whitespace for example, but then you &lt;em&gt;must&lt;/em&gt; quote (backtick) them.&lt;/p&gt;\n&lt;p&gt;Also, although numbers are valid characters for identifiers, identifiers cannot consist solely of numbers. If they do they must be wrapped in backticks.&lt;/p&gt;\n    ","\n&lt;p&gt;There are two types of quotes in MySQL:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;&apos;&lt;/code&gt; for enclosing string literals&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;`&lt;/code&gt; for enclosing identifiers such as table and column names&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;And then there is &lt;code&gt;&quot;&lt;/code&gt; which is a special case. It could be used for &lt;em&gt;one&lt;/em&gt; of above-mentioned purposes at a time depending on MySQL server&apos;s &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sql_mode&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;em&gt;By default&lt;/em&gt; the &lt;code&gt;&quot;&lt;/code&gt; character can be used to enclose string literals just like &lt;code&gt;&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;In &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_ansi_quotes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ANSI_QUOTES&lt;/code&gt;&lt;/a&gt; mode the &lt;code&gt;&quot;&lt;/code&gt; character can be used to enclose identifiers just like &lt;code&gt;`&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;The following query will produce different results (or errors) depending on SQL mode:&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &quot;column&quot; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; foo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;bar&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;ANSI_QUOTES disabled&lt;/h3&gt;\n&lt;p&gt;The query will select the string literal &lt;code&gt;&quot;column&quot;&lt;/code&gt; where column &lt;code&gt;foo&lt;/code&gt; is equal to string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;ANSI_QUOTES enabled&lt;/h3&gt;\n&lt;p&gt;The query will select the column &lt;code&gt;column&lt;/code&gt; where column &lt;code&gt;foo&lt;/code&gt; is equal to column &lt;code&gt;bar&lt;/code&gt;&lt;/p&gt;\n&lt;h3&gt;When to use what&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;I suggest that you avoid using &lt;code&gt;&quot;&lt;/code&gt; so that your code becomes independent of SQL modes&lt;/li&gt;\n&lt;li&gt;Always quote identifiers since it is a good practice (quite a few questions on SO discuss this)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;em&gt;(There are good answers above regarding the SQL nature of your question, but this may also be relevant if you are new to PHP.)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Perhaps it is important to mention that PHP handles single and double quoted strings differently...&lt;/p&gt;\n\n&lt;p&gt;Single-quoted strings are &apos;literals&apos; and are pretty much WYSIWYG strings. Double-quoted strings are interpreted by PHP for possible variable-substitution (backticks in PHP are not exactly strings; they execute a command in the shell and return the result).&lt;/p&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$foo &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;bar&quot;;\necho &lt;span class=&quot;hljs-string&quot;&gt;&apos;there is a $foo&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; There &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a $foo\necho &quot;there is a $foo&quot;; &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; There &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a bar\necho `ls &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;l`; &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; ... a directory list\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Backticks are generally used to indicate an &lt;code&gt;identifier&lt;/code&gt; and as well be &lt;strong&gt;safe&lt;/strong&gt; from accidentally using the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot; rel=&quot;noreferrer&quot;&gt;Reserved Keywords&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;Use `database`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the backticks will help the server to understand that the &lt;code&gt;database&lt;/code&gt; is in fact the name of the database, not the database identifier.&lt;/p&gt;\n\n&lt;p&gt;Same can be done for the table names and field names. This is a very &lt;em&gt;good habit&lt;/em&gt; if you wrap your database identifier with backticks.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Check &lt;a href=&quot;https://stackoverflow.com/a/261476/295264&quot;&gt;this&lt;/a&gt; answer to understand more about backticks.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now about Double quotes &amp;amp; Single Quotes (Michael has already mentioned that).&lt;/p&gt;\n\n&lt;p&gt;But, to define a value you have to use either single or double quotes. Lets see another example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; `tablename` (`id, `title`) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, title1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here I have deliberately forgotten to wrap the &lt;code&gt;title1&lt;/code&gt; with quotes. Now the server will take the &lt;code&gt;title1&lt;/code&gt; as a column name (i.e. an identifier). So, to indicate that it&apos;s a value you have to use either double or single quotes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; `tablename` (`id, `title`) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;title1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now, in combination with PHP, double quotes and single quotes make your query writing time much easier. Let&apos;s see a modified version of the query in your question.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `table` (`id`, `col1`, `col2`) VALUES (NULL, &apos;$val1&apos;, &apos;$val2&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, using double quotes in the PHP, you will make the variables &lt;code&gt;$val1&lt;/code&gt;, and &lt;code&gt;$val2&lt;/code&gt; to use their values thus creating a perfectly valid query. Like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$val1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;my value 1&quot;;\n$val2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;my value 2&quot;;\n$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `table` (`id`, `col1`, `col2`) VALUES (NULL, &apos;$val1&apos;, &apos;$val2&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will make&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; `&lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;` (`id`, `col1`, `col2`) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;my value 1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;my value 2&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In MySQL, these symbols are used to delimit a query &lt;code&gt;`&lt;/code&gt; ,&lt;code&gt;&quot;&lt;/code&gt; ,&lt;code&gt;&apos;&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; .&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;&apos;&lt;/code&gt; are used for enclosing string-like values &lt;code&gt;&quot;26-01-2014 00:00:00&quot;&lt;/code&gt; or &lt;code&gt;&apos;26-01-2014 00:00:00&apos;&lt;/code&gt; . These symbols are only for strings, not aggregate functions like &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, or &lt;code&gt;max&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;`&lt;/code&gt;  is used for enclosing table or column names, e.g. &lt;code&gt;select `column_name` from `table_name` where id=&apos;2&apos;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; simply enclose parts of a query e.g.   &lt;code&gt;select `column_name` from `table_name` where (id=&apos;2&apos; and gender=&apos;male&apos;) or name=&apos;rakesh&apos;&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The string literals in MySQL and PHP are the same.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A string is a sequence of bytes or characters, enclosed within either\n  single quote (&apos;) or double quote (&quot;) characters.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So if your string contains single quotes, then you could use double quotes to quote the string, or if it contains double quotes, then you could use single quotes to quote the string. But if your string contains both single quotes and double quotes, you need to escape the one that used to quote the string.&lt;/p&gt;\n\n&lt;p&gt;Mostly, we use single quotes for an SQL string value, so we need to use double quotes for a PHP string.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO table (id, col1, col2) VALUES (NULL, &apos;val1&apos;, &apos;val2&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you could use a variable in PHP&apos;s double-quoted string:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO table (id, col1, col2) VALUES (NULL, &apos;$val1&apos;, &apos;$val2&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But if &lt;code&gt;$val1&lt;/code&gt; or &lt;code&gt;$val2&lt;/code&gt; contains single quotes, that will make your SQL be wrong. So you need to escape it before it is used in sql; that is what &lt;code&gt;mysql_real_escape_string&lt;/code&gt; is for. (Although a prepared statement is better.)&lt;/p&gt;\n    ","\n&lt;p&gt;There has been many helpful answers here, generally culminating into two points.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;BACKTICKS(`) are used around identifier names.&lt;/li&gt;\n&lt;li&gt;SINGLE QUOTES(&apos;) are used around values. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;AND as @MichaelBerkowski said&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Backticks are to be used for table and column identifiers, but are\n  only necessary when the identifier is a &lt;code&gt;MySQL&lt;/code&gt; reserved keyword, or\n  when the identifier contains whitespace characters or characters\n  beyond a limited set (see below) It is often recommended to avoid\n  using reserved keywords as column or table identifiers when possible,\n  avoiding the quoting issue.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is a case though where an identifier can neither be a &lt;em&gt;reserved keyword&lt;/em&gt; or contain &lt;em&gt;whitespace&lt;/em&gt; or &lt;em&gt;characters beyond limited set&lt;/em&gt; but necessarily require backticks around them.&lt;/p&gt;\n\n&lt;p&gt;EXAMPLE&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;123E10&lt;/code&gt; is a valid identifier name but also a valid &lt;code&gt;INTEGER&lt;/code&gt; literal.&lt;/p&gt;\n\n&lt;p&gt;[Without going into detail how you would get such an identifier name], Suppose I want to create a temporary table named &lt;code&gt;123456e6&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;No ERROR on backticks.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;DB [XXX]&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; temporary &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; `&lt;span class=&quot;hljs-number&quot;&gt;123456e6&lt;/span&gt;` (`id` &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;));\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ERROR when not using backticks.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;DB [XXX]&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; temporary &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123451e6&lt;/span&gt; (`id` &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;));\nERROR &lt;span class=&quot;hljs-number&quot;&gt;1064&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;42000&lt;/span&gt;): You have an error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; your &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; syntax; &lt;span class=&quot;hljs-keyword&quot;&gt;check&lt;/span&gt; the manual that corresponds &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; your MariaDB server version &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;hljs-keyword&quot;&gt;right&lt;/span&gt; syntax &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; use near &lt;span class=&quot;hljs-string&quot;&gt;&apos;123451e6 (`id` char (8))&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, &lt;code&gt;123451a6&lt;/code&gt; is a perfectly fine identifier name (without back ticks).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;DB [XXX]&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; temporary &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123451&lt;/span&gt;a6 (`id` &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;));\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is completely because &lt;code&gt;1234156e6&lt;/code&gt; is also an exponential number.&lt;/p&gt;\n    ","\n&lt;p&gt;In combination of PHP and MySQL, double quotes and single quotes make your query-writing time so much easier. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `table` (`id`, `col1`, `col2`) VALUES (NULL, &apos;$val1&apos;, &apos;$val2&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, suppose you are using a direct post variable into the MySQL query then, use it this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO `table` (`id`, `name`, `email`) VALUES (&apos; &quot;.$_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;].&quot; &apos;, &apos; &quot;.$_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;].&quot; &apos;, &apos; &quot;.$_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;].&quot; &apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the best practice for using PHP variables into MySQL.&lt;/p&gt;\n    ","\n&lt;p&gt;If table cols and values are variables then there are two ways:&lt;/p&gt;\n\n&lt;p&gt;With double quotes &lt;code&gt;&quot;&quot;&lt;/code&gt; the complete query:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO $table_name (id, $col1, $col2)\n                 VALUES (NULL, &apos;$val1&apos;, &apos;$val2&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; $query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;INSERT INTO &quot;.$table_name.&quot; (id, &quot;.$col1.&quot;, &quot;.$col2.&quot;)\n               VALUES (NULL, &apos;&quot;.$val1.&quot;&apos;, &apos;&quot;.$val2.&quot;&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With single quotes &lt;code&gt;&apos;&apos;&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;INSERT INTO &apos;&lt;/span&gt;.$table_name.&lt;span class=&quot;hljs-string&quot;&gt;&apos; (id, &apos;&lt;/span&gt;.$col1.&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;.$col2.&lt;span class=&quot;hljs-string&quot;&gt;&apos;)\n             VALUES (NULL, &apos;&lt;/span&gt;.$val1.&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;.$val2.&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use back ticks &lt;code&gt;``&lt;/code&gt; when a column/value name is similar to a MySQL reserved keyword.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are denoting a column name with a table name then use back ticks like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;`table_name`&lt;/code&gt;. &lt;code&gt;`column_name`&lt;/code&gt;   &amp;lt;-- Note: exclude &lt;code&gt;.&lt;/code&gt;  from back ticks.&lt;/p&gt;\n    ","\n&lt;p&gt;Single quotes should be used for string values like in the VALUES() list.&lt;/p&gt;\n\n&lt;p&gt;Backticks are generally used to indicate an identifier and as well be safe from accidentally using the reserved keywords.&lt;/p&gt;\n\n&lt;p&gt;In combination of PHP and MySQL, double quotes and single quotes make your query writing time so much easier.&lt;/p&gt;\n    ","\n&lt;p&gt;Besides all of the (well-explained) answers, there hasn&apos;t been the following mentioned and I visit this Q&amp;amp;A quite often.&lt;/p&gt;\n\n&lt;p&gt;In a nutshell; &lt;strong&gt;MySQL thinks you want to do math&lt;/strong&gt; on its own table/column and interprets hyphens such as &quot;e-mail&quot; as &lt;code&gt;e&lt;/code&gt; &lt;strong&gt;minus&lt;/strong&gt; &lt;code&gt;mail&lt;/code&gt;. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; So I thought I would add this as an &quot;FYI&quot; type of answer for those who are completely new to working with databases and who may not understand the technical terms described already.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL servers and MySQL, PostgreySQL, Oracle don&apos;t understand double quotes(&quot;). Thus your query should be free from double quotes(&quot;) and should only use single quotes(&apos;).&lt;/p&gt;\n\n&lt;p&gt;Back-trip(`) is optional to use in SQL and is used for table name, db name and column names.&lt;/p&gt;\n\n&lt;p&gt;If you are trying to write query in your back-end to call MySQL then you can use double quote(&quot;) or single quotes(&apos;) to assign query to a variable like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;let query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;select id, name from accounts&quot;;\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Or&lt;/span&gt;\nlet query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;select id, name from accounts&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If ther&apos;s a &lt;code&gt;where&lt;/code&gt; statement in your query and/or trying to &lt;code&gt;insert&lt;/code&gt; a value and/or an &lt;code&gt;update&lt;/code&gt; of value which is string use single quote(&apos;) for these values like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;let querySelect &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;select id, name from accounts where name = &apos;John&apos;&quot;;\nlet queryUpdate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;update accounts set name = &apos;John&apos; where id = 8&quot;;\nlet queryInsert &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;insert into accounts(name) values(&apos;John&apos;)&quot;;\n\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;Please &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; that &lt;span class=&quot;hljs-keyword&quot;&gt;double&lt;/span&gt; quotes &lt;span class=&quot;hljs-keyword&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; be used &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; assigning string &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; our variable &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the query\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;All&lt;/span&gt; these below will generate error\n\nlet querySelect &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;select id, name from accounts where name = &quot;John&quot;&apos;&lt;/span&gt;;\nlet queryUpdate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;update accounts set name = &quot;John&quot; where id = 8&apos;&lt;/span&gt;;\nlet queryInsert &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;insert into accounts(name) values(&quot;John&quot;)&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; MySQL &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; doesn&lt;span class=&quot;hljs-string&quot;&gt;&apos;t understand double quotes(&quot;), these all will generate error.\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to stay out of this confusion when to use double quotes(&quot;) and single quotes(&apos;), would recommend to stick with single quotes(&apos;) this will include backslash() like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;let query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;select is, name from accounts where name = \\&apos;&lt;/span&gt;John\\&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Problem with double(&quot;) or single(&apos;) quotes arise when we had to assign some value dynamic and perform some string concatenation like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;let query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;select id, name from accounts where name = &quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; fName &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot; &quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; lName;\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;This will generate error &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; it must be &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;John Smith&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;However our statement made it &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; John Smith\n\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; resolve such errors use\nlet query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;select id, name from accounts where name = &apos;&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; fName &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot; &quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; lName &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot;&apos;&quot;;\n\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; backslash(\\)\nlet query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;select id, name from accounts where name = \\&apos;&apos; + fName + &apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; + lName + &apos;&lt;/span&gt;\\&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If need further clearance do follow &lt;a href=&quot;https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript&quot;&gt;quotes in JavaScript&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;It is sometimes useful to not use quotes... because this can highlight issues in the code generating the query... For example:&lt;/p&gt;\n&lt;p&gt;Where x and y are should always be integers...&lt;/p&gt;\n&lt;p&gt;SELECT * FROM &lt;code&gt;table&lt;/code&gt; WHERE x= AND y=0&lt;/p&gt;\n&lt;p&gt;Is a SQL syntax error... a little lazy but can be useful...&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In Simple Words:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Quotes (Single and Double) are used around strings.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Backticks are used around table and column identifiers.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Achieving Single &amp;amp; Double Quotes Together:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;~ If we want to achieve this,&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/lPGYV.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lPGYV.png&quot; alt=&quot;Output&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Try this,&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;SELECT &quot;They&apos;ve found this tutorial to be helpful&quot;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;~ Want to achieve this:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/q0Is5.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/q0Is5.png&quot; alt=&quot;Image2&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Try this,&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;SELECT &apos;They\\&apos;ve responded, &quot;We found this tutorial helpful&quot;&apos;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Complete Explanation:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/t4eX8.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/t4eX8.png&quot; alt=&quot;complete explaination&quot;&gt;&lt;/a&gt;:&lt;/p&gt;\n    "]},"page":"117","randomQuestions":[{"title":"Copy array by value","slug":"copy-array-by-value-1657387649531"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306"},{"title":"Where should I put <script> tags in HTML markup?","slug":"where-should-i-put-lessscriptgreater-tags-in-html-markup-1657388350798"},{"title":"Convert form data to JavaScript object with jQuery","slug":"convert-form-data-to-javascript-object-with-jquery-1657388036834"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"How to remove items from a list while iterating?","slug":"how-to-remove-items-from-a-list-while-iterating-1657384496375"},{"title":"How do I vertically center text with CSS? [duplicate]","slug":"how-do-i-vertically-center-text-with-css-duplicate-1657387645821"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"Change the maximum upload file size","slug":"change-the-maximum-upload-file-size-1657388495156"},{"title":"How do I select rows from a DataFrame based on column values?","slug":"how-do-i-select-rows-from-a-dataframe-based-on-column-values-1657384901065"},{"title":"Importing installed package from script raises \"AttributeError: module has no attribute\" or \"ImportError: cannot import name\"","slug":"importing-installed-package-from-script-raises-\"attributeerror:-module-has-no-attribute\"-or-\"importerror:-cannot-import-name\"-1657387790607"},{"title":"How to access a local variable from a different function using pointers?","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"What special characters must be escaped in regular expressions?","slug":"what-special-characters-must-be-escaped-in-regular-expressions-1657387465381"},{"title":"How do I create variable variables?","slug":"how-do-i-create-variable-variables-1657384387679"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"}]},"__N_SSG":true}